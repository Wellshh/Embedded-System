
Lab11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c02c  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003338  0800c218  0800c218  0000d218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f550  0800f550  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f550  0800f550  00010550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f558  0800f558  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f558  0800f558  00010558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f55c  0800f55c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800f560  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001d8  0800f738  000111d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  0800f738  000113d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a911  00000000  00000000  00011201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5b  00000000  00000000  0001bb12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  0001d770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d7  00000000  00000000  0001e060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a915  00000000  00000000  0001e737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c68a  00000000  00000000  0003904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000981c2  00000000  00000000  000456d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd898  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e8  00000000  00000000  000dd8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000e0dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d8 	.word	0x200001d8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800c1fc 	.word	0x0800c1fc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001dc 	.word	0x200001dc
 8000224:	0800c1fc 	.word	0x0800c1fc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <lcd_wr_xdata>:
 *              ʡ����ռ�.
 * @param       data : Ҫд�������
 * @retval      ��
 */
void lcd_wr_xdata(uint16_t data)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
    LCD_RS(1);
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <lcd_wr_xdata+0x40>)
 8000bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bb0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <lcd_wr_xdata+0x40>)
 8000bb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bb8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(data);
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <lcd_wr_xdata+0x44>)
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	60d3      	str	r3, [r2, #12]
    LCD_WR(0);
 8000bc0:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <lcd_wr_xdata+0x40>)
 8000bc2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bc6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <lcd_wr_xdata+0x40>)
 8000bca:	2280      	movs	r2, #128	@ 0x80
 8000bcc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000bce:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <lcd_wr_xdata+0x40>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bd4:	611a      	str	r2, [r3, #16]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40010c00 	.word	0x40010c00

08000be8 <lcd_write_reg>:
 * @param       regno:�Ĵ������/��ַ
 * @param       data:Ҫд�������
 * @retval      ��
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	80fb      	strh	r3, [r7, #6]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	80bb      	strh	r3, [r7, #4]
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000bfc:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <lcd_write_reg+0x7c>)
 8000bfe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000c02:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <lcd_write_reg+0x7c>)
 8000c06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c0a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000c0c:	89fb      	ldrh	r3, [r7, #14]
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <lcd_write_reg+0x80>)
 8000c12:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <lcd_write_reg+0x7c>)
 8000c16:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c1a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000c1c:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <lcd_write_reg+0x7c>)
 8000c1e:	2280      	movs	r2, #128	@ 0x80
 8000c20:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <lcd_write_reg+0x7c>)
 8000c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c28:	611a      	str	r2, [r3, #16]
}
 8000c2a:	bf00      	nop
    lcd_wr_regno(regno);    /* д��Ҫд�ļĴ������ */
    lcd_wr_data(data);      /* д������ */
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <lcd_write_reg+0x7c>)
 8000c2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <lcd_write_reg+0x7c>)
 8000c36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c3a:	611a      	str	r2, [r3, #16]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <lcd_write_reg+0x80>)
 8000c3e:	88bb      	ldrh	r3, [r7, #4]
 8000c40:	60d3      	str	r3, [r2, #12]
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <lcd_write_reg+0x7c>)
 8000c44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <lcd_write_reg+0x7c>)
 8000c4c:	2280      	movs	r2, #128	@ 0x80
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <lcd_write_reg+0x7c>)
 8000c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c56:	611a      	str	r2, [r3, #16]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40010c00 	.word	0x40010c00

08000c6c <lcd_opt_delay>:
 * @brief       LCD��ʱ����,�����ڲ�����mdk -O1ʱ���Ż�ʱ��Ҫ���õĵط�
 * @param       t:��ʱ����ֵ
 * @retval      ��
 */
static void lcd_opt_delay(uint32_t i)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
    while (i--);
 8000c74:	bf00      	nop
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	1e5a      	subs	r2, r3, #1
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1fa      	bne.n	8000c76 <lcd_opt_delay+0xa>
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <lcd_rd_data>:
 * @brief       LCD������
 * @param       ��
 * @retval      ��ȡ��������
 */
static uint16_t lcd_rd_data(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* ��ֹ���Ż� */
    
    GPIO_InitTypeDef gpio_init_struct;
    /* LCD_DATA ����ģʽ����, ��������, ׼���������� */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000c92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c96:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct); 
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4818      	ldr	r0, [pc, #96]	@ (8000d0c <lcd_rd_data+0x80>)
 8000caa:	f007 faff 	bl	80082ac <HAL_GPIO_Init>

    LCD_RS(1);              /* RS=1,��ʾ�������� */
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <lcd_rd_data+0x84>)
 8000cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cb4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <lcd_rd_data+0x84>)
 8000cb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cbc:	611a      	str	r2, [r3, #16]
    LCD_RD(0);
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <lcd_rd_data+0x84>)
 8000cc0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cc4:	611a      	str	r2, [r3, #16]
    lcd_opt_delay(2);
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f7ff ffd0 	bl	8000c6c <lcd_opt_delay>
    ram = LCD_DATA_IN;      /* ��ȡ���� */
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <lcd_rd_data+0x80>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	82fb      	strh	r3, [r7, #22]
    LCD_RD(1);
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <lcd_rd_data+0x84>)
 8000cd6:	2240      	movs	r2, #64	@ 0x40
 8000cd8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <lcd_rd_data+0x84>)
 8000cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce0:	611a      	str	r2, [r3, #16]
    
    /* LCD_DATA ����ģʽ����, �������, �ָ����״̬ */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000ce2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ce6:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <lcd_rd_data+0x80>)
 8000cfa:	f007 fad7 	bl	80082ac <HAL_GPIO_Init>

    return ram;
 8000cfe:	8afb      	ldrh	r3, [r7, #22]
 8000d00:	b29b      	uxth	r3, r3
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40010c00 	.word	0x40010c00
 8000d10:	40011000 	.word	0x40011000

08000d14 <lcd_set_cursor>:
 * @brief       ���ù��λ��(��RGB����Ч)
 * @param       x,y: ����
 * @retval      ��
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	@ 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	80fb      	strh	r3, [r7, #6]
 8000d20:	4613      	mov	r3, r2
 8000d22:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8000d24:	4b44      	ldr	r3, [pc, #272]	@ (8000e38 <lcd_set_cursor+0x124>)
 8000d26:	889b      	ldrh	r3, [r3, #4]
 8000d28:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	f040 8189 	bne.w	8001044 <lcd_set_cursor+0x330>
    {
        if (lcddev.dir == 0)    /* ����ģʽ, x������Ҫ�任 */
 8000d32:	4b41      	ldr	r3, [pc, #260]	@ (8000e38 <lcd_set_cursor+0x124>)
 8000d34:	799b      	ldrb	r3, [r3, #6]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f040 8084 	bne.w	8000e44 <lcd_set_cursor+0x130>
        {
            x = lcddev.width - 1 - x;
 8000d3c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e38 <lcd_set_cursor+0x124>)
 8000d3e:	881a      	ldrh	r2, [r3, #0]
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	3b01      	subs	r3, #1
 8000d48:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8000d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e38 <lcd_set_cursor+0x124>)
 8000d4c:	895b      	ldrh	r3, [r3, #10]
 8000d4e:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000d50:	4b3a      	ldr	r3, [pc, #232]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000d52:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d56:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000d58:	4b38      	ldr	r3, [pc, #224]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000d5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d5e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000d60:	89fb      	ldrh	r3, [r7, #14]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b36      	ldr	r3, [pc, #216]	@ (8000e40 <lcd_set_cursor+0x12c>)
 8000d66:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000d68:	4b34      	ldr	r3, [pc, #208]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000d6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d6e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000d70:	4b32      	ldr	r3, [pc, #200]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000d72:	2280      	movs	r2, #128	@ 0x80
 8000d74:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000d76:	4b31      	ldr	r3, [pc, #196]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000d78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d7c:	611a      	str	r2, [r3, #16]
}
 8000d7e:	bf00      	nop
            lcd_wr_data(0);
 8000d80:	4b2e      	ldr	r3, [pc, #184]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000d82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000d8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	4b2b      	ldr	r3, [pc, #172]	@ (8000e40 <lcd_set_cursor+0x12c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	4b29      	ldr	r3, [pc, #164]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000d98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000da0:	2280      	movs	r2, #128	@ 0x80
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	4b25      	ldr	r3, [pc, #148]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000daa:	611a      	str	r2, [r3, #16]
            lcd_wr_data(0);
 8000dac:	4b23      	ldr	r3, [pc, #140]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000dae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000db6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <lcd_set_cursor+0x12c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000dc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000dcc:	2280      	movs	r2, #128	@ 0x80
 8000dce:	611a      	str	r2, [r3, #16]
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd6:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x >> 8);
 8000dd8:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000dda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000de2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	0a1b      	lsrs	r3, r3, #8
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <lcd_set_cursor+0x12c>)
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000df4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000df8:	611a      	str	r2, [r3, #16]
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000dfc:	2280      	movs	r2, #128	@ 0x80
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e06:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000e0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000e12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	4a09      	ldr	r2, [pc, #36]	@ (8000e40 <lcd_set_cursor+0x12c>)
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	60d3      	str	r3, [r2, #12]
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000e22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e26:	611a      	str	r2, [r3, #16]
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000e2a:	2280      	movs	r2, #128	@ 0x80
 8000e2c:	611a      	str	r2, [r3, #16]
 8000e2e:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <lcd_set_cursor+0x128>)
 8000e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	e081      	b.n	8000f3c <lcd_set_cursor+0x228>
 8000e38:	200001f4 	.word	0x200001f4
 8000e3c:	40011000 	.word	0x40011000
 8000e40:	40010c00 	.word	0x40010c00
        }
        else                    /* ����ģʽ */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8000e44:	4b7c      	ldr	r3, [pc, #496]	@ (8001038 <lcd_set_cursor+0x324>)
 8000e46:	895b      	ldrh	r3, [r3, #10]
 8000e48:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000e4a:	4b7c      	ldr	r3, [pc, #496]	@ (800103c <lcd_set_cursor+0x328>)
 8000e4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e50:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000e52:	4b7a      	ldr	r3, [pc, #488]	@ (800103c <lcd_set_cursor+0x328>)
 8000e54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e58:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000e5a:	8a3b      	ldrh	r3, [r7, #16]
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b78      	ldr	r3, [pc, #480]	@ (8001040 <lcd_set_cursor+0x32c>)
 8000e60:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000e62:	4b76      	ldr	r3, [pc, #472]	@ (800103c <lcd_set_cursor+0x328>)
 8000e64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e68:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000e6a:	4b74      	ldr	r3, [pc, #464]	@ (800103c <lcd_set_cursor+0x328>)
 8000e6c:	2280      	movs	r2, #128	@ 0x80
 8000e6e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000e70:	4b72      	ldr	r3, [pc, #456]	@ (800103c <lcd_set_cursor+0x328>)
 8000e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e76:	611a      	str	r2, [r3, #16]
}
 8000e78:	bf00      	nop
            lcd_wr_data(x >> 8);
 8000e7a:	4b70      	ldr	r3, [pc, #448]	@ (800103c <lcd_set_cursor+0x328>)
 8000e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	4b6e      	ldr	r3, [pc, #440]	@ (800103c <lcd_set_cursor+0x328>)
 8000e84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b6b      	ldr	r3, [pc, #428]	@ (8001040 <lcd_set_cursor+0x32c>)
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	4b69      	ldr	r3, [pc, #420]	@ (800103c <lcd_set_cursor+0x328>)
 8000e96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	4b67      	ldr	r3, [pc, #412]	@ (800103c <lcd_set_cursor+0x328>)
 8000e9e:	2280      	movs	r2, #128	@ 0x80
 8000ea0:	611a      	str	r2, [r3, #16]
 8000ea2:	4b66      	ldr	r3, [pc, #408]	@ (800103c <lcd_set_cursor+0x328>)
 8000ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ea8:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000eaa:	4b64      	ldr	r3, [pc, #400]	@ (800103c <lcd_set_cursor+0x328>)
 8000eac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eb0:	611a      	str	r2, [r3, #16]
 8000eb2:	4b62      	ldr	r3, [pc, #392]	@ (800103c <lcd_set_cursor+0x328>)
 8000eb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000eb8:	611a      	str	r2, [r3, #16]
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	4a60      	ldr	r2, [pc, #384]	@ (8001040 <lcd_set_cursor+0x32c>)
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	60d3      	str	r3, [r2, #12]
 8000ec2:	4b5e      	ldr	r3, [pc, #376]	@ (800103c <lcd_set_cursor+0x328>)
 8000ec4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ec8:	611a      	str	r2, [r3, #16]
 8000eca:	4b5c      	ldr	r3, [pc, #368]	@ (800103c <lcd_set_cursor+0x328>)
 8000ecc:	2280      	movs	r2, #128	@ 0x80
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	4b5a      	ldr	r3, [pc, #360]	@ (800103c <lcd_set_cursor+0x328>)
 8000ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ed6:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) >> 8);
 8000ed8:	4b58      	ldr	r3, [pc, #352]	@ (800103c <lcd_set_cursor+0x328>)
 8000eda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	4b56      	ldr	r3, [pc, #344]	@ (800103c <lcd_set_cursor+0x328>)
 8000ee2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ee6:	611a      	str	r2, [r3, #16]
 8000ee8:	4b53      	ldr	r3, [pc, #332]	@ (8001038 <lcd_set_cursor+0x324>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	121a      	asrs	r2, r3, #8
 8000ef0:	4b53      	ldr	r3, [pc, #332]	@ (8001040 <lcd_set_cursor+0x32c>)
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	4b51      	ldr	r3, [pc, #324]	@ (800103c <lcd_set_cursor+0x328>)
 8000ef6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	4b4f      	ldr	r3, [pc, #316]	@ (800103c <lcd_set_cursor+0x328>)
 8000efe:	2280      	movs	r2, #128	@ 0x80
 8000f00:	611a      	str	r2, [r3, #16]
 8000f02:	4b4e      	ldr	r3, [pc, #312]	@ (800103c <lcd_set_cursor+0x328>)
 8000f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f08:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8000f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800103c <lcd_set_cursor+0x328>)
 8000f0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	4b4a      	ldr	r3, [pc, #296]	@ (800103c <lcd_set_cursor+0x328>)
 8000f14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	4b47      	ldr	r3, [pc, #284]	@ (8001038 <lcd_set_cursor+0x324>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	4a47      	ldr	r2, [pc, #284]	@ (8001040 <lcd_set_cursor+0x32c>)
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	60d3      	str	r3, [r2, #12]
 8000f26:	4b45      	ldr	r3, [pc, #276]	@ (800103c <lcd_set_cursor+0x328>)
 8000f28:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f2c:	611a      	str	r2, [r3, #16]
 8000f2e:	4b43      	ldr	r3, [pc, #268]	@ (800103c <lcd_set_cursor+0x328>)
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	611a      	str	r2, [r3, #16]
 8000f34:	4b41      	ldr	r3, [pc, #260]	@ (800103c <lcd_set_cursor+0x328>)
 8000f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f3a:	611a      	str	r2, [r3, #16]
        }

        lcd_wr_regno(lcddev.setycmd);
 8000f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001038 <lcd_set_cursor+0x324>)
 8000f3e:	899b      	ldrh	r3, [r3, #12]
 8000f40:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000f42:	4b3e      	ldr	r3, [pc, #248]	@ (800103c <lcd_set_cursor+0x328>)
 8000f44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f48:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800103c <lcd_set_cursor+0x328>)
 8000f4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f50:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000f52:	8a7b      	ldrh	r3, [r7, #18]
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	4b3a      	ldr	r3, [pc, #232]	@ (8001040 <lcd_set_cursor+0x32c>)
 8000f58:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000f5a:	4b38      	ldr	r3, [pc, #224]	@ (800103c <lcd_set_cursor+0x328>)
 8000f5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f60:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000f62:	4b36      	ldr	r3, [pc, #216]	@ (800103c <lcd_set_cursor+0x328>)
 8000f64:	2280      	movs	r2, #128	@ 0x80
 8000f66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000f68:	4b34      	ldr	r3, [pc, #208]	@ (800103c <lcd_set_cursor+0x328>)
 8000f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f6e:	611a      	str	r2, [r3, #16]
}
 8000f70:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000f72:	4b32      	ldr	r3, [pc, #200]	@ (800103c <lcd_set_cursor+0x328>)
 8000f74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	4b30      	ldr	r3, [pc, #192]	@ (800103c <lcd_set_cursor+0x328>)
 8000f7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <lcd_set_cursor+0x32c>)
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800103c <lcd_set_cursor+0x328>)
 8000f8e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	4b29      	ldr	r3, [pc, #164]	@ (800103c <lcd_set_cursor+0x328>)
 8000f96:	2280      	movs	r2, #128	@ 0x80
 8000f98:	611a      	str	r2, [r3, #16]
 8000f9a:	4b28      	ldr	r3, [pc, #160]	@ (800103c <lcd_set_cursor+0x328>)
 8000f9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa0:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8000fa2:	4b26      	ldr	r3, [pc, #152]	@ (800103c <lcd_set_cursor+0x328>)
 8000fa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	4b24      	ldr	r3, [pc, #144]	@ (800103c <lcd_set_cursor+0x328>)
 8000fac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	4a22      	ldr	r2, [pc, #136]	@ (8001040 <lcd_set_cursor+0x32c>)
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	60d3      	str	r3, [r2, #12]
 8000fba:	4b20      	ldr	r3, [pc, #128]	@ (800103c <lcd_set_cursor+0x328>)
 8000fbc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000fc0:	611a      	str	r2, [r3, #16]
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <lcd_set_cursor+0x328>)
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <lcd_set_cursor+0x328>)
 8000fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fce:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <lcd_set_cursor+0x328>)
 8000fd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <lcd_set_cursor+0x328>)
 8000fda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fde:	611a      	str	r2, [r3, #16]
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <lcd_set_cursor+0x324>)
 8000fe2:	885b      	ldrh	r3, [r3, #2]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	121a      	asrs	r2, r3, #8
 8000fe8:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <lcd_set_cursor+0x32c>)
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	4b13      	ldr	r3, [pc, #76]	@ (800103c <lcd_set_cursor+0x328>)
 8000fee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ff2:	611a      	str	r2, [r3, #16]
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <lcd_set_cursor+0x328>)
 8000ff6:	2280      	movs	r2, #128	@ 0x80
 8000ff8:	611a      	str	r2, [r3, #16]
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <lcd_set_cursor+0x328>)
 8000ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001000:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <lcd_set_cursor+0x328>)
 8001004:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <lcd_set_cursor+0x328>)
 800100c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001010:	611a      	str	r2, [r3, #16]
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <lcd_set_cursor+0x324>)
 8001014:	885b      	ldrh	r3, [r3, #2]
 8001016:	3b01      	subs	r3, #1
 8001018:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <lcd_set_cursor+0x32c>)
 800101a:	b2db      	uxtb	r3, r3
 800101c:	60d3      	str	r3, [r2, #12]
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <lcd_set_cursor+0x328>)
 8001020:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001024:	611a      	str	r2, [r3, #16]
 8001026:	4b05      	ldr	r3, [pc, #20]	@ (800103c <lcd_set_cursor+0x328>)
 8001028:	2280      	movs	r2, #128	@ 0x80
 800102a:	611a      	str	r2, [r3, #16]
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <lcd_set_cursor+0x328>)
 800102e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001032:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 8001034:	e176      	b.n	8001324 <lcd_set_cursor+0x610>
 8001036:	bf00      	nop
 8001038:	200001f4 	.word	0x200001f4
 800103c:	40011000 	.word	0x40011000
 8001040:	40010c00 	.word	0x40010c00
    else if (lcddev.id == 0X5510)
 8001044:	4b6a      	ldr	r3, [pc, #424]	@ (80011f0 <lcd_set_cursor+0x4dc>)
 8001046:	889b      	ldrh	r3, [r3, #4]
 8001048:	f245 5210 	movw	r2, #21776	@ 0x5510
 800104c:	4293      	cmp	r3, r2
 800104e:	f040 80d5 	bne.w	80011fc <lcd_set_cursor+0x4e8>
        lcd_wr_regno(lcddev.setxcmd);
 8001052:	4b67      	ldr	r3, [pc, #412]	@ (80011f0 <lcd_set_cursor+0x4dc>)
 8001054:	895b      	ldrh	r3, [r3, #10]
 8001056:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001058:	4b66      	ldr	r3, [pc, #408]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 800105a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800105e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001060:	4b64      	ldr	r3, [pc, #400]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001062:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001066:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001068:	8b7b      	ldrh	r3, [r7, #26]
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b62      	ldr	r3, [pc, #392]	@ (80011f8 <lcd_set_cursor+0x4e4>)
 800106e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001070:	4b60      	ldr	r3, [pc, #384]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001072:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001076:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001078:	4b5e      	ldr	r3, [pc, #376]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 800107a:	2280      	movs	r2, #128	@ 0x80
 800107c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800107e:	4b5d      	ldr	r3, [pc, #372]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001080:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001084:	611a      	str	r2, [r3, #16]
}
 8001086:	bf00      	nop
        lcd_wr_data(x >> 8);
 8001088:	4b5a      	ldr	r3, [pc, #360]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 800108a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800108e:	611a      	str	r2, [r3, #16]
 8001090:	4b58      	ldr	r3, [pc, #352]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001092:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b56      	ldr	r3, [pc, #344]	@ (80011f8 <lcd_set_cursor+0x4e4>)
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	4b54      	ldr	r3, [pc, #336]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80010a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	4b52      	ldr	r3, [pc, #328]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80010ac:	2280      	movs	r2, #128	@ 0x80
 80010ae:	611a      	str	r2, [r3, #16]
 80010b0:	4b50      	ldr	r3, [pc, #320]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80010b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010b6:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 80010b8:	4b4d      	ldr	r3, [pc, #308]	@ (80011f0 <lcd_set_cursor+0x4dc>)
 80010ba:	895b      	ldrh	r3, [r3, #10]
 80010bc:	3301      	adds	r3, #1
 80010be:	b29b      	uxth	r3, r3
 80010c0:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80010c2:	4b4c      	ldr	r3, [pc, #304]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80010c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80010c8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80010ca:	4b4a      	ldr	r3, [pc, #296]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80010cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010d0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80010d2:	8b3b      	ldrh	r3, [r7, #24]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	4b48      	ldr	r3, [pc, #288]	@ (80011f8 <lcd_set_cursor+0x4e4>)
 80010d8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80010da:	4b46      	ldr	r3, [pc, #280]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80010dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010e0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80010e2:	4b44      	ldr	r3, [pc, #272]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80010e4:	2280      	movs	r2, #128	@ 0x80
 80010e6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80010e8:	4b42      	ldr	r3, [pc, #264]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80010ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ee:	611a      	str	r2, [r3, #16]
}
 80010f0:	bf00      	nop
        lcd_wr_data(x & 0XFF);
 80010f2:	4b40      	ldr	r3, [pc, #256]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80010f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	4b3e      	ldr	r3, [pc, #248]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80010fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	4a3c      	ldr	r2, [pc, #240]	@ (80011f8 <lcd_set_cursor+0x4e4>)
 8001106:	b2db      	uxtb	r3, r3
 8001108:	60d3      	str	r3, [r2, #12]
 800110a:	4b3a      	ldr	r3, [pc, #232]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 800110c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	4b38      	ldr	r3, [pc, #224]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001114:	2280      	movs	r2, #128	@ 0x80
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	4b36      	ldr	r3, [pc, #216]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 800111a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800111e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8001120:	4b33      	ldr	r3, [pc, #204]	@ (80011f0 <lcd_set_cursor+0x4dc>)
 8001122:	899b      	ldrh	r3, [r3, #12]
 8001124:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001126:	4b33      	ldr	r3, [pc, #204]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001128:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800112c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800112e:	4b31      	ldr	r3, [pc, #196]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001130:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001134:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001136:	8afb      	ldrh	r3, [r7, #22]
 8001138:	b29a      	uxth	r2, r3
 800113a:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <lcd_set_cursor+0x4e4>)
 800113c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800113e:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001140:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001144:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001146:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001148:	2280      	movs	r2, #128	@ 0x80
 800114a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800114c:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 800114e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001152:	611a      	str	r2, [r3, #16]
}
 8001154:	bf00      	nop
        lcd_wr_data(y >> 8);
 8001156:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001160:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <lcd_set_cursor+0x4e4>)
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001172:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001176:	611a      	str	r2, [r3, #16]
 8001178:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 800117a:	2280      	movs	r2, #128	@ 0x80
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001180:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001184:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8001186:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <lcd_set_cursor+0x4dc>)
 8001188:	899b      	ldrh	r3, [r3, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	b29b      	uxth	r3, r3
 800118e:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 8001192:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001196:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 800119a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800119e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80011a0:	8abb      	ldrh	r3, [r7, #20]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <lcd_set_cursor+0x4e4>)
 80011a6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80011aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011ae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80011b0:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80011b2:	2280      	movs	r2, #128	@ 0x80
 80011b4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80011b6:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80011b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011bc:	611a      	str	r2, [r3, #16]
}
 80011be:	bf00      	nop
        lcd_wr_data(y & 0XFF);
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80011c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80011ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	4a09      	ldr	r2, [pc, #36]	@ (80011f8 <lcd_set_cursor+0x4e4>)
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	60d3      	str	r3, [r2, #12]
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80011da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80011e2:	2280      	movs	r2, #128	@ 0x80
 80011e4:	611a      	str	r2, [r3, #16]
 80011e6:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <lcd_set_cursor+0x4e0>)
 80011e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ec:	611a      	str	r2, [r3, #16]
}
 80011ee:	e099      	b.n	8001324 <lcd_set_cursor+0x610>
 80011f0:	200001f4 	.word	0x200001f4
 80011f4:	40011000 	.word	0x40011000
 80011f8:	40010c00 	.word	0x40010c00
        lcd_wr_regno(lcddev.setxcmd);
 80011fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001330 <lcd_set_cursor+0x61c>)
 80011fe:	895b      	ldrh	r3, [r3, #10]
 8001200:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001202:	4b4c      	ldr	r3, [pc, #304]	@ (8001334 <lcd_set_cursor+0x620>)
 8001204:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001208:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800120a:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <lcd_set_cursor+0x620>)
 800120c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001210:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001212:	8bfb      	ldrh	r3, [r7, #30]
 8001214:	b29a      	uxth	r2, r3
 8001216:	4b48      	ldr	r3, [pc, #288]	@ (8001338 <lcd_set_cursor+0x624>)
 8001218:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800121a:	4b46      	ldr	r3, [pc, #280]	@ (8001334 <lcd_set_cursor+0x620>)
 800121c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001220:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001222:	4b44      	ldr	r3, [pc, #272]	@ (8001334 <lcd_set_cursor+0x620>)
 8001224:	2280      	movs	r2, #128	@ 0x80
 8001226:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001228:	4b42      	ldr	r3, [pc, #264]	@ (8001334 <lcd_set_cursor+0x620>)
 800122a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800122e:	611a      	str	r2, [r3, #16]
}
 8001230:	bf00      	nop
        lcd_wr_data(x >> 8);
 8001232:	4b40      	ldr	r3, [pc, #256]	@ (8001334 <lcd_set_cursor+0x620>)
 8001234:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001238:	611a      	str	r2, [r3, #16]
 800123a:	4b3e      	ldr	r3, [pc, #248]	@ (8001334 <lcd_set_cursor+0x620>)
 800123c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b3b      	ldr	r3, [pc, #236]	@ (8001338 <lcd_set_cursor+0x624>)
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	4b39      	ldr	r3, [pc, #228]	@ (8001334 <lcd_set_cursor+0x620>)
 800124e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	4b37      	ldr	r3, [pc, #220]	@ (8001334 <lcd_set_cursor+0x620>)
 8001256:	2280      	movs	r2, #128	@ 0x80
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <lcd_set_cursor+0x620>)
 800125c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001260:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
 8001262:	4b34      	ldr	r3, [pc, #208]	@ (8001334 <lcd_set_cursor+0x620>)
 8001264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	4b32      	ldr	r3, [pc, #200]	@ (8001334 <lcd_set_cursor+0x620>)
 800126c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001270:	611a      	str	r2, [r3, #16]
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	4a30      	ldr	r2, [pc, #192]	@ (8001338 <lcd_set_cursor+0x624>)
 8001276:	b2db      	uxtb	r3, r3
 8001278:	60d3      	str	r3, [r2, #12]
 800127a:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <lcd_set_cursor+0x620>)
 800127c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001280:	611a      	str	r2, [r3, #16]
 8001282:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <lcd_set_cursor+0x620>)
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <lcd_set_cursor+0x620>)
 800128a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800128e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <lcd_set_cursor+0x61c>)
 8001292:	899b      	ldrh	r3, [r3, #12]
 8001294:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001296:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <lcd_set_cursor+0x620>)
 8001298:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800129c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800129e:	4b25      	ldr	r3, [pc, #148]	@ (8001334 <lcd_set_cursor+0x620>)
 80012a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80012a6:	8bbb      	ldrh	r3, [r7, #28]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <lcd_set_cursor+0x624>)
 80012ac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <lcd_set_cursor+0x620>)
 80012b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012b4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80012b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <lcd_set_cursor+0x620>)
 80012b8:	2280      	movs	r2, #128	@ 0x80
 80012ba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <lcd_set_cursor+0x620>)
 80012be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012c2:	611a      	str	r2, [r3, #16]
}
 80012c4:	bf00      	nop
        lcd_wr_data(y >> 8);
 80012c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <lcd_set_cursor+0x620>)
 80012c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012cc:	611a      	str	r2, [r3, #16]
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <lcd_set_cursor+0x620>)
 80012d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	88bb      	ldrh	r3, [r7, #4]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <lcd_set_cursor+0x624>)
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <lcd_set_cursor+0x620>)
 80012e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <lcd_set_cursor+0x620>)
 80012ea:	2280      	movs	r2, #128	@ 0x80
 80012ec:	611a      	str	r2, [r3, #16]
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <lcd_set_cursor+0x620>)
 80012f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f4:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <lcd_set_cursor+0x620>)
 80012f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012fc:	611a      	str	r2, [r3, #16]
 80012fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <lcd_set_cursor+0x620>)
 8001300:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	88bb      	ldrh	r3, [r7, #4]
 8001308:	4a0b      	ldr	r2, [pc, #44]	@ (8001338 <lcd_set_cursor+0x624>)
 800130a:	b2db      	uxtb	r3, r3
 800130c:	60d3      	str	r3, [r2, #12]
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <lcd_set_cursor+0x620>)
 8001310:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <lcd_set_cursor+0x620>)
 8001318:	2280      	movs	r2, #128	@ 0x80
 800131a:	611a      	str	r2, [r3, #16]
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <lcd_set_cursor+0x620>)
 800131e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001322:	611a      	str	r2, [r3, #16]
}
 8001324:	bf00      	nop
 8001326:	3724      	adds	r7, #36	@ 0x24
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200001f4 	.word	0x200001f4
 8001334:	40011000 	.word	0x40011000
 8001338:	40010c00 	.word	0x40010c00

0800133c <lcd_scan_dir>:
 *
 * @param       dir:0~7,����8������(���嶨���lcd.h)
 * @retval      ��
 */
void lcd_scan_dir(uint8_t dir)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t dirreg = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t temp;

    /* ����ʱ����1963���ı�ɨ�跽��, ����IC�ı�ɨ�跽������ʱ1963�ı䷽��, ����IC���ı�ɨ�跽�� */
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 800134e:	4b5f      	ldr	r3, [pc, #380]	@ (80014cc <lcd_scan_dir+0x190>)
 8001350:	799b      	ldrb	r3, [r3, #6]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d105      	bne.n	8001362 <lcd_scan_dir+0x26>
 8001356:	4b5d      	ldr	r3, [pc, #372]	@ (80014cc <lcd_scan_dir+0x190>)
 8001358:	889b      	ldrh	r3, [r3, #4]
 800135a:	f641 1263 	movw	r2, #6499	@ 0x1963
 800135e:	4293      	cmp	r3, r2
 8001360:	d109      	bne.n	8001376 <lcd_scan_dir+0x3a>
 8001362:	4b5a      	ldr	r3, [pc, #360]	@ (80014cc <lcd_scan_dir+0x190>)
 8001364:	799b      	ldrb	r3, [r3, #6]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d134      	bne.n	80013d4 <lcd_scan_dir+0x98>
 800136a:	4b58      	ldr	r3, [pc, #352]	@ (80014cc <lcd_scan_dir+0x190>)
 800136c:	889b      	ldrh	r3, [r3, #4]
 800136e:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001372:	4293      	cmp	r3, r2
 8001374:	d12e      	bne.n	80013d4 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* ����ת�� */
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	2b07      	cmp	r3, #7
 800137a:	d82b      	bhi.n	80013d4 <lcd_scan_dir+0x98>
 800137c:	a201      	add	r2, pc, #4	@ (adr r2, 8001384 <lcd_scan_dir+0x48>)
 800137e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001382:	bf00      	nop
 8001384:	080013a5 	.word	0x080013a5
 8001388:	080013ab 	.word	0x080013ab
 800138c:	080013b1 	.word	0x080013b1
 8001390:	080013b7 	.word	0x080013b7
 8001394:	080013bd 	.word	0x080013bd
 8001398:	080013c3 	.word	0x080013c3
 800139c:	080013c9 	.word	0x080013c9
 80013a0:	080013cf 	.word	0x080013cf
        {
            case 0:
                dir = 6;
 80013a4:	2306      	movs	r3, #6
 80013a6:	71fb      	strb	r3, [r7, #7]
                break;
 80013a8:	e014      	b.n	80013d4 <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 80013aa:	2307      	movs	r3, #7
 80013ac:	71fb      	strb	r3, [r7, #7]
                break;
 80013ae:	e011      	b.n	80013d4 <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 80013b0:	2304      	movs	r3, #4
 80013b2:	71fb      	strb	r3, [r7, #7]
                break;
 80013b4:	e00e      	b.n	80013d4 <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 80013b6:	2305      	movs	r3, #5
 80013b8:	71fb      	strb	r3, [r7, #7]
                break;
 80013ba:	e00b      	b.n	80013d4 <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	71fb      	strb	r3, [r7, #7]
                break;
 80013c0:	e008      	b.n	80013d4 <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	71fb      	strb	r3, [r7, #7]
                break;
 80013c6:	e005      	b.n	80013d4 <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 80013c8:	2303      	movs	r3, #3
 80013ca:	71fb      	strb	r3, [r7, #7]
                break;
 80013cc:	e002      	b.n	80013d4 <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	71fb      	strb	r3, [r7, #7]
                break;
 80013d2:	bf00      	nop
        }
    }

    /* ����ɨ�跽ʽ ���� 0X36/0X3600 �Ĵ��� bit 5,6,7 λ��ֵ */
    switch (dir)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2b07      	cmp	r3, #7
 80013d8:	d835      	bhi.n	8001446 <lcd_scan_dir+0x10a>
 80013da:	a201      	add	r2, pc, #4	@ (adr r2, 80013e0 <lcd_scan_dir+0xa4>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	08001447 	.word	0x08001447
 80013e4:	08001401 	.word	0x08001401
 80013e8:	0800140b 	.word	0x0800140b
 80013ec:	08001415 	.word	0x08001415
 80013f0:	0800141f 	.word	0x0800141f
 80013f4:	08001429 	.word	0x08001429
 80013f8:	08001433 	.word	0x08001433
 80013fc:	0800143d 	.word	0x0800143d
        case L2R_U2D:/* ������,���ϵ��� */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* ������,���µ��� */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001400:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001406:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001408:	e01d      	b.n	8001446 <lcd_scan_dir+0x10a>

        case R2L_U2D:/* ���ҵ���,���ϵ��� */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800140a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800140c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001410:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001412:	e018      	b.n	8001446 <lcd_scan_dir+0x10a>

        case R2L_D2U:/* ���ҵ���,���µ��� */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001414:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001416:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800141a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 800141c:	e013      	b.n	8001446 <lcd_scan_dir+0x10a>

        case U2D_L2R:/* ���ϵ���,������ */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800141e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001426:	e00e      	b.n	8001446 <lcd_scan_dir+0x10a>

        case U2D_R2L:/* ���ϵ���,���ҵ��� */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001428:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800142a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800142e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001430:	e009      	b.n	8001446 <lcd_scan_dir+0x10a>

        case D2U_L2R:/* ���µ���,������ */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001432:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001434:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001438:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 800143a:	e004      	b.n	8001446 <lcd_scan_dir+0x10a>

        case D2U_R2L:/* ���µ���,���ҵ��� */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 800143c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800143e:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001442:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001444:	bf00      	nop
    }

    dirreg = 0X36;  /* �Ծ��󲿷�����IC, ��0X36�Ĵ������� */
 8001446:	2336      	movs	r3, #54	@ 0x36
 8001448:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (lcddev.id == 0X5510)
 800144a:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <lcd_scan_dir+0x190>)
 800144c:	889b      	ldrh	r3, [r3, #4]
 800144e:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001452:	4293      	cmp	r3, r2
 8001454:	d102      	bne.n	800145c <lcd_scan_dir+0x120>
    {
        dirreg = 0X3600;    /* ����5510, ����������ic�ļĴ����в��� */
 8001456:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 800145a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* 9341 & 7789 & 7796 Ҫ����BGRλ */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <lcd_scan_dir+0x190>)
 800145e:	889b      	ldrh	r3, [r3, #4]
 8001460:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001464:	4293      	cmp	r3, r2
 8001466:	d00b      	beq.n	8001480 <lcd_scan_dir+0x144>
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <lcd_scan_dir+0x190>)
 800146a:	889b      	ldrh	r3, [r3, #4]
 800146c:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001470:	4293      	cmp	r3, r2
 8001472:	d005      	beq.n	8001480 <lcd_scan_dir+0x144>
 8001474:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <lcd_scan_dir+0x190>)
 8001476:	889b      	ldrh	r3, [r3, #4]
 8001478:	f247 7296 	movw	r2, #30614	@ 0x7796
 800147c:	4293      	cmp	r3, r2
 800147e:	d103      	bne.n	8001488 <lcd_scan_dir+0x14c>
    {
        regval |= 0X08;
 8001480:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    lcd_write_reg(dirreg, regval);
 8001488:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800148a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fbaa 	bl	8000be8 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963�������괦�� */
 8001494:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <lcd_scan_dir+0x190>)
 8001496:	889b      	ldrh	r3, [r3, #4]
 8001498:	f641 1263 	movw	r2, #6499	@ 0x1963
 800149c:	4293      	cmp	r3, r2
 800149e:	d027      	beq.n	80014f0 <lcd_scan_dir+0x1b4>
    {
        if (regval & 0X20)
 80014a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d012      	beq.n	80014d0 <lcd_scan_dir+0x194>
        {
            if (lcddev.width < lcddev.height)   /* ����X,Y */
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <lcd_scan_dir+0x190>)
 80014ac:	881a      	ldrh	r2, [r3, #0]
 80014ae:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <lcd_scan_dir+0x190>)
 80014b0:	885b      	ldrh	r3, [r3, #2]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d21c      	bcs.n	80014f0 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <lcd_scan_dir+0x190>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 80014bc:	4b03      	ldr	r3, [pc, #12]	@ (80014cc <lcd_scan_dir+0x190>)
 80014be:	885a      	ldrh	r2, [r3, #2]
 80014c0:	4b02      	ldr	r3, [pc, #8]	@ (80014cc <lcd_scan_dir+0x190>)
 80014c2:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80014c4:	4a01      	ldr	r2, [pc, #4]	@ (80014cc <lcd_scan_dir+0x190>)
 80014c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80014c8:	8053      	strh	r3, [r2, #2]
 80014ca:	e011      	b.n	80014f0 <lcd_scan_dir+0x1b4>
 80014cc:	200001f4 	.word	0x200001f4
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* ����X,Y */
 80014d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001744 <lcd_scan_dir+0x408>)
 80014d2:	881a      	ldrh	r2, [r3, #0]
 80014d4:	4b9b      	ldr	r3, [pc, #620]	@ (8001744 <lcd_scan_dir+0x408>)
 80014d6:	885b      	ldrh	r3, [r3, #2]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d909      	bls.n	80014f0 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 80014dc:	4b99      	ldr	r3, [pc, #612]	@ (8001744 <lcd_scan_dir+0x408>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 80014e2:	4b98      	ldr	r3, [pc, #608]	@ (8001744 <lcd_scan_dir+0x408>)
 80014e4:	885a      	ldrh	r2, [r3, #2]
 80014e6:	4b97      	ldr	r3, [pc, #604]	@ (8001744 <lcd_scan_dir+0x408>)
 80014e8:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80014ea:	4a96      	ldr	r2, [pc, #600]	@ (8001744 <lcd_scan_dir+0x408>)
 80014ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80014ee:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* ������ʾ����(����)��С */
    if (lcddev.id == 0X5510)
 80014f0:	4b94      	ldr	r3, [pc, #592]	@ (8001744 <lcd_scan_dir+0x408>)
 80014f2:	889b      	ldrh	r3, [r3, #4]
 80014f4:	f245 5210 	movw	r2, #21776	@ 0x5510
 80014f8:	4293      	cmp	r3, r2
 80014fa:	f040 81af 	bne.w	800185c <lcd_scan_dir+0x520>
    {
        lcd_wr_regno(lcddev.setxcmd);
 80014fe:	4b91      	ldr	r3, [pc, #580]	@ (8001744 <lcd_scan_dir+0x408>)
 8001500:	895b      	ldrh	r3, [r3, #10]
 8001502:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001504:	4b90      	ldr	r3, [pc, #576]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001506:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800150a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800150c:	4b8e      	ldr	r3, [pc, #568]	@ (8001748 <lcd_scan_dir+0x40c>)
 800150e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001512:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001514:	8bbb      	ldrh	r3, [r7, #28]
 8001516:	b29a      	uxth	r2, r3
 8001518:	4b8c      	ldr	r3, [pc, #560]	@ (800174c <lcd_scan_dir+0x410>)
 800151a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800151c:	4b8a      	ldr	r3, [pc, #552]	@ (8001748 <lcd_scan_dir+0x40c>)
 800151e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001522:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001524:	4b88      	ldr	r3, [pc, #544]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001526:	2280      	movs	r2, #128	@ 0x80
 8001528:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800152a:	4b87      	ldr	r3, [pc, #540]	@ (8001748 <lcd_scan_dir+0x40c>)
 800152c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001530:	611a      	str	r2, [r3, #16]
}
 8001532:	bf00      	nop
        lcd_wr_data(0);
 8001534:	4b84      	ldr	r3, [pc, #528]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001536:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	4b82      	ldr	r3, [pc, #520]	@ (8001748 <lcd_scan_dir+0x40c>)
 800153e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	4b81      	ldr	r3, [pc, #516]	@ (800174c <lcd_scan_dir+0x410>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	4b7f      	ldr	r3, [pc, #508]	@ (8001748 <lcd_scan_dir+0x40c>)
 800154c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	4b7d      	ldr	r3, [pc, #500]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001554:	2280      	movs	r2, #128	@ 0x80
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	4b7b      	ldr	r3, [pc, #492]	@ (8001748 <lcd_scan_dir+0x40c>)
 800155a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800155e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 8001560:	4b78      	ldr	r3, [pc, #480]	@ (8001744 <lcd_scan_dir+0x408>)
 8001562:	895b      	ldrh	r3, [r3, #10]
 8001564:	3301      	adds	r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800156a:	4b77      	ldr	r3, [pc, #476]	@ (8001748 <lcd_scan_dir+0x40c>)
 800156c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001570:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001572:	4b75      	ldr	r3, [pc, #468]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001574:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001578:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800157a:	8b7b      	ldrh	r3, [r7, #26]
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b73      	ldr	r3, [pc, #460]	@ (800174c <lcd_scan_dir+0x410>)
 8001580:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001582:	4b71      	ldr	r3, [pc, #452]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001584:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001588:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800158a:	4b6f      	ldr	r3, [pc, #444]	@ (8001748 <lcd_scan_dir+0x40c>)
 800158c:	2280      	movs	r2, #128	@ 0x80
 800158e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001590:	4b6d      	ldr	r3, [pc, #436]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001596:	611a      	str	r2, [r3, #16]
}
 8001598:	bf00      	nop
        lcd_wr_data(0);
 800159a:	4b6b      	ldr	r3, [pc, #428]	@ (8001748 <lcd_scan_dir+0x40c>)
 800159c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	4b69      	ldr	r3, [pc, #420]	@ (8001748 <lcd_scan_dir+0x40c>)
 80015a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	4b68      	ldr	r3, [pc, #416]	@ (800174c <lcd_scan_dir+0x410>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	4b65      	ldr	r3, [pc, #404]	@ (8001748 <lcd_scan_dir+0x40c>)
 80015b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015b6:	611a      	str	r2, [r3, #16]
 80015b8:	4b63      	ldr	r3, [pc, #396]	@ (8001748 <lcd_scan_dir+0x40c>)
 80015ba:	2280      	movs	r2, #128	@ 0x80
 80015bc:	611a      	str	r2, [r3, #16]
 80015be:	4b62      	ldr	r3, [pc, #392]	@ (8001748 <lcd_scan_dir+0x40c>)
 80015c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015c4:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 2);
 80015c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001744 <lcd_scan_dir+0x408>)
 80015c8:	895b      	ldrh	r3, [r3, #10]
 80015ca:	3302      	adds	r3, #2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80015d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001748 <lcd_scan_dir+0x40c>)
 80015d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015d6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80015d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001748 <lcd_scan_dir+0x40c>)
 80015da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015de:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80015e0:	8b3b      	ldrh	r3, [r7, #24]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	4b59      	ldr	r3, [pc, #356]	@ (800174c <lcd_scan_dir+0x410>)
 80015e6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80015e8:	4b57      	ldr	r3, [pc, #348]	@ (8001748 <lcd_scan_dir+0x40c>)
 80015ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015ee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80015f0:	4b55      	ldr	r3, [pc, #340]	@ (8001748 <lcd_scan_dir+0x40c>)
 80015f2:	2280      	movs	r2, #128	@ 0x80
 80015f4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80015f6:	4b54      	ldr	r3, [pc, #336]	@ (8001748 <lcd_scan_dir+0x40c>)
 80015f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015fc:	611a      	str	r2, [r3, #16]
}
 80015fe:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) >> 8);
 8001600:	4b51      	ldr	r3, [pc, #324]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001602:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001606:	611a      	str	r2, [r3, #16]
 8001608:	4b4f      	ldr	r3, [pc, #316]	@ (8001748 <lcd_scan_dir+0x40c>)
 800160a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	4b4c      	ldr	r3, [pc, #304]	@ (8001744 <lcd_scan_dir+0x408>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	3b01      	subs	r3, #1
 8001616:	121a      	asrs	r2, r3, #8
 8001618:	4b4c      	ldr	r3, [pc, #304]	@ (800174c <lcd_scan_dir+0x410>)
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	4b4a      	ldr	r3, [pc, #296]	@ (8001748 <lcd_scan_dir+0x40c>)
 800161e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	4b48      	ldr	r3, [pc, #288]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001626:	2280      	movs	r2, #128	@ 0x80
 8001628:	611a      	str	r2, [r3, #16]
 800162a:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <lcd_scan_dir+0x40c>)
 800162c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001630:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 3);
 8001632:	4b44      	ldr	r3, [pc, #272]	@ (8001744 <lcd_scan_dir+0x408>)
 8001634:	895b      	ldrh	r3, [r3, #10]
 8001636:	3303      	adds	r3, #3
 8001638:	b29b      	uxth	r3, r3
 800163a:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800163c:	4b42      	ldr	r3, [pc, #264]	@ (8001748 <lcd_scan_dir+0x40c>)
 800163e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001642:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001644:	4b40      	ldr	r3, [pc, #256]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001646:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800164a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800164c:	8afb      	ldrh	r3, [r7, #22]
 800164e:	b29a      	uxth	r2, r3
 8001650:	4b3e      	ldr	r3, [pc, #248]	@ (800174c <lcd_scan_dir+0x410>)
 8001652:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001654:	4b3c      	ldr	r3, [pc, #240]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001656:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800165a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800165c:	4b3a      	ldr	r3, [pc, #232]	@ (8001748 <lcd_scan_dir+0x40c>)
 800165e:	2280      	movs	r2, #128	@ 0x80
 8001660:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001662:	4b39      	ldr	r3, [pc, #228]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001668:	611a      	str	r2, [r3, #16]
}
 800166a:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 800166c:	4b36      	ldr	r3, [pc, #216]	@ (8001748 <lcd_scan_dir+0x40c>)
 800166e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001676:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	4b31      	ldr	r3, [pc, #196]	@ (8001744 <lcd_scan_dir+0x408>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	3b01      	subs	r3, #1
 8001682:	4a32      	ldr	r2, [pc, #200]	@ (800174c <lcd_scan_dir+0x410>)
 8001684:	b2db      	uxtb	r3, r3
 8001686:	60d3      	str	r3, [r2, #12]
 8001688:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <lcd_scan_dir+0x40c>)
 800168a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800168e:	611a      	str	r2, [r3, #16]
 8001690:	4b2d      	ldr	r3, [pc, #180]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001692:	2280      	movs	r2, #128	@ 0x80
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800169c:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 800169e:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <lcd_scan_dir+0x408>)
 80016a0:	899b      	ldrh	r3, [r3, #12]
 80016a2:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80016a4:	4b28      	ldr	r3, [pc, #160]	@ (8001748 <lcd_scan_dir+0x40c>)
 80016a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016aa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80016ac:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <lcd_scan_dir+0x40c>)
 80016ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016b2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80016b4:	8abb      	ldrh	r3, [r7, #20]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4b24      	ldr	r3, [pc, #144]	@ (800174c <lcd_scan_dir+0x410>)
 80016ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80016bc:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <lcd_scan_dir+0x40c>)
 80016be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80016c4:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <lcd_scan_dir+0x40c>)
 80016c6:	2280      	movs	r2, #128	@ 0x80
 80016c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80016ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <lcd_scan_dir+0x40c>)
 80016cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016d0:	611a      	str	r2, [r3, #16]
}
 80016d2:	bf00      	nop
        lcd_wr_data(0);
 80016d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <lcd_scan_dir+0x40c>)
 80016d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016da:	611a      	str	r2, [r3, #16]
 80016dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <lcd_scan_dir+0x40c>)
 80016de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016e2:	611a      	str	r2, [r3, #16]
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <lcd_scan_dir+0x410>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <lcd_scan_dir+0x40c>)
 80016ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <lcd_scan_dir+0x40c>)
 80016f4:	2280      	movs	r2, #128	@ 0x80
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <lcd_scan_dir+0x40c>)
 80016fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016fe:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8001700:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <lcd_scan_dir+0x408>)
 8001702:	899b      	ldrh	r3, [r3, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	b29b      	uxth	r3, r3
 8001708:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800170a:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <lcd_scan_dir+0x40c>)
 800170c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001710:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001714:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001718:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800171a:	8a7b      	ldrh	r3, [r7, #18]
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <lcd_scan_dir+0x410>)
 8001720:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001724:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001728:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800172a:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <lcd_scan_dir+0x40c>)
 800172c:	2280      	movs	r2, #128	@ 0x80
 800172e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001730:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <lcd_scan_dir+0x40c>)
 8001732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001736:	611a      	str	r2, [r3, #16]
}
 8001738:	bf00      	nop
        lcd_wr_data(0);
 800173a:	4b03      	ldr	r3, [pc, #12]	@ (8001748 <lcd_scan_dir+0x40c>)
 800173c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	e005      	b.n	8001750 <lcd_scan_dir+0x414>
 8001744:	200001f4 	.word	0x200001f4
 8001748:	40011000 	.word	0x40011000
 800174c:	40010c00 	.word	0x40010c00
 8001750:	4b3f      	ldr	r3, [pc, #252]	@ (8001850 <lcd_scan_dir+0x514>)
 8001752:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001756:	611a      	str	r2, [r3, #16]
 8001758:	4b3e      	ldr	r3, [pc, #248]	@ (8001854 <lcd_scan_dir+0x518>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	4b3c      	ldr	r3, [pc, #240]	@ (8001850 <lcd_scan_dir+0x514>)
 8001760:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	4b3a      	ldr	r3, [pc, #232]	@ (8001850 <lcd_scan_dir+0x514>)
 8001768:	2280      	movs	r2, #128	@ 0x80
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <lcd_scan_dir+0x514>)
 800176e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001772:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 2);
 8001774:	4b38      	ldr	r3, [pc, #224]	@ (8001858 <lcd_scan_dir+0x51c>)
 8001776:	899b      	ldrh	r3, [r3, #12]
 8001778:	3302      	adds	r3, #2
 800177a:	b29b      	uxth	r3, r3
 800177c:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800177e:	4b34      	ldr	r3, [pc, #208]	@ (8001850 <lcd_scan_dir+0x514>)
 8001780:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001784:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001786:	4b32      	ldr	r3, [pc, #200]	@ (8001850 <lcd_scan_dir+0x514>)
 8001788:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800178c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800178e:	8a3b      	ldrh	r3, [r7, #16]
 8001790:	b29a      	uxth	r2, r3
 8001792:	4b30      	ldr	r3, [pc, #192]	@ (8001854 <lcd_scan_dir+0x518>)
 8001794:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001796:	4b2e      	ldr	r3, [pc, #184]	@ (8001850 <lcd_scan_dir+0x514>)
 8001798:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800179c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800179e:	4b2c      	ldr	r3, [pc, #176]	@ (8001850 <lcd_scan_dir+0x514>)
 80017a0:	2280      	movs	r2, #128	@ 0x80
 80017a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80017a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001850 <lcd_scan_dir+0x514>)
 80017a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017aa:	611a      	str	r2, [r3, #16]
}
 80017ac:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) >> 8);
 80017ae:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <lcd_scan_dir+0x514>)
 80017b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <lcd_scan_dir+0x514>)
 80017b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017bc:	611a      	str	r2, [r3, #16]
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <lcd_scan_dir+0x51c>)
 80017c0:	885b      	ldrh	r3, [r3, #2]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	121a      	asrs	r2, r3, #8
 80017c6:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <lcd_scan_dir+0x518>)
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <lcd_scan_dir+0x514>)
 80017cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017d0:	611a      	str	r2, [r3, #16]
 80017d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <lcd_scan_dir+0x514>)
 80017d4:	2280      	movs	r2, #128	@ 0x80
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <lcd_scan_dir+0x514>)
 80017da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017de:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 3);
 80017e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <lcd_scan_dir+0x51c>)
 80017e2:	899b      	ldrh	r3, [r3, #12]
 80017e4:	3303      	adds	r3, #3
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <lcd_scan_dir+0x514>)
 80017ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80017f2:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <lcd_scan_dir+0x514>)
 80017f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80017fa:	89fb      	ldrh	r3, [r7, #14]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <lcd_scan_dir+0x518>)
 8001800:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <lcd_scan_dir+0x514>)
 8001804:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001808:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800180a:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <lcd_scan_dir+0x514>)
 800180c:	2280      	movs	r2, #128	@ 0x80
 800180e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001810:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <lcd_scan_dir+0x514>)
 8001812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001816:	611a      	str	r2, [r3, #16]
}
 8001818:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 800181a:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <lcd_scan_dir+0x514>)
 800181c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001820:	611a      	str	r2, [r3, #16]
 8001822:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <lcd_scan_dir+0x514>)
 8001824:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001828:	611a      	str	r2, [r3, #16]
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <lcd_scan_dir+0x51c>)
 800182c:	885b      	ldrh	r3, [r3, #2]
 800182e:	3b01      	subs	r3, #1
 8001830:	4a08      	ldr	r2, [pc, #32]	@ (8001854 <lcd_scan_dir+0x518>)
 8001832:	b2db      	uxtb	r3, r3
 8001834:	60d3      	str	r3, [r2, #12]
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <lcd_scan_dir+0x514>)
 8001838:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <lcd_scan_dir+0x514>)
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	611a      	str	r2, [r3, #16]
 8001844:	4b02      	ldr	r3, [pc, #8]	@ (8001850 <lcd_scan_dir+0x514>)
 8001846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800184a:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 800184c:	e0f8      	b.n	8001a40 <lcd_scan_dir+0x704>
 800184e:	bf00      	nop
 8001850:	40011000 	.word	0x40011000
 8001854:	40010c00 	.word	0x40010c00
 8001858:	200001f4 	.word	0x200001f4
        lcd_wr_regno(lcddev.setxcmd);
 800185c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a48 <lcd_scan_dir+0x70c>)
 800185e:	895b      	ldrh	r3, [r3, #10]
 8001860:	843b      	strh	r3, [r7, #32]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001862:	4b7a      	ldr	r3, [pc, #488]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001864:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001868:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800186a:	4b78      	ldr	r3, [pc, #480]	@ (8001a4c <lcd_scan_dir+0x710>)
 800186c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001870:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001872:	8c3b      	ldrh	r3, [r7, #32]
 8001874:	b29a      	uxth	r2, r3
 8001876:	4b76      	ldr	r3, [pc, #472]	@ (8001a50 <lcd_scan_dir+0x714>)
 8001878:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800187a:	4b74      	ldr	r3, [pc, #464]	@ (8001a4c <lcd_scan_dir+0x710>)
 800187c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001880:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001882:	4b72      	ldr	r3, [pc, #456]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001884:	2280      	movs	r2, #128	@ 0x80
 8001886:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001888:	4b70      	ldr	r3, [pc, #448]	@ (8001a4c <lcd_scan_dir+0x710>)
 800188a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800188e:	611a      	str	r2, [r3, #16]
}
 8001890:	bf00      	nop
        lcd_wr_data(0);
 8001892:	4b6e      	ldr	r3, [pc, #440]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001898:	611a      	str	r2, [r3, #16]
 800189a:	4b6c      	ldr	r3, [pc, #432]	@ (8001a4c <lcd_scan_dir+0x710>)
 800189c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018a0:	611a      	str	r2, [r3, #16]
 80018a2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a50 <lcd_scan_dir+0x714>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	4b68      	ldr	r3, [pc, #416]	@ (8001a4c <lcd_scan_dir+0x710>)
 80018aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	4b66      	ldr	r3, [pc, #408]	@ (8001a4c <lcd_scan_dir+0x710>)
 80018b2:	2280      	movs	r2, #128	@ 0x80
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	4b65      	ldr	r3, [pc, #404]	@ (8001a4c <lcd_scan_dir+0x710>)
 80018b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018bc:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 80018be:	4b63      	ldr	r3, [pc, #396]	@ (8001a4c <lcd_scan_dir+0x710>)
 80018c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	4b61      	ldr	r3, [pc, #388]	@ (8001a4c <lcd_scan_dir+0x710>)
 80018c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018cc:	611a      	str	r2, [r3, #16]
 80018ce:	4b60      	ldr	r3, [pc, #384]	@ (8001a50 <lcd_scan_dir+0x714>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	4b5d      	ldr	r3, [pc, #372]	@ (8001a4c <lcd_scan_dir+0x710>)
 80018d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	4b5b      	ldr	r3, [pc, #364]	@ (8001a4c <lcd_scan_dir+0x710>)
 80018de:	2280      	movs	r2, #128	@ 0x80
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	4b5a      	ldr	r3, [pc, #360]	@ (8001a4c <lcd_scan_dir+0x710>)
 80018e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e8:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) >> 8);
 80018ea:	4b58      	ldr	r3, [pc, #352]	@ (8001a4c <lcd_scan_dir+0x710>)
 80018ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	4b56      	ldr	r3, [pc, #344]	@ (8001a4c <lcd_scan_dir+0x710>)
 80018f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	4b53      	ldr	r3, [pc, #332]	@ (8001a48 <lcd_scan_dir+0x70c>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	3b01      	subs	r3, #1
 8001900:	121a      	asrs	r2, r3, #8
 8001902:	4b53      	ldr	r3, [pc, #332]	@ (8001a50 <lcd_scan_dir+0x714>)
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	4b51      	ldr	r3, [pc, #324]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001908:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	4b4f      	ldr	r3, [pc, #316]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001910:	2280      	movs	r2, #128	@ 0x80
 8001912:	611a      	str	r2, [r3, #16]
 8001914:	4b4d      	ldr	r3, [pc, #308]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800191a:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 800191c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a4c <lcd_scan_dir+0x710>)
 800191e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001922:	611a      	str	r2, [r3, #16]
 8001924:	4b49      	ldr	r3, [pc, #292]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001926:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	4b46      	ldr	r3, [pc, #280]	@ (8001a48 <lcd_scan_dir+0x70c>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	3b01      	subs	r3, #1
 8001932:	4a47      	ldr	r2, [pc, #284]	@ (8001a50 <lcd_scan_dir+0x714>)
 8001934:	b2db      	uxtb	r3, r3
 8001936:	60d3      	str	r3, [r2, #12]
 8001938:	4b44      	ldr	r3, [pc, #272]	@ (8001a4c <lcd_scan_dir+0x710>)
 800193a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	4b42      	ldr	r3, [pc, #264]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001942:	2280      	movs	r2, #128	@ 0x80
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	4b41      	ldr	r3, [pc, #260]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800194c:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 800194e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a48 <lcd_scan_dir+0x70c>)
 8001950:	899b      	ldrh	r3, [r3, #12]
 8001952:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001954:	4b3d      	ldr	r3, [pc, #244]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001956:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800195a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800195c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a4c <lcd_scan_dir+0x710>)
 800195e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001962:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001964:	8bfb      	ldrh	r3, [r7, #30]
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b39      	ldr	r3, [pc, #228]	@ (8001a50 <lcd_scan_dir+0x714>)
 800196a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800196c:	4b37      	ldr	r3, [pc, #220]	@ (8001a4c <lcd_scan_dir+0x710>)
 800196e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001972:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001974:	4b35      	ldr	r3, [pc, #212]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001976:	2280      	movs	r2, #128	@ 0x80
 8001978:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800197a:	4b34      	ldr	r3, [pc, #208]	@ (8001a4c <lcd_scan_dir+0x710>)
 800197c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001980:	611a      	str	r2, [r3, #16]
}
 8001982:	bf00      	nop
        lcd_wr_data(0);
 8001984:	4b31      	ldr	r3, [pc, #196]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001986:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a4c <lcd_scan_dir+0x710>)
 800198e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <lcd_scan_dir+0x714>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	4b2c      	ldr	r3, [pc, #176]	@ (8001a4c <lcd_scan_dir+0x710>)
 800199c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019a0:	611a      	str	r2, [r3, #16]
 80019a2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a4c <lcd_scan_dir+0x710>)
 80019a4:	2280      	movs	r2, #128	@ 0x80
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <lcd_scan_dir+0x710>)
 80019aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ae:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 80019b0:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <lcd_scan_dir+0x710>)
 80019b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019b6:	611a      	str	r2, [r3, #16]
 80019b8:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <lcd_scan_dir+0x710>)
 80019ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <lcd_scan_dir+0x714>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <lcd_scan_dir+0x710>)
 80019c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <lcd_scan_dir+0x710>)
 80019d0:	2280      	movs	r2, #128	@ 0x80
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <lcd_scan_dir+0x710>)
 80019d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019da:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <lcd_scan_dir+0x710>)
 80019de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <lcd_scan_dir+0x710>)
 80019e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019ea:	611a      	str	r2, [r3, #16]
 80019ec:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <lcd_scan_dir+0x70c>)
 80019ee:	885b      	ldrh	r3, [r3, #2]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	121a      	asrs	r2, r3, #8
 80019f4:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <lcd_scan_dir+0x714>)
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <lcd_scan_dir+0x710>)
 80019fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001a02:	2280      	movs	r2, #128	@ 0x80
 8001a04:	611a      	str	r2, [r3, #16]
 8001a06:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a0c:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001a10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a14:	611a      	str	r2, [r3, #16]
 8001a16:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001a18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <lcd_scan_dir+0x70c>)
 8001a20:	885b      	ldrh	r3, [r3, #2]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <lcd_scan_dir+0x714>)
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	60d3      	str	r3, [r2, #12]
 8001a2a:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001a2c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a30:	611a      	str	r2, [r3, #16]
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001a34:	2280      	movs	r2, #128	@ 0x80
 8001a36:	611a      	str	r2, [r3, #16]
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <lcd_scan_dir+0x710>)
 8001a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a3e:	611a      	str	r2, [r3, #16]
}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	@ 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200001f4 	.word	0x200001f4
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40010c00 	.word	0x40010c00

08001a54 <lcd_draw_point>:
 * @param       x,y: ����
 * @param       color: �����ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	603a      	str	r2, [r7, #0]
 8001a5e:	80fb      	strh	r3, [r7, #6]
 8001a60:	460b      	mov	r3, r1
 8001a62:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* ���ù��λ�� */
 8001a64:	88ba      	ldrh	r2, [r7, #4]
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f952 	bl	8000d14 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8001a70:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <lcd_draw_point+0x88>)
 8001a72:	891b      	ldrh	r3, [r3, #8]
 8001a74:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001a76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <lcd_draw_point+0x8c>)
 8001a78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a7c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001a7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <lcd_draw_point+0x8c>)
 8001a80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a84:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001a86:	89fb      	ldrh	r3, [r7, #14]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <lcd_draw_point+0x90>)
 8001a8c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001a8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <lcd_draw_point+0x8c>)
 8001a90:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a94:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001a96:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <lcd_draw_point+0x8c>)
 8001a98:	2280      	movs	r2, #128	@ 0x80
 8001a9a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001a9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <lcd_draw_point+0x8c>)
 8001a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aa2:	611a      	str	r2, [r3, #16]
}
 8001aa4:	bf00      	nop
}
 8001aa6:	bf00      	nop
    lcd_write_ram_prepare();    /* ��ʼд��GRAM */
    lcd_wr_data(color);
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <lcd_draw_point+0x8c>)
 8001aaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aae:	611a      	str	r2, [r3, #16]
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <lcd_draw_point+0x8c>)
 8001ab2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <lcd_draw_point+0x90>)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	60d3      	str	r3, [r2, #12]
 8001abe:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <lcd_draw_point+0x8c>)
 8001ac0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ac4:	611a      	str	r2, [r3, #16]
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <lcd_draw_point+0x8c>)
 8001ac8:	2280      	movs	r2, #128	@ 0x80
 8001aca:	611a      	str	r2, [r3, #16]
 8001acc:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <lcd_draw_point+0x8c>)
 8001ace:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ad2:	611a      	str	r2, [r3, #16]
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200001f4 	.word	0x200001f4
 8001ae0:	40011000 	.word	0x40011000
 8001ae4:	40010c00 	.word	0x40010c00

08001ae8 <lcd_ssd_backlight_set>:
 * @brief       SSD1963�����������ú���
 * @param       pwm: ����ȼ�,0~100.Խ��Խ��.
 * @retval      ��
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
 8001af2:	23be      	movs	r3, #190	@ 0xbe
 8001af4:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001af6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001af8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001afc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001afe:	4b58      	ldr	r3, [pc, #352]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b04:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b56      	ldr	r3, [pc, #344]	@ (8001c64 <lcd_ssd_backlight_set+0x17c>)
 8001b0c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001b0e:	4b54      	ldr	r3, [pc, #336]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b14:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001b16:	4b52      	ldr	r3, [pc, #328]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b18:	2280      	movs	r2, #128	@ 0x80
 8001b1a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001b1c:	4b50      	ldr	r3, [pc, #320]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b22:	611a      	str	r2, [r3, #16]
}
 8001b24:	bf00      	nop
    lcd_wr_regno(0xBE);         /* ����PWM��� */
    lcd_wr_data(0x05);          /* 1����PWMƵ�� */
 8001b26:	4b4e      	ldr	r3, [pc, #312]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b2c:	611a      	str	r2, [r3, #16]
 8001b2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	4b4b      	ldr	r3, [pc, #300]	@ (8001c64 <lcd_ssd_backlight_set+0x17c>)
 8001b38:	2205      	movs	r2, #5
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	4b48      	ldr	r3, [pc, #288]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b3e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	4b46      	ldr	r3, [pc, #280]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b46:	2280      	movs	r2, #128	@ 0x80
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	4b45      	ldr	r3, [pc, #276]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b50:	611a      	str	r2, [r3, #16]
    lcd_wr_data(pwm * 2.55);    /* 2����PWMռ�ձ� */
 8001b52:	4b43      	ldr	r3, [pc, #268]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b58:	611a      	str	r2, [r3, #16]
 8001b5a:	4b41      	ldr	r3, [pc, #260]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b60:	611a      	str	r2, [r3, #16]
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fcb9 	bl	80004dc <__aeabi_i2d>
 8001b6a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001c58 <lcd_ssd_backlight_set+0x170>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fd1e 	bl	80005b0 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4c3a      	ldr	r4, [pc, #232]	@ (8001c64 <lcd_ssd_backlight_set+0x17c>)
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7fe ffef 	bl	8000b60 <__aeabi_d2uiz>
 8001b82:	4603      	mov	r3, r0
 8001b84:	60e3      	str	r3, [r4, #12]
 8001b86:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	4b34      	ldr	r3, [pc, #208]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b90:	2280      	movs	r2, #128	@ 0x80
 8001b92:	611a      	str	r2, [r3, #16]
 8001b94:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b9a:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x01);          /* 3����C */
 8001b9c:	4b30      	ldr	r3, [pc, #192]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001b9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba2:	611a      	str	r2, [r3, #16]
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001ba6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	4b2d      	ldr	r3, [pc, #180]	@ (8001c64 <lcd_ssd_backlight_set+0x17c>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001bb4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001bb8:	611a      	str	r2, [r3, #16]
 8001bba:	4b29      	ldr	r3, [pc, #164]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001bbc:	2280      	movs	r2, #128	@ 0x80
 8001bbe:	611a      	str	r2, [r3, #16]
 8001bc0:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bc6:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0xFF);          /* 4����D */
 8001bc8:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001bca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	4b23      	ldr	r3, [pc, #140]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001bd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bd6:	611a      	str	r2, [r3, #16]
 8001bd8:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <lcd_ssd_backlight_set+0x17c>)
 8001bda:	22ff      	movs	r2, #255	@ 0xff
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001be0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001be4:	611a      	str	r2, [r3, #16]
 8001be6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001be8:	2280      	movs	r2, #128	@ 0x80
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	4b1c      	ldr	r3, [pc, #112]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bf2:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 5����E */
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001bf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001bfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c02:	611a      	str	r2, [r3, #16]
 8001c04:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <lcd_ssd_backlight_set+0x17c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001c0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001c14:	2280      	movs	r2, #128	@ 0x80
 8001c16:	611a      	str	r2, [r3, #16]
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c1e:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 6����F */
 8001c20:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001c22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c26:	611a      	str	r2, [r3, #16]
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001c2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <lcd_ssd_backlight_set+0x17c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001c38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c3c:	611a      	str	r2, [r3, #16]
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001c40:	2280      	movs	r2, #128	@ 0x80
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <lcd_ssd_backlight_set+0x178>)
 8001c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c4a:	611a      	str	r2, [r3, #16]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	f3af 8000 	nop.w
 8001c58:	66666666 	.word	0x66666666
 8001c5c:	40046666 	.word	0x40046666
 8001c60:	40011000 	.word	0x40011000
 8001c64:	40010c00 	.word	0x40010c00

08001c68 <lcd_display_dir>:
 * @brief       ����LCD��ʾ����
 * @param       dir:0,����; 1,����
 * @retval      ��
 */
void lcd_display_dir(uint8_t dir)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* ����/���� */
 8001c72:	4a68      	ldr	r2, [pc, #416]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* ���� */
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d165      	bne.n	8001d4a <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 8001c7e:	4b65      	ldr	r3, [pc, #404]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001c80:	22f0      	movs	r2, #240	@ 0xf0
 8001c82:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 8001c84:	4b63      	ldr	r3, [pc, #396]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001c86:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001c8a:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001c8c:	4b61      	ldr	r3, [pc, #388]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001c8e:	889b      	ldrh	r3, [r3, #4]
 8001c90:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d114      	bne.n	8001cc2 <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8001c98:	4b5e      	ldr	r3, [pc, #376]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001c9a:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001c9e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001ca0:	4b5c      	ldr	r3, [pc, #368]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001ca2:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001ca6:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001caa:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001cae:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8001cb0:	4b58      	ldr	r3, [pc, #352]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001cb2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001cb6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001cb8:	4b56      	ldr	r3, [pc, #344]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001cba:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001cbe:	805a      	strh	r2, [r3, #2]
 8001cc0:	e020      	b.n	8001d04 <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 8001cc2:	4b54      	ldr	r3, [pc, #336]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001cc4:	889b      	ldrh	r3, [r3, #4]
 8001cc6:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d111      	bne.n	8001cf2 <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001cce:	4b51      	ldr	r3, [pc, #324]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001cd0:	222c      	movs	r2, #44	@ 0x2c
 8001cd2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* ����дX����ָ�� */
 8001cd4:	4b4f      	ldr	r3, [pc, #316]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001cd6:	222b      	movs	r2, #43	@ 0x2b
 8001cd8:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* ����дY����ָ�� */
 8001cda:	4b4e      	ldr	r3, [pc, #312]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001cdc:	222a      	movs	r2, #42	@ 0x2a
 8001cde:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* ���ÿ��480 */
 8001ce0:	4b4c      	ldr	r3, [pc, #304]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001ce2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001ce6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* ���ø߶�800 */
 8001ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001cea:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001cee:	805a      	strh	r2, [r3, #2]
 8001cf0:	e008      	b.n	8001d04 <lcd_display_dir+0x9c>
        }
        else   /* ����IC, ����: 9341 / 5310 / 7789 / 7796 / 9806 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001cf2:	4b48      	ldr	r3, [pc, #288]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001cf4:	222c      	movs	r2, #44	@ 0x2c
 8001cf6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001cf8:	4b46      	ldr	r3, [pc, #280]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001cfa:	222a      	movs	r2, #42	@ 0x2a
 8001cfc:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001cfe:	4b45      	ldr	r3, [pc, #276]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d00:	222b      	movs	r2, #43	@ 0x2b
 8001d02:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001d04:	4b43      	ldr	r3, [pc, #268]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d06:	889b      	ldrh	r3, [r3, #4]
 8001d08:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d005      	beq.n	8001d1c <lcd_display_dir+0xb4>
 8001d10:	4b40      	ldr	r3, [pc, #256]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d12:	889b      	ldrh	r3, [r3, #4]
 8001d14:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d107      	bne.n	8001d2c <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d1e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001d22:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001d24:	4b3b      	ldr	r3, [pc, #236]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d26:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001d2a:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* �����9806 ���ʾ�� 480*800 �ֱ��� */
 8001d2c:	4b39      	ldr	r3, [pc, #228]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d2e:	889b      	ldrh	r3, [r3, #4]
 8001d30:	f649 0206 	movw	r2, #38918	@ 0x9806
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d165      	bne.n	8001e04 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001d38:	4b36      	ldr	r3, [pc, #216]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d3a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001d3e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001d40:	4b34      	ldr	r3, [pc, #208]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d42:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001d46:	805a      	strh	r2, [r3, #2]
 8001d48:	e05c      	b.n	8001e04 <lcd_display_dir+0x19c>
        }
    }
    else                /* ���� */
    {
        lcddev.width = 320;         /* Ĭ�Ͽ�� */
 8001d4a:	4b32      	ldr	r3, [pc, #200]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d4c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001d50:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Ĭ�ϸ߶� */
 8001d52:	4b30      	ldr	r3, [pc, #192]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d54:	22f0      	movs	r2, #240	@ 0xf0
 8001d56:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001d58:	4b2e      	ldr	r3, [pc, #184]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d5a:	889b      	ldrh	r3, [r3, #4]
 8001d5c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d114      	bne.n	8001d8e <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 8001d64:	4b2b      	ldr	r3, [pc, #172]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d66:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001d6a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001d6c:	4b29      	ldr	r3, [pc, #164]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d6e:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001d72:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001d74:	4b27      	ldr	r3, [pc, #156]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d76:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001d7a:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8001d7c:	4b25      	ldr	r3, [pc, #148]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d7e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001d82:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001d84:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d86:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001d8a:	805a      	strh	r2, [r3, #2]
 8001d8c:	e026      	b.n	8001ddc <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8001d8e:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d90:	889b      	ldrh	r3, [r3, #4]
 8001d92:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d005      	beq.n	8001da6 <lcd_display_dir+0x13e>
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001d9c:	889b      	ldrh	r3, [r3, #4]
 8001d9e:	f649 0206 	movw	r2, #38918	@ 0x9806
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d111      	bne.n	8001dca <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001da6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001da8:	222c      	movs	r2, #44	@ 0x2c
 8001daa:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* ����дX����ָ�� */
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001dae:	222a      	movs	r2, #42	@ 0x2a
 8001db0:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* ����дY����ָ�� */
 8001db2:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001db4:	222b      	movs	r2, #43	@ 0x2b
 8001db6:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* ���ÿ��800 */
 8001db8:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001dba:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001dbe:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* ���ø߶�480 */
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001dc2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001dc6:	805a      	strh	r2, [r3, #2]
 8001dc8:	e008      	b.n	8001ddc <lcd_display_dir+0x174>
        }
        else     /* ����IC, ����: 9341 / 5310 / 7789 / 7796 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001dca:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001dcc:	222c      	movs	r2, #44	@ 0x2c
 8001dce:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001dd0:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001dd2:	222a      	movs	r2, #42	@ 0x2a
 8001dd4:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001dd8:	222b      	movs	r2, #43	@ 0x2b
 8001dda:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001dde:	889b      	ldrh	r3, [r3, #4]
 8001de0:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d005      	beq.n	8001df4 <lcd_display_dir+0x18c>
 8001de8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001dea:	889b      	ldrh	r3, [r3, #4]
 8001dec:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d107      	bne.n	8001e04 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001df4:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001df6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001dfa:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <lcd_display_dir+0x1ac>)
 8001dfe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e02:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Ĭ��ɨ�跽�� */
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff fa99 	bl	800133c <lcd_scan_dir>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200001f4 	.word	0x200001f4

08001e18 <lcd_init>:
 *
 * @param       ��
 * @retval      ��
 */
void lcd_init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0da      	sub	sp, #360	@ 0x168
 8001e1c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_struct;
    
    LCD_BL_GPIO_CLK_ENABLE();   /* LCD_BL��ʱ��ʹ�� */
 8001e1e:	4bbe      	ldr	r3, [pc, #760]	@ (8002118 <lcd_init+0x300>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	4abd      	ldr	r2, [pc, #756]	@ (8002118 <lcd_init+0x300>)
 8001e24:	f043 0310 	orr.w	r3, r3, #16
 8001e28:	6193      	str	r3, [r2, #24]
 8001e2a:	4bbb      	ldr	r3, [pc, #748]	@ (8002118 <lcd_init+0x300>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0210 	and.w	r2, r3, #16
 8001e32:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e36:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e40:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e44:	681b      	ldr	r3, [r3, #0]
    LCD_CS_GPIO_CLK_ENABLE();   /* LCD_CS��ʱ��ʹ�� */
 8001e46:	4bb4      	ldr	r3, [pc, #720]	@ (8002118 <lcd_init+0x300>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	4ab3      	ldr	r2, [pc, #716]	@ (8002118 <lcd_init+0x300>)
 8001e4c:	f043 0310 	orr.w	r3, r3, #16
 8001e50:	6193      	str	r3, [r2, #24]
 8001e52:	4bb1      	ldr	r3, [pc, #708]	@ (8002118 <lcd_init+0x300>)
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f003 0210 	and.w	r2, r3, #16
 8001e5a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e5e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e68:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e6c:	681b      	ldr	r3, [r3, #0]
    LCD_WR_GPIO_CLK_ENABLE();   /* LCD_WR��ʱ��ʹ�� */
 8001e6e:	4baa      	ldr	r3, [pc, #680]	@ (8002118 <lcd_init+0x300>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	4aa9      	ldr	r2, [pc, #676]	@ (8002118 <lcd_init+0x300>)
 8001e74:	f043 0310 	orr.w	r3, r3, #16
 8001e78:	6193      	str	r3, [r2, #24]
 8001e7a:	4ba7      	ldr	r3, [pc, #668]	@ (8002118 <lcd_init+0x300>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0210 	and.w	r2, r3, #16
 8001e82:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e86:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e90:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001e94:	681b      	ldr	r3, [r3, #0]
    LCD_RD_GPIO_CLK_ENABLE();   /* LCD_RD��ʱ��ʹ�� */
 8001e96:	4ba0      	ldr	r3, [pc, #640]	@ (8002118 <lcd_init+0x300>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	4a9f      	ldr	r2, [pc, #636]	@ (8002118 <lcd_init+0x300>)
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	6193      	str	r3, [r2, #24]
 8001ea2:	4b9d      	ldr	r3, [pc, #628]	@ (8002118 <lcd_init+0x300>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 0210 	and.w	r2, r3, #16
 8001eaa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001eae:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001eb8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001ebc:	681b      	ldr	r3, [r3, #0]
    LCD_RS_GPIO_CLK_ENABLE();   /* LCD_RS��ʱ��ʹ�� */
 8001ebe:	4b96      	ldr	r3, [pc, #600]	@ (8002118 <lcd_init+0x300>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	4a95      	ldr	r2, [pc, #596]	@ (8002118 <lcd_init+0x300>)
 8001ec4:	f043 0310 	orr.w	r3, r3, #16
 8001ec8:	6193      	str	r3, [r2, #24]
 8001eca:	4b93      	ldr	r3, [pc, #588]	@ (8002118 <lcd_init+0x300>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 0210 	and.w	r2, r3, #16
 8001ed2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ed6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ee0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ee4:	681b      	ldr	r3, [r3, #0]
    LCD_DATA_GPIO_CLK_ENABLE(); /* LCD_DATA��ʱ��ʹ�� */
 8001ee6:	4b8c      	ldr	r3, [pc, #560]	@ (8002118 <lcd_init+0x300>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4a8b      	ldr	r2, [pc, #556]	@ (8002118 <lcd_init+0x300>)
 8001eec:	f043 0308 	orr.w	r3, r3, #8
 8001ef0:	6193      	str	r3, [r2, #24]
 8001ef2:	4b89      	ldr	r3, [pc, #548]	@ (8002118 <lcd_init+0x300>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0208 	and.w	r2, r3, #8
 8001efa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001efe:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f08:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f0c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_AFIO_CLK_ENABLE();
 8001f0e:	4b82      	ldr	r3, [pc, #520]	@ (8002118 <lcd_init+0x300>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	4a81      	ldr	r2, [pc, #516]	@ (8002118 <lcd_init+0x300>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6193      	str	r3, [r2, #24]
 8001f1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002118 <lcd_init+0x300>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f26:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f30:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f34:	681b      	ldr	r3, [r3, #0]
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); /* ��ֹJTAG, ʹ��SWD, �ͷ�PB3,PB4������������ͨIO�� */
 8001f36:	4b79      	ldr	r3, [pc, #484]	@ (800211c <lcd_init+0x304>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001f3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001f42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f46:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001f4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001f4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f52:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001f56:	4a71      	ldr	r2, [pc, #452]	@ (800211c <lcd_init+0x304>)
 8001f58:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001f5c:	6053      	str	r3, [r2, #4]
    
    gpio_init_struct.Pin = LCD_BL_GPIO_PIN;
 8001f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f62:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;               
 8001f66:	2301      	movs	r3, #1
 8001f68:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          
 8001f72:	2303      	movs	r3, #3
 8001f74:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &gpio_init_struct);     /* LCD_BL����ģʽ����(�������) */
 8001f78:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4868      	ldr	r0, [pc, #416]	@ (8002120 <lcd_init+0x308>)
 8001f80:	f006 f994 	bl	80082ac <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_CS_GPIO_PIN;
 8001f84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f88:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ���츴�� */
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    /* ���� */
 8001f92:	2301      	movs	r3, #1
 8001f94:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          /* ���� */
 8001f98:	2303      	movs	r3, #3
 8001f9a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_CS���� */
 8001f9e:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	485e      	ldr	r0, [pc, #376]	@ (8002120 <lcd_init+0x308>)
 8001fa6:	f006 f981 	bl	80082ac <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_WR_GPIO_PIN;
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_WR���� */
 8001fb0:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	485a      	ldr	r0, [pc, #360]	@ (8002120 <lcd_init+0x308>)
 8001fb8:	f006 f978 	bl	80082ac <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RD_GPIO_PIN;
 8001fbc:	2340      	movs	r3, #64	@ 0x40
 8001fbe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RD���� */
 8001fc2:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4855      	ldr	r0, [pc, #340]	@ (8002120 <lcd_init+0x308>)
 8001fca:	f006 f96f 	bl	80082ac <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RS_GPIO_PIN;
 8001fce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RS���� */
 8001fd6:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4850      	ldr	r0, [pc, #320]	@ (8002120 <lcd_init+0x308>)
 8001fde:	f006 f965 	bl	80082ac <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8001fe2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fe6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ������� */
 8001fea:	2301      	movs	r3, #1
 8001fec:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);   /* LCD_DATA����ģʽ���� */
 8001ff0:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	484b      	ldr	r0, [pc, #300]	@ (8002124 <lcd_init+0x30c>)
 8001ff8:	f006 f958 	bl	80082ac <HAL_GPIO_Init>
    LCD_WR(1);                  /* WR Ĭ�ϸߵ�ƽ */
 8001ffc:	4b48      	ldr	r3, [pc, #288]	@ (8002120 <lcd_init+0x308>)
 8001ffe:	2280      	movs	r2, #128	@ 0x80
 8002000:	611a      	str	r2, [r3, #16]
    LCD_RD(1);                  /* RD Ĭ�ϸߵ�ƽ */
 8002002:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <lcd_init+0x308>)
 8002004:	2240      	movs	r2, #64	@ 0x40
 8002006:	611a      	str	r2, [r3, #16]
    LCD_CS(1);                  /* CS Ĭ�ϸߵ�ƽ */
 8002008:	4b45      	ldr	r3, [pc, #276]	@ (8002120 <lcd_init+0x308>)
 800200a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800200e:	611a      	str	r2, [r3, #16]
    LCD_RS(1);                  /* RS Ĭ�ϸߵ�ƽ */
 8002010:	4b43      	ldr	r3, [pc, #268]	@ (8002120 <lcd_init+0x308>)
 8002012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002016:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(0XFFFF);       /* DATA Ĭ�ϸߵ�ƽ */
 8002018:	4b42      	ldr	r3, [pc, #264]	@ (8002124 <lcd_init+0x30c>)
 800201a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800201e:	60da      	str	r2, [r3, #12]

    lcd_opt_delay(0X1FFFF);
 8002020:	4841      	ldr	r0, [pc, #260]	@ (8002128 <lcd_init+0x310>)
 8002022:	f7fe fe23 	bl	8000c6c <lcd_opt_delay>
 8002026:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800202a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800202e:	22d3      	movs	r2, #211	@ 0xd3
 8002030:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002032:	4b3b      	ldr	r3, [pc, #236]	@ (8002120 <lcd_init+0x308>)
 8002034:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002038:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800203a:	4b39      	ldr	r3, [pc, #228]	@ (8002120 <lcd_init+0x308>)
 800203c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002040:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002042:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002046:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b29a      	uxth	r2, r3
 800204e:	4b35      	ldr	r3, [pc, #212]	@ (8002124 <lcd_init+0x30c>)
 8002050:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002052:	4b33      	ldr	r3, [pc, #204]	@ (8002120 <lcd_init+0x308>)
 8002054:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002058:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800205a:	4b31      	ldr	r3, [pc, #196]	@ (8002120 <lcd_init+0x308>)
 800205c:	2280      	movs	r2, #128	@ 0x80
 800205e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002060:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <lcd_init+0x308>)
 8002062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002066:	611a      	str	r2, [r3, #16]
}
 8002068:	bf00      	nop

    /* ����9341 ID�Ķ�ȡ */
    lcd_wr_regno(0XD3);
    lcddev.id = lcd_rd_data();  /* dummy read */
 800206a:	f7fe fe0f 	bl	8000c8c <lcd_rd_data>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	4b2e      	ldr	r3, [pc, #184]	@ (800212c <lcd_init+0x314>)
 8002074:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ����0X00 */
 8002076:	f7fe fe09 	bl	8000c8c <lcd_rd_data>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	4b2b      	ldr	r3, [pc, #172]	@ (800212c <lcd_init+0x314>)
 8002080:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ��ȡ0X93 */
 8002082:	f7fe fe03 	bl	8000c8c <lcd_rd_data>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	4b28      	ldr	r3, [pc, #160]	@ (800212c <lcd_init+0x314>)
 800208c:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 800208e:	4b27      	ldr	r3, [pc, #156]	@ (800212c <lcd_init+0x314>)
 8002090:	889b      	ldrh	r3, [r3, #4]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b25      	ldr	r3, [pc, #148]	@ (800212c <lcd_init+0x314>)
 8002098:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* ��ȡ0X41 */
 800209a:	f7fe fdf7 	bl	8000c8c <lcd_rd_data>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b22      	ldr	r3, [pc, #136]	@ (800212c <lcd_init+0x314>)
 80020a4:	889b      	ldrh	r3, [r3, #4]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	4b20      	ldr	r3, [pc, #128]	@ (800212c <lcd_init+0x314>)
 80020ac:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* ���� 9341 , ���Կ����ǲ��� ST7789 */
 80020ae:	4b1f      	ldr	r3, [pc, #124]	@ (800212c <lcd_init+0x314>)
 80020b0:	889b      	ldrh	r3, [r3, #4]
 80020b2:	f249 3241 	movw	r2, #37697	@ 0x9341
 80020b6:	4293      	cmp	r3, r2
 80020b8:	f000 820e 	beq.w	80024d8 <lcd_init+0x6c0>
 80020bc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80020c0:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 80020c4:	2204      	movs	r2, #4
 80020c6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80020c8:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <lcd_init+0x308>)
 80020ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020ce:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <lcd_init+0x308>)
 80020d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020d6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80020d8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80020dc:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <lcd_init+0x30c>)
 80020e6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80020e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <lcd_init+0x308>)
 80020ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020ee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <lcd_init+0x308>)
 80020f2:	2280      	movs	r2, #128	@ 0x80
 80020f4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <lcd_init+0x308>)
 80020f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020fc:	611a      	str	r2, [r3, #16]
}
 80020fe:	bf00      	nop
    {
        lcd_wr_regno(0X04);
        lcddev.id = lcd_rd_data();      /* dummy read */
 8002100:	f7fe fdc4 	bl	8000c8c <lcd_rd_data>
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <lcd_init+0x314>)
 800210a:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ����0X85 */
 800210c:	f7fe fdbe 	bl	8000c8c <lcd_rd_data>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	e00c      	b.n	8002130 <lcd_init+0x318>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	40010000 	.word	0x40010000
 8002120:	40011000 	.word	0x40011000
 8002124:	40010c00 	.word	0x40010c00
 8002128:	0001ffff 	.word	0x0001ffff
 800212c:	200001f4 	.word	0x200001f4
 8002130:	4bb1      	ldr	r3, [pc, #708]	@ (80023f8 <lcd_init+0x5e0>)
 8002132:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ��ȡ0X85 */
 8002134:	f7fe fdaa 	bl	8000c8c <lcd_rd_data>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	4bae      	ldr	r3, [pc, #696]	@ (80023f8 <lcd_init+0x5e0>)
 800213e:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8002140:	4bad      	ldr	r3, [pc, #692]	@ (80023f8 <lcd_init+0x5e0>)
 8002142:	889b      	ldrh	r3, [r3, #4]
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	b29a      	uxth	r2, r3
 8002148:	4bab      	ldr	r3, [pc, #684]	@ (80023f8 <lcd_init+0x5e0>)
 800214a:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* ��ȡ0X52 */
 800214c:	f7fe fd9e 	bl	8000c8c <lcd_rd_data>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	4ba8      	ldr	r3, [pc, #672]	@ (80023f8 <lcd_init+0x5e0>)
 8002156:	889b      	ldrh	r3, [r3, #4]
 8002158:	4313      	orrs	r3, r2
 800215a:	b29a      	uxth	r2, r3
 800215c:	4ba6      	ldr	r3, [pc, #664]	@ (80023f8 <lcd_init+0x5e0>)
 800215e:	809a      	strh	r2, [r3, #4]
        
        if (lcddev.id == 0X8552)        /* ��8552��IDת����7789 */
 8002160:	4ba5      	ldr	r3, [pc, #660]	@ (80023f8 <lcd_init+0x5e0>)
 8002162:	889b      	ldrh	r3, [r3, #4]
 8002164:	f248 5252 	movw	r2, #34130	@ 0x8552
 8002168:	4293      	cmp	r3, r2
 800216a:	d103      	bne.n	8002174 <lcd_init+0x35c>
        {
            lcddev.id = 0x7789;
 800216c:	4ba2      	ldr	r3, [pc, #648]	@ (80023f8 <lcd_init+0x5e0>)
 800216e:	f247 7289 	movw	r2, #30601	@ 0x7789
 8002172:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Ҳ����ST7789, �����ǲ��� NT35310 */
 8002174:	4ba0      	ldr	r3, [pc, #640]	@ (80023f8 <lcd_init+0x5e0>)
 8002176:	889b      	ldrh	r3, [r3, #4]
 8002178:	f247 7289 	movw	r2, #30601	@ 0x7789
 800217c:	4293      	cmp	r3, r2
 800217e:	f000 81ab 	beq.w	80024d8 <lcd_init+0x6c0>
 8002182:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002186:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800218a:	22d4      	movs	r2, #212	@ 0xd4
 800218c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800218e:	4b9b      	ldr	r3, [pc, #620]	@ (80023fc <lcd_init+0x5e4>)
 8002190:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002194:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002196:	4b99      	ldr	r3, [pc, #612]	@ (80023fc <lcd_init+0x5e4>)
 8002198:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800219c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800219e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021a2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	4b95      	ldr	r3, [pc, #596]	@ (8002400 <lcd_init+0x5e8>)
 80021ac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80021ae:	4b93      	ldr	r3, [pc, #588]	@ (80023fc <lcd_init+0x5e4>)
 80021b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021b4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80021b6:	4b91      	ldr	r3, [pc, #580]	@ (80023fc <lcd_init+0x5e4>)
 80021b8:	2280      	movs	r2, #128	@ 0x80
 80021ba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80021bc:	4b8f      	ldr	r3, [pc, #572]	@ (80023fc <lcd_init+0x5e4>)
 80021be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021c2:	611a      	str	r2, [r3, #16]
}
 80021c4:	bf00      	nop
        {
            lcd_wr_regno(0xD4);
            lcddev.id = lcd_rd_data();  /* dummy read */
 80021c6:	f7fe fd61 	bl	8000c8c <lcd_rd_data>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b8a      	ldr	r3, [pc, #552]	@ (80023f8 <lcd_init+0x5e0>)
 80021d0:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x01 */
 80021d2:	f7fe fd5b 	bl	8000c8c <lcd_rd_data>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	4b87      	ldr	r3, [pc, #540]	@ (80023f8 <lcd_init+0x5e0>)
 80021dc:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x53 */
 80021de:	f7fe fd55 	bl	8000c8c <lcd_rd_data>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b84      	ldr	r3, [pc, #528]	@ (80023f8 <lcd_init+0x5e0>)
 80021e8:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 80021ea:	4b83      	ldr	r3, [pc, #524]	@ (80023f8 <lcd_init+0x5e0>)
 80021ec:	889b      	ldrh	r3, [r3, #4]
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	4b81      	ldr	r3, [pc, #516]	@ (80023f8 <lcd_init+0x5e0>)
 80021f4:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* �������0x10 */
 80021f6:	f7fe fd49 	bl	8000c8c <lcd_rd_data>
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b7e      	ldr	r3, [pc, #504]	@ (80023f8 <lcd_init+0x5e0>)
 8002200:	889b      	ldrh	r3, [r3, #4]
 8002202:	4313      	orrs	r3, r2
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b7c      	ldr	r3, [pc, #496]	@ (80023f8 <lcd_init+0x5e0>)
 8002208:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Ҳ����NT35310,���Կ����ǲ���ST7796 */
 800220a:	4b7b      	ldr	r3, [pc, #492]	@ (80023f8 <lcd_init+0x5e0>)
 800220c:	889b      	ldrh	r3, [r3, #4]
 800220e:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002212:	4293      	cmp	r3, r2
 8002214:	f000 8160 	beq.w	80024d8 <lcd_init+0x6c0>
 8002218:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800221c:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8002220:	22d3      	movs	r2, #211	@ 0xd3
 8002222:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002224:	4b75      	ldr	r3, [pc, #468]	@ (80023fc <lcd_init+0x5e4>)
 8002226:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800222a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800222c:	4b73      	ldr	r3, [pc, #460]	@ (80023fc <lcd_init+0x5e4>)
 800222e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002232:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002234:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002238:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	b29a      	uxth	r2, r3
 8002240:	4b6f      	ldr	r3, [pc, #444]	@ (8002400 <lcd_init+0x5e8>)
 8002242:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002244:	4b6d      	ldr	r3, [pc, #436]	@ (80023fc <lcd_init+0x5e4>)
 8002246:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800224a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800224c:	4b6b      	ldr	r3, [pc, #428]	@ (80023fc <lcd_init+0x5e4>)
 800224e:	2280      	movs	r2, #128	@ 0x80
 8002250:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002252:	4b6a      	ldr	r3, [pc, #424]	@ (80023fc <lcd_init+0x5e4>)
 8002254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002258:	611a      	str	r2, [r3, #16]
}
 800225a:	bf00      	nop
            {
                lcd_wr_regno(0XD3);
                lcddev.id = lcd_rd_data();  /* dummy read */
 800225c:	f7fe fd16 	bl	8000c8c <lcd_rd_data>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	4b64      	ldr	r3, [pc, #400]	@ (80023f8 <lcd_init+0x5e0>)
 8002266:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ����0X00 */
 8002268:	f7fe fd10 	bl	8000c8c <lcd_rd_data>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	4b61      	ldr	r3, [pc, #388]	@ (80023f8 <lcd_init+0x5e0>)
 8002272:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ��ȡ0X77 */
 8002274:	f7fe fd0a 	bl	8000c8c <lcd_rd_data>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	4b5e      	ldr	r3, [pc, #376]	@ (80023f8 <lcd_init+0x5e0>)
 800227e:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8002280:	4b5d      	ldr	r3, [pc, #372]	@ (80023f8 <lcd_init+0x5e0>)
 8002282:	889b      	ldrh	r3, [r3, #4]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	b29a      	uxth	r2, r3
 8002288:	4b5b      	ldr	r3, [pc, #364]	@ (80023f8 <lcd_init+0x5e0>)
 800228a:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* ��ȡ0X96 */
 800228c:	f7fe fcfe 	bl	8000c8c <lcd_rd_data>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	4b58      	ldr	r3, [pc, #352]	@ (80023f8 <lcd_init+0x5e0>)
 8002296:	889b      	ldrh	r3, [r3, #4]
 8002298:	4313      	orrs	r3, r2
 800229a:	b29a      	uxth	r2, r3
 800229c:	4b56      	ldr	r3, [pc, #344]	@ (80023f8 <lcd_init+0x5e0>)
 800229e:	809a      	strh	r2, [r3, #4]
                
                if (lcddev.id != 0x7796)    /* Ҳ����ST7796,���Կ����ǲ���NT35510 */
 80022a0:	4b55      	ldr	r3, [pc, #340]	@ (80023f8 <lcd_init+0x5e0>)
 80022a2:	889b      	ldrh	r3, [r3, #4]
 80022a4:	f247 7296 	movw	r2, #30614	@ 0x7796
 80022a8:	4293      	cmp	r3, r2
 80022aa:	f000 8115 	beq.w	80024d8 <lcd_init+0x6c0>
                {
                    /* ������Կ�������ṩ�� */
                    lcd_write_reg(0xF000, 0x0055);
 80022ae:	2155      	movs	r1, #85	@ 0x55
 80022b0:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 80022b4:	f7fe fc98 	bl	8000be8 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 80022b8:	21aa      	movs	r1, #170	@ 0xaa
 80022ba:	f24f 0001 	movw	r0, #61441	@ 0xf001
 80022be:	f7fe fc93 	bl	8000be8 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 80022c2:	2152      	movs	r1, #82	@ 0x52
 80022c4:	f24f 0002 	movw	r0, #61442	@ 0xf002
 80022c8:	f7fe fc8e 	bl	8000be8 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 80022cc:	2108      	movs	r1, #8
 80022ce:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80022d2:	f7fe fc89 	bl	8000be8 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 80022d6:	2101      	movs	r1, #1
 80022d8:	f24f 0004 	movw	r0, #61444	@ 0xf004
 80022dc:	f7fe fc84 	bl	8000be8 <lcd_write_reg>
 80022e0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80022e4:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 80022e8:	f44f 4245 	mov.w	r2, #50432	@ 0xc500
 80022ec:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80022ee:	4b43      	ldr	r3, [pc, #268]	@ (80023fc <lcd_init+0x5e4>)
 80022f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022f4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80022f6:	4b41      	ldr	r3, [pc, #260]	@ (80023fc <lcd_init+0x5e4>)
 80022f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022fc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80022fe:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002302:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29a      	uxth	r2, r3
 800230a:	4b3d      	ldr	r3, [pc, #244]	@ (8002400 <lcd_init+0x5e8>)
 800230c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800230e:	4b3b      	ldr	r3, [pc, #236]	@ (80023fc <lcd_init+0x5e4>)
 8002310:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002314:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002316:	4b39      	ldr	r3, [pc, #228]	@ (80023fc <lcd_init+0x5e4>)
 8002318:	2280      	movs	r2, #128	@ 0x80
 800231a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800231c:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <lcd_init+0x5e4>)
 800231e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002322:	611a      	str	r2, [r3, #16]
}
 8002324:	bf00      	nop

                    lcd_wr_regno(0xC500);       /* ��ȡID�Ͱ�λ */
                    lcddev.id = lcd_rd_data();  /* ����0x55 */
 8002326:	f7fe fcb1 	bl	8000c8c <lcd_rd_data>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	4b32      	ldr	r3, [pc, #200]	@ (80023f8 <lcd_init+0x5e0>)
 8002330:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8002332:	4b31      	ldr	r3, [pc, #196]	@ (80023f8 <lcd_init+0x5e0>)
 8002334:	889b      	ldrh	r3, [r3, #4]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	b29a      	uxth	r2, r3
 800233a:	4b2f      	ldr	r3, [pc, #188]	@ (80023f8 <lcd_init+0x5e0>)
 800233c:	809a      	strh	r2, [r3, #4]
 800233e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002342:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002346:	f24c 5201 	movw	r2, #50433	@ 0xc501
 800234a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800234c:	4b2b      	ldr	r3, [pc, #172]	@ (80023fc <lcd_init+0x5e4>)
 800234e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002352:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002354:	4b29      	ldr	r3, [pc, #164]	@ (80023fc <lcd_init+0x5e4>)
 8002356:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800235a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800235c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002360:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29a      	uxth	r2, r3
 8002368:	4b25      	ldr	r3, [pc, #148]	@ (8002400 <lcd_init+0x5e8>)
 800236a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800236c:	4b23      	ldr	r3, [pc, #140]	@ (80023fc <lcd_init+0x5e4>)
 800236e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002372:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002374:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <lcd_init+0x5e4>)
 8002376:	2280      	movs	r2, #128	@ 0x80
 8002378:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800237a:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <lcd_init+0x5e4>)
 800237c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002380:	611a      	str	r2, [r3, #16]
}
 8002382:	bf00      	nop

                    lcd_wr_regno(0xC501);       /* ��ȡID�߰�λ */
                    lcddev.id |= lcd_rd_data(); /* ����0x10 */
 8002384:	f7fe fc82 	bl	8000c8c <lcd_rd_data>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <lcd_init+0x5e0>)
 800238e:	889b      	ldrh	r3, [r3, #4]
 8002390:	4313      	orrs	r3, r2
 8002392:	b29a      	uxth	r2, r3
 8002394:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <lcd_init+0x5e0>)
 8002396:	809a      	strh	r2, [r3, #4]
                    
                    //delay_ms(5);                /* �ȴ�5ms, ��Ϊ0XC501ָ���1963��˵���������λָ��, �ȴ�5ms��1963��λ����ٲ��� */

                    if (lcddev.id != 0x5510)    /* Ҳ����NT5510,���Կ����ǲ���ILI9806 */
 8002398:	4b17      	ldr	r3, [pc, #92]	@ (80023f8 <lcd_init+0x5e0>)
 800239a:	889b      	ldrh	r3, [r3, #4]
 800239c:	f245 5210 	movw	r2, #21776	@ 0x5510
 80023a0:	4293      	cmp	r3, r2
 80023a2:	f000 8099 	beq.w	80024d8 <lcd_init+0x6c0>
 80023a6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023aa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023ae:	22d3      	movs	r2, #211	@ 0xd3
 80023b0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80023b2:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <lcd_init+0x5e4>)
 80023b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80023ba:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <lcd_init+0x5e4>)
 80023bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80023c2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023c6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002400 <lcd_init+0x5e8>)
 80023d0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80023d2:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <lcd_init+0x5e4>)
 80023d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023d8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80023da:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <lcd_init+0x5e4>)
 80023dc:	2280      	movs	r2, #128	@ 0x80
 80023de:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80023e0:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <lcd_init+0x5e4>)
 80023e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023e6:	611a      	str	r2, [r3, #16]
}
 80023e8:	bf00      	nop
                    {
                        lcd_wr_regno(0XD3);
                        lcddev.id = lcd_rd_data();  /* dummy read */
 80023ea:	f7fe fc4f 	bl	8000c8c <lcd_rd_data>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b01      	ldr	r3, [pc, #4]	@ (80023f8 <lcd_init+0x5e0>)
 80023f4:	809a      	strh	r2, [r3, #4]
 80023f6:	e005      	b.n	8002404 <lcd_init+0x5ec>
 80023f8:	200001f4 	.word	0x200001f4
 80023fc:	40011000 	.word	0x40011000
 8002400:	40010c00 	.word	0x40010c00
                        lcddev.id = lcd_rd_data();  /* ����0X00 */
 8002404:	f7fe fc42 	bl	8000c8c <lcd_rd_data>
 8002408:	4603      	mov	r3, r0
 800240a:	461a      	mov	r2, r3
 800240c:	4bb2      	ldr	r3, [pc, #712]	@ (80026d8 <lcd_init+0x8c0>)
 800240e:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* ����0X98 */
 8002410:	f7fe fc3c 	bl	8000c8c <lcd_rd_data>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	4baf      	ldr	r3, [pc, #700]	@ (80026d8 <lcd_init+0x8c0>)
 800241a:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 800241c:	4bae      	ldr	r3, [pc, #696]	@ (80026d8 <lcd_init+0x8c0>)
 800241e:	889b      	ldrh	r3, [r3, #4]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	b29a      	uxth	r2, r3
 8002424:	4bac      	ldr	r3, [pc, #688]	@ (80026d8 <lcd_init+0x8c0>)
 8002426:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* ����0X06 */
 8002428:	f7fe fc30 	bl	8000c8c <lcd_rd_data>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	4ba9      	ldr	r3, [pc, #676]	@ (80026d8 <lcd_init+0x8c0>)
 8002432:	889b      	ldrh	r3, [r3, #4]
 8002434:	4313      	orrs	r3, r2
 8002436:	b29a      	uxth	r2, r3
 8002438:	4ba7      	ldr	r3, [pc, #668]	@ (80026d8 <lcd_init+0x8c0>)
 800243a:	809a      	strh	r2, [r3, #4]
                        
                        if (lcddev.id != 0x9806)    /* Ҳ����ILI9806,���Կ����ǲ���SSD1963 */
 800243c:	4ba6      	ldr	r3, [pc, #664]	@ (80026d8 <lcd_init+0x8c0>)
 800243e:	889b      	ldrh	r3, [r3, #4]
 8002440:	f649 0206 	movw	r2, #38918	@ 0x9806
 8002444:	4293      	cmp	r3, r2
 8002446:	d047      	beq.n	80024d8 <lcd_init+0x6c0>
 8002448:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800244c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002450:	22a1      	movs	r2, #161	@ 0xa1
 8002452:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002454:	4ba1      	ldr	r3, [pc, #644]	@ (80026dc <lcd_init+0x8c4>)
 8002456:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800245a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800245c:	4b9f      	ldr	r3, [pc, #636]	@ (80026dc <lcd_init+0x8c4>)
 800245e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002462:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002464:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002468:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29a      	uxth	r2, r3
 8002470:	4b9b      	ldr	r3, [pc, #620]	@ (80026e0 <lcd_init+0x8c8>)
 8002472:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002474:	4b99      	ldr	r3, [pc, #612]	@ (80026dc <lcd_init+0x8c4>)
 8002476:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800247a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800247c:	4b97      	ldr	r3, [pc, #604]	@ (80026dc <lcd_init+0x8c4>)
 800247e:	2280      	movs	r2, #128	@ 0x80
 8002480:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002482:	4b96      	ldr	r3, [pc, #600]	@ (80026dc <lcd_init+0x8c4>)
 8002484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002488:	611a      	str	r2, [r3, #16]
}
 800248a:	bf00      	nop
                        {
                            lcd_wr_regno(0xA1);
                            lcddev.id = lcd_rd_data();
 800248c:	f7fe fbfe 	bl	8000c8c <lcd_rd_data>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	4b90      	ldr	r3, [pc, #576]	@ (80026d8 <lcd_init+0x8c0>)
 8002496:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* ����0x57 */
 8002498:	f7fe fbf8 	bl	8000c8c <lcd_rd_data>
 800249c:	4603      	mov	r3, r0
 800249e:	461a      	mov	r2, r3
 80024a0:	4b8d      	ldr	r3, [pc, #564]	@ (80026d8 <lcd_init+0x8c0>)
 80024a2:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 80024a4:	4b8c      	ldr	r3, [pc, #560]	@ (80026d8 <lcd_init+0x8c0>)
 80024a6:	889b      	ldrh	r3, [r3, #4]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b8a      	ldr	r3, [pc, #552]	@ (80026d8 <lcd_init+0x8c0>)
 80024ae:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* ����0x61 */
 80024b0:	f7fe fbec 	bl	8000c8c <lcd_rd_data>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b87      	ldr	r3, [pc, #540]	@ (80026d8 <lcd_init+0x8c0>)
 80024ba:	889b      	ldrh	r3, [r3, #4]
 80024bc:	4313      	orrs	r3, r2
 80024be:	b29a      	uxth	r2, r3
 80024c0:	4b85      	ldr	r3, [pc, #532]	@ (80026d8 <lcd_init+0x8c0>)
 80024c2:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* SSD1963���ص�ID��5761H,Ϊ��������,����ǿ������Ϊ1963 */
 80024c4:	4b84      	ldr	r3, [pc, #528]	@ (80026d8 <lcd_init+0x8c0>)
 80024c6:	889b      	ldrh	r3, [r3, #4]
 80024c8:	f245 7261 	movw	r2, #22369	@ 0x5761
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d103      	bne.n	80024d8 <lcd_init+0x6c0>
 80024d0:	4b81      	ldr	r3, [pc, #516]	@ (80026d8 <lcd_init+0x8c0>)
 80024d2:	f641 1263 	movw	r2, #6499	@ 0x1963
 80024d6:	809a      	strh	r2, [r3, #4]
     * ����(������f_putc����), ����, �����ʼ������1, �������ε�����
     * ���� printf ��� !!!!!!!
     */
    //printf("LCD ID:%x\r\n", lcddev.id); /* ��ӡLCD ID */

    if (lcddev.id == 0X7789)
 80024d8:	4b7f      	ldr	r3, [pc, #508]	@ (80026d8 <lcd_init+0x8c0>)
 80024da:	889b      	ldrh	r3, [r3, #4]
 80024dc:	f247 7289 	movw	r2, #30601	@ 0x7789
 80024e0:	4293      	cmp	r3, r2
 80024e2:	f040 82f3 	bne.w	8002acc <lcd_init+0xcb4>
 80024e6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024ee:	2211      	movs	r2, #17
 80024f0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80024f2:	4b7a      	ldr	r3, [pc, #488]	@ (80026dc <lcd_init+0x8c4>)
 80024f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024f8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80024fa:	4b78      	ldr	r3, [pc, #480]	@ (80026dc <lcd_init+0x8c4>)
 80024fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002500:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002502:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002506:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29a      	uxth	r2, r3
 800250e:	4b74      	ldr	r3, [pc, #464]	@ (80026e0 <lcd_init+0x8c8>)
 8002510:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002512:	4b72      	ldr	r3, [pc, #456]	@ (80026dc <lcd_init+0x8c4>)
 8002514:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002518:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800251a:	4b70      	ldr	r3, [pc, #448]	@ (80026dc <lcd_init+0x8c4>)
 800251c:	2280      	movs	r2, #128	@ 0x80
 800251e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002520:	4b6e      	ldr	r3, [pc, #440]	@ (80026dc <lcd_init+0x8c4>)
 8002522:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002526:	611a      	str	r2, [r3, #16]
}
 8002528:	bf00      	nop
    {
        //lcd_ex_st7789_reginit();    /* ִ��ST7789��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 800252a:	2078      	movs	r0, #120	@ 0x78
 800252c:	f005 f978 	bl	8007820 <HAL_Delay>
 8002530:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002534:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002538:	2236      	movs	r2, #54	@ 0x36
 800253a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800253c:	4b67      	ldr	r3, [pc, #412]	@ (80026dc <lcd_init+0x8c4>)
 800253e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002542:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002544:	4b65      	ldr	r3, [pc, #404]	@ (80026dc <lcd_init+0x8c4>)
 8002546:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800254a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800254c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002550:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b29a      	uxth	r2, r3
 8002558:	4b61      	ldr	r3, [pc, #388]	@ (80026e0 <lcd_init+0x8c8>)
 800255a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800255c:	4b5f      	ldr	r3, [pc, #380]	@ (80026dc <lcd_init+0x8c4>)
 800255e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002562:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002564:	4b5d      	ldr	r3, [pc, #372]	@ (80026dc <lcd_init+0x8c4>)
 8002566:	2280      	movs	r2, #128	@ 0x80
 8002568:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800256a:	4b5c      	ldr	r3, [pc, #368]	@ (80026dc <lcd_init+0x8c4>)
 800256c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002570:	611a      	str	r2, [r3, #16]
}
 8002572:	bf00      	nop

        lcd_wr_regno(0x36);
        lcd_wr_xdata(0x00);
 8002574:	2000      	movs	r0, #0
 8002576:	f7fe fb13 	bl	8000ba0 <lcd_wr_xdata>
 800257a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800257e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002582:	223a      	movs	r2, #58	@ 0x3a
 8002584:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002586:	4b55      	ldr	r3, [pc, #340]	@ (80026dc <lcd_init+0x8c4>)
 8002588:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800258c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800258e:	4b53      	ldr	r3, [pc, #332]	@ (80026dc <lcd_init+0x8c4>)
 8002590:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002594:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002596:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800259a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b4f      	ldr	r3, [pc, #316]	@ (80026e0 <lcd_init+0x8c8>)
 80025a4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80025a6:	4b4d      	ldr	r3, [pc, #308]	@ (80026dc <lcd_init+0x8c4>)
 80025a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025ac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80025ae:	4b4b      	ldr	r3, [pc, #300]	@ (80026dc <lcd_init+0x8c4>)
 80025b0:	2280      	movs	r2, #128	@ 0x80
 80025b2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80025b4:	4b49      	ldr	r3, [pc, #292]	@ (80026dc <lcd_init+0x8c4>)
 80025b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025ba:	611a      	str	r2, [r3, #16]
}
 80025bc:	bf00      	nop


        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0X05);
 80025be:	2005      	movs	r0, #5
 80025c0:	f7fe faee 	bl	8000ba0 <lcd_wr_xdata>
 80025c4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025c8:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80025cc:	22b2      	movs	r2, #178	@ 0xb2
 80025ce:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80025d0:	4b42      	ldr	r3, [pc, #264]	@ (80026dc <lcd_init+0x8c4>)
 80025d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025d6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80025d8:	4b40      	ldr	r3, [pc, #256]	@ (80026dc <lcd_init+0x8c4>)
 80025da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025de:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80025e0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025e4:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b3c      	ldr	r3, [pc, #240]	@ (80026e0 <lcd_init+0x8c8>)
 80025ee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80025f0:	4b3a      	ldr	r3, [pc, #232]	@ (80026dc <lcd_init+0x8c4>)
 80025f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025f6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80025f8:	4b38      	ldr	r3, [pc, #224]	@ (80026dc <lcd_init+0x8c4>)
 80025fa:	2280      	movs	r2, #128	@ 0x80
 80025fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80025fe:	4b37      	ldr	r3, [pc, #220]	@ (80026dc <lcd_init+0x8c4>)
 8002600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002604:	611a      	str	r2, [r3, #16]
}
 8002606:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x0C);
 8002608:	200c      	movs	r0, #12
 800260a:	f7fe fac9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 800260e:	200c      	movs	r0, #12
 8002610:	f7fe fac6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002614:	2000      	movs	r0, #0
 8002616:	f7fe fac3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 800261a:	2033      	movs	r0, #51	@ 0x33
 800261c:	f7fe fac0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002620:	2033      	movs	r0, #51	@ 0x33
 8002622:	f7fe fabd 	bl	8000ba0 <lcd_wr_xdata>
 8002626:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800262a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800262e:	22b7      	movs	r2, #183	@ 0xb7
 8002630:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002632:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <lcd_init+0x8c4>)
 8002634:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002638:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800263a:	4b28      	ldr	r3, [pc, #160]	@ (80026dc <lcd_init+0x8c4>)
 800263c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002640:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002642:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002646:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b24      	ldr	r3, [pc, #144]	@ (80026e0 <lcd_init+0x8c8>)
 8002650:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002652:	4b22      	ldr	r3, [pc, #136]	@ (80026dc <lcd_init+0x8c4>)
 8002654:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002658:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800265a:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <lcd_init+0x8c4>)
 800265c:	2280      	movs	r2, #128	@ 0x80
 800265e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002660:	4b1e      	ldr	r3, [pc, #120]	@ (80026dc <lcd_init+0x8c4>)
 8002662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002666:	611a      	str	r2, [r3, #16]
}
 8002668:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x35);
 800266a:	2035      	movs	r0, #53	@ 0x35
 800266c:	f7fe fa98 	bl	8000ba0 <lcd_wr_xdata>
 8002670:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002674:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8002678:	22bb      	movs	r2, #187	@ 0xbb
 800267a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800267c:	4b17      	ldr	r3, [pc, #92]	@ (80026dc <lcd_init+0x8c4>)
 800267e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002682:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002684:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <lcd_init+0x8c4>)
 8002686:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800268a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800268c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002690:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29a      	uxth	r2, r3
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <lcd_init+0x8c8>)
 800269a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800269c:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <lcd_init+0x8c4>)
 800269e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026a2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80026a4:	4b0d      	ldr	r3, [pc, #52]	@ (80026dc <lcd_init+0x8c4>)
 80026a6:	2280      	movs	r2, #128	@ 0x80
 80026a8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80026aa:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <lcd_init+0x8c4>)
 80026ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b0:	611a      	str	r2, [r3, #16]
}
 80026b2:	bf00      	nop

        lcd_wr_regno(0xBB); /* vcom */
        lcd_wr_xdata(0x32); /* 30 */
 80026b4:	2032      	movs	r0, #50	@ 0x32
 80026b6:	f7fe fa73 	bl	8000ba0 <lcd_wr_xdata>
 80026ba:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80026c2:	22c0      	movs	r2, #192	@ 0xc0
 80026c4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80026c6:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <lcd_init+0x8c4>)
 80026c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026cc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80026ce:	4b03      	ldr	r3, [pc, #12]	@ (80026dc <lcd_init+0x8c4>)
 80026d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d4:	611a      	str	r2, [r3, #16]
 80026d6:	e005      	b.n	80026e4 <lcd_init+0x8cc>
 80026d8:	200001f4 	.word	0x200001f4
 80026dc:	40011000 	.word	0x40011000
 80026e0:	40010c00 	.word	0x40010c00
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80026e4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4bbf      	ldr	r3, [pc, #764]	@ (80029f0 <lcd_init+0xbd8>)
 80026f2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80026f4:	4bbf      	ldr	r3, [pc, #764]	@ (80029f4 <lcd_init+0xbdc>)
 80026f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026fa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80026fc:	4bbd      	ldr	r3, [pc, #756]	@ (80029f4 <lcd_init+0xbdc>)
 80026fe:	2280      	movs	r2, #128	@ 0x80
 8002700:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002702:	4bbc      	ldr	r3, [pc, #752]	@ (80029f4 <lcd_init+0xbdc>)
 8002704:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002708:	611a      	str	r2, [r3, #16]
}
 800270a:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x0C);
 800270c:	200c      	movs	r0, #12
 800270e:	f7fe fa47 	bl	8000ba0 <lcd_wr_xdata>
 8002712:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002716:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800271a:	22c2      	movs	r2, #194	@ 0xc2
 800271c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800271e:	4bb5      	ldr	r3, [pc, #724]	@ (80029f4 <lcd_init+0xbdc>)
 8002720:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002724:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002726:	4bb3      	ldr	r3, [pc, #716]	@ (80029f4 <lcd_init+0xbdc>)
 8002728:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800272c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800272e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002732:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29a      	uxth	r2, r3
 800273a:	4bad      	ldr	r3, [pc, #692]	@ (80029f0 <lcd_init+0xbd8>)
 800273c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800273e:	4bad      	ldr	r3, [pc, #692]	@ (80029f4 <lcd_init+0xbdc>)
 8002740:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002744:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002746:	4bab      	ldr	r3, [pc, #684]	@ (80029f4 <lcd_init+0xbdc>)
 8002748:	2280      	movs	r2, #128	@ 0x80
 800274a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800274c:	4ba9      	ldr	r3, [pc, #676]	@ (80029f4 <lcd_init+0xbdc>)
 800274e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002752:	611a      	str	r2, [r3, #16]
}
 8002754:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x01);
 8002756:	2001      	movs	r0, #1
 8002758:	f7fe fa22 	bl	8000ba0 <lcd_wr_xdata>
 800275c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002760:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002764:	22c3      	movs	r2, #195	@ 0xc3
 8002766:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002768:	4ba2      	ldr	r3, [pc, #648]	@ (80029f4 <lcd_init+0xbdc>)
 800276a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800276e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002770:	4ba0      	ldr	r3, [pc, #640]	@ (80029f4 <lcd_init+0xbdc>)
 8002772:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002776:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002778:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800277c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29a      	uxth	r2, r3
 8002784:	4b9a      	ldr	r3, [pc, #616]	@ (80029f0 <lcd_init+0xbd8>)
 8002786:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002788:	4b9a      	ldr	r3, [pc, #616]	@ (80029f4 <lcd_init+0xbdc>)
 800278a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800278e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002790:	4b98      	ldr	r3, [pc, #608]	@ (80029f4 <lcd_init+0xbdc>)
 8002792:	2280      	movs	r2, #128	@ 0x80
 8002794:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002796:	4b97      	ldr	r3, [pc, #604]	@ (80029f4 <lcd_init+0xbdc>)
 8002798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800279c:	611a      	str	r2, [r3, #16]
}
 800279e:	bf00      	nop

        lcd_wr_regno(0xC3); /* vrh */
        lcd_wr_xdata(0x10); /* 17 0D */
 80027a0:	2010      	movs	r0, #16
 80027a2:	f7fe f9fd 	bl	8000ba0 <lcd_wr_xdata>
 80027a6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027aa:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80027ae:	22c4      	movs	r2, #196	@ 0xc4
 80027b0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80027b2:	4b90      	ldr	r3, [pc, #576]	@ (80029f4 <lcd_init+0xbdc>)
 80027b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80027ba:	4b8e      	ldr	r3, [pc, #568]	@ (80029f4 <lcd_init+0xbdc>)
 80027bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80027c2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027c6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	4b88      	ldr	r3, [pc, #544]	@ (80029f0 <lcd_init+0xbd8>)
 80027d0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80027d2:	4b88      	ldr	r3, [pc, #544]	@ (80029f4 <lcd_init+0xbdc>)
 80027d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80027d8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80027da:	4b86      	ldr	r3, [pc, #536]	@ (80029f4 <lcd_init+0xbdc>)
 80027dc:	2280      	movs	r2, #128	@ 0x80
 80027de:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80027e0:	4b84      	ldr	r3, [pc, #528]	@ (80029f4 <lcd_init+0xbdc>)
 80027e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027e6:	611a      	str	r2, [r3, #16]
}
 80027e8:	bf00      	nop

        lcd_wr_regno(0xC4); /* vdv */
        lcd_wr_xdata(0x20); /* 20 */
 80027ea:	2020      	movs	r0, #32
 80027ec:	f7fe f9d8 	bl	8000ba0 <lcd_wr_xdata>
 80027f0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027f8:	22c6      	movs	r2, #198	@ 0xc6
 80027fa:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80027fc:	4b7d      	ldr	r3, [pc, #500]	@ (80029f4 <lcd_init+0xbdc>)
 80027fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002802:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002804:	4b7b      	ldr	r3, [pc, #492]	@ (80029f4 <lcd_init+0xbdc>)
 8002806:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800280a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800280c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002810:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29a      	uxth	r2, r3
 8002818:	4b75      	ldr	r3, [pc, #468]	@ (80029f0 <lcd_init+0xbd8>)
 800281a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800281c:	4b75      	ldr	r3, [pc, #468]	@ (80029f4 <lcd_init+0xbdc>)
 800281e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002822:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002824:	4b73      	ldr	r3, [pc, #460]	@ (80029f4 <lcd_init+0xbdc>)
 8002826:	2280      	movs	r2, #128	@ 0x80
 8002828:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800282a:	4b72      	ldr	r3, [pc, #456]	@ (80029f4 <lcd_init+0xbdc>)
 800282c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002830:	611a      	str	r2, [r3, #16]
}
 8002832:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x0f);
 8002834:	200f      	movs	r0, #15
 8002836:	f7fe f9b3 	bl	8000ba0 <lcd_wr_xdata>
 800283a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800283e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8002842:	22d0      	movs	r2, #208	@ 0xd0
 8002844:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002846:	4b6b      	ldr	r3, [pc, #428]	@ (80029f4 <lcd_init+0xbdc>)
 8002848:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800284c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800284e:	4b69      	ldr	r3, [pc, #420]	@ (80029f4 <lcd_init+0xbdc>)
 8002850:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002854:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002856:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800285a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b29a      	uxth	r2, r3
 8002862:	4b63      	ldr	r3, [pc, #396]	@ (80029f0 <lcd_init+0xbd8>)
 8002864:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002866:	4b63      	ldr	r3, [pc, #396]	@ (80029f4 <lcd_init+0xbdc>)
 8002868:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800286c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800286e:	4b61      	ldr	r3, [pc, #388]	@ (80029f4 <lcd_init+0xbdc>)
 8002870:	2280      	movs	r2, #128	@ 0x80
 8002872:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002874:	4b5f      	ldr	r3, [pc, #380]	@ (80029f4 <lcd_init+0xbdc>)
 8002876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800287a:	611a      	str	r2, [r3, #16]
}
 800287c:	bf00      	nop

        lcd_wr_regno(0xD0);
        lcd_wr_xdata(0xA4);
 800287e:	20a4      	movs	r0, #164	@ 0xa4
 8002880:	f7fe f98e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 8002884:	20a1      	movs	r0, #161	@ 0xa1
 8002886:	f7fe f98b 	bl	8000ba0 <lcd_wr_xdata>
 800288a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800288e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002892:	22e0      	movs	r2, #224	@ 0xe0
 8002894:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002896:	4b57      	ldr	r3, [pc, #348]	@ (80029f4 <lcd_init+0xbdc>)
 8002898:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800289c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800289e:	4b55      	ldr	r3, [pc, #340]	@ (80029f4 <lcd_init+0xbdc>)
 80028a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80028a6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80028aa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	4b4f      	ldr	r3, [pc, #316]	@ (80029f0 <lcd_init+0xbd8>)
 80028b4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80028b6:	4b4f      	ldr	r3, [pc, #316]	@ (80029f4 <lcd_init+0xbdc>)
 80028b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028bc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80028be:	4b4d      	ldr	r3, [pc, #308]	@ (80029f4 <lcd_init+0xbdc>)
 80028c0:	2280      	movs	r2, #128	@ 0x80
 80028c2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80028c4:	4b4b      	ldr	r3, [pc, #300]	@ (80029f4 <lcd_init+0xbdc>)
 80028c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ca:	611a      	str	r2, [r3, #16]
}
 80028cc:	bf00      	nop

        lcd_wr_regno(0xE0); /* Set Gamma  */
        lcd_wr_xdata(0xd0);
 80028ce:	20d0      	movs	r0, #208	@ 0xd0
 80028d0:	f7fe f966 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7fe f963 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80028da:	2002      	movs	r0, #2
 80028dc:	f7fe f960 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 80028e0:	2007      	movs	r0, #7
 80028e2:	f7fe f95d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 80028e6:	200a      	movs	r0, #10
 80028e8:	f7fe f95a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80028ec:	2028      	movs	r0, #40	@ 0x28
 80028ee:	f7fe f957 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 80028f2:	2032      	movs	r0, #50	@ 0x32
 80028f4:	f7fe f954 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0X44);
 80028f8:	2044      	movs	r0, #68	@ 0x44
 80028fa:	f7fe f951 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x42);
 80028fe:	2042      	movs	r0, #66	@ 0x42
 8002900:	f7fe f94e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8002904:	2006      	movs	r0, #6
 8002906:	f7fe f94b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 800290a:	200e      	movs	r0, #14
 800290c:	f7fe f948 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8002910:	2012      	movs	r0, #18
 8002912:	f7fe f945 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8002916:	2014      	movs	r0, #20
 8002918:	f7fe f942 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 800291c:	2017      	movs	r0, #23
 800291e:	f7fe f93f 	bl	8000ba0 <lcd_wr_xdata>
 8002922:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002926:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800292a:	22e1      	movs	r2, #225	@ 0xe1
 800292c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800292e:	4b31      	ldr	r3, [pc, #196]	@ (80029f4 <lcd_init+0xbdc>)
 8002930:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002934:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002936:	4b2f      	ldr	r3, [pc, #188]	@ (80029f4 <lcd_init+0xbdc>)
 8002938:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800293c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800293e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002942:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29a      	uxth	r2, r3
 800294a:	4b29      	ldr	r3, [pc, #164]	@ (80029f0 <lcd_init+0xbd8>)
 800294c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800294e:	4b29      	ldr	r3, [pc, #164]	@ (80029f4 <lcd_init+0xbdc>)
 8002950:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002954:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002956:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <lcd_init+0xbdc>)
 8002958:	2280      	movs	r2, #128	@ 0x80
 800295a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800295c:	4b25      	ldr	r3, [pc, #148]	@ (80029f4 <lcd_init+0xbdc>)
 800295e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002962:	611a      	str	r2, [r3, #16]
}
 8002964:	bf00      	nop


        lcd_wr_regno(0XE1);  /* Set Gamma */
        lcd_wr_xdata(0xd0);
 8002966:	20d0      	movs	r0, #208	@ 0xd0
 8002968:	f7fe f91a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800296c:	2000      	movs	r0, #0
 800296e:	f7fe f917 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8002972:	2002      	movs	r0, #2
 8002974:	f7fe f914 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002978:	2007      	movs	r0, #7
 800297a:	f7fe f911 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 800297e:	200a      	movs	r0, #10
 8002980:	f7fe f90e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002984:	2028      	movs	r0, #40	@ 0x28
 8002986:	f7fe f90b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x31);
 800298a:	2031      	movs	r0, #49	@ 0x31
 800298c:	f7fe f908 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002990:	2054      	movs	r0, #84	@ 0x54
 8002992:	f7fe f905 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x47);
 8002996:	2047      	movs	r0, #71	@ 0x47
 8002998:	f7fe f902 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 800299c:	200e      	movs	r0, #14
 800299e:	f7fe f8ff 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x1c);
 80029a2:	201c      	movs	r0, #28
 80029a4:	f7fe f8fc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 80029a8:	2017      	movs	r0, #23
 80029aa:	f7fe f8f9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x1b);
 80029ae:	201b      	movs	r0, #27
 80029b0:	f7fe f8f6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x1e);
 80029b4:	201e      	movs	r0, #30
 80029b6:	f7fe f8f3 	bl	8000ba0 <lcd_wr_xdata>
 80029ba:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80029be:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80029c2:	222a      	movs	r2, #42	@ 0x2a
 80029c4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <lcd_init+0xbdc>)
 80029c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029cc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <lcd_init+0xbdc>)
 80029d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029d4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80029d6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80029da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	4b03      	ldr	r3, [pc, #12]	@ (80029f0 <lcd_init+0xbd8>)
 80029e4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80029e6:	4b03      	ldr	r3, [pc, #12]	@ (80029f4 <lcd_init+0xbdc>)
 80029e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029ec:	611a      	str	r2, [r3, #16]
 80029ee:	e003      	b.n	80029f8 <lcd_init+0xbe0>
 80029f0:	40010c00 	.word	0x40010c00
 80029f4:	40011000 	.word	0x40011000
    LCD_WR(1);
 80029f8:	4b32      	ldr	r3, [pc, #200]	@ (8002ac4 <lcd_init+0xcac>)
 80029fa:	2280      	movs	r2, #128	@ 0x80
 80029fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80029fe:	4b31      	ldr	r3, [pc, #196]	@ (8002ac4 <lcd_init+0xcac>)
 8002a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a04:	611a      	str	r2, [r3, #16]
}
 8002a06:	bf00      	nop


        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe f8c9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fe f8c6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe f8c3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 8002a1a:	20ef      	movs	r0, #239	@ 0xef
 8002a1c:	f7fe f8c0 	bl	8000ba0 <lcd_wr_xdata>
 8002a20:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a24:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8002a28:	222b      	movs	r2, #43	@ 0x2b
 8002a2a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ac4 <lcd_init+0xcac>)
 8002a2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a32:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a34:	4b23      	ldr	r3, [pc, #140]	@ (8002ac4 <lcd_init+0xcac>)
 8002a36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a3a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a3c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a40:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac8 <lcd_init+0xcb0>)
 8002a4a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac4 <lcd_init+0xcac>)
 8002a4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a52:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <lcd_init+0xcac>)
 8002a56:	2280      	movs	r2, #128	@ 0x80
 8002a58:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <lcd_init+0xcac>)
 8002a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a60:	611a      	str	r2, [r3, #16]
}
 8002a62:	bf00      	nop

        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe f89b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fe f898 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8002a70:	2001      	movs	r0, #1
 8002a72:	f7fe f895 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8002a76:	203f      	movs	r0, #63	@ 0x3f
 8002a78:	f7fe f892 	bl	8000ba0 <lcd_wr_xdata>
 8002a7c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a80:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a84:	2229      	movs	r2, #41	@ 0x29
 8002a86:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <lcd_init+0xcac>)
 8002a8a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a8e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <lcd_init+0xcac>)
 8002a92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a96:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a98:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a9c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <lcd_init+0xcb0>)
 8002aa6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002aa8:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <lcd_init+0xcac>)
 8002aaa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002aae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ab0:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <lcd_init+0xcac>)
 8002ab2:	2280      	movs	r2, #128	@ 0x80
 8002ab4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ab6:	4b03      	ldr	r3, [pc, #12]	@ (8002ac4 <lcd_init+0xcac>)
 8002ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002abc:	611a      	str	r2, [r3, #16]
}
 8002abe:	f004 b8f4 	b.w	8006caa <lcd_init+0x4e92>
 8002ac2:	bf00      	nop
 8002ac4:	40011000 	.word	0x40011000
 8002ac8:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0X9341)
 8002acc:	4bb9      	ldr	r3, [pc, #740]	@ (8002db4 <lcd_init+0xf9c>)
 8002ace:	889b      	ldrh	r3, [r3, #4]
 8002ad0:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	f040 83a1 	bne.w	800321c <lcd_init+0x1404>
 8002ada:	23cf      	movs	r3, #207	@ 0xcf
 8002adc:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ae0:	4bb5      	ldr	r3, [pc, #724]	@ (8002db8 <lcd_init+0xfa0>)
 8002ae2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ae6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ae8:	4bb3      	ldr	r3, [pc, #716]	@ (8002db8 <lcd_init+0xfa0>)
 8002aea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002af0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	4bb1      	ldr	r3, [pc, #708]	@ (8002dbc <lcd_init+0xfa4>)
 8002af8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002afa:	4baf      	ldr	r3, [pc, #700]	@ (8002db8 <lcd_init+0xfa0>)
 8002afc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b00:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b02:	4bad      	ldr	r3, [pc, #692]	@ (8002db8 <lcd_init+0xfa0>)
 8002b04:	2280      	movs	r2, #128	@ 0x80
 8002b06:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b08:	4bab      	ldr	r3, [pc, #684]	@ (8002db8 <lcd_init+0xfa0>)
 8002b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b0e:	611a      	str	r2, [r3, #16]
}
 8002b10:	bf00      	nop
    {
        //lcd_ex_ili9341_reginit();   /* ִ��ILI9341��ʼ�� */
        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe f844 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xC1);
 8002b18:	20c1      	movs	r0, #193	@ 0xc1
 8002b1a:	f7fe f841 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0X30);
 8002b1e:	2030      	movs	r0, #48	@ 0x30
 8002b20:	f7fe f83e 	bl	8000ba0 <lcd_wr_xdata>
 8002b24:	23ed      	movs	r3, #237	@ 0xed
 8002b26:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b2a:	4ba3      	ldr	r3, [pc, #652]	@ (8002db8 <lcd_init+0xfa0>)
 8002b2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b30:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b32:	4ba1      	ldr	r3, [pc, #644]	@ (8002db8 <lcd_init+0xfa0>)
 8002b34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b38:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b3a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	4b9e      	ldr	r3, [pc, #632]	@ (8002dbc <lcd_init+0xfa4>)
 8002b42:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b44:	4b9c      	ldr	r3, [pc, #624]	@ (8002db8 <lcd_init+0xfa0>)
 8002b46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b4a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b4c:	4b9a      	ldr	r3, [pc, #616]	@ (8002db8 <lcd_init+0xfa0>)
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b52:	4b99      	ldr	r3, [pc, #612]	@ (8002db8 <lcd_init+0xfa0>)
 8002b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b58:	611a      	str	r2, [r3, #16]
}
 8002b5a:	bf00      	nop
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x64);
 8002b5c:	2064      	movs	r0, #100	@ 0x64
 8002b5e:	f7fe f81f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8002b62:	2003      	movs	r0, #3
 8002b64:	f7fe f81c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0X12);
 8002b68:	2012      	movs	r0, #18
 8002b6a:	f7fe f819 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0X81);
 8002b6e:	2081      	movs	r0, #129	@ 0x81
 8002b70:	f7fe f816 	bl	8000ba0 <lcd_wr_xdata>
 8002b74:	23e8      	movs	r3, #232	@ 0xe8
 8002b76:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b7a:	4b8f      	ldr	r3, [pc, #572]	@ (8002db8 <lcd_init+0xfa0>)
 8002b7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b80:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b82:	4b8d      	ldr	r3, [pc, #564]	@ (8002db8 <lcd_init+0xfa0>)
 8002b84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b88:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b8a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	4b8a      	ldr	r3, [pc, #552]	@ (8002dbc <lcd_init+0xfa4>)
 8002b92:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b94:	4b88      	ldr	r3, [pc, #544]	@ (8002db8 <lcd_init+0xfa0>)
 8002b96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b9a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b9c:	4b86      	ldr	r3, [pc, #536]	@ (8002db8 <lcd_init+0xfa0>)
 8002b9e:	2280      	movs	r2, #128	@ 0x80
 8002ba0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ba2:	4b85      	ldr	r3, [pc, #532]	@ (8002db8 <lcd_init+0xfa0>)
 8002ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ba8:	611a      	str	r2, [r3, #16]
}
 8002baa:	bf00      	nop
        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x85);
 8002bac:	2085      	movs	r0, #133	@ 0x85
 8002bae:	f7fd fff7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8002bb2:	2010      	movs	r0, #16
 8002bb4:	f7fd fff4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8002bb8:	207a      	movs	r0, #122	@ 0x7a
 8002bba:	f7fd fff1 	bl	8000ba0 <lcd_wr_xdata>
 8002bbe:	23cb      	movs	r3, #203	@ 0xcb
 8002bc0:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002bc4:	4b7c      	ldr	r3, [pc, #496]	@ (8002db8 <lcd_init+0xfa0>)
 8002bc6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002bcc:	4b7a      	ldr	r3, [pc, #488]	@ (8002db8 <lcd_init+0xfa0>)
 8002bce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bd2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002bd4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	4b78      	ldr	r3, [pc, #480]	@ (8002dbc <lcd_init+0xfa4>)
 8002bdc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002bde:	4b76      	ldr	r3, [pc, #472]	@ (8002db8 <lcd_init+0xfa0>)
 8002be0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002be4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002be6:	4b74      	ldr	r3, [pc, #464]	@ (8002db8 <lcd_init+0xfa0>)
 8002be8:	2280      	movs	r2, #128	@ 0x80
 8002bea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002bec:	4b72      	ldr	r3, [pc, #456]	@ (8002db8 <lcd_init+0xfa0>)
 8002bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bf2:	611a      	str	r2, [r3, #16]
}
 8002bf4:	bf00      	nop
        lcd_wr_regno(0xCB);
        lcd_wr_xdata(0x39);
 8002bf6:	2039      	movs	r0, #57	@ 0x39
 8002bf8:	f7fd ffd2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8002bfc:	202c      	movs	r0, #44	@ 0x2c
 8002bfe:	f7fd ffcf 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7fd ffcc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8002c08:	2034      	movs	r0, #52	@ 0x34
 8002c0a:	f7fd ffc9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f7fd ffc6 	bl	8000ba0 <lcd_wr_xdata>
 8002c14:	23f7      	movs	r3, #247	@ 0xf7
 8002c16:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c1a:	4b67      	ldr	r3, [pc, #412]	@ (8002db8 <lcd_init+0xfa0>)
 8002c1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c20:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c22:	4b65      	ldr	r3, [pc, #404]	@ (8002db8 <lcd_init+0xfa0>)
 8002c24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c28:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c2a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	4b62      	ldr	r3, [pc, #392]	@ (8002dbc <lcd_init+0xfa4>)
 8002c32:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c34:	4b60      	ldr	r3, [pc, #384]	@ (8002db8 <lcd_init+0xfa0>)
 8002c36:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c3a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c3c:	4b5e      	ldr	r3, [pc, #376]	@ (8002db8 <lcd_init+0xfa0>)
 8002c3e:	2280      	movs	r2, #128	@ 0x80
 8002c40:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c42:	4b5d      	ldr	r3, [pc, #372]	@ (8002db8 <lcd_init+0xfa0>)
 8002c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c48:	611a      	str	r2, [r3, #16]
}
 8002c4a:	bf00      	nop
        lcd_wr_regno(0xF7);
        lcd_wr_xdata(0x20);
 8002c4c:	2020      	movs	r0, #32
 8002c4e:	f7fd ffa7 	bl	8000ba0 <lcd_wr_xdata>
 8002c52:	23ea      	movs	r3, #234	@ 0xea
 8002c54:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c58:	4b57      	ldr	r3, [pc, #348]	@ (8002db8 <lcd_init+0xfa0>)
 8002c5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c5e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c60:	4b55      	ldr	r3, [pc, #340]	@ (8002db8 <lcd_init+0xfa0>)
 8002c62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c66:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c68:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	4b53      	ldr	r3, [pc, #332]	@ (8002dbc <lcd_init+0xfa4>)
 8002c70:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c72:	4b51      	ldr	r3, [pc, #324]	@ (8002db8 <lcd_init+0xfa0>)
 8002c74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c78:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c7a:	4b4f      	ldr	r3, [pc, #316]	@ (8002db8 <lcd_init+0xfa0>)
 8002c7c:	2280      	movs	r2, #128	@ 0x80
 8002c7e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c80:	4b4d      	ldr	r3, [pc, #308]	@ (8002db8 <lcd_init+0xfa0>)
 8002c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c86:	611a      	str	r2, [r3, #16]
}
 8002c88:	bf00      	nop
        lcd_wr_regno(0xEA);
        lcd_wr_xdata(0x00);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fd ff88 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002c90:	2000      	movs	r0, #0
 8002c92:	f7fd ff85 	bl	8000ba0 <lcd_wr_xdata>
 8002c96:	23c0      	movs	r3, #192	@ 0xc0
 8002c98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c9c:	4b46      	ldr	r3, [pc, #280]	@ (8002db8 <lcd_init+0xfa0>)
 8002c9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ca2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ca4:	4b44      	ldr	r3, [pc, #272]	@ (8002db8 <lcd_init+0xfa0>)
 8002ca6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002caa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002cac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	4b42      	ldr	r3, [pc, #264]	@ (8002dbc <lcd_init+0xfa4>)
 8002cb4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002cb6:	4b40      	ldr	r3, [pc, #256]	@ (8002db8 <lcd_init+0xfa0>)
 8002cb8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002cbc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8002db8 <lcd_init+0xfa0>)
 8002cc0:	2280      	movs	r2, #128	@ 0x80
 8002cc2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8002db8 <lcd_init+0xfa0>)
 8002cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cca:	611a      	str	r2, [r3, #16]
}
 8002ccc:	bf00      	nop
        lcd_wr_regno(0xC0); /* Power control */
        lcd_wr_xdata(0x1B); /* VRH[5:0] */
 8002cce:	201b      	movs	r0, #27
 8002cd0:	f7fd ff66 	bl	8000ba0 <lcd_wr_xdata>
 8002cd4:	23c1      	movs	r3, #193	@ 0xc1
 8002cd6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002cda:	4b37      	ldr	r3, [pc, #220]	@ (8002db8 <lcd_init+0xfa0>)
 8002cdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ce0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ce2:	4b35      	ldr	r3, [pc, #212]	@ (8002db8 <lcd_init+0xfa0>)
 8002ce4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ce8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002cea:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	4b32      	ldr	r3, [pc, #200]	@ (8002dbc <lcd_init+0xfa4>)
 8002cf2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002cf4:	4b30      	ldr	r3, [pc, #192]	@ (8002db8 <lcd_init+0xfa0>)
 8002cf6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002cfa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8002db8 <lcd_init+0xfa0>)
 8002cfe:	2280      	movs	r2, #128	@ 0x80
 8002d00:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d02:	4b2d      	ldr	r3, [pc, #180]	@ (8002db8 <lcd_init+0xfa0>)
 8002d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d08:	611a      	str	r2, [r3, #16]
}
 8002d0a:	bf00      	nop
        lcd_wr_regno(0xC1); /* Power control */
        lcd_wr_xdata(0x01); /* SAP[2:0];BT[3:0] */
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f7fd ff47 	bl	8000ba0 <lcd_wr_xdata>
 8002d12:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d16:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d1a:	22c5      	movs	r2, #197	@ 0xc5
 8002d1c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d1e:	4b26      	ldr	r3, [pc, #152]	@ (8002db8 <lcd_init+0xfa0>)
 8002d20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d24:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d26:	4b24      	ldr	r3, [pc, #144]	@ (8002db8 <lcd_init+0xfa0>)
 8002d28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d2c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d2e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d32:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	4b20      	ldr	r3, [pc, #128]	@ (8002dbc <lcd_init+0xfa4>)
 8002d3c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002db8 <lcd_init+0xfa0>)
 8002d40:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d44:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d46:	4b1c      	ldr	r3, [pc, #112]	@ (8002db8 <lcd_init+0xfa0>)
 8002d48:	2280      	movs	r2, #128	@ 0x80
 8002d4a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002db8 <lcd_init+0xfa0>)
 8002d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d52:	611a      	str	r2, [r3, #16]
}
 8002d54:	bf00      	nop
        lcd_wr_regno(0xC5); /* VCM control */
        lcd_wr_xdata(0x30); /* 3F */
 8002d56:	2030      	movs	r0, #48	@ 0x30
 8002d58:	f7fd ff22 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x30); /* 3C */
 8002d5c:	2030      	movs	r0, #48	@ 0x30
 8002d5e:	f7fd ff1f 	bl	8000ba0 <lcd_wr_xdata>
 8002d62:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d66:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002d6a:	22c7      	movs	r2, #199	@ 0xc7
 8002d6c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d6e:	4b12      	ldr	r3, [pc, #72]	@ (8002db8 <lcd_init+0xfa0>)
 8002d70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d74:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d76:	4b10      	ldr	r3, [pc, #64]	@ (8002db8 <lcd_init+0xfa0>)
 8002d78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d7c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d7e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d82:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <lcd_init+0xfa4>)
 8002d8c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <lcd_init+0xfa0>)
 8002d90:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d94:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d96:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <lcd_init+0xfa0>)
 8002d98:	2280      	movs	r2, #128	@ 0x80
 8002d9a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <lcd_init+0xfa0>)
 8002d9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da2:	611a      	str	r2, [r3, #16]
}
 8002da4:	bf00      	nop
        lcd_wr_regno(0xC7); /* VCM control2 */
        lcd_wr_xdata(0XB7);
 8002da6:	20b7      	movs	r0, #183	@ 0xb7
 8002da8:	f7fd fefa 	bl	8000ba0 <lcd_wr_xdata>
 8002dac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002db0:	e006      	b.n	8002dc0 <lcd_init+0xfa8>
 8002db2:	bf00      	nop
 8002db4:	200001f4 	.word	0x200001f4
 8002db8:	40011000 	.word	0x40011000
 8002dbc:	40010c00 	.word	0x40010c00
 8002dc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002dc4:	2236      	movs	r2, #54	@ 0x36
 8002dc6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002dc8:	4bc1      	ldr	r3, [pc, #772]	@ (80030d0 <lcd_init+0x12b8>)
 8002dca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002dce:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002dd0:	4bbf      	ldr	r3, [pc, #764]	@ (80030d0 <lcd_init+0x12b8>)
 8002dd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dd6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002dd8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ddc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	4bbb      	ldr	r3, [pc, #748]	@ (80030d4 <lcd_init+0x12bc>)
 8002de6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002de8:	4bb9      	ldr	r3, [pc, #740]	@ (80030d0 <lcd_init+0x12b8>)
 8002dea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002dee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002df0:	4bb7      	ldr	r3, [pc, #732]	@ (80030d0 <lcd_init+0x12b8>)
 8002df2:	2280      	movs	r2, #128	@ 0x80
 8002df4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002df6:	4bb6      	ldr	r3, [pc, #728]	@ (80030d0 <lcd_init+0x12b8>)
 8002df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dfc:	611a      	str	r2, [r3, #16]
}
 8002dfe:	bf00      	nop
        lcd_wr_regno(0x36); /*  Memory Access Control */
        lcd_wr_xdata(0x48);
 8002e00:	2048      	movs	r0, #72	@ 0x48
 8002e02:	f7fd fecd 	bl	8000ba0 <lcd_wr_xdata>
 8002e06:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e0a:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8002e0e:	223a      	movs	r2, #58	@ 0x3a
 8002e10:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e12:	4baf      	ldr	r3, [pc, #700]	@ (80030d0 <lcd_init+0x12b8>)
 8002e14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e18:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e1a:	4bad      	ldr	r3, [pc, #692]	@ (80030d0 <lcd_init+0x12b8>)
 8002e1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e20:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e22:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e26:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4ba9      	ldr	r3, [pc, #676]	@ (80030d4 <lcd_init+0x12bc>)
 8002e30:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e32:	4ba7      	ldr	r3, [pc, #668]	@ (80030d0 <lcd_init+0x12b8>)
 8002e34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e38:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e3a:	4ba5      	ldr	r3, [pc, #660]	@ (80030d0 <lcd_init+0x12b8>)
 8002e3c:	2280      	movs	r2, #128	@ 0x80
 8002e3e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e40:	4ba3      	ldr	r3, [pc, #652]	@ (80030d0 <lcd_init+0x12b8>)
 8002e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e46:	611a      	str	r2, [r3, #16]
}
 8002e48:	bf00      	nop
        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8002e4a:	2055      	movs	r0, #85	@ 0x55
 8002e4c:	f7fd fea8 	bl	8000ba0 <lcd_wr_xdata>
 8002e50:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e58:	22b1      	movs	r2, #177	@ 0xb1
 8002e5a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e5c:	4b9c      	ldr	r3, [pc, #624]	@ (80030d0 <lcd_init+0x12b8>)
 8002e5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e62:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e64:	4b9a      	ldr	r3, [pc, #616]	@ (80030d0 <lcd_init+0x12b8>)
 8002e66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e6a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e6c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	4b96      	ldr	r3, [pc, #600]	@ (80030d4 <lcd_init+0x12bc>)
 8002e7a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e7c:	4b94      	ldr	r3, [pc, #592]	@ (80030d0 <lcd_init+0x12b8>)
 8002e7e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e82:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e84:	4b92      	ldr	r3, [pc, #584]	@ (80030d0 <lcd_init+0x12b8>)
 8002e86:	2280      	movs	r2, #128	@ 0x80
 8002e88:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e8a:	4b91      	ldr	r3, [pc, #580]	@ (80030d0 <lcd_init+0x12b8>)
 8002e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e90:	611a      	str	r2, [r3, #16]
}
 8002e92:	bf00      	nop
        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x00);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7fd fe83 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x1A);
 8002e9a:	201a      	movs	r0, #26
 8002e9c:	f7fd fe80 	bl	8000ba0 <lcd_wr_xdata>
 8002ea0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ea4:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002ea8:	22b6      	movs	r2, #182	@ 0xb6
 8002eaa:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002eac:	4b88      	ldr	r3, [pc, #544]	@ (80030d0 <lcd_init+0x12b8>)
 8002eae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002eb2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002eb4:	4b86      	ldr	r3, [pc, #536]	@ (80030d0 <lcd_init+0x12b8>)
 8002eb6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ebc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ec0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	4b82      	ldr	r3, [pc, #520]	@ (80030d4 <lcd_init+0x12bc>)
 8002eca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ecc:	4b80      	ldr	r3, [pc, #512]	@ (80030d0 <lcd_init+0x12b8>)
 8002ece:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ed2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80030d0 <lcd_init+0x12b8>)
 8002ed6:	2280      	movs	r2, #128	@ 0x80
 8002ed8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002eda:	4b7d      	ldr	r3, [pc, #500]	@ (80030d0 <lcd_init+0x12b8>)
 8002edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee0:	611a      	str	r2, [r3, #16]
}
 8002ee2:	bf00      	nop
        lcd_wr_regno(0xB6); /*  Display Function Control */
        lcd_wr_xdata(0x0A);
 8002ee4:	200a      	movs	r0, #10
 8002ee6:	f7fd fe5b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8002eea:	20a2      	movs	r0, #162	@ 0xa2
 8002eec:	f7fd fe58 	bl	8000ba0 <lcd_wr_xdata>
 8002ef0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ef4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ef8:	22f2      	movs	r2, #242	@ 0xf2
 8002efa:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002efc:	4b74      	ldr	r3, [pc, #464]	@ (80030d0 <lcd_init+0x12b8>)
 8002efe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f02:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f04:	4b72      	ldr	r3, [pc, #456]	@ (80030d0 <lcd_init+0x12b8>)
 8002f06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f0a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f0c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	4b6e      	ldr	r3, [pc, #440]	@ (80030d4 <lcd_init+0x12bc>)
 8002f1a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f1c:	4b6c      	ldr	r3, [pc, #432]	@ (80030d0 <lcd_init+0x12b8>)
 8002f1e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f22:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f24:	4b6a      	ldr	r3, [pc, #424]	@ (80030d0 <lcd_init+0x12b8>)
 8002f26:	2280      	movs	r2, #128	@ 0x80
 8002f28:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f2a:	4b69      	ldr	r3, [pc, #420]	@ (80030d0 <lcd_init+0x12b8>)
 8002f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f30:	611a      	str	r2, [r3, #16]
}
 8002f32:	bf00      	nop
        lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
        lcd_wr_xdata(0x00);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7fd fe33 	bl	8000ba0 <lcd_wr_xdata>
 8002f3a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f3e:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002f42:	2226      	movs	r2, #38	@ 0x26
 8002f44:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f46:	4b62      	ldr	r3, [pc, #392]	@ (80030d0 <lcd_init+0x12b8>)
 8002f48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f4c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f4e:	4b60      	ldr	r3, [pc, #384]	@ (80030d0 <lcd_init+0x12b8>)
 8002f50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f54:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f56:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f5a:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	4b5c      	ldr	r3, [pc, #368]	@ (80030d4 <lcd_init+0x12bc>)
 8002f64:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f66:	4b5a      	ldr	r3, [pc, #360]	@ (80030d0 <lcd_init+0x12b8>)
 8002f68:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f6c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f6e:	4b58      	ldr	r3, [pc, #352]	@ (80030d0 <lcd_init+0x12b8>)
 8002f70:	2280      	movs	r2, #128	@ 0x80
 8002f72:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f74:	4b56      	ldr	r3, [pc, #344]	@ (80030d0 <lcd_init+0x12b8>)
 8002f76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f7a:	611a      	str	r2, [r3, #16]
}
 8002f7c:	bf00      	nop
        lcd_wr_regno(0x26); /* Gamma curve selected */
        lcd_wr_xdata(0x01);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f7fd fe0e 	bl	8000ba0 <lcd_wr_xdata>
 8002f84:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f88:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f8c:	22e0      	movs	r2, #224	@ 0xe0
 8002f8e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f90:	4b4f      	ldr	r3, [pc, #316]	@ (80030d0 <lcd_init+0x12b8>)
 8002f92:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f96:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f98:	4b4d      	ldr	r3, [pc, #308]	@ (80030d0 <lcd_init+0x12b8>)
 8002f9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f9e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002fa0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002fa4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	4b49      	ldr	r3, [pc, #292]	@ (80030d4 <lcd_init+0x12bc>)
 8002fae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002fb0:	4b47      	ldr	r3, [pc, #284]	@ (80030d0 <lcd_init+0x12b8>)
 8002fb2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002fb6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002fb8:	4b45      	ldr	r3, [pc, #276]	@ (80030d0 <lcd_init+0x12b8>)
 8002fba:	2280      	movs	r2, #128	@ 0x80
 8002fbc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002fbe:	4b44      	ldr	r3, [pc, #272]	@ (80030d0 <lcd_init+0x12b8>)
 8002fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fc4:	611a      	str	r2, [r3, #16]
}
 8002fc6:	bf00      	nop
        lcd_wr_regno(0xE0); /* Set Gamma */
        lcd_wr_xdata(0x0F);
 8002fc8:	200f      	movs	r0, #15
 8002fca:	f7fd fde9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8002fce:	202a      	movs	r0, #42	@ 0x2a
 8002fd0:	f7fd fde6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002fd4:	2028      	movs	r0, #40	@ 0x28
 8002fd6:	f7fd fde3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002fda:	2008      	movs	r0, #8
 8002fdc:	f7fd fde0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8002fe0:	200e      	movs	r0, #14
 8002fe2:	f7fd fddd 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002fe6:	2008      	movs	r0, #8
 8002fe8:	f7fd fdda 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002fec:	2054      	movs	r0, #84	@ 0x54
 8002fee:	f7fd fdd7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0XA9);
 8002ff2:	20a9      	movs	r0, #169	@ 0xa9
 8002ff4:	f7fd fdd4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8002ff8:	2043      	movs	r0, #67	@ 0x43
 8002ffa:	f7fd fdd1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);
 8002ffe:	200a      	movs	r0, #10
 8003000:	f7fd fdce 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8003004:	200f      	movs	r0, #15
 8003006:	f7fd fdcb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800300a:	2000      	movs	r0, #0
 800300c:	f7fd fdc8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003010:	2000      	movs	r0, #0
 8003012:	f7fd fdc5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003016:	2000      	movs	r0, #0
 8003018:	f7fd fdc2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800301c:	2000      	movs	r0, #0
 800301e:	f7fd fdbf 	bl	8000ba0 <lcd_wr_xdata>
 8003022:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003026:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800302a:	22e1      	movs	r2, #225	@ 0xe1
 800302c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800302e:	4b28      	ldr	r3, [pc, #160]	@ (80030d0 <lcd_init+0x12b8>)
 8003030:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003034:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003036:	4b26      	ldr	r3, [pc, #152]	@ (80030d0 <lcd_init+0x12b8>)
 8003038:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800303c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800303e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003042:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	b29a      	uxth	r2, r3
 800304a:	4b22      	ldr	r3, [pc, #136]	@ (80030d4 <lcd_init+0x12bc>)
 800304c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800304e:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <lcd_init+0x12b8>)
 8003050:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003054:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003056:	4b1e      	ldr	r3, [pc, #120]	@ (80030d0 <lcd_init+0x12b8>)
 8003058:	2280      	movs	r2, #128	@ 0x80
 800305a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800305c:	4b1c      	ldr	r3, [pc, #112]	@ (80030d0 <lcd_init+0x12b8>)
 800305e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003062:	611a      	str	r2, [r3, #16]
}
 8003064:	bf00      	nop
        lcd_wr_regno(0XE1); /* Set Gamma */
        lcd_wr_xdata(0x00);
 8003066:	2000      	movs	r0, #0
 8003068:	f7fd fd9a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);
 800306c:	2015      	movs	r0, #21
 800306e:	f7fd fd97 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003072:	2017      	movs	r0, #23
 8003074:	f7fd fd94 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8003078:	2007      	movs	r0, #7
 800307a:	f7fd fd91 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 800307e:	2011      	movs	r0, #17
 8003080:	f7fd fd8e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8003084:	2006      	movs	r0, #6
 8003086:	f7fd fd8b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x2B);
 800308a:	202b      	movs	r0, #43	@ 0x2b
 800308c:	f7fd fd88 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8003090:	2056      	movs	r0, #86	@ 0x56
 8003092:	f7fd fd85 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8003096:	203c      	movs	r0, #60	@ 0x3c
 8003098:	f7fd fd82 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 800309c:	2005      	movs	r0, #5
 800309e:	f7fd fd7f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80030a2:	2010      	movs	r0, #16
 80030a4:	f7fd fd7c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 80030a8:	200f      	movs	r0, #15
 80030aa:	f7fd fd79 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 80030ae:	203f      	movs	r0, #63	@ 0x3f
 80030b0:	f7fd fd76 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 80030b4:	203f      	movs	r0, #63	@ 0x3f
 80030b6:	f7fd fd73 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 80030ba:	200f      	movs	r0, #15
 80030bc:	f7fd fd70 	bl	8000ba0 <lcd_wr_xdata>
 80030c0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80030c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80030c8:	222b      	movs	r2, #43	@ 0x2b
 80030ca:	801a      	strh	r2, [r3, #0]
 80030cc:	e004      	b.n	80030d8 <lcd_init+0x12c0>
 80030ce:	bf00      	nop
 80030d0:	40011000 	.word	0x40011000
 80030d4:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003214 <lcd_init+0x13fc>)
 80030da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030de:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003214 <lcd_init+0x13fc>)
 80030e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030e6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030e8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80030ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	4b48      	ldr	r3, [pc, #288]	@ (8003218 <lcd_init+0x1400>)
 80030f6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80030f8:	4b46      	ldr	r3, [pc, #280]	@ (8003214 <lcd_init+0x13fc>)
 80030fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030fe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003100:	4b44      	ldr	r3, [pc, #272]	@ (8003214 <lcd_init+0x13fc>)
 8003102:	2280      	movs	r2, #128	@ 0x80
 8003104:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003106:	4b43      	ldr	r3, [pc, #268]	@ (8003214 <lcd_init+0x13fc>)
 8003108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800310c:	611a      	str	r2, [r3, #16]
}
 800310e:	bf00      	nop
        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8003110:	2000      	movs	r0, #0
 8003112:	f7fd fd45 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003116:	2000      	movs	r0, #0
 8003118:	f7fd fd42 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800311c:	2001      	movs	r0, #1
 800311e:	f7fd fd3f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8003122:	203f      	movs	r0, #63	@ 0x3f
 8003124:	f7fd fd3c 	bl	8000ba0 <lcd_wr_xdata>
 8003128:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800312c:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8003130:	222a      	movs	r2, #42	@ 0x2a
 8003132:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003134:	4b37      	ldr	r3, [pc, #220]	@ (8003214 <lcd_init+0x13fc>)
 8003136:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800313a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800313c:	4b35      	ldr	r3, [pc, #212]	@ (8003214 <lcd_init+0x13fc>)
 800313e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003142:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003144:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003148:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29a      	uxth	r2, r3
 8003150:	4b31      	ldr	r3, [pc, #196]	@ (8003218 <lcd_init+0x1400>)
 8003152:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003154:	4b2f      	ldr	r3, [pc, #188]	@ (8003214 <lcd_init+0x13fc>)
 8003156:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800315a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800315c:	4b2d      	ldr	r3, [pc, #180]	@ (8003214 <lcd_init+0x13fc>)
 800315e:	2280      	movs	r2, #128	@ 0x80
 8003160:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003162:	4b2c      	ldr	r3, [pc, #176]	@ (8003214 <lcd_init+0x13fc>)
 8003164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003168:	611a      	str	r2, [r3, #16]
}
 800316a:	bf00      	nop
        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 800316c:	2000      	movs	r0, #0
 800316e:	f7fd fd17 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003172:	2000      	movs	r0, #0
 8003174:	f7fd fd14 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003178:	2000      	movs	r0, #0
 800317a:	f7fd fd11 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 800317e:	20ef      	movs	r0, #239	@ 0xef
 8003180:	f7fd fd0e 	bl	8000ba0 <lcd_wr_xdata>
 8003184:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003188:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800318c:	2211      	movs	r2, #17
 800318e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003190:	4b20      	ldr	r3, [pc, #128]	@ (8003214 <lcd_init+0x13fc>)
 8003192:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003196:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003198:	4b1e      	ldr	r3, [pc, #120]	@ (8003214 <lcd_init+0x13fc>)
 800319a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800319e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80031a0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80031a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003218 <lcd_init+0x1400>)
 80031ae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80031b0:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <lcd_init+0x13fc>)
 80031b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80031b6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80031b8:	4b16      	ldr	r3, [pc, #88]	@ (8003214 <lcd_init+0x13fc>)
 80031ba:	2280      	movs	r2, #128	@ 0x80
 80031bc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80031be:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <lcd_init+0x13fc>)
 80031c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031c4:	611a      	str	r2, [r3, #16]
}
 80031c6:	bf00      	nop
        lcd_wr_regno(0x11); /* Exit Sleep */
        HAL_Delay(120);
 80031c8:	2078      	movs	r0, #120	@ 0x78
 80031ca:	f004 fb29 	bl	8007820 <HAL_Delay>
 80031ce:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80031d2:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80031d6:	2229      	movs	r2, #41	@ 0x29
 80031d8:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031da:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <lcd_init+0x13fc>)
 80031dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031e0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80031e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <lcd_init+0x13fc>)
 80031e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031e8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80031ea:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80031ee:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	4b08      	ldr	r3, [pc, #32]	@ (8003218 <lcd_init+0x1400>)
 80031f8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <lcd_init+0x13fc>)
 80031fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003200:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003202:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <lcd_init+0x13fc>)
 8003204:	2280      	movs	r2, #128	@ 0x80
 8003206:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003208:	4b02      	ldr	r3, [pc, #8]	@ (8003214 <lcd_init+0x13fc>)
 800320a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800320e:	611a      	str	r2, [r3, #16]
}
 8003210:	f003 bd4b 	b.w	8006caa <lcd_init+0x4e92>
 8003214:	40011000 	.word	0x40011000
 8003218:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0x5310)
 800321c:	4bbe      	ldr	r3, [pc, #760]	@ (8003518 <lcd_init+0x1700>)
 800321e:	889b      	ldrh	r3, [r3, #4]
 8003220:	f245 3210 	movw	r2, #21264	@ 0x5310
 8003224:	4293      	cmp	r3, r2
 8003226:	f041 846d 	bne.w	8004b04 <lcd_init+0x2cec>
 800322a:	23ed      	movs	r3, #237	@ 0xed
 800322c:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003230:	4bba      	ldr	r3, [pc, #744]	@ (800351c <lcd_init+0x1704>)
 8003232:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003236:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003238:	4bb8      	ldr	r3, [pc, #736]	@ (800351c <lcd_init+0x1704>)
 800323a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800323e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003240:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8003244:	b29a      	uxth	r2, r3
 8003246:	4bb6      	ldr	r3, [pc, #728]	@ (8003520 <lcd_init+0x1708>)
 8003248:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800324a:	4bb4      	ldr	r3, [pc, #720]	@ (800351c <lcd_init+0x1704>)
 800324c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003250:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003252:	4bb2      	ldr	r3, [pc, #712]	@ (800351c <lcd_init+0x1704>)
 8003254:	2280      	movs	r2, #128	@ 0x80
 8003256:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003258:	4bb0      	ldr	r3, [pc, #704]	@ (800351c <lcd_init+0x1704>)
 800325a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800325e:	611a      	str	r2, [r3, #16]
}
 8003260:	bf00      	nop
    {
        //lcd_ex_nt35310_reginit();   /* ִ��NT35310��ʼ�� */
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x01);
 8003262:	2001      	movs	r0, #1
 8003264:	f7fd fc9c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE);
 8003268:	20fe      	movs	r0, #254	@ 0xfe
 800326a:	f7fd fc99 	bl	8000ba0 <lcd_wr_xdata>
 800326e:	23ee      	movs	r3, #238	@ 0xee
 8003270:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003274:	4ba9      	ldr	r3, [pc, #676]	@ (800351c <lcd_init+0x1704>)
 8003276:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800327a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800327c:	4ba7      	ldr	r3, [pc, #668]	@ (800351c <lcd_init+0x1704>)
 800327e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003282:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003284:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8003288:	b29a      	uxth	r2, r3
 800328a:	4ba5      	ldr	r3, [pc, #660]	@ (8003520 <lcd_init+0x1708>)
 800328c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800328e:	4ba3      	ldr	r3, [pc, #652]	@ (800351c <lcd_init+0x1704>)
 8003290:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003294:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003296:	4ba1      	ldr	r3, [pc, #644]	@ (800351c <lcd_init+0x1704>)
 8003298:	2280      	movs	r2, #128	@ 0x80
 800329a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800329c:	4b9f      	ldr	r3, [pc, #636]	@ (800351c <lcd_init+0x1704>)
 800329e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032a2:	611a      	str	r2, [r3, #16]
}
 80032a4:	bf00      	nop

        lcd_wr_regno(0xEE);
        lcd_wr_xdata(0xDE);
 80032a6:	20de      	movs	r0, #222	@ 0xde
 80032a8:	f7fd fc7a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 80032ac:	2021      	movs	r0, #33	@ 0x21
 80032ae:	f7fd fc77 	bl	8000ba0 <lcd_wr_xdata>
 80032b2:	23f1      	movs	r3, #241	@ 0xf1
 80032b4:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80032b8:	4b98      	ldr	r3, [pc, #608]	@ (800351c <lcd_init+0x1704>)
 80032ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032be:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80032c0:	4b96      	ldr	r3, [pc, #600]	@ (800351c <lcd_init+0x1704>)
 80032c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032c6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80032c8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	4b94      	ldr	r3, [pc, #592]	@ (8003520 <lcd_init+0x1708>)
 80032d0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80032d2:	4b92      	ldr	r3, [pc, #584]	@ (800351c <lcd_init+0x1704>)
 80032d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032d8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80032da:	4b90      	ldr	r3, [pc, #576]	@ (800351c <lcd_init+0x1704>)
 80032dc:	2280      	movs	r2, #128	@ 0x80
 80032de:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80032e0:	4b8e      	ldr	r3, [pc, #568]	@ (800351c <lcd_init+0x1704>)
 80032e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e6:	611a      	str	r2, [r3, #16]
}
 80032e8:	bf00      	nop

        lcd_wr_regno(0xF1);
        lcd_wr_xdata(0x01);
 80032ea:	2001      	movs	r0, #1
 80032ec:	f7fd fc58 	bl	8000ba0 <lcd_wr_xdata>
 80032f0:	23df      	movs	r3, #223	@ 0xdf
 80032f2:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80032f6:	4b89      	ldr	r3, [pc, #548]	@ (800351c <lcd_init+0x1704>)
 80032f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032fc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80032fe:	4b87      	ldr	r3, [pc, #540]	@ (800351c <lcd_init+0x1704>)
 8003300:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003304:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003306:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 800330a:	b29a      	uxth	r2, r3
 800330c:	4b84      	ldr	r3, [pc, #528]	@ (8003520 <lcd_init+0x1708>)
 800330e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003310:	4b82      	ldr	r3, [pc, #520]	@ (800351c <lcd_init+0x1704>)
 8003312:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003316:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003318:	4b80      	ldr	r3, [pc, #512]	@ (800351c <lcd_init+0x1704>)
 800331a:	2280      	movs	r2, #128	@ 0x80
 800331c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800331e:	4b7f      	ldr	r3, [pc, #508]	@ (800351c <lcd_init+0x1704>)
 8003320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003324:	611a      	str	r2, [r3, #16]
}
 8003326:	bf00      	nop
        lcd_wr_regno(0xDF);
        lcd_wr_xdata(0x10);
 8003328:	2010      	movs	r0, #16
 800332a:	f7fd fc39 	bl	8000ba0 <lcd_wr_xdata>
 800332e:	23c4      	movs	r3, #196	@ 0xc4
 8003330:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003334:	4b79      	ldr	r3, [pc, #484]	@ (800351c <lcd_init+0x1704>)
 8003336:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800333a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800333c:	4b77      	ldr	r3, [pc, #476]	@ (800351c <lcd_init+0x1704>)
 800333e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003342:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003344:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003348:	b29a      	uxth	r2, r3
 800334a:	4b75      	ldr	r3, [pc, #468]	@ (8003520 <lcd_init+0x1708>)
 800334c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800334e:	4b73      	ldr	r3, [pc, #460]	@ (800351c <lcd_init+0x1704>)
 8003350:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003354:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003356:	4b71      	ldr	r3, [pc, #452]	@ (800351c <lcd_init+0x1704>)
 8003358:	2280      	movs	r2, #128	@ 0x80
 800335a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800335c:	4b6f      	ldr	r3, [pc, #444]	@ (800351c <lcd_init+0x1704>)
 800335e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003362:	611a      	str	r2, [r3, #16]
}
 8003364:	bf00      	nop

        /* VCOMvoltage */
        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x8F);  /* 5f */
 8003366:	208f      	movs	r0, #143	@ 0x8f
 8003368:	f7fd fc1a 	bl	8000ba0 <lcd_wr_xdata>
 800336c:	23c6      	movs	r3, #198	@ 0xc6
 800336e:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003372:	4b6a      	ldr	r3, [pc, #424]	@ (800351c <lcd_init+0x1704>)
 8003374:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003378:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800337a:	4b68      	ldr	r3, [pc, #416]	@ (800351c <lcd_init+0x1704>)
 800337c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003380:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003382:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8003386:	b29a      	uxth	r2, r3
 8003388:	4b65      	ldr	r3, [pc, #404]	@ (8003520 <lcd_init+0x1708>)
 800338a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800338c:	4b63      	ldr	r3, [pc, #396]	@ (800351c <lcd_init+0x1704>)
 800338e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003392:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003394:	4b61      	ldr	r3, [pc, #388]	@ (800351c <lcd_init+0x1704>)
 8003396:	2280      	movs	r2, #128	@ 0x80
 8003398:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800339a:	4b60      	ldr	r3, [pc, #384]	@ (800351c <lcd_init+0x1704>)
 800339c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a0:	611a      	str	r2, [r3, #16]
}
 80033a2:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x00);
 80033a4:	2000      	movs	r0, #0
 80033a6:	f7fd fbfb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 80033aa:	20e2      	movs	r0, #226	@ 0xe2
 80033ac:	f7fd fbf8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 80033b0:	20e2      	movs	r0, #226	@ 0xe2
 80033b2:	f7fd fbf5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 80033b6:	20e2      	movs	r0, #226	@ 0xe2
 80033b8:	f7fd fbf2 	bl	8000ba0 <lcd_wr_xdata>
 80033bc:	23bf      	movs	r3, #191	@ 0xbf
 80033be:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80033c2:	4b56      	ldr	r3, [pc, #344]	@ (800351c <lcd_init+0x1704>)
 80033c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033c8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80033ca:	4b54      	ldr	r3, [pc, #336]	@ (800351c <lcd_init+0x1704>)
 80033cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80033d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	4b51      	ldr	r3, [pc, #324]	@ (8003520 <lcd_init+0x1708>)
 80033da:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80033dc:	4b4f      	ldr	r3, [pc, #316]	@ (800351c <lcd_init+0x1704>)
 80033de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80033e2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80033e4:	4b4d      	ldr	r3, [pc, #308]	@ (800351c <lcd_init+0x1704>)
 80033e6:	2280      	movs	r2, #128	@ 0x80
 80033e8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80033ea:	4b4c      	ldr	r3, [pc, #304]	@ (800351c <lcd_init+0x1704>)
 80033ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033f0:	611a      	str	r2, [r3, #16]
}
 80033f2:	bf00      	nop
        lcd_wr_regno(0xBF);
        lcd_wr_xdata(0xAA);
 80033f4:	20aa      	movs	r0, #170	@ 0xaa
 80033f6:	f7fd fbd3 	bl	8000ba0 <lcd_wr_xdata>
 80033fa:	23b0      	movs	r3, #176	@ 0xb0
 80033fc:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003400:	4b46      	ldr	r3, [pc, #280]	@ (800351c <lcd_init+0x1704>)
 8003402:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003406:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003408:	4b44      	ldr	r3, [pc, #272]	@ (800351c <lcd_init+0x1704>)
 800340a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800340e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003410:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8003414:	b29a      	uxth	r2, r3
 8003416:	4b42      	ldr	r3, [pc, #264]	@ (8003520 <lcd_init+0x1708>)
 8003418:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800341a:	4b40      	ldr	r3, [pc, #256]	@ (800351c <lcd_init+0x1704>)
 800341c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003420:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003422:	4b3e      	ldr	r3, [pc, #248]	@ (800351c <lcd_init+0x1704>)
 8003424:	2280      	movs	r2, #128	@ 0x80
 8003426:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003428:	4b3c      	ldr	r3, [pc, #240]	@ (800351c <lcd_init+0x1704>)
 800342a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800342e:	611a      	str	r2, [r3, #16]
}
 8003430:	bf00      	nop

        lcd_wr_regno(0xB0);
        lcd_wr_xdata(0x0D);
 8003432:	200d      	movs	r0, #13
 8003434:	f7fd fbb4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003438:	2000      	movs	r0, #0
 800343a:	f7fd fbb1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 800343e:	200d      	movs	r0, #13
 8003440:	f7fd fbae 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003444:	2000      	movs	r0, #0
 8003446:	f7fd fbab 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 800344a:	2011      	movs	r0, #17
 800344c:	f7fd fba8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003450:	2000      	movs	r0, #0
 8003452:	f7fd fba5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8003456:	2019      	movs	r0, #25
 8003458:	f7fd fba2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800345c:	2000      	movs	r0, #0
 800345e:	f7fd fb9f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003462:	2021      	movs	r0, #33	@ 0x21
 8003464:	f7fd fb9c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003468:	2000      	movs	r0, #0
 800346a:	f7fd fb99 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x2D);
 800346e:	202d      	movs	r0, #45	@ 0x2d
 8003470:	f7fd fb96 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003474:	2000      	movs	r0, #0
 8003476:	f7fd fb93 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x3D);
 800347a:	203d      	movs	r0, #61	@ 0x3d
 800347c:	f7fd fb90 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003480:	2000      	movs	r0, #0
 8003482:	f7fd fb8d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003486:	205d      	movs	r0, #93	@ 0x5d
 8003488:	f7fd fb8a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800348c:	2000      	movs	r0, #0
 800348e:	f7fd fb87 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003492:	205d      	movs	r0, #93	@ 0x5d
 8003494:	f7fd fb84 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003498:	2000      	movs	r0, #0
 800349a:	f7fd fb81 	bl	8000ba0 <lcd_wr_xdata>
 800349e:	23b1      	movs	r3, #177	@ 0xb1
 80034a0:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80034a4:	4b1d      	ldr	r3, [pc, #116]	@ (800351c <lcd_init+0x1704>)
 80034a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034aa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80034ac:	4b1b      	ldr	r3, [pc, #108]	@ (800351c <lcd_init+0x1704>)
 80034ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034b2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80034b4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	4b19      	ldr	r3, [pc, #100]	@ (8003520 <lcd_init+0x1708>)
 80034bc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80034be:	4b17      	ldr	r3, [pc, #92]	@ (800351c <lcd_init+0x1704>)
 80034c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034c4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80034c6:	4b15      	ldr	r3, [pc, #84]	@ (800351c <lcd_init+0x1704>)
 80034c8:	2280      	movs	r2, #128	@ 0x80
 80034ca:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80034cc:	4b13      	ldr	r3, [pc, #76]	@ (800351c <lcd_init+0x1704>)
 80034ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034d2:	611a      	str	r2, [r3, #16]
}
 80034d4:	bf00      	nop

        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x80);
 80034d6:	2080      	movs	r0, #128	@ 0x80
 80034d8:	f7fd fb62 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034dc:	2000      	movs	r0, #0
 80034de:	f7fd fb5f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 80034e2:	208b      	movs	r0, #139	@ 0x8b
 80034e4:	f7fd fb5c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034e8:	2000      	movs	r0, #0
 80034ea:	f7fd fb59 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 80034ee:	2096      	movs	r0, #150	@ 0x96
 80034f0:	f7fd fb56 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7fd fb53 	bl	8000ba0 <lcd_wr_xdata>
 80034fa:	23b2      	movs	r3, #178	@ 0xb2
 80034fc:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003500:	4b06      	ldr	r3, [pc, #24]	@ (800351c <lcd_init+0x1704>)
 8003502:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003506:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003508:	4b04      	ldr	r3, [pc, #16]	@ (800351c <lcd_init+0x1704>)
 800350a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800350e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003510:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8003514:	b29a      	uxth	r2, r3
 8003516:	e005      	b.n	8003524 <lcd_init+0x170c>
 8003518:	200001f4 	.word	0x200001f4
 800351c:	40011000 	.word	0x40011000
 8003520:	40010c00 	.word	0x40010c00
 8003524:	4bd0      	ldr	r3, [pc, #832]	@ (8003868 <lcd_init+0x1a50>)
 8003526:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003528:	4bd0      	ldr	r3, [pc, #832]	@ (800386c <lcd_init+0x1a54>)
 800352a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800352e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003530:	4bce      	ldr	r3, [pc, #824]	@ (800386c <lcd_init+0x1a54>)
 8003532:	2280      	movs	r2, #128	@ 0x80
 8003534:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003536:	4bcd      	ldr	r3, [pc, #820]	@ (800386c <lcd_init+0x1a54>)
 8003538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800353c:	611a      	str	r2, [r3, #16]
}
 800353e:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x00);
 8003540:	2000      	movs	r0, #0
 8003542:	f7fd fb2d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003546:	2000      	movs	r0, #0
 8003548:	f7fd fb2a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800354c:	2002      	movs	r0, #2
 800354e:	f7fd fb27 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003552:	2000      	movs	r0, #0
 8003554:	f7fd fb24 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8003558:	2003      	movs	r0, #3
 800355a:	f7fd fb21 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800355e:	2000      	movs	r0, #0
 8003560:	f7fd fb1e 	bl	8000ba0 <lcd_wr_xdata>
 8003564:	23b3      	movs	r3, #179	@ 0xb3
 8003566:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800356a:	4bc0      	ldr	r3, [pc, #768]	@ (800386c <lcd_init+0x1a54>)
 800356c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003570:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003572:	4bbe      	ldr	r3, [pc, #760]	@ (800386c <lcd_init+0x1a54>)
 8003574:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003578:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800357a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 800357e:	b29a      	uxth	r2, r3
 8003580:	4bb9      	ldr	r3, [pc, #740]	@ (8003868 <lcd_init+0x1a50>)
 8003582:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003584:	4bb9      	ldr	r3, [pc, #740]	@ (800386c <lcd_init+0x1a54>)
 8003586:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800358a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800358c:	4bb7      	ldr	r3, [pc, #732]	@ (800386c <lcd_init+0x1a54>)
 800358e:	2280      	movs	r2, #128	@ 0x80
 8003590:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003592:	4bb6      	ldr	r3, [pc, #728]	@ (800386c <lcd_init+0x1a54>)
 8003594:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003598:	611a      	str	r2, [r3, #16]
}
 800359a:	bf00      	nop

        lcd_wr_regno(0xB3);
        lcd_wr_xdata(0x00);
 800359c:	2000      	movs	r0, #0
 800359e:	f7fd faff 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035a2:	2000      	movs	r0, #0
 80035a4:	f7fd fafc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035a8:	2000      	movs	r0, #0
 80035aa:	f7fd faf9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035ae:	2000      	movs	r0, #0
 80035b0:	f7fd faf6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035b4:	2000      	movs	r0, #0
 80035b6:	f7fd faf3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035ba:	2000      	movs	r0, #0
 80035bc:	f7fd faf0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035c0:	2000      	movs	r0, #0
 80035c2:	f7fd faed 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035c6:	2000      	movs	r0, #0
 80035c8:	f7fd faea 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035cc:	2000      	movs	r0, #0
 80035ce:	f7fd fae7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035d2:	2000      	movs	r0, #0
 80035d4:	f7fd fae4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035d8:	2000      	movs	r0, #0
 80035da:	f7fd fae1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035de:	2000      	movs	r0, #0
 80035e0:	f7fd fade 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035e4:	2000      	movs	r0, #0
 80035e6:	f7fd fadb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035ea:	2000      	movs	r0, #0
 80035ec:	f7fd fad8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035f0:	2000      	movs	r0, #0
 80035f2:	f7fd fad5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035f6:	2000      	movs	r0, #0
 80035f8:	f7fd fad2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035fc:	2000      	movs	r0, #0
 80035fe:	f7fd facf 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003602:	2000      	movs	r0, #0
 8003604:	f7fd facc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003608:	2000      	movs	r0, #0
 800360a:	f7fd fac9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800360e:	2000      	movs	r0, #0
 8003610:	f7fd fac6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003614:	2000      	movs	r0, #0
 8003616:	f7fd fac3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800361a:	2000      	movs	r0, #0
 800361c:	f7fd fac0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003620:	2000      	movs	r0, #0
 8003622:	f7fd fabd 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003626:	2000      	movs	r0, #0
 8003628:	f7fd faba 	bl	8000ba0 <lcd_wr_xdata>
 800362c:	23b4      	movs	r3, #180	@ 0xb4
 800362e:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003632:	4b8e      	ldr	r3, [pc, #568]	@ (800386c <lcd_init+0x1a54>)
 8003634:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003638:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800363a:	4b8c      	ldr	r3, [pc, #560]	@ (800386c <lcd_init+0x1a54>)
 800363c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003640:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003642:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 8003646:	b29a      	uxth	r2, r3
 8003648:	4b87      	ldr	r3, [pc, #540]	@ (8003868 <lcd_init+0x1a50>)
 800364a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800364c:	4b87      	ldr	r3, [pc, #540]	@ (800386c <lcd_init+0x1a54>)
 800364e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003652:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003654:	4b85      	ldr	r3, [pc, #532]	@ (800386c <lcd_init+0x1a54>)
 8003656:	2280      	movs	r2, #128	@ 0x80
 8003658:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800365a:	4b84      	ldr	r3, [pc, #528]	@ (800386c <lcd_init+0x1a54>)
 800365c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003660:	611a      	str	r2, [r3, #16]
}
 8003662:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x8B);
 8003664:	208b      	movs	r0, #139	@ 0x8b
 8003666:	f7fd fa9b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800366a:	2000      	movs	r0, #0
 800366c:	f7fd fa98 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 8003670:	2096      	movs	r0, #150	@ 0x96
 8003672:	f7fd fa95 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003676:	2000      	movs	r0, #0
 8003678:	f7fd fa92 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 800367c:	20a1      	movs	r0, #161	@ 0xa1
 800367e:	f7fd fa8f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003682:	2000      	movs	r0, #0
 8003684:	f7fd fa8c 	bl	8000ba0 <lcd_wr_xdata>
 8003688:	23b5      	movs	r3, #181	@ 0xb5
 800368a:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800368e:	4b77      	ldr	r3, [pc, #476]	@ (800386c <lcd_init+0x1a54>)
 8003690:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003694:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003696:	4b75      	ldr	r3, [pc, #468]	@ (800386c <lcd_init+0x1a54>)
 8003698:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800369c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800369e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	4b70      	ldr	r3, [pc, #448]	@ (8003868 <lcd_init+0x1a50>)
 80036a6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80036a8:	4b70      	ldr	r3, [pc, #448]	@ (800386c <lcd_init+0x1a54>)
 80036aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036ae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80036b0:	4b6e      	ldr	r3, [pc, #440]	@ (800386c <lcd_init+0x1a54>)
 80036b2:	2280      	movs	r2, #128	@ 0x80
 80036b4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80036b6:	4b6d      	ldr	r3, [pc, #436]	@ (800386c <lcd_init+0x1a54>)
 80036b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036bc:	611a      	str	r2, [r3, #16]
}
 80036be:	bf00      	nop

        lcd_wr_regno(0xB5);
        lcd_wr_xdata(0x02);
 80036c0:	2002      	movs	r0, #2
 80036c2:	f7fd fa6d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036c6:	2000      	movs	r0, #0
 80036c8:	f7fd fa6a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 80036cc:	2003      	movs	r0, #3
 80036ce:	f7fd fa67 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036d2:	2000      	movs	r0, #0
 80036d4:	f7fd fa64 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 80036d8:	2004      	movs	r0, #4
 80036da:	f7fd fa61 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036de:	2000      	movs	r0, #0
 80036e0:	f7fd fa5e 	bl	8000ba0 <lcd_wr_xdata>
 80036e4:	23b6      	movs	r3, #182	@ 0xb6
 80036e6:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80036ea:	4b60      	ldr	r3, [pc, #384]	@ (800386c <lcd_init+0x1a54>)
 80036ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80036f2:	4b5e      	ldr	r3, [pc, #376]	@ (800386c <lcd_init+0x1a54>)
 80036f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80036fa:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 80036fe:	b29a      	uxth	r2, r3
 8003700:	4b59      	ldr	r3, [pc, #356]	@ (8003868 <lcd_init+0x1a50>)
 8003702:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003704:	4b59      	ldr	r3, [pc, #356]	@ (800386c <lcd_init+0x1a54>)
 8003706:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800370a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800370c:	4b57      	ldr	r3, [pc, #348]	@ (800386c <lcd_init+0x1a54>)
 800370e:	2280      	movs	r2, #128	@ 0x80
 8003710:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003712:	4b56      	ldr	r3, [pc, #344]	@ (800386c <lcd_init+0x1a54>)
 8003714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003718:	611a      	str	r2, [r3, #16]
}
 800371a:	bf00      	nop

        lcd_wr_regno(0xB6);
        lcd_wr_xdata(0x00);
 800371c:	2000      	movs	r0, #0
 800371e:	f7fd fa3f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003722:	2000      	movs	r0, #0
 8003724:	f7fd fa3c 	bl	8000ba0 <lcd_wr_xdata>
 8003728:	23b7      	movs	r3, #183	@ 0xb7
 800372a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800372e:	4b4f      	ldr	r3, [pc, #316]	@ (800386c <lcd_init+0x1a54>)
 8003730:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003734:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003736:	4b4d      	ldr	r3, [pc, #308]	@ (800386c <lcd_init+0x1a54>)
 8003738:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800373c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800373e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003742:	b29a      	uxth	r2, r3
 8003744:	4b48      	ldr	r3, [pc, #288]	@ (8003868 <lcd_init+0x1a50>)
 8003746:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003748:	4b48      	ldr	r3, [pc, #288]	@ (800386c <lcd_init+0x1a54>)
 800374a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800374e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003750:	4b46      	ldr	r3, [pc, #280]	@ (800386c <lcd_init+0x1a54>)
 8003752:	2280      	movs	r2, #128	@ 0x80
 8003754:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003756:	4b45      	ldr	r3, [pc, #276]	@ (800386c <lcd_init+0x1a54>)
 8003758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800375c:	611a      	str	r2, [r3, #16]
}
 800375e:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x00);
 8003760:	2000      	movs	r0, #0
 8003762:	f7fd fa1d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003766:	2000      	movs	r0, #0
 8003768:	f7fd fa1a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 800376c:	203f      	movs	r0, #63	@ 0x3f
 800376e:	f7fd fa17 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003772:	2000      	movs	r0, #0
 8003774:	f7fd fa14 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x5E);
 8003778:	205e      	movs	r0, #94	@ 0x5e
 800377a:	f7fd fa11 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800377e:	2000      	movs	r0, #0
 8003780:	f7fd fa0e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003784:	2064      	movs	r0, #100	@ 0x64
 8003786:	f7fd fa0b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800378a:	2000      	movs	r0, #0
 800378c:	f7fd fa08 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x8C);
 8003790:	208c      	movs	r0, #140	@ 0x8c
 8003792:	f7fd fa05 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003796:	2000      	movs	r0, #0
 8003798:	f7fd fa02 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xAC);
 800379c:	20ac      	movs	r0, #172	@ 0xac
 800379e:	f7fd f9ff 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037a2:	2000      	movs	r0, #0
 80037a4:	f7fd f9fc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 80037a8:	20dc      	movs	r0, #220	@ 0xdc
 80037aa:	f7fd f9f9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037ae:	2000      	movs	r0, #0
 80037b0:	f7fd f9f6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x70);
 80037b4:	2070      	movs	r0, #112	@ 0x70
 80037b6:	f7fd f9f3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037ba:	2000      	movs	r0, #0
 80037bc:	f7fd f9f0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x90);
 80037c0:	2090      	movs	r0, #144	@ 0x90
 80037c2:	f7fd f9ed 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037c6:	2000      	movs	r0, #0
 80037c8:	f7fd f9ea 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xEB);
 80037cc:	20eb      	movs	r0, #235	@ 0xeb
 80037ce:	f7fd f9e7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f7fd f9e4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 80037d8:	20dc      	movs	r0, #220	@ 0xdc
 80037da:	f7fd f9e1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037de:	2000      	movs	r0, #0
 80037e0:	f7fd f9de 	bl	8000ba0 <lcd_wr_xdata>
 80037e4:	23b8      	movs	r3, #184	@ 0xb8
 80037e6:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80037ea:	4b20      	ldr	r3, [pc, #128]	@ (800386c <lcd_init+0x1a54>)
 80037ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80037f2:	4b1e      	ldr	r3, [pc, #120]	@ (800386c <lcd_init+0x1a54>)
 80037f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80037fa:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 80037fe:	b29a      	uxth	r2, r3
 8003800:	4b19      	ldr	r3, [pc, #100]	@ (8003868 <lcd_init+0x1a50>)
 8003802:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003804:	4b19      	ldr	r3, [pc, #100]	@ (800386c <lcd_init+0x1a54>)
 8003806:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800380a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800380c:	4b17      	ldr	r3, [pc, #92]	@ (800386c <lcd_init+0x1a54>)
 800380e:	2280      	movs	r2, #128	@ 0x80
 8003810:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003812:	4b16      	ldr	r3, [pc, #88]	@ (800386c <lcd_init+0x1a54>)
 8003814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003818:	611a      	str	r2, [r3, #16]
}
 800381a:	bf00      	nop

        lcd_wr_regno(0xB8);
        lcd_wr_xdata(0x00);
 800381c:	2000      	movs	r0, #0
 800381e:	f7fd f9bf 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003822:	2000      	movs	r0, #0
 8003824:	f7fd f9bc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003828:	2000      	movs	r0, #0
 800382a:	f7fd f9b9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800382e:	2000      	movs	r0, #0
 8003830:	f7fd f9b6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003834:	2000      	movs	r0, #0
 8003836:	f7fd f9b3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800383a:	2000      	movs	r0, #0
 800383c:	f7fd f9b0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003840:	2000      	movs	r0, #0
 8003842:	f7fd f9ad 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003846:	2000      	movs	r0, #0
 8003848:	f7fd f9aa 	bl	8000ba0 <lcd_wr_xdata>
 800384c:	23ba      	movs	r3, #186	@ 0xba
 800384e:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003852:	4b06      	ldr	r3, [pc, #24]	@ (800386c <lcd_init+0x1a54>)
 8003854:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003858:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800385a:	4b04      	ldr	r3, [pc, #16]	@ (800386c <lcd_init+0x1a54>)
 800385c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003860:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003862:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8003866:	e003      	b.n	8003870 <lcd_init+0x1a58>
 8003868:	40010c00 	.word	0x40010c00
 800386c:	40011000 	.word	0x40011000
 8003870:	b29a      	uxth	r2, r3
 8003872:	4bd9      	ldr	r3, [pc, #868]	@ (8003bd8 <lcd_init+0x1dc0>)
 8003874:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003876:	4bd9      	ldr	r3, [pc, #868]	@ (8003bdc <lcd_init+0x1dc4>)
 8003878:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800387c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800387e:	4bd7      	ldr	r3, [pc, #860]	@ (8003bdc <lcd_init+0x1dc4>)
 8003880:	2280      	movs	r2, #128	@ 0x80
 8003882:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003884:	4bd5      	ldr	r3, [pc, #852]	@ (8003bdc <lcd_init+0x1dc4>)
 8003886:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800388a:	611a      	str	r2, [r3, #16]
}
 800388c:	bf00      	nop

        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0x24);
 800388e:	2024      	movs	r0, #36	@ 0x24
 8003890:	f7fd f986 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003894:	2000      	movs	r0, #0
 8003896:	f7fd f983 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800389a:	2000      	movs	r0, #0
 800389c:	f7fd f980 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7fd f97d 	bl	8000ba0 <lcd_wr_xdata>
 80038a6:	23c1      	movs	r3, #193	@ 0xc1
 80038a8:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80038ac:	4bcb      	ldr	r3, [pc, #812]	@ (8003bdc <lcd_init+0x1dc4>)
 80038ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038b2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80038b4:	4bc9      	ldr	r3, [pc, #804]	@ (8003bdc <lcd_init+0x1dc4>)
 80038b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038ba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80038bc:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	4bc5      	ldr	r3, [pc, #788]	@ (8003bd8 <lcd_init+0x1dc0>)
 80038c4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80038c6:	4bc5      	ldr	r3, [pc, #788]	@ (8003bdc <lcd_init+0x1dc4>)
 80038c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038cc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80038ce:	4bc3      	ldr	r3, [pc, #780]	@ (8003bdc <lcd_init+0x1dc4>)
 80038d0:	2280      	movs	r2, #128	@ 0x80
 80038d2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80038d4:	4bc1      	ldr	r3, [pc, #772]	@ (8003bdc <lcd_init+0x1dc4>)
 80038d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038da:	611a      	str	r2, [r3, #16]
}
 80038dc:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x20);
 80038de:	2020      	movs	r0, #32
 80038e0:	f7fd f95e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7fd f95b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 80038ea:	2054      	movs	r0, #84	@ 0x54
 80038ec:	f7fd f958 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038f0:	2000      	movs	r0, #0
 80038f2:	f7fd f955 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80038f6:	20ff      	movs	r0, #255	@ 0xff
 80038f8:	f7fd f952 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038fc:	2000      	movs	r0, #0
 80038fe:	f7fd f94f 	bl	8000ba0 <lcd_wr_xdata>
 8003902:	23c2      	movs	r3, #194	@ 0xc2
 8003904:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003908:	4bb4      	ldr	r3, [pc, #720]	@ (8003bdc <lcd_init+0x1dc4>)
 800390a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800390e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003910:	4bb2      	ldr	r3, [pc, #712]	@ (8003bdc <lcd_init+0x1dc4>)
 8003912:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003916:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003918:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800391c:	b29a      	uxth	r2, r3
 800391e:	4bae      	ldr	r3, [pc, #696]	@ (8003bd8 <lcd_init+0x1dc0>)
 8003920:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003922:	4bae      	ldr	r3, [pc, #696]	@ (8003bdc <lcd_init+0x1dc4>)
 8003924:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003928:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800392a:	4bac      	ldr	r3, [pc, #688]	@ (8003bdc <lcd_init+0x1dc4>)
 800392c:	2280      	movs	r2, #128	@ 0x80
 800392e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003930:	4baa      	ldr	r3, [pc, #680]	@ (8003bdc <lcd_init+0x1dc4>)
 8003932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003936:	611a      	str	r2, [r3, #16]
}
 8003938:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x0A);
 800393a:	200a      	movs	r0, #10
 800393c:	f7fd f930 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003940:	2000      	movs	r0, #0
 8003942:	f7fd f92d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8003946:	2004      	movs	r0, #4
 8003948:	f7fd f92a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800394c:	2000      	movs	r0, #0
 800394e:	f7fd f927 	bl	8000ba0 <lcd_wr_xdata>
 8003952:	23c3      	movs	r3, #195	@ 0xc3
 8003954:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003958:	4ba0      	ldr	r3, [pc, #640]	@ (8003bdc <lcd_init+0x1dc4>)
 800395a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800395e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003960:	4b9e      	ldr	r3, [pc, #632]	@ (8003bdc <lcd_init+0x1dc4>)
 8003962:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003966:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003968:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 800396c:	b29a      	uxth	r2, r3
 800396e:	4b9a      	ldr	r3, [pc, #616]	@ (8003bd8 <lcd_init+0x1dc0>)
 8003970:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003972:	4b9a      	ldr	r3, [pc, #616]	@ (8003bdc <lcd_init+0x1dc4>)
 8003974:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003978:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800397a:	4b98      	ldr	r3, [pc, #608]	@ (8003bdc <lcd_init+0x1dc4>)
 800397c:	2280      	movs	r2, #128	@ 0x80
 800397e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003980:	4b96      	ldr	r3, [pc, #600]	@ (8003bdc <lcd_init+0x1dc4>)
 8003982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003986:	611a      	str	r2, [r3, #16]
}
 8003988:	bf00      	nop

        lcd_wr_regno(0xC3);
        lcd_wr_xdata(0x3C);
 800398a:	203c      	movs	r0, #60	@ 0x3c
 800398c:	f7fd f908 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003990:	2000      	movs	r0, #0
 8003992:	f7fd f905 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x3A);
 8003996:	203a      	movs	r0, #58	@ 0x3a
 8003998:	f7fd f902 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800399c:	2000      	movs	r0, #0
 800399e:	f7fd f8ff 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x39);
 80039a2:	2039      	movs	r0, #57	@ 0x39
 80039a4:	f7fd f8fc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039a8:	2000      	movs	r0, #0
 80039aa:	f7fd f8f9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 80039ae:	2037      	movs	r0, #55	@ 0x37
 80039b0:	f7fd f8f6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039b4:	2000      	movs	r0, #0
 80039b6:	f7fd f8f3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80039ba:	203c      	movs	r0, #60	@ 0x3c
 80039bc:	f7fd f8f0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039c0:	2000      	movs	r0, #0
 80039c2:	f7fd f8ed 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 80039c6:	2036      	movs	r0, #54	@ 0x36
 80039c8:	f7fd f8ea 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039cc:	2000      	movs	r0, #0
 80039ce:	f7fd f8e7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 80039d2:	2032      	movs	r0, #50	@ 0x32
 80039d4:	f7fd f8e4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039d8:	2000      	movs	r0, #0
 80039da:	f7fd f8e1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 80039de:	202f      	movs	r0, #47	@ 0x2f
 80039e0:	f7fd f8de 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039e4:	2000      	movs	r0, #0
 80039e6:	f7fd f8db 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 80039ea:	202c      	movs	r0, #44	@ 0x2c
 80039ec:	f7fd f8d8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039f0:	2000      	movs	r0, #0
 80039f2:	f7fd f8d5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80039f6:	2029      	movs	r0, #41	@ 0x29
 80039f8:	f7fd f8d2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039fc:	2000      	movs	r0, #0
 80039fe:	f7fd f8cf 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8003a02:	2026      	movs	r0, #38	@ 0x26
 8003a04:	f7fd f8cc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a08:	2000      	movs	r0, #0
 8003a0a:	f7fd f8c9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003a0e:	2024      	movs	r0, #36	@ 0x24
 8003a10:	f7fd f8c6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a14:	2000      	movs	r0, #0
 8003a16:	f7fd f8c3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003a1a:	2024      	movs	r0, #36	@ 0x24
 8003a1c:	f7fd f8c0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a20:	2000      	movs	r0, #0
 8003a22:	f7fd f8bd 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8003a26:	2023      	movs	r0, #35	@ 0x23
 8003a28:	f7fd f8ba 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f7fd f8b7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8003a32:	203c      	movs	r0, #60	@ 0x3c
 8003a34:	f7fd f8b4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a38:	2000      	movs	r0, #0
 8003a3a:	f7fd f8b1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003a3e:	2036      	movs	r0, #54	@ 0x36
 8003a40:	f7fd f8ae 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7fd f8ab 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8003a4a:	2032      	movs	r0, #50	@ 0x32
 8003a4c:	f7fd f8a8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a50:	2000      	movs	r0, #0
 8003a52:	f7fd f8a5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 8003a56:	202f      	movs	r0, #47	@ 0x2f
 8003a58:	f7fd f8a2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f7fd f89f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8003a62:	202c      	movs	r0, #44	@ 0x2c
 8003a64:	f7fd f89c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f7fd f899 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8003a6e:	2029      	movs	r0, #41	@ 0x29
 8003a70:	f7fd f896 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7fd f893 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8003a7a:	2026      	movs	r0, #38	@ 0x26
 8003a7c:	f7fd f890 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a80:	2000      	movs	r0, #0
 8003a82:	f7fd f88d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003a86:	2024      	movs	r0, #36	@ 0x24
 8003a88:	f7fd f88a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f7fd f887 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003a92:	2024      	movs	r0, #36	@ 0x24
 8003a94:	f7fd f884 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f7fd f881 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8003a9e:	2023      	movs	r0, #35	@ 0x23
 8003aa0:	f7fd f87e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	f7fd f87b 	bl	8000ba0 <lcd_wr_xdata>
 8003aaa:	23c4      	movs	r3, #196	@ 0xc4
 8003aac:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8003bdc <lcd_init+0x1dc4>)
 8003ab2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ab6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003ab8:	4b48      	ldr	r3, [pc, #288]	@ (8003bdc <lcd_init+0x1dc4>)
 8003aba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003abe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003ac0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	4b44      	ldr	r3, [pc, #272]	@ (8003bd8 <lcd_init+0x1dc0>)
 8003ac8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003aca:	4b44      	ldr	r3, [pc, #272]	@ (8003bdc <lcd_init+0x1dc4>)
 8003acc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ad0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ad2:	4b42      	ldr	r3, [pc, #264]	@ (8003bdc <lcd_init+0x1dc4>)
 8003ad4:	2280      	movs	r2, #128	@ 0x80
 8003ad6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003ad8:	4b40      	ldr	r3, [pc, #256]	@ (8003bdc <lcd_init+0x1dc4>)
 8003ada:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ade:	611a      	str	r2, [r3, #16]
}
 8003ae0:	bf00      	nop

        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x62);
 8003ae2:	2062      	movs	r0, #98	@ 0x62
 8003ae4:	f7fd f85c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f7fd f859 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8003aee:	2005      	movs	r0, #5
 8003af0:	f7fd f856 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003af4:	2000      	movs	r0, #0
 8003af6:	f7fd f853 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8003afa:	2084      	movs	r0, #132	@ 0x84
 8003afc:	f7fd f850 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b00:	2000      	movs	r0, #0
 8003b02:	f7fd f84d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xF0);
 8003b06:	20f0      	movs	r0, #240	@ 0xf0
 8003b08:	f7fd f84a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f7fd f847 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 8003b12:	2018      	movs	r0, #24
 8003b14:	f7fd f844 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b18:	2000      	movs	r0, #0
 8003b1a:	f7fd f841 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA4);
 8003b1e:	20a4      	movs	r0, #164	@ 0xa4
 8003b20:	f7fd f83e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b24:	2000      	movs	r0, #0
 8003b26:	f7fd f83b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 8003b2a:	2018      	movs	r0, #24
 8003b2c:	f7fd f838 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b30:	2000      	movs	r0, #0
 8003b32:	f7fd f835 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8003b36:	2050      	movs	r0, #80	@ 0x50
 8003b38:	f7fd f832 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	f7fd f82f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8003b42:	200c      	movs	r0, #12
 8003b44:	f7fd f82c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f7fd f829 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003b4e:	2017      	movs	r0, #23
 8003b50:	f7fd f826 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b54:	2000      	movs	r0, #0
 8003b56:	f7fd f823 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x95);
 8003b5a:	2095      	movs	r0, #149	@ 0x95
 8003b5c:	f7fd f820 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b60:	2000      	movs	r0, #0
 8003b62:	f7fd f81d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003b66:	20f3      	movs	r0, #243	@ 0xf3
 8003b68:	f7fd f81a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f7fd f817 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xE6);
 8003b72:	20e6      	movs	r0, #230	@ 0xe6
 8003b74:	f7fd f814 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7fd f811 	bl	8000ba0 <lcd_wr_xdata>
 8003b7e:	23c5      	movs	r3, #197	@ 0xc5
 8003b80:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003b84:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <lcd_init+0x1dc4>)
 8003b86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b8a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003b8c:	4b13      	ldr	r3, [pc, #76]	@ (8003bdc <lcd_init+0x1dc4>)
 8003b8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b92:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003b94:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd8 <lcd_init+0x1dc0>)
 8003b9c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bdc <lcd_init+0x1dc4>)
 8003ba0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ba4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bdc <lcd_init+0x1dc4>)
 8003ba8:	2280      	movs	r2, #128	@ 0x80
 8003baa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003bac:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <lcd_init+0x1dc4>)
 8003bae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bb2:	611a      	str	r2, [r3, #16]
}
 8003bb4:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x32);
 8003bb6:	2032      	movs	r0, #50	@ 0x32
 8003bb8:	f7fc fff2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	f7fc ffef 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003bc2:	2044      	movs	r0, #68	@ 0x44
 8003bc4:	f7fc ffec 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f7fc ffe9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x65);
 8003bce:	2065      	movs	r0, #101	@ 0x65
 8003bd0:	f7fc ffe6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	e003      	b.n	8003be0 <lcd_init+0x1dc8>
 8003bd8:	40010c00 	.word	0x40010c00
 8003bdc:	40011000 	.word	0x40011000
 8003be0:	f7fc ffde 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8003be4:	2076      	movs	r0, #118	@ 0x76
 8003be6:	f7fc ffdb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bea:	2000      	movs	r0, #0
 8003bec:	f7fc ffd8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003bf0:	2088      	movs	r0, #136	@ 0x88
 8003bf2:	f7fc ffd5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f7fc ffd2 	bl	8000ba0 <lcd_wr_xdata>
 8003bfc:	23c6      	movs	r3, #198	@ 0xc6
 8003bfe:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003c02:	4bd7      	ldr	r3, [pc, #860]	@ (8003f60 <lcd_init+0x2148>)
 8003c04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c08:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003c0a:	4bd5      	ldr	r3, [pc, #852]	@ (8003f60 <lcd_init+0x2148>)
 8003c0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c10:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003c12:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	4bd2      	ldr	r3, [pc, #840]	@ (8003f64 <lcd_init+0x214c>)
 8003c1a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003c1c:	4bd0      	ldr	r3, [pc, #832]	@ (8003f60 <lcd_init+0x2148>)
 8003c1e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c22:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003c24:	4bce      	ldr	r3, [pc, #824]	@ (8003f60 <lcd_init+0x2148>)
 8003c26:	2280      	movs	r2, #128	@ 0x80
 8003c28:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003c2a:	4bcd      	ldr	r3, [pc, #820]	@ (8003f60 <lcd_init+0x2148>)
 8003c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c30:	611a      	str	r2, [r3, #16]
}
 8003c32:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x20);
 8003c34:	2020      	movs	r0, #32
 8003c36:	f7fc ffb3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f7fc ffb0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003c40:	2017      	movs	r0, #23
 8003c42:	f7fc ffad 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c46:	2000      	movs	r0, #0
 8003c48:	f7fc ffaa 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f7fc ffa7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c52:	2000      	movs	r0, #0
 8003c54:	f7fc ffa4 	bl	8000ba0 <lcd_wr_xdata>
 8003c58:	23c7      	movs	r3, #199	@ 0xc7
 8003c5a:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003c5e:	4bc0      	ldr	r3, [pc, #768]	@ (8003f60 <lcd_init+0x2148>)
 8003c60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c64:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003c66:	4bbe      	ldr	r3, [pc, #760]	@ (8003f60 <lcd_init+0x2148>)
 8003c68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c6c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003c6e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	4bbb      	ldr	r3, [pc, #748]	@ (8003f64 <lcd_init+0x214c>)
 8003c76:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003c78:	4bb9      	ldr	r3, [pc, #740]	@ (8003f60 <lcd_init+0x2148>)
 8003c7a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c7e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003c80:	4bb7      	ldr	r3, [pc, #732]	@ (8003f60 <lcd_init+0x2148>)
 8003c82:	2280      	movs	r2, #128	@ 0x80
 8003c84:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003c86:	4bb6      	ldr	r3, [pc, #728]	@ (8003f60 <lcd_init+0x2148>)
 8003c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c8c:	611a      	str	r2, [r3, #16]
}
 8003c8e:	bf00      	nop

        lcd_wr_regno(0xC7);
        lcd_wr_xdata(0x00);
 8003c90:	2000      	movs	r0, #0
 8003c92:	f7fc ff85 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c96:	2000      	movs	r0, #0
 8003c98:	f7fc ff82 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	f7fc ff7f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	f7fc ff7c 	bl	8000ba0 <lcd_wr_xdata>
 8003ca8:	23c8      	movs	r3, #200	@ 0xc8
 8003caa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003cae:	4bac      	ldr	r3, [pc, #688]	@ (8003f60 <lcd_init+0x2148>)
 8003cb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003cb4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003cb6:	4baa      	ldr	r3, [pc, #680]	@ (8003f60 <lcd_init+0x2148>)
 8003cb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cbc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003cbe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	4ba7      	ldr	r3, [pc, #668]	@ (8003f64 <lcd_init+0x214c>)
 8003cc6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003cc8:	4ba5      	ldr	r3, [pc, #660]	@ (8003f60 <lcd_init+0x2148>)
 8003cca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003cce:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003cd0:	4ba3      	ldr	r3, [pc, #652]	@ (8003f60 <lcd_init+0x2148>)
 8003cd2:	2280      	movs	r2, #128	@ 0x80
 8003cd4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003cd6:	4ba2      	ldr	r3, [pc, #648]	@ (8003f60 <lcd_init+0x2148>)
 8003cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cdc:	611a      	str	r2, [r3, #16]
}
 8003cde:	bf00      	nop

        lcd_wr_regno(0xC8);
        lcd_wr_xdata(0x00);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7fc ff5d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	f7fc ff5a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cec:	2000      	movs	r0, #0
 8003cee:	f7fc ff57 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f7fc ff54 	bl	8000ba0 <lcd_wr_xdata>
 8003cf8:	23c9      	movs	r3, #201	@ 0xc9
 8003cfa:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003cfe:	4b98      	ldr	r3, [pc, #608]	@ (8003f60 <lcd_init+0x2148>)
 8003d00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d04:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003d06:	4b96      	ldr	r3, [pc, #600]	@ (8003f60 <lcd_init+0x2148>)
 8003d08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d0c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003d0e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	4b93      	ldr	r3, [pc, #588]	@ (8003f64 <lcd_init+0x214c>)
 8003d16:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003d18:	4b91      	ldr	r3, [pc, #580]	@ (8003f60 <lcd_init+0x2148>)
 8003d1a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d1e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003d20:	4b8f      	ldr	r3, [pc, #572]	@ (8003f60 <lcd_init+0x2148>)
 8003d22:	2280      	movs	r2, #128	@ 0x80
 8003d24:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003d26:	4b8e      	ldr	r3, [pc, #568]	@ (8003f60 <lcd_init+0x2148>)
 8003d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d2c:	611a      	str	r2, [r3, #16]
}
 8003d2e:	bf00      	nop

        lcd_wr_regno(0xC9);
        lcd_wr_xdata(0x00);
 8003d30:	2000      	movs	r0, #0
 8003d32:	f7fc ff35 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d36:	2000      	movs	r0, #0
 8003d38:	f7fc ff32 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f7fc ff2f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d42:	2000      	movs	r0, #0
 8003d44:	f7fc ff2c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d48:	2000      	movs	r0, #0
 8003d4a:	f7fc ff29 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f7fc ff26 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d54:	2000      	movs	r0, #0
 8003d56:	f7fc ff23 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f7fc ff20 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d60:	2000      	movs	r0, #0
 8003d62:	f7fc ff1d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d66:	2000      	movs	r0, #0
 8003d68:	f7fc ff1a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	f7fc ff17 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d72:	2000      	movs	r0, #0
 8003d74:	f7fc ff14 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7fc ff11 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f7fc ff0e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d84:	2000      	movs	r0, #0
 8003d86:	f7fc ff0b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f7fc ff08 	bl	8000ba0 <lcd_wr_xdata>
 8003d90:	23e0      	movs	r3, #224	@ 0xe0
 8003d92:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003d96:	4b72      	ldr	r3, [pc, #456]	@ (8003f60 <lcd_init+0x2148>)
 8003d98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d9c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003d9e:	4b70      	ldr	r3, [pc, #448]	@ (8003f60 <lcd_init+0x2148>)
 8003da0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003da4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003da6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	4b6d      	ldr	r3, [pc, #436]	@ (8003f64 <lcd_init+0x214c>)
 8003dae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003db0:	4b6b      	ldr	r3, [pc, #428]	@ (8003f60 <lcd_init+0x2148>)
 8003db2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003db6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003db8:	4b69      	ldr	r3, [pc, #420]	@ (8003f60 <lcd_init+0x2148>)
 8003dba:	2280      	movs	r2, #128	@ 0x80
 8003dbc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003dbe:	4b68      	ldr	r3, [pc, #416]	@ (8003f60 <lcd_init+0x2148>)
 8003dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dc4:	611a      	str	r2, [r3, #16]
}
 8003dc6:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0x16);
 8003dc8:	2016      	movs	r0, #22
 8003dca:	f7fc fee9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dce:	2000      	movs	r0, #0
 8003dd0:	f7fc fee6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003dd4:	201c      	movs	r0, #28
 8003dd6:	f7fc fee3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f7fc fee0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003de0:	2021      	movs	r0, #33	@ 0x21
 8003de2:	f7fc fedd 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003de6:	2000      	movs	r0, #0
 8003de8:	f7fc feda 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003dec:	2036      	movs	r0, #54	@ 0x36
 8003dee:	f7fc fed7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003df2:	2000      	movs	r0, #0
 8003df4:	f7fc fed4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x46);
 8003df8:	2046      	movs	r0, #70	@ 0x46
 8003dfa:	f7fc fed1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f7fc fece 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003e04:	2052      	movs	r0, #82	@ 0x52
 8003e06:	f7fc fecb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	f7fc fec8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003e10:	2064      	movs	r0, #100	@ 0x64
 8003e12:	f7fc fec5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e16:	2000      	movs	r0, #0
 8003e18:	f7fc fec2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003e1c:	207a      	movs	r0, #122	@ 0x7a
 8003e1e:	f7fc febf 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e22:	2000      	movs	r0, #0
 8003e24:	f7fc febc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003e28:	208b      	movs	r0, #139	@ 0x8b
 8003e2a:	f7fc feb9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f7fc feb6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003e34:	2099      	movs	r0, #153	@ 0x99
 8003e36:	f7fc feb3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f7fc feb0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003e40:	20a8      	movs	r0, #168	@ 0xa8
 8003e42:	f7fc fead 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e46:	2000      	movs	r0, #0
 8003e48:	f7fc feaa 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003e4c:	20b9      	movs	r0, #185	@ 0xb9
 8003e4e:	f7fc fea7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e52:	2000      	movs	r0, #0
 8003e54:	f7fc fea4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003e58:	20c4      	movs	r0, #196	@ 0xc4
 8003e5a:	f7fc fea1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f7fc fe9e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003e64:	20ca      	movs	r0, #202	@ 0xca
 8003e66:	f7fc fe9b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f7fc fe98 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003e70:	20d2      	movs	r0, #210	@ 0xd2
 8003e72:	f7fc fe95 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e76:	2000      	movs	r0, #0
 8003e78:	f7fc fe92 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xD9);
 8003e7c:	20d9      	movs	r0, #217	@ 0xd9
 8003e7e:	f7fc fe8f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e82:	2000      	movs	r0, #0
 8003e84:	f7fc fe8c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003e88:	20e0      	movs	r0, #224	@ 0xe0
 8003e8a:	f7fc fe89 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e8e:	2000      	movs	r0, #0
 8003e90:	f7fc fe86 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003e94:	20f3      	movs	r0, #243	@ 0xf3
 8003e96:	f7fc fe83 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7fc fe80 	bl	8000ba0 <lcd_wr_xdata>
 8003ea0:	23e1      	movs	r3, #225	@ 0xe1
 8003ea2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8003f60 <lcd_init+0x2148>)
 8003ea8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003eac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003eae:	4b2c      	ldr	r3, [pc, #176]	@ (8003f60 <lcd_init+0x2148>)
 8003eb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003eb4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003eb6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	4b29      	ldr	r3, [pc, #164]	@ (8003f64 <lcd_init+0x214c>)
 8003ebe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003ec0:	4b27      	ldr	r3, [pc, #156]	@ (8003f60 <lcd_init+0x2148>)
 8003ec2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ec6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ec8:	4b25      	ldr	r3, [pc, #148]	@ (8003f60 <lcd_init+0x2148>)
 8003eca:	2280      	movs	r2, #128	@ 0x80
 8003ecc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003ece:	4b24      	ldr	r3, [pc, #144]	@ (8003f60 <lcd_init+0x2148>)
 8003ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed4:	611a      	str	r2, [r3, #16]
}
 8003ed6:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0x16);
 8003ed8:	2016      	movs	r0, #22
 8003eda:	f7fc fe61 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ede:	2000      	movs	r0, #0
 8003ee0:	f7fc fe5e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003ee4:	201c      	movs	r0, #28
 8003ee6:	f7fc fe5b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eea:	2000      	movs	r0, #0
 8003eec:	f7fc fe58 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8003ef0:	2022      	movs	r0, #34	@ 0x22
 8003ef2:	f7fc fe55 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f7fc fe52 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003efc:	2036      	movs	r0, #54	@ 0x36
 8003efe:	f7fc fe4f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f02:	2000      	movs	r0, #0
 8003f04:	f7fc fe4c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8003f08:	2045      	movs	r0, #69	@ 0x45
 8003f0a:	f7fc fe49 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f7fc fe46 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003f14:	2052      	movs	r0, #82	@ 0x52
 8003f16:	f7fc fe43 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	f7fc fe40 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003f20:	2064      	movs	r0, #100	@ 0x64
 8003f22:	f7fc fe3d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f26:	2000      	movs	r0, #0
 8003f28:	f7fc fe3a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003f2c:	207a      	movs	r0, #122	@ 0x7a
 8003f2e:	f7fc fe37 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f32:	2000      	movs	r0, #0
 8003f34:	f7fc fe34 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003f38:	208b      	movs	r0, #139	@ 0x8b
 8003f3a:	f7fc fe31 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f7fc fe2e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003f44:	2099      	movs	r0, #153	@ 0x99
 8003f46:	f7fc fe2b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f7fc fe28 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003f50:	20a8      	movs	r0, #168	@ 0xa8
 8003f52:	f7fc fe25 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f56:	2000      	movs	r0, #0
 8003f58:	f7fc fe22 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003f5c:	20b9      	movs	r0, #185	@ 0xb9
 8003f5e:	e003      	b.n	8003f68 <lcd_init+0x2150>
 8003f60:	40011000 	.word	0x40011000
 8003f64:	40010c00 	.word	0x40010c00
 8003f68:	f7fc fe1a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f7fc fe17 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003f72:	20c4      	movs	r0, #196	@ 0xc4
 8003f74:	f7fc fe14 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7fc fe11 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003f7e:	20ca      	movs	r0, #202	@ 0xca
 8003f80:	f7fc fe0e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f84:	2000      	movs	r0, #0
 8003f86:	f7fc fe0b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003f8a:	20d2      	movs	r0, #210	@ 0xd2
 8003f8c:	f7fc fe08 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f90:	2000      	movs	r0, #0
 8003f92:	f7fc fe05 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xD8);
 8003f96:	20d8      	movs	r0, #216	@ 0xd8
 8003f98:	f7fc fe02 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f7fc fdff 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003fa2:	20e0      	movs	r0, #224	@ 0xe0
 8003fa4:	f7fc fdfc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f7fc fdf9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003fae:	20f3      	movs	r0, #243	@ 0xf3
 8003fb0:	f7fc fdf6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f7fc fdf3 	bl	8000ba0 <lcd_wr_xdata>
 8003fba:	23e2      	movs	r3, #226	@ 0xe2
 8003fbc:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003fc0:	4be3      	ldr	r3, [pc, #908]	@ (8004350 <lcd_init+0x2538>)
 8003fc2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fc6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003fc8:	4be1      	ldr	r3, [pc, #900]	@ (8004350 <lcd_init+0x2538>)
 8003fca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003fd0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	4bdf      	ldr	r3, [pc, #892]	@ (8004354 <lcd_init+0x253c>)
 8003fd8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003fda:	4bdd      	ldr	r3, [pc, #884]	@ (8004350 <lcd_init+0x2538>)
 8003fdc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003fe0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003fe2:	4bdb      	ldr	r3, [pc, #876]	@ (8004350 <lcd_init+0x2538>)
 8003fe4:	2280      	movs	r2, #128	@ 0x80
 8003fe6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003fe8:	4bd9      	ldr	r3, [pc, #868]	@ (8004350 <lcd_init+0x2538>)
 8003fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fee:	611a      	str	r2, [r3, #16]
}
 8003ff0:	bf00      	nop

        lcd_wr_regno(0xE2);
        lcd_wr_xdata(0x05);
 8003ff2:	2005      	movs	r0, #5
 8003ff4:	f7fc fdd4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f7fc fdd1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8003ffe:	200b      	movs	r0, #11
 8004000:	f7fc fdce 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004004:	2000      	movs	r0, #0
 8004006:	f7fc fdcb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);
 800400a:	201b      	movs	r0, #27
 800400c:	f7fc fdc8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004010:	2000      	movs	r0, #0
 8004012:	f7fc fdc5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004016:	2034      	movs	r0, #52	@ 0x34
 8004018:	f7fc fdc2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800401c:	2000      	movs	r0, #0
 800401e:	f7fc fdbf 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004022:	2044      	movs	r0, #68	@ 0x44
 8004024:	f7fc fdbc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004028:	2000      	movs	r0, #0
 800402a:	f7fc fdb9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x4F);
 800402e:	204f      	movs	r0, #79	@ 0x4f
 8004030:	f7fc fdb6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004034:	2000      	movs	r0, #0
 8004036:	f7fc fdb3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 800403a:	2061      	movs	r0, #97	@ 0x61
 800403c:	f7fc fdb0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004040:	2000      	movs	r0, #0
 8004042:	f7fc fdad 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x79);
 8004046:	2079      	movs	r0, #121	@ 0x79
 8004048:	f7fc fdaa 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800404c:	2000      	movs	r0, #0
 800404e:	f7fc fda7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004052:	2088      	movs	r0, #136	@ 0x88
 8004054:	f7fc fda4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004058:	2000      	movs	r0, #0
 800405a:	f7fc fda1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 800405e:	2097      	movs	r0, #151	@ 0x97
 8004060:	f7fc fd9e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004064:	2000      	movs	r0, #0
 8004066:	f7fc fd9b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 800406a:	20a6      	movs	r0, #166	@ 0xa6
 800406c:	f7fc fd98 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004070:	2000      	movs	r0, #0
 8004072:	f7fc fd95 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8004076:	20b7      	movs	r0, #183	@ 0xb7
 8004078:	f7fc fd92 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800407c:	2000      	movs	r0, #0
 800407e:	f7fc fd8f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8004082:	20c2      	movs	r0, #194	@ 0xc2
 8004084:	f7fc fd8c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004088:	2000      	movs	r0, #0
 800408a:	f7fc fd89 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 800408e:	20c7      	movs	r0, #199	@ 0xc7
 8004090:	f7fc fd86 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004094:	2000      	movs	r0, #0
 8004096:	f7fc fd83 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 800409a:	20d1      	movs	r0, #209	@ 0xd1
 800409c:	f7fc fd80 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7fc fd7d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xD6);
 80040a6:	20d6      	movs	r0, #214	@ 0xd6
 80040a8:	f7fc fd7a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7fc fd77 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 80040b2:	20dd      	movs	r0, #221	@ 0xdd
 80040b4:	f7fc fd74 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040b8:	2000      	movs	r0, #0
 80040ba:	f7fc fd71 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80040be:	20f3      	movs	r0, #243	@ 0xf3
 80040c0:	f7fc fd6e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7fc fd6b 	bl	8000ba0 <lcd_wr_xdata>
 80040ca:	23e3      	movs	r3, #227	@ 0xe3
 80040cc:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80040d0:	4b9f      	ldr	r3, [pc, #636]	@ (8004350 <lcd_init+0x2538>)
 80040d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040d6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80040d8:	4b9d      	ldr	r3, [pc, #628]	@ (8004350 <lcd_init+0x2538>)
 80040da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040de:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80040e0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	4b9b      	ldr	r3, [pc, #620]	@ (8004354 <lcd_init+0x253c>)
 80040e8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80040ea:	4b99      	ldr	r3, [pc, #612]	@ (8004350 <lcd_init+0x2538>)
 80040ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80040f0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80040f2:	4b97      	ldr	r3, [pc, #604]	@ (8004350 <lcd_init+0x2538>)
 80040f4:	2280      	movs	r2, #128	@ 0x80
 80040f6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80040f8:	4b95      	ldr	r3, [pc, #596]	@ (8004350 <lcd_init+0x2538>)
 80040fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040fe:	611a      	str	r2, [r3, #16]
}
 8004100:	bf00      	nop
        lcd_wr_regno(0xE3);
        lcd_wr_xdata(0x05);
 8004102:	2005      	movs	r0, #5
 8004104:	f7fc fd4c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004108:	2000      	movs	r0, #0
 800410a:	f7fc fd49 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA);
 800410e:	200a      	movs	r0, #10
 8004110:	f7fc fd46 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004114:	2000      	movs	r0, #0
 8004116:	f7fc fd43 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 800411a:	201c      	movs	r0, #28
 800411c:	f7fc fd40 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004120:	2000      	movs	r0, #0
 8004122:	f7fc fd3d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8004126:	2033      	movs	r0, #51	@ 0x33
 8004128:	f7fc fd3a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800412c:	2000      	movs	r0, #0
 800412e:	f7fc fd37 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004132:	2044      	movs	r0, #68	@ 0x44
 8004134:	f7fc fd34 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004138:	2000      	movs	r0, #0
 800413a:	f7fc fd31 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 800413e:	2050      	movs	r0, #80	@ 0x50
 8004140:	f7fc fd2e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004144:	2000      	movs	r0, #0
 8004146:	f7fc fd2b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x62);
 800414a:	2062      	movs	r0, #98	@ 0x62
 800414c:	f7fc fd28 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004150:	2000      	movs	r0, #0
 8004152:	f7fc fd25 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x78);
 8004156:	2078      	movs	r0, #120	@ 0x78
 8004158:	f7fc fd22 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800415c:	2000      	movs	r0, #0
 800415e:	f7fc fd1f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004162:	2088      	movs	r0, #136	@ 0x88
 8004164:	f7fc fd1c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004168:	2000      	movs	r0, #0
 800416a:	f7fc fd19 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 800416e:	2097      	movs	r0, #151	@ 0x97
 8004170:	f7fc fd16 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004174:	2000      	movs	r0, #0
 8004176:	f7fc fd13 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 800417a:	20a6      	movs	r0, #166	@ 0xa6
 800417c:	f7fc fd10 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004180:	2000      	movs	r0, #0
 8004182:	f7fc fd0d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8004186:	20b7      	movs	r0, #183	@ 0xb7
 8004188:	f7fc fd0a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800418c:	2000      	movs	r0, #0
 800418e:	f7fc fd07 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8004192:	20c2      	movs	r0, #194	@ 0xc2
 8004194:	f7fc fd04 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004198:	2000      	movs	r0, #0
 800419a:	f7fc fd01 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 800419e:	20c7      	movs	r0, #199	@ 0xc7
 80041a0:	f7fc fcfe 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041a4:	2000      	movs	r0, #0
 80041a6:	f7fc fcfb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 80041aa:	20d1      	movs	r0, #209	@ 0xd1
 80041ac:	f7fc fcf8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041b0:	2000      	movs	r0, #0
 80041b2:	f7fc fcf5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xD5);
 80041b6:	20d5      	movs	r0, #213	@ 0xd5
 80041b8:	f7fc fcf2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041bc:	2000      	movs	r0, #0
 80041be:	f7fc fcef 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 80041c2:	20dd      	movs	r0, #221	@ 0xdd
 80041c4:	f7fc fcec 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041c8:	2000      	movs	r0, #0
 80041ca:	f7fc fce9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80041ce:	20f3      	movs	r0, #243	@ 0xf3
 80041d0:	f7fc fce6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7fc fce3 	bl	8000ba0 <lcd_wr_xdata>
 80041da:	23e4      	movs	r3, #228	@ 0xe4
 80041dc:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80041e0:	4b5b      	ldr	r3, [pc, #364]	@ (8004350 <lcd_init+0x2538>)
 80041e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80041e8:	4b59      	ldr	r3, [pc, #356]	@ (8004350 <lcd_init+0x2538>)
 80041ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80041f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	4b57      	ldr	r3, [pc, #348]	@ (8004354 <lcd_init+0x253c>)
 80041f8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80041fa:	4b55      	ldr	r3, [pc, #340]	@ (8004350 <lcd_init+0x2538>)
 80041fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004200:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004202:	4b53      	ldr	r3, [pc, #332]	@ (8004350 <lcd_init+0x2538>)
 8004204:	2280      	movs	r2, #128	@ 0x80
 8004206:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004208:	4b51      	ldr	r3, [pc, #324]	@ (8004350 <lcd_init+0x2538>)
 800420a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800420e:	611a      	str	r2, [r3, #16]
}
 8004210:	bf00      	nop

        lcd_wr_regno(0xE4);
        lcd_wr_xdata(0x01);
 8004212:	2001      	movs	r0, #1
 8004214:	f7fc fcc4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004218:	2000      	movs	r0, #0
 800421a:	f7fc fcc1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800421e:	2001      	movs	r0, #1
 8004220:	f7fc fcbe 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004224:	2000      	movs	r0, #0
 8004226:	f7fc fcbb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800422a:	2002      	movs	r0, #2
 800422c:	f7fc fcb8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004230:	2000      	movs	r0, #0
 8004232:	f7fc fcb5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8004236:	202a      	movs	r0, #42	@ 0x2a
 8004238:	f7fc fcb2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800423c:	2000      	movs	r0, #0
 800423e:	f7fc fcaf 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8004242:	203c      	movs	r0, #60	@ 0x3c
 8004244:	f7fc fcac 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004248:	2000      	movs	r0, #0
 800424a:	f7fc fca9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 800424e:	204b      	movs	r0, #75	@ 0x4b
 8004250:	f7fc fca6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004254:	2000      	movs	r0, #0
 8004256:	f7fc fca3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 800425a:	205d      	movs	r0, #93	@ 0x5d
 800425c:	f7fc fca0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004260:	2000      	movs	r0, #0
 8004262:	f7fc fc9d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8004266:	2074      	movs	r0, #116	@ 0x74
 8004268:	f7fc fc9a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800426c:	2000      	movs	r0, #0
 800426e:	f7fc fc97 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8004272:	2084      	movs	r0, #132	@ 0x84
 8004274:	f7fc fc94 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004278:	2000      	movs	r0, #0
 800427a:	f7fc fc91 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 800427e:	2093      	movs	r0, #147	@ 0x93
 8004280:	f7fc fc8e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004284:	2000      	movs	r0, #0
 8004286:	f7fc fc8b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 800428a:	20a2      	movs	r0, #162	@ 0xa2
 800428c:	f7fc fc88 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004290:	2000      	movs	r0, #0
 8004292:	f7fc fc85 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8004296:	20b3      	movs	r0, #179	@ 0xb3
 8004298:	f7fc fc82 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800429c:	2000      	movs	r0, #0
 800429e:	f7fc fc7f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 80042a2:	20be      	movs	r0, #190	@ 0xbe
 80042a4:	f7fc fc7c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042a8:	2000      	movs	r0, #0
 80042aa:	f7fc fc79 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 80042ae:	20c4      	movs	r0, #196	@ 0xc4
 80042b0:	f7fc fc76 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042b4:	2000      	movs	r0, #0
 80042b6:	f7fc fc73 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 80042ba:	20cd      	movs	r0, #205	@ 0xcd
 80042bc:	f7fc fc70 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042c0:	2000      	movs	r0, #0
 80042c2:	f7fc fc6d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 80042c6:	20d3      	movs	r0, #211	@ 0xd3
 80042c8:	f7fc fc6a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042cc:	2000      	movs	r0, #0
 80042ce:	f7fc fc67 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 80042d2:	20dd      	movs	r0, #221	@ 0xdd
 80042d4:	f7fc fc64 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042d8:	2000      	movs	r0, #0
 80042da:	f7fc fc61 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80042de:	20f3      	movs	r0, #243	@ 0xf3
 80042e0:	f7fc fc5e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042e4:	2000      	movs	r0, #0
 80042e6:	f7fc fc5b 	bl	8000ba0 <lcd_wr_xdata>
 80042ea:	23e5      	movs	r3, #229	@ 0xe5
 80042ec:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80042f0:	4b17      	ldr	r3, [pc, #92]	@ (8004350 <lcd_init+0x2538>)
 80042f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80042f8:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <lcd_init+0x2538>)
 80042fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004300:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004304:	b29a      	uxth	r2, r3
 8004306:	4b13      	ldr	r3, [pc, #76]	@ (8004354 <lcd_init+0x253c>)
 8004308:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800430a:	4b11      	ldr	r3, [pc, #68]	@ (8004350 <lcd_init+0x2538>)
 800430c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004310:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004312:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <lcd_init+0x2538>)
 8004314:	2280      	movs	r2, #128	@ 0x80
 8004316:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004318:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <lcd_init+0x2538>)
 800431a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800431e:	611a      	str	r2, [r3, #16]
}
 8004320:	bf00      	nop
        lcd_wr_regno(0xE5);
        lcd_wr_xdata(0x00);
 8004322:	2000      	movs	r0, #0
 8004324:	f7fc fc3c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004328:	2000      	movs	r0, #0
 800432a:	f7fc fc39 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800432e:	2000      	movs	r0, #0
 8004330:	f7fc fc36 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004334:	2000      	movs	r0, #0
 8004336:	f7fc fc33 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800433a:	2002      	movs	r0, #2
 800433c:	f7fc fc30 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004340:	2000      	movs	r0, #0
 8004342:	f7fc fc2d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004346:	2029      	movs	r0, #41	@ 0x29
 8004348:	f7fc fc2a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800434c:	2000      	movs	r0, #0
 800434e:	e003      	b.n	8004358 <lcd_init+0x2540>
 8004350:	40011000 	.word	0x40011000
 8004354:	40010c00 	.word	0x40010c00
 8004358:	f7fc fc22 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 800435c:	203c      	movs	r0, #60	@ 0x3c
 800435e:	f7fc fc1f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004362:	2000      	movs	r0, #0
 8004364:	f7fc fc1c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 8004368:	204b      	movs	r0, #75	@ 0x4b
 800436a:	f7fc fc19 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800436e:	2000      	movs	r0, #0
 8004370:	f7fc fc16 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8004374:	205d      	movs	r0, #93	@ 0x5d
 8004376:	f7fc fc13 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800437a:	2000      	movs	r0, #0
 800437c:	f7fc fc10 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8004380:	2074      	movs	r0, #116	@ 0x74
 8004382:	f7fc fc0d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004386:	2000      	movs	r0, #0
 8004388:	f7fc fc0a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 800438c:	2084      	movs	r0, #132	@ 0x84
 800438e:	f7fc fc07 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004392:	2000      	movs	r0, #0
 8004394:	f7fc fc04 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 8004398:	2093      	movs	r0, #147	@ 0x93
 800439a:	f7fc fc01 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800439e:	2000      	movs	r0, #0
 80043a0:	f7fc fbfe 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 80043a4:	20a2      	movs	r0, #162	@ 0xa2
 80043a6:	f7fc fbfb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043aa:	2000      	movs	r0, #0
 80043ac:	f7fc fbf8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 80043b0:	20b3      	movs	r0, #179	@ 0xb3
 80043b2:	f7fc fbf5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043b6:	2000      	movs	r0, #0
 80043b8:	f7fc fbf2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 80043bc:	20be      	movs	r0, #190	@ 0xbe
 80043be:	f7fc fbef 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043c2:	2000      	movs	r0, #0
 80043c4:	f7fc fbec 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 80043c8:	20c4      	movs	r0, #196	@ 0xc4
 80043ca:	f7fc fbe9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043ce:	2000      	movs	r0, #0
 80043d0:	f7fc fbe6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 80043d4:	20cd      	movs	r0, #205	@ 0xcd
 80043d6:	f7fc fbe3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043da:	2000      	movs	r0, #0
 80043dc:	f7fc fbe0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 80043e0:	20d3      	movs	r0, #211	@ 0xd3
 80043e2:	f7fc fbdd 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043e6:	2000      	movs	r0, #0
 80043e8:	f7fc fbda 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 80043ec:	20dc      	movs	r0, #220	@ 0xdc
 80043ee:	f7fc fbd7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043f2:	2000      	movs	r0, #0
 80043f4:	f7fc fbd4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80043f8:	20f3      	movs	r0, #243	@ 0xf3
 80043fa:	f7fc fbd1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043fe:	2000      	movs	r0, #0
 8004400:	f7fc fbce 	bl	8000ba0 <lcd_wr_xdata>
 8004404:	23e6      	movs	r3, #230	@ 0xe6
 8004406:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800440a:	4bde      	ldr	r3, [pc, #888]	@ (8004784 <lcd_init+0x296c>)
 800440c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004410:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004412:	4bdc      	ldr	r3, [pc, #880]	@ (8004784 <lcd_init+0x296c>)
 8004414:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004418:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800441a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800441e:	b29a      	uxth	r2, r3
 8004420:	4bd9      	ldr	r3, [pc, #868]	@ (8004788 <lcd_init+0x2970>)
 8004422:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004424:	4bd7      	ldr	r3, [pc, #860]	@ (8004784 <lcd_init+0x296c>)
 8004426:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800442a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800442c:	4bd5      	ldr	r3, [pc, #852]	@ (8004784 <lcd_init+0x296c>)
 800442e:	2280      	movs	r2, #128	@ 0x80
 8004430:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004432:	4bd4      	ldr	r3, [pc, #848]	@ (8004784 <lcd_init+0x296c>)
 8004434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004438:	611a      	str	r2, [r3, #16]
}
 800443a:	bf00      	nop

        lcd_wr_regno(0xE6);
        lcd_wr_xdata(0x11);
 800443c:	2011      	movs	r0, #17
 800443e:	f7fc fbaf 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004442:	2000      	movs	r0, #0
 8004444:	f7fc fbac 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004448:	2034      	movs	r0, #52	@ 0x34
 800444a:	f7fc fba9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800444e:	2000      	movs	r0, #0
 8004450:	f7fc fba6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8004454:	2056      	movs	r0, #86	@ 0x56
 8004456:	f7fc fba3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800445a:	2000      	movs	r0, #0
 800445c:	f7fc fba0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8004460:	2076      	movs	r0, #118	@ 0x76
 8004462:	f7fc fb9d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004466:	2000      	movs	r0, #0
 8004468:	f7fc fb9a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800446c:	2077      	movs	r0, #119	@ 0x77
 800446e:	f7fc fb97 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004472:	2000      	movs	r0, #0
 8004474:	f7fc fb94 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004478:	2066      	movs	r0, #102	@ 0x66
 800447a:	f7fc fb91 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800447e:	2000      	movs	r0, #0
 8004480:	f7fc fb8e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004484:	2088      	movs	r0, #136	@ 0x88
 8004486:	f7fc fb8b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800448a:	2000      	movs	r0, #0
 800448c:	f7fc fb88 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004490:	2099      	movs	r0, #153	@ 0x99
 8004492:	f7fc fb85 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004496:	2000      	movs	r0, #0
 8004498:	f7fc fb82 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 800449c:	20bb      	movs	r0, #187	@ 0xbb
 800449e:	f7fc fb7f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044a2:	2000      	movs	r0, #0
 80044a4:	f7fc fb7c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80044a8:	2099      	movs	r0, #153	@ 0x99
 80044aa:	f7fc fb79 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ae:	2000      	movs	r0, #0
 80044b0:	f7fc fb76 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80044b4:	2066      	movs	r0, #102	@ 0x66
 80044b6:	f7fc fb73 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ba:	2000      	movs	r0, #0
 80044bc:	f7fc fb70 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80044c0:	2055      	movs	r0, #85	@ 0x55
 80044c2:	f7fc fb6d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044c6:	2000      	movs	r0, #0
 80044c8:	f7fc fb6a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80044cc:	2055      	movs	r0, #85	@ 0x55
 80044ce:	f7fc fb67 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044d2:	2000      	movs	r0, #0
 80044d4:	f7fc fb64 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80044d8:	2045      	movs	r0, #69	@ 0x45
 80044da:	f7fc fb61 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044de:	2000      	movs	r0, #0
 80044e0:	f7fc fb5e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 80044e4:	2043      	movs	r0, #67	@ 0x43
 80044e6:	f7fc fb5b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ea:	2000      	movs	r0, #0
 80044ec:	f7fc fb58 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80044f0:	2044      	movs	r0, #68	@ 0x44
 80044f2:	f7fc fb55 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044f6:	2000      	movs	r0, #0
 80044f8:	f7fc fb52 	bl	8000ba0 <lcd_wr_xdata>
 80044fc:	23e7      	movs	r3, #231	@ 0xe7
 80044fe:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004502:	4ba0      	ldr	r3, [pc, #640]	@ (8004784 <lcd_init+0x296c>)
 8004504:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004508:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800450a:	4b9e      	ldr	r3, [pc, #632]	@ (8004784 <lcd_init+0x296c>)
 800450c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004510:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004512:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8004516:	b29a      	uxth	r2, r3
 8004518:	4b9b      	ldr	r3, [pc, #620]	@ (8004788 <lcd_init+0x2970>)
 800451a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800451c:	4b99      	ldr	r3, [pc, #612]	@ (8004784 <lcd_init+0x296c>)
 800451e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004522:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004524:	4b97      	ldr	r3, [pc, #604]	@ (8004784 <lcd_init+0x296c>)
 8004526:	2280      	movs	r2, #128	@ 0x80
 8004528:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800452a:	4b96      	ldr	r3, [pc, #600]	@ (8004784 <lcd_init+0x296c>)
 800452c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004530:	611a      	str	r2, [r3, #16]
}
 8004532:	bf00      	nop

        lcd_wr_regno(0xE7);
        lcd_wr_xdata(0x32);
 8004534:	2032      	movs	r0, #50	@ 0x32
 8004536:	f7fc fb33 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800453a:	2000      	movs	r0, #0
 800453c:	f7fc fb30 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004540:	2055      	movs	r0, #85	@ 0x55
 8004542:	f7fc fb2d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004546:	2000      	movs	r0, #0
 8004548:	f7fc fb2a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 800454c:	2076      	movs	r0, #118	@ 0x76
 800454e:	f7fc fb27 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004552:	2000      	movs	r0, #0
 8004554:	f7fc fb24 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004558:	2066      	movs	r0, #102	@ 0x66
 800455a:	f7fc fb21 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800455e:	2000      	movs	r0, #0
 8004560:	f7fc fb1e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8004564:	2067      	movs	r0, #103	@ 0x67
 8004566:	f7fc fb1b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800456a:	2000      	movs	r0, #0
 800456c:	f7fc fb18 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8004570:	2067      	movs	r0, #103	@ 0x67
 8004572:	f7fc fb15 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004576:	2000      	movs	r0, #0
 8004578:	f7fc fb12 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 800457c:	2087      	movs	r0, #135	@ 0x87
 800457e:	f7fc fb0f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004582:	2000      	movs	r0, #0
 8004584:	f7fc fb0c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004588:	2099      	movs	r0, #153	@ 0x99
 800458a:	f7fc fb09 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800458e:	2000      	movs	r0, #0
 8004590:	f7fc fb06 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 8004594:	20bb      	movs	r0, #187	@ 0xbb
 8004596:	f7fc fb03 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800459a:	2000      	movs	r0, #0
 800459c:	f7fc fb00 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80045a0:	2099      	movs	r0, #153	@ 0x99
 80045a2:	f7fc fafd 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045a6:	2000      	movs	r0, #0
 80045a8:	f7fc fafa 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 80045ac:	2077      	movs	r0, #119	@ 0x77
 80045ae:	f7fc faf7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045b2:	2000      	movs	r0, #0
 80045b4:	f7fc faf4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80045b8:	2044      	movs	r0, #68	@ 0x44
 80045ba:	f7fc faf1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045be:	2000      	movs	r0, #0
 80045c0:	f7fc faee 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 80045c4:	2056      	movs	r0, #86	@ 0x56
 80045c6:	f7fc faeb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045ca:	2000      	movs	r0, #0
 80045cc:	f7fc fae8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80045d0:	2023      	movs	r0, #35	@ 0x23
 80045d2:	f7fc fae5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045d6:	2000      	movs	r0, #0
 80045d8:	f7fc fae2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 80045dc:	2033      	movs	r0, #51	@ 0x33
 80045de:	f7fc fadf 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045e2:	2000      	movs	r0, #0
 80045e4:	f7fc fadc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80045e8:	2045      	movs	r0, #69	@ 0x45
 80045ea:	f7fc fad9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045ee:	2000      	movs	r0, #0
 80045f0:	f7fc fad6 	bl	8000ba0 <lcd_wr_xdata>
 80045f4:	23e8      	movs	r3, #232	@ 0xe8
 80045f6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80045fa:	4b62      	ldr	r3, [pc, #392]	@ (8004784 <lcd_init+0x296c>)
 80045fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004600:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004602:	4b60      	ldr	r3, [pc, #384]	@ (8004784 <lcd_init+0x296c>)
 8004604:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004608:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800460a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800460e:	b29a      	uxth	r2, r3
 8004610:	4b5d      	ldr	r3, [pc, #372]	@ (8004788 <lcd_init+0x2970>)
 8004612:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004614:	4b5b      	ldr	r3, [pc, #364]	@ (8004784 <lcd_init+0x296c>)
 8004616:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800461a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800461c:	4b59      	ldr	r3, [pc, #356]	@ (8004784 <lcd_init+0x296c>)
 800461e:	2280      	movs	r2, #128	@ 0x80
 8004620:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004622:	4b58      	ldr	r3, [pc, #352]	@ (8004784 <lcd_init+0x296c>)
 8004624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004628:	611a      	str	r2, [r3, #16]
}
 800462a:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x00);
 800462c:	2000      	movs	r0, #0
 800462e:	f7fc fab7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004632:	2000      	movs	r0, #0
 8004634:	f7fc fab4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004638:	2099      	movs	r0, #153	@ 0x99
 800463a:	f7fc fab1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800463e:	2000      	movs	r0, #0
 8004640:	f7fc faae 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 8004644:	2087      	movs	r0, #135	@ 0x87
 8004646:	f7fc faab 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800464a:	2000      	movs	r0, #0
 800464c:	f7fc faa8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004650:	2088      	movs	r0, #136	@ 0x88
 8004652:	f7fc faa5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004656:	2000      	movs	r0, #0
 8004658:	f7fc faa2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800465c:	2077      	movs	r0, #119	@ 0x77
 800465e:	f7fc fa9f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004662:	2000      	movs	r0, #0
 8004664:	f7fc fa9c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004668:	2066      	movs	r0, #102	@ 0x66
 800466a:	f7fc fa99 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800466e:	2000      	movs	r0, #0
 8004670:	f7fc fa96 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004674:	2088      	movs	r0, #136	@ 0x88
 8004676:	f7fc fa93 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800467a:	2000      	movs	r0, #0
 800467c:	f7fc fa90 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xAA);
 8004680:	20aa      	movs	r0, #170	@ 0xaa
 8004682:	f7fc fa8d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004686:	2000      	movs	r0, #0
 8004688:	f7fc fa8a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 800468c:	20bb      	movs	r0, #187	@ 0xbb
 800468e:	f7fc fa87 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004692:	2000      	movs	r0, #0
 8004694:	f7fc fa84 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004698:	2099      	movs	r0, #153	@ 0x99
 800469a:	f7fc fa81 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800469e:	2000      	movs	r0, #0
 80046a0:	f7fc fa7e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80046a4:	2066      	movs	r0, #102	@ 0x66
 80046a6:	f7fc fa7b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046aa:	2000      	movs	r0, #0
 80046ac:	f7fc fa78 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80046b0:	2055      	movs	r0, #85	@ 0x55
 80046b2:	f7fc fa75 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046b6:	2000      	movs	r0, #0
 80046b8:	f7fc fa72 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80046bc:	2055      	movs	r0, #85	@ 0x55
 80046be:	f7fc fa6f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046c2:	2000      	movs	r0, #0
 80046c4:	f7fc fa6c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80046c8:	2044      	movs	r0, #68	@ 0x44
 80046ca:	f7fc fa69 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046ce:	2000      	movs	r0, #0
 80046d0:	f7fc fa66 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 80046d4:	2044      	movs	r0, #68	@ 0x44
 80046d6:	f7fc fa63 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046da:	2000      	movs	r0, #0
 80046dc:	f7fc fa60 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80046e0:	2055      	movs	r0, #85	@ 0x55
 80046e2:	f7fc fa5d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046e6:	2000      	movs	r0, #0
 80046e8:	f7fc fa5a 	bl	8000ba0 <lcd_wr_xdata>
 80046ec:	23e9      	movs	r3, #233	@ 0xe9
 80046ee:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80046f2:	4b24      	ldr	r3, [pc, #144]	@ (8004784 <lcd_init+0x296c>)
 80046f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046f8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046fa:	4b22      	ldr	r3, [pc, #136]	@ (8004784 <lcd_init+0x296c>)
 80046fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004700:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004702:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004706:	b29a      	uxth	r2, r3
 8004708:	4b1f      	ldr	r3, [pc, #124]	@ (8004788 <lcd_init+0x2970>)
 800470a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800470c:	4b1d      	ldr	r3, [pc, #116]	@ (8004784 <lcd_init+0x296c>)
 800470e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004712:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004714:	4b1b      	ldr	r3, [pc, #108]	@ (8004784 <lcd_init+0x296c>)
 8004716:	2280      	movs	r2, #128	@ 0x80
 8004718:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800471a:	4b1a      	ldr	r3, [pc, #104]	@ (8004784 <lcd_init+0x296c>)
 800471c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004720:	611a      	str	r2, [r3, #16]
}
 8004722:	bf00      	nop

        lcd_wr_regno(0xE9);
        lcd_wr_xdata(0xAA);
 8004724:	20aa      	movs	r0, #170	@ 0xaa
 8004726:	f7fc fa3b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800472a:	2000      	movs	r0, #0
 800472c:	f7fc fa38 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004730:	2000      	movs	r0, #0
 8004732:	f7fc fa35 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004736:	2000      	movs	r0, #0
 8004738:	f7fc fa32 	bl	8000ba0 <lcd_wr_xdata>
 800473c:	2300      	movs	r3, #0
 800473e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004742:	4b10      	ldr	r3, [pc, #64]	@ (8004784 <lcd_init+0x296c>)
 8004744:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004748:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800474a:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <lcd_init+0x296c>)
 800474c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004750:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004752:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004756:	b29a      	uxth	r2, r3
 8004758:	4b0b      	ldr	r3, [pc, #44]	@ (8004788 <lcd_init+0x2970>)
 800475a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <lcd_init+0x296c>)
 800475e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004762:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004764:	4b07      	ldr	r3, [pc, #28]	@ (8004784 <lcd_init+0x296c>)
 8004766:	2280      	movs	r2, #128	@ 0x80
 8004768:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800476a:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <lcd_init+0x296c>)
 800476c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004770:	611a      	str	r2, [r3, #16]
}
 8004772:	bf00      	nop

        lcd_wr_regno(0x00);
        lcd_wr_xdata(0xAA);
 8004774:	20aa      	movs	r0, #170	@ 0xaa
 8004776:	f7fc fa13 	bl	8000ba0 <lcd_wr_xdata>
 800477a:	23cf      	movs	r3, #207	@ 0xcf
 800477c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8004780:	e004      	b.n	800478c <lcd_init+0x2974>
 8004782:	bf00      	nop
 8004784:	40011000 	.word	0x40011000
 8004788:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800478c:	4bbc      	ldr	r3, [pc, #752]	@ (8004a80 <lcd_init+0x2c68>)
 800478e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004792:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004794:	4bba      	ldr	r3, [pc, #744]	@ (8004a80 <lcd_init+0x2c68>)
 8004796:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800479a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800479c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	4bb8      	ldr	r3, [pc, #736]	@ (8004a84 <lcd_init+0x2c6c>)
 80047a4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80047a6:	4bb6      	ldr	r3, [pc, #728]	@ (8004a80 <lcd_init+0x2c68>)
 80047a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80047ac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80047ae:	4bb4      	ldr	r3, [pc, #720]	@ (8004a80 <lcd_init+0x2c68>)
 80047b0:	2280      	movs	r2, #128	@ 0x80
 80047b2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80047b4:	4bb2      	ldr	r3, [pc, #712]	@ (8004a80 <lcd_init+0x2c68>)
 80047b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ba:	611a      	str	r2, [r3, #16]
}
 80047bc:	bf00      	nop

        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 80047be:	2000      	movs	r0, #0
 80047c0:	f7fc f9ee 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047c4:	2000      	movs	r0, #0
 80047c6:	f7fc f9eb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047ca:	2000      	movs	r0, #0
 80047cc:	f7fc f9e8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047d0:	2000      	movs	r0, #0
 80047d2:	f7fc f9e5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047d6:	2000      	movs	r0, #0
 80047d8:	f7fc f9e2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047dc:	2000      	movs	r0, #0
 80047de:	f7fc f9df 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047e2:	2000      	movs	r0, #0
 80047e4:	f7fc f9dc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047e8:	2000      	movs	r0, #0
 80047ea:	f7fc f9d9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047ee:	2000      	movs	r0, #0
 80047f0:	f7fc f9d6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047f4:	2000      	movs	r0, #0
 80047f6:	f7fc f9d3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047fa:	2000      	movs	r0, #0
 80047fc:	f7fc f9d0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004800:	2000      	movs	r0, #0
 8004802:	f7fc f9cd 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004806:	2000      	movs	r0, #0
 8004808:	f7fc f9ca 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800480c:	2000      	movs	r0, #0
 800480e:	f7fc f9c7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004812:	2000      	movs	r0, #0
 8004814:	f7fc f9c4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004818:	2000      	movs	r0, #0
 800481a:	f7fc f9c1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800481e:	2000      	movs	r0, #0
 8004820:	f7fc f9be 	bl	8000ba0 <lcd_wr_xdata>
 8004824:	23f0      	movs	r3, #240	@ 0xf0
 8004826:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800482a:	4b95      	ldr	r3, [pc, #596]	@ (8004a80 <lcd_init+0x2c68>)
 800482c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004830:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004832:	4b93      	ldr	r3, [pc, #588]	@ (8004a80 <lcd_init+0x2c68>)
 8004834:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004838:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800483a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800483e:	b29a      	uxth	r2, r3
 8004840:	4b90      	ldr	r3, [pc, #576]	@ (8004a84 <lcd_init+0x2c6c>)
 8004842:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004844:	4b8e      	ldr	r3, [pc, #568]	@ (8004a80 <lcd_init+0x2c68>)
 8004846:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800484a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800484c:	4b8c      	ldr	r3, [pc, #560]	@ (8004a80 <lcd_init+0x2c68>)
 800484e:	2280      	movs	r2, #128	@ 0x80
 8004850:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004852:	4b8b      	ldr	r3, [pc, #556]	@ (8004a80 <lcd_init+0x2c68>)
 8004854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004858:	611a      	str	r2, [r3, #16]
}
 800485a:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x00);
 800485c:	2000      	movs	r0, #0
 800485e:	f7fc f99f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8004862:	2050      	movs	r0, #80	@ 0x50
 8004864:	f7fc f99c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004868:	2000      	movs	r0, #0
 800486a:	f7fc f999 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800486e:	2000      	movs	r0, #0
 8004870:	f7fc f996 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004874:	2000      	movs	r0, #0
 8004876:	f7fc f993 	bl	8000ba0 <lcd_wr_xdata>
 800487a:	23f3      	movs	r3, #243	@ 0xf3
 800487c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004880:	4b7f      	ldr	r3, [pc, #508]	@ (8004a80 <lcd_init+0x2c68>)
 8004882:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004886:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004888:	4b7d      	ldr	r3, [pc, #500]	@ (8004a80 <lcd_init+0x2c68>)
 800488a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800488e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004890:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8004894:	b29a      	uxth	r2, r3
 8004896:	4b7b      	ldr	r3, [pc, #492]	@ (8004a84 <lcd_init+0x2c6c>)
 8004898:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800489a:	4b79      	ldr	r3, [pc, #484]	@ (8004a80 <lcd_init+0x2c68>)
 800489c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048a0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80048a2:	4b77      	ldr	r3, [pc, #476]	@ (8004a80 <lcd_init+0x2c68>)
 80048a4:	2280      	movs	r2, #128	@ 0x80
 80048a6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80048a8:	4b75      	ldr	r3, [pc, #468]	@ (8004a80 <lcd_init+0x2c68>)
 80048aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048ae:	611a      	str	r2, [r3, #16]
}
 80048b0:	bf00      	nop

        lcd_wr_regno(0xF3);
        lcd_wr_xdata(0x00);
 80048b2:	2000      	movs	r0, #0
 80048b4:	f7fc f974 	bl	8000ba0 <lcd_wr_xdata>
 80048b8:	23f9      	movs	r3, #249	@ 0xf9
 80048ba:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80048be:	4b70      	ldr	r3, [pc, #448]	@ (8004a80 <lcd_init+0x2c68>)
 80048c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048c4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80048c6:	4b6e      	ldr	r3, [pc, #440]	@ (8004a80 <lcd_init+0x2c68>)
 80048c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048cc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80048ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	4b6b      	ldr	r3, [pc, #428]	@ (8004a84 <lcd_init+0x2c6c>)
 80048d6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80048d8:	4b69      	ldr	r3, [pc, #420]	@ (8004a80 <lcd_init+0x2c68>)
 80048da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048de:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80048e0:	4b67      	ldr	r3, [pc, #412]	@ (8004a80 <lcd_init+0x2c68>)
 80048e2:	2280      	movs	r2, #128	@ 0x80
 80048e4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80048e6:	4b66      	ldr	r3, [pc, #408]	@ (8004a80 <lcd_init+0x2c68>)
 80048e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048ec:	611a      	str	r2, [r3, #16]
}
 80048ee:	bf00      	nop

        lcd_wr_regno(0xF9);
        lcd_wr_xdata(0x06);
 80048f0:	2006      	movs	r0, #6
 80048f2:	f7fc f955 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80048f6:	2010      	movs	r0, #16
 80048f8:	f7fc f952 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80048fc:	2029      	movs	r0, #41	@ 0x29
 80048fe:	f7fc f94f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004902:	2000      	movs	r0, #0
 8004904:	f7fc f94c 	bl	8000ba0 <lcd_wr_xdata>
 8004908:	233a      	movs	r3, #58	@ 0x3a
 800490a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800490e:	4b5c      	ldr	r3, [pc, #368]	@ (8004a80 <lcd_init+0x2c68>)
 8004910:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004914:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004916:	4b5a      	ldr	r3, [pc, #360]	@ (8004a80 <lcd_init+0x2c68>)
 8004918:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800491c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800491e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004922:	b29a      	uxth	r2, r3
 8004924:	4b57      	ldr	r3, [pc, #348]	@ (8004a84 <lcd_init+0x2c6c>)
 8004926:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004928:	4b55      	ldr	r3, [pc, #340]	@ (8004a80 <lcd_init+0x2c68>)
 800492a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800492e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004930:	4b53      	ldr	r3, [pc, #332]	@ (8004a80 <lcd_init+0x2c68>)
 8004932:	2280      	movs	r2, #128	@ 0x80
 8004934:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004936:	4b52      	ldr	r3, [pc, #328]	@ (8004a80 <lcd_init+0x2c68>)
 8004938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800493c:	611a      	str	r2, [r3, #16]
}
 800493e:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);  /* 66 */
 8004940:	2055      	movs	r0, #85	@ 0x55
 8004942:	f7fc f92d 	bl	8000ba0 <lcd_wr_xdata>
 8004946:	2311      	movs	r3, #17
 8004948:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800494c:	4b4c      	ldr	r3, [pc, #304]	@ (8004a80 <lcd_init+0x2c68>)
 800494e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004952:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004954:	4b4a      	ldr	r3, [pc, #296]	@ (8004a80 <lcd_init+0x2c68>)
 8004956:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800495a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800495c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004960:	b29a      	uxth	r2, r3
 8004962:	4b48      	ldr	r3, [pc, #288]	@ (8004a84 <lcd_init+0x2c6c>)
 8004964:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004966:	4b46      	ldr	r3, [pc, #280]	@ (8004a80 <lcd_init+0x2c68>)
 8004968:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800496c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800496e:	4b44      	ldr	r3, [pc, #272]	@ (8004a80 <lcd_init+0x2c68>)
 8004970:	2280      	movs	r2, #128	@ 0x80
 8004972:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004974:	4b42      	ldr	r3, [pc, #264]	@ (8004a80 <lcd_init+0x2c68>)
 8004976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800497a:	611a      	str	r2, [r3, #16]
}
 800497c:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(100);
 800497e:	2064      	movs	r0, #100	@ 0x64
 8004980:	f002 ff4e 	bl	8007820 <HAL_Delay>
 8004984:	2329      	movs	r3, #41	@ 0x29
 8004986:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800498a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a80 <lcd_init+0x2c68>)
 800498c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004990:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004992:	4b3b      	ldr	r3, [pc, #236]	@ (8004a80 <lcd_init+0x2c68>)
 8004994:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004998:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800499a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800499e:	b29a      	uxth	r2, r3
 80049a0:	4b38      	ldr	r3, [pc, #224]	@ (8004a84 <lcd_init+0x2c6c>)
 80049a2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80049a4:	4b36      	ldr	r3, [pc, #216]	@ (8004a80 <lcd_init+0x2c68>)
 80049a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80049aa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80049ac:	4b34      	ldr	r3, [pc, #208]	@ (8004a80 <lcd_init+0x2c68>)
 80049ae:	2280      	movs	r2, #128	@ 0x80
 80049b0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80049b2:	4b33      	ldr	r3, [pc, #204]	@ (8004a80 <lcd_init+0x2c68>)
 80049b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049b8:	611a      	str	r2, [r3, #16]
}
 80049ba:	bf00      	nop
 80049bc:	2335      	movs	r3, #53	@ 0x35
 80049be:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80049c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004a80 <lcd_init+0x2c68>)
 80049c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049c8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80049ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004a80 <lcd_init+0x2c68>)
 80049cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049d0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80049d2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a84 <lcd_init+0x2c6c>)
 80049da:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80049dc:	4b28      	ldr	r3, [pc, #160]	@ (8004a80 <lcd_init+0x2c68>)
 80049de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80049e2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80049e4:	4b26      	ldr	r3, [pc, #152]	@ (8004a80 <lcd_init+0x2c68>)
 80049e6:	2280      	movs	r2, #128	@ 0x80
 80049e8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80049ea:	4b25      	ldr	r3, [pc, #148]	@ (8004a80 <lcd_init+0x2c68>)
 80049ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049f0:	611a      	str	r2, [r3, #16]
}
 80049f2:	bf00      	nop
        lcd_wr_regno(0x29);
        lcd_wr_regno(0x35);
        lcd_wr_xdata(0x00);
 80049f4:	2000      	movs	r0, #0
 80049f6:	f7fc f8d3 	bl	8000ba0 <lcd_wr_xdata>
 80049fa:	2351      	movs	r3, #81	@ 0x51
 80049fc:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a00:	4b1f      	ldr	r3, [pc, #124]	@ (8004a80 <lcd_init+0x2c68>)
 8004a02:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a06:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a08:	4b1d      	ldr	r3, [pc, #116]	@ (8004a80 <lcd_init+0x2c68>)
 8004a0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a0e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a10:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	4b1b      	ldr	r3, [pc, #108]	@ (8004a84 <lcd_init+0x2c6c>)
 8004a18:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a1a:	4b19      	ldr	r3, [pc, #100]	@ (8004a80 <lcd_init+0x2c68>)
 8004a1c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a20:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a22:	4b17      	ldr	r3, [pc, #92]	@ (8004a80 <lcd_init+0x2c68>)
 8004a24:	2280      	movs	r2, #128	@ 0x80
 8004a26:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a28:	4b15      	ldr	r3, [pc, #84]	@ (8004a80 <lcd_init+0x2c68>)
 8004a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a2e:	611a      	str	r2, [r3, #16]
}
 8004a30:	bf00      	nop

        lcd_wr_regno(0x51);
        lcd_wr_xdata(0xFF);
 8004a32:	20ff      	movs	r0, #255	@ 0xff
 8004a34:	f7fc f8b4 	bl	8000ba0 <lcd_wr_xdata>
 8004a38:	2353      	movs	r3, #83	@ 0x53
 8004a3a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a3e:	4b10      	ldr	r3, [pc, #64]	@ (8004a80 <lcd_init+0x2c68>)
 8004a40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a44:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a46:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <lcd_init+0x2c68>)
 8004a48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a4c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a4e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	4b0b      	ldr	r3, [pc, #44]	@ (8004a84 <lcd_init+0x2c6c>)
 8004a56:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a58:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <lcd_init+0x2c68>)
 8004a5a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a5e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a60:	4b07      	ldr	r3, [pc, #28]	@ (8004a80 <lcd_init+0x2c68>)
 8004a62:	2280      	movs	r2, #128	@ 0x80
 8004a64:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a66:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <lcd_init+0x2c68>)
 8004a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a6c:	611a      	str	r2, [r3, #16]
}
 8004a6e:	bf00      	nop
        lcd_wr_regno(0x53);
        lcd_wr_xdata(0x2C);
 8004a70:	202c      	movs	r0, #44	@ 0x2c
 8004a72:	f7fc f895 	bl	8000ba0 <lcd_wr_xdata>
 8004a76:	2355      	movs	r3, #85	@ 0x55
 8004a78:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8004a7c:	e004      	b.n	8004a88 <lcd_init+0x2c70>
 8004a7e:	bf00      	nop
 8004a80:	40011000 	.word	0x40011000
 8004a84:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a88:	4b1c      	ldr	r3, [pc, #112]	@ (8004afc <lcd_init+0x2ce4>)
 8004a8a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a8e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a90:	4b1a      	ldr	r3, [pc, #104]	@ (8004afc <lcd_init+0x2ce4>)
 8004a92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a96:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a98:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	4b18      	ldr	r3, [pc, #96]	@ (8004b00 <lcd_init+0x2ce8>)
 8004aa0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004aa2:	4b16      	ldr	r3, [pc, #88]	@ (8004afc <lcd_init+0x2ce4>)
 8004aa4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004aa8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004aaa:	4b14      	ldr	r3, [pc, #80]	@ (8004afc <lcd_init+0x2ce4>)
 8004aac:	2280      	movs	r2, #128	@ 0x80
 8004aae:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004ab0:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <lcd_init+0x2ce4>)
 8004ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ab6:	611a      	str	r2, [r3, #16]
}
 8004ab8:	bf00      	nop
        lcd_wr_regno(0x55);
        lcd_wr_xdata(0x82);
 8004aba:	2082      	movs	r0, #130	@ 0x82
 8004abc:	f7fc f870 	bl	8000ba0 <lcd_wr_xdata>
 8004ac0:	232c      	movs	r3, #44	@ 0x2c
 8004ac2:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8004afc <lcd_init+0x2ce4>)
 8004ac8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004acc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004ace:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <lcd_init+0x2ce4>)
 8004ad0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ad4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ad6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	4b08      	ldr	r3, [pc, #32]	@ (8004b00 <lcd_init+0x2ce8>)
 8004ade:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ae0:	4b06      	ldr	r3, [pc, #24]	@ (8004afc <lcd_init+0x2ce4>)
 8004ae2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ae6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ae8:	4b04      	ldr	r3, [pc, #16]	@ (8004afc <lcd_init+0x2ce4>)
 8004aea:	2280      	movs	r2, #128	@ 0x80
 8004aec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004aee:	4b03      	ldr	r3, [pc, #12]	@ (8004afc <lcd_init+0x2ce4>)
 8004af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004af4:	611a      	str	r2, [r3, #16]
}
 8004af6:	f002 b8d8 	b.w	8006caa <lcd_init+0x4e92>
 8004afa:	bf00      	nop
 8004afc:	40011000 	.word	0x40011000
 8004b00:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2c);
    }
    else if (lcddev.id == 0x7796)
 8004b04:	4bb4      	ldr	r3, [pc, #720]	@ (8004dd8 <lcd_init+0x2fc0>)
 8004b06:	889b      	ldrh	r3, [r3, #4]
 8004b08:	f247 7296 	movw	r2, #30614	@ 0x7796
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	f040 82e3 	bne.w	80050d8 <lcd_init+0x32c0>
 8004b12:	2311      	movs	r3, #17
 8004b14:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b18:	4bb0      	ldr	r3, [pc, #704]	@ (8004ddc <lcd_init+0x2fc4>)
 8004b1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b1e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b20:	4bae      	ldr	r3, [pc, #696]	@ (8004ddc <lcd_init+0x2fc4>)
 8004b22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b26:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b28:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	4bac      	ldr	r3, [pc, #688]	@ (8004de0 <lcd_init+0x2fc8>)
 8004b30:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b32:	4baa      	ldr	r3, [pc, #680]	@ (8004ddc <lcd_init+0x2fc4>)
 8004b34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b38:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b3a:	4ba8      	ldr	r3, [pc, #672]	@ (8004ddc <lcd_init+0x2fc4>)
 8004b3c:	2280      	movs	r2, #128	@ 0x80
 8004b3e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b40:	4ba6      	ldr	r3, [pc, #664]	@ (8004ddc <lcd_init+0x2fc4>)
 8004b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b46:	611a      	str	r2, [r3, #16]
}
 8004b48:	bf00      	nop
    {
       // lcd_ex_st7796_reginit();    /* ִ��ST7796��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 8004b4a:	2078      	movs	r0, #120	@ 0x78
 8004b4c:	f002 fe68 	bl	8007820 <HAL_Delay>
 8004b50:	2336      	movs	r3, #54	@ 0x36
 8004b52:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b56:	4ba1      	ldr	r3, [pc, #644]	@ (8004ddc <lcd_init+0x2fc4>)
 8004b58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b5c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b5e:	4b9f      	ldr	r3, [pc, #636]	@ (8004ddc <lcd_init+0x2fc4>)
 8004b60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b64:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b66:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	4b9c      	ldr	r3, [pc, #624]	@ (8004de0 <lcd_init+0x2fc8>)
 8004b6e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b70:	4b9a      	ldr	r3, [pc, #616]	@ (8004ddc <lcd_init+0x2fc4>)
 8004b72:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b76:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b78:	4b98      	ldr	r3, [pc, #608]	@ (8004ddc <lcd_init+0x2fc4>)
 8004b7a:	2280      	movs	r2, #128	@ 0x80
 8004b7c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b7e:	4b97      	ldr	r3, [pc, #604]	@ (8004ddc <lcd_init+0x2fc4>)
 8004b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b84:	611a      	str	r2, [r3, #16]
}
 8004b86:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
        lcd_wr_xdata(0x48);
 8004b88:	2048      	movs	r0, #72	@ 0x48
 8004b8a:	f7fc f809 	bl	8000ba0 <lcd_wr_xdata>
 8004b8e:	233a      	movs	r3, #58	@ 0x3a
 8004b90:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b94:	4b91      	ldr	r3, [pc, #580]	@ (8004ddc <lcd_init+0x2fc4>)
 8004b96:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b9a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b9c:	4b8f      	ldr	r3, [pc, #572]	@ (8004ddc <lcd_init+0x2fc4>)
 8004b9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ba2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ba4:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	4b8d      	ldr	r3, [pc, #564]	@ (8004de0 <lcd_init+0x2fc8>)
 8004bac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004bae:	4b8b      	ldr	r3, [pc, #556]	@ (8004ddc <lcd_init+0x2fc4>)
 8004bb0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004bb4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004bb6:	4b89      	ldr	r3, [pc, #548]	@ (8004ddc <lcd_init+0x2fc4>)
 8004bb8:	2280      	movs	r2, #128	@ 0x80
 8004bba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004bbc:	4b87      	ldr	r3, [pc, #540]	@ (8004ddc <lcd_init+0x2fc4>)
 8004bbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bc2:	611a      	str	r2, [r3, #16]
}
 8004bc4:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8004bc6:	2055      	movs	r0, #85	@ 0x55
 8004bc8:	f7fb ffea 	bl	8000ba0 <lcd_wr_xdata>
 8004bcc:	23f0      	movs	r3, #240	@ 0xf0
 8004bce:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004bd2:	4b82      	ldr	r3, [pc, #520]	@ (8004ddc <lcd_init+0x2fc4>)
 8004bd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bd8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004bda:	4b80      	ldr	r3, [pc, #512]	@ (8004ddc <lcd_init+0x2fc4>)
 8004bdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004be0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004be2:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	4b7d      	ldr	r3, [pc, #500]	@ (8004de0 <lcd_init+0x2fc8>)
 8004bea:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004bec:	4b7b      	ldr	r3, [pc, #492]	@ (8004ddc <lcd_init+0x2fc4>)
 8004bee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004bf2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004bf4:	4b79      	ldr	r3, [pc, #484]	@ (8004ddc <lcd_init+0x2fc4>)
 8004bf6:	2280      	movs	r2, #128	@ 0x80
 8004bf8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004bfa:	4b78      	ldr	r3, [pc, #480]	@ (8004ddc <lcd_init+0x2fc4>)
 8004bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c00:	611a      	str	r2, [r3, #16]
}
 8004c02:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0xC3);
 8004c04:	20c3      	movs	r0, #195	@ 0xc3
 8004c06:	f7fb ffcb 	bl	8000ba0 <lcd_wr_xdata>
 8004c0a:	23f0      	movs	r3, #240	@ 0xf0
 8004c0c:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c10:	4b72      	ldr	r3, [pc, #456]	@ (8004ddc <lcd_init+0x2fc4>)
 8004c12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c16:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c18:	4b70      	ldr	r3, [pc, #448]	@ (8004ddc <lcd_init+0x2fc4>)
 8004c1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c1e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c20:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	4b6e      	ldr	r3, [pc, #440]	@ (8004de0 <lcd_init+0x2fc8>)
 8004c28:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c2a:	4b6c      	ldr	r3, [pc, #432]	@ (8004ddc <lcd_init+0x2fc4>)
 8004c2c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c30:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c32:	4b6a      	ldr	r3, [pc, #424]	@ (8004ddc <lcd_init+0x2fc4>)
 8004c34:	2280      	movs	r2, #128	@ 0x80
 8004c36:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c38:	4b68      	ldr	r3, [pc, #416]	@ (8004ddc <lcd_init+0x2fc4>)
 8004c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c3e:	611a      	str	r2, [r3, #16]
}
 8004c40:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x96);
 8004c42:	2096      	movs	r0, #150	@ 0x96
 8004c44:	f7fb ffac 	bl	8000ba0 <lcd_wr_xdata>
 8004c48:	23b4      	movs	r3, #180	@ 0xb4
 8004c4a:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c4e:	4b63      	ldr	r3, [pc, #396]	@ (8004ddc <lcd_init+0x2fc4>)
 8004c50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c54:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c56:	4b61      	ldr	r3, [pc, #388]	@ (8004ddc <lcd_init+0x2fc4>)
 8004c58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c5c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c5e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	4b5e      	ldr	r3, [pc, #376]	@ (8004de0 <lcd_init+0x2fc8>)
 8004c66:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c68:	4b5c      	ldr	r3, [pc, #368]	@ (8004ddc <lcd_init+0x2fc4>)
 8004c6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c6e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c70:	4b5a      	ldr	r3, [pc, #360]	@ (8004ddc <lcd_init+0x2fc4>)
 8004c72:	2280      	movs	r2, #128	@ 0x80
 8004c74:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c76:	4b59      	ldr	r3, [pc, #356]	@ (8004ddc <lcd_init+0x2fc4>)
 8004c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c7c:	611a      	str	r2, [r3, #16]
}
 8004c7e:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x01);
 8004c80:	2001      	movs	r0, #1
 8004c82:	f7fb ff8d 	bl	8000ba0 <lcd_wr_xdata>
 8004c86:	23b6      	movs	r3, #182	@ 0xb6
 8004c88:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c8c:	4b53      	ldr	r3, [pc, #332]	@ (8004ddc <lcd_init+0x2fc4>)
 8004c8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c92:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c94:	4b51      	ldr	r3, [pc, #324]	@ (8004ddc <lcd_init+0x2fc4>)
 8004c96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c9a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c9c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	4b4f      	ldr	r3, [pc, #316]	@ (8004de0 <lcd_init+0x2fc8>)
 8004ca4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8004ddc <lcd_init+0x2fc4>)
 8004ca8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004cae:	4b4b      	ldr	r3, [pc, #300]	@ (8004ddc <lcd_init+0x2fc4>)
 8004cb0:	2280      	movs	r2, #128	@ 0x80
 8004cb2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004cb4:	4b49      	ldr	r3, [pc, #292]	@ (8004ddc <lcd_init+0x2fc4>)
 8004cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cba:	611a      	str	r2, [r3, #16]
}
 8004cbc:	bf00      	nop

        lcd_wr_regno(0xB6); /* Display Function Control */
        lcd_wr_xdata(0x0A);
 8004cbe:	200a      	movs	r0, #10
 8004cc0:	f7fb ff6e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004cc4:	20a2      	movs	r0, #162	@ 0xa2
 8004cc6:	f7fb ff6b 	bl	8000ba0 <lcd_wr_xdata>
 8004cca:	23b7      	movs	r3, #183	@ 0xb7
 8004ccc:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004cd0:	4b42      	ldr	r3, [pc, #264]	@ (8004ddc <lcd_init+0x2fc4>)
 8004cd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cd6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004cd8:	4b40      	ldr	r3, [pc, #256]	@ (8004ddc <lcd_init+0x2fc4>)
 8004cda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cde:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ce0:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8004de0 <lcd_init+0x2fc8>)
 8004ce8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004cea:	4b3c      	ldr	r3, [pc, #240]	@ (8004ddc <lcd_init+0x2fc4>)
 8004cec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cf0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004cf2:	4b3a      	ldr	r3, [pc, #232]	@ (8004ddc <lcd_init+0x2fc4>)
 8004cf4:	2280      	movs	r2, #128	@ 0x80
 8004cf6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004cf8:	4b38      	ldr	r3, [pc, #224]	@ (8004ddc <lcd_init+0x2fc4>)
 8004cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cfe:	611a      	str	r2, [r3, #16]
}
 8004d00:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0xC6);
 8004d02:	20c6      	movs	r0, #198	@ 0xc6
 8004d04:	f7fb ff4c 	bl	8000ba0 <lcd_wr_xdata>
 8004d08:	23b9      	movs	r3, #185	@ 0xb9
 8004d0a:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d0e:	4b33      	ldr	r3, [pc, #204]	@ (8004ddc <lcd_init+0x2fc4>)
 8004d10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d14:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d16:	4b31      	ldr	r3, [pc, #196]	@ (8004ddc <lcd_init+0x2fc4>)
 8004d18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d1c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d1e:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	4b2e      	ldr	r3, [pc, #184]	@ (8004de0 <lcd_init+0x2fc8>)
 8004d26:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d28:	4b2c      	ldr	r3, [pc, #176]	@ (8004ddc <lcd_init+0x2fc4>)
 8004d2a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d2e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d30:	4b2a      	ldr	r3, [pc, #168]	@ (8004ddc <lcd_init+0x2fc4>)
 8004d32:	2280      	movs	r2, #128	@ 0x80
 8004d34:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d36:	4b29      	ldr	r3, [pc, #164]	@ (8004ddc <lcd_init+0x2fc4>)
 8004d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d3c:	611a      	str	r2, [r3, #16]
}
 8004d3e:	bf00      	nop

        lcd_wr_regno(0xB9);
        lcd_wr_xdata(0x02);
 8004d40:	2002      	movs	r0, #2
 8004d42:	f7fb ff2d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8004d46:	20e0      	movs	r0, #224	@ 0xe0
 8004d48:	f7fb ff2a 	bl	8000ba0 <lcd_wr_xdata>
 8004d4c:	23c0      	movs	r3, #192	@ 0xc0
 8004d4e:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d52:	4b22      	ldr	r3, [pc, #136]	@ (8004ddc <lcd_init+0x2fc4>)
 8004d54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d58:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d5a:	4b20      	ldr	r3, [pc, #128]	@ (8004ddc <lcd_init+0x2fc4>)
 8004d5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d60:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d62:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	4b1d      	ldr	r3, [pc, #116]	@ (8004de0 <lcd_init+0x2fc8>)
 8004d6a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ddc <lcd_init+0x2fc4>)
 8004d6e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d72:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d74:	4b19      	ldr	r3, [pc, #100]	@ (8004ddc <lcd_init+0x2fc4>)
 8004d76:	2280      	movs	r2, #128	@ 0x80
 8004d78:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d7a:	4b18      	ldr	r3, [pc, #96]	@ (8004ddc <lcd_init+0x2fc4>)
 8004d7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d80:	611a      	str	r2, [r3, #16]
}
 8004d82:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x80);
 8004d84:	2080      	movs	r0, #128	@ 0x80
 8004d86:	f7fb ff0b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x16);
 8004d8a:	2016      	movs	r0, #22
 8004d8c:	f7fb ff08 	bl	8000ba0 <lcd_wr_xdata>
 8004d90:	23c1      	movs	r3, #193	@ 0xc1
 8004d92:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d96:	4b11      	ldr	r3, [pc, #68]	@ (8004ddc <lcd_init+0x2fc4>)
 8004d98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d9c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ddc <lcd_init+0x2fc4>)
 8004da0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004da4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004da6:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	4b0c      	ldr	r3, [pc, #48]	@ (8004de0 <lcd_init+0x2fc8>)
 8004dae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004db0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ddc <lcd_init+0x2fc4>)
 8004db2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004db6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004db8:	4b08      	ldr	r3, [pc, #32]	@ (8004ddc <lcd_init+0x2fc4>)
 8004dba:	2280      	movs	r2, #128	@ 0x80
 8004dbc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004dbe:	4b07      	ldr	r3, [pc, #28]	@ (8004ddc <lcd_init+0x2fc4>)
 8004dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dc4:	611a      	str	r2, [r3, #16]
}
 8004dc6:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x19);
 8004dc8:	2019      	movs	r0, #25
 8004dca:	f7fb fee9 	bl	8000ba0 <lcd_wr_xdata>
 8004dce:	23c2      	movs	r3, #194	@ 0xc2
 8004dd0:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
 8004dd4:	e006      	b.n	8004de4 <lcd_init+0x2fcc>
 8004dd6:	bf00      	nop
 8004dd8:	200001f4 	.word	0x200001f4
 8004ddc:	40011000 	.word	0x40011000
 8004de0:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004de4:	4bba      	ldr	r3, [pc, #744]	@ (80050d0 <lcd_init+0x32b8>)
 8004de6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004dea:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004dec:	4bb8      	ldr	r3, [pc, #736]	@ (80050d0 <lcd_init+0x32b8>)
 8004dee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004df2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004df4:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	4bb6      	ldr	r3, [pc, #728]	@ (80050d4 <lcd_init+0x32bc>)
 8004dfc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004dfe:	4bb4      	ldr	r3, [pc, #720]	@ (80050d0 <lcd_init+0x32b8>)
 8004e00:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e04:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e06:	4bb2      	ldr	r3, [pc, #712]	@ (80050d0 <lcd_init+0x32b8>)
 8004e08:	2280      	movs	r2, #128	@ 0x80
 8004e0a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e0c:	4bb0      	ldr	r3, [pc, #704]	@ (80050d0 <lcd_init+0x32b8>)
 8004e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e12:	611a      	str	r2, [r3, #16]
}
 8004e14:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0xA7);
 8004e16:	20a7      	movs	r0, #167	@ 0xa7
 8004e18:	f7fb fec2 	bl	8000ba0 <lcd_wr_xdata>
 8004e1c:	23c5      	movs	r3, #197	@ 0xc5
 8004e1e:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e22:	4bab      	ldr	r3, [pc, #684]	@ (80050d0 <lcd_init+0x32b8>)
 8004e24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e28:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e2a:	4ba9      	ldr	r3, [pc, #676]	@ (80050d0 <lcd_init+0x32b8>)
 8004e2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e30:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e32:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	4ba6      	ldr	r3, [pc, #664]	@ (80050d4 <lcd_init+0x32bc>)
 8004e3a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e3c:	4ba4      	ldr	r3, [pc, #656]	@ (80050d0 <lcd_init+0x32b8>)
 8004e3e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e42:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e44:	4ba2      	ldr	r3, [pc, #648]	@ (80050d0 <lcd_init+0x32b8>)
 8004e46:	2280      	movs	r2, #128	@ 0x80
 8004e48:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e4a:	4ba1      	ldr	r3, [pc, #644]	@ (80050d0 <lcd_init+0x32b8>)
 8004e4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e50:	611a      	str	r2, [r3, #16]
}
 8004e52:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x16);
 8004e54:	2016      	movs	r0, #22
 8004e56:	f7fb fea3 	bl	8000ba0 <lcd_wr_xdata>
 8004e5a:	23e8      	movs	r3, #232	@ 0xe8
 8004e5c:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e60:	4b9b      	ldr	r3, [pc, #620]	@ (80050d0 <lcd_init+0x32b8>)
 8004e62:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e66:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e68:	4b99      	ldr	r3, [pc, #612]	@ (80050d0 <lcd_init+0x32b8>)
 8004e6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e6e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e70:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	4b97      	ldr	r3, [pc, #604]	@ (80050d4 <lcd_init+0x32bc>)
 8004e78:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e7a:	4b95      	ldr	r3, [pc, #596]	@ (80050d0 <lcd_init+0x32b8>)
 8004e7c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e80:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e82:	4b93      	ldr	r3, [pc, #588]	@ (80050d0 <lcd_init+0x32b8>)
 8004e84:	2280      	movs	r2, #128	@ 0x80
 8004e86:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e88:	4b91      	ldr	r3, [pc, #580]	@ (80050d0 <lcd_init+0x32b8>)
 8004e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e8e:	611a      	str	r2, [r3, #16]
}
 8004e90:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x40);
 8004e92:	2040      	movs	r0, #64	@ 0x40
 8004e94:	f7fb fe84 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x8A);
 8004e98:	208a      	movs	r0, #138	@ 0x8a
 8004e9a:	f7fb fe81 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	f7fb fe7e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	f7fb fe7b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004eaa:	2029      	movs	r0, #41	@ 0x29
 8004eac:	f7fb fe78 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8004eb0:	2019      	movs	r0, #25
 8004eb2:	f7fb fe75 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xA5);
 8004eb6:	20a5      	movs	r0, #165	@ 0xa5
 8004eb8:	f7fb fe72 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8004ebc:	2033      	movs	r0, #51	@ 0x33
 8004ebe:	f7fb fe6f 	bl	8000ba0 <lcd_wr_xdata>
 8004ec2:	23e0      	movs	r3, #224	@ 0xe0
 8004ec4:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004ec8:	4b81      	ldr	r3, [pc, #516]	@ (80050d0 <lcd_init+0x32b8>)
 8004eca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ece:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004ed0:	4b7f      	ldr	r3, [pc, #508]	@ (80050d0 <lcd_init+0x32b8>)
 8004ed2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ed6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ed8:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	4b7d      	ldr	r3, [pc, #500]	@ (80050d4 <lcd_init+0x32bc>)
 8004ee0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ee2:	4b7b      	ldr	r3, [pc, #492]	@ (80050d0 <lcd_init+0x32b8>)
 8004ee4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ee8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004eea:	4b79      	ldr	r3, [pc, #484]	@ (80050d0 <lcd_init+0x32b8>)
 8004eec:	2280      	movs	r2, #128	@ 0x80
 8004eee:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004ef0:	4b77      	ldr	r3, [pc, #476]	@ (80050d0 <lcd_init+0x32b8>)
 8004ef2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ef6:	611a      	str	r2, [r3, #16]
}
 8004ef8:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0xF0);
 8004efa:	20f0      	movs	r0, #240	@ 0xf0
 8004efc:	f7fb fe50 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8004f00:	2007      	movs	r0, #7
 8004f02:	f7fb fe4d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 8004f06:	200d      	movs	r0, #13
 8004f08:	f7fb fe4a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8004f0c:	2004      	movs	r0, #4
 8004f0e:	f7fb fe47 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8004f12:	2005      	movs	r0, #5
 8004f14:	f7fb fe44 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004f18:	2014      	movs	r0, #20
 8004f1a:	f7fb fe41 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004f1e:	2036      	movs	r0, #54	@ 0x36
 8004f20:	f7fb fe3e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8004f24:	2054      	movs	r0, #84	@ 0x54
 8004f26:	f7fb fe3b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004f2a:	204c      	movs	r0, #76	@ 0x4c
 8004f2c:	f7fb fe38 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x38);
 8004f30:	2038      	movs	r0, #56	@ 0x38
 8004f32:	f7fb fe35 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8004f36:	2013      	movs	r0, #19
 8004f38:	f7fb fe32 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004f3c:	2014      	movs	r0, #20
 8004f3e:	f7fb fe2f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x2E);
 8004f42:	202e      	movs	r0, #46	@ 0x2e
 8004f44:	f7fb fe2c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004f48:	2034      	movs	r0, #52	@ 0x34
 8004f4a:	f7fb fe29 	bl	8000ba0 <lcd_wr_xdata>
 8004f4e:	23e1      	movs	r3, #225	@ 0xe1
 8004f50:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004f54:	4b5e      	ldr	r3, [pc, #376]	@ (80050d0 <lcd_init+0x32b8>)
 8004f56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f5a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004f5c:	4b5c      	ldr	r3, [pc, #368]	@ (80050d0 <lcd_init+0x32b8>)
 8004f5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f62:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004f64:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80050d4 <lcd_init+0x32bc>)
 8004f6c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004f6e:	4b58      	ldr	r3, [pc, #352]	@ (80050d0 <lcd_init+0x32b8>)
 8004f70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f74:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004f76:	4b56      	ldr	r3, [pc, #344]	@ (80050d0 <lcd_init+0x32b8>)
 8004f78:	2280      	movs	r2, #128	@ 0x80
 8004f7a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004f7c:	4b54      	ldr	r3, [pc, #336]	@ (80050d0 <lcd_init+0x32b8>)
 8004f7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f82:	611a      	str	r2, [r3, #16]
}
 8004f84:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0xF0);
 8004f86:	20f0      	movs	r0, #240	@ 0xf0
 8004f88:	f7fb fe0a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004f8c:	2010      	movs	r0, #16
 8004f8e:	f7fb fe07 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004f92:	2014      	movs	r0, #20
 8004f94:	f7fb fe04 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8004f98:	200e      	movs	r0, #14
 8004f9a:	f7fb fe01 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8004f9e:	200c      	movs	r0, #12
 8004fa0:	f7fb fdfe 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8004fa4:	2008      	movs	r0, #8
 8004fa6:	f7fb fdfb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x35);
 8004faa:	2035      	movs	r0, #53	@ 0x35
 8004fac:	f7fb fdf8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004fb0:	2044      	movs	r0, #68	@ 0x44
 8004fb2:	f7fb fdf5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004fb6:	204c      	movs	r0, #76	@ 0x4c
 8004fb8:	f7fb fdf2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8004fbc:	2026      	movs	r0, #38	@ 0x26
 8004fbe:	f7fb fdef 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004fc2:	2010      	movs	r0, #16
 8004fc4:	f7fb fdec 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8004fc8:	2012      	movs	r0, #18
 8004fca:	f7fb fde9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8004fce:	202c      	movs	r0, #44	@ 0x2c
 8004fd0:	f7fb fde6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8004fd4:	2032      	movs	r0, #50	@ 0x32
 8004fd6:	f7fb fde3 	bl	8000ba0 <lcd_wr_xdata>
 8004fda:	23f0      	movs	r3, #240	@ 0xf0
 8004fdc:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80050d0 <lcd_init+0x32b8>)
 8004fe2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fe6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004fe8:	4b39      	ldr	r3, [pc, #228]	@ (80050d0 <lcd_init+0x32b8>)
 8004fea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ff0:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	4b37      	ldr	r3, [pc, #220]	@ (80050d4 <lcd_init+0x32bc>)
 8004ff8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ffa:	4b35      	ldr	r3, [pc, #212]	@ (80050d0 <lcd_init+0x32b8>)
 8004ffc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005000:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005002:	4b33      	ldr	r3, [pc, #204]	@ (80050d0 <lcd_init+0x32b8>)
 8005004:	2280      	movs	r2, #128	@ 0x80
 8005006:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005008:	4b31      	ldr	r3, [pc, #196]	@ (80050d0 <lcd_init+0x32b8>)
 800500a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800500e:	611a      	str	r2, [r3, #16]
}
 8005010:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x3C);
 8005012:	203c      	movs	r0, #60	@ 0x3c
 8005014:	f7fb fdc4 	bl	8000ba0 <lcd_wr_xdata>
 8005018:	23f0      	movs	r3, #240	@ 0xf0
 800501a:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800501e:	4b2c      	ldr	r3, [pc, #176]	@ (80050d0 <lcd_init+0x32b8>)
 8005020:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005024:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005026:	4b2a      	ldr	r3, [pc, #168]	@ (80050d0 <lcd_init+0x32b8>)
 8005028:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800502c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800502e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 8005032:	b29a      	uxth	r2, r3
 8005034:	4b27      	ldr	r3, [pc, #156]	@ (80050d4 <lcd_init+0x32bc>)
 8005036:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005038:	4b25      	ldr	r3, [pc, #148]	@ (80050d0 <lcd_init+0x32b8>)
 800503a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800503e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005040:	4b23      	ldr	r3, [pc, #140]	@ (80050d0 <lcd_init+0x32b8>)
 8005042:	2280      	movs	r2, #128	@ 0x80
 8005044:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005046:	4b22      	ldr	r3, [pc, #136]	@ (80050d0 <lcd_init+0x32b8>)
 8005048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800504c:	611a      	str	r2, [r3, #16]
}
 800504e:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x69);
 8005050:	2069      	movs	r0, #105	@ 0x69
 8005052:	f7fb fda5 	bl	8000ba0 <lcd_wr_xdata>

        HAL_Delay(120);
 8005056:	2078      	movs	r0, #120	@ 0x78
 8005058:	f002 fbe2 	bl	8007820 <HAL_Delay>
 800505c:	2321      	movs	r3, #33	@ 0x21
 800505e:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005062:	4b1b      	ldr	r3, [pc, #108]	@ (80050d0 <lcd_init+0x32b8>)
 8005064:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005068:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800506a:	4b19      	ldr	r3, [pc, #100]	@ (80050d0 <lcd_init+0x32b8>)
 800506c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005070:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005072:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8005076:	b29a      	uxth	r2, r3
 8005078:	4b16      	ldr	r3, [pc, #88]	@ (80050d4 <lcd_init+0x32bc>)
 800507a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800507c:	4b14      	ldr	r3, [pc, #80]	@ (80050d0 <lcd_init+0x32b8>)
 800507e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005082:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005084:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <lcd_init+0x32b8>)
 8005086:	2280      	movs	r2, #128	@ 0x80
 8005088:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800508a:	4b11      	ldr	r3, [pc, #68]	@ (80050d0 <lcd_init+0x32b8>)
 800508c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005090:	611a      	str	r2, [r3, #16]
}
 8005092:	bf00      	nop
 8005094:	2329      	movs	r3, #41	@ 0x29
 8005096:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800509a:	4b0d      	ldr	r3, [pc, #52]	@ (80050d0 <lcd_init+0x32b8>)
 800509c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050a0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80050a2:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <lcd_init+0x32b8>)
 80050a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050a8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80050aa:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	4b08      	ldr	r3, [pc, #32]	@ (80050d4 <lcd_init+0x32bc>)
 80050b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80050b4:	4b06      	ldr	r3, [pc, #24]	@ (80050d0 <lcd_init+0x32b8>)
 80050b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80050ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80050bc:	4b04      	ldr	r3, [pc, #16]	@ (80050d0 <lcd_init+0x32b8>)
 80050be:	2280      	movs	r2, #128	@ 0x80
 80050c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80050c2:	4b03      	ldr	r3, [pc, #12]	@ (80050d0 <lcd_init+0x32b8>)
 80050c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050c8:	611a      	str	r2, [r3, #16]
}
 80050ca:	f001 bdee 	b.w	8006caa <lcd_init+0x4e92>
 80050ce:	bf00      	nop
 80050d0:	40011000 	.word	0x40011000
 80050d4:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x21);
        lcd_wr_regno(0x29);
    }
    else if (lcddev.id == 0x5510)
 80050d8:	4b03      	ldr	r3, [pc, #12]	@ (80050e8 <lcd_init+0x32d0>)
 80050da:	889b      	ldrh	r3, [r3, #4]
 80050dc:	f245 5210 	movw	r2, #21776	@ 0x5510
 80050e0:	4293      	cmp	r3, r2
 80050e2:	f040 87b3 	bne.w	800604c <lcd_init+0x4234>
 80050e6:	e001      	b.n	80050ec <lcd_init+0x32d4>
 80050e8:	200001f4 	.word	0x200001f4
    {
        //lcd_ex_nt35510_reginit();   /* ִ��NT35510��ʼ�� */

        lcd_write_reg(0xF000, 0x55);
 80050ec:	2155      	movs	r1, #85	@ 0x55
 80050ee:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 80050f2:	f7fb fd79 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 80050f6:	21aa      	movs	r1, #170	@ 0xaa
 80050f8:	f24f 0001 	movw	r0, #61441	@ 0xf001
 80050fc:	f7fb fd74 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8005100:	2152      	movs	r1, #82	@ 0x52
 8005102:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8005106:	f7fb fd6f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 800510a:	2108      	movs	r1, #8
 800510c:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8005110:	f7fb fd6a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x01);
 8005114:	2101      	movs	r1, #1
 8005116:	f24f 0004 	movw	r0, #61444	@ 0xf004
 800511a:	f7fb fd65 	bl	8000be8 <lcd_write_reg>
        /* AVDD Set AVDD 5.2V */
        lcd_write_reg(0xB000, 0x0D);
 800511e:	210d      	movs	r1, #13
 8005120:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8005124:	f7fb fd60 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB001, 0x0D);
 8005128:	210d      	movs	r1, #13
 800512a:	f24b 0001 	movw	r0, #45057	@ 0xb001
 800512e:	f7fb fd5b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB002, 0x0D);
 8005132:	210d      	movs	r1, #13
 8005134:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8005138:	f7fb fd56 	bl	8000be8 <lcd_write_reg>
        /* AVDD ratio */
        lcd_write_reg(0xB600, 0x34);
 800513c:	2134      	movs	r1, #52	@ 0x34
 800513e:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8005142:	f7fb fd51 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB601, 0x34);
 8005146:	2134      	movs	r1, #52	@ 0x34
 8005148:	f24b 6001 	movw	r0, #46593	@ 0xb601
 800514c:	f7fb fd4c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB602, 0x34);
 8005150:	2134      	movs	r1, #52	@ 0x34
 8005152:	f24b 6002 	movw	r0, #46594	@ 0xb602
 8005156:	f7fb fd47 	bl	8000be8 <lcd_write_reg>
        /* AVEE -5.2V */
        lcd_write_reg(0xB100, 0x0D);
 800515a:	210d      	movs	r1, #13
 800515c:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8005160:	f7fb fd42 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x0D);
 8005164:	210d      	movs	r1, #13
 8005166:	f24b 1001 	movw	r0, #45313	@ 0xb101
 800516a:	f7fb fd3d 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB102, 0x0D);
 800516e:	210d      	movs	r1, #13
 8005170:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8005174:	f7fb fd38 	bl	8000be8 <lcd_write_reg>
        /* AVEE ratio */
        lcd_write_reg(0xB700, 0x34);
 8005178:	2134      	movs	r1, #52	@ 0x34
 800517a:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 800517e:	f7fb fd33 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x34);
 8005182:	2134      	movs	r1, #52	@ 0x34
 8005184:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8005188:	f7fb fd2e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB702, 0x34);
 800518c:	2134      	movs	r1, #52	@ 0x34
 800518e:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8005192:	f7fb fd29 	bl	8000be8 <lcd_write_reg>
        /* VCL -2.5V */
        lcd_write_reg(0xB200, 0x00);
 8005196:	2100      	movs	r1, #0
 8005198:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 800519c:	f7fb fd24 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB201, 0x00);
 80051a0:	2100      	movs	r1, #0
 80051a2:	f24b 2001 	movw	r0, #45569	@ 0xb201
 80051a6:	f7fb fd1f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB202, 0x00);
 80051aa:	2100      	movs	r1, #0
 80051ac:	f24b 2002 	movw	r0, #45570	@ 0xb202
 80051b0:	f7fb fd1a 	bl	8000be8 <lcd_write_reg>
        /* VCL ratio */
        lcd_write_reg(0xB800, 0x24);
 80051b4:	2124      	movs	r1, #36	@ 0x24
 80051b6:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 80051ba:	f7fb fd15 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x24);
 80051be:	2124      	movs	r1, #36	@ 0x24
 80051c0:	f64b 0001 	movw	r0, #47105	@ 0xb801
 80051c4:	f7fb fd10 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x24);
 80051c8:	2124      	movs	r1, #36	@ 0x24
 80051ca:	f64b 0002 	movw	r0, #47106	@ 0xb802
 80051ce:	f7fb fd0b 	bl	8000be8 <lcd_write_reg>
        /* VGH 15V (Free pump) */
        lcd_write_reg(0xBF00, 0x01);
 80051d2:	2101      	movs	r1, #1
 80051d4:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 80051d8:	f7fb fd06 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB300, 0x0F);
 80051dc:	210f      	movs	r1, #15
 80051de:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 80051e2:	f7fb fd01 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB301, 0x0F);
 80051e6:	210f      	movs	r1, #15
 80051e8:	f24b 3001 	movw	r0, #45825	@ 0xb301
 80051ec:	f7fb fcfc 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB302, 0x0F);
 80051f0:	210f      	movs	r1, #15
 80051f2:	f24b 3002 	movw	r0, #45826	@ 0xb302
 80051f6:	f7fb fcf7 	bl	8000be8 <lcd_write_reg>
        /* VGH ratio */
        lcd_write_reg(0xB900, 0x34);
 80051fa:	2134      	movs	r1, #52	@ 0x34
 80051fc:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8005200:	f7fb fcf2 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB901, 0x34);
 8005204:	2134      	movs	r1, #52	@ 0x34
 8005206:	f64b 1001 	movw	r0, #47361	@ 0xb901
 800520a:	f7fb fced 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB902, 0x34);
 800520e:	2134      	movs	r1, #52	@ 0x34
 8005210:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8005214:	f7fb fce8 	bl	8000be8 <lcd_write_reg>
        /* VGL_REG -10V */
        lcd_write_reg(0xB500, 0x08);
 8005218:	2108      	movs	r1, #8
 800521a:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 800521e:	f7fb fce3 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB501, 0x08);
 8005222:	2108      	movs	r1, #8
 8005224:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8005228:	f7fb fcde 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB502, 0x08);
 800522c:	2108      	movs	r1, #8
 800522e:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8005232:	f7fb fcd9 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xC200, 0x03);
 8005236:	2103      	movs	r1, #3
 8005238:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 800523c:	f7fb fcd4 	bl	8000be8 <lcd_write_reg>
        /* VGLX ratio */
        lcd_write_reg(0xBA00, 0x24);
 8005240:	2124      	movs	r1, #36	@ 0x24
 8005242:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8005246:	f7fb fccf 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xBA01, 0x24);
 800524a:	2124      	movs	r1, #36	@ 0x24
 800524c:	f64b 2001 	movw	r0, #47617	@ 0xba01
 8005250:	f7fb fcca 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xBA02, 0x24);
 8005254:	2124      	movs	r1, #36	@ 0x24
 8005256:	f64b 2002 	movw	r0, #47618	@ 0xba02
 800525a:	f7fb fcc5 	bl	8000be8 <lcd_write_reg>
        /* VGMP/VGSP 4.5V/0V */
        lcd_write_reg(0xBC00, 0x00);
 800525e:	2100      	movs	r1, #0
 8005260:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8005264:	f7fb fcc0 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x78);
 8005268:	2178      	movs	r1, #120	@ 0x78
 800526a:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 800526e:	f7fb fcbb 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8005272:	2100      	movs	r1, #0
 8005274:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8005278:	f7fb fcb6 	bl	8000be8 <lcd_write_reg>
        /* VGMN/VGSN -4.5V/0V */
        lcd_write_reg(0xBD00, 0x00);
 800527c:	2100      	movs	r1, #0
 800527e:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8005282:	f7fb fcb1 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xBD01, 0x78);
 8005286:	2178      	movs	r1, #120	@ 0x78
 8005288:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 800528c:	f7fb fcac 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xBD02, 0x00);
 8005290:	2100      	movs	r1, #0
 8005292:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8005296:	f7fb fca7 	bl	8000be8 <lcd_write_reg>
        /* VCOM */
        lcd_write_reg(0xBE00, 0x00);
 800529a:	2100      	movs	r1, #0
 800529c:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 80052a0:	f7fb fca2 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xBE01, 0x64);
 80052a4:	2164      	movs	r1, #100	@ 0x64
 80052a6:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 80052aa:	f7fb fc9d 	bl	8000be8 <lcd_write_reg>
        /* Gamma Setting */
        lcd_write_reg(0xD100, 0x00);
 80052ae:	2100      	movs	r1, #0
 80052b0:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 80052b4:	f7fb fc98 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD101, 0x33);
 80052b8:	2133      	movs	r1, #51	@ 0x33
 80052ba:	f24d 1001 	movw	r0, #53505	@ 0xd101
 80052be:	f7fb fc93 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD102, 0x00);
 80052c2:	2100      	movs	r1, #0
 80052c4:	f24d 1002 	movw	r0, #53506	@ 0xd102
 80052c8:	f7fb fc8e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD103, 0x34);
 80052cc:	2134      	movs	r1, #52	@ 0x34
 80052ce:	f24d 1003 	movw	r0, #53507	@ 0xd103
 80052d2:	f7fb fc89 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD104, 0x00);
 80052d6:	2100      	movs	r1, #0
 80052d8:	f24d 1004 	movw	r0, #53508	@ 0xd104
 80052dc:	f7fb fc84 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD105, 0x3A);
 80052e0:	213a      	movs	r1, #58	@ 0x3a
 80052e2:	f24d 1005 	movw	r0, #53509	@ 0xd105
 80052e6:	f7fb fc7f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD106, 0x00);
 80052ea:	2100      	movs	r1, #0
 80052ec:	f24d 1006 	movw	r0, #53510	@ 0xd106
 80052f0:	f7fb fc7a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD107, 0x4A);
 80052f4:	214a      	movs	r1, #74	@ 0x4a
 80052f6:	f24d 1007 	movw	r0, #53511	@ 0xd107
 80052fa:	f7fb fc75 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD108, 0x00);
 80052fe:	2100      	movs	r1, #0
 8005300:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8005304:	f7fb fc70 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD109, 0x5C);
 8005308:	215c      	movs	r1, #92	@ 0x5c
 800530a:	f24d 1009 	movw	r0, #53513	@ 0xd109
 800530e:	f7fb fc6b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD10A, 0x00);
 8005312:	2100      	movs	r1, #0
 8005314:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8005318:	f7fb fc66 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD10B, 0x81);
 800531c:	2181      	movs	r1, #129	@ 0x81
 800531e:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8005322:	f7fb fc61 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD10C, 0x00);
 8005326:	2100      	movs	r1, #0
 8005328:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 800532c:	f7fb fc5c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD10D, 0xA6);
 8005330:	21a6      	movs	r1, #166	@ 0xa6
 8005332:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8005336:	f7fb fc57 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD10E, 0x00);
 800533a:	2100      	movs	r1, #0
 800533c:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8005340:	f7fb fc52 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD10F, 0xE5);
 8005344:	21e5      	movs	r1, #229	@ 0xe5
 8005346:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 800534a:	f7fb fc4d 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD110, 0x01);
 800534e:	2101      	movs	r1, #1
 8005350:	f24d 1010 	movw	r0, #53520	@ 0xd110
 8005354:	f7fb fc48 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD111, 0x13);
 8005358:	2113      	movs	r1, #19
 800535a:	f24d 1011 	movw	r0, #53521	@ 0xd111
 800535e:	f7fb fc43 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD112, 0x01);
 8005362:	2101      	movs	r1, #1
 8005364:	f24d 1012 	movw	r0, #53522	@ 0xd112
 8005368:	f7fb fc3e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD113, 0x54);
 800536c:	2154      	movs	r1, #84	@ 0x54
 800536e:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8005372:	f7fb fc39 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD114, 0x01);
 8005376:	2101      	movs	r1, #1
 8005378:	f24d 1014 	movw	r0, #53524	@ 0xd114
 800537c:	f7fb fc34 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD115, 0x82);
 8005380:	2182      	movs	r1, #130	@ 0x82
 8005382:	f24d 1015 	movw	r0, #53525	@ 0xd115
 8005386:	f7fb fc2f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD116, 0x01);
 800538a:	2101      	movs	r1, #1
 800538c:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8005390:	f7fb fc2a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD117, 0xCA);
 8005394:	21ca      	movs	r1, #202	@ 0xca
 8005396:	f24d 1017 	movw	r0, #53527	@ 0xd117
 800539a:	f7fb fc25 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD118, 0x02);
 800539e:	2102      	movs	r1, #2
 80053a0:	f24d 1018 	movw	r0, #53528	@ 0xd118
 80053a4:	f7fb fc20 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD119, 0x00);
 80053a8:	2100      	movs	r1, #0
 80053aa:	f24d 1019 	movw	r0, #53529	@ 0xd119
 80053ae:	f7fb fc1b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD11A, 0x02);
 80053b2:	2102      	movs	r1, #2
 80053b4:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 80053b8:	f7fb fc16 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD11B, 0x01);
 80053bc:	2101      	movs	r1, #1
 80053be:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 80053c2:	f7fb fc11 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD11C, 0x02);
 80053c6:	2102      	movs	r1, #2
 80053c8:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 80053cc:	f7fb fc0c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD11D, 0x34);
 80053d0:	2134      	movs	r1, #52	@ 0x34
 80053d2:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 80053d6:	f7fb fc07 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD11E, 0x02);
 80053da:	2102      	movs	r1, #2
 80053dc:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 80053e0:	f7fb fc02 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD11F, 0x67);
 80053e4:	2167      	movs	r1, #103	@ 0x67
 80053e6:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 80053ea:	f7fb fbfd 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD120, 0x02);
 80053ee:	2102      	movs	r1, #2
 80053f0:	f24d 1020 	movw	r0, #53536	@ 0xd120
 80053f4:	f7fb fbf8 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD121, 0x84);
 80053f8:	2184      	movs	r1, #132	@ 0x84
 80053fa:	f24d 1021 	movw	r0, #53537	@ 0xd121
 80053fe:	f7fb fbf3 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD122, 0x02);
 8005402:	2102      	movs	r1, #2
 8005404:	f24d 1022 	movw	r0, #53538	@ 0xd122
 8005408:	f7fb fbee 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD123, 0xA4);
 800540c:	21a4      	movs	r1, #164	@ 0xa4
 800540e:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8005412:	f7fb fbe9 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD124, 0x02);
 8005416:	2102      	movs	r1, #2
 8005418:	f24d 1024 	movw	r0, #53540	@ 0xd124
 800541c:	f7fb fbe4 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD125, 0xB7);
 8005420:	21b7      	movs	r1, #183	@ 0xb7
 8005422:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8005426:	f7fb fbdf 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD126, 0x02);
 800542a:	2102      	movs	r1, #2
 800542c:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8005430:	f7fb fbda 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD127, 0xCF);
 8005434:	21cf      	movs	r1, #207	@ 0xcf
 8005436:	f24d 1027 	movw	r0, #53543	@ 0xd127
 800543a:	f7fb fbd5 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD128, 0x02);
 800543e:	2102      	movs	r1, #2
 8005440:	f24d 1028 	movw	r0, #53544	@ 0xd128
 8005444:	f7fb fbd0 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD129, 0xDE);
 8005448:	21de      	movs	r1, #222	@ 0xde
 800544a:	f24d 1029 	movw	r0, #53545	@ 0xd129
 800544e:	f7fb fbcb 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD12A, 0x02);
 8005452:	2102      	movs	r1, #2
 8005454:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 8005458:	f7fb fbc6 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD12B, 0xF2);
 800545c:	21f2      	movs	r1, #242	@ 0xf2
 800545e:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 8005462:	f7fb fbc1 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD12C, 0x02);
 8005466:	2102      	movs	r1, #2
 8005468:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 800546c:	f7fb fbbc 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD12D, 0xFE);
 8005470:	21fe      	movs	r1, #254	@ 0xfe
 8005472:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 8005476:	f7fb fbb7 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD12E, 0x03);
 800547a:	2103      	movs	r1, #3
 800547c:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 8005480:	f7fb fbb2 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD12F, 0x10);
 8005484:	2110      	movs	r1, #16
 8005486:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 800548a:	f7fb fbad 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD130, 0x03);
 800548e:	2103      	movs	r1, #3
 8005490:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8005494:	f7fb fba8 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD131, 0x33);
 8005498:	2133      	movs	r1, #51	@ 0x33
 800549a:	f24d 1031 	movw	r0, #53553	@ 0xd131
 800549e:	f7fb fba3 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD132, 0x03);
 80054a2:	2103      	movs	r1, #3
 80054a4:	f24d 1032 	movw	r0, #53554	@ 0xd132
 80054a8:	f7fb fb9e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD133, 0x6D);
 80054ac:	216d      	movs	r1, #109	@ 0x6d
 80054ae:	f24d 1033 	movw	r0, #53555	@ 0xd133
 80054b2:	f7fb fb99 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD200, 0x00);
 80054b6:	2100      	movs	r1, #0
 80054b8:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 80054bc:	f7fb fb94 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD201, 0x33);
 80054c0:	2133      	movs	r1, #51	@ 0x33
 80054c2:	f24d 2001 	movw	r0, #53761	@ 0xd201
 80054c6:	f7fb fb8f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD202, 0x00);
 80054ca:	2100      	movs	r1, #0
 80054cc:	f24d 2002 	movw	r0, #53762	@ 0xd202
 80054d0:	f7fb fb8a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD203, 0x34);
 80054d4:	2134      	movs	r1, #52	@ 0x34
 80054d6:	f24d 2003 	movw	r0, #53763	@ 0xd203
 80054da:	f7fb fb85 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD204, 0x00);
 80054de:	2100      	movs	r1, #0
 80054e0:	f24d 2004 	movw	r0, #53764	@ 0xd204
 80054e4:	f7fb fb80 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD205, 0x3A);
 80054e8:	213a      	movs	r1, #58	@ 0x3a
 80054ea:	f24d 2005 	movw	r0, #53765	@ 0xd205
 80054ee:	f7fb fb7b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD206, 0x00);
 80054f2:	2100      	movs	r1, #0
 80054f4:	f24d 2006 	movw	r0, #53766	@ 0xd206
 80054f8:	f7fb fb76 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD207, 0x4A);
 80054fc:	214a      	movs	r1, #74	@ 0x4a
 80054fe:	f24d 2007 	movw	r0, #53767	@ 0xd207
 8005502:	f7fb fb71 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD208, 0x00);
 8005506:	2100      	movs	r1, #0
 8005508:	f24d 2008 	movw	r0, #53768	@ 0xd208
 800550c:	f7fb fb6c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD209, 0x5C);
 8005510:	215c      	movs	r1, #92	@ 0x5c
 8005512:	f24d 2009 	movw	r0, #53769	@ 0xd209
 8005516:	f7fb fb67 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD20A, 0x00);
 800551a:	2100      	movs	r1, #0
 800551c:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8005520:	f7fb fb62 	bl	8000be8 <lcd_write_reg>

        lcd_write_reg(0xD20B, 0x81);
 8005524:	2181      	movs	r1, #129	@ 0x81
 8005526:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 800552a:	f7fb fb5d 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD20C, 0x00);
 800552e:	2100      	movs	r1, #0
 8005530:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8005534:	f7fb fb58 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD20D, 0xA6);
 8005538:	21a6      	movs	r1, #166	@ 0xa6
 800553a:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 800553e:	f7fb fb53 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD20E, 0x00);
 8005542:	2100      	movs	r1, #0
 8005544:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8005548:	f7fb fb4e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD20F, 0xE5);
 800554c:	21e5      	movs	r1, #229	@ 0xe5
 800554e:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8005552:	f7fb fb49 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD210, 0x01);
 8005556:	2101      	movs	r1, #1
 8005558:	f24d 2010 	movw	r0, #53776	@ 0xd210
 800555c:	f7fb fb44 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD211, 0x13);
 8005560:	2113      	movs	r1, #19
 8005562:	f24d 2011 	movw	r0, #53777	@ 0xd211
 8005566:	f7fb fb3f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD212, 0x01);
 800556a:	2101      	movs	r1, #1
 800556c:	f24d 2012 	movw	r0, #53778	@ 0xd212
 8005570:	f7fb fb3a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD213, 0x54);
 8005574:	2154      	movs	r1, #84	@ 0x54
 8005576:	f24d 2013 	movw	r0, #53779	@ 0xd213
 800557a:	f7fb fb35 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD214, 0x01);
 800557e:	2101      	movs	r1, #1
 8005580:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8005584:	f7fb fb30 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD215, 0x82);
 8005588:	2182      	movs	r1, #130	@ 0x82
 800558a:	f24d 2015 	movw	r0, #53781	@ 0xd215
 800558e:	f7fb fb2b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD216, 0x01);
 8005592:	2101      	movs	r1, #1
 8005594:	f24d 2016 	movw	r0, #53782	@ 0xd216
 8005598:	f7fb fb26 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD217, 0xCA);
 800559c:	21ca      	movs	r1, #202	@ 0xca
 800559e:	f24d 2017 	movw	r0, #53783	@ 0xd217
 80055a2:	f7fb fb21 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD218, 0x02);
 80055a6:	2102      	movs	r1, #2
 80055a8:	f24d 2018 	movw	r0, #53784	@ 0xd218
 80055ac:	f7fb fb1c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD219, 0x00);
 80055b0:	2100      	movs	r1, #0
 80055b2:	f24d 2019 	movw	r0, #53785	@ 0xd219
 80055b6:	f7fb fb17 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD21A, 0x02);
 80055ba:	2102      	movs	r1, #2
 80055bc:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 80055c0:	f7fb fb12 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD21B, 0x01);
 80055c4:	2101      	movs	r1, #1
 80055c6:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 80055ca:	f7fb fb0d 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD21C, 0x02);
 80055ce:	2102      	movs	r1, #2
 80055d0:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 80055d4:	f7fb fb08 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD21D, 0x34);
 80055d8:	2134      	movs	r1, #52	@ 0x34
 80055da:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 80055de:	f7fb fb03 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD21E, 0x02);
 80055e2:	2102      	movs	r1, #2
 80055e4:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 80055e8:	f7fb fafe 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD21F, 0x67);
 80055ec:	2167      	movs	r1, #103	@ 0x67
 80055ee:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 80055f2:	f7fb faf9 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD220, 0x02);
 80055f6:	2102      	movs	r1, #2
 80055f8:	f24d 2020 	movw	r0, #53792	@ 0xd220
 80055fc:	f7fb faf4 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD221, 0x84);
 8005600:	2184      	movs	r1, #132	@ 0x84
 8005602:	f24d 2021 	movw	r0, #53793	@ 0xd221
 8005606:	f7fb faef 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD222, 0x02);
 800560a:	2102      	movs	r1, #2
 800560c:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8005610:	f7fb faea 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD223, 0xA4);
 8005614:	21a4      	movs	r1, #164	@ 0xa4
 8005616:	f24d 2023 	movw	r0, #53795	@ 0xd223
 800561a:	f7fb fae5 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD224, 0x02);
 800561e:	2102      	movs	r1, #2
 8005620:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8005624:	f7fb fae0 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD225, 0xB7);
 8005628:	21b7      	movs	r1, #183	@ 0xb7
 800562a:	f24d 2025 	movw	r0, #53797	@ 0xd225
 800562e:	f7fb fadb 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD226, 0x02);
 8005632:	2102      	movs	r1, #2
 8005634:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8005638:	f7fb fad6 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD227, 0xCF);
 800563c:	21cf      	movs	r1, #207	@ 0xcf
 800563e:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8005642:	f7fb fad1 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD228, 0x02);
 8005646:	2102      	movs	r1, #2
 8005648:	f24d 2028 	movw	r0, #53800	@ 0xd228
 800564c:	f7fb facc 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD229, 0xDE);
 8005650:	21de      	movs	r1, #222	@ 0xde
 8005652:	f24d 2029 	movw	r0, #53801	@ 0xd229
 8005656:	f7fb fac7 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD22A, 0x02);
 800565a:	2102      	movs	r1, #2
 800565c:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 8005660:	f7fb fac2 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD22B, 0xF2);
 8005664:	21f2      	movs	r1, #242	@ 0xf2
 8005666:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 800566a:	f7fb fabd 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD22C, 0x02);
 800566e:	2102      	movs	r1, #2
 8005670:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 8005674:	f7fb fab8 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD22D, 0xFE);
 8005678:	21fe      	movs	r1, #254	@ 0xfe
 800567a:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 800567e:	f7fb fab3 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD22E, 0x03);
 8005682:	2103      	movs	r1, #3
 8005684:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8005688:	f7fb faae 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD22F, 0x10);
 800568c:	2110      	movs	r1, #16
 800568e:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8005692:	f7fb faa9 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD230, 0x03);
 8005696:	2103      	movs	r1, #3
 8005698:	f24d 2030 	movw	r0, #53808	@ 0xd230
 800569c:	f7fb faa4 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD231, 0x33);
 80056a0:	2133      	movs	r1, #51	@ 0x33
 80056a2:	f24d 2031 	movw	r0, #53809	@ 0xd231
 80056a6:	f7fb fa9f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD232, 0x03);
 80056aa:	2103      	movs	r1, #3
 80056ac:	f24d 2032 	movw	r0, #53810	@ 0xd232
 80056b0:	f7fb fa9a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD233, 0x6D);
 80056b4:	216d      	movs	r1, #109	@ 0x6d
 80056b6:	f24d 2033 	movw	r0, #53811	@ 0xd233
 80056ba:	f7fb fa95 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD300, 0x00);
 80056be:	2100      	movs	r1, #0
 80056c0:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 80056c4:	f7fb fa90 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD301, 0x33);
 80056c8:	2133      	movs	r1, #51	@ 0x33
 80056ca:	f24d 3001 	movw	r0, #54017	@ 0xd301
 80056ce:	f7fb fa8b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD302, 0x00);
 80056d2:	2100      	movs	r1, #0
 80056d4:	f24d 3002 	movw	r0, #54018	@ 0xd302
 80056d8:	f7fb fa86 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD303, 0x34);
 80056dc:	2134      	movs	r1, #52	@ 0x34
 80056de:	f24d 3003 	movw	r0, #54019	@ 0xd303
 80056e2:	f7fb fa81 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD304, 0x00);
 80056e6:	2100      	movs	r1, #0
 80056e8:	f24d 3004 	movw	r0, #54020	@ 0xd304
 80056ec:	f7fb fa7c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD305, 0x3A);
 80056f0:	213a      	movs	r1, #58	@ 0x3a
 80056f2:	f24d 3005 	movw	r0, #54021	@ 0xd305
 80056f6:	f7fb fa77 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD306, 0x00);
 80056fa:	2100      	movs	r1, #0
 80056fc:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8005700:	f7fb fa72 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD307, 0x4A);
 8005704:	214a      	movs	r1, #74	@ 0x4a
 8005706:	f24d 3007 	movw	r0, #54023	@ 0xd307
 800570a:	f7fb fa6d 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD308, 0x00);
 800570e:	2100      	movs	r1, #0
 8005710:	f24d 3008 	movw	r0, #54024	@ 0xd308
 8005714:	f7fb fa68 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD309, 0x5C);
 8005718:	215c      	movs	r1, #92	@ 0x5c
 800571a:	f24d 3009 	movw	r0, #54025	@ 0xd309
 800571e:	f7fb fa63 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD30A, 0x00);
 8005722:	2100      	movs	r1, #0
 8005724:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8005728:	f7fb fa5e 	bl	8000be8 <lcd_write_reg>

        lcd_write_reg(0xD30B, 0x81);
 800572c:	2181      	movs	r1, #129	@ 0x81
 800572e:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8005732:	f7fb fa59 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD30C, 0x00);
 8005736:	2100      	movs	r1, #0
 8005738:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 800573c:	f7fb fa54 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD30D, 0xA6);
 8005740:	21a6      	movs	r1, #166	@ 0xa6
 8005742:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8005746:	f7fb fa4f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD30E, 0x00);
 800574a:	2100      	movs	r1, #0
 800574c:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8005750:	f7fb fa4a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD30F, 0xE5);
 8005754:	21e5      	movs	r1, #229	@ 0xe5
 8005756:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 800575a:	f7fb fa45 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD310, 0x01);
 800575e:	2101      	movs	r1, #1
 8005760:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8005764:	f7fb fa40 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD311, 0x13);
 8005768:	2113      	movs	r1, #19
 800576a:	f24d 3011 	movw	r0, #54033	@ 0xd311
 800576e:	f7fb fa3b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD312, 0x01);
 8005772:	2101      	movs	r1, #1
 8005774:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8005778:	f7fb fa36 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD313, 0x54);
 800577c:	2154      	movs	r1, #84	@ 0x54
 800577e:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8005782:	f7fb fa31 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD314, 0x01);
 8005786:	2101      	movs	r1, #1
 8005788:	f24d 3014 	movw	r0, #54036	@ 0xd314
 800578c:	f7fb fa2c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD315, 0x82);
 8005790:	2182      	movs	r1, #130	@ 0x82
 8005792:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8005796:	f7fb fa27 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD316, 0x01);
 800579a:	2101      	movs	r1, #1
 800579c:	f24d 3016 	movw	r0, #54038	@ 0xd316
 80057a0:	f7fb fa22 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD317, 0xCA);
 80057a4:	21ca      	movs	r1, #202	@ 0xca
 80057a6:	f24d 3017 	movw	r0, #54039	@ 0xd317
 80057aa:	f7fb fa1d 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD318, 0x02);
 80057ae:	2102      	movs	r1, #2
 80057b0:	f24d 3018 	movw	r0, #54040	@ 0xd318
 80057b4:	f7fb fa18 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD319, 0x00);
 80057b8:	2100      	movs	r1, #0
 80057ba:	f24d 3019 	movw	r0, #54041	@ 0xd319
 80057be:	f7fb fa13 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD31A, 0x02);
 80057c2:	2102      	movs	r1, #2
 80057c4:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 80057c8:	f7fb fa0e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD31B, 0x01);
 80057cc:	2101      	movs	r1, #1
 80057ce:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 80057d2:	f7fb fa09 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD31C, 0x02);
 80057d6:	2102      	movs	r1, #2
 80057d8:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 80057dc:	f7fb fa04 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD31D, 0x34);
 80057e0:	2134      	movs	r1, #52	@ 0x34
 80057e2:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 80057e6:	f7fb f9ff 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD31E, 0x02);
 80057ea:	2102      	movs	r1, #2
 80057ec:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 80057f0:	f7fb f9fa 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD31F, 0x67);
 80057f4:	2167      	movs	r1, #103	@ 0x67
 80057f6:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 80057fa:	f7fb f9f5 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD320, 0x02);
 80057fe:	2102      	movs	r1, #2
 8005800:	f24d 3020 	movw	r0, #54048	@ 0xd320
 8005804:	f7fb f9f0 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD321, 0x84);
 8005808:	2184      	movs	r1, #132	@ 0x84
 800580a:	f24d 3021 	movw	r0, #54049	@ 0xd321
 800580e:	f7fb f9eb 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD322, 0x02);
 8005812:	2102      	movs	r1, #2
 8005814:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8005818:	f7fb f9e6 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD323, 0xA4);
 800581c:	21a4      	movs	r1, #164	@ 0xa4
 800581e:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8005822:	f7fb f9e1 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD324, 0x02);
 8005826:	2102      	movs	r1, #2
 8005828:	f24d 3024 	movw	r0, #54052	@ 0xd324
 800582c:	f7fb f9dc 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD325, 0xB7);
 8005830:	21b7      	movs	r1, #183	@ 0xb7
 8005832:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8005836:	f7fb f9d7 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD326, 0x02);
 800583a:	2102      	movs	r1, #2
 800583c:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8005840:	f7fb f9d2 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD327, 0xCF);
 8005844:	21cf      	movs	r1, #207	@ 0xcf
 8005846:	f24d 3027 	movw	r0, #54055	@ 0xd327
 800584a:	f7fb f9cd 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD328, 0x02);
 800584e:	2102      	movs	r1, #2
 8005850:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8005854:	f7fb f9c8 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD329, 0xDE);
 8005858:	21de      	movs	r1, #222	@ 0xde
 800585a:	f24d 3029 	movw	r0, #54057	@ 0xd329
 800585e:	f7fb f9c3 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD32A, 0x02);
 8005862:	2102      	movs	r1, #2
 8005864:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8005868:	f7fb f9be 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD32B, 0xF2);
 800586c:	21f2      	movs	r1, #242	@ 0xf2
 800586e:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8005872:	f7fb f9b9 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD32C, 0x02);
 8005876:	2102      	movs	r1, #2
 8005878:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 800587c:	f7fb f9b4 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD32D, 0xFE);
 8005880:	21fe      	movs	r1, #254	@ 0xfe
 8005882:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8005886:	f7fb f9af 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD32E, 0x03);
 800588a:	2103      	movs	r1, #3
 800588c:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8005890:	f7fb f9aa 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD32F, 0x10);
 8005894:	2110      	movs	r1, #16
 8005896:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 800589a:	f7fb f9a5 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD330, 0x03);
 800589e:	2103      	movs	r1, #3
 80058a0:	f24d 3030 	movw	r0, #54064	@ 0xd330
 80058a4:	f7fb f9a0 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD331, 0x33);
 80058a8:	2133      	movs	r1, #51	@ 0x33
 80058aa:	f24d 3031 	movw	r0, #54065	@ 0xd331
 80058ae:	f7fb f99b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD332, 0x03);
 80058b2:	2103      	movs	r1, #3
 80058b4:	f24d 3032 	movw	r0, #54066	@ 0xd332
 80058b8:	f7fb f996 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD333, 0x6D);
 80058bc:	216d      	movs	r1, #109	@ 0x6d
 80058be:	f24d 3033 	movw	r0, #54067	@ 0xd333
 80058c2:	f7fb f991 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD400, 0x00);
 80058c6:	2100      	movs	r1, #0
 80058c8:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 80058cc:	f7fb f98c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD401, 0x33);
 80058d0:	2133      	movs	r1, #51	@ 0x33
 80058d2:	f24d 4001 	movw	r0, #54273	@ 0xd401
 80058d6:	f7fb f987 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD402, 0x00);
 80058da:	2100      	movs	r1, #0
 80058dc:	f24d 4002 	movw	r0, #54274	@ 0xd402
 80058e0:	f7fb f982 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD403, 0x34);
 80058e4:	2134      	movs	r1, #52	@ 0x34
 80058e6:	f24d 4003 	movw	r0, #54275	@ 0xd403
 80058ea:	f7fb f97d 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD404, 0x00);
 80058ee:	2100      	movs	r1, #0
 80058f0:	f24d 4004 	movw	r0, #54276	@ 0xd404
 80058f4:	f7fb f978 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD405, 0x3A);
 80058f8:	213a      	movs	r1, #58	@ 0x3a
 80058fa:	f24d 4005 	movw	r0, #54277	@ 0xd405
 80058fe:	f7fb f973 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD406, 0x00);
 8005902:	2100      	movs	r1, #0
 8005904:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8005908:	f7fb f96e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD407, 0x4A);
 800590c:	214a      	movs	r1, #74	@ 0x4a
 800590e:	f24d 4007 	movw	r0, #54279	@ 0xd407
 8005912:	f7fb f969 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD408, 0x00);
 8005916:	2100      	movs	r1, #0
 8005918:	f24d 4008 	movw	r0, #54280	@ 0xd408
 800591c:	f7fb f964 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD409, 0x5C);
 8005920:	215c      	movs	r1, #92	@ 0x5c
 8005922:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8005926:	f7fb f95f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD40A, 0x00);
 800592a:	2100      	movs	r1, #0
 800592c:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8005930:	f7fb f95a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD40B, 0x81);
 8005934:	2181      	movs	r1, #129	@ 0x81
 8005936:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 800593a:	f7fb f955 	bl	8000be8 <lcd_write_reg>

        lcd_write_reg(0xD40C, 0x00);
 800593e:	2100      	movs	r1, #0
 8005940:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 8005944:	f7fb f950 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD40D, 0xA6);
 8005948:	21a6      	movs	r1, #166	@ 0xa6
 800594a:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 800594e:	f7fb f94b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD40E, 0x00);
 8005952:	2100      	movs	r1, #0
 8005954:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8005958:	f7fb f946 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD40F, 0xE5);
 800595c:	21e5      	movs	r1, #229	@ 0xe5
 800595e:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 8005962:	f7fb f941 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD410, 0x01);
 8005966:	2101      	movs	r1, #1
 8005968:	f24d 4010 	movw	r0, #54288	@ 0xd410
 800596c:	f7fb f93c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD411, 0x13);
 8005970:	2113      	movs	r1, #19
 8005972:	f24d 4011 	movw	r0, #54289	@ 0xd411
 8005976:	f7fb f937 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD412, 0x01);
 800597a:	2101      	movs	r1, #1
 800597c:	f24d 4012 	movw	r0, #54290	@ 0xd412
 8005980:	f7fb f932 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD413, 0x54);
 8005984:	2154      	movs	r1, #84	@ 0x54
 8005986:	f24d 4013 	movw	r0, #54291	@ 0xd413
 800598a:	f7fb f92d 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD414, 0x01);
 800598e:	2101      	movs	r1, #1
 8005990:	f24d 4014 	movw	r0, #54292	@ 0xd414
 8005994:	f7fb f928 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD415, 0x82);
 8005998:	2182      	movs	r1, #130	@ 0x82
 800599a:	f24d 4015 	movw	r0, #54293	@ 0xd415
 800599e:	f7fb f923 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD416, 0x01);
 80059a2:	2101      	movs	r1, #1
 80059a4:	f24d 4016 	movw	r0, #54294	@ 0xd416
 80059a8:	f7fb f91e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD417, 0xCA);
 80059ac:	21ca      	movs	r1, #202	@ 0xca
 80059ae:	f24d 4017 	movw	r0, #54295	@ 0xd417
 80059b2:	f7fb f919 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD418, 0x02);
 80059b6:	2102      	movs	r1, #2
 80059b8:	f24d 4018 	movw	r0, #54296	@ 0xd418
 80059bc:	f7fb f914 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD419, 0x00);
 80059c0:	2100      	movs	r1, #0
 80059c2:	f24d 4019 	movw	r0, #54297	@ 0xd419
 80059c6:	f7fb f90f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD41A, 0x02);
 80059ca:	2102      	movs	r1, #2
 80059cc:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 80059d0:	f7fb f90a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD41B, 0x01);
 80059d4:	2101      	movs	r1, #1
 80059d6:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 80059da:	f7fb f905 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD41C, 0x02);
 80059de:	2102      	movs	r1, #2
 80059e0:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 80059e4:	f7fb f900 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD41D, 0x34);
 80059e8:	2134      	movs	r1, #52	@ 0x34
 80059ea:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 80059ee:	f7fb f8fb 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD41E, 0x02);
 80059f2:	2102      	movs	r1, #2
 80059f4:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 80059f8:	f7fb f8f6 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD41F, 0x67);
 80059fc:	2167      	movs	r1, #103	@ 0x67
 80059fe:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 8005a02:	f7fb f8f1 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD420, 0x02);
 8005a06:	2102      	movs	r1, #2
 8005a08:	f24d 4020 	movw	r0, #54304	@ 0xd420
 8005a0c:	f7fb f8ec 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD421, 0x84);
 8005a10:	2184      	movs	r1, #132	@ 0x84
 8005a12:	f24d 4021 	movw	r0, #54305	@ 0xd421
 8005a16:	f7fb f8e7 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD422, 0x02);
 8005a1a:	2102      	movs	r1, #2
 8005a1c:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8005a20:	f7fb f8e2 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD423, 0xA4);
 8005a24:	21a4      	movs	r1, #164	@ 0xa4
 8005a26:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8005a2a:	f7fb f8dd 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD424, 0x02);
 8005a2e:	2102      	movs	r1, #2
 8005a30:	f24d 4024 	movw	r0, #54308	@ 0xd424
 8005a34:	f7fb f8d8 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD425, 0xB7);
 8005a38:	21b7      	movs	r1, #183	@ 0xb7
 8005a3a:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8005a3e:	f7fb f8d3 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD426, 0x02);
 8005a42:	2102      	movs	r1, #2
 8005a44:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8005a48:	f7fb f8ce 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD427, 0xCF);
 8005a4c:	21cf      	movs	r1, #207	@ 0xcf
 8005a4e:	f24d 4027 	movw	r0, #54311	@ 0xd427
 8005a52:	f7fb f8c9 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD428, 0x02);
 8005a56:	2102      	movs	r1, #2
 8005a58:	f24d 4028 	movw	r0, #54312	@ 0xd428
 8005a5c:	f7fb f8c4 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD429, 0xDE);
 8005a60:	21de      	movs	r1, #222	@ 0xde
 8005a62:	f24d 4029 	movw	r0, #54313	@ 0xd429
 8005a66:	f7fb f8bf 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD42A, 0x02);
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 8005a70:	f7fb f8ba 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD42B, 0xF2);
 8005a74:	21f2      	movs	r1, #242	@ 0xf2
 8005a76:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 8005a7a:	f7fb f8b5 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD42C, 0x02);
 8005a7e:	2102      	movs	r1, #2
 8005a80:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 8005a84:	f7fb f8b0 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD42D, 0xFE);
 8005a88:	21fe      	movs	r1, #254	@ 0xfe
 8005a8a:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 8005a8e:	f7fb f8ab 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD42E, 0x03);
 8005a92:	2103      	movs	r1, #3
 8005a94:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 8005a98:	f7fb f8a6 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD42F, 0x10);
 8005a9c:	2110      	movs	r1, #16
 8005a9e:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8005aa2:	f7fb f8a1 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD430, 0x03);
 8005aa6:	2103      	movs	r1, #3
 8005aa8:	f24d 4030 	movw	r0, #54320	@ 0xd430
 8005aac:	f7fb f89c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD431, 0x33);
 8005ab0:	2133      	movs	r1, #51	@ 0x33
 8005ab2:	f24d 4031 	movw	r0, #54321	@ 0xd431
 8005ab6:	f7fb f897 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD432, 0x03);
 8005aba:	2103      	movs	r1, #3
 8005abc:	f24d 4032 	movw	r0, #54322	@ 0xd432
 8005ac0:	f7fb f892 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD433, 0x6D);
 8005ac4:	216d      	movs	r1, #109	@ 0x6d
 8005ac6:	f24d 4033 	movw	r0, #54323	@ 0xd433
 8005aca:	f7fb f88d 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD500, 0x00);
 8005ace:	2100      	movs	r1, #0
 8005ad0:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 8005ad4:	f7fb f888 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD501, 0x33);
 8005ad8:	2133      	movs	r1, #51	@ 0x33
 8005ada:	f24d 5001 	movw	r0, #54529	@ 0xd501
 8005ade:	f7fb f883 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD502, 0x00);
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8005ae8:	f7fb f87e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD503, 0x34);
 8005aec:	2134      	movs	r1, #52	@ 0x34
 8005aee:	f24d 5003 	movw	r0, #54531	@ 0xd503
 8005af2:	f7fb f879 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD504, 0x00);
 8005af6:	2100      	movs	r1, #0
 8005af8:	f24d 5004 	movw	r0, #54532	@ 0xd504
 8005afc:	f7fb f874 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD505, 0x3A);
 8005b00:	213a      	movs	r1, #58	@ 0x3a
 8005b02:	f24d 5005 	movw	r0, #54533	@ 0xd505
 8005b06:	f7fb f86f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD506, 0x00);
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	f24d 5006 	movw	r0, #54534	@ 0xd506
 8005b10:	f7fb f86a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD507, 0x4A);
 8005b14:	214a      	movs	r1, #74	@ 0x4a
 8005b16:	f24d 5007 	movw	r0, #54535	@ 0xd507
 8005b1a:	f7fb f865 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD508, 0x00);
 8005b1e:	2100      	movs	r1, #0
 8005b20:	f24d 5008 	movw	r0, #54536	@ 0xd508
 8005b24:	f7fb f860 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD509, 0x5C);
 8005b28:	215c      	movs	r1, #92	@ 0x5c
 8005b2a:	f24d 5009 	movw	r0, #54537	@ 0xd509
 8005b2e:	f7fb f85b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD50A, 0x00);
 8005b32:	2100      	movs	r1, #0
 8005b34:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8005b38:	f7fb f856 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD50B, 0x81);
 8005b3c:	2181      	movs	r1, #129	@ 0x81
 8005b3e:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 8005b42:	f7fb f851 	bl	8000be8 <lcd_write_reg>

        lcd_write_reg(0xD50C, 0x00);
 8005b46:	2100      	movs	r1, #0
 8005b48:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 8005b4c:	f7fb f84c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD50D, 0xA6);
 8005b50:	21a6      	movs	r1, #166	@ 0xa6
 8005b52:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 8005b56:	f7fb f847 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD50E, 0x00);
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 8005b60:	f7fb f842 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD50F, 0xE5);
 8005b64:	21e5      	movs	r1, #229	@ 0xe5
 8005b66:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 8005b6a:	f7fb f83d 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD510, 0x01);
 8005b6e:	2101      	movs	r1, #1
 8005b70:	f24d 5010 	movw	r0, #54544	@ 0xd510
 8005b74:	f7fb f838 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD511, 0x13);
 8005b78:	2113      	movs	r1, #19
 8005b7a:	f24d 5011 	movw	r0, #54545	@ 0xd511
 8005b7e:	f7fb f833 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD512, 0x01);
 8005b82:	2101      	movs	r1, #1
 8005b84:	f24d 5012 	movw	r0, #54546	@ 0xd512
 8005b88:	f7fb f82e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD513, 0x54);
 8005b8c:	2154      	movs	r1, #84	@ 0x54
 8005b8e:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8005b92:	f7fb f829 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD514, 0x01);
 8005b96:	2101      	movs	r1, #1
 8005b98:	f24d 5014 	movw	r0, #54548	@ 0xd514
 8005b9c:	f7fb f824 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD515, 0x82);
 8005ba0:	2182      	movs	r1, #130	@ 0x82
 8005ba2:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8005ba6:	f7fb f81f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD516, 0x01);
 8005baa:	2101      	movs	r1, #1
 8005bac:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8005bb0:	f7fb f81a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD517, 0xCA);
 8005bb4:	21ca      	movs	r1, #202	@ 0xca
 8005bb6:	f24d 5017 	movw	r0, #54551	@ 0xd517
 8005bba:	f7fb f815 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD518, 0x02);
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	f24d 5018 	movw	r0, #54552	@ 0xd518
 8005bc4:	f7fb f810 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD519, 0x00);
 8005bc8:	2100      	movs	r1, #0
 8005bca:	f24d 5019 	movw	r0, #54553	@ 0xd519
 8005bce:	f7fb f80b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD51A, 0x02);
 8005bd2:	2102      	movs	r1, #2
 8005bd4:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8005bd8:	f7fb f806 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD51B, 0x01);
 8005bdc:	2101      	movs	r1, #1
 8005bde:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 8005be2:	f7fb f801 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD51C, 0x02);
 8005be6:	2102      	movs	r1, #2
 8005be8:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8005bec:	f7fa fffc 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD51D, 0x34);
 8005bf0:	2134      	movs	r1, #52	@ 0x34
 8005bf2:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 8005bf6:	f7fa fff7 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD51E, 0x02);
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 8005c00:	f7fa fff2 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD51F, 0x67);
 8005c04:	2167      	movs	r1, #103	@ 0x67
 8005c06:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 8005c0a:	f7fa ffed 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD520, 0x02);
 8005c0e:	2102      	movs	r1, #2
 8005c10:	f24d 5020 	movw	r0, #54560	@ 0xd520
 8005c14:	f7fa ffe8 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD521, 0x84);
 8005c18:	2184      	movs	r1, #132	@ 0x84
 8005c1a:	f24d 5021 	movw	r0, #54561	@ 0xd521
 8005c1e:	f7fa ffe3 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD522, 0x02);
 8005c22:	2102      	movs	r1, #2
 8005c24:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8005c28:	f7fa ffde 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD523, 0xA4);
 8005c2c:	21a4      	movs	r1, #164	@ 0xa4
 8005c2e:	f24d 5023 	movw	r0, #54563	@ 0xd523
 8005c32:	f7fa ffd9 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD524, 0x02);
 8005c36:	2102      	movs	r1, #2
 8005c38:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8005c3c:	f7fa ffd4 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD525, 0xB7);
 8005c40:	21b7      	movs	r1, #183	@ 0xb7
 8005c42:	f24d 5025 	movw	r0, #54565	@ 0xd525
 8005c46:	f7fa ffcf 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD526, 0x02);
 8005c4a:	2102      	movs	r1, #2
 8005c4c:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8005c50:	f7fa ffca 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD527, 0xCF);
 8005c54:	21cf      	movs	r1, #207	@ 0xcf
 8005c56:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8005c5a:	f7fa ffc5 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD528, 0x02);
 8005c5e:	2102      	movs	r1, #2
 8005c60:	f24d 5028 	movw	r0, #54568	@ 0xd528
 8005c64:	f7fa ffc0 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD529, 0xDE);
 8005c68:	21de      	movs	r1, #222	@ 0xde
 8005c6a:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8005c6e:	f7fa ffbb 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD52A, 0x02);
 8005c72:	2102      	movs	r1, #2
 8005c74:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 8005c78:	f7fa ffb6 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD52B, 0xF2);
 8005c7c:	21f2      	movs	r1, #242	@ 0xf2
 8005c7e:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8005c82:	f7fa ffb1 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD52C, 0x02);
 8005c86:	2102      	movs	r1, #2
 8005c88:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8005c8c:	f7fa ffac 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD52D, 0xFE);
 8005c90:	21fe      	movs	r1, #254	@ 0xfe
 8005c92:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 8005c96:	f7fa ffa7 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD52E, 0x03);
 8005c9a:	2103      	movs	r1, #3
 8005c9c:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8005ca0:	f7fa ffa2 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD52F, 0x10);
 8005ca4:	2110      	movs	r1, #16
 8005ca6:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8005caa:	f7fa ff9d 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD530, 0x03);
 8005cae:	2103      	movs	r1, #3
 8005cb0:	f24d 5030 	movw	r0, #54576	@ 0xd530
 8005cb4:	f7fa ff98 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD531, 0x33);
 8005cb8:	2133      	movs	r1, #51	@ 0x33
 8005cba:	f24d 5031 	movw	r0, #54577	@ 0xd531
 8005cbe:	f7fa ff93 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD532, 0x03);
 8005cc2:	2103      	movs	r1, #3
 8005cc4:	f24d 5032 	movw	r0, #54578	@ 0xd532
 8005cc8:	f7fa ff8e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD533, 0x6D);
 8005ccc:	216d      	movs	r1, #109	@ 0x6d
 8005cce:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8005cd2:	f7fa ff89 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD600, 0x00);
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8005cdc:	f7fa ff84 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD601, 0x33);
 8005ce0:	2133      	movs	r1, #51	@ 0x33
 8005ce2:	f24d 6001 	movw	r0, #54785	@ 0xd601
 8005ce6:	f7fa ff7f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD602, 0x00);
 8005cea:	2100      	movs	r1, #0
 8005cec:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8005cf0:	f7fa ff7a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD603, 0x34);
 8005cf4:	2134      	movs	r1, #52	@ 0x34
 8005cf6:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8005cfa:	f7fa ff75 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD604, 0x00);
 8005cfe:	2100      	movs	r1, #0
 8005d00:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8005d04:	f7fa ff70 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD605, 0x3A);
 8005d08:	213a      	movs	r1, #58	@ 0x3a
 8005d0a:	f24d 6005 	movw	r0, #54789	@ 0xd605
 8005d0e:	f7fa ff6b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD606, 0x00);
 8005d12:	2100      	movs	r1, #0
 8005d14:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8005d18:	f7fa ff66 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD607, 0x4A);
 8005d1c:	214a      	movs	r1, #74	@ 0x4a
 8005d1e:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8005d22:	f7fa ff61 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD608, 0x00);
 8005d26:	2100      	movs	r1, #0
 8005d28:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8005d2c:	f7fa ff5c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD609, 0x5C);
 8005d30:	215c      	movs	r1, #92	@ 0x5c
 8005d32:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8005d36:	f7fa ff57 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD60A, 0x00);
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8005d40:	f7fa ff52 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD60B, 0x81);
 8005d44:	2181      	movs	r1, #129	@ 0x81
 8005d46:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8005d4a:	f7fa ff4d 	bl	8000be8 <lcd_write_reg>

        lcd_write_reg(0xD60C, 0x00);
 8005d4e:	2100      	movs	r1, #0
 8005d50:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 8005d54:	f7fa ff48 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD60D, 0xA6);
 8005d58:	21a6      	movs	r1, #166	@ 0xa6
 8005d5a:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8005d5e:	f7fa ff43 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD60E, 0x00);
 8005d62:	2100      	movs	r1, #0
 8005d64:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 8005d68:	f7fa ff3e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD60F, 0xE5);
 8005d6c:	21e5      	movs	r1, #229	@ 0xe5
 8005d6e:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8005d72:	f7fa ff39 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD610, 0x01);
 8005d76:	2101      	movs	r1, #1
 8005d78:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8005d7c:	f7fa ff34 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD611, 0x13);
 8005d80:	2113      	movs	r1, #19
 8005d82:	f24d 6011 	movw	r0, #54801	@ 0xd611
 8005d86:	f7fa ff2f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD612, 0x01);
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	f24d 6012 	movw	r0, #54802	@ 0xd612
 8005d90:	f7fa ff2a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD613, 0x54);
 8005d94:	2154      	movs	r1, #84	@ 0x54
 8005d96:	f24d 6013 	movw	r0, #54803	@ 0xd613
 8005d9a:	f7fa ff25 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD614, 0x01);
 8005d9e:	2101      	movs	r1, #1
 8005da0:	f24d 6014 	movw	r0, #54804	@ 0xd614
 8005da4:	f7fa ff20 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD615, 0x82);
 8005da8:	2182      	movs	r1, #130	@ 0x82
 8005daa:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8005dae:	f7fa ff1b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD616, 0x01);
 8005db2:	2101      	movs	r1, #1
 8005db4:	f24d 6016 	movw	r0, #54806	@ 0xd616
 8005db8:	f7fa ff16 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD617, 0xCA);
 8005dbc:	21ca      	movs	r1, #202	@ 0xca
 8005dbe:	f24d 6017 	movw	r0, #54807	@ 0xd617
 8005dc2:	f7fa ff11 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD618, 0x02);
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	f24d 6018 	movw	r0, #54808	@ 0xd618
 8005dcc:	f7fa ff0c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD619, 0x00);
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	f24d 6019 	movw	r0, #54809	@ 0xd619
 8005dd6:	f7fa ff07 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD61A, 0x02);
 8005dda:	2102      	movs	r1, #2
 8005ddc:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8005de0:	f7fa ff02 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD61B, 0x01);
 8005de4:	2101      	movs	r1, #1
 8005de6:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 8005dea:	f7fa fefd 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD61C, 0x02);
 8005dee:	2102      	movs	r1, #2
 8005df0:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8005df4:	f7fa fef8 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD61D, 0x34);
 8005df8:	2134      	movs	r1, #52	@ 0x34
 8005dfa:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 8005dfe:	f7fa fef3 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD61E, 0x02);
 8005e02:	2102      	movs	r1, #2
 8005e04:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8005e08:	f7fa feee 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD61F, 0x67);
 8005e0c:	2167      	movs	r1, #103	@ 0x67
 8005e0e:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 8005e12:	f7fa fee9 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD620, 0x02);
 8005e16:	2102      	movs	r1, #2
 8005e18:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8005e1c:	f7fa fee4 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD621, 0x84);
 8005e20:	2184      	movs	r1, #132	@ 0x84
 8005e22:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8005e26:	f7fa fedf 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD622, 0x02);
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8005e30:	f7fa feda 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD623, 0xA4);
 8005e34:	21a4      	movs	r1, #164	@ 0xa4
 8005e36:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8005e3a:	f7fa fed5 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD624, 0x02);
 8005e3e:	2102      	movs	r1, #2
 8005e40:	f24d 6024 	movw	r0, #54820	@ 0xd624
 8005e44:	f7fa fed0 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD625, 0xB7);
 8005e48:	21b7      	movs	r1, #183	@ 0xb7
 8005e4a:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8005e4e:	f7fa fecb 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD626, 0x02);
 8005e52:	2102      	movs	r1, #2
 8005e54:	f24d 6026 	movw	r0, #54822	@ 0xd626
 8005e58:	f7fa fec6 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD627, 0xCF);
 8005e5c:	21cf      	movs	r1, #207	@ 0xcf
 8005e5e:	f24d 6027 	movw	r0, #54823	@ 0xd627
 8005e62:	f7fa fec1 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD628, 0x02);
 8005e66:	2102      	movs	r1, #2
 8005e68:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8005e6c:	f7fa febc 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD629, 0xDE);
 8005e70:	21de      	movs	r1, #222	@ 0xde
 8005e72:	f24d 6029 	movw	r0, #54825	@ 0xd629
 8005e76:	f7fa feb7 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD62A, 0x02);
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8005e80:	f7fa feb2 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD62B, 0xF2);
 8005e84:	21f2      	movs	r1, #242	@ 0xf2
 8005e86:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 8005e8a:	f7fa fead 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD62C, 0x02);
 8005e8e:	2102      	movs	r1, #2
 8005e90:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 8005e94:	f7fa fea8 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD62D, 0xFE);
 8005e98:	21fe      	movs	r1, #254	@ 0xfe
 8005e9a:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8005e9e:	f7fa fea3 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD62E, 0x03);
 8005ea2:	2103      	movs	r1, #3
 8005ea4:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 8005ea8:	f7fa fe9e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD62F, 0x10);
 8005eac:	2110      	movs	r1, #16
 8005eae:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8005eb2:	f7fa fe99 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD630, 0x03);
 8005eb6:	2103      	movs	r1, #3
 8005eb8:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8005ebc:	f7fa fe94 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD631, 0x33);
 8005ec0:	2133      	movs	r1, #51	@ 0x33
 8005ec2:	f24d 6031 	movw	r0, #54833	@ 0xd631
 8005ec6:	f7fa fe8f 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD632, 0x03);
 8005eca:	2103      	movs	r1, #3
 8005ecc:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8005ed0:	f7fa fe8a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xD633, 0x6D);
 8005ed4:	216d      	movs	r1, #109	@ 0x6d
 8005ed6:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8005eda:	f7fa fe85 	bl	8000be8 <lcd_write_reg>
        /* LV2 Page 0 enable */
        lcd_write_reg(0xF000, 0x55);
 8005ede:	2155      	movs	r1, #85	@ 0x55
 8005ee0:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8005ee4:	f7fa fe80 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8005ee8:	21aa      	movs	r1, #170	@ 0xaa
 8005eea:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8005eee:	f7fa fe7b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8005ef2:	2152      	movs	r1, #82	@ 0x52
 8005ef4:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8005ef8:	f7fa fe76 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8005efc:	2108      	movs	r1, #8
 8005efe:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8005f02:	f7fa fe71 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x00);
 8005f06:	2100      	movs	r1, #0
 8005f08:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8005f0c:	f7fa fe6c 	bl	8000be8 <lcd_write_reg>
        /* Display control */
        lcd_write_reg(0xB100, 0xCC);
 8005f10:	21cc      	movs	r1, #204	@ 0xcc
 8005f12:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8005f16:	f7fa fe67 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x00);
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8005f20:	f7fa fe62 	bl	8000be8 <lcd_write_reg>
        /* Source hold time */
        lcd_write_reg(0xB600, 0x05);
 8005f24:	2105      	movs	r1, #5
 8005f26:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8005f2a:	f7fa fe5d 	bl	8000be8 <lcd_write_reg>
        /* Gate EQ control */
        lcd_write_reg(0xB700, 0x70);
 8005f2e:	2170      	movs	r1, #112	@ 0x70
 8005f30:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8005f34:	f7fa fe58 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x70);
 8005f38:	2170      	movs	r1, #112	@ 0x70
 8005f3a:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8005f3e:	f7fa fe53 	bl	8000be8 <lcd_write_reg>
        /* Source EQ control (Mode 2) */
        lcd_write_reg(0xB800, 0x01);
 8005f42:	2101      	movs	r1, #1
 8005f44:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8005f48:	f7fa fe4e 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x03);
 8005f4c:	2103      	movs	r1, #3
 8005f4e:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8005f52:	f7fa fe49 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x03);
 8005f56:	2103      	movs	r1, #3
 8005f58:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8005f5c:	f7fa fe44 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xB803, 0x03);
 8005f60:	2103      	movs	r1, #3
 8005f62:	f64b 0003 	movw	r0, #47107	@ 0xb803
 8005f66:	f7fa fe3f 	bl	8000be8 <lcd_write_reg>
        /* Inversion mode (2-dot) */
        lcd_write_reg(0xBC00, 0x02);
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8005f70:	f7fa fe3a 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x00);
 8005f74:	2100      	movs	r1, #0
 8005f76:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8005f7a:	f7fa fe35 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8005f7e:	2100      	movs	r1, #0
 8005f80:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8005f84:	f7fa fe30 	bl	8000be8 <lcd_write_reg>
        /* Timing control 4H w/ 4-delay */
        lcd_write_reg(0xC900, 0xD0);
 8005f88:	21d0      	movs	r1, #208	@ 0xd0
 8005f8a:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 8005f8e:	f7fa fe2b 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xC901, 0x02);
 8005f92:	2102      	movs	r1, #2
 8005f94:	f64c 1001 	movw	r0, #51457	@ 0xc901
 8005f98:	f7fa fe26 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xC902, 0x50);
 8005f9c:	2150      	movs	r1, #80	@ 0x50
 8005f9e:	f64c 1002 	movw	r0, #51458	@ 0xc902
 8005fa2:	f7fa fe21 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xC903, 0x50);
 8005fa6:	2150      	movs	r1, #80	@ 0x50
 8005fa8:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8005fac:	f7fa fe1c 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0xC904, 0x50);
 8005fb0:	2150      	movs	r1, #80	@ 0x50
 8005fb2:	f64c 1004 	movw	r0, #51460	@ 0xc904
 8005fb6:	f7fa fe17 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0x3500, 0x00);
 8005fba:	2100      	movs	r1, #0
 8005fbc:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 8005fc0:	f7fa fe12 	bl	8000be8 <lcd_write_reg>
        lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8005fc4:	2155      	movs	r1, #85	@ 0x55
 8005fc6:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 8005fca:	f7fa fe0d 	bl	8000be8 <lcd_write_reg>
 8005fce:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8005fd2:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8006044 <lcd_init+0x422c>)
 8005fd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fdc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005fde:	4b19      	ldr	r3, [pc, #100]	@ (8006044 <lcd_init+0x422c>)
 8005fe0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005fe4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005fe6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	4b16      	ldr	r3, [pc, #88]	@ (8006048 <lcd_init+0x4230>)
 8005fee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005ff0:	4b14      	ldr	r3, [pc, #80]	@ (8006044 <lcd_init+0x422c>)
 8005ff2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005ff6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005ff8:	4b12      	ldr	r3, [pc, #72]	@ (8006044 <lcd_init+0x422c>)
 8005ffa:	2280      	movs	r2, #128	@ 0x80
 8005ffc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005ffe:	4b11      	ldr	r3, [pc, #68]	@ (8006044 <lcd_init+0x422c>)
 8006000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006004:	611a      	str	r2, [r3, #16]
}
 8006006:	bf00      	nop
 8006008:	f44f 5324 	mov.w	r3, #10496	@ 0x2900
 800600c:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006010:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <lcd_init+0x422c>)
 8006012:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006016:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006018:	4b0a      	ldr	r3, [pc, #40]	@ (8006044 <lcd_init+0x422c>)
 800601a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800601e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006020:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 8006024:	b29a      	uxth	r2, r3
 8006026:	4b08      	ldr	r3, [pc, #32]	@ (8006048 <lcd_init+0x4230>)
 8006028:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800602a:	4b06      	ldr	r3, [pc, #24]	@ (8006044 <lcd_init+0x422c>)
 800602c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006030:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006032:	4b04      	ldr	r3, [pc, #16]	@ (8006044 <lcd_init+0x422c>)
 8006034:	2280      	movs	r2, #128	@ 0x80
 8006036:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006038:	4b02      	ldr	r3, [pc, #8]	@ (8006044 <lcd_init+0x422c>)
 800603a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800603e:	611a      	str	r2, [r3, #16]
}
 8006040:	f000 be33 	b.w	8006caa <lcd_init+0x4e92>
 8006044:	40011000 	.word	0x40011000
 8006048:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x1100);
        //delay_us(120);
        lcd_wr_regno(0x2900);
    }
    else if (lcddev.id == 0x9806)
 800604c:	4bc3      	ldr	r3, [pc, #780]	@ (800635c <lcd_init+0x4544>)
 800604e:	889b      	ldrh	r3, [r3, #4]
 8006050:	f649 0206 	movw	r2, #38918	@ 0x9806
 8006054:	4293      	cmp	r3, r2
 8006056:	f040 8407 	bne.w	8006868 <lcd_init+0x4a50>
 800605a:	23ff      	movs	r3, #255	@ 0xff
 800605c:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006060:	4bbf      	ldr	r3, [pc, #764]	@ (8006360 <lcd_init+0x4548>)
 8006062:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006066:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006068:	4bbd      	ldr	r3, [pc, #756]	@ (8006360 <lcd_init+0x4548>)
 800606a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800606e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006070:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8006074:	b29a      	uxth	r2, r3
 8006076:	4bbb      	ldr	r3, [pc, #748]	@ (8006364 <lcd_init+0x454c>)
 8006078:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800607a:	4bb9      	ldr	r3, [pc, #740]	@ (8006360 <lcd_init+0x4548>)
 800607c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006080:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006082:	4bb7      	ldr	r3, [pc, #732]	@ (8006360 <lcd_init+0x4548>)
 8006084:	2280      	movs	r2, #128	@ 0x80
 8006086:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006088:	4bb5      	ldr	r3, [pc, #724]	@ (8006360 <lcd_init+0x4548>)
 800608a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800608e:	611a      	str	r2, [r3, #16]
}
 8006090:	bf00      	nop
    {
       // lcd_ex_ili9806_reginit();   /* ִ��ILI9806��ʼ�� */
        lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
        lcd_wr_xdata(0xFF);
 8006092:	20ff      	movs	r0, #255	@ 0xff
 8006094:	f7fa fd84 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x98);
 8006098:	2098      	movs	r0, #152	@ 0x98
 800609a:	f7fa fd81 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 800609e:	2006      	movs	r0, #6
 80060a0:	f7fa fd7e 	bl	8000ba0 <lcd_wr_xdata>
 80060a4:	23bc      	movs	r3, #188	@ 0xbc
 80060a6:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80060aa:	4bad      	ldr	r3, [pc, #692]	@ (8006360 <lcd_init+0x4548>)
 80060ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060b0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80060b2:	4bab      	ldr	r3, [pc, #684]	@ (8006360 <lcd_init+0x4548>)
 80060b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060b8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80060ba:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80060be:	b29a      	uxth	r2, r3
 80060c0:	4ba8      	ldr	r3, [pc, #672]	@ (8006364 <lcd_init+0x454c>)
 80060c2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80060c4:	4ba6      	ldr	r3, [pc, #664]	@ (8006360 <lcd_init+0x4548>)
 80060c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80060ca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80060cc:	4ba4      	ldr	r3, [pc, #656]	@ (8006360 <lcd_init+0x4548>)
 80060ce:	2280      	movs	r2, #128	@ 0x80
 80060d0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80060d2:	4ba3      	ldr	r3, [pc, #652]	@ (8006360 <lcd_init+0x4548>)
 80060d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060d8:	611a      	str	r2, [r3, #16]
}
 80060da:	bf00      	nop

        lcd_wr_regno(0xBC); /* GIP 1 */
        lcd_wr_xdata(0x01);
 80060dc:	2001      	movs	r0, #1
 80060de:	f7fa fd5f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 80060e2:	200f      	movs	r0, #15
 80060e4:	f7fa fd5c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 80060e8:	2061      	movs	r0, #97	@ 0x61
 80060ea:	f7fa fd59 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80060ee:	20ff      	movs	r0, #255	@ 0xff
 80060f0:	f7fa fd56 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80060f4:	2001      	movs	r0, #1
 80060f6:	f7fa fd53 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80060fa:	2001      	movs	r0, #1
 80060fc:	f7fa fd50 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8006100:	200b      	movs	r0, #11
 8006102:	f7fa fd4d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8006106:	2010      	movs	r0, #16
 8006108:	f7fa fd4a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 800610c:	2037      	movs	r0, #55	@ 0x37
 800610e:	f7fa fd47 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x63);
 8006112:	2063      	movs	r0, #99	@ 0x63
 8006114:	f7fa fd44 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006118:	20ff      	movs	r0, #255	@ 0xff
 800611a:	f7fa fd41 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 800611e:	20ff      	movs	r0, #255	@ 0xff
 8006120:	f7fa fd3e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006124:	2001      	movs	r0, #1
 8006126:	f7fa fd3b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800612a:	2001      	movs	r0, #1
 800612c:	f7fa fd38 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006130:	2000      	movs	r0, #0
 8006132:	f7fa fd35 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006136:	2000      	movs	r0, #0
 8006138:	f7fa fd32 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 800613c:	20ff      	movs	r0, #255	@ 0xff
 800613e:	f7fa fd2f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8006142:	2052      	movs	r0, #82	@ 0x52
 8006144:	f7fa fd2c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006148:	2001      	movs	r0, #1
 800614a:	f7fa fd29 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800614e:	2000      	movs	r0, #0
 8006150:	f7fa fd26 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8006154:	2040      	movs	r0, #64	@ 0x40
 8006156:	f7fa fd23 	bl	8000ba0 <lcd_wr_xdata>
 800615a:	23bd      	movs	r3, #189	@ 0xbd
 800615c:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006160:	4b7f      	ldr	r3, [pc, #508]	@ (8006360 <lcd_init+0x4548>)
 8006162:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006166:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006168:	4b7d      	ldr	r3, [pc, #500]	@ (8006360 <lcd_init+0x4548>)
 800616a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800616e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006170:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8006174:	b29a      	uxth	r2, r3
 8006176:	4b7b      	ldr	r3, [pc, #492]	@ (8006364 <lcd_init+0x454c>)
 8006178:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800617a:	4b79      	ldr	r3, [pc, #484]	@ (8006360 <lcd_init+0x4548>)
 800617c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006180:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006182:	4b77      	ldr	r3, [pc, #476]	@ (8006360 <lcd_init+0x4548>)
 8006184:	2280      	movs	r2, #128	@ 0x80
 8006186:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006188:	4b75      	ldr	r3, [pc, #468]	@ (8006360 <lcd_init+0x4548>)
 800618a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800618e:	611a      	str	r2, [r3, #16]
}
 8006190:	bf00      	nop

        lcd_wr_regno(0xBD); /* GIP 2 */
        lcd_wr_xdata(0x01);
 8006192:	2001      	movs	r0, #1
 8006194:	f7fa fd04 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8006198:	2023      	movs	r0, #35	@ 0x23
 800619a:	f7fa fd01 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 800619e:	2045      	movs	r0, #69	@ 0x45
 80061a0:	f7fa fcfe 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80061a4:	2067      	movs	r0, #103	@ 0x67
 80061a6:	f7fa fcfb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80061aa:	2001      	movs	r0, #1
 80061ac:	f7fa fcf8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80061b0:	2023      	movs	r0, #35	@ 0x23
 80061b2:	f7fa fcf5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80061b6:	2045      	movs	r0, #69	@ 0x45
 80061b8:	f7fa fcf2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80061bc:	2067      	movs	r0, #103	@ 0x67
 80061be:	f7fa fcef 	bl	8000ba0 <lcd_wr_xdata>
 80061c2:	23be      	movs	r3, #190	@ 0xbe
 80061c4:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80061c8:	4b65      	ldr	r3, [pc, #404]	@ (8006360 <lcd_init+0x4548>)
 80061ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061ce:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80061d0:	4b63      	ldr	r3, [pc, #396]	@ (8006360 <lcd_init+0x4548>)
 80061d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80061d6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80061d8:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 80061dc:	b29a      	uxth	r2, r3
 80061de:	4b61      	ldr	r3, [pc, #388]	@ (8006364 <lcd_init+0x454c>)
 80061e0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80061e2:	4b5f      	ldr	r3, [pc, #380]	@ (8006360 <lcd_init+0x4548>)
 80061e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80061e8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80061ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006360 <lcd_init+0x4548>)
 80061ec:	2280      	movs	r2, #128	@ 0x80
 80061ee:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80061f0:	4b5b      	ldr	r3, [pc, #364]	@ (8006360 <lcd_init+0x4548>)
 80061f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061f6:	611a      	str	r2, [r3, #16]
}
 80061f8:	bf00      	nop

        lcd_wr_regno(0xBE); /* GIP 3 */
        lcd_wr_xdata(0x00);
 80061fa:	2000      	movs	r0, #0
 80061fc:	f7fa fcd0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006200:	2001      	movs	r0, #1
 8006202:	f7fa fccd 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xAB);
 8006206:	20ab      	movs	r0, #171	@ 0xab
 8006208:	f7fa fcca 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x60);
 800620c:	2060      	movs	r0, #96	@ 0x60
 800620e:	f7fa fcc7 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006212:	2022      	movs	r0, #34	@ 0x22
 8006214:	f7fa fcc4 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006218:	2022      	movs	r0, #34	@ 0x22
 800621a:	f7fa fcc1 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 800621e:	2022      	movs	r0, #34	@ 0x22
 8006220:	f7fa fcbe 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006224:	2022      	movs	r0, #34	@ 0x22
 8006226:	f7fa fcbb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 800622a:	2022      	movs	r0, #34	@ 0x22
 800622c:	f7fa fcb8 	bl	8000ba0 <lcd_wr_xdata>
 8006230:	23c7      	movs	r3, #199	@ 0xc7
 8006232:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006236:	4b4a      	ldr	r3, [pc, #296]	@ (8006360 <lcd_init+0x4548>)
 8006238:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800623c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800623e:	4b48      	ldr	r3, [pc, #288]	@ (8006360 <lcd_init+0x4548>)
 8006240:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006244:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006246:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800624a:	b29a      	uxth	r2, r3
 800624c:	4b45      	ldr	r3, [pc, #276]	@ (8006364 <lcd_init+0x454c>)
 800624e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006250:	4b43      	ldr	r3, [pc, #268]	@ (8006360 <lcd_init+0x4548>)
 8006252:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006256:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006258:	4b41      	ldr	r3, [pc, #260]	@ (8006360 <lcd_init+0x4548>)
 800625a:	2280      	movs	r2, #128	@ 0x80
 800625c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800625e:	4b40      	ldr	r3, [pc, #256]	@ (8006360 <lcd_init+0x4548>)
 8006260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006264:	611a      	str	r2, [r3, #16]
}
 8006266:	bf00      	nop

        lcd_wr_regno(0xC7); /* VCOM Control */
        lcd_wr_xdata(0x36);
 8006268:	2036      	movs	r0, #54	@ 0x36
 800626a:	f7fa fc99 	bl	8000ba0 <lcd_wr_xdata>
 800626e:	23ed      	movs	r3, #237	@ 0xed
 8006270:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006274:	4b3a      	ldr	r3, [pc, #232]	@ (8006360 <lcd_init+0x4548>)
 8006276:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800627a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800627c:	4b38      	ldr	r3, [pc, #224]	@ (8006360 <lcd_init+0x4548>)
 800627e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006282:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006284:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8006288:	b29a      	uxth	r2, r3
 800628a:	4b36      	ldr	r3, [pc, #216]	@ (8006364 <lcd_init+0x454c>)
 800628c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800628e:	4b34      	ldr	r3, [pc, #208]	@ (8006360 <lcd_init+0x4548>)
 8006290:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006294:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006296:	4b32      	ldr	r3, [pc, #200]	@ (8006360 <lcd_init+0x4548>)
 8006298:	2280      	movs	r2, #128	@ 0x80
 800629a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800629c:	4b30      	ldr	r3, [pc, #192]	@ (8006360 <lcd_init+0x4548>)
 800629e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062a2:	611a      	str	r2, [r3, #16]
}
 80062a4:	bf00      	nop

        lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
        lcd_wr_xdata(0x7F);
 80062a6:	207f      	movs	r0, #127	@ 0x7f
 80062a8:	f7fa fc7a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 80062ac:	200f      	movs	r0, #15
 80062ae:	f7fa fc77 	bl	8000ba0 <lcd_wr_xdata>
 80062b2:	23c0      	movs	r3, #192	@ 0xc0
 80062b4:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80062b8:	4b29      	ldr	r3, [pc, #164]	@ (8006360 <lcd_init+0x4548>)
 80062ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062be:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80062c0:	4b27      	ldr	r3, [pc, #156]	@ (8006360 <lcd_init+0x4548>)
 80062c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80062c6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80062c8:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	4b25      	ldr	r3, [pc, #148]	@ (8006364 <lcd_init+0x454c>)
 80062d0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80062d2:	4b23      	ldr	r3, [pc, #140]	@ (8006360 <lcd_init+0x4548>)
 80062d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80062d8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80062da:	4b21      	ldr	r3, [pc, #132]	@ (8006360 <lcd_init+0x4548>)
 80062dc:	2280      	movs	r2, #128	@ 0x80
 80062de:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80062e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006360 <lcd_init+0x4548>)
 80062e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062e6:	611a      	str	r2, [r3, #16]
}
 80062e8:	bf00      	nop

        lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
        lcd_wr_xdata(0x0F);
 80062ea:	200f      	movs	r0, #15
 80062ec:	f7fa fc58 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 80062f0:	200b      	movs	r0, #11
 80062f2:	f7fa fc55 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* VGH 15V,VGLO-10V */
 80062f6:	200a      	movs	r0, #10
 80062f8:	f7fa fc52 	bl	8000ba0 <lcd_wr_xdata>
 80062fc:	23fc      	movs	r3, #252	@ 0xfc
 80062fe:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006302:	4b17      	ldr	r3, [pc, #92]	@ (8006360 <lcd_init+0x4548>)
 8006304:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006308:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800630a:	4b15      	ldr	r3, [pc, #84]	@ (8006360 <lcd_init+0x4548>)
 800630c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006310:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006312:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8006316:	b29a      	uxth	r2, r3
 8006318:	4b12      	ldr	r3, [pc, #72]	@ (8006364 <lcd_init+0x454c>)
 800631a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800631c:	4b10      	ldr	r3, [pc, #64]	@ (8006360 <lcd_init+0x4548>)
 800631e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006322:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006324:	4b0e      	ldr	r3, [pc, #56]	@ (8006360 <lcd_init+0x4548>)
 8006326:	2280      	movs	r2, #128	@ 0x80
 8006328:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800632a:	4b0d      	ldr	r3, [pc, #52]	@ (8006360 <lcd_init+0x4548>)
 800632c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006330:	611a      	str	r2, [r3, #16]
}
 8006332:	bf00      	nop

        lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
        lcd_wr_xdata(0x08);
 8006334:	2008      	movs	r0, #8
 8006336:	f7fa fc33 	bl	8000ba0 <lcd_wr_xdata>
 800633a:	23df      	movs	r3, #223	@ 0xdf
 800633c:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006340:	4b07      	ldr	r3, [pc, #28]	@ (8006360 <lcd_init+0x4548>)
 8006342:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006346:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006348:	4b05      	ldr	r3, [pc, #20]	@ (8006360 <lcd_init+0x4548>)
 800634a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800634e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006350:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8006354:	b29a      	uxth	r2, r3
 8006356:	4b03      	ldr	r3, [pc, #12]	@ (8006364 <lcd_init+0x454c>)
 8006358:	60da      	str	r2, [r3, #12]
 800635a:	e005      	b.n	8006368 <lcd_init+0x4550>
 800635c:	200001f4 	.word	0x200001f4
 8006360:	40011000 	.word	0x40011000
 8006364:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 8006368:	4bc7      	ldr	r3, [pc, #796]	@ (8006688 <lcd_init+0x4870>)
 800636a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800636e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006370:	4bc5      	ldr	r3, [pc, #788]	@ (8006688 <lcd_init+0x4870>)
 8006372:	2280      	movs	r2, #128	@ 0x80
 8006374:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006376:	4bc4      	ldr	r3, [pc, #784]	@ (8006688 <lcd_init+0x4870>)
 8006378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800637c:	611a      	str	r2, [r3, #16]
}
 800637e:	bf00      	nop

        lcd_wr_regno(0XDF);
        lcd_wr_xdata(0x00);
 8006380:	2000      	movs	r0, #0
 8006382:	f7fa fc0d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006386:	2000      	movs	r0, #0
 8006388:	f7fa fc0a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800638c:	2000      	movs	r0, #0
 800638e:	f7fa fc07 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006392:	2000      	movs	r0, #0
 8006394:	f7fa fc04 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006398:	2000      	movs	r0, #0
 800639a:	f7fa fc01 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 800639e:	2020      	movs	r0, #32
 80063a0:	f7fa fbfe 	bl	8000ba0 <lcd_wr_xdata>
 80063a4:	23f3      	movs	r3, #243	@ 0xf3
 80063a6:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80063aa:	4bb7      	ldr	r3, [pc, #732]	@ (8006688 <lcd_init+0x4870>)
 80063ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063b0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80063b2:	4bb5      	ldr	r3, [pc, #724]	@ (8006688 <lcd_init+0x4870>)
 80063b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80063b8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80063ba:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80063be:	b29a      	uxth	r2, r3
 80063c0:	4bb2      	ldr	r3, [pc, #712]	@ (800668c <lcd_init+0x4874>)
 80063c2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80063c4:	4bb0      	ldr	r3, [pc, #704]	@ (8006688 <lcd_init+0x4870>)
 80063c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80063ca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80063cc:	4bae      	ldr	r3, [pc, #696]	@ (8006688 <lcd_init+0x4870>)
 80063ce:	2280      	movs	r2, #128	@ 0x80
 80063d0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80063d2:	4bad      	ldr	r3, [pc, #692]	@ (8006688 <lcd_init+0x4870>)
 80063d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063d8:	611a      	str	r2, [r3, #16]
}
 80063da:	bf00      	nop

        lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
        lcd_wr_xdata(0x74);
 80063dc:	2074      	movs	r0, #116	@ 0x74
 80063de:	f7fa fbdf 	bl	8000ba0 <lcd_wr_xdata>
 80063e2:	23b4      	movs	r3, #180	@ 0xb4
 80063e4:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80063e8:	4ba7      	ldr	r3, [pc, #668]	@ (8006688 <lcd_init+0x4870>)
 80063ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063ee:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80063f0:	4ba5      	ldr	r3, [pc, #660]	@ (8006688 <lcd_init+0x4870>)
 80063f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80063f6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80063f8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	4ba3      	ldr	r3, [pc, #652]	@ (800668c <lcd_init+0x4874>)
 8006400:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006402:	4ba1      	ldr	r3, [pc, #644]	@ (8006688 <lcd_init+0x4870>)
 8006404:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006408:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800640a:	4b9f      	ldr	r3, [pc, #636]	@ (8006688 <lcd_init+0x4870>)
 800640c:	2280      	movs	r2, #128	@ 0x80
 800640e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006410:	4b9d      	ldr	r3, [pc, #628]	@ (8006688 <lcd_init+0x4870>)
 8006412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006416:	611a      	str	r2, [r3, #16]
}
 8006418:	bf00      	nop

        lcd_wr_regno(0xB4); /* Inversion Type */
        lcd_wr_xdata(0x00);  /* 02 */
 800641a:	2000      	movs	r0, #0
 800641c:	f7fa fbc0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006420:	2000      	movs	r0, #0
 8006422:	f7fa fbbd 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006426:	2000      	movs	r0, #0
 8006428:	f7fa fbba 	bl	8000ba0 <lcd_wr_xdata>
 800642c:	23f7      	movs	r3, #247	@ 0xf7
 800642e:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006432:	4b95      	ldr	r3, [pc, #596]	@ (8006688 <lcd_init+0x4870>)
 8006434:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006438:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800643a:	4b93      	ldr	r3, [pc, #588]	@ (8006688 <lcd_init+0x4870>)
 800643c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006440:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006442:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 8006446:	b29a      	uxth	r2, r3
 8006448:	4b90      	ldr	r3, [pc, #576]	@ (800668c <lcd_init+0x4874>)
 800644a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800644c:	4b8e      	ldr	r3, [pc, #568]	@ (8006688 <lcd_init+0x4870>)
 800644e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006452:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006454:	4b8c      	ldr	r3, [pc, #560]	@ (8006688 <lcd_init+0x4870>)
 8006456:	2280      	movs	r2, #128	@ 0x80
 8006458:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800645a:	4b8b      	ldr	r3, [pc, #556]	@ (8006688 <lcd_init+0x4870>)
 800645c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006460:	611a      	str	r2, [r3, #16]
}
 8006462:	bf00      	nop

        lcd_wr_regno(0xF7); /* Resolution Control */
        lcd_wr_xdata(0x82);  /* 480*800 */
 8006464:	2082      	movs	r0, #130	@ 0x82
 8006466:	f7fa fb9b 	bl	8000ba0 <lcd_wr_xdata>
 800646a:	23b1      	movs	r3, #177	@ 0xb1
 800646c:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006470:	4b85      	ldr	r3, [pc, #532]	@ (8006688 <lcd_init+0x4870>)
 8006472:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006476:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006478:	4b83      	ldr	r3, [pc, #524]	@ (8006688 <lcd_init+0x4870>)
 800647a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800647e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006480:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8006484:	b29a      	uxth	r2, r3
 8006486:	4b81      	ldr	r3, [pc, #516]	@ (800668c <lcd_init+0x4874>)
 8006488:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800648a:	4b7f      	ldr	r3, [pc, #508]	@ (8006688 <lcd_init+0x4870>)
 800648c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006490:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006492:	4b7d      	ldr	r3, [pc, #500]	@ (8006688 <lcd_init+0x4870>)
 8006494:	2280      	movs	r2, #128	@ 0x80
 8006496:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006498:	4b7b      	ldr	r3, [pc, #492]	@ (8006688 <lcd_init+0x4870>)
 800649a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800649e:	611a      	str	r2, [r3, #16]
}
 80064a0:	bf00      	nop

        lcd_wr_regno(0xB1); /* FRAME RATE Setting */
        lcd_wr_xdata(0x00);
 80064a2:	2000      	movs	r0, #0
 80064a4:	f7fa fb7c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 80064a8:	2013      	movs	r0, #19
 80064aa:	f7fa fb79 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 80064ae:	2013      	movs	r0, #19
 80064b0:	f7fa fb76 	bl	8000ba0 <lcd_wr_xdata>
 80064b4:	23f2      	movs	r3, #242	@ 0xf2
 80064b6:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80064ba:	4b73      	ldr	r3, [pc, #460]	@ (8006688 <lcd_init+0x4870>)
 80064bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064c0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80064c2:	4b71      	ldr	r3, [pc, #452]	@ (8006688 <lcd_init+0x4870>)
 80064c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80064c8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80064ca:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	4b6e      	ldr	r3, [pc, #440]	@ (800668c <lcd_init+0x4874>)
 80064d2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80064d4:	4b6c      	ldr	r3, [pc, #432]	@ (8006688 <lcd_init+0x4870>)
 80064d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80064da:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80064dc:	4b6a      	ldr	r3, [pc, #424]	@ (8006688 <lcd_init+0x4870>)
 80064de:	2280      	movs	r2, #128	@ 0x80
 80064e0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80064e2:	4b69      	ldr	r3, [pc, #420]	@ (8006688 <lcd_init+0x4870>)
 80064e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064e8:	611a      	str	r2, [r3, #16]
}
 80064ea:	bf00      	nop

        lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
        lcd_wr_xdata(0x80);
 80064ec:	2080      	movs	r0, #128	@ 0x80
 80064ee:	f7fa fb57 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 80064f2:	2004      	movs	r0, #4
 80064f4:	f7fa fb54 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 80064f8:	2040      	movs	r0, #64	@ 0x40
 80064fa:	f7fa fb51 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80064fe:	2028      	movs	r0, #40	@ 0x28
 8006500:	f7fa fb4e 	bl	8000ba0 <lcd_wr_xdata>
 8006504:	23c1      	movs	r3, #193	@ 0xc1
 8006506:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800650a:	4b5f      	ldr	r3, [pc, #380]	@ (8006688 <lcd_init+0x4870>)
 800650c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006510:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006512:	4b5d      	ldr	r3, [pc, #372]	@ (8006688 <lcd_init+0x4870>)
 8006514:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006518:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800651a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 800651e:	b29a      	uxth	r2, r3
 8006520:	4b5a      	ldr	r3, [pc, #360]	@ (800668c <lcd_init+0x4874>)
 8006522:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006524:	4b58      	ldr	r3, [pc, #352]	@ (8006688 <lcd_init+0x4870>)
 8006526:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800652a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800652c:	4b56      	ldr	r3, [pc, #344]	@ (8006688 <lcd_init+0x4870>)
 800652e:	2280      	movs	r2, #128	@ 0x80
 8006530:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006532:	4b55      	ldr	r3, [pc, #340]	@ (8006688 <lcd_init+0x4870>)
 8006534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006538:	611a      	str	r2, [r3, #16]
}
 800653a:	bf00      	nop

        lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
        lcd_wr_xdata(0x17);
 800653c:	2017      	movs	r0, #23
 800653e:	f7fa fb2f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMP */
 8006542:	2088      	movs	r0, #136	@ 0x88
 8006544:	f7fa fb2c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMN */
 8006548:	2088      	movs	r0, #136	@ 0x88
 800654a:	f7fa fb29 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 800654e:	2020      	movs	r0, #32
 8006550:	f7fa fb26 	bl	8000ba0 <lcd_wr_xdata>
 8006554:	23e0      	movs	r3, #224	@ 0xe0
 8006556:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800655a:	4b4b      	ldr	r3, [pc, #300]	@ (8006688 <lcd_init+0x4870>)
 800655c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006560:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006562:	4b49      	ldr	r3, [pc, #292]	@ (8006688 <lcd_init+0x4870>)
 8006564:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006568:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800656a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800656e:	b29a      	uxth	r2, r3
 8006570:	4b46      	ldr	r3, [pc, #280]	@ (800668c <lcd_init+0x4874>)
 8006572:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006574:	4b44      	ldr	r3, [pc, #272]	@ (8006688 <lcd_init+0x4870>)
 8006576:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800657a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800657c:	4b42      	ldr	r3, [pc, #264]	@ (8006688 <lcd_init+0x4870>)
 800657e:	2280      	movs	r2, #128	@ 0x80
 8006580:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006582:	4b41      	ldr	r3, [pc, #260]	@ (8006688 <lcd_init+0x4870>)
 8006584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006588:	611a      	str	r2, [r3, #16]
}
 800658a:	bf00      	nop

        lcd_wr_regno(0xE0); /* Positive Gamma Control */
        lcd_wr_xdata(0x00);  /* P1 */
 800658c:	2000      	movs	r0, #0
 800658e:	f7fa fb07 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P2 */
 8006592:	200a      	movs	r0, #10
 8006594:	f7fa fb04 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);  /* P3 */
 8006598:	2012      	movs	r0, #18
 800659a:	f7fa fb01 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P4 */
 800659e:	2010      	movs	r0, #16
 80065a0:	f7fa fafe 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 80065a4:	200e      	movs	r0, #14
 80065a6:	f7fa fafb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);  /* P6 */
 80065aa:	2020      	movs	r0, #32
 80065ac:	f7fa faf8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xCC);  /* P7 */
 80065b0:	20cc      	movs	r0, #204	@ 0xcc
 80065b2:	f7fa faf5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);  /* P8 */
 80065b6:	2007      	movs	r0, #7
 80065b8:	f7fa faf2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 80065bc:	2006      	movs	r0, #6
 80065be:	f7fa faef 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P10 */
 80065c2:	200b      	movs	r0, #11
 80065c4:	f7fa faec 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P11 */
 80065c8:	200e      	movs	r0, #14
 80065ca:	f7fa fae9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P12 */
 80065ce:	200f      	movs	r0, #15
 80065d0:	f7fa fae6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P13 */
 80065d4:	200d      	movs	r0, #13
 80065d6:	f7fa fae3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 80065da:	2015      	movs	r0, #21
 80065dc:	f7fa fae0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P15 */
 80065e0:	2010      	movs	r0, #16
 80065e2:	f7fa fadd 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 80065e6:	2000      	movs	r0, #0
 80065e8:	f7fa fada 	bl	8000ba0 <lcd_wr_xdata>
 80065ec:	23e1      	movs	r3, #225	@ 0xe1
 80065ee:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80065f2:	4b25      	ldr	r3, [pc, #148]	@ (8006688 <lcd_init+0x4870>)
 80065f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065f8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80065fa:	4b23      	ldr	r3, [pc, #140]	@ (8006688 <lcd_init+0x4870>)
 80065fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006600:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006602:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8006606:	b29a      	uxth	r2, r3
 8006608:	4b20      	ldr	r3, [pc, #128]	@ (800668c <lcd_init+0x4874>)
 800660a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800660c:	4b1e      	ldr	r3, [pc, #120]	@ (8006688 <lcd_init+0x4870>)
 800660e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006612:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006614:	4b1c      	ldr	r3, [pc, #112]	@ (8006688 <lcd_init+0x4870>)
 8006616:	2280      	movs	r2, #128	@ 0x80
 8006618:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800661a:	4b1b      	ldr	r3, [pc, #108]	@ (8006688 <lcd_init+0x4870>)
 800661c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006620:	611a      	str	r2, [r3, #16]
}
 8006622:	bf00      	nop

        lcd_wr_regno(0xE1); /* Negative Gamma Correction */
        lcd_wr_xdata(0x00);  /* P1 */
 8006624:	2000      	movs	r0, #0
 8006626:	f7fa fabb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P2 */
 800662a:	200b      	movs	r0, #11
 800662c:	f7fa fab8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);  /* P3 */
 8006630:	2013      	movs	r0, #19
 8006632:	f7fa fab5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P4 */
 8006636:	200d      	movs	r0, #13
 8006638:	f7fa fab2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 800663c:	200e      	movs	r0, #14
 800663e:	f7fa faaf 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);  /* P6 */
 8006642:	201b      	movs	r0, #27
 8006644:	f7fa faac 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x71);  /* P7 */
 8006648:	2071      	movs	r0, #113	@ 0x71
 800664a:	f7fa faa9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P8 */
 800664e:	2006      	movs	r0, #6
 8006650:	f7fa faa6 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 8006654:	2006      	movs	r0, #6
 8006656:	f7fa faa3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P10 */
 800665a:	200a      	movs	r0, #10
 800665c:	f7fa faa0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P11 */
 8006660:	200f      	movs	r0, #15
 8006662:	f7fa fa9d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P12 */
 8006666:	200e      	movs	r0, #14
 8006668:	f7fa fa9a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P13 */
 800666c:	200f      	movs	r0, #15
 800666e:	f7fa fa97 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 8006672:	2015      	movs	r0, #21
 8006674:	f7fa fa94 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);  /* P15 */
 8006678:	200c      	movs	r0, #12
 800667a:	f7fa fa91 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 800667e:	2000      	movs	r0, #0
 8006680:	f7fa fa8e 	bl	8000ba0 <lcd_wr_xdata>
 8006684:	e004      	b.n	8006690 <lcd_init+0x4878>
 8006686:	bf00      	nop
 8006688:	40011000 	.word	0x40011000
 800668c:	40010c00 	.word	0x40010c00
 8006690:	232a      	movs	r3, #42	@ 0x2a
 8006692:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006696:	4b72      	ldr	r3, [pc, #456]	@ (8006860 <lcd_init+0x4a48>)
 8006698:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800669c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800669e:	4b70      	ldr	r3, [pc, #448]	@ (8006860 <lcd_init+0x4a48>)
 80066a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066a6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	4b6d      	ldr	r3, [pc, #436]	@ (8006864 <lcd_init+0x4a4c>)
 80066ae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80066b0:	4b6b      	ldr	r3, [pc, #428]	@ (8006860 <lcd_init+0x4a48>)
 80066b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80066b6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80066b8:	4b69      	ldr	r3, [pc, #420]	@ (8006860 <lcd_init+0x4a48>)
 80066ba:	2280      	movs	r2, #128	@ 0x80
 80066bc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80066be:	4b68      	ldr	r3, [pc, #416]	@ (8006860 <lcd_init+0x4a48>)
 80066c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066c4:	611a      	str	r2, [r3, #16]
}
 80066c6:	bf00      	nop

        lcd_wr_regno(0x2a);
        lcd_wr_xdata(0x00);
 80066c8:	2000      	movs	r0, #0
 80066ca:	f7fa fa69 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80066ce:	2000      	movs	r0, #0
 80066d0:	f7fa fa66 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80066d4:	2001      	movs	r0, #1
 80066d6:	f7fa fa63 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xdf);
 80066da:	20df      	movs	r0, #223	@ 0xdf
 80066dc:	f7fa fa60 	bl	8000ba0 <lcd_wr_xdata>
 80066e0:	232b      	movs	r3, #43	@ 0x2b
 80066e2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80066e6:	4b5e      	ldr	r3, [pc, #376]	@ (8006860 <lcd_init+0x4a48>)
 80066e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80066ee:	4b5c      	ldr	r3, [pc, #368]	@ (8006860 <lcd_init+0x4a48>)
 80066f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066f4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066f6:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	4b59      	ldr	r3, [pc, #356]	@ (8006864 <lcd_init+0x4a4c>)
 80066fe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006700:	4b57      	ldr	r3, [pc, #348]	@ (8006860 <lcd_init+0x4a48>)
 8006702:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006706:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006708:	4b55      	ldr	r3, [pc, #340]	@ (8006860 <lcd_init+0x4a48>)
 800670a:	2280      	movs	r2, #128	@ 0x80
 800670c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800670e:	4b54      	ldr	r3, [pc, #336]	@ (8006860 <lcd_init+0x4a48>)
 8006710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006714:	611a      	str	r2, [r3, #16]
}
 8006716:	bf00      	nop

        lcd_wr_regno(0x2b);
        lcd_wr_xdata(0x00);
 8006718:	2000      	movs	r0, #0
 800671a:	f7fa fa41 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800671e:	2000      	movs	r0, #0
 8006720:	f7fa fa3e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8006724:	2003      	movs	r0, #3
 8006726:	f7fa fa3b 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x1f);
 800672a:	201f      	movs	r0, #31
 800672c:	f7fa fa38 	bl	8000ba0 <lcd_wr_xdata>
 8006730:	233a      	movs	r3, #58	@ 0x3a
 8006732:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006736:	4b4a      	ldr	r3, [pc, #296]	@ (8006860 <lcd_init+0x4a48>)
 8006738:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800673c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800673e:	4b48      	ldr	r3, [pc, #288]	@ (8006860 <lcd_init+0x4a48>)
 8006740:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006744:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006746:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800674a:	b29a      	uxth	r2, r3
 800674c:	4b45      	ldr	r3, [pc, #276]	@ (8006864 <lcd_init+0x4a4c>)
 800674e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006750:	4b43      	ldr	r3, [pc, #268]	@ (8006860 <lcd_init+0x4a48>)
 8006752:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006756:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006758:	4b41      	ldr	r3, [pc, #260]	@ (8006860 <lcd_init+0x4a48>)
 800675a:	2280      	movs	r2, #128	@ 0x80
 800675c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800675e:	4b40      	ldr	r3, [pc, #256]	@ (8006860 <lcd_init+0x4a48>)
 8006760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006764:	611a      	str	r2, [r3, #16]
}
 8006766:	bf00      	nop

        lcd_wr_regno(0x3A); /* Pixel Format */
        lcd_wr_xdata(0x55);
 8006768:	2055      	movs	r0, #85	@ 0x55
 800676a:	f7fa fa19 	bl	8000ba0 <lcd_wr_xdata>
 800676e:	2336      	movs	r3, #54	@ 0x36
 8006770:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006774:	4b3a      	ldr	r3, [pc, #232]	@ (8006860 <lcd_init+0x4a48>)
 8006776:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800677a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800677c:	4b38      	ldr	r3, [pc, #224]	@ (8006860 <lcd_init+0x4a48>)
 800677e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006782:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006784:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8006788:	b29a      	uxth	r2, r3
 800678a:	4b36      	ldr	r3, [pc, #216]	@ (8006864 <lcd_init+0x4a4c>)
 800678c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800678e:	4b34      	ldr	r3, [pc, #208]	@ (8006860 <lcd_init+0x4a48>)
 8006790:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006794:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006796:	4b32      	ldr	r3, [pc, #200]	@ (8006860 <lcd_init+0x4a48>)
 8006798:	2280      	movs	r2, #128	@ 0x80
 800679a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800679c:	4b30      	ldr	r3, [pc, #192]	@ (8006860 <lcd_init+0x4a48>)
 800679e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067a2:	611a      	str	r2, [r3, #16]
}
 80067a4:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Access Control */
        lcd_wr_xdata(0x00);  /* 02-180 */
 80067a6:	2000      	movs	r0, #0
 80067a8:	f7fa f9fa 	bl	8000ba0 <lcd_wr_xdata>
 80067ac:	2311      	movs	r3, #17
 80067ae:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80067b2:	4b2b      	ldr	r3, [pc, #172]	@ (8006860 <lcd_init+0x4a48>)
 80067b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80067ba:	4b29      	ldr	r3, [pc, #164]	@ (8006860 <lcd_init+0x4a48>)
 80067bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80067c2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	4b26      	ldr	r3, [pc, #152]	@ (8006864 <lcd_init+0x4a4c>)
 80067ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80067cc:	4b24      	ldr	r3, [pc, #144]	@ (8006860 <lcd_init+0x4a48>)
 80067ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80067d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80067d4:	4b22      	ldr	r3, [pc, #136]	@ (8006860 <lcd_init+0x4a48>)
 80067d6:	2280      	movs	r2, #128	@ 0x80
 80067d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067da:	4b21      	ldr	r3, [pc, #132]	@ (8006860 <lcd_init+0x4a48>)
 80067dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067e0:	611a      	str	r2, [r3, #16]
}
 80067e2:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(120);
 80067e4:	2078      	movs	r0, #120	@ 0x78
 80067e6:	f001 f81b 	bl	8007820 <HAL_Delay>
 80067ea:	2329      	movs	r3, #41	@ 0x29
 80067ec:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80067f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006860 <lcd_init+0x4a48>)
 80067f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80067f8:	4b19      	ldr	r3, [pc, #100]	@ (8006860 <lcd_init+0x4a48>)
 80067fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006800:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8006804:	b29a      	uxth	r2, r3
 8006806:	4b17      	ldr	r3, [pc, #92]	@ (8006864 <lcd_init+0x4a4c>)
 8006808:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800680a:	4b15      	ldr	r3, [pc, #84]	@ (8006860 <lcd_init+0x4a48>)
 800680c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006810:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006812:	4b13      	ldr	r3, [pc, #76]	@ (8006860 <lcd_init+0x4a48>)
 8006814:	2280      	movs	r2, #128	@ 0x80
 8006816:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006818:	4b11      	ldr	r3, [pc, #68]	@ (8006860 <lcd_init+0x4a48>)
 800681a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800681e:	611a      	str	r2, [r3, #16]
}
 8006820:	bf00      	nop
        lcd_wr_regno(0x29);
        HAL_Delay(20);
 8006822:	2014      	movs	r0, #20
 8006824:	f000 fffc 	bl	8007820 <HAL_Delay>
 8006828:	232c      	movs	r3, #44	@ 0x2c
 800682a:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800682e:	4b0c      	ldr	r3, [pc, #48]	@ (8006860 <lcd_init+0x4a48>)
 8006830:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006834:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006836:	4b0a      	ldr	r3, [pc, #40]	@ (8006860 <lcd_init+0x4a48>)
 8006838:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800683c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800683e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
 8006842:	b29a      	uxth	r2, r3
 8006844:	4b07      	ldr	r3, [pc, #28]	@ (8006864 <lcd_init+0x4a4c>)
 8006846:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006848:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <lcd_init+0x4a48>)
 800684a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800684e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006850:	4b03      	ldr	r3, [pc, #12]	@ (8006860 <lcd_init+0x4a48>)
 8006852:	2280      	movs	r2, #128	@ 0x80
 8006854:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006856:	4b02      	ldr	r3, [pc, #8]	@ (8006860 <lcd_init+0x4a48>)
 8006858:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800685c:	611a      	str	r2, [r3, #16]
}
 800685e:	e224      	b.n	8006caa <lcd_init+0x4e92>
 8006860:	40011000 	.word	0x40011000
 8006864:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2C);
    }
    else if (lcddev.id == 0x1963)
 8006868:	4bbe      	ldr	r3, [pc, #760]	@ (8006b64 <lcd_init+0x4d4c>)
 800686a:	889b      	ldrh	r3, [r3, #4]
 800686c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8006870:	4293      	cmp	r3, r2
 8006872:	f040 821a 	bne.w	8006caa <lcd_init+0x4e92>
 8006876:	23e2      	movs	r3, #226	@ 0xe2
 8006878:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800687c:	4bba      	ldr	r3, [pc, #744]	@ (8006b68 <lcd_init+0x4d50>)
 800687e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006882:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006884:	4bb8      	ldr	r3, [pc, #736]	@ (8006b68 <lcd_init+0x4d50>)
 8006886:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800688a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800688c:	f8b7 3152 	ldrh.w	r3, [r7, #338]	@ 0x152
 8006890:	b29a      	uxth	r2, r3
 8006892:	4bb6      	ldr	r3, [pc, #728]	@ (8006b6c <lcd_init+0x4d54>)
 8006894:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006896:	4bb4      	ldr	r3, [pc, #720]	@ (8006b68 <lcd_init+0x4d50>)
 8006898:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800689c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800689e:	4bb2      	ldr	r3, [pc, #712]	@ (8006b68 <lcd_init+0x4d50>)
 80068a0:	2280      	movs	r2, #128	@ 0x80
 80068a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068a4:	4bb0      	ldr	r3, [pc, #704]	@ (8006b68 <lcd_init+0x4d50>)
 80068a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068aa:	611a      	str	r2, [r3, #16]
}
 80068ac:	bf00      	nop
    {
        //lcd_ex_ssd1963_reginit();   /* ִ��SSD1963��ʼ�� */
        lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
        lcd_wr_xdata(0x1D); /* ����1 */
 80068ae:	201d      	movs	r0, #29
 80068b0:	f7fa f976 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x02); /* ����2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 80068b4:	2002      	movs	r0, #2
 80068b6:	f7fa f973 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x04); /* ����3 Validate M and N values */
 80068ba:	2004      	movs	r0, #4
 80068bc:	f7fa f970 	bl	8000ba0 <lcd_wr_xdata>
 80068c0:	23e0      	movs	r3, #224	@ 0xe0
 80068c2:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80068c6:	4ba8      	ldr	r3, [pc, #672]	@ (8006b68 <lcd_init+0x4d50>)
 80068c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068cc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80068ce:	4ba6      	ldr	r3, [pc, #664]	@ (8006b68 <lcd_init+0x4d50>)
 80068d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068d4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80068d6:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 80068da:	b29a      	uxth	r2, r3
 80068dc:	4ba3      	ldr	r3, [pc, #652]	@ (8006b6c <lcd_init+0x4d54>)
 80068de:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80068e0:	4ba1      	ldr	r3, [pc, #644]	@ (8006b68 <lcd_init+0x4d50>)
 80068e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068e6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80068e8:	4b9f      	ldr	r3, [pc, #636]	@ (8006b68 <lcd_init+0x4d50>)
 80068ea:	2280      	movs	r2, #128	@ 0x80
 80068ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068ee:	4b9e      	ldr	r3, [pc, #632]	@ (8006b68 <lcd_init+0x4d50>)
 80068f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068f4:	611a      	str	r2, [r3, #16]
}
 80068f6:	bf00      	nop
        //delay_us(100);
        lcd_wr_regno(0xE0); /*  Start PLL command */
        lcd_wr_xdata(0x01); /*  enable PLL */
 80068f8:	2001      	movs	r0, #1
 80068fa:	f7fa f951 	bl	8000ba0 <lcd_wr_xdata>
        HAL_Delay(10);
 80068fe:	200a      	movs	r0, #10
 8006900:	f000 ff8e 	bl	8007820 <HAL_Delay>
 8006904:	23e0      	movs	r3, #224	@ 0xe0
 8006906:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800690a:	4b97      	ldr	r3, [pc, #604]	@ (8006b68 <lcd_init+0x4d50>)
 800690c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006910:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006912:	4b95      	ldr	r3, [pc, #596]	@ (8006b68 <lcd_init+0x4d50>)
 8006914:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006918:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800691a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 800691e:	b29a      	uxth	r2, r3
 8006920:	4b92      	ldr	r3, [pc, #584]	@ (8006b6c <lcd_init+0x4d54>)
 8006922:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006924:	4b90      	ldr	r3, [pc, #576]	@ (8006b68 <lcd_init+0x4d50>)
 8006926:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800692a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800692c:	4b8e      	ldr	r3, [pc, #568]	@ (8006b68 <lcd_init+0x4d50>)
 800692e:	2280      	movs	r2, #128	@ 0x80
 8006930:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006932:	4b8d      	ldr	r3, [pc, #564]	@ (8006b68 <lcd_init+0x4d50>)
 8006934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006938:	611a      	str	r2, [r3, #16]
}
 800693a:	bf00      	nop
        lcd_wr_regno(0xE0); /*  Start PLL command again */
        lcd_wr_xdata(0x03); /*  now, use PLL output as system clock */
 800693c:	2003      	movs	r0, #3
 800693e:	f7fa f92f 	bl	8000ba0 <lcd_wr_xdata>
        HAL_Delay(12);
 8006942:	200c      	movs	r0, #12
 8006944:	f000 ff6c 	bl	8007820 <HAL_Delay>
 8006948:	2301      	movs	r3, #1
 800694a:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800694e:	4b86      	ldr	r3, [pc, #536]	@ (8006b68 <lcd_init+0x4d50>)
 8006950:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006954:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006956:	4b84      	ldr	r3, [pc, #528]	@ (8006b68 <lcd_init+0x4d50>)
 8006958:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800695c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800695e:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 8006962:	b29a      	uxth	r2, r3
 8006964:	4b81      	ldr	r3, [pc, #516]	@ (8006b6c <lcd_init+0x4d54>)
 8006966:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006968:	4b7f      	ldr	r3, [pc, #508]	@ (8006b68 <lcd_init+0x4d50>)
 800696a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800696e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006970:	4b7d      	ldr	r3, [pc, #500]	@ (8006b68 <lcd_init+0x4d50>)
 8006972:	2280      	movs	r2, #128	@ 0x80
 8006974:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006976:	4b7c      	ldr	r3, [pc, #496]	@ (8006b68 <lcd_init+0x4d50>)
 8006978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800697c:	611a      	str	r2, [r3, #16]
}
 800697e:	bf00      	nop
        lcd_wr_regno(0x01); /* ��λ */
        HAL_Delay(10);
 8006980:	200a      	movs	r0, #10
 8006982:	f000 ff4d 	bl	8007820 <HAL_Delay>
 8006986:	23e6      	movs	r3, #230	@ 0xe6
 8006988:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800698c:	4b76      	ldr	r3, [pc, #472]	@ (8006b68 <lcd_init+0x4d50>)
 800698e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006992:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006994:	4b74      	ldr	r3, [pc, #464]	@ (8006b68 <lcd_init+0x4d50>)
 8006996:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800699a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800699c:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	4b72      	ldr	r3, [pc, #456]	@ (8006b6c <lcd_init+0x4d54>)
 80069a4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80069a6:	4b70      	ldr	r3, [pc, #448]	@ (8006b68 <lcd_init+0x4d50>)
 80069a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80069ac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80069ae:	4b6e      	ldr	r3, [pc, #440]	@ (8006b68 <lcd_init+0x4d50>)
 80069b0:	2280      	movs	r2, #128	@ 0x80
 80069b2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80069b4:	4b6c      	ldr	r3, [pc, #432]	@ (8006b68 <lcd_init+0x4d50>)
 80069b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069ba:	611a      	str	r2, [r3, #16]
}
 80069bc:	bf00      	nop

        lcd_wr_regno(0xE6); /* ��������Ƶ��,33Mhz */
        lcd_wr_xdata(0x2F);
 80069be:	202f      	movs	r0, #47	@ 0x2f
 80069c0:	f7fa f8ee 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80069c4:	20ff      	movs	r0, #255	@ 0xff
 80069c6:	f7fa f8eb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 80069ca:	20ff      	movs	r0, #255	@ 0xff
 80069cc:	f7fa f8e8 	bl	8000ba0 <lcd_wr_xdata>
 80069d0:	23b0      	movs	r3, #176	@ 0xb0
 80069d2:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80069d6:	4b64      	ldr	r3, [pc, #400]	@ (8006b68 <lcd_init+0x4d50>)
 80069d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069dc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80069de:	4b62      	ldr	r3, [pc, #392]	@ (8006b68 <lcd_init+0x4d50>)
 80069e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069e4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80069e6:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	4b5f      	ldr	r3, [pc, #380]	@ (8006b6c <lcd_init+0x4d54>)
 80069ee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80069f0:	4b5d      	ldr	r3, [pc, #372]	@ (8006b68 <lcd_init+0x4d50>)
 80069f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80069f6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80069f8:	4b5b      	ldr	r3, [pc, #364]	@ (8006b68 <lcd_init+0x4d50>)
 80069fa:	2280      	movs	r2, #128	@ 0x80
 80069fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80069fe:	4b5a      	ldr	r3, [pc, #360]	@ (8006b68 <lcd_init+0x4d50>)
 8006a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a04:	611a      	str	r2, [r3, #16]
}
 8006a06:	bf00      	nop

        lcd_wr_regno(0xB0); /* ����LCDģʽ */
        lcd_wr_xdata(0x20); /* 24λģʽ */
 8006a08:	2020      	movs	r0, #32
 8006a0a:	f7fa f8c9 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* TFT ģʽ */
 8006a0e:	2000      	movs	r0, #0
 8006a10:	f7fa f8c6 	bl	8000ba0 <lcd_wr_xdata>

        lcd_wr_xdata((SSD_HOR_RESOLUTION - 1) >> 8); /* ����LCDˮƽ���� */
 8006a14:	2003      	movs	r0, #3
 8006a16:	f7fa f8c3 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_RESOLUTION - 1);
 8006a1a:	f240 301f 	movw	r0, #799	@ 0x31f
 8006a1e:	f7fa f8bf 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata((SSD_VER_RESOLUTION - 1) >> 8); /* ����LCD��ֱ���� */
 8006a22:	2001      	movs	r0, #1
 8006a24:	f7fa f8bc 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_RESOLUTION - 1);
 8006a28:	f240 10df 	movw	r0, #479	@ 0x1df
 8006a2c:	f7fa f8b8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* RGB���� */
 8006a30:	2000      	movs	r0, #0
 8006a32:	f7fa f8b5 	bl	8000ba0 <lcd_wr_xdata>
 8006a36:	23b4      	movs	r3, #180	@ 0xb4
 8006a38:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8006b68 <lcd_init+0x4d50>)
 8006a3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a42:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a44:	4b48      	ldr	r3, [pc, #288]	@ (8006b68 <lcd_init+0x4d50>)
 8006a46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a4a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a4c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	4b46      	ldr	r3, [pc, #280]	@ (8006b6c <lcd_init+0x4d54>)
 8006a54:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a56:	4b44      	ldr	r3, [pc, #272]	@ (8006b68 <lcd_init+0x4d50>)
 8006a58:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a5c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a5e:	4b42      	ldr	r3, [pc, #264]	@ (8006b68 <lcd_init+0x4d50>)
 8006a60:	2280      	movs	r2, #128	@ 0x80
 8006a62:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a64:	4b40      	ldr	r3, [pc, #256]	@ (8006b68 <lcd_init+0x4d50>)
 8006a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a6a:	611a      	str	r2, [r3, #16]
}
 8006a6c:	bf00      	nop

        lcd_wr_regno(0xB4); /* Set horizontal period */
        lcd_wr_xdata((SSD_HT - 1) >> 8);
 8006a6e:	2004      	movs	r0, #4
 8006a70:	f7fa f896 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HT - 1);
 8006a74:	f240 401f 	movw	r0, #1055	@ 0x41f
 8006a78:	f7fa f892 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS >> 8);
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	f7fa f88f 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS);
 8006a82:	202e      	movs	r0, #46	@ 0x2e
 8006a84:	f7fa f88c 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_PULSE_WIDTH - 1);
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f7fa f889 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006a8e:	2000      	movs	r0, #0
 8006a90:	f7fa f886 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006a94:	2000      	movs	r0, #0
 8006a96:	f7fa f883 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	f7fa f880 	bl	8000ba0 <lcd_wr_xdata>
 8006aa0:	23b6      	movs	r3, #182	@ 0xb6
 8006aa2:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006aa6:	4b30      	ldr	r3, [pc, #192]	@ (8006b68 <lcd_init+0x4d50>)
 8006aa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006aac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006aae:	4b2e      	ldr	r3, [pc, #184]	@ (8006b68 <lcd_init+0x4d50>)
 8006ab0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ab4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006ab6:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	4b2b      	ldr	r3, [pc, #172]	@ (8006b6c <lcd_init+0x4d54>)
 8006abe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006ac0:	4b29      	ldr	r3, [pc, #164]	@ (8006b68 <lcd_init+0x4d50>)
 8006ac2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006ac6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006ac8:	4b27      	ldr	r3, [pc, #156]	@ (8006b68 <lcd_init+0x4d50>)
 8006aca:	2280      	movs	r2, #128	@ 0x80
 8006acc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006ace:	4b26      	ldr	r3, [pc, #152]	@ (8006b68 <lcd_init+0x4d50>)
 8006ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ad4:	611a      	str	r2, [r3, #16]
}
 8006ad6:	bf00      	nop
        lcd_wr_regno(0xB6); /* Set vertical perio */
        lcd_wr_xdata((SSD_VT - 1) >> 8);
 8006ad8:	2002      	movs	r0, #2
 8006ada:	f7fa f861 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VT - 1);
 8006ade:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 8006ae2:	f7fa f85d 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS >> 8);
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	f7fa f85a 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS);
 8006aec:	2017      	movs	r0, #23
 8006aee:	f7fa f857 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_FRONT_PORCH - 1);
 8006af2:	2015      	movs	r0, #21
 8006af4:	f7fa f854 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006af8:	2000      	movs	r0, #0
 8006afa:	f7fa f851 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006afe:	2000      	movs	r0, #0
 8006b00:	f7fa f84e 	bl	8000ba0 <lcd_wr_xdata>
 8006b04:	23f0      	movs	r3, #240	@ 0xf0
 8006b06:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006b0a:	4b17      	ldr	r3, [pc, #92]	@ (8006b68 <lcd_init+0x4d50>)
 8006b0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b10:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b12:	4b15      	ldr	r3, [pc, #84]	@ (8006b68 <lcd_init+0x4d50>)
 8006b14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b18:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b1a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	4b12      	ldr	r3, [pc, #72]	@ (8006b6c <lcd_init+0x4d54>)
 8006b22:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006b24:	4b10      	ldr	r3, [pc, #64]	@ (8006b68 <lcd_init+0x4d50>)
 8006b26:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b2a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b68 <lcd_init+0x4d50>)
 8006b2e:	2280      	movs	r2, #128	@ 0x80
 8006b30:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006b32:	4b0d      	ldr	r3, [pc, #52]	@ (8006b68 <lcd_init+0x4d50>)
 8006b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b38:	611a      	str	r2, [r3, #16]
}
 8006b3a:	bf00      	nop

        lcd_wr_regno(0xF0); /* ����SSD1963��CPU�ӿ�Ϊ16bit */
        lcd_wr_xdata(0x03); /* 16-bit(565 format) data for 16bpp */
 8006b3c:	2003      	movs	r0, #3
 8006b3e:	f7fa f82f 	bl	8000ba0 <lcd_wr_xdata>
 8006b42:	2329      	movs	r3, #41	@ 0x29
 8006b44:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006b48:	4b07      	ldr	r3, [pc, #28]	@ (8006b68 <lcd_init+0x4d50>)
 8006b4a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b4e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b50:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <lcd_init+0x4d50>)
 8006b52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b56:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b58:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	4b03      	ldr	r3, [pc, #12]	@ (8006b6c <lcd_init+0x4d54>)
 8006b60:	60da      	str	r2, [r3, #12]
 8006b62:	e005      	b.n	8006b70 <lcd_init+0x4d58>
 8006b64:	200001f4 	.word	0x200001f4
 8006b68:	40011000 	.word	0x40011000
 8006b6c:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 8006b70:	4b56      	ldr	r3, [pc, #344]	@ (8006ccc <lcd_init+0x4eb4>)
 8006b72:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b76:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006b78:	4b54      	ldr	r3, [pc, #336]	@ (8006ccc <lcd_init+0x4eb4>)
 8006b7a:	2280      	movs	r2, #128	@ 0x80
 8006b7c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006b7e:	4b53      	ldr	r3, [pc, #332]	@ (8006ccc <lcd_init+0x4eb4>)
 8006b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b84:	611a      	str	r2, [r3, #16]
}
 8006b86:	bf00      	nop
 8006b88:	23d0      	movs	r3, #208	@ 0xd0
 8006b8a:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8006ccc <lcd_init+0x4eb4>)
 8006b90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b94:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b96:	4b4d      	ldr	r3, [pc, #308]	@ (8006ccc <lcd_init+0x4eb4>)
 8006b98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b9c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b9e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8006cd0 <lcd_init+0x4eb8>)
 8006ba6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006ba8:	4b48      	ldr	r3, [pc, #288]	@ (8006ccc <lcd_init+0x4eb4>)
 8006baa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006bae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006bb0:	4b46      	ldr	r3, [pc, #280]	@ (8006ccc <lcd_init+0x4eb4>)
 8006bb2:	2280      	movs	r2, #128	@ 0x80
 8006bb4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006bb6:	4b45      	ldr	r3, [pc, #276]	@ (8006ccc <lcd_init+0x4eb4>)
 8006bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bbc:	611a      	str	r2, [r3, #16]
}
 8006bbe:	bf00      	nop

        lcd_wr_regno(0x29); /* ������ʾ */
        /* ����PWM���  ����ͨ��ռ�ձȿɵ� */
        lcd_wr_regno(0xD0); /* �����Զ���ƽ��DBC */
        lcd_wr_xdata(0x00); /* disable */
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	f7f9 ffed 	bl	8000ba0 <lcd_wr_xdata>
 8006bc6:	23be      	movs	r3, #190	@ 0xbe
 8006bc8:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8006ccc <lcd_init+0x4eb4>)
 8006bce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006bd2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8006ccc <lcd_init+0x4eb4>)
 8006bd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bda:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006bdc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	4b3b      	ldr	r3, [pc, #236]	@ (8006cd0 <lcd_init+0x4eb8>)
 8006be4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006be6:	4b39      	ldr	r3, [pc, #228]	@ (8006ccc <lcd_init+0x4eb4>)
 8006be8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006bec:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006bee:	4b37      	ldr	r3, [pc, #220]	@ (8006ccc <lcd_init+0x4eb4>)
 8006bf0:	2280      	movs	r2, #128	@ 0x80
 8006bf2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006bf4:	4b35      	ldr	r3, [pc, #212]	@ (8006ccc <lcd_init+0x4eb4>)
 8006bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bfa:	611a      	str	r2, [r3, #16]
}
 8006bfc:	bf00      	nop

        lcd_wr_regno(0xBE); /* ����PWM��� */
        lcd_wr_xdata(0x05); /* 1����PWMƵ�� */
 8006bfe:	2005      	movs	r0, #5
 8006c00:	f7f9 ffce 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE); /* 2����PWMռ�ձ� */
 8006c04:	20fe      	movs	r0, #254	@ 0xfe
 8006c06:	f7f9 ffcb 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* 3����C */
 8006c0a:	2001      	movs	r0, #1
 8006c0c:	f7f9 ffc8 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 4����D */
 8006c10:	2000      	movs	r0, #0
 8006c12:	f7f9 ffc5 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 5����E */
 8006c16:	2000      	movs	r0, #0
 8006c18:	f7f9 ffc2 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 6����F */
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	f7f9 ffbf 	bl	8000ba0 <lcd_wr_xdata>
 8006c22:	23b8      	movs	r3, #184	@ 0xb8
 8006c24:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006c28:	4b28      	ldr	r3, [pc, #160]	@ (8006ccc <lcd_init+0x4eb4>)
 8006c2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c2e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006c30:	4b26      	ldr	r3, [pc, #152]	@ (8006ccc <lcd_init+0x4eb4>)
 8006c32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c36:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006c38:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	4b24      	ldr	r3, [pc, #144]	@ (8006cd0 <lcd_init+0x4eb8>)
 8006c40:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006c42:	4b22      	ldr	r3, [pc, #136]	@ (8006ccc <lcd_init+0x4eb4>)
 8006c44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c48:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006c4a:	4b20      	ldr	r3, [pc, #128]	@ (8006ccc <lcd_init+0x4eb4>)
 8006c4c:	2280      	movs	r2, #128	@ 0x80
 8006c4e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006c50:	4b1e      	ldr	r3, [pc, #120]	@ (8006ccc <lcd_init+0x4eb4>)
 8006c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c56:	611a      	str	r2, [r3, #16]
}
 8006c58:	bf00      	nop

        lcd_wr_regno(0xB8); /* ����GPIO���� */
        lcd_wr_xdata(0x03); /* 2��IO�����ó���� */
 8006c5a:	2003      	movs	r0, #3
 8006c5c:	f7f9 ffa0 	bl	8000ba0 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* GPIOʹ��������IO���� */
 8006c60:	2001      	movs	r0, #1
 8006c62:	f7f9 ff9d 	bl	8000ba0 <lcd_wr_xdata>
 8006c66:	23ba      	movs	r3, #186	@ 0xba
 8006c68:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006c6c:	4b17      	ldr	r3, [pc, #92]	@ (8006ccc <lcd_init+0x4eb4>)
 8006c6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c72:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006c74:	4b15      	ldr	r3, [pc, #84]	@ (8006ccc <lcd_init+0x4eb4>)
 8006c76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c7a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006c7c:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	4b13      	ldr	r3, [pc, #76]	@ (8006cd0 <lcd_init+0x4eb8>)
 8006c84:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006c86:	4b11      	ldr	r3, [pc, #68]	@ (8006ccc <lcd_init+0x4eb4>)
 8006c88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c8c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8006ccc <lcd_init+0x4eb4>)
 8006c90:	2280      	movs	r2, #128	@ 0x80
 8006c92:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006c94:	4b0d      	ldr	r3, [pc, #52]	@ (8006ccc <lcd_init+0x4eb4>)
 8006c96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c9a:	611a      	str	r2, [r3, #16]
}
 8006c9c:	bf00      	nop
        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0X01); /* GPIO[1:0]=01,����LCD���� */
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	f7f9 ff7e 	bl	8000ba0 <lcd_wr_xdata>
        lcd_ssd_backlight_set(100); /* ��������Ϊ���� */
 8006ca4:	2064      	movs	r0, #100	@ 0x64
 8006ca6:	f7fa ff1f 	bl	8001ae8 <lcd_ssd_backlight_set>
    }

    lcd_display_dir(0); /* Ĭ��Ϊ���� */
 8006caa:	2000      	movs	r0, #0
 8006cac:	f7fa ffdc 	bl	8001c68 <lcd_display_dir>
    LCD_BL(1);          /* �������� */
 8006cb0:	4b06      	ldr	r3, [pc, #24]	@ (8006ccc <lcd_init+0x4eb4>)
 8006cb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006cb6:	611a      	str	r2, [r3, #16]
    lcd_clear(WHITE);
 8006cb8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006cbc:	f000 f80a 	bl	8006cd4 <lcd_clear>
}
 8006cc0:	bf00      	nop
 8006cc2:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	40011000 	.word	0x40011000
 8006cd0:	40010c00 	.word	0x40010c00

08006cd4 <lcd_clear>:
 * @brief       ��������
 * @param       color: Ҫ��������ɫ
 * @retval      ��
 */
void lcd_clear(uint16_t color)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]
    uint32_t totalpoint = lcddev.width;
 8006ce2:	4b27      	ldr	r3, [pc, #156]	@ (8006d80 <lcd_clear+0xac>)
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	613b      	str	r3, [r7, #16]
    totalpoint *= lcddev.height;    /* �õ��ܵ��� */
 8006ce8:	4b25      	ldr	r3, [pc, #148]	@ (8006d80 <lcd_clear+0xac>)
 8006cea:	885b      	ldrh	r3, [r3, #2]
 8006cec:	461a      	mov	r2, r3
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	fb02 f303 	mul.w	r3, r2, r3
 8006cf4:	613b      	str	r3, [r7, #16]
    lcd_set_cursor(0x00, 0x0000);   /* ���ù��λ�� */
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	f7fa f80b 	bl	8000d14 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8006cfe:	4b20      	ldr	r3, [pc, #128]	@ (8006d80 <lcd_clear+0xac>)
 8006d00:	891b      	ldrh	r3, [r3, #8]
 8006d02:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006d04:	4b1f      	ldr	r3, [pc, #124]	@ (8006d84 <lcd_clear+0xb0>)
 8006d06:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d0a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006d84 <lcd_clear+0xb0>)
 8006d0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d12:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006d14:	89fb      	ldrh	r3, [r7, #14]
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	4b1b      	ldr	r3, [pc, #108]	@ (8006d88 <lcd_clear+0xb4>)
 8006d1a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006d1c:	4b19      	ldr	r3, [pc, #100]	@ (8006d84 <lcd_clear+0xb0>)
 8006d1e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006d22:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006d24:	4b17      	ldr	r3, [pc, #92]	@ (8006d84 <lcd_clear+0xb0>)
 8006d26:	2280      	movs	r2, #128	@ 0x80
 8006d28:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006d2a:	4b16      	ldr	r3, [pc, #88]	@ (8006d84 <lcd_clear+0xb0>)
 8006d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d30:	611a      	str	r2, [r3, #16]
}
 8006d32:	bf00      	nop
}
 8006d34:	bf00      	nop
     * RS, CS�Ĳ���, �Ӷ������ٶ�, ��51֡��ߵ�78֡����, ���50%
     * ��������: -O2�Ż�, ��ˢ��
     * �����ٶ�Ҫ���ʱ��, ���Լ����Ż�: lcd_fill, lcd_color_fill, 
     * lcd_set_cursor �� lcd_draw_point �Ⱥ���, ��ҿ��������Ż�
     */
    LCD_RS(1);                      /* RS=1,��ʾд���� */
 8006d36:	4b13      	ldr	r3, [pc, #76]	@ (8006d84 <lcd_clear+0xb0>)
 8006d38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d3c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006d3e:	4b11      	ldr	r3, [pc, #68]	@ (8006d84 <lcd_clear+0xb0>)
 8006d40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d44:	611a      	str	r2, [r3, #16]
    
    for (index = 0; index < totalpoint; index++)
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	e00c      	b.n	8006d66 <lcd_clear+0x92>
    {
        LCD_DATA_OUT(color);        /* д��Ҫд������ */
 8006d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8006d88 <lcd_clear+0xb4>)
 8006d4e:	88fb      	ldrh	r3, [r7, #6]
 8006d50:	60d3      	str	r3, [r2, #12]
        LCD_WR(0);
 8006d52:	4b0c      	ldr	r3, [pc, #48]	@ (8006d84 <lcd_clear+0xb0>)
 8006d54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006d58:	611a      	str	r2, [r3, #16]
        LCD_WR(1);
 8006d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d84 <lcd_clear+0xb0>)
 8006d5c:	2280      	movs	r2, #128	@ 0x80
 8006d5e:	611a      	str	r2, [r3, #16]
    for (index = 0; index < totalpoint; index++)
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	3301      	adds	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d3ee      	bcc.n	8006d4c <lcd_clear+0x78>
    }
    
    LCD_CS(1);
 8006d6e:	4b05      	ldr	r3, [pc, #20]	@ (8006d84 <lcd_clear+0xb0>)
 8006d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d74:	611a      	str	r2, [r3, #16]
}
 8006d76:	bf00      	nop
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	200001f4 	.word	0x200001f4
 8006d84:	40011000 	.word	0x40011000
 8006d88:	40010c00 	.word	0x40010c00

08006d8c <lcd_show_char>:
 * @param       mode : ���ӷ�ʽ(1); �ǵ��ӷ�ʽ(0);
 * @param       color : �ַ�����ɫ;
 * @retval      ��
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8006d8c:	b590      	push	{r4, r7, lr}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	4611      	mov	r1, r2
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4623      	mov	r3, r4
 8006d9c:	80fb      	strh	r3, [r7, #6]
 8006d9e:	4603      	mov	r3, r0
 8006da0:	80bb      	strh	r3, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70fb      	strb	r3, [r7, #3]
 8006da6:	4613      	mov	r3, r2
 8006da8:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8006daa:	88bb      	ldrh	r3, [r7, #4]
 8006dac:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* �õ�����һ���ַ���Ӧ������ռ���ֽ��� */
 8006db6:	78bb      	ldrb	r3, [r7, #2]
 8006db8:	08db      	lsrs	r3, r3, #3
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	78bb      	ldrb	r3, [r7, #2]
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	bf14      	ite	ne
 8006dca:	2301      	movne	r3, #1
 8006dcc:	2300      	moveq	r3, #0
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	78ba      	ldrb	r2, [r7, #2]
 8006dd6:	0852      	lsrs	r2, r2, #1
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	fb02 f303 	mul.w	r3, r2, r3
 8006dde:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* �õ�ƫ�ƺ��ֵ��ASCII�ֿ��Ǵӿո�ʼȡģ������-' '���Ƕ�Ӧ�ַ����ֿ⣩ */
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	3b20      	subs	r3, #32
 8006de4:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8006de6:	78bb      	ldrb	r3, [r7, #2]
 8006de8:	3b0c      	subs	r3, #12
 8006dea:	2b14      	cmp	r3, #20
 8006dec:	f200 8099 	bhi.w	8006f22 <lcd_show_char+0x196>
 8006df0:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <lcd_show_char+0x6c>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006f23 	.word	0x08006f23
 8006e00:	08006f23 	.word	0x08006f23
 8006e04:	08006f23 	.word	0x08006f23
 8006e08:	08006e5f 	.word	0x08006e5f
 8006e0c:	08006f23 	.word	0x08006f23
 8006e10:	08006f23 	.word	0x08006f23
 8006e14:	08006f23 	.word	0x08006f23
 8006e18:	08006f23 	.word	0x08006f23
 8006e1c:	08006f23 	.word	0x08006f23
 8006e20:	08006f23 	.word	0x08006f23
 8006e24:	08006f23 	.word	0x08006f23
 8006e28:	08006e6b 	.word	0x08006e6b
 8006e2c:	08006f23 	.word	0x08006f23
 8006e30:	08006f23 	.word	0x08006f23
 8006e34:	08006f23 	.word	0x08006f23
 8006e38:	08006f23 	.word	0x08006f23
 8006e3c:	08006f23 	.word	0x08006f23
 8006e40:	08006f23 	.word	0x08006f23
 8006e44:	08006f23 	.word	0x08006f23
 8006e48:	08006e7d 	.word	0x08006e7d
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* ����1206���� */
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4a36      	ldr	r2, [pc, #216]	@ (8006f30 <lcd_show_char+0x1a4>)
 8006e58:	4413      	add	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
            break;
 8006e5c:	e014      	b.n	8006e88 <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* ����1608���� */
 8006e5e:	78fb      	ldrb	r3, [r7, #3]
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	4a34      	ldr	r2, [pc, #208]	@ (8006f34 <lcd_show_char+0x1a8>)
 8006e64:	4413      	add	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
            break;
 8006e68:	e00e      	b.n	8006e88 <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* ����2412���� */
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4a30      	ldr	r2, [pc, #192]	@ (8006f38 <lcd_show_char+0x1ac>)
 8006e76:	4413      	add	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]
            break;
 8006e7a:	e005      	b.n	8006e88 <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* ����3216���� */
 8006e7c:	78fb      	ldrb	r3, [r7, #3]
 8006e7e:	019b      	lsls	r3, r3, #6
 8006e80:	4a2e      	ldr	r2, [pc, #184]	@ (8006f3c <lcd_show_char+0x1b0>)
 8006e82:	4413      	add	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]
            break;
 8006e86:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 8006e88:	2300      	movs	r3, #0
 8006e8a:	757b      	strb	r3, [r7, #21]
 8006e8c:	e044      	b.n	8006f18 <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* ��ȡ�ַ��ĵ������� */
 8006e8e:	7d7b      	ldrb	r3, [r7, #21]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4413      	add	r3, r2
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8006e98:	2300      	movs	r3, #0
 8006e9a:	75bb      	strb	r3, [r7, #22]
 8006e9c:	e034      	b.n	8006f08 <lcd_show_char+0x17c>
        {
            if (temp & 0x80)        /* ��Ч��,��Ҫ��ʾ */
 8006e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	da06      	bge.n	8006eb4 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* �������,Ҫ��ʾ����� */
 8006ea6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006ea8:	88b9      	ldrh	r1, [r7, #4]
 8006eaa:	88fb      	ldrh	r3, [r7, #6]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fa fdd1 	bl	8001a54 <lcd_draw_point>
 8006eb2:	e00a      	b.n	8006eca <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* ��Ч��,����ʾ */
 8006eb4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d106      	bne.n	8006eca <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* ������ɫ,�൱������㲻��ʾ(ע�ⱳ��ɫ��ȫ�ֱ�������) */
 8006ebc:	4b20      	ldr	r3, [pc, #128]	@ (8006f40 <lcd_show_char+0x1b4>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	88b9      	ldrh	r1, [r7, #4]
 8006ec2:	88fb      	ldrh	r3, [r7, #6]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fa fdc5 	bl	8001a54 <lcd_draw_point>
            }

            temp <<= 1; /* ��λ, �Ա��ȡ��һ��λ��״̬ */
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
            y++;
 8006ed0:	88bb      	ldrh	r3, [r7, #4]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* �������� */
 8006ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8006f44 <lcd_show_char+0x1b8>)
 8006ed8:	885b      	ldrh	r3, [r3, #2]
 8006eda:	88ba      	ldrh	r2, [r7, #4]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d222      	bcs.n	8006f26 <lcd_show_char+0x19a>

            if ((y - y0) == size)   /* ��ʾ��һ����? */
 8006ee0:	88ba      	ldrh	r2, [r7, #4]
 8006ee2:	89fb      	ldrh	r3, [r7, #14]
 8006ee4:	1ad2      	subs	r2, r2, r3
 8006ee6:	78bb      	ldrb	r3, [r7, #2]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d10a      	bne.n	8006f02 <lcd_show_char+0x176>
            {
                y = y0; /* y���긴λ */
 8006eec:	89fb      	ldrh	r3, [r7, #14]
 8006eee:	80bb      	strh	r3, [r7, #4]
                x++;    /* x������� */
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   /* x���곬������ */
 8006ef6:	4b13      	ldr	r3, [pc, #76]	@ (8006f44 <lcd_show_char+0x1b8>)
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d307      	bcc.n	8006f10 <lcd_show_char+0x184>
 8006f00:	e012      	b.n	8006f28 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8006f02:	7dbb      	ldrb	r3, [r7, #22]
 8006f04:	3301      	adds	r3, #1
 8006f06:	75bb      	strb	r3, [r7, #22]
 8006f08:	7dbb      	ldrb	r3, [r7, #22]
 8006f0a:	2b07      	cmp	r3, #7
 8006f0c:	d9c7      	bls.n	8006e9e <lcd_show_char+0x112>
 8006f0e:	e000      	b.n	8006f12 <lcd_show_char+0x186>

                break;
 8006f10:	bf00      	nop
    for (t = 0; t < csize; t++)
 8006f12:	7d7b      	ldrb	r3, [r7, #21]
 8006f14:	3301      	adds	r3, #1
 8006f16:	757b      	strb	r3, [r7, #21]
 8006f18:	7d7a      	ldrb	r2, [r7, #21]
 8006f1a:	7b7b      	ldrb	r3, [r7, #13]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d3b6      	bcc.n	8006e8e <lcd_show_char+0x102>
 8006f20:	e002      	b.n	8006f28 <lcd_show_char+0x19c>
            return ;
 8006f22:	bf00      	nop
 8006f24:	e000      	b.n	8006f28 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* �������� */
 8006f26:	bf00      	nop
            }
        }
    }
}
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd90      	pop	{r4, r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	0800c224 	.word	0x0800c224
 8006f34:	0800c698 	.word	0x0800c698
 8006f38:	0800cc88 	.word	0x0800cc88
 8006f3c:	0800d9e4 	.word	0x0800d9e4
 8006f40:	20000000 	.word	0x20000000
 8006f44:	200001f4 	.word	0x200001f4

08006f48 <lcd_show_string>:
 * @param       p           : �ַ����׵�ַ
 * @param       color       : �ַ�������ɫ;
 * @retval      ��
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8006f48:	b590      	push	{r4, r7, lr}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	4604      	mov	r4, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	4611      	mov	r1, r2
 8006f54:	461a      	mov	r2, r3
 8006f56:	4623      	mov	r3, r4
 8006f58:	80fb      	strh	r3, [r7, #6]
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	80bb      	strh	r3, [r7, #4]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	807b      	strh	r3, [r7, #2]
 8006f62:	4613      	mov	r3, r2
 8006f64:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8006f66:	88fb      	ldrh	r3, [r7, #6]
 8006f68:	73fb      	strb	r3, [r7, #15]
    width += x;
 8006f6a:	887a      	ldrh	r2, [r7, #2]
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	4413      	add	r3, r2
 8006f70:	807b      	strh	r3, [r7, #2]
    height += y;
 8006f72:	883a      	ldrh	r2, [r7, #0]
 8006f74:	88bb      	ldrh	r3, [r7, #4]
 8006f76:	4413      	add	r3, r2
 8006f78:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 8006f7a:	e027      	b.n	8006fcc <lcd_show_string+0x84>
    {
        if (x >= width)
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	887b      	ldrh	r3, [r7, #2]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d307      	bcc.n	8006f94 <lcd_show_string+0x4c>
        {
            x = x0;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	80fb      	strh	r3, [r7, #6]
            y += size;
 8006f88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	88bb      	ldrh	r3, [r7, #4]
 8006f90:	4413      	add	r3, r2
 8006f92:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* �˳� */
 8006f94:	88ba      	ldrh	r2, [r7, #4]
 8006f96:	883b      	ldrh	r3, [r7, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d220      	bcs.n	8006fde <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	f897 4020 	ldrb.w	r4, [r7, #32]
 8006fa4:	88b9      	ldrh	r1, [r7, #4]
 8006fa6:	88f8      	ldrh	r0, [r7, #6]
 8006fa8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	2300      	movs	r3, #0
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	4623      	mov	r3, r4
 8006fb2:	f7ff feeb 	bl	8006d8c <lcd_show_char>
        x += size / 2;
 8006fb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006fba:	085b      	lsrs	r3, r3, #1
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	88fb      	ldrh	r3, [r7, #6]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
        p++;
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	3301      	adds	r3, #1
 8006fca:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b7e      	cmp	r3, #126	@ 0x7e
 8006fd2:	d805      	bhi.n	8006fe0 <lcd_show_string+0x98>
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	2b1f      	cmp	r3, #31
 8006fda:	d8cf      	bhi.n	8006f7c <lcd_show_string+0x34>
    }
}
 8006fdc:	e000      	b.n	8006fe0 <lcd_show_string+0x98>
        if (y >= height)break;  /* �˳� */
 8006fde:	bf00      	nop
}
 8006fe0:	bf00      	nop
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd90      	pop	{r4, r7, pc}

08006fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b09a      	sub	sp, #104	@ 0x68
 8006fec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006fee:	f000 fbb5 	bl	800775c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006ff2:	f000 f8d1 	bl	8007198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006ff6:	f000 f9b5 	bl	8007364 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8006ffa:	f000 f989 	bl	8007310 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8006ffe:	f000 f929 	bl	8007254 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8007002:	f7fa ff09 	bl	8001e18 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_clear(WHITE);g_back_color = WHITE;
 8007006:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800700a:	f7ff fe63 	bl	8006cd4 <lcd_clear>
 800700e:	4b5c      	ldr	r3, [pc, #368]	@ (8007180 <main+0x198>)
 8007010:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007014:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < 3; i++)
 8007016:	2300      	movs	r3, #0
 8007018:	657b      	str	r3, [r7, #84]	@ 0x54
 800701a:	e049      	b.n	80070b0 <main+0xc8>
	  {
	  HAL_ADC_Start(&hadc1);
 800701c:	4859      	ldr	r0, [pc, #356]	@ (8007184 <main+0x19c>)
 800701e:	f000 fd0d 	bl	8007a3c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8007022:	f04f 31ff 	mov.w	r1, #4294967295
 8007026:	4857      	ldr	r0, [pc, #348]	@ (8007184 <main+0x19c>)
 8007028:	f000 fdb6 	bl	8007b98 <HAL_ADC_PollForConversion>
	  adcBuf[i]=HAL_ADC_GetValue(&hadc1);
 800702c:	4855      	ldr	r0, [pc, #340]	@ (8007184 <main+0x19c>)
 800702e:	f000 feb9 	bl	8007da4 <HAL_ADC_GetValue>
 8007032:	4603      	mov	r3, r0
 8007034:	b29a      	uxth	r2, r3
 8007036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	3358      	adds	r3, #88	@ 0x58
 800703c:	443b      	add	r3, r7
 800703e:	f823 2c58 	strh.w	r2, [r3, #-88]
	  vol[i] = (double)adcBuf[i]*(3.3/4096);
 8007042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	3358      	adds	r3, #88	@ 0x58
 8007048:	443b      	add	r3, r7
 800704a:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 800704e:	4618      	mov	r0, r3
 8007050:	f7f9 fa34 	bl	80004bc <__aeabi_ui2d>
 8007054:	a348      	add	r3, pc, #288	@ (adr r3, 8007178 <main+0x190>)
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	f7f9 faa9 	bl	80005b0 <__aeabi_dmul>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007064:	00c9      	lsls	r1, r1, #3
 8007066:	3158      	adds	r1, #88	@ 0x58
 8007068:	4439      	add	r1, r7
 800706a:	3950      	subs	r1, #80	@ 0x50
 800706c:	e9c1 2300 	strd	r2, r3, [r1]
	  sprintf(msg, "ch:%d %f\r\n", i, vol[i]);
 8007070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007072:	00db      	lsls	r3, r3, #3
 8007074:	3358      	adds	r3, #88	@ 0x58
 8007076:	443b      	add	r3, r7
 8007078:	3b50      	subs	r3, #80	@ 0x50
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f107 0020 	add.w	r0, r7, #32
 8007082:	e9cd 2300 	strd	r2, r3, [sp]
 8007086:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007088:	493f      	ldr	r1, [pc, #252]	@ (8007188 <main+0x1a0>)
 800708a:	f002 ff83 	bl	8009f94 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800708e:	f107 0320 	add.w	r3, r7, #32
 8007092:	4618      	mov	r0, r3
 8007094:	f7f9 f8c8 	bl	8000228 <strlen>
 8007098:	4603      	mov	r3, r0
 800709a:	b29a      	uxth	r2, r3
 800709c:	f107 0120 	add.w	r1, r7, #32
 80070a0:	f04f 33ff 	mov.w	r3, #4294967295
 80070a4:	4839      	ldr	r0, [pc, #228]	@ (800718c <main+0x1a4>)
 80070a6:	f002 f883 	bl	80091b0 <HAL_UART_Transmit>
	  for (int i = 0; i < 3; i++)
 80070aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ac:	3301      	adds	r3, #1
 80070ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80070b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	ddb2      	ble.n	800701c <main+0x34>
	  }
	  sprintf(msg, "ch:%d %f\r\n", 5, vol[0]);
 80070b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070ba:	f107 0020 	add.w	r0, r7, #32
 80070be:	e9cd 2300 	strd	r2, r3, [sp]
 80070c2:	2205      	movs	r2, #5
 80070c4:	4930      	ldr	r1, [pc, #192]	@ (8007188 <main+0x1a0>)
 80070c6:	f002 ff65 	bl	8009f94 <siprintf>
	  lcd_show_string(10,lcddev.height/10,200,24,24,msg,BLACK);
 80070ca:	4b31      	ldr	r3, [pc, #196]	@ (8007190 <main+0x1a8>)
 80070cc:	885b      	ldrh	r3, [r3, #2]
 80070ce:	4a31      	ldr	r2, [pc, #196]	@ (8007194 <main+0x1ac>)
 80070d0:	fba2 2303 	umull	r2, r3, r2, r3
 80070d4:	08db      	lsrs	r3, r3, #3
 80070d6:	b299      	uxth	r1, r3
 80070d8:	2300      	movs	r3, #0
 80070da:	9302      	str	r3, [sp, #8]
 80070dc:	f107 0320 	add.w	r3, r7, #32
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	2318      	movs	r3, #24
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	2318      	movs	r3, #24
 80070e8:	22c8      	movs	r2, #200	@ 0xc8
 80070ea:	200a      	movs	r0, #10
 80070ec:	f7ff ff2c 	bl	8006f48 <lcd_show_string>
	  sprintf(msg, "ch:%d %f\r\n", 6, vol[1]);
 80070f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070f4:	f107 0020 	add.w	r0, r7, #32
 80070f8:	e9cd 2300 	strd	r2, r3, [sp]
 80070fc:	2206      	movs	r2, #6
 80070fe:	4922      	ldr	r1, [pc, #136]	@ (8007188 <main+0x1a0>)
 8007100:	f002 ff48 	bl	8009f94 <siprintf>
	  lcd_show_string(10,lcddev.height/10 + 30,200,24,24,msg,BLACK);
 8007104:	4b22      	ldr	r3, [pc, #136]	@ (8007190 <main+0x1a8>)
 8007106:	885b      	ldrh	r3, [r3, #2]
 8007108:	4a22      	ldr	r2, [pc, #136]	@ (8007194 <main+0x1ac>)
 800710a:	fba2 2303 	umull	r2, r3, r2, r3
 800710e:	08db      	lsrs	r3, r3, #3
 8007110:	b29b      	uxth	r3, r3
 8007112:	331e      	adds	r3, #30
 8007114:	b299      	uxth	r1, r3
 8007116:	2300      	movs	r3, #0
 8007118:	9302      	str	r3, [sp, #8]
 800711a:	f107 0320 	add.w	r3, r7, #32
 800711e:	9301      	str	r3, [sp, #4]
 8007120:	2318      	movs	r3, #24
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	2318      	movs	r3, #24
 8007126:	22c8      	movs	r2, #200	@ 0xc8
 8007128:	200a      	movs	r0, #10
 800712a:	f7ff ff0d 	bl	8006f48 <lcd_show_string>
	  sprintf(msg, "ch:%d %f\r\n", 7, vol[2]);
 800712e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007132:	f107 0020 	add.w	r0, r7, #32
 8007136:	e9cd 2300 	strd	r2, r3, [sp]
 800713a:	2207      	movs	r2, #7
 800713c:	4912      	ldr	r1, [pc, #72]	@ (8007188 <main+0x1a0>)
 800713e:	f002 ff29 	bl	8009f94 <siprintf>
	  lcd_show_string(10,lcddev.height/10 + 60,200,24,24,msg,BLACK);
 8007142:	4b13      	ldr	r3, [pc, #76]	@ (8007190 <main+0x1a8>)
 8007144:	885b      	ldrh	r3, [r3, #2]
 8007146:	4a13      	ldr	r2, [pc, #76]	@ (8007194 <main+0x1ac>)
 8007148:	fba2 2303 	umull	r2, r3, r2, r3
 800714c:	08db      	lsrs	r3, r3, #3
 800714e:	b29b      	uxth	r3, r3
 8007150:	333c      	adds	r3, #60	@ 0x3c
 8007152:	b299      	uxth	r1, r3
 8007154:	2300      	movs	r3, #0
 8007156:	9302      	str	r3, [sp, #8]
 8007158:	f107 0320 	add.w	r3, r7, #32
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	2318      	movs	r3, #24
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	2318      	movs	r3, #24
 8007164:	22c8      	movs	r2, #200	@ 0xc8
 8007166:	200a      	movs	r0, #10
 8007168:	f7ff feee 	bl	8006f48 <lcd_show_string>
	  HAL_Delay(500);
 800716c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007170:	f000 fb56 	bl	8007820 <HAL_Delay>
	  lcd_clear(WHITE);g_back_color = WHITE;
 8007174:	e747      	b.n	8007006 <main+0x1e>
 8007176:	bf00      	nop
 8007178:	66666666 	.word	0x66666666
 800717c:	3f4a6666 	.word	0x3f4a6666
 8007180:	20000000 	.word	0x20000000
 8007184:	20000204 	.word	0x20000204
 8007188:	0800c218 	.word	0x0800c218
 800718c:	20000234 	.word	0x20000234
 8007190:	200001f4 	.word	0x200001f4
 8007194:	cccccccd 	.word	0xcccccccd

08007198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b096      	sub	sp, #88	@ 0x58
 800719c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800719e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80071a2:	2228      	movs	r2, #40	@ 0x28
 80071a4:	2100      	movs	r1, #0
 80071a6:	4618      	mov	r0, r3
 80071a8:	f002 ff57 	bl	800a05a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071ac:	f107 031c 	add.w	r3, r7, #28
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	609a      	str	r2, [r3, #8]
 80071b8:	60da      	str	r2, [r3, #12]
 80071ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80071bc:	1d3b      	adds	r3, r7, #4
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	605a      	str	r2, [r3, #4]
 80071c4:	609a      	str	r2, [r3, #8]
 80071c6:	60da      	str	r2, [r3, #12]
 80071c8:	611a      	str	r2, [r3, #16]
 80071ca:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80071cc:	2301      	movs	r3, #1
 80071ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80071d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80071d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80071d6:	2300      	movs	r3, #0
 80071d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80071da:	2301      	movs	r3, #1
 80071dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071de:	2302      	movs	r3, #2
 80071e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80071e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80071e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80071e8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80071ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80071f2:	4618      	mov	r0, r3
 80071f4:	f001 f9ee 	bl	80085d4 <HAL_RCC_OscConfig>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80071fe:	f000 f8d3 	bl	80073a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007202:	230f      	movs	r3, #15
 8007204:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007206:	2302      	movs	r3, #2
 8007208:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800720a:	2300      	movs	r3, #0
 800720c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800720e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007212:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007214:	2300      	movs	r3, #0
 8007216:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007218:	f107 031c 	add.w	r3, r7, #28
 800721c:	2102      	movs	r1, #2
 800721e:	4618      	mov	r0, r3
 8007220:	f001 fc5a 	bl	8008ad8 <HAL_RCC_ClockConfig>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800722a:	f000 f8bd 	bl	80073a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800722e:	2302      	movs	r3, #2
 8007230:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8007232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007236:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007238:	1d3b      	adds	r3, r7, #4
 800723a:	4618      	mov	r0, r3
 800723c:	f001 fdda 	bl	8008df4 <HAL_RCCEx_PeriphCLKConfig>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007246:	f000 f8af 	bl	80073a8 <Error_Handler>
  }
}
 800724a:	bf00      	nop
 800724c:	3758      	adds	r7, #88	@ 0x58
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800725a:	1d3b      	adds	r3, r7, #4
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	605a      	str	r2, [r3, #4]
 8007262:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007264:	4b28      	ldr	r3, [pc, #160]	@ (8007308 <MX_ADC1_Init+0xb4>)
 8007266:	4a29      	ldr	r2, [pc, #164]	@ (800730c <MX_ADC1_Init+0xb8>)
 8007268:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800726a:	4b27      	ldr	r3, [pc, #156]	@ (8007308 <MX_ADC1_Init+0xb4>)
 800726c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007270:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007272:	4b25      	ldr	r3, [pc, #148]	@ (8007308 <MX_ADC1_Init+0xb4>)
 8007274:	2200      	movs	r2, #0
 8007276:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8007278:	4b23      	ldr	r3, [pc, #140]	@ (8007308 <MX_ADC1_Init+0xb4>)
 800727a:	2201      	movs	r2, #1
 800727c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 800727e:	4b22      	ldr	r3, [pc, #136]	@ (8007308 <MX_ADC1_Init+0xb4>)
 8007280:	2201      	movs	r2, #1
 8007282:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007284:	4b20      	ldr	r3, [pc, #128]	@ (8007308 <MX_ADC1_Init+0xb4>)
 8007286:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800728a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800728c:	4b1e      	ldr	r3, [pc, #120]	@ (8007308 <MX_ADC1_Init+0xb4>)
 800728e:	2200      	movs	r2, #0
 8007290:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8007292:	4b1d      	ldr	r3, [pc, #116]	@ (8007308 <MX_ADC1_Init+0xb4>)
 8007294:	2203      	movs	r2, #3
 8007296:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007298:	481b      	ldr	r0, [pc, #108]	@ (8007308 <MX_ADC1_Init+0xb4>)
 800729a:	f000 fae5 	bl	8007868 <HAL_ADC_Init>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 80072a4:	f000 f880 	bl	80073a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80072a8:	2305      	movs	r3, #5
 80072aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80072ac:	2301      	movs	r3, #1
 80072ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80072b4:	1d3b      	adds	r3, r7, #4
 80072b6:	4619      	mov	r1, r3
 80072b8:	4813      	ldr	r0, [pc, #76]	@ (8007308 <MX_ADC1_Init+0xb4>)
 80072ba:	f000 fd7f 	bl	8007dbc <HAL_ADC_ConfigChannel>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80072c4:	f000 f870 	bl	80073a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80072c8:	2306      	movs	r3, #6
 80072ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80072cc:	2302      	movs	r3, #2
 80072ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80072d0:	1d3b      	adds	r3, r7, #4
 80072d2:	4619      	mov	r1, r3
 80072d4:	480c      	ldr	r0, [pc, #48]	@ (8007308 <MX_ADC1_Init+0xb4>)
 80072d6:	f000 fd71 	bl	8007dbc <HAL_ADC_ConfigChannel>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80072e0:	f000 f862 	bl	80073a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80072e4:	2307      	movs	r3, #7
 80072e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80072e8:	2303      	movs	r3, #3
 80072ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80072ec:	1d3b      	adds	r3, r7, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	4805      	ldr	r0, [pc, #20]	@ (8007308 <MX_ADC1_Init+0xb4>)
 80072f2:	f000 fd63 	bl	8007dbc <HAL_ADC_ConfigChannel>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80072fc:	f000 f854 	bl	80073a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007300:	bf00      	nop
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20000204 	.word	0x20000204
 800730c:	40012400 	.word	0x40012400

08007310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007314:	4b11      	ldr	r3, [pc, #68]	@ (800735c <MX_USART1_UART_Init+0x4c>)
 8007316:	4a12      	ldr	r2, [pc, #72]	@ (8007360 <MX_USART1_UART_Init+0x50>)
 8007318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800731a:	4b10      	ldr	r3, [pc, #64]	@ (800735c <MX_USART1_UART_Init+0x4c>)
 800731c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007322:	4b0e      	ldr	r3, [pc, #56]	@ (800735c <MX_USART1_UART_Init+0x4c>)
 8007324:	2200      	movs	r2, #0
 8007326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007328:	4b0c      	ldr	r3, [pc, #48]	@ (800735c <MX_USART1_UART_Init+0x4c>)
 800732a:	2200      	movs	r2, #0
 800732c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800732e:	4b0b      	ldr	r3, [pc, #44]	@ (800735c <MX_USART1_UART_Init+0x4c>)
 8007330:	2200      	movs	r2, #0
 8007332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007334:	4b09      	ldr	r3, [pc, #36]	@ (800735c <MX_USART1_UART_Init+0x4c>)
 8007336:	220c      	movs	r2, #12
 8007338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800733a:	4b08      	ldr	r3, [pc, #32]	@ (800735c <MX_USART1_UART_Init+0x4c>)
 800733c:	2200      	movs	r2, #0
 800733e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007340:	4b06      	ldr	r3, [pc, #24]	@ (800735c <MX_USART1_UART_Init+0x4c>)
 8007342:	2200      	movs	r2, #0
 8007344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007346:	4805      	ldr	r0, [pc, #20]	@ (800735c <MX_USART1_UART_Init+0x4c>)
 8007348:	f001 fee2 	bl	8009110 <HAL_UART_Init>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007352:	f000 f829 	bl	80073a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007356:	bf00      	nop
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20000234 	.word	0x20000234
 8007360:	40013800 	.word	0x40013800

08007364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800736a:	4b0e      	ldr	r3, [pc, #56]	@ (80073a4 <MX_GPIO_Init+0x40>)
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	4a0d      	ldr	r2, [pc, #52]	@ (80073a4 <MX_GPIO_Init+0x40>)
 8007370:	f043 0320 	orr.w	r3, r3, #32
 8007374:	6193      	str	r3, [r2, #24]
 8007376:	4b0b      	ldr	r3, [pc, #44]	@ (80073a4 <MX_GPIO_Init+0x40>)
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	607b      	str	r3, [r7, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007382:	4b08      	ldr	r3, [pc, #32]	@ (80073a4 <MX_GPIO_Init+0x40>)
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	4a07      	ldr	r2, [pc, #28]	@ (80073a4 <MX_GPIO_Init+0x40>)
 8007388:	f043 0304 	orr.w	r3, r3, #4
 800738c:	6193      	str	r3, [r2, #24]
 800738e:	4b05      	ldr	r3, [pc, #20]	@ (80073a4 <MX_GPIO_Init+0x40>)
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	bc80      	pop	{r7}
 80073a2:	4770      	bx	lr
 80073a4:	40021000 	.word	0x40021000

080073a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80073ac:	b672      	cpsid	i
}
 80073ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80073b0:	bf00      	nop
 80073b2:	e7fd      	b.n	80073b0 <Error_Handler+0x8>

080073b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80073ba:	4b15      	ldr	r3, [pc, #84]	@ (8007410 <HAL_MspInit+0x5c>)
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	4a14      	ldr	r2, [pc, #80]	@ (8007410 <HAL_MspInit+0x5c>)
 80073c0:	f043 0301 	orr.w	r3, r3, #1
 80073c4:	6193      	str	r3, [r2, #24]
 80073c6:	4b12      	ldr	r3, [pc, #72]	@ (8007410 <HAL_MspInit+0x5c>)
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	60bb      	str	r3, [r7, #8]
 80073d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80073d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007410 <HAL_MspInit+0x5c>)
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007410 <HAL_MspInit+0x5c>)
 80073d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073dc:	61d3      	str	r3, [r2, #28]
 80073de:	4b0c      	ldr	r3, [pc, #48]	@ (8007410 <HAL_MspInit+0x5c>)
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073e6:	607b      	str	r3, [r7, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80073ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007414 <HAL_MspInit+0x60>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	4a04      	ldr	r2, [pc, #16]	@ (8007414 <HAL_MspInit+0x60>)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007406:	bf00      	nop
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	bc80      	pop	{r7}
 800740e:	4770      	bx	lr
 8007410:	40021000 	.word	0x40021000
 8007414:	40010000 	.word	0x40010000

08007418 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007420:	f107 0310 	add.w	r3, r7, #16
 8007424:	2200      	movs	r2, #0
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	605a      	str	r2, [r3, #4]
 800742a:	609a      	str	r2, [r3, #8]
 800742c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a14      	ldr	r2, [pc, #80]	@ (8007484 <HAL_ADC_MspInit+0x6c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d121      	bne.n	800747c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007438:	4b13      	ldr	r3, [pc, #76]	@ (8007488 <HAL_ADC_MspInit+0x70>)
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	4a12      	ldr	r2, [pc, #72]	@ (8007488 <HAL_ADC_MspInit+0x70>)
 800743e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007442:	6193      	str	r3, [r2, #24]
 8007444:	4b10      	ldr	r3, [pc, #64]	@ (8007488 <HAL_ADC_MspInit+0x70>)
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007450:	4b0d      	ldr	r3, [pc, #52]	@ (8007488 <HAL_ADC_MspInit+0x70>)
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	4a0c      	ldr	r2, [pc, #48]	@ (8007488 <HAL_ADC_MspInit+0x70>)
 8007456:	f043 0304 	orr.w	r3, r3, #4
 800745a:	6193      	str	r3, [r2, #24]
 800745c:	4b0a      	ldr	r3, [pc, #40]	@ (8007488 <HAL_ADC_MspInit+0x70>)
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	60bb      	str	r3, [r7, #8]
 8007466:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007468:	23e0      	movs	r3, #224	@ 0xe0
 800746a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800746c:	2303      	movs	r3, #3
 800746e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007470:	f107 0310 	add.w	r3, r7, #16
 8007474:	4619      	mov	r1, r3
 8007476:	4805      	ldr	r0, [pc, #20]	@ (800748c <HAL_ADC_MspInit+0x74>)
 8007478:	f000 ff18 	bl	80082ac <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800747c:	bf00      	nop
 800747e:	3720      	adds	r7, #32
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	40012400 	.word	0x40012400
 8007488:	40021000 	.word	0x40021000
 800748c:	40010800 	.word	0x40010800

08007490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007498:	f107 0310 	add.w	r3, r7, #16
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	605a      	str	r2, [r3, #4]
 80074a2:	609a      	str	r2, [r3, #8]
 80074a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1c      	ldr	r2, [pc, #112]	@ (800751c <HAL_UART_MspInit+0x8c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d131      	bne.n	8007514 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80074b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007520 <HAL_UART_MspInit+0x90>)
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007520 <HAL_UART_MspInit+0x90>)
 80074b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80074ba:	6193      	str	r3, [r2, #24]
 80074bc:	4b18      	ldr	r3, [pc, #96]	@ (8007520 <HAL_UART_MspInit+0x90>)
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c8:	4b15      	ldr	r3, [pc, #84]	@ (8007520 <HAL_UART_MspInit+0x90>)
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	4a14      	ldr	r2, [pc, #80]	@ (8007520 <HAL_UART_MspInit+0x90>)
 80074ce:	f043 0304 	orr.w	r3, r3, #4
 80074d2:	6193      	str	r3, [r2, #24]
 80074d4:	4b12      	ldr	r3, [pc, #72]	@ (8007520 <HAL_UART_MspInit+0x90>)
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	60bb      	str	r3, [r7, #8]
 80074de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80074e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e6:	2302      	movs	r3, #2
 80074e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074ea:	2303      	movs	r3, #3
 80074ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ee:	f107 0310 	add.w	r3, r7, #16
 80074f2:	4619      	mov	r1, r3
 80074f4:	480b      	ldr	r0, [pc, #44]	@ (8007524 <HAL_UART_MspInit+0x94>)
 80074f6:	f000 fed9 	bl	80082ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80074fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007500:	2300      	movs	r3, #0
 8007502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007504:	2300      	movs	r3, #0
 8007506:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007508:	f107 0310 	add.w	r3, r7, #16
 800750c:	4619      	mov	r1, r3
 800750e:	4805      	ldr	r0, [pc, #20]	@ (8007524 <HAL_UART_MspInit+0x94>)
 8007510:	f000 fecc 	bl	80082ac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8007514:	bf00      	nop
 8007516:	3720      	adds	r7, #32
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	40013800 	.word	0x40013800
 8007520:	40021000 	.word	0x40021000
 8007524:	40010800 	.word	0x40010800

08007528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007528:	b480      	push	{r7}
 800752a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800752c:	bf00      	nop
 800752e:	e7fd      	b.n	800752c <NMI_Handler+0x4>

08007530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007534:	bf00      	nop
 8007536:	e7fd      	b.n	8007534 <HardFault_Handler+0x4>

08007538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800753c:	bf00      	nop
 800753e:	e7fd      	b.n	800753c <MemManage_Handler+0x4>

08007540 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007544:	bf00      	nop
 8007546:	e7fd      	b.n	8007544 <BusFault_Handler+0x4>

08007548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800754c:	bf00      	nop
 800754e:	e7fd      	b.n	800754c <UsageFault_Handler+0x4>

08007550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007550:	b480      	push	{r7}
 8007552:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007554:	bf00      	nop
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr

0800755c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007560:	bf00      	nop
 8007562:	46bd      	mov	sp, r7
 8007564:	bc80      	pop	{r7}
 8007566:	4770      	bx	lr

08007568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800756c:	bf00      	nop
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr

08007574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007578:	f000 f936 	bl	80077e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800757c:	bf00      	nop
 800757e:	bd80      	pop	{r7, pc}

08007580 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  return 1;
 8007584:	2301      	movs	r3, #1
}
 8007586:	4618      	mov	r0, r3
 8007588:	46bd      	mov	sp, r7
 800758a:	bc80      	pop	{r7}
 800758c:	4770      	bx	lr

0800758e <_kill>:

int _kill(int pid, int sig)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007598:	f002 fdb2 	bl	800a100 <__errno>
 800759c:	4603      	mov	r3, r0
 800759e:	2216      	movs	r2, #22
 80075a0:	601a      	str	r2, [r3, #0]
  return -1;
 80075a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <_exit>:

void _exit (int status)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b082      	sub	sp, #8
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80075b6:	f04f 31ff 	mov.w	r1, #4294967295
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff ffe7 	bl	800758e <_kill>
  while (1) {}    /* Make sure we hang here */
 80075c0:	bf00      	nop
 80075c2:	e7fd      	b.n	80075c0 <_exit+0x12>

080075c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075d0:	2300      	movs	r3, #0
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	e00a      	b.n	80075ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80075d6:	f3af 8000 	nop.w
 80075da:	4601      	mov	r1, r0
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	60ba      	str	r2, [r7, #8]
 80075e2:	b2ca      	uxtb	r2, r1
 80075e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	3301      	adds	r3, #1
 80075ea:	617b      	str	r3, [r7, #20]
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	dbf0      	blt.n	80075d6 <_read+0x12>
  }

  return len;
 80075f4:	687b      	ldr	r3, [r7, #4]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b086      	sub	sp, #24
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800760a:	2300      	movs	r3, #0
 800760c:	617b      	str	r3, [r7, #20]
 800760e:	e009      	b.n	8007624 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	60ba      	str	r2, [r7, #8]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	3301      	adds	r3, #1
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	429a      	cmp	r2, r3
 800762a:	dbf1      	blt.n	8007610 <_write+0x12>
  }
  return len;
 800762c:	687b      	ldr	r3, [r7, #4]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <_close>:

int _close(int file)
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800763e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007642:	4618      	mov	r0, r3
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr

0800764c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800765c:	605a      	str	r2, [r3, #4]
  return 0;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr

0800766a <_isatty>:

int _isatty(int file)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007672:	2301      	movs	r3, #1
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	bc80      	pop	{r7}
 800767c:	4770      	bx	lr

0800767e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	bc80      	pop	{r7}
 8007694:	4770      	bx	lr
	...

08007698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076a0:	4a14      	ldr	r2, [pc, #80]	@ (80076f4 <_sbrk+0x5c>)
 80076a2:	4b15      	ldr	r3, [pc, #84]	@ (80076f8 <_sbrk+0x60>)
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80076ac:	4b13      	ldr	r3, [pc, #76]	@ (80076fc <_sbrk+0x64>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d102      	bne.n	80076ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80076b4:	4b11      	ldr	r3, [pc, #68]	@ (80076fc <_sbrk+0x64>)
 80076b6:	4a12      	ldr	r2, [pc, #72]	@ (8007700 <_sbrk+0x68>)
 80076b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80076ba:	4b10      	ldr	r3, [pc, #64]	@ (80076fc <_sbrk+0x64>)
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4413      	add	r3, r2
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d207      	bcs.n	80076d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80076c8:	f002 fd1a 	bl	800a100 <__errno>
 80076cc:	4603      	mov	r3, r0
 80076ce:	220c      	movs	r2, #12
 80076d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80076d2:	f04f 33ff 	mov.w	r3, #4294967295
 80076d6:	e009      	b.n	80076ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076d8:	4b08      	ldr	r3, [pc, #32]	@ (80076fc <_sbrk+0x64>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80076de:	4b07      	ldr	r3, [pc, #28]	@ (80076fc <_sbrk+0x64>)
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4413      	add	r3, r2
 80076e6:	4a05      	ldr	r2, [pc, #20]	@ (80076fc <_sbrk+0x64>)
 80076e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80076ea:	68fb      	ldr	r3, [r7, #12]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	2000c000 	.word	0x2000c000
 80076f8:	00000400 	.word	0x00000400
 80076fc:	2000027c 	.word	0x2000027c
 8007700:	200003d0 	.word	0x200003d0

08007704 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007708:	bf00      	nop
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr

08007710 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007710:	f7ff fff8 	bl	8007704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007714:	480b      	ldr	r0, [pc, #44]	@ (8007744 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007716:	490c      	ldr	r1, [pc, #48]	@ (8007748 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007718:	4a0c      	ldr	r2, [pc, #48]	@ (800774c <LoopFillZerobss+0x16>)
  movs r3, #0
 800771a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800771c:	e002      	b.n	8007724 <LoopCopyDataInit>

0800771e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800771e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007722:	3304      	adds	r3, #4

08007724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007728:	d3f9      	bcc.n	800771e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800772a:	4a09      	ldr	r2, [pc, #36]	@ (8007750 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800772c:	4c09      	ldr	r4, [pc, #36]	@ (8007754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800772e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007730:	e001      	b.n	8007736 <LoopFillZerobss>

08007732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007734:	3204      	adds	r2, #4

08007736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007738:	d3fb      	bcc.n	8007732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800773a:	f002 fce7 	bl	800a10c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800773e:	f7ff fc53 	bl	8006fe8 <main>
  bx lr
 8007742:	4770      	bx	lr
  ldr r0, =_sdata
 8007744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007748:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800774c:	0800f560 	.word	0x0800f560
  ldr r2, =_sbss
 8007750:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8007754:	200003d0 	.word	0x200003d0

08007758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007758:	e7fe      	b.n	8007758 <ADC1_2_IRQHandler>
	...

0800775c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007760:	4b08      	ldr	r3, [pc, #32]	@ (8007784 <HAL_Init+0x28>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a07      	ldr	r2, [pc, #28]	@ (8007784 <HAL_Init+0x28>)
 8007766:	f043 0310 	orr.w	r3, r3, #16
 800776a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800776c:	2003      	movs	r0, #3
 800776e:	f000 fd69 	bl	8008244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007772:	200f      	movs	r0, #15
 8007774:	f000 f808 	bl	8007788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007778:	f7ff fe1c 	bl	80073b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40022000 	.word	0x40022000

08007788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007790:	4b12      	ldr	r3, [pc, #72]	@ (80077dc <HAL_InitTick+0x54>)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	4b12      	ldr	r3, [pc, #72]	@ (80077e0 <HAL_InitTick+0x58>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	4619      	mov	r1, r3
 800779a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800779e:	fbb3 f3f1 	udiv	r3, r3, r1
 80077a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fd73 	bl	8008292 <HAL_SYSTICK_Config>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e00e      	b.n	80077d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b0f      	cmp	r3, #15
 80077ba:	d80a      	bhi.n	80077d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80077bc:	2200      	movs	r2, #0
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	f04f 30ff 	mov.w	r0, #4294967295
 80077c4:	f000 fd49 	bl	800825a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80077c8:	4a06      	ldr	r2, [pc, #24]	@ (80077e4 <HAL_InitTick+0x5c>)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	e000      	b.n	80077d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	20000004 	.word	0x20000004
 80077e0:	2000000c 	.word	0x2000000c
 80077e4:	20000008 	.word	0x20000008

080077e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80077ec:	4b05      	ldr	r3, [pc, #20]	@ (8007804 <HAL_IncTick+0x1c>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	4b05      	ldr	r3, [pc, #20]	@ (8007808 <HAL_IncTick+0x20>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4413      	add	r3, r2
 80077f8:	4a03      	ldr	r2, [pc, #12]	@ (8007808 <HAL_IncTick+0x20>)
 80077fa:	6013      	str	r3, [r2, #0]
}
 80077fc:	bf00      	nop
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr
 8007804:	2000000c 	.word	0x2000000c
 8007808:	20000280 	.word	0x20000280

0800780c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
  return uwTick;
 8007810:	4b02      	ldr	r3, [pc, #8]	@ (800781c <HAL_GetTick+0x10>)
 8007812:	681b      	ldr	r3, [r3, #0]
}
 8007814:	4618      	mov	r0, r3
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr
 800781c:	20000280 	.word	0x20000280

08007820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007828:	f7ff fff0 	bl	800780c <HAL_GetTick>
 800782c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d005      	beq.n	8007846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800783a:	4b0a      	ldr	r3, [pc, #40]	@ (8007864 <HAL_Delay+0x44>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4413      	add	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007846:	bf00      	nop
 8007848:	f7ff ffe0 	bl	800780c <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	429a      	cmp	r2, r3
 8007856:	d8f7      	bhi.n	8007848 <HAL_Delay+0x28>
  {
  }
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	2000000c 	.word	0x2000000c

08007868 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e0ce      	b.n	8007a28 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007894:	2b00      	cmp	r3, #0
 8007896:	d109      	bne.n	80078ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7ff fdb6 	bl	8007418 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fbd7 	bl	8008060 <ADC_ConversionStop_Disable>
 80078b2:	4603      	mov	r3, r0
 80078b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ba:	f003 0310 	and.w	r3, r3, #16
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f040 80a9 	bne.w	8007a16 <HAL_ADC_Init+0x1ae>
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f040 80a5 	bne.w	8007a16 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80078d4:	f023 0302 	bic.w	r3, r3, #2
 80078d8:	f043 0202 	orr.w	r2, r3, #2
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4951      	ldr	r1, [pc, #324]	@ (8007a30 <HAL_ADC_Init+0x1c8>)
 80078ea:	428b      	cmp	r3, r1
 80078ec:	d10a      	bne.n	8007904 <HAL_ADC_Init+0x9c>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80078f6:	d002      	beq.n	80078fe <HAL_ADC_Init+0x96>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	e004      	b.n	8007908 <HAL_ADC_Init+0xa0>
 80078fe:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007902:	e001      	b.n	8007908 <HAL_ADC_Init+0xa0>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007908:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7b1b      	ldrb	r3, [r3, #12]
 800790e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007910:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	4313      	orrs	r3, r2
 8007916:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007920:	d003      	beq.n	800792a <HAL_ADC_Init+0xc2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d102      	bne.n	8007930 <HAL_ADC_Init+0xc8>
 800792a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800792e:	e000      	b.n	8007932 <HAL_ADC_Init+0xca>
 8007930:	2300      	movs	r3, #0
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	7d1b      	ldrb	r3, [r3, #20]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d119      	bne.n	8007974 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	7b1b      	ldrb	r3, [r3, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d109      	bne.n	800795c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	3b01      	subs	r3, #1
 800794e:	035a      	lsls	r2, r3, #13
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	e00b      	b.n	8007974 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	f043 0220 	orr.w	r2, r3, #32
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796c:	f043 0201 	orr.w	r2, r3, #1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	430a      	orrs	r2, r1
 8007986:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	4b29      	ldr	r3, [pc, #164]	@ (8007a34 <HAL_ADC_Init+0x1cc>)
 8007990:	4013      	ands	r3, r2
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6812      	ldr	r2, [r2, #0]
 8007996:	68b9      	ldr	r1, [r7, #8]
 8007998:	430b      	orrs	r3, r1
 800799a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079a4:	d003      	beq.n	80079ae <HAL_ADC_Init+0x146>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d104      	bne.n	80079b8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	051b      	lsls	r3, r3, #20
 80079b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079be:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689a      	ldr	r2, [r3, #8]
 80079d2:	4b19      	ldr	r3, [pc, #100]	@ (8007a38 <HAL_ADC_Init+0x1d0>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d10b      	bne.n	80079f4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e6:	f023 0303 	bic.w	r3, r3, #3
 80079ea:	f043 0201 	orr.w	r2, r3, #1
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80079f2:	e018      	b.n	8007a26 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f8:	f023 0312 	bic.w	r3, r3, #18
 80079fc:	f043 0210 	orr.w	r2, r3, #16
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a08:	f043 0201 	orr.w	r2, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007a14:	e007      	b.n	8007a26 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1a:	f043 0210 	orr.w	r2, r3, #16
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	40013c00 	.word	0x40013c00
 8007a34:	ffe1f7fd 	.word	0xffe1f7fd
 8007a38:	ff1f0efe 	.word	0xff1f0efe

08007a3c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d101      	bne.n	8007a56 <HAL_ADC_Start+0x1a>
 8007a52:	2302      	movs	r3, #2
 8007a54:	e098      	b.n	8007b88 <HAL_ADC_Start+0x14c>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 faa4 	bl	8007fac <ADC_Enable>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f040 8087 	bne.w	8007b7e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a78:	f023 0301 	bic.w	r3, r3, #1
 8007a7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a41      	ldr	r2, [pc, #260]	@ (8007b90 <HAL_ADC_Start+0x154>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d105      	bne.n	8007a9a <HAL_ADC_Start+0x5e>
 8007a8e:	4b41      	ldr	r3, [pc, #260]	@ (8007b94 <HAL_ADC_Start+0x158>)
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d115      	bne.n	8007ac6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d026      	beq.n	8007b02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007abc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007ac4:	e01d      	b.n	8007b02 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8007b94 <HAL_ADC_Start+0x158>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d004      	beq.n	8007ae6 <HAL_ADC_Start+0xaa>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8007b90 <HAL_ADC_Start+0x154>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d10d      	bne.n	8007b02 <HAL_ADC_Start+0xc6>
 8007ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8007b94 <HAL_ADC_Start+0x158>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007afa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d006      	beq.n	8007b1c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b12:	f023 0206 	bic.w	r2, r3, #6
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007b1a:	e002      	b.n	8007b22 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f06f 0202 	mvn.w	r2, #2
 8007b32:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8007b3e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8007b42:	d113      	bne.n	8007b6c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007b48:	4a11      	ldr	r2, [pc, #68]	@ (8007b90 <HAL_ADC_Start+0x154>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d105      	bne.n	8007b5a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007b4e:	4b11      	ldr	r3, [pc, #68]	@ (8007b94 <HAL_ADC_Start+0x158>)
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d108      	bne.n	8007b6c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8007b68:	609a      	str	r2, [r3, #8]
 8007b6a:	e00c      	b.n	8007b86 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007b7a:	609a      	str	r2, [r3, #8]
 8007b7c:	e003      	b.n	8007b86 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40012800 	.word	0x40012800
 8007b94:	40012400 	.word	0x40012400

08007b98 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007b98:	b590      	push	{r4, r7, lr}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8007bae:	f7ff fe2d 	bl	800780c <HAL_GetTick>
 8007bb2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00b      	beq.n	8007bda <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc6:	f043 0220 	orr.w	r2, r3, #32
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e0d3      	b.n	8007d82 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d131      	bne.n	8007c4c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d12a      	bne.n	8007c4c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8007bf6:	e021      	b.n	8007c3c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfe:	d01d      	beq.n	8007c3c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d007      	beq.n	8007c16 <HAL_ADC_PollForConversion+0x7e>
 8007c06:	f7ff fe01 	bl	800780c <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d212      	bcs.n	8007c3c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10b      	bne.n	8007c3c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c28:	f043 0204 	orr.w	r2, r3, #4
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e0a2      	b.n	8007d82 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0d6      	beq.n	8007bf8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8007c4a:	e070      	b.n	8007d2e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8007c4c:	4b4f      	ldr	r3, [pc, #316]	@ (8007d8c <HAL_ADC_PollForConversion+0x1f4>)
 8007c4e:	681c      	ldr	r4, [r3, #0]
 8007c50:	2002      	movs	r0, #2
 8007c52:	f001 f985 	bl	8008f60 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c56:	4603      	mov	r3, r0
 8007c58:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6919      	ldr	r1, [r3, #16]
 8007c62:	4b4b      	ldr	r3, [pc, #300]	@ (8007d90 <HAL_ADC_PollForConversion+0x1f8>)
 8007c64:	400b      	ands	r3, r1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d118      	bne.n	8007c9c <HAL_ADC_PollForConversion+0x104>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68d9      	ldr	r1, [r3, #12]
 8007c70:	4b48      	ldr	r3, [pc, #288]	@ (8007d94 <HAL_ADC_PollForConversion+0x1fc>)
 8007c72:	400b      	ands	r3, r1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d111      	bne.n	8007c9c <HAL_ADC_PollForConversion+0x104>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6919      	ldr	r1, [r3, #16]
 8007c7e:	4b46      	ldr	r3, [pc, #280]	@ (8007d98 <HAL_ADC_PollForConversion+0x200>)
 8007c80:	400b      	ands	r3, r1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d108      	bne.n	8007c98 <HAL_ADC_PollForConversion+0x100>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68d9      	ldr	r1, [r3, #12]
 8007c8c:	4b43      	ldr	r3, [pc, #268]	@ (8007d9c <HAL_ADC_PollForConversion+0x204>)
 8007c8e:	400b      	ands	r3, r1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <HAL_ADC_PollForConversion+0x100>
 8007c94:	2314      	movs	r3, #20
 8007c96:	e020      	b.n	8007cda <HAL_ADC_PollForConversion+0x142>
 8007c98:	2329      	movs	r3, #41	@ 0x29
 8007c9a:	e01e      	b.n	8007cda <HAL_ADC_PollForConversion+0x142>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6919      	ldr	r1, [r3, #16]
 8007ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8007d98 <HAL_ADC_PollForConversion+0x200>)
 8007ca4:	400b      	ands	r3, r1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d106      	bne.n	8007cb8 <HAL_ADC_PollForConversion+0x120>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68d9      	ldr	r1, [r3, #12]
 8007cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8007d9c <HAL_ADC_PollForConversion+0x204>)
 8007cb2:	400b      	ands	r3, r1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00d      	beq.n	8007cd4 <HAL_ADC_PollForConversion+0x13c>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6919      	ldr	r1, [r3, #16]
 8007cbe:	4b38      	ldr	r3, [pc, #224]	@ (8007da0 <HAL_ADC_PollForConversion+0x208>)
 8007cc0:	400b      	ands	r3, r1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d108      	bne.n	8007cd8 <HAL_ADC_PollForConversion+0x140>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68d9      	ldr	r1, [r3, #12]
 8007ccc:	4b34      	ldr	r3, [pc, #208]	@ (8007da0 <HAL_ADC_PollForConversion+0x208>)
 8007cce:	400b      	ands	r3, r1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_ADC_PollForConversion+0x140>
 8007cd4:	2354      	movs	r3, #84	@ 0x54
 8007cd6:	e000      	b.n	8007cda <HAL_ADC_PollForConversion+0x142>
 8007cd8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8007cda:	fb02 f303 	mul.w	r3, r2, r3
 8007cde:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007ce0:	e021      	b.n	8007d26 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce8:	d01a      	beq.n	8007d20 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d007      	beq.n	8007d00 <HAL_ADC_PollForConversion+0x168>
 8007cf0:	f7ff fd8c 	bl	800780c <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d20f      	bcs.n	8007d20 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d90b      	bls.n	8007d20 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0c:	f043 0204 	orr.w	r2, r3, #4
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e030      	b.n	8007d82 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3301      	adds	r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d8d9      	bhi.n	8007ce2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f06f 0212 	mvn.w	r2, #18
 8007d36:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8007d4e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8007d52:	d115      	bne.n	8007d80 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d111      	bne.n	8007d80 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d105      	bne.n	8007d80 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d78:	f043 0201 	orr.w	r2, r3, #1
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd90      	pop	{r4, r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000004 	.word	0x20000004
 8007d90:	24924924 	.word	0x24924924
 8007d94:	00924924 	.word	0x00924924
 8007d98:	12492492 	.word	0x12492492
 8007d9c:	00492492 	.word	0x00492492
 8007da0:	00249249 	.word	0x00249249

08007da4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bc80      	pop	{r7}
 8007dba:	4770      	bx	lr

08007dbc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <HAL_ADC_ConfigChannel+0x20>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e0dc      	b.n	8007f96 <HAL_ADC_ConfigChannel+0x1da>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2b06      	cmp	r3, #6
 8007dea:	d81c      	bhi.n	8007e26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	3b05      	subs	r3, #5
 8007dfe:	221f      	movs	r2, #31
 8007e00:	fa02 f303 	lsl.w	r3, r2, r3
 8007e04:	43db      	mvns	r3, r3
 8007e06:	4019      	ands	r1, r3
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	6818      	ldr	r0, [r3, #0]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	3b05      	subs	r3, #5
 8007e18:	fa00 f203 	lsl.w	r2, r0, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	635a      	str	r2, [r3, #52]	@ 0x34
 8007e24:	e03c      	b.n	8007ea0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	2b0c      	cmp	r3, #12
 8007e2c:	d81c      	bhi.n	8007e68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3b23      	subs	r3, #35	@ 0x23
 8007e40:	221f      	movs	r2, #31
 8007e42:	fa02 f303 	lsl.w	r3, r2, r3
 8007e46:	43db      	mvns	r3, r3
 8007e48:	4019      	ands	r1, r3
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	4613      	mov	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	3b23      	subs	r3, #35	@ 0x23
 8007e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e66:	e01b      	b.n	8007ea0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	3b41      	subs	r3, #65	@ 0x41
 8007e7a:	221f      	movs	r2, #31
 8007e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e80:	43db      	mvns	r3, r3
 8007e82:	4019      	ands	r1, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	6818      	ldr	r0, [r3, #0]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	3b41      	subs	r3, #65	@ 0x41
 8007e94:	fa00 f203 	lsl.w	r2, r0, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b09      	cmp	r3, #9
 8007ea6:	d91c      	bls.n	8007ee2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68d9      	ldr	r1, [r3, #12]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3b1e      	subs	r3, #30
 8007eba:	2207      	movs	r2, #7
 8007ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	4019      	ands	r1, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	6898      	ldr	r0, [r3, #8]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	4413      	add	r3, r2
 8007ed2:	3b1e      	subs	r3, #30
 8007ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	60da      	str	r2, [r3, #12]
 8007ee0:	e019      	b.n	8007f16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6919      	ldr	r1, [r3, #16]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	4613      	mov	r3, r2
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	4413      	add	r3, r2
 8007ef2:	2207      	movs	r2, #7
 8007ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef8:	43db      	mvns	r3, r3
 8007efa:	4019      	ands	r1, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	6898      	ldr	r0, [r3, #8]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	4613      	mov	r3, r2
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	4413      	add	r3, r2
 8007f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b10      	cmp	r3, #16
 8007f1c:	d003      	beq.n	8007f26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007f22:	2b11      	cmp	r3, #17
 8007f24:	d132      	bne.n	8007f8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8007fa0 <HAL_ADC_ConfigChannel+0x1e4>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d125      	bne.n	8007f7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d126      	bne.n	8007f8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8007f4c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b10      	cmp	r3, #16
 8007f54:	d11a      	bne.n	8007f8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007f56:	4b13      	ldr	r3, [pc, #76]	@ (8007fa4 <HAL_ADC_ConfigChannel+0x1e8>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a13      	ldr	r2, [pc, #76]	@ (8007fa8 <HAL_ADC_ConfigChannel+0x1ec>)
 8007f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f60:	0c9a      	lsrs	r2, r3, #18
 8007f62:	4613      	mov	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007f6c:	e002      	b.n	8007f74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1f9      	bne.n	8007f6e <HAL_ADC_ConfigChannel+0x1b2>
 8007f7a:	e007      	b.n	8007f8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f80:	f043 0220 	orr.w	r2, r3, #32
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr
 8007fa0:	40012400 	.word	0x40012400
 8007fa4:	20000004 	.word	0x20000004
 8007fa8:	431bde83 	.word	0x431bde83

08007fac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d040      	beq.n	800804c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0201 	orr.w	r2, r2, #1
 8007fd8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007fda:	4b1f      	ldr	r3, [pc, #124]	@ (8008058 <ADC_Enable+0xac>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a1f      	ldr	r2, [pc, #124]	@ (800805c <ADC_Enable+0xb0>)
 8007fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe4:	0c9b      	lsrs	r3, r3, #18
 8007fe6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007fe8:	e002      	b.n	8007ff0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1f9      	bne.n	8007fea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007ff6:	f7ff fc09 	bl	800780c <HAL_GetTick>
 8007ffa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007ffc:	e01f      	b.n	800803e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007ffe:	f7ff fc05 	bl	800780c <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d918      	bls.n	800803e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b01      	cmp	r3, #1
 8008018:	d011      	beq.n	800803e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801e:	f043 0210 	orr.w	r2, r3, #16
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802a:	f043 0201 	orr.w	r2, r3, #1
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e007      	b.n	800804e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b01      	cmp	r3, #1
 800804a:	d1d8      	bne.n	8007ffe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20000004 	.word	0x20000004
 800805c:	431bde83 	.word	0x431bde83

08008060 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b01      	cmp	r3, #1
 8008078:	d12e      	bne.n	80080d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689a      	ldr	r2, [r3, #8]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0201 	bic.w	r2, r2, #1
 8008088:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800808a:	f7ff fbbf 	bl	800780c <HAL_GetTick>
 800808e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008090:	e01b      	b.n	80080ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008092:	f7ff fbbb 	bl	800780c <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d914      	bls.n	80080ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d10d      	bne.n	80080ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b2:	f043 0210 	orr.w	r2, r3, #16
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080be:	f043 0201 	orr.w	r2, r3, #1
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e007      	b.n	80080da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d0dc      	beq.n	8008092 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008128 <__NVIC_SetPriorityGrouping+0x44>)
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008100:	4013      	ands	r3, r2
 8008102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800810c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008116:	4a04      	ldr	r2, [pc, #16]	@ (8008128 <__NVIC_SetPriorityGrouping+0x44>)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	60d3      	str	r3, [r2, #12]
}
 800811c:	bf00      	nop
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	bc80      	pop	{r7}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	e000ed00 	.word	0xe000ed00

0800812c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008130:	4b04      	ldr	r3, [pc, #16]	@ (8008144 <__NVIC_GetPriorityGrouping+0x18>)
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	0a1b      	lsrs	r3, r3, #8
 8008136:	f003 0307 	and.w	r3, r3, #7
}
 800813a:	4618      	mov	r0, r3
 800813c:	46bd      	mov	sp, r7
 800813e:	bc80      	pop	{r7}
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	e000ed00 	.word	0xe000ed00

08008148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	6039      	str	r1, [r7, #0]
 8008152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008158:	2b00      	cmp	r3, #0
 800815a:	db0a      	blt.n	8008172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	b2da      	uxtb	r2, r3
 8008160:	490c      	ldr	r1, [pc, #48]	@ (8008194 <__NVIC_SetPriority+0x4c>)
 8008162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008166:	0112      	lsls	r2, r2, #4
 8008168:	b2d2      	uxtb	r2, r2
 800816a:	440b      	add	r3, r1
 800816c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008170:	e00a      	b.n	8008188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	b2da      	uxtb	r2, r3
 8008176:	4908      	ldr	r1, [pc, #32]	@ (8008198 <__NVIC_SetPriority+0x50>)
 8008178:	79fb      	ldrb	r3, [r7, #7]
 800817a:	f003 030f 	and.w	r3, r3, #15
 800817e:	3b04      	subs	r3, #4
 8008180:	0112      	lsls	r2, r2, #4
 8008182:	b2d2      	uxtb	r2, r2
 8008184:	440b      	add	r3, r1
 8008186:	761a      	strb	r2, [r3, #24]
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	e000e100 	.word	0xe000e100
 8008198:	e000ed00 	.word	0xe000ed00

0800819c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800819c:	b480      	push	{r7}
 800819e:	b089      	sub	sp, #36	@ 0x24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f003 0307 	and.w	r3, r3, #7
 80081ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	f1c3 0307 	rsb	r3, r3, #7
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	bf28      	it	cs
 80081ba:	2304      	movcs	r3, #4
 80081bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	3304      	adds	r3, #4
 80081c2:	2b06      	cmp	r3, #6
 80081c4:	d902      	bls.n	80081cc <NVIC_EncodePriority+0x30>
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	3b03      	subs	r3, #3
 80081ca:	e000      	b.n	80081ce <NVIC_EncodePriority+0x32>
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081d0:	f04f 32ff 	mov.w	r2, #4294967295
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	fa02 f303 	lsl.w	r3, r2, r3
 80081da:	43da      	mvns	r2, r3
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	401a      	ands	r2, r3
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80081e4:	f04f 31ff 	mov.w	r1, #4294967295
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	fa01 f303 	lsl.w	r3, r1, r3
 80081ee:	43d9      	mvns	r1, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081f4:	4313      	orrs	r3, r2
         );
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3724      	adds	r7, #36	@ 0x24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bc80      	pop	{r7}
 80081fe:	4770      	bx	lr

08008200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3b01      	subs	r3, #1
 800820c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008210:	d301      	bcc.n	8008216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008212:	2301      	movs	r3, #1
 8008214:	e00f      	b.n	8008236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008216:	4a0a      	ldr	r2, [pc, #40]	@ (8008240 <SysTick_Config+0x40>)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3b01      	subs	r3, #1
 800821c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800821e:	210f      	movs	r1, #15
 8008220:	f04f 30ff 	mov.w	r0, #4294967295
 8008224:	f7ff ff90 	bl	8008148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008228:	4b05      	ldr	r3, [pc, #20]	@ (8008240 <SysTick_Config+0x40>)
 800822a:	2200      	movs	r2, #0
 800822c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800822e:	4b04      	ldr	r3, [pc, #16]	@ (8008240 <SysTick_Config+0x40>)
 8008230:	2207      	movs	r2, #7
 8008232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	e000e010 	.word	0xe000e010

08008244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7ff ff49 	bl	80080e4 <__NVIC_SetPriorityGrouping>
}
 8008252:	bf00      	nop
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800825a:	b580      	push	{r7, lr}
 800825c:	b086      	sub	sp, #24
 800825e:	af00      	add	r7, sp, #0
 8008260:	4603      	mov	r3, r0
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	607a      	str	r2, [r7, #4]
 8008266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800826c:	f7ff ff5e 	bl	800812c <__NVIC_GetPriorityGrouping>
 8008270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	68b9      	ldr	r1, [r7, #8]
 8008276:	6978      	ldr	r0, [r7, #20]
 8008278:	f7ff ff90 	bl	800819c <NVIC_EncodePriority>
 800827c:	4602      	mov	r2, r0
 800827e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008282:	4611      	mov	r1, r2
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff ff5f 	bl	8008148 <__NVIC_SetPriority>
}
 800828a:	bf00      	nop
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b082      	sub	sp, #8
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7ff ffb0 	bl	8008200 <SysTick_Config>
 80082a0:	4603      	mov	r3, r0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b08b      	sub	sp, #44	@ 0x2c
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80082b6:	2300      	movs	r3, #0
 80082b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80082ba:	2300      	movs	r3, #0
 80082bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082be:	e179      	b.n	80085b4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80082c0:	2201      	movs	r2, #1
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	4013      	ands	r3, r2
 80082d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	429a      	cmp	r2, r3
 80082da:	f040 8168 	bne.w	80085ae <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	4a96      	ldr	r2, [pc, #600]	@ (800853c <HAL_GPIO_Init+0x290>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d05e      	beq.n	80083a6 <HAL_GPIO_Init+0xfa>
 80082e8:	4a94      	ldr	r2, [pc, #592]	@ (800853c <HAL_GPIO_Init+0x290>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d875      	bhi.n	80083da <HAL_GPIO_Init+0x12e>
 80082ee:	4a94      	ldr	r2, [pc, #592]	@ (8008540 <HAL_GPIO_Init+0x294>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d058      	beq.n	80083a6 <HAL_GPIO_Init+0xfa>
 80082f4:	4a92      	ldr	r2, [pc, #584]	@ (8008540 <HAL_GPIO_Init+0x294>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d86f      	bhi.n	80083da <HAL_GPIO_Init+0x12e>
 80082fa:	4a92      	ldr	r2, [pc, #584]	@ (8008544 <HAL_GPIO_Init+0x298>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d052      	beq.n	80083a6 <HAL_GPIO_Init+0xfa>
 8008300:	4a90      	ldr	r2, [pc, #576]	@ (8008544 <HAL_GPIO_Init+0x298>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d869      	bhi.n	80083da <HAL_GPIO_Init+0x12e>
 8008306:	4a90      	ldr	r2, [pc, #576]	@ (8008548 <HAL_GPIO_Init+0x29c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d04c      	beq.n	80083a6 <HAL_GPIO_Init+0xfa>
 800830c:	4a8e      	ldr	r2, [pc, #568]	@ (8008548 <HAL_GPIO_Init+0x29c>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d863      	bhi.n	80083da <HAL_GPIO_Init+0x12e>
 8008312:	4a8e      	ldr	r2, [pc, #568]	@ (800854c <HAL_GPIO_Init+0x2a0>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d046      	beq.n	80083a6 <HAL_GPIO_Init+0xfa>
 8008318:	4a8c      	ldr	r2, [pc, #560]	@ (800854c <HAL_GPIO_Init+0x2a0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d85d      	bhi.n	80083da <HAL_GPIO_Init+0x12e>
 800831e:	2b12      	cmp	r3, #18
 8008320:	d82a      	bhi.n	8008378 <HAL_GPIO_Init+0xcc>
 8008322:	2b12      	cmp	r3, #18
 8008324:	d859      	bhi.n	80083da <HAL_GPIO_Init+0x12e>
 8008326:	a201      	add	r2, pc, #4	@ (adr r2, 800832c <HAL_GPIO_Init+0x80>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	080083a7 	.word	0x080083a7
 8008330:	08008381 	.word	0x08008381
 8008334:	08008393 	.word	0x08008393
 8008338:	080083d5 	.word	0x080083d5
 800833c:	080083db 	.word	0x080083db
 8008340:	080083db 	.word	0x080083db
 8008344:	080083db 	.word	0x080083db
 8008348:	080083db 	.word	0x080083db
 800834c:	080083db 	.word	0x080083db
 8008350:	080083db 	.word	0x080083db
 8008354:	080083db 	.word	0x080083db
 8008358:	080083db 	.word	0x080083db
 800835c:	080083db 	.word	0x080083db
 8008360:	080083db 	.word	0x080083db
 8008364:	080083db 	.word	0x080083db
 8008368:	080083db 	.word	0x080083db
 800836c:	080083db 	.word	0x080083db
 8008370:	08008389 	.word	0x08008389
 8008374:	0800839d 	.word	0x0800839d
 8008378:	4a75      	ldr	r2, [pc, #468]	@ (8008550 <HAL_GPIO_Init+0x2a4>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d013      	beq.n	80083a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800837e:	e02c      	b.n	80083da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	623b      	str	r3, [r7, #32]
          break;
 8008386:	e029      	b.n	80083dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	3304      	adds	r3, #4
 800838e:	623b      	str	r3, [r7, #32]
          break;
 8008390:	e024      	b.n	80083dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	3308      	adds	r3, #8
 8008398:	623b      	str	r3, [r7, #32]
          break;
 800839a:	e01f      	b.n	80083dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	330c      	adds	r3, #12
 80083a2:	623b      	str	r3, [r7, #32]
          break;
 80083a4:	e01a      	b.n	80083dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d102      	bne.n	80083b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80083ae:	2304      	movs	r3, #4
 80083b0:	623b      	str	r3, [r7, #32]
          break;
 80083b2:	e013      	b.n	80083dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d105      	bne.n	80083c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80083bc:	2308      	movs	r3, #8
 80083be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	611a      	str	r2, [r3, #16]
          break;
 80083c6:	e009      	b.n	80083dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80083c8:	2308      	movs	r3, #8
 80083ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	69fa      	ldr	r2, [r7, #28]
 80083d0:	615a      	str	r2, [r3, #20]
          break;
 80083d2:	e003      	b.n	80083dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80083d4:	2300      	movs	r3, #0
 80083d6:	623b      	str	r3, [r7, #32]
          break;
 80083d8:	e000      	b.n	80083dc <HAL_GPIO_Init+0x130>
          break;
 80083da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	2bff      	cmp	r3, #255	@ 0xff
 80083e0:	d801      	bhi.n	80083e6 <HAL_GPIO_Init+0x13a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	e001      	b.n	80083ea <HAL_GPIO_Init+0x13e>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	3304      	adds	r3, #4
 80083ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	2bff      	cmp	r3, #255	@ 0xff
 80083f0:	d802      	bhi.n	80083f8 <HAL_GPIO_Init+0x14c>
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	e002      	b.n	80083fe <HAL_GPIO_Init+0x152>
 80083f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fa:	3b08      	subs	r3, #8
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	210f      	movs	r1, #15
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	fa01 f303 	lsl.w	r3, r1, r3
 800840c:	43db      	mvns	r3, r3
 800840e:	401a      	ands	r2, r3
 8008410:	6a39      	ldr	r1, [r7, #32]
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	fa01 f303 	lsl.w	r3, r1, r3
 8008418:	431a      	orrs	r2, r3
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 80c1 	beq.w	80085ae <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800842c:	4b49      	ldr	r3, [pc, #292]	@ (8008554 <HAL_GPIO_Init+0x2a8>)
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	4a48      	ldr	r2, [pc, #288]	@ (8008554 <HAL_GPIO_Init+0x2a8>)
 8008432:	f043 0301 	orr.w	r3, r3, #1
 8008436:	6193      	str	r3, [r2, #24]
 8008438:	4b46      	ldr	r3, [pc, #280]	@ (8008554 <HAL_GPIO_Init+0x2a8>)
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	60bb      	str	r3, [r7, #8]
 8008442:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008444:	4a44      	ldr	r2, [pc, #272]	@ (8008558 <HAL_GPIO_Init+0x2ac>)
 8008446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008448:	089b      	lsrs	r3, r3, #2
 800844a:	3302      	adds	r3, #2
 800844c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008450:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	f003 0303 	and.w	r3, r3, #3
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	220f      	movs	r2, #15
 800845c:	fa02 f303 	lsl.w	r3, r2, r3
 8008460:	43db      	mvns	r3, r3
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4013      	ands	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a3c      	ldr	r2, [pc, #240]	@ (800855c <HAL_GPIO_Init+0x2b0>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d01f      	beq.n	80084b0 <HAL_GPIO_Init+0x204>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a3b      	ldr	r2, [pc, #236]	@ (8008560 <HAL_GPIO_Init+0x2b4>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d019      	beq.n	80084ac <HAL_GPIO_Init+0x200>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a3a      	ldr	r2, [pc, #232]	@ (8008564 <HAL_GPIO_Init+0x2b8>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d013      	beq.n	80084a8 <HAL_GPIO_Init+0x1fc>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a39      	ldr	r2, [pc, #228]	@ (8008568 <HAL_GPIO_Init+0x2bc>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00d      	beq.n	80084a4 <HAL_GPIO_Init+0x1f8>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a38      	ldr	r2, [pc, #224]	@ (800856c <HAL_GPIO_Init+0x2c0>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d007      	beq.n	80084a0 <HAL_GPIO_Init+0x1f4>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a37      	ldr	r2, [pc, #220]	@ (8008570 <HAL_GPIO_Init+0x2c4>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d101      	bne.n	800849c <HAL_GPIO_Init+0x1f0>
 8008498:	2305      	movs	r3, #5
 800849a:	e00a      	b.n	80084b2 <HAL_GPIO_Init+0x206>
 800849c:	2306      	movs	r3, #6
 800849e:	e008      	b.n	80084b2 <HAL_GPIO_Init+0x206>
 80084a0:	2304      	movs	r3, #4
 80084a2:	e006      	b.n	80084b2 <HAL_GPIO_Init+0x206>
 80084a4:	2303      	movs	r3, #3
 80084a6:	e004      	b.n	80084b2 <HAL_GPIO_Init+0x206>
 80084a8:	2302      	movs	r3, #2
 80084aa:	e002      	b.n	80084b2 <HAL_GPIO_Init+0x206>
 80084ac:	2301      	movs	r3, #1
 80084ae:	e000      	b.n	80084b2 <HAL_GPIO_Init+0x206>
 80084b0:	2300      	movs	r3, #0
 80084b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b4:	f002 0203 	and.w	r2, r2, #3
 80084b8:	0092      	lsls	r2, r2, #2
 80084ba:	4093      	lsls	r3, r2
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80084c2:	4925      	ldr	r1, [pc, #148]	@ (8008558 <HAL_GPIO_Init+0x2ac>)
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	089b      	lsrs	r3, r3, #2
 80084c8:	3302      	adds	r3, #2
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d006      	beq.n	80084ea <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80084dc:	4b25      	ldr	r3, [pc, #148]	@ (8008574 <HAL_GPIO_Init+0x2c8>)
 80084de:	689a      	ldr	r2, [r3, #8]
 80084e0:	4924      	ldr	r1, [pc, #144]	@ (8008574 <HAL_GPIO_Init+0x2c8>)
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	608b      	str	r3, [r1, #8]
 80084e8:	e006      	b.n	80084f8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80084ea:	4b22      	ldr	r3, [pc, #136]	@ (8008574 <HAL_GPIO_Init+0x2c8>)
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	43db      	mvns	r3, r3
 80084f2:	4920      	ldr	r1, [pc, #128]	@ (8008574 <HAL_GPIO_Init+0x2c8>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d006      	beq.n	8008512 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008504:	4b1b      	ldr	r3, [pc, #108]	@ (8008574 <HAL_GPIO_Init+0x2c8>)
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	491a      	ldr	r1, [pc, #104]	@ (8008574 <HAL_GPIO_Init+0x2c8>)
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	4313      	orrs	r3, r2
 800850e:	60cb      	str	r3, [r1, #12]
 8008510:	e006      	b.n	8008520 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008512:	4b18      	ldr	r3, [pc, #96]	@ (8008574 <HAL_GPIO_Init+0x2c8>)
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	43db      	mvns	r3, r3
 800851a:	4916      	ldr	r1, [pc, #88]	@ (8008574 <HAL_GPIO_Init+0x2c8>)
 800851c:	4013      	ands	r3, r2
 800851e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d025      	beq.n	8008578 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800852c:	4b11      	ldr	r3, [pc, #68]	@ (8008574 <HAL_GPIO_Init+0x2c8>)
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	4910      	ldr	r1, [pc, #64]	@ (8008574 <HAL_GPIO_Init+0x2c8>)
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	4313      	orrs	r3, r2
 8008536:	604b      	str	r3, [r1, #4]
 8008538:	e025      	b.n	8008586 <HAL_GPIO_Init+0x2da>
 800853a:	bf00      	nop
 800853c:	10320000 	.word	0x10320000
 8008540:	10310000 	.word	0x10310000
 8008544:	10220000 	.word	0x10220000
 8008548:	10210000 	.word	0x10210000
 800854c:	10120000 	.word	0x10120000
 8008550:	10110000 	.word	0x10110000
 8008554:	40021000 	.word	0x40021000
 8008558:	40010000 	.word	0x40010000
 800855c:	40010800 	.word	0x40010800
 8008560:	40010c00 	.word	0x40010c00
 8008564:	40011000 	.word	0x40011000
 8008568:	40011400 	.word	0x40011400
 800856c:	40011800 	.word	0x40011800
 8008570:	40011c00 	.word	0x40011c00
 8008574:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008578:	4b15      	ldr	r3, [pc, #84]	@ (80085d0 <HAL_GPIO_Init+0x324>)
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	43db      	mvns	r3, r3
 8008580:	4913      	ldr	r1, [pc, #76]	@ (80085d0 <HAL_GPIO_Init+0x324>)
 8008582:	4013      	ands	r3, r2
 8008584:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d006      	beq.n	80085a0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008592:	4b0f      	ldr	r3, [pc, #60]	@ (80085d0 <HAL_GPIO_Init+0x324>)
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	490e      	ldr	r1, [pc, #56]	@ (80085d0 <HAL_GPIO_Init+0x324>)
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	4313      	orrs	r3, r2
 800859c:	600b      	str	r3, [r1, #0]
 800859e:	e006      	b.n	80085ae <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80085a0:	4b0b      	ldr	r3, [pc, #44]	@ (80085d0 <HAL_GPIO_Init+0x324>)
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	43db      	mvns	r3, r3
 80085a8:	4909      	ldr	r1, [pc, #36]	@ (80085d0 <HAL_GPIO_Init+0x324>)
 80085aa:	4013      	ands	r3, r2
 80085ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80085ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b0:	3301      	adds	r3, #1
 80085b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ba:	fa22 f303 	lsr.w	r3, r2, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f47f ae7e 	bne.w	80082c0 <HAL_GPIO_Init+0x14>
  }
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
 80085c8:	372c      	adds	r7, #44	@ 0x2c
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bc80      	pop	{r7}
 80085ce:	4770      	bx	lr
 80085d0:	40010400 	.word	0x40010400

080085d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e272      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 8087 	beq.w	8008702 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80085f4:	4b92      	ldr	r3, [pc, #584]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f003 030c 	and.w	r3, r3, #12
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d00c      	beq.n	800861a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008600:	4b8f      	ldr	r3, [pc, #572]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f003 030c 	and.w	r3, r3, #12
 8008608:	2b08      	cmp	r3, #8
 800860a:	d112      	bne.n	8008632 <HAL_RCC_OscConfig+0x5e>
 800860c:	4b8c      	ldr	r3, [pc, #560]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008618:	d10b      	bne.n	8008632 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800861a:	4b89      	ldr	r3, [pc, #548]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d06c      	beq.n	8008700 <HAL_RCC_OscConfig+0x12c>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d168      	bne.n	8008700 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e24c      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800863a:	d106      	bne.n	800864a <HAL_RCC_OscConfig+0x76>
 800863c:	4b80      	ldr	r3, [pc, #512]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a7f      	ldr	r2, [pc, #508]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	e02e      	b.n	80086a8 <HAL_RCC_OscConfig+0xd4>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10c      	bne.n	800866c <HAL_RCC_OscConfig+0x98>
 8008652:	4b7b      	ldr	r3, [pc, #492]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a7a      	ldr	r2, [pc, #488]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	4b78      	ldr	r3, [pc, #480]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a77      	ldr	r2, [pc, #476]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008664:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	e01d      	b.n	80086a8 <HAL_RCC_OscConfig+0xd4>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008674:	d10c      	bne.n	8008690 <HAL_RCC_OscConfig+0xbc>
 8008676:	4b72      	ldr	r3, [pc, #456]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a71      	ldr	r2, [pc, #452]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 800867c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	4b6f      	ldr	r3, [pc, #444]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a6e      	ldr	r2, [pc, #440]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	e00b      	b.n	80086a8 <HAL_RCC_OscConfig+0xd4>
 8008690:	4b6b      	ldr	r3, [pc, #428]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a6a      	ldr	r2, [pc, #424]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	4b68      	ldr	r3, [pc, #416]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a67      	ldr	r2, [pc, #412]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 80086a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d013      	beq.n	80086d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086b0:	f7ff f8ac 	bl	800780c <HAL_GetTick>
 80086b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086b6:	e008      	b.n	80086ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086b8:	f7ff f8a8 	bl	800780c <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b64      	cmp	r3, #100	@ 0x64
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e200      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ca:	4b5d      	ldr	r3, [pc, #372]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0f0      	beq.n	80086b8 <HAL_RCC_OscConfig+0xe4>
 80086d6:	e014      	b.n	8008702 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d8:	f7ff f898 	bl	800780c <HAL_GetTick>
 80086dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086de:	e008      	b.n	80086f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086e0:	f7ff f894 	bl	800780c <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b64      	cmp	r3, #100	@ 0x64
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e1ec      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086f2:	4b53      	ldr	r3, [pc, #332]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1f0      	bne.n	80086e0 <HAL_RCC_OscConfig+0x10c>
 80086fe:	e000      	b.n	8008702 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d063      	beq.n	80087d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800870e:	4b4c      	ldr	r3, [pc, #304]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f003 030c 	and.w	r3, r3, #12
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800871a:	4b49      	ldr	r3, [pc, #292]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f003 030c 	and.w	r3, r3, #12
 8008722:	2b08      	cmp	r3, #8
 8008724:	d11c      	bne.n	8008760 <HAL_RCC_OscConfig+0x18c>
 8008726:	4b46      	ldr	r3, [pc, #280]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d116      	bne.n	8008760 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008732:	4b43      	ldr	r3, [pc, #268]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d005      	beq.n	800874a <HAL_RCC_OscConfig+0x176>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d001      	beq.n	800874a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e1c0      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800874a:	4b3d      	ldr	r3, [pc, #244]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	4939      	ldr	r1, [pc, #228]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 800875a:	4313      	orrs	r3, r2
 800875c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800875e:	e03a      	b.n	80087d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d020      	beq.n	80087aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008768:	4b36      	ldr	r3, [pc, #216]	@ (8008844 <HAL_RCC_OscConfig+0x270>)
 800876a:	2201      	movs	r2, #1
 800876c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800876e:	f7ff f84d 	bl	800780c <HAL_GetTick>
 8008772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008774:	e008      	b.n	8008788 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008776:	f7ff f849 	bl	800780c <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d901      	bls.n	8008788 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e1a1      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008788:	4b2d      	ldr	r3, [pc, #180]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0f0      	beq.n	8008776 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008794:	4b2a      	ldr	r3, [pc, #168]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	4927      	ldr	r1, [pc, #156]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	600b      	str	r3, [r1, #0]
 80087a8:	e015      	b.n	80087d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087aa:	4b26      	ldr	r3, [pc, #152]	@ (8008844 <HAL_RCC_OscConfig+0x270>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087b0:	f7ff f82c 	bl	800780c <HAL_GetTick>
 80087b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087b6:	e008      	b.n	80087ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087b8:	f7ff f828 	bl	800780c <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d901      	bls.n	80087ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e180      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1f0      	bne.n	80087b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d03a      	beq.n	8008858 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d019      	beq.n	800881e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087ea:	4b17      	ldr	r3, [pc, #92]	@ (8008848 <HAL_RCC_OscConfig+0x274>)
 80087ec:	2201      	movs	r2, #1
 80087ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087f0:	f7ff f80c 	bl	800780c <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087f8:	f7ff f808 	bl	800780c <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e160      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800880a:	4b0d      	ldr	r3, [pc, #52]	@ (8008840 <HAL_RCC_OscConfig+0x26c>)
 800880c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008816:	2001      	movs	r0, #1
 8008818:	f000 face 	bl	8008db8 <RCC_Delay>
 800881c:	e01c      	b.n	8008858 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800881e:	4b0a      	ldr	r3, [pc, #40]	@ (8008848 <HAL_RCC_OscConfig+0x274>)
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008824:	f7fe fff2 	bl	800780c <HAL_GetTick>
 8008828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800882a:	e00f      	b.n	800884c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800882c:	f7fe ffee 	bl	800780c <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b02      	cmp	r3, #2
 8008838:	d908      	bls.n	800884c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e146      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
 800883e:	bf00      	nop
 8008840:	40021000 	.word	0x40021000
 8008844:	42420000 	.word	0x42420000
 8008848:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800884c:	4b92      	ldr	r3, [pc, #584]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 800884e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e9      	bne.n	800882c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0304 	and.w	r3, r3, #4
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 80a6 	beq.w	80089b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008866:	2300      	movs	r3, #0
 8008868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800886a:	4b8b      	ldr	r3, [pc, #556]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10d      	bne.n	8008892 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008876:	4b88      	ldr	r3, [pc, #544]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	4a87      	ldr	r2, [pc, #540]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 800887c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008880:	61d3      	str	r3, [r2, #28]
 8008882:	4b85      	ldr	r3, [pc, #532]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800888a:	60bb      	str	r3, [r7, #8]
 800888c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800888e:	2301      	movs	r3, #1
 8008890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008892:	4b82      	ldr	r3, [pc, #520]	@ (8008a9c <HAL_RCC_OscConfig+0x4c8>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800889a:	2b00      	cmp	r3, #0
 800889c:	d118      	bne.n	80088d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800889e:	4b7f      	ldr	r3, [pc, #508]	@ (8008a9c <HAL_RCC_OscConfig+0x4c8>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a7e      	ldr	r2, [pc, #504]	@ (8008a9c <HAL_RCC_OscConfig+0x4c8>)
 80088a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088aa:	f7fe ffaf 	bl	800780c <HAL_GetTick>
 80088ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088b0:	e008      	b.n	80088c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088b2:	f7fe ffab 	bl	800780c <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b64      	cmp	r3, #100	@ 0x64
 80088be:	d901      	bls.n	80088c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e103      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088c4:	4b75      	ldr	r3, [pc, #468]	@ (8008a9c <HAL_RCC_OscConfig+0x4c8>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0f0      	beq.n	80088b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d106      	bne.n	80088e6 <HAL_RCC_OscConfig+0x312>
 80088d8:	4b6f      	ldr	r3, [pc, #444]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	4a6e      	ldr	r2, [pc, #440]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	6213      	str	r3, [r2, #32]
 80088e4:	e02d      	b.n	8008942 <HAL_RCC_OscConfig+0x36e>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10c      	bne.n	8008908 <HAL_RCC_OscConfig+0x334>
 80088ee:	4b6a      	ldr	r3, [pc, #424]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	4a69      	ldr	r2, [pc, #420]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 80088f4:	f023 0301 	bic.w	r3, r3, #1
 80088f8:	6213      	str	r3, [r2, #32]
 80088fa:	4b67      	ldr	r3, [pc, #412]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	4a66      	ldr	r2, [pc, #408]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008900:	f023 0304 	bic.w	r3, r3, #4
 8008904:	6213      	str	r3, [r2, #32]
 8008906:	e01c      	b.n	8008942 <HAL_RCC_OscConfig+0x36e>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2b05      	cmp	r3, #5
 800890e:	d10c      	bne.n	800892a <HAL_RCC_OscConfig+0x356>
 8008910:	4b61      	ldr	r3, [pc, #388]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	4a60      	ldr	r2, [pc, #384]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008916:	f043 0304 	orr.w	r3, r3, #4
 800891a:	6213      	str	r3, [r2, #32]
 800891c:	4b5e      	ldr	r3, [pc, #376]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	4a5d      	ldr	r2, [pc, #372]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008922:	f043 0301 	orr.w	r3, r3, #1
 8008926:	6213      	str	r3, [r2, #32]
 8008928:	e00b      	b.n	8008942 <HAL_RCC_OscConfig+0x36e>
 800892a:	4b5b      	ldr	r3, [pc, #364]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	4a5a      	ldr	r2, [pc, #360]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	6213      	str	r3, [r2, #32]
 8008936:	4b58      	ldr	r3, [pc, #352]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	4a57      	ldr	r2, [pc, #348]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 800893c:	f023 0304 	bic.w	r3, r3, #4
 8008940:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d015      	beq.n	8008976 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800894a:	f7fe ff5f 	bl	800780c <HAL_GetTick>
 800894e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008950:	e00a      	b.n	8008968 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008952:	f7fe ff5b 	bl	800780c <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008960:	4293      	cmp	r3, r2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e0b1      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008968:	4b4b      	ldr	r3, [pc, #300]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	d0ee      	beq.n	8008952 <HAL_RCC_OscConfig+0x37e>
 8008974:	e014      	b.n	80089a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008976:	f7fe ff49 	bl	800780c <HAL_GetTick>
 800897a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800897c:	e00a      	b.n	8008994 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800897e:	f7fe ff45 	bl	800780c <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800898c:	4293      	cmp	r3, r2
 800898e:	d901      	bls.n	8008994 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e09b      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008994:	4b40      	ldr	r3, [pc, #256]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008996:	6a1b      	ldr	r3, [r3, #32]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1ee      	bne.n	800897e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d105      	bne.n	80089b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089a6:	4b3c      	ldr	r3, [pc, #240]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	4a3b      	ldr	r2, [pc, #236]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 80089ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 8087 	beq.w	8008aca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089bc:	4b36      	ldr	r3, [pc, #216]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f003 030c 	and.w	r3, r3, #12
 80089c4:	2b08      	cmp	r3, #8
 80089c6:	d061      	beq.n	8008a8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d146      	bne.n	8008a5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089d0:	4b33      	ldr	r3, [pc, #204]	@ (8008aa0 <HAL_RCC_OscConfig+0x4cc>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089d6:	f7fe ff19 	bl	800780c <HAL_GetTick>
 80089da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80089dc:	e008      	b.n	80089f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089de:	f7fe ff15 	bl	800780c <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d901      	bls.n	80089f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e06d      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80089f0:	4b29      	ldr	r3, [pc, #164]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1f0      	bne.n	80089de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a04:	d108      	bne.n	8008a18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008a06:	4b24      	ldr	r3, [pc, #144]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	4921      	ldr	r1, [pc, #132]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008a14:	4313      	orrs	r3, r2
 8008a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a18:	4b1f      	ldr	r3, [pc, #124]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a19      	ldr	r1, [r3, #32]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	491b      	ldr	r1, [pc, #108]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a30:	4b1b      	ldr	r3, [pc, #108]	@ (8008aa0 <HAL_RCC_OscConfig+0x4cc>)
 8008a32:	2201      	movs	r2, #1
 8008a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a36:	f7fe fee9 	bl	800780c <HAL_GetTick>
 8008a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008a3c:	e008      	b.n	8008a50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a3e:	f7fe fee5 	bl	800780c <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d901      	bls.n	8008a50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e03d      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008a50:	4b11      	ldr	r3, [pc, #68]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0f0      	beq.n	8008a3e <HAL_RCC_OscConfig+0x46a>
 8008a5c:	e035      	b.n	8008aca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a5e:	4b10      	ldr	r3, [pc, #64]	@ (8008aa0 <HAL_RCC_OscConfig+0x4cc>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a64:	f7fe fed2 	bl	800780c <HAL_GetTick>
 8008a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a6a:	e008      	b.n	8008a7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a6c:	f7fe fece 	bl	800780c <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d901      	bls.n	8008a7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e026      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a7e:	4b06      	ldr	r3, [pc, #24]	@ (8008a98 <HAL_RCC_OscConfig+0x4c4>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1f0      	bne.n	8008a6c <HAL_RCC_OscConfig+0x498>
 8008a8a:	e01e      	b.n	8008aca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d107      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e019      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
 8008a98:	40021000 	.word	0x40021000
 8008a9c:	40007000 	.word	0x40007000
 8008aa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad4 <HAL_RCC_OscConfig+0x500>)
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d106      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d001      	beq.n	8008aca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	40021000 	.word	0x40021000

08008ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e0d0      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008aec:	4b6a      	ldr	r3, [pc, #424]	@ (8008c98 <HAL_RCC_ClockConfig+0x1c0>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0307 	and.w	r3, r3, #7
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d910      	bls.n	8008b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008afa:	4b67      	ldr	r3, [pc, #412]	@ (8008c98 <HAL_RCC_ClockConfig+0x1c0>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f023 0207 	bic.w	r2, r3, #7
 8008b02:	4965      	ldr	r1, [pc, #404]	@ (8008c98 <HAL_RCC_ClockConfig+0x1c0>)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b0a:	4b63      	ldr	r3, [pc, #396]	@ (8008c98 <HAL_RCC_ClockConfig+0x1c0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0307 	and.w	r3, r3, #7
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d001      	beq.n	8008b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e0b8      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d020      	beq.n	8008b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d005      	beq.n	8008b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b34:	4b59      	ldr	r3, [pc, #356]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	4a58      	ldr	r2, [pc, #352]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008b3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0308 	and.w	r3, r3, #8
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d005      	beq.n	8008b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b4c:	4b53      	ldr	r3, [pc, #332]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	4a52      	ldr	r2, [pc, #328]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008b52:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b58:	4b50      	ldr	r3, [pc, #320]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	494d      	ldr	r1, [pc, #308]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d040      	beq.n	8008bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d107      	bne.n	8008b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b7e:	4b47      	ldr	r3, [pc, #284]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d115      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e07f      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d107      	bne.n	8008ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b96:	4b41      	ldr	r3, [pc, #260]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e073      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e06b      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bb6:	4b39      	ldr	r3, [pc, #228]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f023 0203 	bic.w	r2, r3, #3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	4936      	ldr	r1, [pc, #216]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bc8:	f7fe fe20 	bl	800780c <HAL_GetTick>
 8008bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bce:	e00a      	b.n	8008be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bd0:	f7fe fe1c 	bl	800780c <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e053      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008be6:	4b2d      	ldr	r3, [pc, #180]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f003 020c 	and.w	r2, r3, #12
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d1eb      	bne.n	8008bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008bf8:	4b27      	ldr	r3, [pc, #156]	@ (8008c98 <HAL_RCC_ClockConfig+0x1c0>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0307 	and.w	r3, r3, #7
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d210      	bcs.n	8008c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c06:	4b24      	ldr	r3, [pc, #144]	@ (8008c98 <HAL_RCC_ClockConfig+0x1c0>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f023 0207 	bic.w	r2, r3, #7
 8008c0e:	4922      	ldr	r1, [pc, #136]	@ (8008c98 <HAL_RCC_ClockConfig+0x1c0>)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c16:	4b20      	ldr	r3, [pc, #128]	@ (8008c98 <HAL_RCC_ClockConfig+0x1c0>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d001      	beq.n	8008c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e032      	b.n	8008c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d008      	beq.n	8008c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c34:	4b19      	ldr	r3, [pc, #100]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	4916      	ldr	r1, [pc, #88]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d009      	beq.n	8008c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008c52:	4b12      	ldr	r3, [pc, #72]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	490e      	ldr	r1, [pc, #56]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008c66:	f000 f821 	bl	8008cac <HAL_RCC_GetSysClockFreq>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c9c <HAL_RCC_ClockConfig+0x1c4>)
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	091b      	lsrs	r3, r3, #4
 8008c72:	f003 030f 	and.w	r3, r3, #15
 8008c76:	490a      	ldr	r1, [pc, #40]	@ (8008ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c78:	5ccb      	ldrb	r3, [r1, r3]
 8008c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7e:	4a09      	ldr	r2, [pc, #36]	@ (8008ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8008c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008c82:	4b09      	ldr	r3, [pc, #36]	@ (8008ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fe fd7e 	bl	8007788 <HAL_InitTick>

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	40022000 	.word	0x40022000
 8008c9c:	40021000 	.word	0x40021000
 8008ca0:	0800f1a4 	.word	0x0800f1a4
 8008ca4:	20000004 	.word	0x20000004
 8008ca8:	20000008 	.word	0x20000008

08008cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60bb      	str	r3, [r7, #8]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	617b      	str	r3, [r7, #20]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8008d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f003 030c 	and.w	r3, r3, #12
 8008cd2:	2b04      	cmp	r3, #4
 8008cd4:	d002      	beq.n	8008cdc <HAL_RCC_GetSysClockFreq+0x30>
 8008cd6:	2b08      	cmp	r3, #8
 8008cd8:	d003      	beq.n	8008ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8008cda:	e027      	b.n	8008d2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008cdc:	4b19      	ldr	r3, [pc, #100]	@ (8008d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8008cde:	613b      	str	r3, [r7, #16]
      break;
 8008ce0:	e027      	b.n	8008d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	0c9b      	lsrs	r3, r3, #18
 8008ce6:	f003 030f 	and.w	r3, r3, #15
 8008cea:	4a17      	ldr	r2, [pc, #92]	@ (8008d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008cec:	5cd3      	ldrb	r3, [r2, r3]
 8008cee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d010      	beq.n	8008d1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008cfa:	4b11      	ldr	r3, [pc, #68]	@ (8008d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	0c5b      	lsrs	r3, r3, #17
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	4a11      	ldr	r2, [pc, #68]	@ (8008d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8008d06:	5cd3      	ldrb	r3, [r2, r3]
 8008d08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8008d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8008d0e:	fb03 f202 	mul.w	r2, r3, r2
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d18:	617b      	str	r3, [r7, #20]
 8008d1a:	e004      	b.n	8008d26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8008d50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008d20:	fb02 f303 	mul.w	r3, r2, r3
 8008d24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	613b      	str	r3, [r7, #16]
      break;
 8008d2a:	e002      	b.n	8008d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008d2c:	4b05      	ldr	r3, [pc, #20]	@ (8008d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8008d2e:	613b      	str	r3, [r7, #16]
      break;
 8008d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d32:	693b      	ldr	r3, [r7, #16]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	371c      	adds	r7, #28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bc80      	pop	{r7}
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	40021000 	.word	0x40021000
 8008d44:	007a1200 	.word	0x007a1200
 8008d48:	0800f1bc 	.word	0x0800f1bc
 8008d4c:	0800f1cc 	.word	0x0800f1cc
 8008d50:	003d0900 	.word	0x003d0900

08008d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d58:	4b02      	ldr	r3, [pc, #8]	@ (8008d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bc80      	pop	{r7}
 8008d62:	4770      	bx	lr
 8008d64:	20000004 	.word	0x20000004

08008d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d6c:	f7ff fff2 	bl	8008d54 <HAL_RCC_GetHCLKFreq>
 8008d70:	4602      	mov	r2, r0
 8008d72:	4b05      	ldr	r3, [pc, #20]	@ (8008d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	0a1b      	lsrs	r3, r3, #8
 8008d78:	f003 0307 	and.w	r3, r3, #7
 8008d7c:	4903      	ldr	r1, [pc, #12]	@ (8008d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d7e:	5ccb      	ldrb	r3, [r1, r3]
 8008d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	40021000 	.word	0x40021000
 8008d8c:	0800f1b4 	.word	0x0800f1b4

08008d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d94:	f7ff ffde 	bl	8008d54 <HAL_RCC_GetHCLKFreq>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	4b05      	ldr	r3, [pc, #20]	@ (8008db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	0adb      	lsrs	r3, r3, #11
 8008da0:	f003 0307 	and.w	r3, r3, #7
 8008da4:	4903      	ldr	r1, [pc, #12]	@ (8008db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008da6:	5ccb      	ldrb	r3, [r1, r3]
 8008da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	40021000 	.word	0x40021000
 8008db4:	0800f1b4 	.word	0x0800f1b4

08008db8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8008dec <RCC_Delay+0x34>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8008df0 <RCC_Delay+0x38>)
 8008dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dca:	0a5b      	lsrs	r3, r3, #9
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	fb02 f303 	mul.w	r3, r2, r3
 8008dd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008dd4:	bf00      	nop
  }
  while (Delay --);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	1e5a      	subs	r2, r3, #1
 8008dda:	60fa      	str	r2, [r7, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1f9      	bne.n	8008dd4 <RCC_Delay+0x1c>
}
 8008de0:	bf00      	nop
 8008de2:	bf00      	nop
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bc80      	pop	{r7}
 8008dea:	4770      	bx	lr
 8008dec:	20000004 	.word	0x20000004
 8008df0:	10624dd3 	.word	0x10624dd3

08008df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d07d      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008e10:	2300      	movs	r3, #0
 8008e12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e14:	4b4f      	ldr	r3, [pc, #316]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10d      	bne.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e20:	4b4c      	ldr	r3, [pc, #304]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e22:	69db      	ldr	r3, [r3, #28]
 8008e24:	4a4b      	ldr	r2, [pc, #300]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e2a:	61d3      	str	r3, [r2, #28]
 8008e2c:	4b49      	ldr	r3, [pc, #292]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e2e:	69db      	ldr	r3, [r3, #28]
 8008e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e34:	60bb      	str	r3, [r7, #8]
 8008e36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e3c:	4b46      	ldr	r3, [pc, #280]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d118      	bne.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e48:	4b43      	ldr	r3, [pc, #268]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a42      	ldr	r2, [pc, #264]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e54:	f7fe fcda 	bl	800780c <HAL_GetTick>
 8008e58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e5a:	e008      	b.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e5c:	f7fe fcd6 	bl	800780c <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	2b64      	cmp	r3, #100	@ 0x64
 8008e68:	d901      	bls.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e06d      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0f0      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e7a:	4b36      	ldr	r3, [pc, #216]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d02e      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d027      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e98:	4b2e      	ldr	r3, [pc, #184]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ea0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008eae:	4a29      	ldr	r2, [pc, #164]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d014      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ebe:	f7fe fca5 	bl	800780c <HAL_GetTick>
 8008ec2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ec4:	e00a      	b.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ec6:	f7fe fca1 	bl	800780c <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d901      	bls.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e036      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008edc:	4b1d      	ldr	r3, [pc, #116]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	f003 0302 	and.w	r3, r3, #2
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d0ee      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eea:	6a1b      	ldr	r3, [r3, #32]
 8008eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	4917      	ldr	r1, [pc, #92]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d105      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f00:	4b14      	ldr	r3, [pc, #80]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	4a13      	ldr	r2, [pc, #76]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d008      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f18:	4b0e      	ldr	r3, [pc, #56]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	490b      	ldr	r1, [pc, #44]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0310 	and.w	r3, r3, #16
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d008      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f36:	4b07      	ldr	r3, [pc, #28]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	4904      	ldr	r1, [pc, #16]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f44:	4313      	orrs	r3, r2
 8008f46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	40021000 	.word	0x40021000
 8008f58:	40007000 	.word	0x40007000
 8008f5c:	42420440 	.word	0x42420440

08008f60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b088      	sub	sp, #32
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	61fb      	str	r3, [r7, #28]
 8008f70:	2300      	movs	r3, #0
 8008f72:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	2b0f      	cmp	r3, #15
 8008f82:	f200 80af 	bhi.w	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008f86:	a201      	add	r2, pc, #4	@ (adr r2, 8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08009063 	.word	0x08009063
 8008f90:	080090c9 	.word	0x080090c9
 8008f94:	080090e5 	.word	0x080090e5
 8008f98:	08009053 	.word	0x08009053
 8008f9c:	080090e5 	.word	0x080090e5
 8008fa0:	080090e5 	.word	0x080090e5
 8008fa4:	080090e5 	.word	0x080090e5
 8008fa8:	0800905b 	.word	0x0800905b
 8008fac:	080090e5 	.word	0x080090e5
 8008fb0:	080090e5 	.word	0x080090e5
 8008fb4:	080090e5 	.word	0x080090e5
 8008fb8:	080090e5 	.word	0x080090e5
 8008fbc:	080090e5 	.word	0x080090e5
 8008fc0:	080090e5 	.word	0x080090e5
 8008fc4:	080090e5 	.word	0x080090e5
 8008fc8:	08008fcd 	.word	0x08008fcd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8008fcc:	4b4a      	ldr	r3, [pc, #296]	@ (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008fd2:	4b49      	ldr	r3, [pc, #292]	@ (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 8084 	beq.w	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	0c9b      	lsrs	r3, r3, #18
 8008fe4:	f003 030f 	and.w	r3, r3, #15
 8008fe8:	4a44      	ldr	r2, [pc, #272]	@ (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8008fea:	5cd3      	ldrb	r3, [r2, r3]
 8008fec:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d015      	beq.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	0c5b      	lsrs	r3, r3, #17
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	4a3f      	ldr	r2, [pc, #252]	@ (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8009004:	5cd3      	ldrb	r3, [r2, r3]
 8009006:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00d      	beq.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009012:	4a3c      	ldr	r2, [pc, #240]	@ (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	fbb2 f2f3 	udiv	r2, r2, r3
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	fb02 f303 	mul.w	r3, r2, r3
 8009020:	61fb      	str	r3, [r7, #28]
 8009022:	e004      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	4a38      	ldr	r2, [pc, #224]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8009028:	fb02 f303 	mul.w	r3, r2, r3
 800902c:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800902e:	4b32      	ldr	r3, [pc, #200]	@ (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800903a:	d102      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8009040:	e052      	b.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	005b      	lsls	r3, r3, #1
 8009046:	4a31      	ldr	r2, [pc, #196]	@ (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8009048:	fba2 2303 	umull	r2, r3, r2, r3
 800904c:	085b      	lsrs	r3, r3, #1
 800904e:	61bb      	str	r3, [r7, #24]
      break;
 8009050:	e04a      	b.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8009052:	f7ff fe2b 	bl	8008cac <HAL_RCC_GetSysClockFreq>
 8009056:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8009058:	e049      	b.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800905a:	f7ff fe27 	bl	8008cac <HAL_RCC_GetSysClockFreq>
 800905e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8009060:	e045      	b.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8009062:	4b25      	ldr	r3, [pc, #148]	@ (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800906e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009072:	d108      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 800907e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009082:	61bb      	str	r3, [r7, #24]
 8009084:	e01f      	b.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800908c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009090:	d109      	bne.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8009092:	4b19      	ldr	r3, [pc, #100]	@ (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 800909e:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80090a2:	61bb      	str	r3, [r7, #24]
 80090a4:	e00f      	b.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090b0:	d11c      	bne.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80090b2:	4b11      	ldr	r3, [pc, #68]	@ (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d016      	beq.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 80090be:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80090c2:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80090c4:	e012      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80090c6:	e011      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80090c8:	f7ff fe62 	bl	8008d90 <HAL_RCC_GetPCLK2Freq>
 80090cc:	4602      	mov	r2, r0
 80090ce:	4b0a      	ldr	r3, [pc, #40]	@ (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	0b9b      	lsrs	r3, r3, #14
 80090d4:	f003 0303 	and.w	r3, r3, #3
 80090d8:	3301      	adds	r3, #1
 80090da:	005b      	lsls	r3, r3, #1
 80090dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80090e0:	61bb      	str	r3, [r7, #24]
      break;
 80090e2:	e004      	b.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80090e4:	bf00      	nop
 80090e6:	e002      	b.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80090e8:	bf00      	nop
 80090ea:	e000      	b.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80090ec:	bf00      	nop
    }
  }
  return (frequency);
 80090ee:	69bb      	ldr	r3, [r7, #24]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3720      	adds	r7, #32
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	40021000 	.word	0x40021000
 80090fc:	0800f1d0 	.word	0x0800f1d0
 8009100:	0800f1e0 	.word	0x0800f1e0
 8009104:	007a1200 	.word	0x007a1200
 8009108:	003d0900 	.word	0x003d0900
 800910c:	aaaaaaab 	.word	0xaaaaaaab

08009110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e042      	b.n	80091a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d106      	bne.n	800913c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fe f9aa 	bl	8007490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2224      	movs	r2, #36	@ 0x24
 8009140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f971 	bl	800943c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	691a      	ldr	r2, [r3, #16]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	695a      	ldr	r2, [r3, #20]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68da      	ldr	r2, [r3, #12]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2220      	movs	r2, #32
 8009194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2220      	movs	r2, #32
 800919c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b08a      	sub	sp, #40	@ 0x28
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	4613      	mov	r3, r2
 80091be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b20      	cmp	r3, #32
 80091ce:	d175      	bne.n	80092bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <HAL_UART_Transmit+0x2c>
 80091d6:	88fb      	ldrh	r3, [r7, #6]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e06e      	b.n	80092be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2221      	movs	r2, #33	@ 0x21
 80091ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091ee:	f7fe fb0d 	bl	800780c <HAL_GetTick>
 80091f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	88fa      	ldrh	r2, [r7, #6]
 80091f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	88fa      	ldrh	r2, [r7, #6]
 80091fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009208:	d108      	bne.n	800921c <HAL_UART_Transmit+0x6c>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d104      	bne.n	800921c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	61bb      	str	r3, [r7, #24]
 800921a:	e003      	b.n	8009224 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009220:	2300      	movs	r3, #0
 8009222:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009224:	e02e      	b.n	8009284 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	2200      	movs	r2, #0
 800922e:	2180      	movs	r1, #128	@ 0x80
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 f848 	bl	80092c6 <UART_WaitOnFlagUntilTimeout>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d005      	beq.n	8009248 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2220      	movs	r2, #32
 8009240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009244:	2303      	movs	r3, #3
 8009246:	e03a      	b.n	80092be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10b      	bne.n	8009266 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800925c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	3302      	adds	r3, #2
 8009262:	61bb      	str	r3, [r7, #24]
 8009264:	e007      	b.n	8009276 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	781a      	ldrb	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	3301      	adds	r3, #1
 8009274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800927a:	b29b      	uxth	r3, r3
 800927c:	3b01      	subs	r3, #1
 800927e:	b29a      	uxth	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1cb      	bne.n	8009226 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2200      	movs	r2, #0
 8009296:	2140      	movs	r1, #64	@ 0x40
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 f814 	bl	80092c6 <UART_WaitOnFlagUntilTimeout>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d005      	beq.n	80092b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e006      	b.n	80092be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2220      	movs	r2, #32
 80092b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	e000      	b.n	80092be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80092bc:	2302      	movs	r3, #2
  }
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3720      	adds	r7, #32
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b086      	sub	sp, #24
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	60f8      	str	r0, [r7, #12]
 80092ce:	60b9      	str	r1, [r7, #8]
 80092d0:	603b      	str	r3, [r7, #0]
 80092d2:	4613      	mov	r3, r2
 80092d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092d6:	e03b      	b.n	8009350 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092d8:	6a3b      	ldr	r3, [r7, #32]
 80092da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092de:	d037      	beq.n	8009350 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092e0:	f7fe fa94 	bl	800780c <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	6a3a      	ldr	r2, [r7, #32]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d302      	bcc.n	80092f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e03a      	b.n	8009370 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d023      	beq.n	8009350 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	2b80      	cmp	r3, #128	@ 0x80
 800930c:	d020      	beq.n	8009350 <UART_WaitOnFlagUntilTimeout+0x8a>
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2b40      	cmp	r3, #64	@ 0x40
 8009312:	d01d      	beq.n	8009350 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0308 	and.w	r3, r3, #8
 800931e:	2b08      	cmp	r3, #8
 8009320:	d116      	bne.n	8009350 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009322:	2300      	movs	r3, #0
 8009324:	617b      	str	r3, [r7, #20]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	617b      	str	r3, [r7, #20]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 f81d 	bl	8009378 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2208      	movs	r2, #8
 8009342:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e00f      	b.n	8009370 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	4013      	ands	r3, r2
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	429a      	cmp	r2, r3
 800935e:	bf0c      	ite	eq
 8009360:	2301      	moveq	r3, #1
 8009362:	2300      	movne	r3, #0
 8009364:	b2db      	uxtb	r3, r3
 8009366:	461a      	mov	r2, r3
 8009368:	79fb      	ldrb	r3, [r7, #7]
 800936a:	429a      	cmp	r2, r3
 800936c:	d0b4      	beq.n	80092d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009378:	b480      	push	{r7}
 800937a:	b095      	sub	sp, #84	@ 0x54
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	330c      	adds	r3, #12
 8009386:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	330c      	adds	r3, #12
 800939e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80093a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80093a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e5      	bne.n	8009380 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3314      	adds	r3, #20
 80093ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	e853 3f00 	ldrex	r3, [r3]
 80093c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	f023 0301 	bic.w	r3, r3, #1
 80093ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3314      	adds	r3, #20
 80093d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093dc:	e841 2300 	strex	r3, r2, [r1]
 80093e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e5      	bne.n	80093b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d119      	bne.n	8009424 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	330c      	adds	r3, #12
 80093f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	f023 0310 	bic.w	r3, r3, #16
 8009406:	647b      	str	r3, [r7, #68]	@ 0x44
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	330c      	adds	r3, #12
 800940e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009410:	61ba      	str	r2, [r7, #24]
 8009412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009414:	6979      	ldr	r1, [r7, #20]
 8009416:	69ba      	ldr	r2, [r7, #24]
 8009418:	e841 2300 	strex	r3, r2, [r1]
 800941c:	613b      	str	r3, [r7, #16]
   return(result);
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e5      	bne.n	80093f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009432:	bf00      	nop
 8009434:	3754      	adds	r7, #84	@ 0x54
 8009436:	46bd      	mov	sp, r7
 8009438:	bc80      	pop	{r7}
 800943a:	4770      	bx	lr

0800943c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68da      	ldr	r2, [r3, #12]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	431a      	orrs	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	4313      	orrs	r3, r2
 800946a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009476:	f023 030c 	bic.w	r3, r3, #12
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	6812      	ldr	r2, [r2, #0]
 800947e:	68b9      	ldr	r1, [r7, #8]
 8009480:	430b      	orrs	r3, r1
 8009482:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	699a      	ldr	r2, [r3, #24]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	430a      	orrs	r2, r1
 8009498:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a2c      	ldr	r2, [pc, #176]	@ (8009550 <UART_SetConfig+0x114>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d103      	bne.n	80094ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80094a4:	f7ff fc74 	bl	8008d90 <HAL_RCC_GetPCLK2Freq>
 80094a8:	60f8      	str	r0, [r7, #12]
 80094aa:	e002      	b.n	80094b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80094ac:	f7ff fc5c 	bl	8008d68 <HAL_RCC_GetPCLK1Freq>
 80094b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	009a      	lsls	r2, r3, #2
 80094bc:	441a      	add	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c8:	4a22      	ldr	r2, [pc, #136]	@ (8009554 <UART_SetConfig+0x118>)
 80094ca:	fba2 2303 	umull	r2, r3, r2, r3
 80094ce:	095b      	lsrs	r3, r3, #5
 80094d0:	0119      	lsls	r1, r3, #4
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	009a      	lsls	r2, r3, #2
 80094dc:	441a      	add	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80094e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009554 <UART_SetConfig+0x118>)
 80094ea:	fba3 0302 	umull	r0, r3, r3, r2
 80094ee:	095b      	lsrs	r3, r3, #5
 80094f0:	2064      	movs	r0, #100	@ 0x64
 80094f2:	fb00 f303 	mul.w	r3, r0, r3
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	011b      	lsls	r3, r3, #4
 80094fa:	3332      	adds	r3, #50	@ 0x32
 80094fc:	4a15      	ldr	r2, [pc, #84]	@ (8009554 <UART_SetConfig+0x118>)
 80094fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009502:	095b      	lsrs	r3, r3, #5
 8009504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009508:	4419      	add	r1, r3
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	4613      	mov	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	009a      	lsls	r2, r3, #2
 8009514:	441a      	add	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009520:	4b0c      	ldr	r3, [pc, #48]	@ (8009554 <UART_SetConfig+0x118>)
 8009522:	fba3 0302 	umull	r0, r3, r3, r2
 8009526:	095b      	lsrs	r3, r3, #5
 8009528:	2064      	movs	r0, #100	@ 0x64
 800952a:	fb00 f303 	mul.w	r3, r0, r3
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	3332      	adds	r3, #50	@ 0x32
 8009534:	4a07      	ldr	r2, [pc, #28]	@ (8009554 <UART_SetConfig+0x118>)
 8009536:	fba2 2303 	umull	r2, r3, r2, r3
 800953a:	095b      	lsrs	r3, r3, #5
 800953c:	f003 020f 	and.w	r2, r3, #15
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	440a      	add	r2, r1
 8009546:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009548:	bf00      	nop
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	40013800 	.word	0x40013800
 8009554:	51eb851f 	.word	0x51eb851f

08009558 <__cvt>:
 8009558:	2b00      	cmp	r3, #0
 800955a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800955e:	461d      	mov	r5, r3
 8009560:	bfbb      	ittet	lt
 8009562:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009566:	461d      	movlt	r5, r3
 8009568:	2300      	movge	r3, #0
 800956a:	232d      	movlt	r3, #45	@ 0x2d
 800956c:	b088      	sub	sp, #32
 800956e:	4614      	mov	r4, r2
 8009570:	bfb8      	it	lt
 8009572:	4614      	movlt	r4, r2
 8009574:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009576:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009578:	7013      	strb	r3, [r2, #0]
 800957a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800957c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009580:	f023 0820 	bic.w	r8, r3, #32
 8009584:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009588:	d005      	beq.n	8009596 <__cvt+0x3e>
 800958a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800958e:	d100      	bne.n	8009592 <__cvt+0x3a>
 8009590:	3601      	adds	r6, #1
 8009592:	2302      	movs	r3, #2
 8009594:	e000      	b.n	8009598 <__cvt+0x40>
 8009596:	2303      	movs	r3, #3
 8009598:	aa07      	add	r2, sp, #28
 800959a:	9204      	str	r2, [sp, #16]
 800959c:	aa06      	add	r2, sp, #24
 800959e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80095a2:	e9cd 3600 	strd	r3, r6, [sp]
 80095a6:	4622      	mov	r2, r4
 80095a8:	462b      	mov	r3, r5
 80095aa:	f000 fe6d 	bl	800a288 <_dtoa_r>
 80095ae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80095b2:	4607      	mov	r7, r0
 80095b4:	d119      	bne.n	80095ea <__cvt+0x92>
 80095b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095b8:	07db      	lsls	r3, r3, #31
 80095ba:	d50e      	bpl.n	80095da <__cvt+0x82>
 80095bc:	eb00 0906 	add.w	r9, r0, r6
 80095c0:	2200      	movs	r2, #0
 80095c2:	2300      	movs	r3, #0
 80095c4:	4620      	mov	r0, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	f7f7 fa5a 	bl	8000a80 <__aeabi_dcmpeq>
 80095cc:	b108      	cbz	r0, 80095d2 <__cvt+0x7a>
 80095ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80095d2:	2230      	movs	r2, #48	@ 0x30
 80095d4:	9b07      	ldr	r3, [sp, #28]
 80095d6:	454b      	cmp	r3, r9
 80095d8:	d31e      	bcc.n	8009618 <__cvt+0xc0>
 80095da:	4638      	mov	r0, r7
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80095e0:	1bdb      	subs	r3, r3, r7
 80095e2:	6013      	str	r3, [r2, #0]
 80095e4:	b008      	add	sp, #32
 80095e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095ee:	eb00 0906 	add.w	r9, r0, r6
 80095f2:	d1e5      	bne.n	80095c0 <__cvt+0x68>
 80095f4:	7803      	ldrb	r3, [r0, #0]
 80095f6:	2b30      	cmp	r3, #48	@ 0x30
 80095f8:	d10a      	bne.n	8009610 <__cvt+0xb8>
 80095fa:	2200      	movs	r2, #0
 80095fc:	2300      	movs	r3, #0
 80095fe:	4620      	mov	r0, r4
 8009600:	4629      	mov	r1, r5
 8009602:	f7f7 fa3d 	bl	8000a80 <__aeabi_dcmpeq>
 8009606:	b918      	cbnz	r0, 8009610 <__cvt+0xb8>
 8009608:	f1c6 0601 	rsb	r6, r6, #1
 800960c:	f8ca 6000 	str.w	r6, [sl]
 8009610:	f8da 3000 	ldr.w	r3, [sl]
 8009614:	4499      	add	r9, r3
 8009616:	e7d3      	b.n	80095c0 <__cvt+0x68>
 8009618:	1c59      	adds	r1, r3, #1
 800961a:	9107      	str	r1, [sp, #28]
 800961c:	701a      	strb	r2, [r3, #0]
 800961e:	e7d9      	b.n	80095d4 <__cvt+0x7c>

08009620 <__exponent>:
 8009620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009622:	2900      	cmp	r1, #0
 8009624:	bfb6      	itet	lt
 8009626:	232d      	movlt	r3, #45	@ 0x2d
 8009628:	232b      	movge	r3, #43	@ 0x2b
 800962a:	4249      	neglt	r1, r1
 800962c:	2909      	cmp	r1, #9
 800962e:	7002      	strb	r2, [r0, #0]
 8009630:	7043      	strb	r3, [r0, #1]
 8009632:	dd29      	ble.n	8009688 <__exponent+0x68>
 8009634:	f10d 0307 	add.w	r3, sp, #7
 8009638:	461d      	mov	r5, r3
 800963a:	270a      	movs	r7, #10
 800963c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009640:	461a      	mov	r2, r3
 8009642:	fb07 1416 	mls	r4, r7, r6, r1
 8009646:	3430      	adds	r4, #48	@ 0x30
 8009648:	f802 4c01 	strb.w	r4, [r2, #-1]
 800964c:	460c      	mov	r4, r1
 800964e:	2c63      	cmp	r4, #99	@ 0x63
 8009650:	4631      	mov	r1, r6
 8009652:	f103 33ff 	add.w	r3, r3, #4294967295
 8009656:	dcf1      	bgt.n	800963c <__exponent+0x1c>
 8009658:	3130      	adds	r1, #48	@ 0x30
 800965a:	1e94      	subs	r4, r2, #2
 800965c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009660:	4623      	mov	r3, r4
 8009662:	1c41      	adds	r1, r0, #1
 8009664:	42ab      	cmp	r3, r5
 8009666:	d30a      	bcc.n	800967e <__exponent+0x5e>
 8009668:	f10d 0309 	add.w	r3, sp, #9
 800966c:	1a9b      	subs	r3, r3, r2
 800966e:	42ac      	cmp	r4, r5
 8009670:	bf88      	it	hi
 8009672:	2300      	movhi	r3, #0
 8009674:	3302      	adds	r3, #2
 8009676:	4403      	add	r3, r0
 8009678:	1a18      	subs	r0, r3, r0
 800967a:	b003      	add	sp, #12
 800967c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800967e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009682:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009686:	e7ed      	b.n	8009664 <__exponent+0x44>
 8009688:	2330      	movs	r3, #48	@ 0x30
 800968a:	3130      	adds	r1, #48	@ 0x30
 800968c:	7083      	strb	r3, [r0, #2]
 800968e:	70c1      	strb	r1, [r0, #3]
 8009690:	1d03      	adds	r3, r0, #4
 8009692:	e7f1      	b.n	8009678 <__exponent+0x58>

08009694 <_printf_float>:
 8009694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009698:	b091      	sub	sp, #68	@ 0x44
 800969a:	460c      	mov	r4, r1
 800969c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80096a0:	4616      	mov	r6, r2
 80096a2:	461f      	mov	r7, r3
 80096a4:	4605      	mov	r5, r0
 80096a6:	f000 fce1 	bl	800a06c <_localeconv_r>
 80096aa:	6803      	ldr	r3, [r0, #0]
 80096ac:	4618      	mov	r0, r3
 80096ae:	9308      	str	r3, [sp, #32]
 80096b0:	f7f6 fdba 	bl	8000228 <strlen>
 80096b4:	2300      	movs	r3, #0
 80096b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80096b8:	f8d8 3000 	ldr.w	r3, [r8]
 80096bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80096be:	3307      	adds	r3, #7
 80096c0:	f023 0307 	bic.w	r3, r3, #7
 80096c4:	f103 0208 	add.w	r2, r3, #8
 80096c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80096cc:	f8d4 b000 	ldr.w	fp, [r4]
 80096d0:	f8c8 2000 	str.w	r2, [r8]
 80096d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80096dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096de:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80096e2:	f04f 32ff 	mov.w	r2, #4294967295
 80096e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80096ee:	4b9c      	ldr	r3, [pc, #624]	@ (8009960 <_printf_float+0x2cc>)
 80096f0:	f7f7 f9f8 	bl	8000ae4 <__aeabi_dcmpun>
 80096f4:	bb70      	cbnz	r0, 8009754 <_printf_float+0xc0>
 80096f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096fa:	f04f 32ff 	mov.w	r2, #4294967295
 80096fe:	4b98      	ldr	r3, [pc, #608]	@ (8009960 <_printf_float+0x2cc>)
 8009700:	f7f7 f9d2 	bl	8000aa8 <__aeabi_dcmple>
 8009704:	bb30      	cbnz	r0, 8009754 <_printf_float+0xc0>
 8009706:	2200      	movs	r2, #0
 8009708:	2300      	movs	r3, #0
 800970a:	4640      	mov	r0, r8
 800970c:	4649      	mov	r1, r9
 800970e:	f7f7 f9c1 	bl	8000a94 <__aeabi_dcmplt>
 8009712:	b110      	cbz	r0, 800971a <_printf_float+0x86>
 8009714:	232d      	movs	r3, #45	@ 0x2d
 8009716:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800971a:	4a92      	ldr	r2, [pc, #584]	@ (8009964 <_printf_float+0x2d0>)
 800971c:	4b92      	ldr	r3, [pc, #584]	@ (8009968 <_printf_float+0x2d4>)
 800971e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009722:	bf94      	ite	ls
 8009724:	4690      	movls	r8, r2
 8009726:	4698      	movhi	r8, r3
 8009728:	2303      	movs	r3, #3
 800972a:	f04f 0900 	mov.w	r9, #0
 800972e:	6123      	str	r3, [r4, #16]
 8009730:	f02b 0304 	bic.w	r3, fp, #4
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	4633      	mov	r3, r6
 8009738:	4621      	mov	r1, r4
 800973a:	4628      	mov	r0, r5
 800973c:	9700      	str	r7, [sp, #0]
 800973e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009740:	f000 f9d4 	bl	8009aec <_printf_common>
 8009744:	3001      	adds	r0, #1
 8009746:	f040 8090 	bne.w	800986a <_printf_float+0x1d6>
 800974a:	f04f 30ff 	mov.w	r0, #4294967295
 800974e:	b011      	add	sp, #68	@ 0x44
 8009750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009754:	4642      	mov	r2, r8
 8009756:	464b      	mov	r3, r9
 8009758:	4640      	mov	r0, r8
 800975a:	4649      	mov	r1, r9
 800975c:	f7f7 f9c2 	bl	8000ae4 <__aeabi_dcmpun>
 8009760:	b148      	cbz	r0, 8009776 <_printf_float+0xe2>
 8009762:	464b      	mov	r3, r9
 8009764:	2b00      	cmp	r3, #0
 8009766:	bfb8      	it	lt
 8009768:	232d      	movlt	r3, #45	@ 0x2d
 800976a:	4a80      	ldr	r2, [pc, #512]	@ (800996c <_printf_float+0x2d8>)
 800976c:	bfb8      	it	lt
 800976e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009772:	4b7f      	ldr	r3, [pc, #508]	@ (8009970 <_printf_float+0x2dc>)
 8009774:	e7d3      	b.n	800971e <_printf_float+0x8a>
 8009776:	6863      	ldr	r3, [r4, #4]
 8009778:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	d13f      	bne.n	8009800 <_printf_float+0x16c>
 8009780:	2306      	movs	r3, #6
 8009782:	6063      	str	r3, [r4, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800978a:	6023      	str	r3, [r4, #0]
 800978c:	9206      	str	r2, [sp, #24]
 800978e:	aa0e      	add	r2, sp, #56	@ 0x38
 8009790:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009794:	aa0d      	add	r2, sp, #52	@ 0x34
 8009796:	9203      	str	r2, [sp, #12]
 8009798:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800979c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80097a0:	6863      	ldr	r3, [r4, #4]
 80097a2:	4642      	mov	r2, r8
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	4628      	mov	r0, r5
 80097a8:	464b      	mov	r3, r9
 80097aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80097ac:	f7ff fed4 	bl	8009558 <__cvt>
 80097b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097b2:	4680      	mov	r8, r0
 80097b4:	2947      	cmp	r1, #71	@ 0x47
 80097b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80097b8:	d128      	bne.n	800980c <_printf_float+0x178>
 80097ba:	1cc8      	adds	r0, r1, #3
 80097bc:	db02      	blt.n	80097c4 <_printf_float+0x130>
 80097be:	6863      	ldr	r3, [r4, #4]
 80097c0:	4299      	cmp	r1, r3
 80097c2:	dd40      	ble.n	8009846 <_printf_float+0x1b2>
 80097c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80097c8:	fa5f fa8a 	uxtb.w	sl, sl
 80097cc:	4652      	mov	r2, sl
 80097ce:	3901      	subs	r1, #1
 80097d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80097d4:	910d      	str	r1, [sp, #52]	@ 0x34
 80097d6:	f7ff ff23 	bl	8009620 <__exponent>
 80097da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097dc:	4681      	mov	r9, r0
 80097de:	1813      	adds	r3, r2, r0
 80097e0:	2a01      	cmp	r2, #1
 80097e2:	6123      	str	r3, [r4, #16]
 80097e4:	dc02      	bgt.n	80097ec <_printf_float+0x158>
 80097e6:	6822      	ldr	r2, [r4, #0]
 80097e8:	07d2      	lsls	r2, r2, #31
 80097ea:	d501      	bpl.n	80097f0 <_printf_float+0x15c>
 80097ec:	3301      	adds	r3, #1
 80097ee:	6123      	str	r3, [r4, #16]
 80097f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d09e      	beq.n	8009736 <_printf_float+0xa2>
 80097f8:	232d      	movs	r3, #45	@ 0x2d
 80097fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097fe:	e79a      	b.n	8009736 <_printf_float+0xa2>
 8009800:	2947      	cmp	r1, #71	@ 0x47
 8009802:	d1bf      	bne.n	8009784 <_printf_float+0xf0>
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1bd      	bne.n	8009784 <_printf_float+0xf0>
 8009808:	2301      	movs	r3, #1
 800980a:	e7ba      	b.n	8009782 <_printf_float+0xee>
 800980c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009810:	d9dc      	bls.n	80097cc <_printf_float+0x138>
 8009812:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009816:	d118      	bne.n	800984a <_printf_float+0x1b6>
 8009818:	2900      	cmp	r1, #0
 800981a:	6863      	ldr	r3, [r4, #4]
 800981c:	dd0b      	ble.n	8009836 <_printf_float+0x1a2>
 800981e:	6121      	str	r1, [r4, #16]
 8009820:	b913      	cbnz	r3, 8009828 <_printf_float+0x194>
 8009822:	6822      	ldr	r2, [r4, #0]
 8009824:	07d0      	lsls	r0, r2, #31
 8009826:	d502      	bpl.n	800982e <_printf_float+0x19a>
 8009828:	3301      	adds	r3, #1
 800982a:	440b      	add	r3, r1
 800982c:	6123      	str	r3, [r4, #16]
 800982e:	f04f 0900 	mov.w	r9, #0
 8009832:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009834:	e7dc      	b.n	80097f0 <_printf_float+0x15c>
 8009836:	b913      	cbnz	r3, 800983e <_printf_float+0x1aa>
 8009838:	6822      	ldr	r2, [r4, #0]
 800983a:	07d2      	lsls	r2, r2, #31
 800983c:	d501      	bpl.n	8009842 <_printf_float+0x1ae>
 800983e:	3302      	adds	r3, #2
 8009840:	e7f4      	b.n	800982c <_printf_float+0x198>
 8009842:	2301      	movs	r3, #1
 8009844:	e7f2      	b.n	800982c <_printf_float+0x198>
 8009846:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800984a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800984c:	4299      	cmp	r1, r3
 800984e:	db05      	blt.n	800985c <_printf_float+0x1c8>
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	6121      	str	r1, [r4, #16]
 8009854:	07d8      	lsls	r0, r3, #31
 8009856:	d5ea      	bpl.n	800982e <_printf_float+0x19a>
 8009858:	1c4b      	adds	r3, r1, #1
 800985a:	e7e7      	b.n	800982c <_printf_float+0x198>
 800985c:	2900      	cmp	r1, #0
 800985e:	bfcc      	ite	gt
 8009860:	2201      	movgt	r2, #1
 8009862:	f1c1 0202 	rsble	r2, r1, #2
 8009866:	4413      	add	r3, r2
 8009868:	e7e0      	b.n	800982c <_printf_float+0x198>
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	055a      	lsls	r2, r3, #21
 800986e:	d407      	bmi.n	8009880 <_printf_float+0x1ec>
 8009870:	6923      	ldr	r3, [r4, #16]
 8009872:	4642      	mov	r2, r8
 8009874:	4631      	mov	r1, r6
 8009876:	4628      	mov	r0, r5
 8009878:	47b8      	blx	r7
 800987a:	3001      	adds	r0, #1
 800987c:	d12b      	bne.n	80098d6 <_printf_float+0x242>
 800987e:	e764      	b.n	800974a <_printf_float+0xb6>
 8009880:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009884:	f240 80dc 	bls.w	8009a40 <_printf_float+0x3ac>
 8009888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800988c:	2200      	movs	r2, #0
 800988e:	2300      	movs	r3, #0
 8009890:	f7f7 f8f6 	bl	8000a80 <__aeabi_dcmpeq>
 8009894:	2800      	cmp	r0, #0
 8009896:	d033      	beq.n	8009900 <_printf_float+0x26c>
 8009898:	2301      	movs	r3, #1
 800989a:	4631      	mov	r1, r6
 800989c:	4628      	mov	r0, r5
 800989e:	4a35      	ldr	r2, [pc, #212]	@ (8009974 <_printf_float+0x2e0>)
 80098a0:	47b8      	blx	r7
 80098a2:	3001      	adds	r0, #1
 80098a4:	f43f af51 	beq.w	800974a <_printf_float+0xb6>
 80098a8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80098ac:	4543      	cmp	r3, r8
 80098ae:	db02      	blt.n	80098b6 <_printf_float+0x222>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	07d8      	lsls	r0, r3, #31
 80098b4:	d50f      	bpl.n	80098d6 <_printf_float+0x242>
 80098b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80098ba:	4631      	mov	r1, r6
 80098bc:	4628      	mov	r0, r5
 80098be:	47b8      	blx	r7
 80098c0:	3001      	adds	r0, #1
 80098c2:	f43f af42 	beq.w	800974a <_printf_float+0xb6>
 80098c6:	f04f 0900 	mov.w	r9, #0
 80098ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80098ce:	f104 0a1a 	add.w	sl, r4, #26
 80098d2:	45c8      	cmp	r8, r9
 80098d4:	dc09      	bgt.n	80098ea <_printf_float+0x256>
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	079b      	lsls	r3, r3, #30
 80098da:	f100 8102 	bmi.w	8009ae2 <_printf_float+0x44e>
 80098de:	68e0      	ldr	r0, [r4, #12]
 80098e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098e2:	4298      	cmp	r0, r3
 80098e4:	bfb8      	it	lt
 80098e6:	4618      	movlt	r0, r3
 80098e8:	e731      	b.n	800974e <_printf_float+0xba>
 80098ea:	2301      	movs	r3, #1
 80098ec:	4652      	mov	r2, sl
 80098ee:	4631      	mov	r1, r6
 80098f0:	4628      	mov	r0, r5
 80098f2:	47b8      	blx	r7
 80098f4:	3001      	adds	r0, #1
 80098f6:	f43f af28 	beq.w	800974a <_printf_float+0xb6>
 80098fa:	f109 0901 	add.w	r9, r9, #1
 80098fe:	e7e8      	b.n	80098d2 <_printf_float+0x23e>
 8009900:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009902:	2b00      	cmp	r3, #0
 8009904:	dc38      	bgt.n	8009978 <_printf_float+0x2e4>
 8009906:	2301      	movs	r3, #1
 8009908:	4631      	mov	r1, r6
 800990a:	4628      	mov	r0, r5
 800990c:	4a19      	ldr	r2, [pc, #100]	@ (8009974 <_printf_float+0x2e0>)
 800990e:	47b8      	blx	r7
 8009910:	3001      	adds	r0, #1
 8009912:	f43f af1a 	beq.w	800974a <_printf_float+0xb6>
 8009916:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800991a:	ea59 0303 	orrs.w	r3, r9, r3
 800991e:	d102      	bne.n	8009926 <_printf_float+0x292>
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	07d9      	lsls	r1, r3, #31
 8009924:	d5d7      	bpl.n	80098d6 <_printf_float+0x242>
 8009926:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800992a:	4631      	mov	r1, r6
 800992c:	4628      	mov	r0, r5
 800992e:	47b8      	blx	r7
 8009930:	3001      	adds	r0, #1
 8009932:	f43f af0a 	beq.w	800974a <_printf_float+0xb6>
 8009936:	f04f 0a00 	mov.w	sl, #0
 800993a:	f104 0b1a 	add.w	fp, r4, #26
 800993e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009940:	425b      	negs	r3, r3
 8009942:	4553      	cmp	r3, sl
 8009944:	dc01      	bgt.n	800994a <_printf_float+0x2b6>
 8009946:	464b      	mov	r3, r9
 8009948:	e793      	b.n	8009872 <_printf_float+0x1de>
 800994a:	2301      	movs	r3, #1
 800994c:	465a      	mov	r2, fp
 800994e:	4631      	mov	r1, r6
 8009950:	4628      	mov	r0, r5
 8009952:	47b8      	blx	r7
 8009954:	3001      	adds	r0, #1
 8009956:	f43f aef8 	beq.w	800974a <_printf_float+0xb6>
 800995a:	f10a 0a01 	add.w	sl, sl, #1
 800995e:	e7ee      	b.n	800993e <_printf_float+0x2aa>
 8009960:	7fefffff 	.word	0x7fefffff
 8009964:	0800f1e2 	.word	0x0800f1e2
 8009968:	0800f1e6 	.word	0x0800f1e6
 800996c:	0800f1ea 	.word	0x0800f1ea
 8009970:	0800f1ee 	.word	0x0800f1ee
 8009974:	0800f1f2 	.word	0x0800f1f2
 8009978:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800997a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800997e:	4553      	cmp	r3, sl
 8009980:	bfa8      	it	ge
 8009982:	4653      	movge	r3, sl
 8009984:	2b00      	cmp	r3, #0
 8009986:	4699      	mov	r9, r3
 8009988:	dc36      	bgt.n	80099f8 <_printf_float+0x364>
 800998a:	f04f 0b00 	mov.w	fp, #0
 800998e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009992:	f104 021a 	add.w	r2, r4, #26
 8009996:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009998:	930a      	str	r3, [sp, #40]	@ 0x28
 800999a:	eba3 0309 	sub.w	r3, r3, r9
 800999e:	455b      	cmp	r3, fp
 80099a0:	dc31      	bgt.n	8009a06 <_printf_float+0x372>
 80099a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099a4:	459a      	cmp	sl, r3
 80099a6:	dc3a      	bgt.n	8009a1e <_printf_float+0x38a>
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	07da      	lsls	r2, r3, #31
 80099ac:	d437      	bmi.n	8009a1e <_printf_float+0x38a>
 80099ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099b0:	ebaa 0903 	sub.w	r9, sl, r3
 80099b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099b6:	ebaa 0303 	sub.w	r3, sl, r3
 80099ba:	4599      	cmp	r9, r3
 80099bc:	bfa8      	it	ge
 80099be:	4699      	movge	r9, r3
 80099c0:	f1b9 0f00 	cmp.w	r9, #0
 80099c4:	dc33      	bgt.n	8009a2e <_printf_float+0x39a>
 80099c6:	f04f 0800 	mov.w	r8, #0
 80099ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099ce:	f104 0b1a 	add.w	fp, r4, #26
 80099d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099d4:	ebaa 0303 	sub.w	r3, sl, r3
 80099d8:	eba3 0309 	sub.w	r3, r3, r9
 80099dc:	4543      	cmp	r3, r8
 80099de:	f77f af7a 	ble.w	80098d6 <_printf_float+0x242>
 80099e2:	2301      	movs	r3, #1
 80099e4:	465a      	mov	r2, fp
 80099e6:	4631      	mov	r1, r6
 80099e8:	4628      	mov	r0, r5
 80099ea:	47b8      	blx	r7
 80099ec:	3001      	adds	r0, #1
 80099ee:	f43f aeac 	beq.w	800974a <_printf_float+0xb6>
 80099f2:	f108 0801 	add.w	r8, r8, #1
 80099f6:	e7ec      	b.n	80099d2 <_printf_float+0x33e>
 80099f8:	4642      	mov	r2, r8
 80099fa:	4631      	mov	r1, r6
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b8      	blx	r7
 8009a00:	3001      	adds	r0, #1
 8009a02:	d1c2      	bne.n	800998a <_printf_float+0x2f6>
 8009a04:	e6a1      	b.n	800974a <_printf_float+0xb6>
 8009a06:	2301      	movs	r3, #1
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	920a      	str	r2, [sp, #40]	@ 0x28
 8009a0e:	47b8      	blx	r7
 8009a10:	3001      	adds	r0, #1
 8009a12:	f43f ae9a 	beq.w	800974a <_printf_float+0xb6>
 8009a16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a18:	f10b 0b01 	add.w	fp, fp, #1
 8009a1c:	e7bb      	b.n	8009996 <_printf_float+0x302>
 8009a1e:	4631      	mov	r1, r6
 8009a20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a24:	4628      	mov	r0, r5
 8009a26:	47b8      	blx	r7
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d1c0      	bne.n	80099ae <_printf_float+0x31a>
 8009a2c:	e68d      	b.n	800974a <_printf_float+0xb6>
 8009a2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a30:	464b      	mov	r3, r9
 8009a32:	4631      	mov	r1, r6
 8009a34:	4628      	mov	r0, r5
 8009a36:	4442      	add	r2, r8
 8009a38:	47b8      	blx	r7
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	d1c3      	bne.n	80099c6 <_printf_float+0x332>
 8009a3e:	e684      	b.n	800974a <_printf_float+0xb6>
 8009a40:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009a44:	f1ba 0f01 	cmp.w	sl, #1
 8009a48:	dc01      	bgt.n	8009a4e <_printf_float+0x3ba>
 8009a4a:	07db      	lsls	r3, r3, #31
 8009a4c:	d536      	bpl.n	8009abc <_printf_float+0x428>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	4642      	mov	r2, r8
 8009a52:	4631      	mov	r1, r6
 8009a54:	4628      	mov	r0, r5
 8009a56:	47b8      	blx	r7
 8009a58:	3001      	adds	r0, #1
 8009a5a:	f43f ae76 	beq.w	800974a <_printf_float+0xb6>
 8009a5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f43f ae6e 	beq.w	800974a <_printf_float+0xb6>
 8009a6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a72:	2200      	movs	r2, #0
 8009a74:	2300      	movs	r3, #0
 8009a76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a7a:	f7f7 f801 	bl	8000a80 <__aeabi_dcmpeq>
 8009a7e:	b9c0      	cbnz	r0, 8009ab2 <_printf_float+0x41e>
 8009a80:	4653      	mov	r3, sl
 8009a82:	f108 0201 	add.w	r2, r8, #1
 8009a86:	4631      	mov	r1, r6
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b8      	blx	r7
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d10c      	bne.n	8009aaa <_printf_float+0x416>
 8009a90:	e65b      	b.n	800974a <_printf_float+0xb6>
 8009a92:	2301      	movs	r3, #1
 8009a94:	465a      	mov	r2, fp
 8009a96:	4631      	mov	r1, r6
 8009a98:	4628      	mov	r0, r5
 8009a9a:	47b8      	blx	r7
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	f43f ae54 	beq.w	800974a <_printf_float+0xb6>
 8009aa2:	f108 0801 	add.w	r8, r8, #1
 8009aa6:	45d0      	cmp	r8, sl
 8009aa8:	dbf3      	blt.n	8009a92 <_printf_float+0x3fe>
 8009aaa:	464b      	mov	r3, r9
 8009aac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ab0:	e6e0      	b.n	8009874 <_printf_float+0x1e0>
 8009ab2:	f04f 0800 	mov.w	r8, #0
 8009ab6:	f104 0b1a 	add.w	fp, r4, #26
 8009aba:	e7f4      	b.n	8009aa6 <_printf_float+0x412>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4642      	mov	r2, r8
 8009ac0:	e7e1      	b.n	8009a86 <_printf_float+0x3f2>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	464a      	mov	r2, r9
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4628      	mov	r0, r5
 8009aca:	47b8      	blx	r7
 8009acc:	3001      	adds	r0, #1
 8009ace:	f43f ae3c 	beq.w	800974a <_printf_float+0xb6>
 8009ad2:	f108 0801 	add.w	r8, r8, #1
 8009ad6:	68e3      	ldr	r3, [r4, #12]
 8009ad8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ada:	1a5b      	subs	r3, r3, r1
 8009adc:	4543      	cmp	r3, r8
 8009ade:	dcf0      	bgt.n	8009ac2 <_printf_float+0x42e>
 8009ae0:	e6fd      	b.n	80098de <_printf_float+0x24a>
 8009ae2:	f04f 0800 	mov.w	r8, #0
 8009ae6:	f104 0919 	add.w	r9, r4, #25
 8009aea:	e7f4      	b.n	8009ad6 <_printf_float+0x442>

08009aec <_printf_common>:
 8009aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	4616      	mov	r6, r2
 8009af2:	4698      	mov	r8, r3
 8009af4:	688a      	ldr	r2, [r1, #8]
 8009af6:	690b      	ldr	r3, [r1, #16]
 8009af8:	4607      	mov	r7, r0
 8009afa:	4293      	cmp	r3, r2
 8009afc:	bfb8      	it	lt
 8009afe:	4613      	movlt	r3, r2
 8009b00:	6033      	str	r3, [r6, #0]
 8009b02:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b06:	460c      	mov	r4, r1
 8009b08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b0c:	b10a      	cbz	r2, 8009b12 <_printf_common+0x26>
 8009b0e:	3301      	adds	r3, #1
 8009b10:	6033      	str	r3, [r6, #0]
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	0699      	lsls	r1, r3, #26
 8009b16:	bf42      	ittt	mi
 8009b18:	6833      	ldrmi	r3, [r6, #0]
 8009b1a:	3302      	addmi	r3, #2
 8009b1c:	6033      	strmi	r3, [r6, #0]
 8009b1e:	6825      	ldr	r5, [r4, #0]
 8009b20:	f015 0506 	ands.w	r5, r5, #6
 8009b24:	d106      	bne.n	8009b34 <_printf_common+0x48>
 8009b26:	f104 0a19 	add.w	sl, r4, #25
 8009b2a:	68e3      	ldr	r3, [r4, #12]
 8009b2c:	6832      	ldr	r2, [r6, #0]
 8009b2e:	1a9b      	subs	r3, r3, r2
 8009b30:	42ab      	cmp	r3, r5
 8009b32:	dc2b      	bgt.n	8009b8c <_printf_common+0xa0>
 8009b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b38:	6822      	ldr	r2, [r4, #0]
 8009b3a:	3b00      	subs	r3, #0
 8009b3c:	bf18      	it	ne
 8009b3e:	2301      	movne	r3, #1
 8009b40:	0692      	lsls	r2, r2, #26
 8009b42:	d430      	bmi.n	8009ba6 <_printf_common+0xba>
 8009b44:	4641      	mov	r1, r8
 8009b46:	4638      	mov	r0, r7
 8009b48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b4c:	47c8      	blx	r9
 8009b4e:	3001      	adds	r0, #1
 8009b50:	d023      	beq.n	8009b9a <_printf_common+0xae>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	6922      	ldr	r2, [r4, #16]
 8009b56:	f003 0306 	and.w	r3, r3, #6
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	bf14      	ite	ne
 8009b5e:	2500      	movne	r5, #0
 8009b60:	6833      	ldreq	r3, [r6, #0]
 8009b62:	f04f 0600 	mov.w	r6, #0
 8009b66:	bf08      	it	eq
 8009b68:	68e5      	ldreq	r5, [r4, #12]
 8009b6a:	f104 041a 	add.w	r4, r4, #26
 8009b6e:	bf08      	it	eq
 8009b70:	1aed      	subeq	r5, r5, r3
 8009b72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009b76:	bf08      	it	eq
 8009b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	bfc4      	itt	gt
 8009b80:	1a9b      	subgt	r3, r3, r2
 8009b82:	18ed      	addgt	r5, r5, r3
 8009b84:	42b5      	cmp	r5, r6
 8009b86:	d11a      	bne.n	8009bbe <_printf_common+0xd2>
 8009b88:	2000      	movs	r0, #0
 8009b8a:	e008      	b.n	8009b9e <_printf_common+0xb2>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	4652      	mov	r2, sl
 8009b90:	4641      	mov	r1, r8
 8009b92:	4638      	mov	r0, r7
 8009b94:	47c8      	blx	r9
 8009b96:	3001      	adds	r0, #1
 8009b98:	d103      	bne.n	8009ba2 <_printf_common+0xb6>
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba2:	3501      	adds	r5, #1
 8009ba4:	e7c1      	b.n	8009b2a <_printf_common+0x3e>
 8009ba6:	2030      	movs	r0, #48	@ 0x30
 8009ba8:	18e1      	adds	r1, r4, r3
 8009baa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009bb4:	4422      	add	r2, r4
 8009bb6:	3302      	adds	r3, #2
 8009bb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009bbc:	e7c2      	b.n	8009b44 <_printf_common+0x58>
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	4641      	mov	r1, r8
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	47c8      	blx	r9
 8009bc8:	3001      	adds	r0, #1
 8009bca:	d0e6      	beq.n	8009b9a <_printf_common+0xae>
 8009bcc:	3601      	adds	r6, #1
 8009bce:	e7d9      	b.n	8009b84 <_printf_common+0x98>

08009bd0 <_printf_i>:
 8009bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd4:	7e0f      	ldrb	r7, [r1, #24]
 8009bd6:	4691      	mov	r9, r2
 8009bd8:	2f78      	cmp	r7, #120	@ 0x78
 8009bda:	4680      	mov	r8, r0
 8009bdc:	460c      	mov	r4, r1
 8009bde:	469a      	mov	sl, r3
 8009be0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009be6:	d807      	bhi.n	8009bf8 <_printf_i+0x28>
 8009be8:	2f62      	cmp	r7, #98	@ 0x62
 8009bea:	d80a      	bhi.n	8009c02 <_printf_i+0x32>
 8009bec:	2f00      	cmp	r7, #0
 8009bee:	f000 80d3 	beq.w	8009d98 <_printf_i+0x1c8>
 8009bf2:	2f58      	cmp	r7, #88	@ 0x58
 8009bf4:	f000 80ba 	beq.w	8009d6c <_printf_i+0x19c>
 8009bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c00:	e03a      	b.n	8009c78 <_printf_i+0xa8>
 8009c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c06:	2b15      	cmp	r3, #21
 8009c08:	d8f6      	bhi.n	8009bf8 <_printf_i+0x28>
 8009c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8009c10 <_printf_i+0x40>)
 8009c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c10:	08009c69 	.word	0x08009c69
 8009c14:	08009c7d 	.word	0x08009c7d
 8009c18:	08009bf9 	.word	0x08009bf9
 8009c1c:	08009bf9 	.word	0x08009bf9
 8009c20:	08009bf9 	.word	0x08009bf9
 8009c24:	08009bf9 	.word	0x08009bf9
 8009c28:	08009c7d 	.word	0x08009c7d
 8009c2c:	08009bf9 	.word	0x08009bf9
 8009c30:	08009bf9 	.word	0x08009bf9
 8009c34:	08009bf9 	.word	0x08009bf9
 8009c38:	08009bf9 	.word	0x08009bf9
 8009c3c:	08009d7f 	.word	0x08009d7f
 8009c40:	08009ca7 	.word	0x08009ca7
 8009c44:	08009d39 	.word	0x08009d39
 8009c48:	08009bf9 	.word	0x08009bf9
 8009c4c:	08009bf9 	.word	0x08009bf9
 8009c50:	08009da1 	.word	0x08009da1
 8009c54:	08009bf9 	.word	0x08009bf9
 8009c58:	08009ca7 	.word	0x08009ca7
 8009c5c:	08009bf9 	.word	0x08009bf9
 8009c60:	08009bf9 	.word	0x08009bf9
 8009c64:	08009d41 	.word	0x08009d41
 8009c68:	6833      	ldr	r3, [r6, #0]
 8009c6a:	1d1a      	adds	r2, r3, #4
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6032      	str	r2, [r6, #0]
 8009c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e09e      	b.n	8009dba <_printf_i+0x1ea>
 8009c7c:	6833      	ldr	r3, [r6, #0]
 8009c7e:	6820      	ldr	r0, [r4, #0]
 8009c80:	1d19      	adds	r1, r3, #4
 8009c82:	6031      	str	r1, [r6, #0]
 8009c84:	0606      	lsls	r6, r0, #24
 8009c86:	d501      	bpl.n	8009c8c <_printf_i+0xbc>
 8009c88:	681d      	ldr	r5, [r3, #0]
 8009c8a:	e003      	b.n	8009c94 <_printf_i+0xc4>
 8009c8c:	0645      	lsls	r5, r0, #25
 8009c8e:	d5fb      	bpl.n	8009c88 <_printf_i+0xb8>
 8009c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c94:	2d00      	cmp	r5, #0
 8009c96:	da03      	bge.n	8009ca0 <_printf_i+0xd0>
 8009c98:	232d      	movs	r3, #45	@ 0x2d
 8009c9a:	426d      	negs	r5, r5
 8009c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ca0:	230a      	movs	r3, #10
 8009ca2:	4859      	ldr	r0, [pc, #356]	@ (8009e08 <_printf_i+0x238>)
 8009ca4:	e011      	b.n	8009cca <_printf_i+0xfa>
 8009ca6:	6821      	ldr	r1, [r4, #0]
 8009ca8:	6833      	ldr	r3, [r6, #0]
 8009caa:	0608      	lsls	r0, r1, #24
 8009cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8009cb0:	d402      	bmi.n	8009cb8 <_printf_i+0xe8>
 8009cb2:	0649      	lsls	r1, r1, #25
 8009cb4:	bf48      	it	mi
 8009cb6:	b2ad      	uxthmi	r5, r5
 8009cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009cba:	6033      	str	r3, [r6, #0]
 8009cbc:	bf14      	ite	ne
 8009cbe:	230a      	movne	r3, #10
 8009cc0:	2308      	moveq	r3, #8
 8009cc2:	4851      	ldr	r0, [pc, #324]	@ (8009e08 <_printf_i+0x238>)
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cca:	6866      	ldr	r6, [r4, #4]
 8009ccc:	2e00      	cmp	r6, #0
 8009cce:	bfa8      	it	ge
 8009cd0:	6821      	ldrge	r1, [r4, #0]
 8009cd2:	60a6      	str	r6, [r4, #8]
 8009cd4:	bfa4      	itt	ge
 8009cd6:	f021 0104 	bicge.w	r1, r1, #4
 8009cda:	6021      	strge	r1, [r4, #0]
 8009cdc:	b90d      	cbnz	r5, 8009ce2 <_printf_i+0x112>
 8009cde:	2e00      	cmp	r6, #0
 8009ce0:	d04b      	beq.n	8009d7a <_printf_i+0x1aa>
 8009ce2:	4616      	mov	r6, r2
 8009ce4:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ce8:	fb03 5711 	mls	r7, r3, r1, r5
 8009cec:	5dc7      	ldrb	r7, [r0, r7]
 8009cee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cf2:	462f      	mov	r7, r5
 8009cf4:	42bb      	cmp	r3, r7
 8009cf6:	460d      	mov	r5, r1
 8009cf8:	d9f4      	bls.n	8009ce4 <_printf_i+0x114>
 8009cfa:	2b08      	cmp	r3, #8
 8009cfc:	d10b      	bne.n	8009d16 <_printf_i+0x146>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	07df      	lsls	r7, r3, #31
 8009d02:	d508      	bpl.n	8009d16 <_printf_i+0x146>
 8009d04:	6923      	ldr	r3, [r4, #16]
 8009d06:	6861      	ldr	r1, [r4, #4]
 8009d08:	4299      	cmp	r1, r3
 8009d0a:	bfde      	ittt	le
 8009d0c:	2330      	movle	r3, #48	@ 0x30
 8009d0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d16:	1b92      	subs	r2, r2, r6
 8009d18:	6122      	str	r2, [r4, #16]
 8009d1a:	464b      	mov	r3, r9
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	4640      	mov	r0, r8
 8009d20:	f8cd a000 	str.w	sl, [sp]
 8009d24:	aa03      	add	r2, sp, #12
 8009d26:	f7ff fee1 	bl	8009aec <_printf_common>
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	d14a      	bne.n	8009dc4 <_printf_i+0x1f4>
 8009d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d32:	b004      	add	sp, #16
 8009d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	f043 0320 	orr.w	r3, r3, #32
 8009d3e:	6023      	str	r3, [r4, #0]
 8009d40:	2778      	movs	r7, #120	@ 0x78
 8009d42:	4832      	ldr	r0, [pc, #200]	@ (8009e0c <_printf_i+0x23c>)
 8009d44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	6831      	ldr	r1, [r6, #0]
 8009d4c:	061f      	lsls	r7, r3, #24
 8009d4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d52:	d402      	bmi.n	8009d5a <_printf_i+0x18a>
 8009d54:	065f      	lsls	r7, r3, #25
 8009d56:	bf48      	it	mi
 8009d58:	b2ad      	uxthmi	r5, r5
 8009d5a:	6031      	str	r1, [r6, #0]
 8009d5c:	07d9      	lsls	r1, r3, #31
 8009d5e:	bf44      	itt	mi
 8009d60:	f043 0320 	orrmi.w	r3, r3, #32
 8009d64:	6023      	strmi	r3, [r4, #0]
 8009d66:	b11d      	cbz	r5, 8009d70 <_printf_i+0x1a0>
 8009d68:	2310      	movs	r3, #16
 8009d6a:	e7ab      	b.n	8009cc4 <_printf_i+0xf4>
 8009d6c:	4826      	ldr	r0, [pc, #152]	@ (8009e08 <_printf_i+0x238>)
 8009d6e:	e7e9      	b.n	8009d44 <_printf_i+0x174>
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	f023 0320 	bic.w	r3, r3, #32
 8009d76:	6023      	str	r3, [r4, #0]
 8009d78:	e7f6      	b.n	8009d68 <_printf_i+0x198>
 8009d7a:	4616      	mov	r6, r2
 8009d7c:	e7bd      	b.n	8009cfa <_printf_i+0x12a>
 8009d7e:	6833      	ldr	r3, [r6, #0]
 8009d80:	6825      	ldr	r5, [r4, #0]
 8009d82:	1d18      	adds	r0, r3, #4
 8009d84:	6961      	ldr	r1, [r4, #20]
 8009d86:	6030      	str	r0, [r6, #0]
 8009d88:	062e      	lsls	r6, r5, #24
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	d501      	bpl.n	8009d92 <_printf_i+0x1c2>
 8009d8e:	6019      	str	r1, [r3, #0]
 8009d90:	e002      	b.n	8009d98 <_printf_i+0x1c8>
 8009d92:	0668      	lsls	r0, r5, #25
 8009d94:	d5fb      	bpl.n	8009d8e <_printf_i+0x1be>
 8009d96:	8019      	strh	r1, [r3, #0]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	4616      	mov	r6, r2
 8009d9c:	6123      	str	r3, [r4, #16]
 8009d9e:	e7bc      	b.n	8009d1a <_printf_i+0x14a>
 8009da0:	6833      	ldr	r3, [r6, #0]
 8009da2:	2100      	movs	r1, #0
 8009da4:	1d1a      	adds	r2, r3, #4
 8009da6:	6032      	str	r2, [r6, #0]
 8009da8:	681e      	ldr	r6, [r3, #0]
 8009daa:	6862      	ldr	r2, [r4, #4]
 8009dac:	4630      	mov	r0, r6
 8009dae:	f000 f9d4 	bl	800a15a <memchr>
 8009db2:	b108      	cbz	r0, 8009db8 <_printf_i+0x1e8>
 8009db4:	1b80      	subs	r0, r0, r6
 8009db6:	6060      	str	r0, [r4, #4]
 8009db8:	6863      	ldr	r3, [r4, #4]
 8009dba:	6123      	str	r3, [r4, #16]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dc2:	e7aa      	b.n	8009d1a <_printf_i+0x14a>
 8009dc4:	4632      	mov	r2, r6
 8009dc6:	4649      	mov	r1, r9
 8009dc8:	4640      	mov	r0, r8
 8009dca:	6923      	ldr	r3, [r4, #16]
 8009dcc:	47d0      	blx	sl
 8009dce:	3001      	adds	r0, #1
 8009dd0:	d0ad      	beq.n	8009d2e <_printf_i+0x15e>
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	079b      	lsls	r3, r3, #30
 8009dd6:	d413      	bmi.n	8009e00 <_printf_i+0x230>
 8009dd8:	68e0      	ldr	r0, [r4, #12]
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	4298      	cmp	r0, r3
 8009dde:	bfb8      	it	lt
 8009de0:	4618      	movlt	r0, r3
 8009de2:	e7a6      	b.n	8009d32 <_printf_i+0x162>
 8009de4:	2301      	movs	r3, #1
 8009de6:	4632      	mov	r2, r6
 8009de8:	4649      	mov	r1, r9
 8009dea:	4640      	mov	r0, r8
 8009dec:	47d0      	blx	sl
 8009dee:	3001      	adds	r0, #1
 8009df0:	d09d      	beq.n	8009d2e <_printf_i+0x15e>
 8009df2:	3501      	adds	r5, #1
 8009df4:	68e3      	ldr	r3, [r4, #12]
 8009df6:	9903      	ldr	r1, [sp, #12]
 8009df8:	1a5b      	subs	r3, r3, r1
 8009dfa:	42ab      	cmp	r3, r5
 8009dfc:	dcf2      	bgt.n	8009de4 <_printf_i+0x214>
 8009dfe:	e7eb      	b.n	8009dd8 <_printf_i+0x208>
 8009e00:	2500      	movs	r5, #0
 8009e02:	f104 0619 	add.w	r6, r4, #25
 8009e06:	e7f5      	b.n	8009df4 <_printf_i+0x224>
 8009e08:	0800f1f4 	.word	0x0800f1f4
 8009e0c:	0800f205 	.word	0x0800f205

08009e10 <std>:
 8009e10:	2300      	movs	r3, #0
 8009e12:	b510      	push	{r4, lr}
 8009e14:	4604      	mov	r4, r0
 8009e16:	e9c0 3300 	strd	r3, r3, [r0]
 8009e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e1e:	6083      	str	r3, [r0, #8]
 8009e20:	8181      	strh	r1, [r0, #12]
 8009e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e24:	81c2      	strh	r2, [r0, #14]
 8009e26:	6183      	str	r3, [r0, #24]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	2208      	movs	r2, #8
 8009e2c:	305c      	adds	r0, #92	@ 0x5c
 8009e2e:	f000 f914 	bl	800a05a <memset>
 8009e32:	4b0d      	ldr	r3, [pc, #52]	@ (8009e68 <std+0x58>)
 8009e34:	6224      	str	r4, [r4, #32]
 8009e36:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e38:	4b0c      	ldr	r3, [pc, #48]	@ (8009e6c <std+0x5c>)
 8009e3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e70 <std+0x60>)
 8009e3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e40:	4b0c      	ldr	r3, [pc, #48]	@ (8009e74 <std+0x64>)
 8009e42:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e44:	4b0c      	ldr	r3, [pc, #48]	@ (8009e78 <std+0x68>)
 8009e46:	429c      	cmp	r4, r3
 8009e48:	d006      	beq.n	8009e58 <std+0x48>
 8009e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e4e:	4294      	cmp	r4, r2
 8009e50:	d002      	beq.n	8009e58 <std+0x48>
 8009e52:	33d0      	adds	r3, #208	@ 0xd0
 8009e54:	429c      	cmp	r4, r3
 8009e56:	d105      	bne.n	8009e64 <std+0x54>
 8009e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e60:	f000 b978 	b.w	800a154 <__retarget_lock_init_recursive>
 8009e64:	bd10      	pop	{r4, pc}
 8009e66:	bf00      	nop
 8009e68:	08009fd5 	.word	0x08009fd5
 8009e6c:	08009ff7 	.word	0x08009ff7
 8009e70:	0800a02f 	.word	0x0800a02f
 8009e74:	0800a053 	.word	0x0800a053
 8009e78:	20000284 	.word	0x20000284

08009e7c <stdio_exit_handler>:
 8009e7c:	4a02      	ldr	r2, [pc, #8]	@ (8009e88 <stdio_exit_handler+0xc>)
 8009e7e:	4903      	ldr	r1, [pc, #12]	@ (8009e8c <stdio_exit_handler+0x10>)
 8009e80:	4803      	ldr	r0, [pc, #12]	@ (8009e90 <stdio_exit_handler+0x14>)
 8009e82:	f000 b869 	b.w	8009f58 <_fwalk_sglue>
 8009e86:	bf00      	nop
 8009e88:	20000010 	.word	0x20000010
 8009e8c:	0800bac5 	.word	0x0800bac5
 8009e90:	20000020 	.word	0x20000020

08009e94 <cleanup_stdio>:
 8009e94:	6841      	ldr	r1, [r0, #4]
 8009e96:	4b0c      	ldr	r3, [pc, #48]	@ (8009ec8 <cleanup_stdio+0x34>)
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	4299      	cmp	r1, r3
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	d001      	beq.n	8009ea4 <cleanup_stdio+0x10>
 8009ea0:	f001 fe10 	bl	800bac4 <_fflush_r>
 8009ea4:	68a1      	ldr	r1, [r4, #8]
 8009ea6:	4b09      	ldr	r3, [pc, #36]	@ (8009ecc <cleanup_stdio+0x38>)
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	d002      	beq.n	8009eb2 <cleanup_stdio+0x1e>
 8009eac:	4620      	mov	r0, r4
 8009eae:	f001 fe09 	bl	800bac4 <_fflush_r>
 8009eb2:	68e1      	ldr	r1, [r4, #12]
 8009eb4:	4b06      	ldr	r3, [pc, #24]	@ (8009ed0 <cleanup_stdio+0x3c>)
 8009eb6:	4299      	cmp	r1, r3
 8009eb8:	d004      	beq.n	8009ec4 <cleanup_stdio+0x30>
 8009eba:	4620      	mov	r0, r4
 8009ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ec0:	f001 be00 	b.w	800bac4 <_fflush_r>
 8009ec4:	bd10      	pop	{r4, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20000284 	.word	0x20000284
 8009ecc:	200002ec 	.word	0x200002ec
 8009ed0:	20000354 	.word	0x20000354

08009ed4 <global_stdio_init.part.0>:
 8009ed4:	b510      	push	{r4, lr}
 8009ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8009f04 <global_stdio_init.part.0+0x30>)
 8009ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8009f08 <global_stdio_init.part.0+0x34>)
 8009eda:	4a0c      	ldr	r2, [pc, #48]	@ (8009f0c <global_stdio_init.part.0+0x38>)
 8009edc:	4620      	mov	r0, r4
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	2104      	movs	r1, #4
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f7ff ff94 	bl	8009e10 <std>
 8009ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009eec:	2201      	movs	r2, #1
 8009eee:	2109      	movs	r1, #9
 8009ef0:	f7ff ff8e 	bl	8009e10 <std>
 8009ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ef8:	2202      	movs	r2, #2
 8009efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009efe:	2112      	movs	r1, #18
 8009f00:	f7ff bf86 	b.w	8009e10 <std>
 8009f04:	200003bc 	.word	0x200003bc
 8009f08:	20000284 	.word	0x20000284
 8009f0c:	08009e7d 	.word	0x08009e7d

08009f10 <__sfp_lock_acquire>:
 8009f10:	4801      	ldr	r0, [pc, #4]	@ (8009f18 <__sfp_lock_acquire+0x8>)
 8009f12:	f000 b920 	b.w	800a156 <__retarget_lock_acquire_recursive>
 8009f16:	bf00      	nop
 8009f18:	200003c5 	.word	0x200003c5

08009f1c <__sfp_lock_release>:
 8009f1c:	4801      	ldr	r0, [pc, #4]	@ (8009f24 <__sfp_lock_release+0x8>)
 8009f1e:	f000 b91b 	b.w	800a158 <__retarget_lock_release_recursive>
 8009f22:	bf00      	nop
 8009f24:	200003c5 	.word	0x200003c5

08009f28 <__sinit>:
 8009f28:	b510      	push	{r4, lr}
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	f7ff fff0 	bl	8009f10 <__sfp_lock_acquire>
 8009f30:	6a23      	ldr	r3, [r4, #32]
 8009f32:	b11b      	cbz	r3, 8009f3c <__sinit+0x14>
 8009f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f38:	f7ff bff0 	b.w	8009f1c <__sfp_lock_release>
 8009f3c:	4b04      	ldr	r3, [pc, #16]	@ (8009f50 <__sinit+0x28>)
 8009f3e:	6223      	str	r3, [r4, #32]
 8009f40:	4b04      	ldr	r3, [pc, #16]	@ (8009f54 <__sinit+0x2c>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1f5      	bne.n	8009f34 <__sinit+0xc>
 8009f48:	f7ff ffc4 	bl	8009ed4 <global_stdio_init.part.0>
 8009f4c:	e7f2      	b.n	8009f34 <__sinit+0xc>
 8009f4e:	bf00      	nop
 8009f50:	08009e95 	.word	0x08009e95
 8009f54:	200003bc 	.word	0x200003bc

08009f58 <_fwalk_sglue>:
 8009f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	4688      	mov	r8, r1
 8009f60:	4614      	mov	r4, r2
 8009f62:	2600      	movs	r6, #0
 8009f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f68:	f1b9 0901 	subs.w	r9, r9, #1
 8009f6c:	d505      	bpl.n	8009f7a <_fwalk_sglue+0x22>
 8009f6e:	6824      	ldr	r4, [r4, #0]
 8009f70:	2c00      	cmp	r4, #0
 8009f72:	d1f7      	bne.n	8009f64 <_fwalk_sglue+0xc>
 8009f74:	4630      	mov	r0, r6
 8009f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7a:	89ab      	ldrh	r3, [r5, #12]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d907      	bls.n	8009f90 <_fwalk_sglue+0x38>
 8009f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f84:	3301      	adds	r3, #1
 8009f86:	d003      	beq.n	8009f90 <_fwalk_sglue+0x38>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	47c0      	blx	r8
 8009f8e:	4306      	orrs	r6, r0
 8009f90:	3568      	adds	r5, #104	@ 0x68
 8009f92:	e7e9      	b.n	8009f68 <_fwalk_sglue+0x10>

08009f94 <siprintf>:
 8009f94:	b40e      	push	{r1, r2, r3}
 8009f96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f9a:	b500      	push	{lr}
 8009f9c:	b09c      	sub	sp, #112	@ 0x70
 8009f9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009fa0:	9002      	str	r0, [sp, #8]
 8009fa2:	9006      	str	r0, [sp, #24]
 8009fa4:	9107      	str	r1, [sp, #28]
 8009fa6:	9104      	str	r1, [sp, #16]
 8009fa8:	4808      	ldr	r0, [pc, #32]	@ (8009fcc <siprintf+0x38>)
 8009faa:	4909      	ldr	r1, [pc, #36]	@ (8009fd0 <siprintf+0x3c>)
 8009fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb0:	9105      	str	r1, [sp, #20]
 8009fb2:	6800      	ldr	r0, [r0, #0]
 8009fb4:	a902      	add	r1, sp, #8
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	f001 fc08 	bl	800b7cc <_svfiprintf_r>
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	9b02      	ldr	r3, [sp, #8]
 8009fc0:	701a      	strb	r2, [r3, #0]
 8009fc2:	b01c      	add	sp, #112	@ 0x70
 8009fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fc8:	b003      	add	sp, #12
 8009fca:	4770      	bx	lr
 8009fcc:	2000001c 	.word	0x2000001c
 8009fd0:	ffff0208 	.word	0xffff0208

08009fd4 <__sread>:
 8009fd4:	b510      	push	{r4, lr}
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fdc:	f000 f86c 	bl	800a0b8 <_read_r>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	bfab      	itete	ge
 8009fe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8009fe8:	181b      	addge	r3, r3, r0
 8009fea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009fee:	bfac      	ite	ge
 8009ff0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009ff2:	81a3      	strhlt	r3, [r4, #12]
 8009ff4:	bd10      	pop	{r4, pc}

08009ff6 <__swrite>:
 8009ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ffa:	461f      	mov	r7, r3
 8009ffc:	898b      	ldrh	r3, [r1, #12]
 8009ffe:	4605      	mov	r5, r0
 800a000:	05db      	lsls	r3, r3, #23
 800a002:	460c      	mov	r4, r1
 800a004:	4616      	mov	r6, r2
 800a006:	d505      	bpl.n	800a014 <__swrite+0x1e>
 800a008:	2302      	movs	r3, #2
 800a00a:	2200      	movs	r2, #0
 800a00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a010:	f000 f840 	bl	800a094 <_lseek_r>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	4632      	mov	r2, r6
 800a018:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a01c:	81a3      	strh	r3, [r4, #12]
 800a01e:	4628      	mov	r0, r5
 800a020:	463b      	mov	r3, r7
 800a022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a02a:	f000 b857 	b.w	800a0dc <_write_r>

0800a02e <__sseek>:
 800a02e:	b510      	push	{r4, lr}
 800a030:	460c      	mov	r4, r1
 800a032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a036:	f000 f82d 	bl	800a094 <_lseek_r>
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	bf15      	itete	ne
 800a040:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a042:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a046:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a04a:	81a3      	strheq	r3, [r4, #12]
 800a04c:	bf18      	it	ne
 800a04e:	81a3      	strhne	r3, [r4, #12]
 800a050:	bd10      	pop	{r4, pc}

0800a052 <__sclose>:
 800a052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a056:	f000 b80d 	b.w	800a074 <_close_r>

0800a05a <memset>:
 800a05a:	4603      	mov	r3, r0
 800a05c:	4402      	add	r2, r0
 800a05e:	4293      	cmp	r3, r2
 800a060:	d100      	bne.n	800a064 <memset+0xa>
 800a062:	4770      	bx	lr
 800a064:	f803 1b01 	strb.w	r1, [r3], #1
 800a068:	e7f9      	b.n	800a05e <memset+0x4>
	...

0800a06c <_localeconv_r>:
 800a06c:	4800      	ldr	r0, [pc, #0]	@ (800a070 <_localeconv_r+0x4>)
 800a06e:	4770      	bx	lr
 800a070:	2000015c 	.word	0x2000015c

0800a074 <_close_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	2300      	movs	r3, #0
 800a078:	4d05      	ldr	r5, [pc, #20]	@ (800a090 <_close_r+0x1c>)
 800a07a:	4604      	mov	r4, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	602b      	str	r3, [r5, #0]
 800a080:	f7fd fad9 	bl	8007636 <_close>
 800a084:	1c43      	adds	r3, r0, #1
 800a086:	d102      	bne.n	800a08e <_close_r+0x1a>
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	b103      	cbz	r3, 800a08e <_close_r+0x1a>
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	bd38      	pop	{r3, r4, r5, pc}
 800a090:	200003c0 	.word	0x200003c0

0800a094 <_lseek_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4604      	mov	r4, r0
 800a098:	4608      	mov	r0, r1
 800a09a:	4611      	mov	r1, r2
 800a09c:	2200      	movs	r2, #0
 800a09e:	4d05      	ldr	r5, [pc, #20]	@ (800a0b4 <_lseek_r+0x20>)
 800a0a0:	602a      	str	r2, [r5, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f7fd faeb 	bl	800767e <_lseek>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d102      	bne.n	800a0b2 <_lseek_r+0x1e>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b103      	cbz	r3, 800a0b2 <_lseek_r+0x1e>
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	200003c0 	.word	0x200003c0

0800a0b8 <_read_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	4608      	mov	r0, r1
 800a0be:	4611      	mov	r1, r2
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	4d05      	ldr	r5, [pc, #20]	@ (800a0d8 <_read_r+0x20>)
 800a0c4:	602a      	str	r2, [r5, #0]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	f7fd fa7c 	bl	80075c4 <_read>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	d102      	bne.n	800a0d6 <_read_r+0x1e>
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	b103      	cbz	r3, 800a0d6 <_read_r+0x1e>
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	bd38      	pop	{r3, r4, r5, pc}
 800a0d8:	200003c0 	.word	0x200003c0

0800a0dc <_write_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4604      	mov	r4, r0
 800a0e0:	4608      	mov	r0, r1
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	4d05      	ldr	r5, [pc, #20]	@ (800a0fc <_write_r+0x20>)
 800a0e8:	602a      	str	r2, [r5, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f7fd fa87 	bl	80075fe <_write>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_write_r+0x1e>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_write_r+0x1e>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	200003c0 	.word	0x200003c0

0800a100 <__errno>:
 800a100:	4b01      	ldr	r3, [pc, #4]	@ (800a108 <__errno+0x8>)
 800a102:	6818      	ldr	r0, [r3, #0]
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	2000001c 	.word	0x2000001c

0800a10c <__libc_init_array>:
 800a10c:	b570      	push	{r4, r5, r6, lr}
 800a10e:	2600      	movs	r6, #0
 800a110:	4d0c      	ldr	r5, [pc, #48]	@ (800a144 <__libc_init_array+0x38>)
 800a112:	4c0d      	ldr	r4, [pc, #52]	@ (800a148 <__libc_init_array+0x3c>)
 800a114:	1b64      	subs	r4, r4, r5
 800a116:	10a4      	asrs	r4, r4, #2
 800a118:	42a6      	cmp	r6, r4
 800a11a:	d109      	bne.n	800a130 <__libc_init_array+0x24>
 800a11c:	f002 f86e 	bl	800c1fc <_init>
 800a120:	2600      	movs	r6, #0
 800a122:	4d0a      	ldr	r5, [pc, #40]	@ (800a14c <__libc_init_array+0x40>)
 800a124:	4c0a      	ldr	r4, [pc, #40]	@ (800a150 <__libc_init_array+0x44>)
 800a126:	1b64      	subs	r4, r4, r5
 800a128:	10a4      	asrs	r4, r4, #2
 800a12a:	42a6      	cmp	r6, r4
 800a12c:	d105      	bne.n	800a13a <__libc_init_array+0x2e>
 800a12e:	bd70      	pop	{r4, r5, r6, pc}
 800a130:	f855 3b04 	ldr.w	r3, [r5], #4
 800a134:	4798      	blx	r3
 800a136:	3601      	adds	r6, #1
 800a138:	e7ee      	b.n	800a118 <__libc_init_array+0xc>
 800a13a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13e:	4798      	blx	r3
 800a140:	3601      	adds	r6, #1
 800a142:	e7f2      	b.n	800a12a <__libc_init_array+0x1e>
 800a144:	0800f558 	.word	0x0800f558
 800a148:	0800f558 	.word	0x0800f558
 800a14c:	0800f558 	.word	0x0800f558
 800a150:	0800f55c 	.word	0x0800f55c

0800a154 <__retarget_lock_init_recursive>:
 800a154:	4770      	bx	lr

0800a156 <__retarget_lock_acquire_recursive>:
 800a156:	4770      	bx	lr

0800a158 <__retarget_lock_release_recursive>:
 800a158:	4770      	bx	lr

0800a15a <memchr>:
 800a15a:	4603      	mov	r3, r0
 800a15c:	b510      	push	{r4, lr}
 800a15e:	b2c9      	uxtb	r1, r1
 800a160:	4402      	add	r2, r0
 800a162:	4293      	cmp	r3, r2
 800a164:	4618      	mov	r0, r3
 800a166:	d101      	bne.n	800a16c <memchr+0x12>
 800a168:	2000      	movs	r0, #0
 800a16a:	e003      	b.n	800a174 <memchr+0x1a>
 800a16c:	7804      	ldrb	r4, [r0, #0]
 800a16e:	3301      	adds	r3, #1
 800a170:	428c      	cmp	r4, r1
 800a172:	d1f6      	bne.n	800a162 <memchr+0x8>
 800a174:	bd10      	pop	{r4, pc}

0800a176 <quorem>:
 800a176:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17a:	6903      	ldr	r3, [r0, #16]
 800a17c:	690c      	ldr	r4, [r1, #16]
 800a17e:	4607      	mov	r7, r0
 800a180:	42a3      	cmp	r3, r4
 800a182:	db7e      	blt.n	800a282 <quorem+0x10c>
 800a184:	3c01      	subs	r4, #1
 800a186:	00a3      	lsls	r3, r4, #2
 800a188:	f100 0514 	add.w	r5, r0, #20
 800a18c:	f101 0814 	add.w	r8, r1, #20
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a19c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1ac:	d32e      	bcc.n	800a20c <quorem+0x96>
 800a1ae:	f04f 0a00 	mov.w	sl, #0
 800a1b2:	46c4      	mov	ip, r8
 800a1b4:	46ae      	mov	lr, r5
 800a1b6:	46d3      	mov	fp, sl
 800a1b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1bc:	b298      	uxth	r0, r3
 800a1be:	fb06 a000 	mla	r0, r6, r0, sl
 800a1c2:	0c1b      	lsrs	r3, r3, #16
 800a1c4:	0c02      	lsrs	r2, r0, #16
 800a1c6:	fb06 2303 	mla	r3, r6, r3, r2
 800a1ca:	f8de 2000 	ldr.w	r2, [lr]
 800a1ce:	b280      	uxth	r0, r0
 800a1d0:	b292      	uxth	r2, r2
 800a1d2:	1a12      	subs	r2, r2, r0
 800a1d4:	445a      	add	r2, fp
 800a1d6:	f8de 0000 	ldr.w	r0, [lr]
 800a1da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a1e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a1e8:	b292      	uxth	r2, r2
 800a1ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1ee:	45e1      	cmp	r9, ip
 800a1f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a1f4:	f84e 2b04 	str.w	r2, [lr], #4
 800a1f8:	d2de      	bcs.n	800a1b8 <quorem+0x42>
 800a1fa:	9b00      	ldr	r3, [sp, #0]
 800a1fc:	58eb      	ldr	r3, [r5, r3]
 800a1fe:	b92b      	cbnz	r3, 800a20c <quorem+0x96>
 800a200:	9b01      	ldr	r3, [sp, #4]
 800a202:	3b04      	subs	r3, #4
 800a204:	429d      	cmp	r5, r3
 800a206:	461a      	mov	r2, r3
 800a208:	d32f      	bcc.n	800a26a <quorem+0xf4>
 800a20a:	613c      	str	r4, [r7, #16]
 800a20c:	4638      	mov	r0, r7
 800a20e:	f001 f979 	bl	800b504 <__mcmp>
 800a212:	2800      	cmp	r0, #0
 800a214:	db25      	blt.n	800a262 <quorem+0xec>
 800a216:	4629      	mov	r1, r5
 800a218:	2000      	movs	r0, #0
 800a21a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a21e:	f8d1 c000 	ldr.w	ip, [r1]
 800a222:	fa1f fe82 	uxth.w	lr, r2
 800a226:	fa1f f38c 	uxth.w	r3, ip
 800a22a:	eba3 030e 	sub.w	r3, r3, lr
 800a22e:	4403      	add	r3, r0
 800a230:	0c12      	lsrs	r2, r2, #16
 800a232:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a236:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a240:	45c1      	cmp	r9, r8
 800a242:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a246:	f841 3b04 	str.w	r3, [r1], #4
 800a24a:	d2e6      	bcs.n	800a21a <quorem+0xa4>
 800a24c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a254:	b922      	cbnz	r2, 800a260 <quorem+0xea>
 800a256:	3b04      	subs	r3, #4
 800a258:	429d      	cmp	r5, r3
 800a25a:	461a      	mov	r2, r3
 800a25c:	d30b      	bcc.n	800a276 <quorem+0x100>
 800a25e:	613c      	str	r4, [r7, #16]
 800a260:	3601      	adds	r6, #1
 800a262:	4630      	mov	r0, r6
 800a264:	b003      	add	sp, #12
 800a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26a:	6812      	ldr	r2, [r2, #0]
 800a26c:	3b04      	subs	r3, #4
 800a26e:	2a00      	cmp	r2, #0
 800a270:	d1cb      	bne.n	800a20a <quorem+0x94>
 800a272:	3c01      	subs	r4, #1
 800a274:	e7c6      	b.n	800a204 <quorem+0x8e>
 800a276:	6812      	ldr	r2, [r2, #0]
 800a278:	3b04      	subs	r3, #4
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	d1ef      	bne.n	800a25e <quorem+0xe8>
 800a27e:	3c01      	subs	r4, #1
 800a280:	e7ea      	b.n	800a258 <quorem+0xe2>
 800a282:	2000      	movs	r0, #0
 800a284:	e7ee      	b.n	800a264 <quorem+0xee>
	...

0800a288 <_dtoa_r>:
 800a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28c:	4614      	mov	r4, r2
 800a28e:	461d      	mov	r5, r3
 800a290:	69c7      	ldr	r7, [r0, #28]
 800a292:	b097      	sub	sp, #92	@ 0x5c
 800a294:	4683      	mov	fp, r0
 800a296:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a29a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a29c:	b97f      	cbnz	r7, 800a2be <_dtoa_r+0x36>
 800a29e:	2010      	movs	r0, #16
 800a2a0:	f000 fe02 	bl	800aea8 <malloc>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	f8cb 001c 	str.w	r0, [fp, #28]
 800a2aa:	b920      	cbnz	r0, 800a2b6 <_dtoa_r+0x2e>
 800a2ac:	21ef      	movs	r1, #239	@ 0xef
 800a2ae:	4ba8      	ldr	r3, [pc, #672]	@ (800a550 <_dtoa_r+0x2c8>)
 800a2b0:	48a8      	ldr	r0, [pc, #672]	@ (800a554 <_dtoa_r+0x2cc>)
 800a2b2:	f001 fc67 	bl	800bb84 <__assert_func>
 800a2b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a2ba:	6007      	str	r7, [r0, #0]
 800a2bc:	60c7      	str	r7, [r0, #12]
 800a2be:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2c2:	6819      	ldr	r1, [r3, #0]
 800a2c4:	b159      	cbz	r1, 800a2de <_dtoa_r+0x56>
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	4093      	lsls	r3, r2
 800a2cc:	604a      	str	r2, [r1, #4]
 800a2ce:	608b      	str	r3, [r1, #8]
 800a2d0:	4658      	mov	r0, fp
 800a2d2:	f000 fedf 	bl	800b094 <_Bfree>
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	1e2b      	subs	r3, r5, #0
 800a2e0:	bfaf      	iteee	ge
 800a2e2:	2300      	movge	r3, #0
 800a2e4:	2201      	movlt	r2, #1
 800a2e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a2ea:	9303      	strlt	r3, [sp, #12]
 800a2ec:	bfa8      	it	ge
 800a2ee:	6033      	strge	r3, [r6, #0]
 800a2f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a2f4:	4b98      	ldr	r3, [pc, #608]	@ (800a558 <_dtoa_r+0x2d0>)
 800a2f6:	bfb8      	it	lt
 800a2f8:	6032      	strlt	r2, [r6, #0]
 800a2fa:	ea33 0308 	bics.w	r3, r3, r8
 800a2fe:	d112      	bne.n	800a326 <_dtoa_r+0x9e>
 800a300:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a304:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a30c:	4323      	orrs	r3, r4
 800a30e:	f000 8550 	beq.w	800adb2 <_dtoa_r+0xb2a>
 800a312:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a314:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800a55c <_dtoa_r+0x2d4>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 8552 	beq.w	800adc2 <_dtoa_r+0xb3a>
 800a31e:	f10a 0303 	add.w	r3, sl, #3
 800a322:	f000 bd4c 	b.w	800adbe <_dtoa_r+0xb36>
 800a326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a32a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a32e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a332:	2200      	movs	r2, #0
 800a334:	2300      	movs	r3, #0
 800a336:	f7f6 fba3 	bl	8000a80 <__aeabi_dcmpeq>
 800a33a:	4607      	mov	r7, r0
 800a33c:	b158      	cbz	r0, 800a356 <_dtoa_r+0xce>
 800a33e:	2301      	movs	r3, #1
 800a340:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a346:	b113      	cbz	r3, 800a34e <_dtoa_r+0xc6>
 800a348:	4b85      	ldr	r3, [pc, #532]	@ (800a560 <_dtoa_r+0x2d8>)
 800a34a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a34c:	6013      	str	r3, [r2, #0]
 800a34e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a564 <_dtoa_r+0x2dc>
 800a352:	f000 bd36 	b.w	800adc2 <_dtoa_r+0xb3a>
 800a356:	ab14      	add	r3, sp, #80	@ 0x50
 800a358:	9301      	str	r3, [sp, #4]
 800a35a:	ab15      	add	r3, sp, #84	@ 0x54
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	4658      	mov	r0, fp
 800a360:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a364:	f001 f97e 	bl	800b664 <__d2b>
 800a368:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a36c:	4681      	mov	r9, r0
 800a36e:	2e00      	cmp	r6, #0
 800a370:	d077      	beq.n	800a462 <_dtoa_r+0x1da>
 800a372:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a378:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a37c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a380:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a384:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a388:	9712      	str	r7, [sp, #72]	@ 0x48
 800a38a:	4619      	mov	r1, r3
 800a38c:	2200      	movs	r2, #0
 800a38e:	4b76      	ldr	r3, [pc, #472]	@ (800a568 <_dtoa_r+0x2e0>)
 800a390:	f7f5 ff56 	bl	8000240 <__aeabi_dsub>
 800a394:	a368      	add	r3, pc, #416	@ (adr r3, 800a538 <_dtoa_r+0x2b0>)
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	f7f6 f909 	bl	80005b0 <__aeabi_dmul>
 800a39e:	a368      	add	r3, pc, #416	@ (adr r3, 800a540 <_dtoa_r+0x2b8>)
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	f7f5 ff4e 	bl	8000244 <__adddf3>
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	460d      	mov	r5, r1
 800a3ae:	f7f6 f895 	bl	80004dc <__aeabi_i2d>
 800a3b2:	a365      	add	r3, pc, #404	@ (adr r3, 800a548 <_dtoa_r+0x2c0>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	f7f6 f8fa 	bl	80005b0 <__aeabi_dmul>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	f7f5 ff3e 	bl	8000244 <__adddf3>
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	460d      	mov	r5, r1
 800a3cc:	f7f6 fba0 	bl	8000b10 <__aeabi_d2iz>
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4607      	mov	r7, r0
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	4629      	mov	r1, r5
 800a3da:	f7f6 fb5b 	bl	8000a94 <__aeabi_dcmplt>
 800a3de:	b140      	cbz	r0, 800a3f2 <_dtoa_r+0x16a>
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	f7f6 f87b 	bl	80004dc <__aeabi_i2d>
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	462b      	mov	r3, r5
 800a3ea:	f7f6 fb49 	bl	8000a80 <__aeabi_dcmpeq>
 800a3ee:	b900      	cbnz	r0, 800a3f2 <_dtoa_r+0x16a>
 800a3f0:	3f01      	subs	r7, #1
 800a3f2:	2f16      	cmp	r7, #22
 800a3f4:	d853      	bhi.n	800a49e <_dtoa_r+0x216>
 800a3f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3fa:	4b5c      	ldr	r3, [pc, #368]	@ (800a56c <_dtoa_r+0x2e4>)
 800a3fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a404:	f7f6 fb46 	bl	8000a94 <__aeabi_dcmplt>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d04a      	beq.n	800a4a2 <_dtoa_r+0x21a>
 800a40c:	2300      	movs	r3, #0
 800a40e:	3f01      	subs	r7, #1
 800a410:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a412:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a414:	1b9b      	subs	r3, r3, r6
 800a416:	1e5a      	subs	r2, r3, #1
 800a418:	bf46      	itte	mi
 800a41a:	f1c3 0801 	rsbmi	r8, r3, #1
 800a41e:	2300      	movmi	r3, #0
 800a420:	f04f 0800 	movpl.w	r8, #0
 800a424:	9209      	str	r2, [sp, #36]	@ 0x24
 800a426:	bf48      	it	mi
 800a428:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a42a:	2f00      	cmp	r7, #0
 800a42c:	db3b      	blt.n	800a4a6 <_dtoa_r+0x21e>
 800a42e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a430:	970e      	str	r7, [sp, #56]	@ 0x38
 800a432:	443b      	add	r3, r7
 800a434:	9309      	str	r3, [sp, #36]	@ 0x24
 800a436:	2300      	movs	r3, #0
 800a438:	930a      	str	r3, [sp, #40]	@ 0x28
 800a43a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a43c:	2b09      	cmp	r3, #9
 800a43e:	d866      	bhi.n	800a50e <_dtoa_r+0x286>
 800a440:	2b05      	cmp	r3, #5
 800a442:	bfc4      	itt	gt
 800a444:	3b04      	subgt	r3, #4
 800a446:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a448:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a44a:	bfc8      	it	gt
 800a44c:	2400      	movgt	r4, #0
 800a44e:	f1a3 0302 	sub.w	r3, r3, #2
 800a452:	bfd8      	it	le
 800a454:	2401      	movle	r4, #1
 800a456:	2b03      	cmp	r3, #3
 800a458:	d864      	bhi.n	800a524 <_dtoa_r+0x29c>
 800a45a:	e8df f003 	tbb	[pc, r3]
 800a45e:	382b      	.short	0x382b
 800a460:	5636      	.short	0x5636
 800a462:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a466:	441e      	add	r6, r3
 800a468:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a46c:	2b20      	cmp	r3, #32
 800a46e:	bfc1      	itttt	gt
 800a470:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a474:	fa08 f803 	lslgt.w	r8, r8, r3
 800a478:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a47c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a480:	bfd6      	itet	le
 800a482:	f1c3 0320 	rsble	r3, r3, #32
 800a486:	ea48 0003 	orrgt.w	r0, r8, r3
 800a48a:	fa04 f003 	lslle.w	r0, r4, r3
 800a48e:	f7f6 f815 	bl	80004bc <__aeabi_ui2d>
 800a492:	2201      	movs	r2, #1
 800a494:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a498:	3e01      	subs	r6, #1
 800a49a:	9212      	str	r2, [sp, #72]	@ 0x48
 800a49c:	e775      	b.n	800a38a <_dtoa_r+0x102>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e7b6      	b.n	800a410 <_dtoa_r+0x188>
 800a4a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a4a4:	e7b5      	b.n	800a412 <_dtoa_r+0x18a>
 800a4a6:	427b      	negs	r3, r7
 800a4a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	eba8 0807 	sub.w	r8, r8, r7
 800a4b0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a4b2:	e7c2      	b.n	800a43a <_dtoa_r+0x1b2>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	dc35      	bgt.n	800a52a <_dtoa_r+0x2a2>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a4c6:	9221      	str	r2, [sp, #132]	@ 0x84
 800a4c8:	e00b      	b.n	800a4e2 <_dtoa_r+0x25a>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e7f3      	b.n	800a4b6 <_dtoa_r+0x22e>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a4d4:	18fb      	adds	r3, r7, r3
 800a4d6:	9308      	str	r3, [sp, #32]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	9307      	str	r3, [sp, #28]
 800a4de:	bfb8      	it	lt
 800a4e0:	2301      	movlt	r3, #1
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	2204      	movs	r2, #4
 800a4e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a4ea:	f102 0514 	add.w	r5, r2, #20
 800a4ee:	429d      	cmp	r5, r3
 800a4f0:	d91f      	bls.n	800a532 <_dtoa_r+0x2aa>
 800a4f2:	6041      	str	r1, [r0, #4]
 800a4f4:	4658      	mov	r0, fp
 800a4f6:	f000 fd8d 	bl	800b014 <_Balloc>
 800a4fa:	4682      	mov	sl, r0
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d139      	bne.n	800a574 <_dtoa_r+0x2ec>
 800a500:	4602      	mov	r2, r0
 800a502:	f240 11af 	movw	r1, #431	@ 0x1af
 800a506:	4b1a      	ldr	r3, [pc, #104]	@ (800a570 <_dtoa_r+0x2e8>)
 800a508:	e6d2      	b.n	800a2b0 <_dtoa_r+0x28>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e7e0      	b.n	800a4d0 <_dtoa_r+0x248>
 800a50e:	2401      	movs	r4, #1
 800a510:	2300      	movs	r3, #0
 800a512:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a514:	9320      	str	r3, [sp, #128]	@ 0x80
 800a516:	f04f 33ff 	mov.w	r3, #4294967295
 800a51a:	2200      	movs	r2, #0
 800a51c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a520:	2312      	movs	r3, #18
 800a522:	e7d0      	b.n	800a4c6 <_dtoa_r+0x23e>
 800a524:	2301      	movs	r3, #1
 800a526:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a528:	e7f5      	b.n	800a516 <_dtoa_r+0x28e>
 800a52a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a52c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a530:	e7d7      	b.n	800a4e2 <_dtoa_r+0x25a>
 800a532:	3101      	adds	r1, #1
 800a534:	0052      	lsls	r2, r2, #1
 800a536:	e7d8      	b.n	800a4ea <_dtoa_r+0x262>
 800a538:	636f4361 	.word	0x636f4361
 800a53c:	3fd287a7 	.word	0x3fd287a7
 800a540:	8b60c8b3 	.word	0x8b60c8b3
 800a544:	3fc68a28 	.word	0x3fc68a28
 800a548:	509f79fb 	.word	0x509f79fb
 800a54c:	3fd34413 	.word	0x3fd34413
 800a550:	0800f223 	.word	0x0800f223
 800a554:	0800f23a 	.word	0x0800f23a
 800a558:	7ff00000 	.word	0x7ff00000
 800a55c:	0800f21f 	.word	0x0800f21f
 800a560:	0800f1f3 	.word	0x0800f1f3
 800a564:	0800f1f2 	.word	0x0800f1f2
 800a568:	3ff80000 	.word	0x3ff80000
 800a56c:	0800f330 	.word	0x0800f330
 800a570:	0800f292 	.word	0x0800f292
 800a574:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a578:	6018      	str	r0, [r3, #0]
 800a57a:	9b07      	ldr	r3, [sp, #28]
 800a57c:	2b0e      	cmp	r3, #14
 800a57e:	f200 80a4 	bhi.w	800a6ca <_dtoa_r+0x442>
 800a582:	2c00      	cmp	r4, #0
 800a584:	f000 80a1 	beq.w	800a6ca <_dtoa_r+0x442>
 800a588:	2f00      	cmp	r7, #0
 800a58a:	dd33      	ble.n	800a5f4 <_dtoa_r+0x36c>
 800a58c:	4b86      	ldr	r3, [pc, #536]	@ (800a7a8 <_dtoa_r+0x520>)
 800a58e:	f007 020f 	and.w	r2, r7, #15
 800a592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a596:	05f8      	lsls	r0, r7, #23
 800a598:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a59c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a5a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a5a4:	d516      	bpl.n	800a5d4 <_dtoa_r+0x34c>
 800a5a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5aa:	4b80      	ldr	r3, [pc, #512]	@ (800a7ac <_dtoa_r+0x524>)
 800a5ac:	2603      	movs	r6, #3
 800a5ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5b2:	f7f6 f927 	bl	8000804 <__aeabi_ddiv>
 800a5b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5ba:	f004 040f 	and.w	r4, r4, #15
 800a5be:	4d7b      	ldr	r5, [pc, #492]	@ (800a7ac <_dtoa_r+0x524>)
 800a5c0:	b954      	cbnz	r4, 800a5d8 <_dtoa_r+0x350>
 800a5c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5ca:	f7f6 f91b 	bl	8000804 <__aeabi_ddiv>
 800a5ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5d2:	e028      	b.n	800a626 <_dtoa_r+0x39e>
 800a5d4:	2602      	movs	r6, #2
 800a5d6:	e7f2      	b.n	800a5be <_dtoa_r+0x336>
 800a5d8:	07e1      	lsls	r1, r4, #31
 800a5da:	d508      	bpl.n	800a5ee <_dtoa_r+0x366>
 800a5dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5e4:	f7f5 ffe4 	bl	80005b0 <__aeabi_dmul>
 800a5e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5ec:	3601      	adds	r6, #1
 800a5ee:	1064      	asrs	r4, r4, #1
 800a5f0:	3508      	adds	r5, #8
 800a5f2:	e7e5      	b.n	800a5c0 <_dtoa_r+0x338>
 800a5f4:	f000 80d2 	beq.w	800a79c <_dtoa_r+0x514>
 800a5f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5fc:	427c      	negs	r4, r7
 800a5fe:	4b6a      	ldr	r3, [pc, #424]	@ (800a7a8 <_dtoa_r+0x520>)
 800a600:	f004 020f 	and.w	r2, r4, #15
 800a604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	f7f5 ffd0 	bl	80005b0 <__aeabi_dmul>
 800a610:	2602      	movs	r6, #2
 800a612:	2300      	movs	r3, #0
 800a614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a618:	4d64      	ldr	r5, [pc, #400]	@ (800a7ac <_dtoa_r+0x524>)
 800a61a:	1124      	asrs	r4, r4, #4
 800a61c:	2c00      	cmp	r4, #0
 800a61e:	f040 80b2 	bne.w	800a786 <_dtoa_r+0x4fe>
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1d3      	bne.n	800a5ce <_dtoa_r+0x346>
 800a626:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a62a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 80b7 	beq.w	800a7a0 <_dtoa_r+0x518>
 800a632:	2200      	movs	r2, #0
 800a634:	4620      	mov	r0, r4
 800a636:	4629      	mov	r1, r5
 800a638:	4b5d      	ldr	r3, [pc, #372]	@ (800a7b0 <_dtoa_r+0x528>)
 800a63a:	f7f6 fa2b 	bl	8000a94 <__aeabi_dcmplt>
 800a63e:	2800      	cmp	r0, #0
 800a640:	f000 80ae 	beq.w	800a7a0 <_dtoa_r+0x518>
 800a644:	9b07      	ldr	r3, [sp, #28]
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 80aa 	beq.w	800a7a0 <_dtoa_r+0x518>
 800a64c:	9b08      	ldr	r3, [sp, #32]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	dd37      	ble.n	800a6c2 <_dtoa_r+0x43a>
 800a652:	1e7b      	subs	r3, r7, #1
 800a654:	4620      	mov	r0, r4
 800a656:	9304      	str	r3, [sp, #16]
 800a658:	2200      	movs	r2, #0
 800a65a:	4629      	mov	r1, r5
 800a65c:	4b55      	ldr	r3, [pc, #340]	@ (800a7b4 <_dtoa_r+0x52c>)
 800a65e:	f7f5 ffa7 	bl	80005b0 <__aeabi_dmul>
 800a662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a666:	9c08      	ldr	r4, [sp, #32]
 800a668:	3601      	adds	r6, #1
 800a66a:	4630      	mov	r0, r6
 800a66c:	f7f5 ff36 	bl	80004dc <__aeabi_i2d>
 800a670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a674:	f7f5 ff9c 	bl	80005b0 <__aeabi_dmul>
 800a678:	2200      	movs	r2, #0
 800a67a:	4b4f      	ldr	r3, [pc, #316]	@ (800a7b8 <_dtoa_r+0x530>)
 800a67c:	f7f5 fde2 	bl	8000244 <__adddf3>
 800a680:	4605      	mov	r5, r0
 800a682:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a686:	2c00      	cmp	r4, #0
 800a688:	f040 809a 	bne.w	800a7c0 <_dtoa_r+0x538>
 800a68c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a690:	2200      	movs	r2, #0
 800a692:	4b4a      	ldr	r3, [pc, #296]	@ (800a7bc <_dtoa_r+0x534>)
 800a694:	f7f5 fdd4 	bl	8000240 <__aeabi_dsub>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6a0:	462a      	mov	r2, r5
 800a6a2:	4633      	mov	r3, r6
 800a6a4:	f7f6 fa14 	bl	8000ad0 <__aeabi_dcmpgt>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	f040 828e 	bne.w	800abca <_dtoa_r+0x942>
 800a6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a6b8:	f7f6 f9ec 	bl	8000a94 <__aeabi_dcmplt>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	f040 8127 	bne.w	800a910 <_dtoa_r+0x688>
 800a6c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a6c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a6ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f2c0 8163 	blt.w	800a998 <_dtoa_r+0x710>
 800a6d2:	2f0e      	cmp	r7, #14
 800a6d4:	f300 8160 	bgt.w	800a998 <_dtoa_r+0x710>
 800a6d8:	4b33      	ldr	r3, [pc, #204]	@ (800a7a8 <_dtoa_r+0x520>)
 800a6da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6de:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a6e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	da03      	bge.n	800a6f4 <_dtoa_r+0x46c>
 800a6ec:	9b07      	ldr	r3, [sp, #28]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f340 8100 	ble.w	800a8f4 <_dtoa_r+0x66c>
 800a6f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a6f8:	4656      	mov	r6, sl
 800a6fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6fe:	4620      	mov	r0, r4
 800a700:	4629      	mov	r1, r5
 800a702:	f7f6 f87f 	bl	8000804 <__aeabi_ddiv>
 800a706:	f7f6 fa03 	bl	8000b10 <__aeabi_d2iz>
 800a70a:	4680      	mov	r8, r0
 800a70c:	f7f5 fee6 	bl	80004dc <__aeabi_i2d>
 800a710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a714:	f7f5 ff4c 	bl	80005b0 <__aeabi_dmul>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4620      	mov	r0, r4
 800a71e:	4629      	mov	r1, r5
 800a720:	f7f5 fd8e 	bl	8000240 <__aeabi_dsub>
 800a724:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a728:	9d07      	ldr	r5, [sp, #28]
 800a72a:	f806 4b01 	strb.w	r4, [r6], #1
 800a72e:	eba6 040a 	sub.w	r4, r6, sl
 800a732:	42a5      	cmp	r5, r4
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	f040 8116 	bne.w	800a968 <_dtoa_r+0x6e0>
 800a73c:	f7f5 fd82 	bl	8000244 <__adddf3>
 800a740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a744:	4604      	mov	r4, r0
 800a746:	460d      	mov	r5, r1
 800a748:	f7f6 f9c2 	bl	8000ad0 <__aeabi_dcmpgt>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	f040 80f8 	bne.w	800a942 <_dtoa_r+0x6ba>
 800a752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a756:	4620      	mov	r0, r4
 800a758:	4629      	mov	r1, r5
 800a75a:	f7f6 f991 	bl	8000a80 <__aeabi_dcmpeq>
 800a75e:	b118      	cbz	r0, 800a768 <_dtoa_r+0x4e0>
 800a760:	f018 0f01 	tst.w	r8, #1
 800a764:	f040 80ed 	bne.w	800a942 <_dtoa_r+0x6ba>
 800a768:	4649      	mov	r1, r9
 800a76a:	4658      	mov	r0, fp
 800a76c:	f000 fc92 	bl	800b094 <_Bfree>
 800a770:	2300      	movs	r3, #0
 800a772:	7033      	strb	r3, [r6, #0]
 800a774:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a776:	3701      	adds	r7, #1
 800a778:	601f      	str	r7, [r3, #0]
 800a77a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 8320 	beq.w	800adc2 <_dtoa_r+0xb3a>
 800a782:	601e      	str	r6, [r3, #0]
 800a784:	e31d      	b.n	800adc2 <_dtoa_r+0xb3a>
 800a786:	07e2      	lsls	r2, r4, #31
 800a788:	d505      	bpl.n	800a796 <_dtoa_r+0x50e>
 800a78a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a78e:	f7f5 ff0f 	bl	80005b0 <__aeabi_dmul>
 800a792:	2301      	movs	r3, #1
 800a794:	3601      	adds	r6, #1
 800a796:	1064      	asrs	r4, r4, #1
 800a798:	3508      	adds	r5, #8
 800a79a:	e73f      	b.n	800a61c <_dtoa_r+0x394>
 800a79c:	2602      	movs	r6, #2
 800a79e:	e742      	b.n	800a626 <_dtoa_r+0x39e>
 800a7a0:	9c07      	ldr	r4, [sp, #28]
 800a7a2:	9704      	str	r7, [sp, #16]
 800a7a4:	e761      	b.n	800a66a <_dtoa_r+0x3e2>
 800a7a6:	bf00      	nop
 800a7a8:	0800f330 	.word	0x0800f330
 800a7ac:	0800f308 	.word	0x0800f308
 800a7b0:	3ff00000 	.word	0x3ff00000
 800a7b4:	40240000 	.word	0x40240000
 800a7b8:	401c0000 	.word	0x401c0000
 800a7bc:	40140000 	.word	0x40140000
 800a7c0:	4b70      	ldr	r3, [pc, #448]	@ (800a984 <_dtoa_r+0x6fc>)
 800a7c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7cc:	4454      	add	r4, sl
 800a7ce:	2900      	cmp	r1, #0
 800a7d0:	d045      	beq.n	800a85e <_dtoa_r+0x5d6>
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	496c      	ldr	r1, [pc, #432]	@ (800a988 <_dtoa_r+0x700>)
 800a7d6:	f7f6 f815 	bl	8000804 <__aeabi_ddiv>
 800a7da:	4633      	mov	r3, r6
 800a7dc:	462a      	mov	r2, r5
 800a7de:	f7f5 fd2f 	bl	8000240 <__aeabi_dsub>
 800a7e2:	4656      	mov	r6, sl
 800a7e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a7e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ec:	f7f6 f990 	bl	8000b10 <__aeabi_d2iz>
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	f7f5 fe73 	bl	80004dc <__aeabi_i2d>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7fe:	f7f5 fd1f 	bl	8000240 <__aeabi_dsub>
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	3530      	adds	r5, #48	@ 0x30
 800a808:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a80c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a810:	f806 5b01 	strb.w	r5, [r6], #1
 800a814:	f7f6 f93e 	bl	8000a94 <__aeabi_dcmplt>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d163      	bne.n	800a8e4 <_dtoa_r+0x65c>
 800a81c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a820:	2000      	movs	r0, #0
 800a822:	495a      	ldr	r1, [pc, #360]	@ (800a98c <_dtoa_r+0x704>)
 800a824:	f7f5 fd0c 	bl	8000240 <__aeabi_dsub>
 800a828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a82c:	f7f6 f932 	bl	8000a94 <__aeabi_dcmplt>
 800a830:	2800      	cmp	r0, #0
 800a832:	f040 8087 	bne.w	800a944 <_dtoa_r+0x6bc>
 800a836:	42a6      	cmp	r6, r4
 800a838:	f43f af43 	beq.w	800a6c2 <_dtoa_r+0x43a>
 800a83c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a840:	2200      	movs	r2, #0
 800a842:	4b53      	ldr	r3, [pc, #332]	@ (800a990 <_dtoa_r+0x708>)
 800a844:	f7f5 feb4 	bl	80005b0 <__aeabi_dmul>
 800a848:	2200      	movs	r2, #0
 800a84a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a84e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a852:	4b4f      	ldr	r3, [pc, #316]	@ (800a990 <_dtoa_r+0x708>)
 800a854:	f7f5 feac 	bl	80005b0 <__aeabi_dmul>
 800a858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a85c:	e7c4      	b.n	800a7e8 <_dtoa_r+0x560>
 800a85e:	4631      	mov	r1, r6
 800a860:	4628      	mov	r0, r5
 800a862:	f7f5 fea5 	bl	80005b0 <__aeabi_dmul>
 800a866:	4656      	mov	r6, sl
 800a868:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a86c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a86e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a872:	f7f6 f94d 	bl	8000b10 <__aeabi_d2iz>
 800a876:	4605      	mov	r5, r0
 800a878:	f7f5 fe30 	bl	80004dc <__aeabi_i2d>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a884:	f7f5 fcdc 	bl	8000240 <__aeabi_dsub>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	3530      	adds	r5, #48	@ 0x30
 800a88e:	f806 5b01 	strb.w	r5, [r6], #1
 800a892:	42a6      	cmp	r6, r4
 800a894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a898:	f04f 0200 	mov.w	r2, #0
 800a89c:	d124      	bne.n	800a8e8 <_dtoa_r+0x660>
 800a89e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a8a2:	4b39      	ldr	r3, [pc, #228]	@ (800a988 <_dtoa_r+0x700>)
 800a8a4:	f7f5 fcce 	bl	8000244 <__adddf3>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8b0:	f7f6 f90e 	bl	8000ad0 <__aeabi_dcmpgt>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d145      	bne.n	800a944 <_dtoa_r+0x6bc>
 800a8b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a8bc:	2000      	movs	r0, #0
 800a8be:	4932      	ldr	r1, [pc, #200]	@ (800a988 <_dtoa_r+0x700>)
 800a8c0:	f7f5 fcbe 	bl	8000240 <__aeabi_dsub>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8cc:	f7f6 f8e2 	bl	8000a94 <__aeabi_dcmplt>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	f43f aef6 	beq.w	800a6c2 <_dtoa_r+0x43a>
 800a8d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a8d8:	1e73      	subs	r3, r6, #1
 800a8da:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a8e0:	2b30      	cmp	r3, #48	@ 0x30
 800a8e2:	d0f8      	beq.n	800a8d6 <_dtoa_r+0x64e>
 800a8e4:	9f04      	ldr	r7, [sp, #16]
 800a8e6:	e73f      	b.n	800a768 <_dtoa_r+0x4e0>
 800a8e8:	4b29      	ldr	r3, [pc, #164]	@ (800a990 <_dtoa_r+0x708>)
 800a8ea:	f7f5 fe61 	bl	80005b0 <__aeabi_dmul>
 800a8ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8f2:	e7bc      	b.n	800a86e <_dtoa_r+0x5e6>
 800a8f4:	d10c      	bne.n	800a910 <_dtoa_r+0x688>
 800a8f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	4b25      	ldr	r3, [pc, #148]	@ (800a994 <_dtoa_r+0x70c>)
 800a8fe:	f7f5 fe57 	bl	80005b0 <__aeabi_dmul>
 800a902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a906:	f7f6 f8d9 	bl	8000abc <__aeabi_dcmpge>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	f000 815b 	beq.w	800abc6 <_dtoa_r+0x93e>
 800a910:	2400      	movs	r4, #0
 800a912:	4625      	mov	r5, r4
 800a914:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a916:	4656      	mov	r6, sl
 800a918:	43db      	mvns	r3, r3
 800a91a:	9304      	str	r3, [sp, #16]
 800a91c:	2700      	movs	r7, #0
 800a91e:	4621      	mov	r1, r4
 800a920:	4658      	mov	r0, fp
 800a922:	f000 fbb7 	bl	800b094 <_Bfree>
 800a926:	2d00      	cmp	r5, #0
 800a928:	d0dc      	beq.n	800a8e4 <_dtoa_r+0x65c>
 800a92a:	b12f      	cbz	r7, 800a938 <_dtoa_r+0x6b0>
 800a92c:	42af      	cmp	r7, r5
 800a92e:	d003      	beq.n	800a938 <_dtoa_r+0x6b0>
 800a930:	4639      	mov	r1, r7
 800a932:	4658      	mov	r0, fp
 800a934:	f000 fbae 	bl	800b094 <_Bfree>
 800a938:	4629      	mov	r1, r5
 800a93a:	4658      	mov	r0, fp
 800a93c:	f000 fbaa 	bl	800b094 <_Bfree>
 800a940:	e7d0      	b.n	800a8e4 <_dtoa_r+0x65c>
 800a942:	9704      	str	r7, [sp, #16]
 800a944:	4633      	mov	r3, r6
 800a946:	461e      	mov	r6, r3
 800a948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a94c:	2a39      	cmp	r2, #57	@ 0x39
 800a94e:	d107      	bne.n	800a960 <_dtoa_r+0x6d8>
 800a950:	459a      	cmp	sl, r3
 800a952:	d1f8      	bne.n	800a946 <_dtoa_r+0x6be>
 800a954:	9a04      	ldr	r2, [sp, #16]
 800a956:	3201      	adds	r2, #1
 800a958:	9204      	str	r2, [sp, #16]
 800a95a:	2230      	movs	r2, #48	@ 0x30
 800a95c:	f88a 2000 	strb.w	r2, [sl]
 800a960:	781a      	ldrb	r2, [r3, #0]
 800a962:	3201      	adds	r2, #1
 800a964:	701a      	strb	r2, [r3, #0]
 800a966:	e7bd      	b.n	800a8e4 <_dtoa_r+0x65c>
 800a968:	2200      	movs	r2, #0
 800a96a:	4b09      	ldr	r3, [pc, #36]	@ (800a990 <_dtoa_r+0x708>)
 800a96c:	f7f5 fe20 	bl	80005b0 <__aeabi_dmul>
 800a970:	2200      	movs	r2, #0
 800a972:	2300      	movs	r3, #0
 800a974:	4604      	mov	r4, r0
 800a976:	460d      	mov	r5, r1
 800a978:	f7f6 f882 	bl	8000a80 <__aeabi_dcmpeq>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	f43f aebc 	beq.w	800a6fa <_dtoa_r+0x472>
 800a982:	e6f1      	b.n	800a768 <_dtoa_r+0x4e0>
 800a984:	0800f330 	.word	0x0800f330
 800a988:	3fe00000 	.word	0x3fe00000
 800a98c:	3ff00000 	.word	0x3ff00000
 800a990:	40240000 	.word	0x40240000
 800a994:	40140000 	.word	0x40140000
 800a998:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a99a:	2a00      	cmp	r2, #0
 800a99c:	f000 80db 	beq.w	800ab56 <_dtoa_r+0x8ce>
 800a9a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a9a2:	2a01      	cmp	r2, #1
 800a9a4:	f300 80bf 	bgt.w	800ab26 <_dtoa_r+0x89e>
 800a9a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a9aa:	2a00      	cmp	r2, #0
 800a9ac:	f000 80b7 	beq.w	800ab1e <_dtoa_r+0x896>
 800a9b0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a9b4:	4646      	mov	r6, r8
 800a9b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a9b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	441a      	add	r2, r3
 800a9be:	4658      	mov	r0, fp
 800a9c0:	4498      	add	r8, r3
 800a9c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9c4:	f000 fc1a 	bl	800b1fc <__i2b>
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	b15e      	cbz	r6, 800a9e4 <_dtoa_r+0x75c>
 800a9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	dd08      	ble.n	800a9e4 <_dtoa_r+0x75c>
 800a9d2:	42b3      	cmp	r3, r6
 800a9d4:	bfa8      	it	ge
 800a9d6:	4633      	movge	r3, r6
 800a9d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9da:	eba8 0803 	sub.w	r8, r8, r3
 800a9de:	1af6      	subs	r6, r6, r3
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9e6:	b1f3      	cbz	r3, 800aa26 <_dtoa_r+0x79e>
 800a9e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 80b7 	beq.w	800ab5e <_dtoa_r+0x8d6>
 800a9f0:	b18c      	cbz	r4, 800aa16 <_dtoa_r+0x78e>
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	4622      	mov	r2, r4
 800a9f6:	4658      	mov	r0, fp
 800a9f8:	f000 fcbe 	bl	800b378 <__pow5mult>
 800a9fc:	464a      	mov	r2, r9
 800a9fe:	4601      	mov	r1, r0
 800aa00:	4605      	mov	r5, r0
 800aa02:	4658      	mov	r0, fp
 800aa04:	f000 fc10 	bl	800b228 <__multiply>
 800aa08:	4649      	mov	r1, r9
 800aa0a:	9004      	str	r0, [sp, #16]
 800aa0c:	4658      	mov	r0, fp
 800aa0e:	f000 fb41 	bl	800b094 <_Bfree>
 800aa12:	9b04      	ldr	r3, [sp, #16]
 800aa14:	4699      	mov	r9, r3
 800aa16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa18:	1b1a      	subs	r2, r3, r4
 800aa1a:	d004      	beq.n	800aa26 <_dtoa_r+0x79e>
 800aa1c:	4649      	mov	r1, r9
 800aa1e:	4658      	mov	r0, fp
 800aa20:	f000 fcaa 	bl	800b378 <__pow5mult>
 800aa24:	4681      	mov	r9, r0
 800aa26:	2101      	movs	r1, #1
 800aa28:	4658      	mov	r0, fp
 800aa2a:	f000 fbe7 	bl	800b1fc <__i2b>
 800aa2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa30:	4604      	mov	r4, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 81c9 	beq.w	800adca <_dtoa_r+0xb42>
 800aa38:	461a      	mov	r2, r3
 800aa3a:	4601      	mov	r1, r0
 800aa3c:	4658      	mov	r0, fp
 800aa3e:	f000 fc9b 	bl	800b378 <__pow5mult>
 800aa42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aa44:	4604      	mov	r4, r0
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	f300 808f 	bgt.w	800ab6a <_dtoa_r+0x8e2>
 800aa4c:	9b02      	ldr	r3, [sp, #8]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f040 8087 	bne.w	800ab62 <_dtoa_r+0x8da>
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f040 8083 	bne.w	800ab66 <_dtoa_r+0x8de>
 800aa60:	9b03      	ldr	r3, [sp, #12]
 800aa62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa66:	0d1b      	lsrs	r3, r3, #20
 800aa68:	051b      	lsls	r3, r3, #20
 800aa6a:	b12b      	cbz	r3, 800aa78 <_dtoa_r+0x7f0>
 800aa6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6e:	f108 0801 	add.w	r8, r8, #1
 800aa72:	3301      	adds	r3, #1
 800aa74:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa76:	2301      	movs	r3, #1
 800aa78:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 81aa 	beq.w	800add6 <_dtoa_r+0xb4e>
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa88:	6918      	ldr	r0, [r3, #16]
 800aa8a:	f000 fb6b 	bl	800b164 <__hi0bits>
 800aa8e:	f1c0 0020 	rsb	r0, r0, #32
 800aa92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa94:	4418      	add	r0, r3
 800aa96:	f010 001f 	ands.w	r0, r0, #31
 800aa9a:	d071      	beq.n	800ab80 <_dtoa_r+0x8f8>
 800aa9c:	f1c0 0320 	rsb	r3, r0, #32
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	dd65      	ble.n	800ab70 <_dtoa_r+0x8e8>
 800aaa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaa6:	f1c0 001c 	rsb	r0, r0, #28
 800aaaa:	4403      	add	r3, r0
 800aaac:	4480      	add	r8, r0
 800aaae:	4406      	add	r6, r0
 800aab0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aab2:	f1b8 0f00 	cmp.w	r8, #0
 800aab6:	dd05      	ble.n	800aac4 <_dtoa_r+0x83c>
 800aab8:	4649      	mov	r1, r9
 800aaba:	4642      	mov	r2, r8
 800aabc:	4658      	mov	r0, fp
 800aabe:	f000 fcb5 	bl	800b42c <__lshift>
 800aac2:	4681      	mov	r9, r0
 800aac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	dd05      	ble.n	800aad6 <_dtoa_r+0x84e>
 800aaca:	4621      	mov	r1, r4
 800aacc:	461a      	mov	r2, r3
 800aace:	4658      	mov	r0, fp
 800aad0:	f000 fcac 	bl	800b42c <__lshift>
 800aad4:	4604      	mov	r4, r0
 800aad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d053      	beq.n	800ab84 <_dtoa_r+0x8fc>
 800aadc:	4621      	mov	r1, r4
 800aade:	4648      	mov	r0, r9
 800aae0:	f000 fd10 	bl	800b504 <__mcmp>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	da4d      	bge.n	800ab84 <_dtoa_r+0x8fc>
 800aae8:	1e7b      	subs	r3, r7, #1
 800aaea:	4649      	mov	r1, r9
 800aaec:	9304      	str	r3, [sp, #16]
 800aaee:	220a      	movs	r2, #10
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4658      	mov	r0, fp
 800aaf4:	f000 faf0 	bl	800b0d8 <__multadd>
 800aaf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aafa:	4681      	mov	r9, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 816c 	beq.w	800adda <_dtoa_r+0xb52>
 800ab02:	2300      	movs	r3, #0
 800ab04:	4629      	mov	r1, r5
 800ab06:	220a      	movs	r2, #10
 800ab08:	4658      	mov	r0, fp
 800ab0a:	f000 fae5 	bl	800b0d8 <__multadd>
 800ab0e:	9b08      	ldr	r3, [sp, #32]
 800ab10:	4605      	mov	r5, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	dc61      	bgt.n	800abda <_dtoa_r+0x952>
 800ab16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	dc3b      	bgt.n	800ab94 <_dtoa_r+0x90c>
 800ab1c:	e05d      	b.n	800abda <_dtoa_r+0x952>
 800ab1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab20:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ab24:	e746      	b.n	800a9b4 <_dtoa_r+0x72c>
 800ab26:	9b07      	ldr	r3, [sp, #28]
 800ab28:	1e5c      	subs	r4, r3, #1
 800ab2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab2c:	42a3      	cmp	r3, r4
 800ab2e:	bfbf      	itttt	lt
 800ab30:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ab32:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800ab34:	1ae3      	sublt	r3, r4, r3
 800ab36:	18d2      	addlt	r2, r2, r3
 800ab38:	bfa8      	it	ge
 800ab3a:	1b1c      	subge	r4, r3, r4
 800ab3c:	9b07      	ldr	r3, [sp, #28]
 800ab3e:	bfbe      	ittt	lt
 800ab40:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ab42:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800ab44:	2400      	movlt	r4, #0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	bfb5      	itete	lt
 800ab4a:	eba8 0603 	sublt.w	r6, r8, r3
 800ab4e:	4646      	movge	r6, r8
 800ab50:	2300      	movlt	r3, #0
 800ab52:	9b07      	ldrge	r3, [sp, #28]
 800ab54:	e730      	b.n	800a9b8 <_dtoa_r+0x730>
 800ab56:	4646      	mov	r6, r8
 800ab58:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ab5c:	e735      	b.n	800a9ca <_dtoa_r+0x742>
 800ab5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab60:	e75c      	b.n	800aa1c <_dtoa_r+0x794>
 800ab62:	2300      	movs	r3, #0
 800ab64:	e788      	b.n	800aa78 <_dtoa_r+0x7f0>
 800ab66:	9b02      	ldr	r3, [sp, #8]
 800ab68:	e786      	b.n	800aa78 <_dtoa_r+0x7f0>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab6e:	e788      	b.n	800aa82 <_dtoa_r+0x7fa>
 800ab70:	d09f      	beq.n	800aab2 <_dtoa_r+0x82a>
 800ab72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab74:	331c      	adds	r3, #28
 800ab76:	441a      	add	r2, r3
 800ab78:	4498      	add	r8, r3
 800ab7a:	441e      	add	r6, r3
 800ab7c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab7e:	e798      	b.n	800aab2 <_dtoa_r+0x82a>
 800ab80:	4603      	mov	r3, r0
 800ab82:	e7f6      	b.n	800ab72 <_dtoa_r+0x8ea>
 800ab84:	9b07      	ldr	r3, [sp, #28]
 800ab86:	9704      	str	r7, [sp, #16]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	dc20      	bgt.n	800abce <_dtoa_r+0x946>
 800ab8c:	9308      	str	r3, [sp, #32]
 800ab8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	dd1e      	ble.n	800abd2 <_dtoa_r+0x94a>
 800ab94:	9b08      	ldr	r3, [sp, #32]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f47f aebc 	bne.w	800a914 <_dtoa_r+0x68c>
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	2205      	movs	r2, #5
 800aba0:	4658      	mov	r0, fp
 800aba2:	f000 fa99 	bl	800b0d8 <__multadd>
 800aba6:	4601      	mov	r1, r0
 800aba8:	4604      	mov	r4, r0
 800abaa:	4648      	mov	r0, r9
 800abac:	f000 fcaa 	bl	800b504 <__mcmp>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	f77f aeaf 	ble.w	800a914 <_dtoa_r+0x68c>
 800abb6:	2331      	movs	r3, #49	@ 0x31
 800abb8:	4656      	mov	r6, sl
 800abba:	f806 3b01 	strb.w	r3, [r6], #1
 800abbe:	9b04      	ldr	r3, [sp, #16]
 800abc0:	3301      	adds	r3, #1
 800abc2:	9304      	str	r3, [sp, #16]
 800abc4:	e6aa      	b.n	800a91c <_dtoa_r+0x694>
 800abc6:	9c07      	ldr	r4, [sp, #28]
 800abc8:	9704      	str	r7, [sp, #16]
 800abca:	4625      	mov	r5, r4
 800abcc:	e7f3      	b.n	800abb6 <_dtoa_r+0x92e>
 800abce:	9b07      	ldr	r3, [sp, #28]
 800abd0:	9308      	str	r3, [sp, #32]
 800abd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f000 8104 	beq.w	800ade2 <_dtoa_r+0xb5a>
 800abda:	2e00      	cmp	r6, #0
 800abdc:	dd05      	ble.n	800abea <_dtoa_r+0x962>
 800abde:	4629      	mov	r1, r5
 800abe0:	4632      	mov	r2, r6
 800abe2:	4658      	mov	r0, fp
 800abe4:	f000 fc22 	bl	800b42c <__lshift>
 800abe8:	4605      	mov	r5, r0
 800abea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abec:	2b00      	cmp	r3, #0
 800abee:	d05a      	beq.n	800aca6 <_dtoa_r+0xa1e>
 800abf0:	4658      	mov	r0, fp
 800abf2:	6869      	ldr	r1, [r5, #4]
 800abf4:	f000 fa0e 	bl	800b014 <_Balloc>
 800abf8:	4606      	mov	r6, r0
 800abfa:	b928      	cbnz	r0, 800ac08 <_dtoa_r+0x980>
 800abfc:	4602      	mov	r2, r0
 800abfe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ac02:	4b83      	ldr	r3, [pc, #524]	@ (800ae10 <_dtoa_r+0xb88>)
 800ac04:	f7ff bb54 	b.w	800a2b0 <_dtoa_r+0x28>
 800ac08:	692a      	ldr	r2, [r5, #16]
 800ac0a:	f105 010c 	add.w	r1, r5, #12
 800ac0e:	3202      	adds	r2, #2
 800ac10:	0092      	lsls	r2, r2, #2
 800ac12:	300c      	adds	r0, #12
 800ac14:	f000 ffa8 	bl	800bb68 <memcpy>
 800ac18:	2201      	movs	r2, #1
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	4658      	mov	r0, fp
 800ac1e:	f000 fc05 	bl	800b42c <__lshift>
 800ac22:	462f      	mov	r7, r5
 800ac24:	4605      	mov	r5, r0
 800ac26:	f10a 0301 	add.w	r3, sl, #1
 800ac2a:	9307      	str	r3, [sp, #28]
 800ac2c:	9b08      	ldr	r3, [sp, #32]
 800ac2e:	4453      	add	r3, sl
 800ac30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac32:	9b02      	ldr	r3, [sp, #8]
 800ac34:	f003 0301 	and.w	r3, r3, #1
 800ac38:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac3a:	9b07      	ldr	r3, [sp, #28]
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	4648      	mov	r0, r9
 800ac42:	9302      	str	r3, [sp, #8]
 800ac44:	f7ff fa97 	bl	800a176 <quorem>
 800ac48:	4639      	mov	r1, r7
 800ac4a:	9008      	str	r0, [sp, #32]
 800ac4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac50:	4648      	mov	r0, r9
 800ac52:	f000 fc57 	bl	800b504 <__mcmp>
 800ac56:	462a      	mov	r2, r5
 800ac58:	9009      	str	r0, [sp, #36]	@ 0x24
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	4658      	mov	r0, fp
 800ac5e:	f000 fc6d 	bl	800b53c <__mdiff>
 800ac62:	68c2      	ldr	r2, [r0, #12]
 800ac64:	4606      	mov	r6, r0
 800ac66:	bb02      	cbnz	r2, 800acaa <_dtoa_r+0xa22>
 800ac68:	4601      	mov	r1, r0
 800ac6a:	4648      	mov	r0, r9
 800ac6c:	f000 fc4a 	bl	800b504 <__mcmp>
 800ac70:	4602      	mov	r2, r0
 800ac72:	4631      	mov	r1, r6
 800ac74:	4658      	mov	r0, fp
 800ac76:	920c      	str	r2, [sp, #48]	@ 0x30
 800ac78:	f000 fa0c 	bl	800b094 <_Bfree>
 800ac7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ac7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac80:	9e07      	ldr	r6, [sp, #28]
 800ac82:	ea43 0102 	orr.w	r1, r3, r2
 800ac86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac88:	4319      	orrs	r1, r3
 800ac8a:	d110      	bne.n	800acae <_dtoa_r+0xa26>
 800ac8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac90:	d029      	beq.n	800ace6 <_dtoa_r+0xa5e>
 800ac92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	dd02      	ble.n	800ac9e <_dtoa_r+0xa16>
 800ac98:	9b08      	ldr	r3, [sp, #32]
 800ac9a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ac9e:	9b02      	ldr	r3, [sp, #8]
 800aca0:	f883 8000 	strb.w	r8, [r3]
 800aca4:	e63b      	b.n	800a91e <_dtoa_r+0x696>
 800aca6:	4628      	mov	r0, r5
 800aca8:	e7bb      	b.n	800ac22 <_dtoa_r+0x99a>
 800acaa:	2201      	movs	r2, #1
 800acac:	e7e1      	b.n	800ac72 <_dtoa_r+0x9ea>
 800acae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	db04      	blt.n	800acbe <_dtoa_r+0xa36>
 800acb4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800acb6:	430b      	orrs	r3, r1
 800acb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800acba:	430b      	orrs	r3, r1
 800acbc:	d120      	bne.n	800ad00 <_dtoa_r+0xa78>
 800acbe:	2a00      	cmp	r2, #0
 800acc0:	dded      	ble.n	800ac9e <_dtoa_r+0xa16>
 800acc2:	4649      	mov	r1, r9
 800acc4:	2201      	movs	r2, #1
 800acc6:	4658      	mov	r0, fp
 800acc8:	f000 fbb0 	bl	800b42c <__lshift>
 800accc:	4621      	mov	r1, r4
 800acce:	4681      	mov	r9, r0
 800acd0:	f000 fc18 	bl	800b504 <__mcmp>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	dc03      	bgt.n	800ace0 <_dtoa_r+0xa58>
 800acd8:	d1e1      	bne.n	800ac9e <_dtoa_r+0xa16>
 800acda:	f018 0f01 	tst.w	r8, #1
 800acde:	d0de      	beq.n	800ac9e <_dtoa_r+0xa16>
 800ace0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ace4:	d1d8      	bne.n	800ac98 <_dtoa_r+0xa10>
 800ace6:	2339      	movs	r3, #57	@ 0x39
 800ace8:	9a02      	ldr	r2, [sp, #8]
 800acea:	7013      	strb	r3, [r2, #0]
 800acec:	4633      	mov	r3, r6
 800acee:	461e      	mov	r6, r3
 800acf0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800acf4:	3b01      	subs	r3, #1
 800acf6:	2a39      	cmp	r2, #57	@ 0x39
 800acf8:	d052      	beq.n	800ada0 <_dtoa_r+0xb18>
 800acfa:	3201      	adds	r2, #1
 800acfc:	701a      	strb	r2, [r3, #0]
 800acfe:	e60e      	b.n	800a91e <_dtoa_r+0x696>
 800ad00:	2a00      	cmp	r2, #0
 800ad02:	dd07      	ble.n	800ad14 <_dtoa_r+0xa8c>
 800ad04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad08:	d0ed      	beq.n	800ace6 <_dtoa_r+0xa5e>
 800ad0a:	9a02      	ldr	r2, [sp, #8]
 800ad0c:	f108 0301 	add.w	r3, r8, #1
 800ad10:	7013      	strb	r3, [r2, #0]
 800ad12:	e604      	b.n	800a91e <_dtoa_r+0x696>
 800ad14:	9b07      	ldr	r3, [sp, #28]
 800ad16:	9a07      	ldr	r2, [sp, #28]
 800ad18:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ad1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d028      	beq.n	800ad74 <_dtoa_r+0xaec>
 800ad22:	4649      	mov	r1, r9
 800ad24:	2300      	movs	r3, #0
 800ad26:	220a      	movs	r2, #10
 800ad28:	4658      	mov	r0, fp
 800ad2a:	f000 f9d5 	bl	800b0d8 <__multadd>
 800ad2e:	42af      	cmp	r7, r5
 800ad30:	4681      	mov	r9, r0
 800ad32:	f04f 0300 	mov.w	r3, #0
 800ad36:	f04f 020a 	mov.w	r2, #10
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	4658      	mov	r0, fp
 800ad3e:	d107      	bne.n	800ad50 <_dtoa_r+0xac8>
 800ad40:	f000 f9ca 	bl	800b0d8 <__multadd>
 800ad44:	4607      	mov	r7, r0
 800ad46:	4605      	mov	r5, r0
 800ad48:	9b07      	ldr	r3, [sp, #28]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	9307      	str	r3, [sp, #28]
 800ad4e:	e774      	b.n	800ac3a <_dtoa_r+0x9b2>
 800ad50:	f000 f9c2 	bl	800b0d8 <__multadd>
 800ad54:	4629      	mov	r1, r5
 800ad56:	4607      	mov	r7, r0
 800ad58:	2300      	movs	r3, #0
 800ad5a:	220a      	movs	r2, #10
 800ad5c:	4658      	mov	r0, fp
 800ad5e:	f000 f9bb 	bl	800b0d8 <__multadd>
 800ad62:	4605      	mov	r5, r0
 800ad64:	e7f0      	b.n	800ad48 <_dtoa_r+0xac0>
 800ad66:	9b08      	ldr	r3, [sp, #32]
 800ad68:	2700      	movs	r7, #0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	bfcc      	ite	gt
 800ad6e:	461e      	movgt	r6, r3
 800ad70:	2601      	movle	r6, #1
 800ad72:	4456      	add	r6, sl
 800ad74:	4649      	mov	r1, r9
 800ad76:	2201      	movs	r2, #1
 800ad78:	4658      	mov	r0, fp
 800ad7a:	f000 fb57 	bl	800b42c <__lshift>
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4681      	mov	r9, r0
 800ad82:	f000 fbbf 	bl	800b504 <__mcmp>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	dcb0      	bgt.n	800acec <_dtoa_r+0xa64>
 800ad8a:	d102      	bne.n	800ad92 <_dtoa_r+0xb0a>
 800ad8c:	f018 0f01 	tst.w	r8, #1
 800ad90:	d1ac      	bne.n	800acec <_dtoa_r+0xa64>
 800ad92:	4633      	mov	r3, r6
 800ad94:	461e      	mov	r6, r3
 800ad96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad9a:	2a30      	cmp	r2, #48	@ 0x30
 800ad9c:	d0fa      	beq.n	800ad94 <_dtoa_r+0xb0c>
 800ad9e:	e5be      	b.n	800a91e <_dtoa_r+0x696>
 800ada0:	459a      	cmp	sl, r3
 800ada2:	d1a4      	bne.n	800acee <_dtoa_r+0xa66>
 800ada4:	9b04      	ldr	r3, [sp, #16]
 800ada6:	3301      	adds	r3, #1
 800ada8:	9304      	str	r3, [sp, #16]
 800adaa:	2331      	movs	r3, #49	@ 0x31
 800adac:	f88a 3000 	strb.w	r3, [sl]
 800adb0:	e5b5      	b.n	800a91e <_dtoa_r+0x696>
 800adb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800adb4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ae14 <_dtoa_r+0xb8c>
 800adb8:	b11b      	cbz	r3, 800adc2 <_dtoa_r+0xb3a>
 800adba:	f10a 0308 	add.w	r3, sl, #8
 800adbe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800adc0:	6013      	str	r3, [r2, #0]
 800adc2:	4650      	mov	r0, sl
 800adc4:	b017      	add	sp, #92	@ 0x5c
 800adc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800adcc:	2b01      	cmp	r3, #1
 800adce:	f77f ae3d 	ble.w	800aa4c <_dtoa_r+0x7c4>
 800add2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800add4:	930a      	str	r3, [sp, #40]	@ 0x28
 800add6:	2001      	movs	r0, #1
 800add8:	e65b      	b.n	800aa92 <_dtoa_r+0x80a>
 800adda:	9b08      	ldr	r3, [sp, #32]
 800addc:	2b00      	cmp	r3, #0
 800adde:	f77f aed6 	ble.w	800ab8e <_dtoa_r+0x906>
 800ade2:	4656      	mov	r6, sl
 800ade4:	4621      	mov	r1, r4
 800ade6:	4648      	mov	r0, r9
 800ade8:	f7ff f9c5 	bl	800a176 <quorem>
 800adec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800adf0:	9b08      	ldr	r3, [sp, #32]
 800adf2:	f806 8b01 	strb.w	r8, [r6], #1
 800adf6:	eba6 020a 	sub.w	r2, r6, sl
 800adfa:	4293      	cmp	r3, r2
 800adfc:	ddb3      	ble.n	800ad66 <_dtoa_r+0xade>
 800adfe:	4649      	mov	r1, r9
 800ae00:	2300      	movs	r3, #0
 800ae02:	220a      	movs	r2, #10
 800ae04:	4658      	mov	r0, fp
 800ae06:	f000 f967 	bl	800b0d8 <__multadd>
 800ae0a:	4681      	mov	r9, r0
 800ae0c:	e7ea      	b.n	800ade4 <_dtoa_r+0xb5c>
 800ae0e:	bf00      	nop
 800ae10:	0800f292 	.word	0x0800f292
 800ae14:	0800f216 	.word	0x0800f216

0800ae18 <_free_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	2900      	cmp	r1, #0
 800ae1e:	d040      	beq.n	800aea2 <_free_r+0x8a>
 800ae20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae24:	1f0c      	subs	r4, r1, #4
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bfb8      	it	lt
 800ae2a:	18e4      	addlt	r4, r4, r3
 800ae2c:	f000 f8e6 	bl	800affc <__malloc_lock>
 800ae30:	4a1c      	ldr	r2, [pc, #112]	@ (800aea4 <_free_r+0x8c>)
 800ae32:	6813      	ldr	r3, [r2, #0]
 800ae34:	b933      	cbnz	r3, 800ae44 <_free_r+0x2c>
 800ae36:	6063      	str	r3, [r4, #4]
 800ae38:	6014      	str	r4, [r2, #0]
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae40:	f000 b8e2 	b.w	800b008 <__malloc_unlock>
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	d908      	bls.n	800ae5a <_free_r+0x42>
 800ae48:	6820      	ldr	r0, [r4, #0]
 800ae4a:	1821      	adds	r1, r4, r0
 800ae4c:	428b      	cmp	r3, r1
 800ae4e:	bf01      	itttt	eq
 800ae50:	6819      	ldreq	r1, [r3, #0]
 800ae52:	685b      	ldreq	r3, [r3, #4]
 800ae54:	1809      	addeq	r1, r1, r0
 800ae56:	6021      	streq	r1, [r4, #0]
 800ae58:	e7ed      	b.n	800ae36 <_free_r+0x1e>
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	b10b      	cbz	r3, 800ae64 <_free_r+0x4c>
 800ae60:	42a3      	cmp	r3, r4
 800ae62:	d9fa      	bls.n	800ae5a <_free_r+0x42>
 800ae64:	6811      	ldr	r1, [r2, #0]
 800ae66:	1850      	adds	r0, r2, r1
 800ae68:	42a0      	cmp	r0, r4
 800ae6a:	d10b      	bne.n	800ae84 <_free_r+0x6c>
 800ae6c:	6820      	ldr	r0, [r4, #0]
 800ae6e:	4401      	add	r1, r0
 800ae70:	1850      	adds	r0, r2, r1
 800ae72:	4283      	cmp	r3, r0
 800ae74:	6011      	str	r1, [r2, #0]
 800ae76:	d1e0      	bne.n	800ae3a <_free_r+0x22>
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	4408      	add	r0, r1
 800ae7e:	6010      	str	r0, [r2, #0]
 800ae80:	6053      	str	r3, [r2, #4]
 800ae82:	e7da      	b.n	800ae3a <_free_r+0x22>
 800ae84:	d902      	bls.n	800ae8c <_free_r+0x74>
 800ae86:	230c      	movs	r3, #12
 800ae88:	602b      	str	r3, [r5, #0]
 800ae8a:	e7d6      	b.n	800ae3a <_free_r+0x22>
 800ae8c:	6820      	ldr	r0, [r4, #0]
 800ae8e:	1821      	adds	r1, r4, r0
 800ae90:	428b      	cmp	r3, r1
 800ae92:	bf01      	itttt	eq
 800ae94:	6819      	ldreq	r1, [r3, #0]
 800ae96:	685b      	ldreq	r3, [r3, #4]
 800ae98:	1809      	addeq	r1, r1, r0
 800ae9a:	6021      	streq	r1, [r4, #0]
 800ae9c:	6063      	str	r3, [r4, #4]
 800ae9e:	6054      	str	r4, [r2, #4]
 800aea0:	e7cb      	b.n	800ae3a <_free_r+0x22>
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	200003cc 	.word	0x200003cc

0800aea8 <malloc>:
 800aea8:	4b02      	ldr	r3, [pc, #8]	@ (800aeb4 <malloc+0xc>)
 800aeaa:	4601      	mov	r1, r0
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	f000 b825 	b.w	800aefc <_malloc_r>
 800aeb2:	bf00      	nop
 800aeb4:	2000001c 	.word	0x2000001c

0800aeb8 <sbrk_aligned>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	4e0f      	ldr	r6, [pc, #60]	@ (800aef8 <sbrk_aligned+0x40>)
 800aebc:	460c      	mov	r4, r1
 800aebe:	6831      	ldr	r1, [r6, #0]
 800aec0:	4605      	mov	r5, r0
 800aec2:	b911      	cbnz	r1, 800aeca <sbrk_aligned+0x12>
 800aec4:	f000 fe40 	bl	800bb48 <_sbrk_r>
 800aec8:	6030      	str	r0, [r6, #0]
 800aeca:	4621      	mov	r1, r4
 800aecc:	4628      	mov	r0, r5
 800aece:	f000 fe3b 	bl	800bb48 <_sbrk_r>
 800aed2:	1c43      	adds	r3, r0, #1
 800aed4:	d103      	bne.n	800aede <sbrk_aligned+0x26>
 800aed6:	f04f 34ff 	mov.w	r4, #4294967295
 800aeda:	4620      	mov	r0, r4
 800aedc:	bd70      	pop	{r4, r5, r6, pc}
 800aede:	1cc4      	adds	r4, r0, #3
 800aee0:	f024 0403 	bic.w	r4, r4, #3
 800aee4:	42a0      	cmp	r0, r4
 800aee6:	d0f8      	beq.n	800aeda <sbrk_aligned+0x22>
 800aee8:	1a21      	subs	r1, r4, r0
 800aeea:	4628      	mov	r0, r5
 800aeec:	f000 fe2c 	bl	800bb48 <_sbrk_r>
 800aef0:	3001      	adds	r0, #1
 800aef2:	d1f2      	bne.n	800aeda <sbrk_aligned+0x22>
 800aef4:	e7ef      	b.n	800aed6 <sbrk_aligned+0x1e>
 800aef6:	bf00      	nop
 800aef8:	200003c8 	.word	0x200003c8

0800aefc <_malloc_r>:
 800aefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af00:	1ccd      	adds	r5, r1, #3
 800af02:	f025 0503 	bic.w	r5, r5, #3
 800af06:	3508      	adds	r5, #8
 800af08:	2d0c      	cmp	r5, #12
 800af0a:	bf38      	it	cc
 800af0c:	250c      	movcc	r5, #12
 800af0e:	2d00      	cmp	r5, #0
 800af10:	4606      	mov	r6, r0
 800af12:	db01      	blt.n	800af18 <_malloc_r+0x1c>
 800af14:	42a9      	cmp	r1, r5
 800af16:	d904      	bls.n	800af22 <_malloc_r+0x26>
 800af18:	230c      	movs	r3, #12
 800af1a:	6033      	str	r3, [r6, #0]
 800af1c:	2000      	movs	r0, #0
 800af1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aff8 <_malloc_r+0xfc>
 800af26:	f000 f869 	bl	800affc <__malloc_lock>
 800af2a:	f8d8 3000 	ldr.w	r3, [r8]
 800af2e:	461c      	mov	r4, r3
 800af30:	bb44      	cbnz	r4, 800af84 <_malloc_r+0x88>
 800af32:	4629      	mov	r1, r5
 800af34:	4630      	mov	r0, r6
 800af36:	f7ff ffbf 	bl	800aeb8 <sbrk_aligned>
 800af3a:	1c43      	adds	r3, r0, #1
 800af3c:	4604      	mov	r4, r0
 800af3e:	d158      	bne.n	800aff2 <_malloc_r+0xf6>
 800af40:	f8d8 4000 	ldr.w	r4, [r8]
 800af44:	4627      	mov	r7, r4
 800af46:	2f00      	cmp	r7, #0
 800af48:	d143      	bne.n	800afd2 <_malloc_r+0xd6>
 800af4a:	2c00      	cmp	r4, #0
 800af4c:	d04b      	beq.n	800afe6 <_malloc_r+0xea>
 800af4e:	6823      	ldr	r3, [r4, #0]
 800af50:	4639      	mov	r1, r7
 800af52:	4630      	mov	r0, r6
 800af54:	eb04 0903 	add.w	r9, r4, r3
 800af58:	f000 fdf6 	bl	800bb48 <_sbrk_r>
 800af5c:	4581      	cmp	r9, r0
 800af5e:	d142      	bne.n	800afe6 <_malloc_r+0xea>
 800af60:	6821      	ldr	r1, [r4, #0]
 800af62:	4630      	mov	r0, r6
 800af64:	1a6d      	subs	r5, r5, r1
 800af66:	4629      	mov	r1, r5
 800af68:	f7ff ffa6 	bl	800aeb8 <sbrk_aligned>
 800af6c:	3001      	adds	r0, #1
 800af6e:	d03a      	beq.n	800afe6 <_malloc_r+0xea>
 800af70:	6823      	ldr	r3, [r4, #0]
 800af72:	442b      	add	r3, r5
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	f8d8 3000 	ldr.w	r3, [r8]
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	bb62      	cbnz	r2, 800afd8 <_malloc_r+0xdc>
 800af7e:	f8c8 7000 	str.w	r7, [r8]
 800af82:	e00f      	b.n	800afa4 <_malloc_r+0xa8>
 800af84:	6822      	ldr	r2, [r4, #0]
 800af86:	1b52      	subs	r2, r2, r5
 800af88:	d420      	bmi.n	800afcc <_malloc_r+0xd0>
 800af8a:	2a0b      	cmp	r2, #11
 800af8c:	d917      	bls.n	800afbe <_malloc_r+0xc2>
 800af8e:	1961      	adds	r1, r4, r5
 800af90:	42a3      	cmp	r3, r4
 800af92:	6025      	str	r5, [r4, #0]
 800af94:	bf18      	it	ne
 800af96:	6059      	strne	r1, [r3, #4]
 800af98:	6863      	ldr	r3, [r4, #4]
 800af9a:	bf08      	it	eq
 800af9c:	f8c8 1000 	streq.w	r1, [r8]
 800afa0:	5162      	str	r2, [r4, r5]
 800afa2:	604b      	str	r3, [r1, #4]
 800afa4:	4630      	mov	r0, r6
 800afa6:	f000 f82f 	bl	800b008 <__malloc_unlock>
 800afaa:	f104 000b 	add.w	r0, r4, #11
 800afae:	1d23      	adds	r3, r4, #4
 800afb0:	f020 0007 	bic.w	r0, r0, #7
 800afb4:	1ac2      	subs	r2, r0, r3
 800afb6:	bf1c      	itt	ne
 800afb8:	1a1b      	subne	r3, r3, r0
 800afba:	50a3      	strne	r3, [r4, r2]
 800afbc:	e7af      	b.n	800af1e <_malloc_r+0x22>
 800afbe:	6862      	ldr	r2, [r4, #4]
 800afc0:	42a3      	cmp	r3, r4
 800afc2:	bf0c      	ite	eq
 800afc4:	f8c8 2000 	streq.w	r2, [r8]
 800afc8:	605a      	strne	r2, [r3, #4]
 800afca:	e7eb      	b.n	800afa4 <_malloc_r+0xa8>
 800afcc:	4623      	mov	r3, r4
 800afce:	6864      	ldr	r4, [r4, #4]
 800afd0:	e7ae      	b.n	800af30 <_malloc_r+0x34>
 800afd2:	463c      	mov	r4, r7
 800afd4:	687f      	ldr	r7, [r7, #4]
 800afd6:	e7b6      	b.n	800af46 <_malloc_r+0x4a>
 800afd8:	461a      	mov	r2, r3
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	42a3      	cmp	r3, r4
 800afde:	d1fb      	bne.n	800afd8 <_malloc_r+0xdc>
 800afe0:	2300      	movs	r3, #0
 800afe2:	6053      	str	r3, [r2, #4]
 800afe4:	e7de      	b.n	800afa4 <_malloc_r+0xa8>
 800afe6:	230c      	movs	r3, #12
 800afe8:	4630      	mov	r0, r6
 800afea:	6033      	str	r3, [r6, #0]
 800afec:	f000 f80c 	bl	800b008 <__malloc_unlock>
 800aff0:	e794      	b.n	800af1c <_malloc_r+0x20>
 800aff2:	6005      	str	r5, [r0, #0]
 800aff4:	e7d6      	b.n	800afa4 <_malloc_r+0xa8>
 800aff6:	bf00      	nop
 800aff8:	200003cc 	.word	0x200003cc

0800affc <__malloc_lock>:
 800affc:	4801      	ldr	r0, [pc, #4]	@ (800b004 <__malloc_lock+0x8>)
 800affe:	f7ff b8aa 	b.w	800a156 <__retarget_lock_acquire_recursive>
 800b002:	bf00      	nop
 800b004:	200003c4 	.word	0x200003c4

0800b008 <__malloc_unlock>:
 800b008:	4801      	ldr	r0, [pc, #4]	@ (800b010 <__malloc_unlock+0x8>)
 800b00a:	f7ff b8a5 	b.w	800a158 <__retarget_lock_release_recursive>
 800b00e:	bf00      	nop
 800b010:	200003c4 	.word	0x200003c4

0800b014 <_Balloc>:
 800b014:	b570      	push	{r4, r5, r6, lr}
 800b016:	69c6      	ldr	r6, [r0, #28]
 800b018:	4604      	mov	r4, r0
 800b01a:	460d      	mov	r5, r1
 800b01c:	b976      	cbnz	r6, 800b03c <_Balloc+0x28>
 800b01e:	2010      	movs	r0, #16
 800b020:	f7ff ff42 	bl	800aea8 <malloc>
 800b024:	4602      	mov	r2, r0
 800b026:	61e0      	str	r0, [r4, #28]
 800b028:	b920      	cbnz	r0, 800b034 <_Balloc+0x20>
 800b02a:	216b      	movs	r1, #107	@ 0x6b
 800b02c:	4b17      	ldr	r3, [pc, #92]	@ (800b08c <_Balloc+0x78>)
 800b02e:	4818      	ldr	r0, [pc, #96]	@ (800b090 <_Balloc+0x7c>)
 800b030:	f000 fda8 	bl	800bb84 <__assert_func>
 800b034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b038:	6006      	str	r6, [r0, #0]
 800b03a:	60c6      	str	r6, [r0, #12]
 800b03c:	69e6      	ldr	r6, [r4, #28]
 800b03e:	68f3      	ldr	r3, [r6, #12]
 800b040:	b183      	cbz	r3, 800b064 <_Balloc+0x50>
 800b042:	69e3      	ldr	r3, [r4, #28]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b04a:	b9b8      	cbnz	r0, 800b07c <_Balloc+0x68>
 800b04c:	2101      	movs	r1, #1
 800b04e:	fa01 f605 	lsl.w	r6, r1, r5
 800b052:	1d72      	adds	r2, r6, #5
 800b054:	4620      	mov	r0, r4
 800b056:	0092      	lsls	r2, r2, #2
 800b058:	f000 fdb2 	bl	800bbc0 <_calloc_r>
 800b05c:	b160      	cbz	r0, 800b078 <_Balloc+0x64>
 800b05e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b062:	e00e      	b.n	800b082 <_Balloc+0x6e>
 800b064:	2221      	movs	r2, #33	@ 0x21
 800b066:	2104      	movs	r1, #4
 800b068:	4620      	mov	r0, r4
 800b06a:	f000 fda9 	bl	800bbc0 <_calloc_r>
 800b06e:	69e3      	ldr	r3, [r4, #28]
 800b070:	60f0      	str	r0, [r6, #12]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1e4      	bne.n	800b042 <_Balloc+0x2e>
 800b078:	2000      	movs	r0, #0
 800b07a:	bd70      	pop	{r4, r5, r6, pc}
 800b07c:	6802      	ldr	r2, [r0, #0]
 800b07e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b082:	2300      	movs	r3, #0
 800b084:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b088:	e7f7      	b.n	800b07a <_Balloc+0x66>
 800b08a:	bf00      	nop
 800b08c:	0800f223 	.word	0x0800f223
 800b090:	0800f2a3 	.word	0x0800f2a3

0800b094 <_Bfree>:
 800b094:	b570      	push	{r4, r5, r6, lr}
 800b096:	69c6      	ldr	r6, [r0, #28]
 800b098:	4605      	mov	r5, r0
 800b09a:	460c      	mov	r4, r1
 800b09c:	b976      	cbnz	r6, 800b0bc <_Bfree+0x28>
 800b09e:	2010      	movs	r0, #16
 800b0a0:	f7ff ff02 	bl	800aea8 <malloc>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	61e8      	str	r0, [r5, #28]
 800b0a8:	b920      	cbnz	r0, 800b0b4 <_Bfree+0x20>
 800b0aa:	218f      	movs	r1, #143	@ 0x8f
 800b0ac:	4b08      	ldr	r3, [pc, #32]	@ (800b0d0 <_Bfree+0x3c>)
 800b0ae:	4809      	ldr	r0, [pc, #36]	@ (800b0d4 <_Bfree+0x40>)
 800b0b0:	f000 fd68 	bl	800bb84 <__assert_func>
 800b0b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0b8:	6006      	str	r6, [r0, #0]
 800b0ba:	60c6      	str	r6, [r0, #12]
 800b0bc:	b13c      	cbz	r4, 800b0ce <_Bfree+0x3a>
 800b0be:	69eb      	ldr	r3, [r5, #28]
 800b0c0:	6862      	ldr	r2, [r4, #4]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0c8:	6021      	str	r1, [r4, #0]
 800b0ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}
 800b0d0:	0800f223 	.word	0x0800f223
 800b0d4:	0800f2a3 	.word	0x0800f2a3

0800b0d8 <__multadd>:
 800b0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0dc:	4607      	mov	r7, r0
 800b0de:	460c      	mov	r4, r1
 800b0e0:	461e      	mov	r6, r3
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	690d      	ldr	r5, [r1, #16]
 800b0e6:	f101 0c14 	add.w	ip, r1, #20
 800b0ea:	f8dc 3000 	ldr.w	r3, [ip]
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	b299      	uxth	r1, r3
 800b0f2:	fb02 6101 	mla	r1, r2, r1, r6
 800b0f6:	0c1e      	lsrs	r6, r3, #16
 800b0f8:	0c0b      	lsrs	r3, r1, #16
 800b0fa:	fb02 3306 	mla	r3, r2, r6, r3
 800b0fe:	b289      	uxth	r1, r1
 800b100:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b104:	4285      	cmp	r5, r0
 800b106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b10a:	f84c 1b04 	str.w	r1, [ip], #4
 800b10e:	dcec      	bgt.n	800b0ea <__multadd+0x12>
 800b110:	b30e      	cbz	r6, 800b156 <__multadd+0x7e>
 800b112:	68a3      	ldr	r3, [r4, #8]
 800b114:	42ab      	cmp	r3, r5
 800b116:	dc19      	bgt.n	800b14c <__multadd+0x74>
 800b118:	6861      	ldr	r1, [r4, #4]
 800b11a:	4638      	mov	r0, r7
 800b11c:	3101      	adds	r1, #1
 800b11e:	f7ff ff79 	bl	800b014 <_Balloc>
 800b122:	4680      	mov	r8, r0
 800b124:	b928      	cbnz	r0, 800b132 <__multadd+0x5a>
 800b126:	4602      	mov	r2, r0
 800b128:	21ba      	movs	r1, #186	@ 0xba
 800b12a:	4b0c      	ldr	r3, [pc, #48]	@ (800b15c <__multadd+0x84>)
 800b12c:	480c      	ldr	r0, [pc, #48]	@ (800b160 <__multadd+0x88>)
 800b12e:	f000 fd29 	bl	800bb84 <__assert_func>
 800b132:	6922      	ldr	r2, [r4, #16]
 800b134:	f104 010c 	add.w	r1, r4, #12
 800b138:	3202      	adds	r2, #2
 800b13a:	0092      	lsls	r2, r2, #2
 800b13c:	300c      	adds	r0, #12
 800b13e:	f000 fd13 	bl	800bb68 <memcpy>
 800b142:	4621      	mov	r1, r4
 800b144:	4638      	mov	r0, r7
 800b146:	f7ff ffa5 	bl	800b094 <_Bfree>
 800b14a:	4644      	mov	r4, r8
 800b14c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b150:	3501      	adds	r5, #1
 800b152:	615e      	str	r6, [r3, #20]
 800b154:	6125      	str	r5, [r4, #16]
 800b156:	4620      	mov	r0, r4
 800b158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b15c:	0800f292 	.word	0x0800f292
 800b160:	0800f2a3 	.word	0x0800f2a3

0800b164 <__hi0bits>:
 800b164:	4603      	mov	r3, r0
 800b166:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b16a:	bf3a      	itte	cc
 800b16c:	0403      	lslcc	r3, r0, #16
 800b16e:	2010      	movcc	r0, #16
 800b170:	2000      	movcs	r0, #0
 800b172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b176:	bf3c      	itt	cc
 800b178:	021b      	lslcc	r3, r3, #8
 800b17a:	3008      	addcc	r0, #8
 800b17c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b180:	bf3c      	itt	cc
 800b182:	011b      	lslcc	r3, r3, #4
 800b184:	3004      	addcc	r0, #4
 800b186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b18a:	bf3c      	itt	cc
 800b18c:	009b      	lslcc	r3, r3, #2
 800b18e:	3002      	addcc	r0, #2
 800b190:	2b00      	cmp	r3, #0
 800b192:	db05      	blt.n	800b1a0 <__hi0bits+0x3c>
 800b194:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b198:	f100 0001 	add.w	r0, r0, #1
 800b19c:	bf08      	it	eq
 800b19e:	2020      	moveq	r0, #32
 800b1a0:	4770      	bx	lr

0800b1a2 <__lo0bits>:
 800b1a2:	6803      	ldr	r3, [r0, #0]
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	f013 0007 	ands.w	r0, r3, #7
 800b1aa:	d00b      	beq.n	800b1c4 <__lo0bits+0x22>
 800b1ac:	07d9      	lsls	r1, r3, #31
 800b1ae:	d421      	bmi.n	800b1f4 <__lo0bits+0x52>
 800b1b0:	0798      	lsls	r0, r3, #30
 800b1b2:	bf49      	itett	mi
 800b1b4:	085b      	lsrmi	r3, r3, #1
 800b1b6:	089b      	lsrpl	r3, r3, #2
 800b1b8:	2001      	movmi	r0, #1
 800b1ba:	6013      	strmi	r3, [r2, #0]
 800b1bc:	bf5c      	itt	pl
 800b1be:	2002      	movpl	r0, #2
 800b1c0:	6013      	strpl	r3, [r2, #0]
 800b1c2:	4770      	bx	lr
 800b1c4:	b299      	uxth	r1, r3
 800b1c6:	b909      	cbnz	r1, 800b1cc <__lo0bits+0x2a>
 800b1c8:	2010      	movs	r0, #16
 800b1ca:	0c1b      	lsrs	r3, r3, #16
 800b1cc:	b2d9      	uxtb	r1, r3
 800b1ce:	b909      	cbnz	r1, 800b1d4 <__lo0bits+0x32>
 800b1d0:	3008      	adds	r0, #8
 800b1d2:	0a1b      	lsrs	r3, r3, #8
 800b1d4:	0719      	lsls	r1, r3, #28
 800b1d6:	bf04      	itt	eq
 800b1d8:	091b      	lsreq	r3, r3, #4
 800b1da:	3004      	addeq	r0, #4
 800b1dc:	0799      	lsls	r1, r3, #30
 800b1de:	bf04      	itt	eq
 800b1e0:	089b      	lsreq	r3, r3, #2
 800b1e2:	3002      	addeq	r0, #2
 800b1e4:	07d9      	lsls	r1, r3, #31
 800b1e6:	d403      	bmi.n	800b1f0 <__lo0bits+0x4e>
 800b1e8:	085b      	lsrs	r3, r3, #1
 800b1ea:	f100 0001 	add.w	r0, r0, #1
 800b1ee:	d003      	beq.n	800b1f8 <__lo0bits+0x56>
 800b1f0:	6013      	str	r3, [r2, #0]
 800b1f2:	4770      	bx	lr
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	4770      	bx	lr
 800b1f8:	2020      	movs	r0, #32
 800b1fa:	4770      	bx	lr

0800b1fc <__i2b>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	460c      	mov	r4, r1
 800b200:	2101      	movs	r1, #1
 800b202:	f7ff ff07 	bl	800b014 <_Balloc>
 800b206:	4602      	mov	r2, r0
 800b208:	b928      	cbnz	r0, 800b216 <__i2b+0x1a>
 800b20a:	f240 1145 	movw	r1, #325	@ 0x145
 800b20e:	4b04      	ldr	r3, [pc, #16]	@ (800b220 <__i2b+0x24>)
 800b210:	4804      	ldr	r0, [pc, #16]	@ (800b224 <__i2b+0x28>)
 800b212:	f000 fcb7 	bl	800bb84 <__assert_func>
 800b216:	2301      	movs	r3, #1
 800b218:	6144      	str	r4, [r0, #20]
 800b21a:	6103      	str	r3, [r0, #16]
 800b21c:	bd10      	pop	{r4, pc}
 800b21e:	bf00      	nop
 800b220:	0800f292 	.word	0x0800f292
 800b224:	0800f2a3 	.word	0x0800f2a3

0800b228 <__multiply>:
 800b228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22c:	4614      	mov	r4, r2
 800b22e:	690a      	ldr	r2, [r1, #16]
 800b230:	6923      	ldr	r3, [r4, #16]
 800b232:	460f      	mov	r7, r1
 800b234:	429a      	cmp	r2, r3
 800b236:	bfa2      	ittt	ge
 800b238:	4623      	movge	r3, r4
 800b23a:	460c      	movge	r4, r1
 800b23c:	461f      	movge	r7, r3
 800b23e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b242:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b246:	68a3      	ldr	r3, [r4, #8]
 800b248:	6861      	ldr	r1, [r4, #4]
 800b24a:	eb0a 0609 	add.w	r6, sl, r9
 800b24e:	42b3      	cmp	r3, r6
 800b250:	b085      	sub	sp, #20
 800b252:	bfb8      	it	lt
 800b254:	3101      	addlt	r1, #1
 800b256:	f7ff fedd 	bl	800b014 <_Balloc>
 800b25a:	b930      	cbnz	r0, 800b26a <__multiply+0x42>
 800b25c:	4602      	mov	r2, r0
 800b25e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b262:	4b43      	ldr	r3, [pc, #268]	@ (800b370 <__multiply+0x148>)
 800b264:	4843      	ldr	r0, [pc, #268]	@ (800b374 <__multiply+0x14c>)
 800b266:	f000 fc8d 	bl	800bb84 <__assert_func>
 800b26a:	f100 0514 	add.w	r5, r0, #20
 800b26e:	462b      	mov	r3, r5
 800b270:	2200      	movs	r2, #0
 800b272:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b276:	4543      	cmp	r3, r8
 800b278:	d321      	bcc.n	800b2be <__multiply+0x96>
 800b27a:	f107 0114 	add.w	r1, r7, #20
 800b27e:	f104 0214 	add.w	r2, r4, #20
 800b282:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b286:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b28a:	9302      	str	r3, [sp, #8]
 800b28c:	1b13      	subs	r3, r2, r4
 800b28e:	3b15      	subs	r3, #21
 800b290:	f023 0303 	bic.w	r3, r3, #3
 800b294:	3304      	adds	r3, #4
 800b296:	f104 0715 	add.w	r7, r4, #21
 800b29a:	42ba      	cmp	r2, r7
 800b29c:	bf38      	it	cc
 800b29e:	2304      	movcc	r3, #4
 800b2a0:	9301      	str	r3, [sp, #4]
 800b2a2:	9b02      	ldr	r3, [sp, #8]
 800b2a4:	9103      	str	r1, [sp, #12]
 800b2a6:	428b      	cmp	r3, r1
 800b2a8:	d80c      	bhi.n	800b2c4 <__multiply+0x9c>
 800b2aa:	2e00      	cmp	r6, #0
 800b2ac:	dd03      	ble.n	800b2b6 <__multiply+0x8e>
 800b2ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d05a      	beq.n	800b36c <__multiply+0x144>
 800b2b6:	6106      	str	r6, [r0, #16]
 800b2b8:	b005      	add	sp, #20
 800b2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2be:	f843 2b04 	str.w	r2, [r3], #4
 800b2c2:	e7d8      	b.n	800b276 <__multiply+0x4e>
 800b2c4:	f8b1 a000 	ldrh.w	sl, [r1]
 800b2c8:	f1ba 0f00 	cmp.w	sl, #0
 800b2cc:	d023      	beq.n	800b316 <__multiply+0xee>
 800b2ce:	46a9      	mov	r9, r5
 800b2d0:	f04f 0c00 	mov.w	ip, #0
 800b2d4:	f104 0e14 	add.w	lr, r4, #20
 800b2d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2dc:	f8d9 3000 	ldr.w	r3, [r9]
 800b2e0:	fa1f fb87 	uxth.w	fp, r7
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	fb0a 330b 	mla	r3, sl, fp, r3
 800b2ea:	4463      	add	r3, ip
 800b2ec:	f8d9 c000 	ldr.w	ip, [r9]
 800b2f0:	0c3f      	lsrs	r7, r7, #16
 800b2f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b2f6:	fb0a c707 	mla	r7, sl, r7, ip
 800b2fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b304:	4572      	cmp	r2, lr
 800b306:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b30a:	f849 3b04 	str.w	r3, [r9], #4
 800b30e:	d8e3      	bhi.n	800b2d8 <__multiply+0xb0>
 800b310:	9b01      	ldr	r3, [sp, #4]
 800b312:	f845 c003 	str.w	ip, [r5, r3]
 800b316:	9b03      	ldr	r3, [sp, #12]
 800b318:	3104      	adds	r1, #4
 800b31a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b31e:	f1b9 0f00 	cmp.w	r9, #0
 800b322:	d021      	beq.n	800b368 <__multiply+0x140>
 800b324:	46ae      	mov	lr, r5
 800b326:	f04f 0a00 	mov.w	sl, #0
 800b32a:	682b      	ldr	r3, [r5, #0]
 800b32c:	f104 0c14 	add.w	ip, r4, #20
 800b330:	f8bc b000 	ldrh.w	fp, [ip]
 800b334:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b338:	b29b      	uxth	r3, r3
 800b33a:	fb09 770b 	mla	r7, r9, fp, r7
 800b33e:	4457      	add	r7, sl
 800b340:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b344:	f84e 3b04 	str.w	r3, [lr], #4
 800b348:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b34c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b350:	f8be 3000 	ldrh.w	r3, [lr]
 800b354:	4562      	cmp	r2, ip
 800b356:	fb09 330a 	mla	r3, r9, sl, r3
 800b35a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b35e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b362:	d8e5      	bhi.n	800b330 <__multiply+0x108>
 800b364:	9f01      	ldr	r7, [sp, #4]
 800b366:	51eb      	str	r3, [r5, r7]
 800b368:	3504      	adds	r5, #4
 800b36a:	e79a      	b.n	800b2a2 <__multiply+0x7a>
 800b36c:	3e01      	subs	r6, #1
 800b36e:	e79c      	b.n	800b2aa <__multiply+0x82>
 800b370:	0800f292 	.word	0x0800f292
 800b374:	0800f2a3 	.word	0x0800f2a3

0800b378 <__pow5mult>:
 800b378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b37c:	4615      	mov	r5, r2
 800b37e:	f012 0203 	ands.w	r2, r2, #3
 800b382:	4607      	mov	r7, r0
 800b384:	460e      	mov	r6, r1
 800b386:	d007      	beq.n	800b398 <__pow5mult+0x20>
 800b388:	4c25      	ldr	r4, [pc, #148]	@ (800b420 <__pow5mult+0xa8>)
 800b38a:	3a01      	subs	r2, #1
 800b38c:	2300      	movs	r3, #0
 800b38e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b392:	f7ff fea1 	bl	800b0d8 <__multadd>
 800b396:	4606      	mov	r6, r0
 800b398:	10ad      	asrs	r5, r5, #2
 800b39a:	d03d      	beq.n	800b418 <__pow5mult+0xa0>
 800b39c:	69fc      	ldr	r4, [r7, #28]
 800b39e:	b97c      	cbnz	r4, 800b3c0 <__pow5mult+0x48>
 800b3a0:	2010      	movs	r0, #16
 800b3a2:	f7ff fd81 	bl	800aea8 <malloc>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	61f8      	str	r0, [r7, #28]
 800b3aa:	b928      	cbnz	r0, 800b3b8 <__pow5mult+0x40>
 800b3ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b3b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b424 <__pow5mult+0xac>)
 800b3b2:	481d      	ldr	r0, [pc, #116]	@ (800b428 <__pow5mult+0xb0>)
 800b3b4:	f000 fbe6 	bl	800bb84 <__assert_func>
 800b3b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3bc:	6004      	str	r4, [r0, #0]
 800b3be:	60c4      	str	r4, [r0, #12]
 800b3c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b3c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3c8:	b94c      	cbnz	r4, 800b3de <__pow5mult+0x66>
 800b3ca:	f240 2171 	movw	r1, #625	@ 0x271
 800b3ce:	4638      	mov	r0, r7
 800b3d0:	f7ff ff14 	bl	800b1fc <__i2b>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3dc:	6003      	str	r3, [r0, #0]
 800b3de:	f04f 0900 	mov.w	r9, #0
 800b3e2:	07eb      	lsls	r3, r5, #31
 800b3e4:	d50a      	bpl.n	800b3fc <__pow5mult+0x84>
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	4622      	mov	r2, r4
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	f7ff ff1c 	bl	800b228 <__multiply>
 800b3f0:	4680      	mov	r8, r0
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	f7ff fe4d 	bl	800b094 <_Bfree>
 800b3fa:	4646      	mov	r6, r8
 800b3fc:	106d      	asrs	r5, r5, #1
 800b3fe:	d00b      	beq.n	800b418 <__pow5mult+0xa0>
 800b400:	6820      	ldr	r0, [r4, #0]
 800b402:	b938      	cbnz	r0, 800b414 <__pow5mult+0x9c>
 800b404:	4622      	mov	r2, r4
 800b406:	4621      	mov	r1, r4
 800b408:	4638      	mov	r0, r7
 800b40a:	f7ff ff0d 	bl	800b228 <__multiply>
 800b40e:	6020      	str	r0, [r4, #0]
 800b410:	f8c0 9000 	str.w	r9, [r0]
 800b414:	4604      	mov	r4, r0
 800b416:	e7e4      	b.n	800b3e2 <__pow5mult+0x6a>
 800b418:	4630      	mov	r0, r6
 800b41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b41e:	bf00      	nop
 800b420:	0800f2fc 	.word	0x0800f2fc
 800b424:	0800f223 	.word	0x0800f223
 800b428:	0800f2a3 	.word	0x0800f2a3

0800b42c <__lshift>:
 800b42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b430:	460c      	mov	r4, r1
 800b432:	4607      	mov	r7, r0
 800b434:	4691      	mov	r9, r2
 800b436:	6923      	ldr	r3, [r4, #16]
 800b438:	6849      	ldr	r1, [r1, #4]
 800b43a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b43e:	68a3      	ldr	r3, [r4, #8]
 800b440:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b444:	f108 0601 	add.w	r6, r8, #1
 800b448:	42b3      	cmp	r3, r6
 800b44a:	db0b      	blt.n	800b464 <__lshift+0x38>
 800b44c:	4638      	mov	r0, r7
 800b44e:	f7ff fde1 	bl	800b014 <_Balloc>
 800b452:	4605      	mov	r5, r0
 800b454:	b948      	cbnz	r0, 800b46a <__lshift+0x3e>
 800b456:	4602      	mov	r2, r0
 800b458:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b45c:	4b27      	ldr	r3, [pc, #156]	@ (800b4fc <__lshift+0xd0>)
 800b45e:	4828      	ldr	r0, [pc, #160]	@ (800b500 <__lshift+0xd4>)
 800b460:	f000 fb90 	bl	800bb84 <__assert_func>
 800b464:	3101      	adds	r1, #1
 800b466:	005b      	lsls	r3, r3, #1
 800b468:	e7ee      	b.n	800b448 <__lshift+0x1c>
 800b46a:	2300      	movs	r3, #0
 800b46c:	f100 0114 	add.w	r1, r0, #20
 800b470:	f100 0210 	add.w	r2, r0, #16
 800b474:	4618      	mov	r0, r3
 800b476:	4553      	cmp	r3, sl
 800b478:	db33      	blt.n	800b4e2 <__lshift+0xb6>
 800b47a:	6920      	ldr	r0, [r4, #16]
 800b47c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b480:	f104 0314 	add.w	r3, r4, #20
 800b484:	f019 091f 	ands.w	r9, r9, #31
 800b488:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b48c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b490:	d02b      	beq.n	800b4ea <__lshift+0xbe>
 800b492:	468a      	mov	sl, r1
 800b494:	2200      	movs	r2, #0
 800b496:	f1c9 0e20 	rsb	lr, r9, #32
 800b49a:	6818      	ldr	r0, [r3, #0]
 800b49c:	fa00 f009 	lsl.w	r0, r0, r9
 800b4a0:	4310      	orrs	r0, r2
 800b4a2:	f84a 0b04 	str.w	r0, [sl], #4
 800b4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4aa:	459c      	cmp	ip, r3
 800b4ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4b0:	d8f3      	bhi.n	800b49a <__lshift+0x6e>
 800b4b2:	ebac 0304 	sub.w	r3, ip, r4
 800b4b6:	3b15      	subs	r3, #21
 800b4b8:	f023 0303 	bic.w	r3, r3, #3
 800b4bc:	3304      	adds	r3, #4
 800b4be:	f104 0015 	add.w	r0, r4, #21
 800b4c2:	4584      	cmp	ip, r0
 800b4c4:	bf38      	it	cc
 800b4c6:	2304      	movcc	r3, #4
 800b4c8:	50ca      	str	r2, [r1, r3]
 800b4ca:	b10a      	cbz	r2, 800b4d0 <__lshift+0xa4>
 800b4cc:	f108 0602 	add.w	r6, r8, #2
 800b4d0:	3e01      	subs	r6, #1
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	612e      	str	r6, [r5, #16]
 800b4d8:	f7ff fddc 	bl	800b094 <_Bfree>
 800b4dc:	4628      	mov	r0, r5
 800b4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	e7c5      	b.n	800b476 <__lshift+0x4a>
 800b4ea:	3904      	subs	r1, #4
 800b4ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f0:	459c      	cmp	ip, r3
 800b4f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4f6:	d8f9      	bhi.n	800b4ec <__lshift+0xc0>
 800b4f8:	e7ea      	b.n	800b4d0 <__lshift+0xa4>
 800b4fa:	bf00      	nop
 800b4fc:	0800f292 	.word	0x0800f292
 800b500:	0800f2a3 	.word	0x0800f2a3

0800b504 <__mcmp>:
 800b504:	4603      	mov	r3, r0
 800b506:	690a      	ldr	r2, [r1, #16]
 800b508:	6900      	ldr	r0, [r0, #16]
 800b50a:	b530      	push	{r4, r5, lr}
 800b50c:	1a80      	subs	r0, r0, r2
 800b50e:	d10e      	bne.n	800b52e <__mcmp+0x2a>
 800b510:	3314      	adds	r3, #20
 800b512:	3114      	adds	r1, #20
 800b514:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b518:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b51c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b520:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b524:	4295      	cmp	r5, r2
 800b526:	d003      	beq.n	800b530 <__mcmp+0x2c>
 800b528:	d205      	bcs.n	800b536 <__mcmp+0x32>
 800b52a:	f04f 30ff 	mov.w	r0, #4294967295
 800b52e:	bd30      	pop	{r4, r5, pc}
 800b530:	42a3      	cmp	r3, r4
 800b532:	d3f3      	bcc.n	800b51c <__mcmp+0x18>
 800b534:	e7fb      	b.n	800b52e <__mcmp+0x2a>
 800b536:	2001      	movs	r0, #1
 800b538:	e7f9      	b.n	800b52e <__mcmp+0x2a>
	...

0800b53c <__mdiff>:
 800b53c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b540:	4689      	mov	r9, r1
 800b542:	4606      	mov	r6, r0
 800b544:	4611      	mov	r1, r2
 800b546:	4648      	mov	r0, r9
 800b548:	4614      	mov	r4, r2
 800b54a:	f7ff ffdb 	bl	800b504 <__mcmp>
 800b54e:	1e05      	subs	r5, r0, #0
 800b550:	d112      	bne.n	800b578 <__mdiff+0x3c>
 800b552:	4629      	mov	r1, r5
 800b554:	4630      	mov	r0, r6
 800b556:	f7ff fd5d 	bl	800b014 <_Balloc>
 800b55a:	4602      	mov	r2, r0
 800b55c:	b928      	cbnz	r0, 800b56a <__mdiff+0x2e>
 800b55e:	f240 2137 	movw	r1, #567	@ 0x237
 800b562:	4b3e      	ldr	r3, [pc, #248]	@ (800b65c <__mdiff+0x120>)
 800b564:	483e      	ldr	r0, [pc, #248]	@ (800b660 <__mdiff+0x124>)
 800b566:	f000 fb0d 	bl	800bb84 <__assert_func>
 800b56a:	2301      	movs	r3, #1
 800b56c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b570:	4610      	mov	r0, r2
 800b572:	b003      	add	sp, #12
 800b574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b578:	bfbc      	itt	lt
 800b57a:	464b      	movlt	r3, r9
 800b57c:	46a1      	movlt	r9, r4
 800b57e:	4630      	mov	r0, r6
 800b580:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b584:	bfba      	itte	lt
 800b586:	461c      	movlt	r4, r3
 800b588:	2501      	movlt	r5, #1
 800b58a:	2500      	movge	r5, #0
 800b58c:	f7ff fd42 	bl	800b014 <_Balloc>
 800b590:	4602      	mov	r2, r0
 800b592:	b918      	cbnz	r0, 800b59c <__mdiff+0x60>
 800b594:	f240 2145 	movw	r1, #581	@ 0x245
 800b598:	4b30      	ldr	r3, [pc, #192]	@ (800b65c <__mdiff+0x120>)
 800b59a:	e7e3      	b.n	800b564 <__mdiff+0x28>
 800b59c:	f100 0b14 	add.w	fp, r0, #20
 800b5a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b5a4:	f109 0310 	add.w	r3, r9, #16
 800b5a8:	60c5      	str	r5, [r0, #12]
 800b5aa:	f04f 0c00 	mov.w	ip, #0
 800b5ae:	f109 0514 	add.w	r5, r9, #20
 800b5b2:	46d9      	mov	r9, fp
 800b5b4:	6926      	ldr	r6, [r4, #16]
 800b5b6:	f104 0e14 	add.w	lr, r4, #20
 800b5ba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b5be:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b5c2:	9301      	str	r3, [sp, #4]
 800b5c4:	9b01      	ldr	r3, [sp, #4]
 800b5c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b5ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b5ce:	b281      	uxth	r1, r0
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	fa1f f38a 	uxth.w	r3, sl
 800b5d6:	1a5b      	subs	r3, r3, r1
 800b5d8:	0c00      	lsrs	r0, r0, #16
 800b5da:	4463      	add	r3, ip
 800b5dc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b5e0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b5ea:	4576      	cmp	r6, lr
 800b5ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5f0:	f849 3b04 	str.w	r3, [r9], #4
 800b5f4:	d8e6      	bhi.n	800b5c4 <__mdiff+0x88>
 800b5f6:	1b33      	subs	r3, r6, r4
 800b5f8:	3b15      	subs	r3, #21
 800b5fa:	f023 0303 	bic.w	r3, r3, #3
 800b5fe:	3415      	adds	r4, #21
 800b600:	3304      	adds	r3, #4
 800b602:	42a6      	cmp	r6, r4
 800b604:	bf38      	it	cc
 800b606:	2304      	movcc	r3, #4
 800b608:	441d      	add	r5, r3
 800b60a:	445b      	add	r3, fp
 800b60c:	461e      	mov	r6, r3
 800b60e:	462c      	mov	r4, r5
 800b610:	4544      	cmp	r4, r8
 800b612:	d30e      	bcc.n	800b632 <__mdiff+0xf6>
 800b614:	f108 0103 	add.w	r1, r8, #3
 800b618:	1b49      	subs	r1, r1, r5
 800b61a:	f021 0103 	bic.w	r1, r1, #3
 800b61e:	3d03      	subs	r5, #3
 800b620:	45a8      	cmp	r8, r5
 800b622:	bf38      	it	cc
 800b624:	2100      	movcc	r1, #0
 800b626:	440b      	add	r3, r1
 800b628:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b62c:	b199      	cbz	r1, 800b656 <__mdiff+0x11a>
 800b62e:	6117      	str	r7, [r2, #16]
 800b630:	e79e      	b.n	800b570 <__mdiff+0x34>
 800b632:	46e6      	mov	lr, ip
 800b634:	f854 1b04 	ldr.w	r1, [r4], #4
 800b638:	fa1f fc81 	uxth.w	ip, r1
 800b63c:	44f4      	add	ip, lr
 800b63e:	0c08      	lsrs	r0, r1, #16
 800b640:	4471      	add	r1, lr
 800b642:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b646:	b289      	uxth	r1, r1
 800b648:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b64c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b650:	f846 1b04 	str.w	r1, [r6], #4
 800b654:	e7dc      	b.n	800b610 <__mdiff+0xd4>
 800b656:	3f01      	subs	r7, #1
 800b658:	e7e6      	b.n	800b628 <__mdiff+0xec>
 800b65a:	bf00      	nop
 800b65c:	0800f292 	.word	0x0800f292
 800b660:	0800f2a3 	.word	0x0800f2a3

0800b664 <__d2b>:
 800b664:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b668:	2101      	movs	r1, #1
 800b66a:	4690      	mov	r8, r2
 800b66c:	4699      	mov	r9, r3
 800b66e:	9e08      	ldr	r6, [sp, #32]
 800b670:	f7ff fcd0 	bl	800b014 <_Balloc>
 800b674:	4604      	mov	r4, r0
 800b676:	b930      	cbnz	r0, 800b686 <__d2b+0x22>
 800b678:	4602      	mov	r2, r0
 800b67a:	f240 310f 	movw	r1, #783	@ 0x30f
 800b67e:	4b23      	ldr	r3, [pc, #140]	@ (800b70c <__d2b+0xa8>)
 800b680:	4823      	ldr	r0, [pc, #140]	@ (800b710 <__d2b+0xac>)
 800b682:	f000 fa7f 	bl	800bb84 <__assert_func>
 800b686:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b68a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b68e:	b10d      	cbz	r5, 800b694 <__d2b+0x30>
 800b690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b694:	9301      	str	r3, [sp, #4]
 800b696:	f1b8 0300 	subs.w	r3, r8, #0
 800b69a:	d024      	beq.n	800b6e6 <__d2b+0x82>
 800b69c:	4668      	mov	r0, sp
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	f7ff fd7f 	bl	800b1a2 <__lo0bits>
 800b6a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6a8:	b1d8      	cbz	r0, 800b6e2 <__d2b+0x7e>
 800b6aa:	f1c0 0320 	rsb	r3, r0, #32
 800b6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b2:	430b      	orrs	r3, r1
 800b6b4:	40c2      	lsrs	r2, r0
 800b6b6:	6163      	str	r3, [r4, #20]
 800b6b8:	9201      	str	r2, [sp, #4]
 800b6ba:	9b01      	ldr	r3, [sp, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	bf0c      	ite	eq
 800b6c0:	2201      	moveq	r2, #1
 800b6c2:	2202      	movne	r2, #2
 800b6c4:	61a3      	str	r3, [r4, #24]
 800b6c6:	6122      	str	r2, [r4, #16]
 800b6c8:	b1ad      	cbz	r5, 800b6f6 <__d2b+0x92>
 800b6ca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6ce:	4405      	add	r5, r0
 800b6d0:	6035      	str	r5, [r6, #0]
 800b6d2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d8:	6018      	str	r0, [r3, #0]
 800b6da:	4620      	mov	r0, r4
 800b6dc:	b002      	add	sp, #8
 800b6de:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b6e2:	6161      	str	r1, [r4, #20]
 800b6e4:	e7e9      	b.n	800b6ba <__d2b+0x56>
 800b6e6:	a801      	add	r0, sp, #4
 800b6e8:	f7ff fd5b 	bl	800b1a2 <__lo0bits>
 800b6ec:	9b01      	ldr	r3, [sp, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	6163      	str	r3, [r4, #20]
 800b6f2:	3020      	adds	r0, #32
 800b6f4:	e7e7      	b.n	800b6c6 <__d2b+0x62>
 800b6f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b6fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6fe:	6030      	str	r0, [r6, #0]
 800b700:	6918      	ldr	r0, [r3, #16]
 800b702:	f7ff fd2f 	bl	800b164 <__hi0bits>
 800b706:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b70a:	e7e4      	b.n	800b6d6 <__d2b+0x72>
 800b70c:	0800f292 	.word	0x0800f292
 800b710:	0800f2a3 	.word	0x0800f2a3

0800b714 <__ssputs_r>:
 800b714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b718:	461f      	mov	r7, r3
 800b71a:	688e      	ldr	r6, [r1, #8]
 800b71c:	4682      	mov	sl, r0
 800b71e:	42be      	cmp	r6, r7
 800b720:	460c      	mov	r4, r1
 800b722:	4690      	mov	r8, r2
 800b724:	680b      	ldr	r3, [r1, #0]
 800b726:	d82d      	bhi.n	800b784 <__ssputs_r+0x70>
 800b728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b72c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b730:	d026      	beq.n	800b780 <__ssputs_r+0x6c>
 800b732:	6965      	ldr	r5, [r4, #20]
 800b734:	6909      	ldr	r1, [r1, #16]
 800b736:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b73a:	eba3 0901 	sub.w	r9, r3, r1
 800b73e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b742:	1c7b      	adds	r3, r7, #1
 800b744:	444b      	add	r3, r9
 800b746:	106d      	asrs	r5, r5, #1
 800b748:	429d      	cmp	r5, r3
 800b74a:	bf38      	it	cc
 800b74c:	461d      	movcc	r5, r3
 800b74e:	0553      	lsls	r3, r2, #21
 800b750:	d527      	bpl.n	800b7a2 <__ssputs_r+0x8e>
 800b752:	4629      	mov	r1, r5
 800b754:	f7ff fbd2 	bl	800aefc <_malloc_r>
 800b758:	4606      	mov	r6, r0
 800b75a:	b360      	cbz	r0, 800b7b6 <__ssputs_r+0xa2>
 800b75c:	464a      	mov	r2, r9
 800b75e:	6921      	ldr	r1, [r4, #16]
 800b760:	f000 fa02 	bl	800bb68 <memcpy>
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b76a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b76e:	81a3      	strh	r3, [r4, #12]
 800b770:	6126      	str	r6, [r4, #16]
 800b772:	444e      	add	r6, r9
 800b774:	6026      	str	r6, [r4, #0]
 800b776:	463e      	mov	r6, r7
 800b778:	6165      	str	r5, [r4, #20]
 800b77a:	eba5 0509 	sub.w	r5, r5, r9
 800b77e:	60a5      	str	r5, [r4, #8]
 800b780:	42be      	cmp	r6, r7
 800b782:	d900      	bls.n	800b786 <__ssputs_r+0x72>
 800b784:	463e      	mov	r6, r7
 800b786:	4632      	mov	r2, r6
 800b788:	4641      	mov	r1, r8
 800b78a:	6820      	ldr	r0, [r4, #0]
 800b78c:	f000 f9c2 	bl	800bb14 <memmove>
 800b790:	2000      	movs	r0, #0
 800b792:	68a3      	ldr	r3, [r4, #8]
 800b794:	1b9b      	subs	r3, r3, r6
 800b796:	60a3      	str	r3, [r4, #8]
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	4433      	add	r3, r6
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a2:	462a      	mov	r2, r5
 800b7a4:	f000 fa32 	bl	800bc0c <_realloc_r>
 800b7a8:	4606      	mov	r6, r0
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d1e0      	bne.n	800b770 <__ssputs_r+0x5c>
 800b7ae:	4650      	mov	r0, sl
 800b7b0:	6921      	ldr	r1, [r4, #16]
 800b7b2:	f7ff fb31 	bl	800ae18 <_free_r>
 800b7b6:	230c      	movs	r3, #12
 800b7b8:	f8ca 3000 	str.w	r3, [sl]
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7c6:	81a3      	strh	r3, [r4, #12]
 800b7c8:	e7e9      	b.n	800b79e <__ssputs_r+0x8a>
	...

0800b7cc <_svfiprintf_r>:
 800b7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d0:	4698      	mov	r8, r3
 800b7d2:	898b      	ldrh	r3, [r1, #12]
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	061b      	lsls	r3, r3, #24
 800b7d8:	460d      	mov	r5, r1
 800b7da:	4614      	mov	r4, r2
 800b7dc:	b09d      	sub	sp, #116	@ 0x74
 800b7de:	d510      	bpl.n	800b802 <_svfiprintf_r+0x36>
 800b7e0:	690b      	ldr	r3, [r1, #16]
 800b7e2:	b973      	cbnz	r3, 800b802 <_svfiprintf_r+0x36>
 800b7e4:	2140      	movs	r1, #64	@ 0x40
 800b7e6:	f7ff fb89 	bl	800aefc <_malloc_r>
 800b7ea:	6028      	str	r0, [r5, #0]
 800b7ec:	6128      	str	r0, [r5, #16]
 800b7ee:	b930      	cbnz	r0, 800b7fe <_svfiprintf_r+0x32>
 800b7f0:	230c      	movs	r3, #12
 800b7f2:	603b      	str	r3, [r7, #0]
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	b01d      	add	sp, #116	@ 0x74
 800b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fe:	2340      	movs	r3, #64	@ 0x40
 800b800:	616b      	str	r3, [r5, #20]
 800b802:	2300      	movs	r3, #0
 800b804:	9309      	str	r3, [sp, #36]	@ 0x24
 800b806:	2320      	movs	r3, #32
 800b808:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b80c:	2330      	movs	r3, #48	@ 0x30
 800b80e:	f04f 0901 	mov.w	r9, #1
 800b812:	f8cd 800c 	str.w	r8, [sp, #12]
 800b816:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b9b0 <_svfiprintf_r+0x1e4>
 800b81a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b81e:	4623      	mov	r3, r4
 800b820:	469a      	mov	sl, r3
 800b822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b826:	b10a      	cbz	r2, 800b82c <_svfiprintf_r+0x60>
 800b828:	2a25      	cmp	r2, #37	@ 0x25
 800b82a:	d1f9      	bne.n	800b820 <_svfiprintf_r+0x54>
 800b82c:	ebba 0b04 	subs.w	fp, sl, r4
 800b830:	d00b      	beq.n	800b84a <_svfiprintf_r+0x7e>
 800b832:	465b      	mov	r3, fp
 800b834:	4622      	mov	r2, r4
 800b836:	4629      	mov	r1, r5
 800b838:	4638      	mov	r0, r7
 800b83a:	f7ff ff6b 	bl	800b714 <__ssputs_r>
 800b83e:	3001      	adds	r0, #1
 800b840:	f000 80a7 	beq.w	800b992 <_svfiprintf_r+0x1c6>
 800b844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b846:	445a      	add	r2, fp
 800b848:	9209      	str	r2, [sp, #36]	@ 0x24
 800b84a:	f89a 3000 	ldrb.w	r3, [sl]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 809f 	beq.w	800b992 <_svfiprintf_r+0x1c6>
 800b854:	2300      	movs	r3, #0
 800b856:	f04f 32ff 	mov.w	r2, #4294967295
 800b85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b85e:	f10a 0a01 	add.w	sl, sl, #1
 800b862:	9304      	str	r3, [sp, #16]
 800b864:	9307      	str	r3, [sp, #28]
 800b866:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b86a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b86c:	4654      	mov	r4, sl
 800b86e:	2205      	movs	r2, #5
 800b870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b874:	484e      	ldr	r0, [pc, #312]	@ (800b9b0 <_svfiprintf_r+0x1e4>)
 800b876:	f7fe fc70 	bl	800a15a <memchr>
 800b87a:	9a04      	ldr	r2, [sp, #16]
 800b87c:	b9d8      	cbnz	r0, 800b8b6 <_svfiprintf_r+0xea>
 800b87e:	06d0      	lsls	r0, r2, #27
 800b880:	bf44      	itt	mi
 800b882:	2320      	movmi	r3, #32
 800b884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b888:	0711      	lsls	r1, r2, #28
 800b88a:	bf44      	itt	mi
 800b88c:	232b      	movmi	r3, #43	@ 0x2b
 800b88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b892:	f89a 3000 	ldrb.w	r3, [sl]
 800b896:	2b2a      	cmp	r3, #42	@ 0x2a
 800b898:	d015      	beq.n	800b8c6 <_svfiprintf_r+0xfa>
 800b89a:	4654      	mov	r4, sl
 800b89c:	2000      	movs	r0, #0
 800b89e:	f04f 0c0a 	mov.w	ip, #10
 800b8a2:	9a07      	ldr	r2, [sp, #28]
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8aa:	3b30      	subs	r3, #48	@ 0x30
 800b8ac:	2b09      	cmp	r3, #9
 800b8ae:	d94b      	bls.n	800b948 <_svfiprintf_r+0x17c>
 800b8b0:	b1b0      	cbz	r0, 800b8e0 <_svfiprintf_r+0x114>
 800b8b2:	9207      	str	r2, [sp, #28]
 800b8b4:	e014      	b.n	800b8e0 <_svfiprintf_r+0x114>
 800b8b6:	eba0 0308 	sub.w	r3, r0, r8
 800b8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	46a2      	mov	sl, r4
 800b8c2:	9304      	str	r3, [sp, #16]
 800b8c4:	e7d2      	b.n	800b86c <_svfiprintf_r+0xa0>
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	1d19      	adds	r1, r3, #4
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	9103      	str	r1, [sp, #12]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	bfbb      	ittet	lt
 800b8d2:	425b      	neglt	r3, r3
 800b8d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b8d8:	9307      	strge	r3, [sp, #28]
 800b8da:	9307      	strlt	r3, [sp, #28]
 800b8dc:	bfb8      	it	lt
 800b8de:	9204      	strlt	r2, [sp, #16]
 800b8e0:	7823      	ldrb	r3, [r4, #0]
 800b8e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8e4:	d10a      	bne.n	800b8fc <_svfiprintf_r+0x130>
 800b8e6:	7863      	ldrb	r3, [r4, #1]
 800b8e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8ea:	d132      	bne.n	800b952 <_svfiprintf_r+0x186>
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	3402      	adds	r4, #2
 800b8f0:	1d1a      	adds	r2, r3, #4
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	9203      	str	r2, [sp, #12]
 800b8f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8fa:	9305      	str	r3, [sp, #20]
 800b8fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b9b4 <_svfiprintf_r+0x1e8>
 800b900:	2203      	movs	r2, #3
 800b902:	4650      	mov	r0, sl
 800b904:	7821      	ldrb	r1, [r4, #0]
 800b906:	f7fe fc28 	bl	800a15a <memchr>
 800b90a:	b138      	cbz	r0, 800b91c <_svfiprintf_r+0x150>
 800b90c:	2240      	movs	r2, #64	@ 0x40
 800b90e:	9b04      	ldr	r3, [sp, #16]
 800b910:	eba0 000a 	sub.w	r0, r0, sl
 800b914:	4082      	lsls	r2, r0
 800b916:	4313      	orrs	r3, r2
 800b918:	3401      	adds	r4, #1
 800b91a:	9304      	str	r3, [sp, #16]
 800b91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b920:	2206      	movs	r2, #6
 800b922:	4825      	ldr	r0, [pc, #148]	@ (800b9b8 <_svfiprintf_r+0x1ec>)
 800b924:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b928:	f7fe fc17 	bl	800a15a <memchr>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	d036      	beq.n	800b99e <_svfiprintf_r+0x1d2>
 800b930:	4b22      	ldr	r3, [pc, #136]	@ (800b9bc <_svfiprintf_r+0x1f0>)
 800b932:	bb1b      	cbnz	r3, 800b97c <_svfiprintf_r+0x1b0>
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	3307      	adds	r3, #7
 800b938:	f023 0307 	bic.w	r3, r3, #7
 800b93c:	3308      	adds	r3, #8
 800b93e:	9303      	str	r3, [sp, #12]
 800b940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b942:	4433      	add	r3, r6
 800b944:	9309      	str	r3, [sp, #36]	@ 0x24
 800b946:	e76a      	b.n	800b81e <_svfiprintf_r+0x52>
 800b948:	460c      	mov	r4, r1
 800b94a:	2001      	movs	r0, #1
 800b94c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b950:	e7a8      	b.n	800b8a4 <_svfiprintf_r+0xd8>
 800b952:	2300      	movs	r3, #0
 800b954:	f04f 0c0a 	mov.w	ip, #10
 800b958:	4619      	mov	r1, r3
 800b95a:	3401      	adds	r4, #1
 800b95c:	9305      	str	r3, [sp, #20]
 800b95e:	4620      	mov	r0, r4
 800b960:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b964:	3a30      	subs	r2, #48	@ 0x30
 800b966:	2a09      	cmp	r2, #9
 800b968:	d903      	bls.n	800b972 <_svfiprintf_r+0x1a6>
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0c6      	beq.n	800b8fc <_svfiprintf_r+0x130>
 800b96e:	9105      	str	r1, [sp, #20]
 800b970:	e7c4      	b.n	800b8fc <_svfiprintf_r+0x130>
 800b972:	4604      	mov	r4, r0
 800b974:	2301      	movs	r3, #1
 800b976:	fb0c 2101 	mla	r1, ip, r1, r2
 800b97a:	e7f0      	b.n	800b95e <_svfiprintf_r+0x192>
 800b97c:	ab03      	add	r3, sp, #12
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	462a      	mov	r2, r5
 800b982:	4638      	mov	r0, r7
 800b984:	4b0e      	ldr	r3, [pc, #56]	@ (800b9c0 <_svfiprintf_r+0x1f4>)
 800b986:	a904      	add	r1, sp, #16
 800b988:	f7fd fe84 	bl	8009694 <_printf_float>
 800b98c:	1c42      	adds	r2, r0, #1
 800b98e:	4606      	mov	r6, r0
 800b990:	d1d6      	bne.n	800b940 <_svfiprintf_r+0x174>
 800b992:	89ab      	ldrh	r3, [r5, #12]
 800b994:	065b      	lsls	r3, r3, #25
 800b996:	f53f af2d 	bmi.w	800b7f4 <_svfiprintf_r+0x28>
 800b99a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b99c:	e72c      	b.n	800b7f8 <_svfiprintf_r+0x2c>
 800b99e:	ab03      	add	r3, sp, #12
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	462a      	mov	r2, r5
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	4b06      	ldr	r3, [pc, #24]	@ (800b9c0 <_svfiprintf_r+0x1f4>)
 800b9a8:	a904      	add	r1, sp, #16
 800b9aa:	f7fe f911 	bl	8009bd0 <_printf_i>
 800b9ae:	e7ed      	b.n	800b98c <_svfiprintf_r+0x1c0>
 800b9b0:	0800f3f8 	.word	0x0800f3f8
 800b9b4:	0800f3fe 	.word	0x0800f3fe
 800b9b8:	0800f402 	.word	0x0800f402
 800b9bc:	08009695 	.word	0x08009695
 800b9c0:	0800b715 	.word	0x0800b715

0800b9c4 <__sflush_r>:
 800b9c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ca:	0716      	lsls	r6, r2, #28
 800b9cc:	4605      	mov	r5, r0
 800b9ce:	460c      	mov	r4, r1
 800b9d0:	d454      	bmi.n	800ba7c <__sflush_r+0xb8>
 800b9d2:	684b      	ldr	r3, [r1, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	dc02      	bgt.n	800b9de <__sflush_r+0x1a>
 800b9d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	dd48      	ble.n	800ba70 <__sflush_r+0xac>
 800b9de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9e0:	2e00      	cmp	r6, #0
 800b9e2:	d045      	beq.n	800ba70 <__sflush_r+0xac>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b9ea:	682f      	ldr	r7, [r5, #0]
 800b9ec:	6a21      	ldr	r1, [r4, #32]
 800b9ee:	602b      	str	r3, [r5, #0]
 800b9f0:	d030      	beq.n	800ba54 <__sflush_r+0x90>
 800b9f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	0759      	lsls	r1, r3, #29
 800b9f8:	d505      	bpl.n	800ba06 <__sflush_r+0x42>
 800b9fa:	6863      	ldr	r3, [r4, #4]
 800b9fc:	1ad2      	subs	r2, r2, r3
 800b9fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ba00:	b10b      	cbz	r3, 800ba06 <__sflush_r+0x42>
 800ba02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ba04:	1ad2      	subs	r2, r2, r3
 800ba06:	2300      	movs	r3, #0
 800ba08:	4628      	mov	r0, r5
 800ba0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba0c:	6a21      	ldr	r1, [r4, #32]
 800ba0e:	47b0      	blx	r6
 800ba10:	1c43      	adds	r3, r0, #1
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	d106      	bne.n	800ba24 <__sflush_r+0x60>
 800ba16:	6829      	ldr	r1, [r5, #0]
 800ba18:	291d      	cmp	r1, #29
 800ba1a:	d82b      	bhi.n	800ba74 <__sflush_r+0xb0>
 800ba1c:	4a28      	ldr	r2, [pc, #160]	@ (800bac0 <__sflush_r+0xfc>)
 800ba1e:	410a      	asrs	r2, r1
 800ba20:	07d6      	lsls	r6, r2, #31
 800ba22:	d427      	bmi.n	800ba74 <__sflush_r+0xb0>
 800ba24:	2200      	movs	r2, #0
 800ba26:	6062      	str	r2, [r4, #4]
 800ba28:	6922      	ldr	r2, [r4, #16]
 800ba2a:	04d9      	lsls	r1, r3, #19
 800ba2c:	6022      	str	r2, [r4, #0]
 800ba2e:	d504      	bpl.n	800ba3a <__sflush_r+0x76>
 800ba30:	1c42      	adds	r2, r0, #1
 800ba32:	d101      	bne.n	800ba38 <__sflush_r+0x74>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b903      	cbnz	r3, 800ba3a <__sflush_r+0x76>
 800ba38:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba3c:	602f      	str	r7, [r5, #0]
 800ba3e:	b1b9      	cbz	r1, 800ba70 <__sflush_r+0xac>
 800ba40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba44:	4299      	cmp	r1, r3
 800ba46:	d002      	beq.n	800ba4e <__sflush_r+0x8a>
 800ba48:	4628      	mov	r0, r5
 800ba4a:	f7ff f9e5 	bl	800ae18 <_free_r>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba52:	e00d      	b.n	800ba70 <__sflush_r+0xac>
 800ba54:	2301      	movs	r3, #1
 800ba56:	4628      	mov	r0, r5
 800ba58:	47b0      	blx	r6
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	1c50      	adds	r0, r2, #1
 800ba5e:	d1c9      	bne.n	800b9f4 <__sflush_r+0x30>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d0c6      	beq.n	800b9f4 <__sflush_r+0x30>
 800ba66:	2b1d      	cmp	r3, #29
 800ba68:	d001      	beq.n	800ba6e <__sflush_r+0xaa>
 800ba6a:	2b16      	cmp	r3, #22
 800ba6c:	d11d      	bne.n	800baaa <__sflush_r+0xe6>
 800ba6e:	602f      	str	r7, [r5, #0]
 800ba70:	2000      	movs	r0, #0
 800ba72:	e021      	b.n	800bab8 <__sflush_r+0xf4>
 800ba74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba78:	b21b      	sxth	r3, r3
 800ba7a:	e01a      	b.n	800bab2 <__sflush_r+0xee>
 800ba7c:	690f      	ldr	r7, [r1, #16]
 800ba7e:	2f00      	cmp	r7, #0
 800ba80:	d0f6      	beq.n	800ba70 <__sflush_r+0xac>
 800ba82:	0793      	lsls	r3, r2, #30
 800ba84:	bf18      	it	ne
 800ba86:	2300      	movne	r3, #0
 800ba88:	680e      	ldr	r6, [r1, #0]
 800ba8a:	bf08      	it	eq
 800ba8c:	694b      	ldreq	r3, [r1, #20]
 800ba8e:	1bf6      	subs	r6, r6, r7
 800ba90:	600f      	str	r7, [r1, #0]
 800ba92:	608b      	str	r3, [r1, #8]
 800ba94:	2e00      	cmp	r6, #0
 800ba96:	ddeb      	ble.n	800ba70 <__sflush_r+0xac>
 800ba98:	4633      	mov	r3, r6
 800ba9a:	463a      	mov	r2, r7
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	6a21      	ldr	r1, [r4, #32]
 800baa0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800baa4:	47e0      	blx	ip
 800baa6:	2800      	cmp	r0, #0
 800baa8:	dc07      	bgt.n	800baba <__sflush_r+0xf6>
 800baaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bab2:	f04f 30ff 	mov.w	r0, #4294967295
 800bab6:	81a3      	strh	r3, [r4, #12]
 800bab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baba:	4407      	add	r7, r0
 800babc:	1a36      	subs	r6, r6, r0
 800babe:	e7e9      	b.n	800ba94 <__sflush_r+0xd0>
 800bac0:	dfbffffe 	.word	0xdfbffffe

0800bac4 <_fflush_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	690b      	ldr	r3, [r1, #16]
 800bac8:	4605      	mov	r5, r0
 800baca:	460c      	mov	r4, r1
 800bacc:	b913      	cbnz	r3, 800bad4 <_fflush_r+0x10>
 800bace:	2500      	movs	r5, #0
 800bad0:	4628      	mov	r0, r5
 800bad2:	bd38      	pop	{r3, r4, r5, pc}
 800bad4:	b118      	cbz	r0, 800bade <_fflush_r+0x1a>
 800bad6:	6a03      	ldr	r3, [r0, #32]
 800bad8:	b90b      	cbnz	r3, 800bade <_fflush_r+0x1a>
 800bada:	f7fe fa25 	bl	8009f28 <__sinit>
 800bade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d0f3      	beq.n	800bace <_fflush_r+0xa>
 800bae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bae8:	07d0      	lsls	r0, r2, #31
 800baea:	d404      	bmi.n	800baf6 <_fflush_r+0x32>
 800baec:	0599      	lsls	r1, r3, #22
 800baee:	d402      	bmi.n	800baf6 <_fflush_r+0x32>
 800baf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800baf2:	f7fe fb30 	bl	800a156 <__retarget_lock_acquire_recursive>
 800baf6:	4628      	mov	r0, r5
 800baf8:	4621      	mov	r1, r4
 800bafa:	f7ff ff63 	bl	800b9c4 <__sflush_r>
 800bafe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb00:	4605      	mov	r5, r0
 800bb02:	07da      	lsls	r2, r3, #31
 800bb04:	d4e4      	bmi.n	800bad0 <_fflush_r+0xc>
 800bb06:	89a3      	ldrh	r3, [r4, #12]
 800bb08:	059b      	lsls	r3, r3, #22
 800bb0a:	d4e1      	bmi.n	800bad0 <_fflush_r+0xc>
 800bb0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb0e:	f7fe fb23 	bl	800a158 <__retarget_lock_release_recursive>
 800bb12:	e7dd      	b.n	800bad0 <_fflush_r+0xc>

0800bb14 <memmove>:
 800bb14:	4288      	cmp	r0, r1
 800bb16:	b510      	push	{r4, lr}
 800bb18:	eb01 0402 	add.w	r4, r1, r2
 800bb1c:	d902      	bls.n	800bb24 <memmove+0x10>
 800bb1e:	4284      	cmp	r4, r0
 800bb20:	4623      	mov	r3, r4
 800bb22:	d807      	bhi.n	800bb34 <memmove+0x20>
 800bb24:	1e43      	subs	r3, r0, #1
 800bb26:	42a1      	cmp	r1, r4
 800bb28:	d008      	beq.n	800bb3c <memmove+0x28>
 800bb2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb32:	e7f8      	b.n	800bb26 <memmove+0x12>
 800bb34:	4601      	mov	r1, r0
 800bb36:	4402      	add	r2, r0
 800bb38:	428a      	cmp	r2, r1
 800bb3a:	d100      	bne.n	800bb3e <memmove+0x2a>
 800bb3c:	bd10      	pop	{r4, pc}
 800bb3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb46:	e7f7      	b.n	800bb38 <memmove+0x24>

0800bb48 <_sbrk_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	4d05      	ldr	r5, [pc, #20]	@ (800bb64 <_sbrk_r+0x1c>)
 800bb4e:	4604      	mov	r4, r0
 800bb50:	4608      	mov	r0, r1
 800bb52:	602b      	str	r3, [r5, #0]
 800bb54:	f7fb fda0 	bl	8007698 <_sbrk>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d102      	bne.n	800bb62 <_sbrk_r+0x1a>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	b103      	cbz	r3, 800bb62 <_sbrk_r+0x1a>
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	200003c0 	.word	0x200003c0

0800bb68 <memcpy>:
 800bb68:	440a      	add	r2, r1
 800bb6a:	4291      	cmp	r1, r2
 800bb6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb70:	d100      	bne.n	800bb74 <memcpy+0xc>
 800bb72:	4770      	bx	lr
 800bb74:	b510      	push	{r4, lr}
 800bb76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb7a:	4291      	cmp	r1, r2
 800bb7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb80:	d1f9      	bne.n	800bb76 <memcpy+0xe>
 800bb82:	bd10      	pop	{r4, pc}

0800bb84 <__assert_func>:
 800bb84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb86:	4614      	mov	r4, r2
 800bb88:	461a      	mov	r2, r3
 800bb8a:	4b09      	ldr	r3, [pc, #36]	@ (800bbb0 <__assert_func+0x2c>)
 800bb8c:	4605      	mov	r5, r0
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68d8      	ldr	r0, [r3, #12]
 800bb92:	b954      	cbnz	r4, 800bbaa <__assert_func+0x26>
 800bb94:	4b07      	ldr	r3, [pc, #28]	@ (800bbb4 <__assert_func+0x30>)
 800bb96:	461c      	mov	r4, r3
 800bb98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb9c:	9100      	str	r1, [sp, #0]
 800bb9e:	462b      	mov	r3, r5
 800bba0:	4905      	ldr	r1, [pc, #20]	@ (800bbb8 <__assert_func+0x34>)
 800bba2:	f000 f86f 	bl	800bc84 <fiprintf>
 800bba6:	f000 f87f 	bl	800bca8 <abort>
 800bbaa:	4b04      	ldr	r3, [pc, #16]	@ (800bbbc <__assert_func+0x38>)
 800bbac:	e7f4      	b.n	800bb98 <__assert_func+0x14>
 800bbae:	bf00      	nop
 800bbb0:	2000001c 	.word	0x2000001c
 800bbb4:	0800f44e 	.word	0x0800f44e
 800bbb8:	0800f420 	.word	0x0800f420
 800bbbc:	0800f413 	.word	0x0800f413

0800bbc0 <_calloc_r>:
 800bbc0:	b570      	push	{r4, r5, r6, lr}
 800bbc2:	fba1 5402 	umull	r5, r4, r1, r2
 800bbc6:	b93c      	cbnz	r4, 800bbd8 <_calloc_r+0x18>
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f7ff f997 	bl	800aefc <_malloc_r>
 800bbce:	4606      	mov	r6, r0
 800bbd0:	b928      	cbnz	r0, 800bbde <_calloc_r+0x1e>
 800bbd2:	2600      	movs	r6, #0
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	bd70      	pop	{r4, r5, r6, pc}
 800bbd8:	220c      	movs	r2, #12
 800bbda:	6002      	str	r2, [r0, #0]
 800bbdc:	e7f9      	b.n	800bbd2 <_calloc_r+0x12>
 800bbde:	462a      	mov	r2, r5
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	f7fe fa3a 	bl	800a05a <memset>
 800bbe6:	e7f5      	b.n	800bbd4 <_calloc_r+0x14>

0800bbe8 <__ascii_mbtowc>:
 800bbe8:	b082      	sub	sp, #8
 800bbea:	b901      	cbnz	r1, 800bbee <__ascii_mbtowc+0x6>
 800bbec:	a901      	add	r1, sp, #4
 800bbee:	b142      	cbz	r2, 800bc02 <__ascii_mbtowc+0x1a>
 800bbf0:	b14b      	cbz	r3, 800bc06 <__ascii_mbtowc+0x1e>
 800bbf2:	7813      	ldrb	r3, [r2, #0]
 800bbf4:	600b      	str	r3, [r1, #0]
 800bbf6:	7812      	ldrb	r2, [r2, #0]
 800bbf8:	1e10      	subs	r0, r2, #0
 800bbfa:	bf18      	it	ne
 800bbfc:	2001      	movne	r0, #1
 800bbfe:	b002      	add	sp, #8
 800bc00:	4770      	bx	lr
 800bc02:	4610      	mov	r0, r2
 800bc04:	e7fb      	b.n	800bbfe <__ascii_mbtowc+0x16>
 800bc06:	f06f 0001 	mvn.w	r0, #1
 800bc0a:	e7f8      	b.n	800bbfe <__ascii_mbtowc+0x16>

0800bc0c <_realloc_r>:
 800bc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc10:	4680      	mov	r8, r0
 800bc12:	4615      	mov	r5, r2
 800bc14:	460c      	mov	r4, r1
 800bc16:	b921      	cbnz	r1, 800bc22 <_realloc_r+0x16>
 800bc18:	4611      	mov	r1, r2
 800bc1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1e:	f7ff b96d 	b.w	800aefc <_malloc_r>
 800bc22:	b92a      	cbnz	r2, 800bc30 <_realloc_r+0x24>
 800bc24:	f7ff f8f8 	bl	800ae18 <_free_r>
 800bc28:	2400      	movs	r4, #0
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc30:	f000 f841 	bl	800bcb6 <_malloc_usable_size_r>
 800bc34:	4285      	cmp	r5, r0
 800bc36:	4606      	mov	r6, r0
 800bc38:	d802      	bhi.n	800bc40 <_realloc_r+0x34>
 800bc3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc3e:	d8f4      	bhi.n	800bc2a <_realloc_r+0x1e>
 800bc40:	4629      	mov	r1, r5
 800bc42:	4640      	mov	r0, r8
 800bc44:	f7ff f95a 	bl	800aefc <_malloc_r>
 800bc48:	4607      	mov	r7, r0
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d0ec      	beq.n	800bc28 <_realloc_r+0x1c>
 800bc4e:	42b5      	cmp	r5, r6
 800bc50:	462a      	mov	r2, r5
 800bc52:	4621      	mov	r1, r4
 800bc54:	bf28      	it	cs
 800bc56:	4632      	movcs	r2, r6
 800bc58:	f7ff ff86 	bl	800bb68 <memcpy>
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	4640      	mov	r0, r8
 800bc60:	f7ff f8da 	bl	800ae18 <_free_r>
 800bc64:	463c      	mov	r4, r7
 800bc66:	e7e0      	b.n	800bc2a <_realloc_r+0x1e>

0800bc68 <__ascii_wctomb>:
 800bc68:	4603      	mov	r3, r0
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	b141      	cbz	r1, 800bc80 <__ascii_wctomb+0x18>
 800bc6e:	2aff      	cmp	r2, #255	@ 0xff
 800bc70:	d904      	bls.n	800bc7c <__ascii_wctomb+0x14>
 800bc72:	228a      	movs	r2, #138	@ 0x8a
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295
 800bc78:	601a      	str	r2, [r3, #0]
 800bc7a:	4770      	bx	lr
 800bc7c:	2001      	movs	r0, #1
 800bc7e:	700a      	strb	r2, [r1, #0]
 800bc80:	4770      	bx	lr
	...

0800bc84 <fiprintf>:
 800bc84:	b40e      	push	{r1, r2, r3}
 800bc86:	b503      	push	{r0, r1, lr}
 800bc88:	4601      	mov	r1, r0
 800bc8a:	ab03      	add	r3, sp, #12
 800bc8c:	4805      	ldr	r0, [pc, #20]	@ (800bca4 <fiprintf+0x20>)
 800bc8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc92:	6800      	ldr	r0, [r0, #0]
 800bc94:	9301      	str	r3, [sp, #4]
 800bc96:	f000 f83d 	bl	800bd14 <_vfiprintf_r>
 800bc9a:	b002      	add	sp, #8
 800bc9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bca0:	b003      	add	sp, #12
 800bca2:	4770      	bx	lr
 800bca4:	2000001c 	.word	0x2000001c

0800bca8 <abort>:
 800bca8:	2006      	movs	r0, #6
 800bcaa:	b508      	push	{r3, lr}
 800bcac:	f000 fa06 	bl	800c0bc <raise>
 800bcb0:	2001      	movs	r0, #1
 800bcb2:	f7fb fc7c 	bl	80075ae <_exit>

0800bcb6 <_malloc_usable_size_r>:
 800bcb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcba:	1f18      	subs	r0, r3, #4
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	bfbc      	itt	lt
 800bcc0:	580b      	ldrlt	r3, [r1, r0]
 800bcc2:	18c0      	addlt	r0, r0, r3
 800bcc4:	4770      	bx	lr

0800bcc6 <__sfputc_r>:
 800bcc6:	6893      	ldr	r3, [r2, #8]
 800bcc8:	b410      	push	{r4}
 800bcca:	3b01      	subs	r3, #1
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	6093      	str	r3, [r2, #8]
 800bcd0:	da07      	bge.n	800bce2 <__sfputc_r+0x1c>
 800bcd2:	6994      	ldr	r4, [r2, #24]
 800bcd4:	42a3      	cmp	r3, r4
 800bcd6:	db01      	blt.n	800bcdc <__sfputc_r+0x16>
 800bcd8:	290a      	cmp	r1, #10
 800bcda:	d102      	bne.n	800bce2 <__sfputc_r+0x1c>
 800bcdc:	bc10      	pop	{r4}
 800bcde:	f000 b931 	b.w	800bf44 <__swbuf_r>
 800bce2:	6813      	ldr	r3, [r2, #0]
 800bce4:	1c58      	adds	r0, r3, #1
 800bce6:	6010      	str	r0, [r2, #0]
 800bce8:	7019      	strb	r1, [r3, #0]
 800bcea:	4608      	mov	r0, r1
 800bcec:	bc10      	pop	{r4}
 800bcee:	4770      	bx	lr

0800bcf0 <__sfputs_r>:
 800bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	460f      	mov	r7, r1
 800bcf6:	4614      	mov	r4, r2
 800bcf8:	18d5      	adds	r5, r2, r3
 800bcfa:	42ac      	cmp	r4, r5
 800bcfc:	d101      	bne.n	800bd02 <__sfputs_r+0x12>
 800bcfe:	2000      	movs	r0, #0
 800bd00:	e007      	b.n	800bd12 <__sfputs_r+0x22>
 800bd02:	463a      	mov	r2, r7
 800bd04:	4630      	mov	r0, r6
 800bd06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd0a:	f7ff ffdc 	bl	800bcc6 <__sfputc_r>
 800bd0e:	1c43      	adds	r3, r0, #1
 800bd10:	d1f3      	bne.n	800bcfa <__sfputs_r+0xa>
 800bd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd14 <_vfiprintf_r>:
 800bd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd18:	460d      	mov	r5, r1
 800bd1a:	4614      	mov	r4, r2
 800bd1c:	4698      	mov	r8, r3
 800bd1e:	4606      	mov	r6, r0
 800bd20:	b09d      	sub	sp, #116	@ 0x74
 800bd22:	b118      	cbz	r0, 800bd2c <_vfiprintf_r+0x18>
 800bd24:	6a03      	ldr	r3, [r0, #32]
 800bd26:	b90b      	cbnz	r3, 800bd2c <_vfiprintf_r+0x18>
 800bd28:	f7fe f8fe 	bl	8009f28 <__sinit>
 800bd2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd2e:	07d9      	lsls	r1, r3, #31
 800bd30:	d405      	bmi.n	800bd3e <_vfiprintf_r+0x2a>
 800bd32:	89ab      	ldrh	r3, [r5, #12]
 800bd34:	059a      	lsls	r2, r3, #22
 800bd36:	d402      	bmi.n	800bd3e <_vfiprintf_r+0x2a>
 800bd38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd3a:	f7fe fa0c 	bl	800a156 <__retarget_lock_acquire_recursive>
 800bd3e:	89ab      	ldrh	r3, [r5, #12]
 800bd40:	071b      	lsls	r3, r3, #28
 800bd42:	d501      	bpl.n	800bd48 <_vfiprintf_r+0x34>
 800bd44:	692b      	ldr	r3, [r5, #16]
 800bd46:	b99b      	cbnz	r3, 800bd70 <_vfiprintf_r+0x5c>
 800bd48:	4629      	mov	r1, r5
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	f000 f938 	bl	800bfc0 <__swsetup_r>
 800bd50:	b170      	cbz	r0, 800bd70 <_vfiprintf_r+0x5c>
 800bd52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd54:	07dc      	lsls	r4, r3, #31
 800bd56:	d504      	bpl.n	800bd62 <_vfiprintf_r+0x4e>
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5c:	b01d      	add	sp, #116	@ 0x74
 800bd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd62:	89ab      	ldrh	r3, [r5, #12]
 800bd64:	0598      	lsls	r0, r3, #22
 800bd66:	d4f7      	bmi.n	800bd58 <_vfiprintf_r+0x44>
 800bd68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd6a:	f7fe f9f5 	bl	800a158 <__retarget_lock_release_recursive>
 800bd6e:	e7f3      	b.n	800bd58 <_vfiprintf_r+0x44>
 800bd70:	2300      	movs	r3, #0
 800bd72:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd74:	2320      	movs	r3, #32
 800bd76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd7a:	2330      	movs	r3, #48	@ 0x30
 800bd7c:	f04f 0901 	mov.w	r9, #1
 800bd80:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd84:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bf30 <_vfiprintf_r+0x21c>
 800bd88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd8c:	4623      	mov	r3, r4
 800bd8e:	469a      	mov	sl, r3
 800bd90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd94:	b10a      	cbz	r2, 800bd9a <_vfiprintf_r+0x86>
 800bd96:	2a25      	cmp	r2, #37	@ 0x25
 800bd98:	d1f9      	bne.n	800bd8e <_vfiprintf_r+0x7a>
 800bd9a:	ebba 0b04 	subs.w	fp, sl, r4
 800bd9e:	d00b      	beq.n	800bdb8 <_vfiprintf_r+0xa4>
 800bda0:	465b      	mov	r3, fp
 800bda2:	4622      	mov	r2, r4
 800bda4:	4629      	mov	r1, r5
 800bda6:	4630      	mov	r0, r6
 800bda8:	f7ff ffa2 	bl	800bcf0 <__sfputs_r>
 800bdac:	3001      	adds	r0, #1
 800bdae:	f000 80a7 	beq.w	800bf00 <_vfiprintf_r+0x1ec>
 800bdb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdb4:	445a      	add	r2, fp
 800bdb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f000 809f 	beq.w	800bf00 <_vfiprintf_r+0x1ec>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdcc:	f10a 0a01 	add.w	sl, sl, #1
 800bdd0:	9304      	str	r3, [sp, #16]
 800bdd2:	9307      	str	r3, [sp, #28]
 800bdd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdd8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdda:	4654      	mov	r4, sl
 800bddc:	2205      	movs	r2, #5
 800bdde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bde2:	4853      	ldr	r0, [pc, #332]	@ (800bf30 <_vfiprintf_r+0x21c>)
 800bde4:	f7fe f9b9 	bl	800a15a <memchr>
 800bde8:	9a04      	ldr	r2, [sp, #16]
 800bdea:	b9d8      	cbnz	r0, 800be24 <_vfiprintf_r+0x110>
 800bdec:	06d1      	lsls	r1, r2, #27
 800bdee:	bf44      	itt	mi
 800bdf0:	2320      	movmi	r3, #32
 800bdf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdf6:	0713      	lsls	r3, r2, #28
 800bdf8:	bf44      	itt	mi
 800bdfa:	232b      	movmi	r3, #43	@ 0x2b
 800bdfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be00:	f89a 3000 	ldrb.w	r3, [sl]
 800be04:	2b2a      	cmp	r3, #42	@ 0x2a
 800be06:	d015      	beq.n	800be34 <_vfiprintf_r+0x120>
 800be08:	4654      	mov	r4, sl
 800be0a:	2000      	movs	r0, #0
 800be0c:	f04f 0c0a 	mov.w	ip, #10
 800be10:	9a07      	ldr	r2, [sp, #28]
 800be12:	4621      	mov	r1, r4
 800be14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be18:	3b30      	subs	r3, #48	@ 0x30
 800be1a:	2b09      	cmp	r3, #9
 800be1c:	d94b      	bls.n	800beb6 <_vfiprintf_r+0x1a2>
 800be1e:	b1b0      	cbz	r0, 800be4e <_vfiprintf_r+0x13a>
 800be20:	9207      	str	r2, [sp, #28]
 800be22:	e014      	b.n	800be4e <_vfiprintf_r+0x13a>
 800be24:	eba0 0308 	sub.w	r3, r0, r8
 800be28:	fa09 f303 	lsl.w	r3, r9, r3
 800be2c:	4313      	orrs	r3, r2
 800be2e:	46a2      	mov	sl, r4
 800be30:	9304      	str	r3, [sp, #16]
 800be32:	e7d2      	b.n	800bdda <_vfiprintf_r+0xc6>
 800be34:	9b03      	ldr	r3, [sp, #12]
 800be36:	1d19      	adds	r1, r3, #4
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	9103      	str	r1, [sp, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	bfbb      	ittet	lt
 800be40:	425b      	neglt	r3, r3
 800be42:	f042 0202 	orrlt.w	r2, r2, #2
 800be46:	9307      	strge	r3, [sp, #28]
 800be48:	9307      	strlt	r3, [sp, #28]
 800be4a:	bfb8      	it	lt
 800be4c:	9204      	strlt	r2, [sp, #16]
 800be4e:	7823      	ldrb	r3, [r4, #0]
 800be50:	2b2e      	cmp	r3, #46	@ 0x2e
 800be52:	d10a      	bne.n	800be6a <_vfiprintf_r+0x156>
 800be54:	7863      	ldrb	r3, [r4, #1]
 800be56:	2b2a      	cmp	r3, #42	@ 0x2a
 800be58:	d132      	bne.n	800bec0 <_vfiprintf_r+0x1ac>
 800be5a:	9b03      	ldr	r3, [sp, #12]
 800be5c:	3402      	adds	r4, #2
 800be5e:	1d1a      	adds	r2, r3, #4
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	9203      	str	r2, [sp, #12]
 800be64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be68:	9305      	str	r3, [sp, #20]
 800be6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bf34 <_vfiprintf_r+0x220>
 800be6e:	2203      	movs	r2, #3
 800be70:	4650      	mov	r0, sl
 800be72:	7821      	ldrb	r1, [r4, #0]
 800be74:	f7fe f971 	bl	800a15a <memchr>
 800be78:	b138      	cbz	r0, 800be8a <_vfiprintf_r+0x176>
 800be7a:	2240      	movs	r2, #64	@ 0x40
 800be7c:	9b04      	ldr	r3, [sp, #16]
 800be7e:	eba0 000a 	sub.w	r0, r0, sl
 800be82:	4082      	lsls	r2, r0
 800be84:	4313      	orrs	r3, r2
 800be86:	3401      	adds	r4, #1
 800be88:	9304      	str	r3, [sp, #16]
 800be8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be8e:	2206      	movs	r2, #6
 800be90:	4829      	ldr	r0, [pc, #164]	@ (800bf38 <_vfiprintf_r+0x224>)
 800be92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be96:	f7fe f960 	bl	800a15a <memchr>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d03f      	beq.n	800bf1e <_vfiprintf_r+0x20a>
 800be9e:	4b27      	ldr	r3, [pc, #156]	@ (800bf3c <_vfiprintf_r+0x228>)
 800bea0:	bb1b      	cbnz	r3, 800beea <_vfiprintf_r+0x1d6>
 800bea2:	9b03      	ldr	r3, [sp, #12]
 800bea4:	3307      	adds	r3, #7
 800bea6:	f023 0307 	bic.w	r3, r3, #7
 800beaa:	3308      	adds	r3, #8
 800beac:	9303      	str	r3, [sp, #12]
 800beae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beb0:	443b      	add	r3, r7
 800beb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800beb4:	e76a      	b.n	800bd8c <_vfiprintf_r+0x78>
 800beb6:	460c      	mov	r4, r1
 800beb8:	2001      	movs	r0, #1
 800beba:	fb0c 3202 	mla	r2, ip, r2, r3
 800bebe:	e7a8      	b.n	800be12 <_vfiprintf_r+0xfe>
 800bec0:	2300      	movs	r3, #0
 800bec2:	f04f 0c0a 	mov.w	ip, #10
 800bec6:	4619      	mov	r1, r3
 800bec8:	3401      	adds	r4, #1
 800beca:	9305      	str	r3, [sp, #20]
 800becc:	4620      	mov	r0, r4
 800bece:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bed2:	3a30      	subs	r2, #48	@ 0x30
 800bed4:	2a09      	cmp	r2, #9
 800bed6:	d903      	bls.n	800bee0 <_vfiprintf_r+0x1cc>
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d0c6      	beq.n	800be6a <_vfiprintf_r+0x156>
 800bedc:	9105      	str	r1, [sp, #20]
 800bede:	e7c4      	b.n	800be6a <_vfiprintf_r+0x156>
 800bee0:	4604      	mov	r4, r0
 800bee2:	2301      	movs	r3, #1
 800bee4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bee8:	e7f0      	b.n	800becc <_vfiprintf_r+0x1b8>
 800beea:	ab03      	add	r3, sp, #12
 800beec:	9300      	str	r3, [sp, #0]
 800beee:	462a      	mov	r2, r5
 800bef0:	4630      	mov	r0, r6
 800bef2:	4b13      	ldr	r3, [pc, #76]	@ (800bf40 <_vfiprintf_r+0x22c>)
 800bef4:	a904      	add	r1, sp, #16
 800bef6:	f7fd fbcd 	bl	8009694 <_printf_float>
 800befa:	4607      	mov	r7, r0
 800befc:	1c78      	adds	r0, r7, #1
 800befe:	d1d6      	bne.n	800beae <_vfiprintf_r+0x19a>
 800bf00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf02:	07d9      	lsls	r1, r3, #31
 800bf04:	d405      	bmi.n	800bf12 <_vfiprintf_r+0x1fe>
 800bf06:	89ab      	ldrh	r3, [r5, #12]
 800bf08:	059a      	lsls	r2, r3, #22
 800bf0a:	d402      	bmi.n	800bf12 <_vfiprintf_r+0x1fe>
 800bf0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf0e:	f7fe f923 	bl	800a158 <__retarget_lock_release_recursive>
 800bf12:	89ab      	ldrh	r3, [r5, #12]
 800bf14:	065b      	lsls	r3, r3, #25
 800bf16:	f53f af1f 	bmi.w	800bd58 <_vfiprintf_r+0x44>
 800bf1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf1c:	e71e      	b.n	800bd5c <_vfiprintf_r+0x48>
 800bf1e:	ab03      	add	r3, sp, #12
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	462a      	mov	r2, r5
 800bf24:	4630      	mov	r0, r6
 800bf26:	4b06      	ldr	r3, [pc, #24]	@ (800bf40 <_vfiprintf_r+0x22c>)
 800bf28:	a904      	add	r1, sp, #16
 800bf2a:	f7fd fe51 	bl	8009bd0 <_printf_i>
 800bf2e:	e7e4      	b.n	800befa <_vfiprintf_r+0x1e6>
 800bf30:	0800f3f8 	.word	0x0800f3f8
 800bf34:	0800f3fe 	.word	0x0800f3fe
 800bf38:	0800f402 	.word	0x0800f402
 800bf3c:	08009695 	.word	0x08009695
 800bf40:	0800bcf1 	.word	0x0800bcf1

0800bf44 <__swbuf_r>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	460e      	mov	r6, r1
 800bf48:	4614      	mov	r4, r2
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	b118      	cbz	r0, 800bf56 <__swbuf_r+0x12>
 800bf4e:	6a03      	ldr	r3, [r0, #32]
 800bf50:	b90b      	cbnz	r3, 800bf56 <__swbuf_r+0x12>
 800bf52:	f7fd ffe9 	bl	8009f28 <__sinit>
 800bf56:	69a3      	ldr	r3, [r4, #24]
 800bf58:	60a3      	str	r3, [r4, #8]
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	071a      	lsls	r2, r3, #28
 800bf5e:	d501      	bpl.n	800bf64 <__swbuf_r+0x20>
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	b943      	cbnz	r3, 800bf76 <__swbuf_r+0x32>
 800bf64:	4621      	mov	r1, r4
 800bf66:	4628      	mov	r0, r5
 800bf68:	f000 f82a 	bl	800bfc0 <__swsetup_r>
 800bf6c:	b118      	cbz	r0, 800bf76 <__swbuf_r+0x32>
 800bf6e:	f04f 37ff 	mov.w	r7, #4294967295
 800bf72:	4638      	mov	r0, r7
 800bf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	6922      	ldr	r2, [r4, #16]
 800bf7a:	b2f6      	uxtb	r6, r6
 800bf7c:	1a98      	subs	r0, r3, r2
 800bf7e:	6963      	ldr	r3, [r4, #20]
 800bf80:	4637      	mov	r7, r6
 800bf82:	4283      	cmp	r3, r0
 800bf84:	dc05      	bgt.n	800bf92 <__swbuf_r+0x4e>
 800bf86:	4621      	mov	r1, r4
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f7ff fd9b 	bl	800bac4 <_fflush_r>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d1ed      	bne.n	800bf6e <__swbuf_r+0x2a>
 800bf92:	68a3      	ldr	r3, [r4, #8]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	60a3      	str	r3, [r4, #8]
 800bf98:	6823      	ldr	r3, [r4, #0]
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	6022      	str	r2, [r4, #0]
 800bf9e:	701e      	strb	r6, [r3, #0]
 800bfa0:	6962      	ldr	r2, [r4, #20]
 800bfa2:	1c43      	adds	r3, r0, #1
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d004      	beq.n	800bfb2 <__swbuf_r+0x6e>
 800bfa8:	89a3      	ldrh	r3, [r4, #12]
 800bfaa:	07db      	lsls	r3, r3, #31
 800bfac:	d5e1      	bpl.n	800bf72 <__swbuf_r+0x2e>
 800bfae:	2e0a      	cmp	r6, #10
 800bfb0:	d1df      	bne.n	800bf72 <__swbuf_r+0x2e>
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	f7ff fd85 	bl	800bac4 <_fflush_r>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d0d9      	beq.n	800bf72 <__swbuf_r+0x2e>
 800bfbe:	e7d6      	b.n	800bf6e <__swbuf_r+0x2a>

0800bfc0 <__swsetup_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4b29      	ldr	r3, [pc, #164]	@ (800c068 <__swsetup_r+0xa8>)
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	6818      	ldr	r0, [r3, #0]
 800bfc8:	460c      	mov	r4, r1
 800bfca:	b118      	cbz	r0, 800bfd4 <__swsetup_r+0x14>
 800bfcc:	6a03      	ldr	r3, [r0, #32]
 800bfce:	b90b      	cbnz	r3, 800bfd4 <__swsetup_r+0x14>
 800bfd0:	f7fd ffaa 	bl	8009f28 <__sinit>
 800bfd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfd8:	0719      	lsls	r1, r3, #28
 800bfda:	d422      	bmi.n	800c022 <__swsetup_r+0x62>
 800bfdc:	06da      	lsls	r2, r3, #27
 800bfde:	d407      	bmi.n	800bff0 <__swsetup_r+0x30>
 800bfe0:	2209      	movs	r2, #9
 800bfe2:	602a      	str	r2, [r5, #0]
 800bfe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfec:	81a3      	strh	r3, [r4, #12]
 800bfee:	e033      	b.n	800c058 <__swsetup_r+0x98>
 800bff0:	0758      	lsls	r0, r3, #29
 800bff2:	d512      	bpl.n	800c01a <__swsetup_r+0x5a>
 800bff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bff6:	b141      	cbz	r1, 800c00a <__swsetup_r+0x4a>
 800bff8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bffc:	4299      	cmp	r1, r3
 800bffe:	d002      	beq.n	800c006 <__swsetup_r+0x46>
 800c000:	4628      	mov	r0, r5
 800c002:	f7fe ff09 	bl	800ae18 <_free_r>
 800c006:	2300      	movs	r3, #0
 800c008:	6363      	str	r3, [r4, #52]	@ 0x34
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	2300      	movs	r3, #0
 800c014:	6063      	str	r3, [r4, #4]
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f043 0308 	orr.w	r3, r3, #8
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	6923      	ldr	r3, [r4, #16]
 800c024:	b94b      	cbnz	r3, 800c03a <__swsetup_r+0x7a>
 800c026:	89a3      	ldrh	r3, [r4, #12]
 800c028:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c02c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c030:	d003      	beq.n	800c03a <__swsetup_r+0x7a>
 800c032:	4621      	mov	r1, r4
 800c034:	4628      	mov	r0, r5
 800c036:	f000 f882 	bl	800c13e <__smakebuf_r>
 800c03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c03e:	f013 0201 	ands.w	r2, r3, #1
 800c042:	d00a      	beq.n	800c05a <__swsetup_r+0x9a>
 800c044:	2200      	movs	r2, #0
 800c046:	60a2      	str	r2, [r4, #8]
 800c048:	6962      	ldr	r2, [r4, #20]
 800c04a:	4252      	negs	r2, r2
 800c04c:	61a2      	str	r2, [r4, #24]
 800c04e:	6922      	ldr	r2, [r4, #16]
 800c050:	b942      	cbnz	r2, 800c064 <__swsetup_r+0xa4>
 800c052:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c056:	d1c5      	bne.n	800bfe4 <__swsetup_r+0x24>
 800c058:	bd38      	pop	{r3, r4, r5, pc}
 800c05a:	0799      	lsls	r1, r3, #30
 800c05c:	bf58      	it	pl
 800c05e:	6962      	ldrpl	r2, [r4, #20]
 800c060:	60a2      	str	r2, [r4, #8]
 800c062:	e7f4      	b.n	800c04e <__swsetup_r+0x8e>
 800c064:	2000      	movs	r0, #0
 800c066:	e7f7      	b.n	800c058 <__swsetup_r+0x98>
 800c068:	2000001c 	.word	0x2000001c

0800c06c <_raise_r>:
 800c06c:	291f      	cmp	r1, #31
 800c06e:	b538      	push	{r3, r4, r5, lr}
 800c070:	4605      	mov	r5, r0
 800c072:	460c      	mov	r4, r1
 800c074:	d904      	bls.n	800c080 <_raise_r+0x14>
 800c076:	2316      	movs	r3, #22
 800c078:	6003      	str	r3, [r0, #0]
 800c07a:	f04f 30ff 	mov.w	r0, #4294967295
 800c07e:	bd38      	pop	{r3, r4, r5, pc}
 800c080:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c082:	b112      	cbz	r2, 800c08a <_raise_r+0x1e>
 800c084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c088:	b94b      	cbnz	r3, 800c09e <_raise_r+0x32>
 800c08a:	4628      	mov	r0, r5
 800c08c:	f000 f830 	bl	800c0f0 <_getpid_r>
 800c090:	4622      	mov	r2, r4
 800c092:	4601      	mov	r1, r0
 800c094:	4628      	mov	r0, r5
 800c096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c09a:	f000 b817 	b.w	800c0cc <_kill_r>
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d00a      	beq.n	800c0b8 <_raise_r+0x4c>
 800c0a2:	1c59      	adds	r1, r3, #1
 800c0a4:	d103      	bne.n	800c0ae <_raise_r+0x42>
 800c0a6:	2316      	movs	r3, #22
 800c0a8:	6003      	str	r3, [r0, #0]
 800c0aa:	2001      	movs	r0, #1
 800c0ac:	e7e7      	b.n	800c07e <_raise_r+0x12>
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0b6:	4798      	blx	r3
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	e7e0      	b.n	800c07e <_raise_r+0x12>

0800c0bc <raise>:
 800c0bc:	4b02      	ldr	r3, [pc, #8]	@ (800c0c8 <raise+0xc>)
 800c0be:	4601      	mov	r1, r0
 800c0c0:	6818      	ldr	r0, [r3, #0]
 800c0c2:	f7ff bfd3 	b.w	800c06c <_raise_r>
 800c0c6:	bf00      	nop
 800c0c8:	2000001c 	.word	0x2000001c

0800c0cc <_kill_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	4d06      	ldr	r5, [pc, #24]	@ (800c0ec <_kill_r+0x20>)
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4608      	mov	r0, r1
 800c0d6:	4611      	mov	r1, r2
 800c0d8:	602b      	str	r3, [r5, #0]
 800c0da:	f7fb fa58 	bl	800758e <_kill>
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	d102      	bne.n	800c0e8 <_kill_r+0x1c>
 800c0e2:	682b      	ldr	r3, [r5, #0]
 800c0e4:	b103      	cbz	r3, 800c0e8 <_kill_r+0x1c>
 800c0e6:	6023      	str	r3, [r4, #0]
 800c0e8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ea:	bf00      	nop
 800c0ec:	200003c0 	.word	0x200003c0

0800c0f0 <_getpid_r>:
 800c0f0:	f7fb ba46 	b.w	8007580 <_getpid>

0800c0f4 <__swhatbuf_r>:
 800c0f4:	b570      	push	{r4, r5, r6, lr}
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0fc:	4615      	mov	r5, r2
 800c0fe:	2900      	cmp	r1, #0
 800c100:	461e      	mov	r6, r3
 800c102:	b096      	sub	sp, #88	@ 0x58
 800c104:	da0c      	bge.n	800c120 <__swhatbuf_r+0x2c>
 800c106:	89a3      	ldrh	r3, [r4, #12]
 800c108:	2100      	movs	r1, #0
 800c10a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c10e:	bf14      	ite	ne
 800c110:	2340      	movne	r3, #64	@ 0x40
 800c112:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c116:	2000      	movs	r0, #0
 800c118:	6031      	str	r1, [r6, #0]
 800c11a:	602b      	str	r3, [r5, #0]
 800c11c:	b016      	add	sp, #88	@ 0x58
 800c11e:	bd70      	pop	{r4, r5, r6, pc}
 800c120:	466a      	mov	r2, sp
 800c122:	f000 f849 	bl	800c1b8 <_fstat_r>
 800c126:	2800      	cmp	r0, #0
 800c128:	dbed      	blt.n	800c106 <__swhatbuf_r+0x12>
 800c12a:	9901      	ldr	r1, [sp, #4]
 800c12c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c130:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c134:	4259      	negs	r1, r3
 800c136:	4159      	adcs	r1, r3
 800c138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c13c:	e7eb      	b.n	800c116 <__swhatbuf_r+0x22>

0800c13e <__smakebuf_r>:
 800c13e:	898b      	ldrh	r3, [r1, #12]
 800c140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c142:	079d      	lsls	r5, r3, #30
 800c144:	4606      	mov	r6, r0
 800c146:	460c      	mov	r4, r1
 800c148:	d507      	bpl.n	800c15a <__smakebuf_r+0x1c>
 800c14a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c14e:	6023      	str	r3, [r4, #0]
 800c150:	6123      	str	r3, [r4, #16]
 800c152:	2301      	movs	r3, #1
 800c154:	6163      	str	r3, [r4, #20]
 800c156:	b003      	add	sp, #12
 800c158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c15a:	466a      	mov	r2, sp
 800c15c:	ab01      	add	r3, sp, #4
 800c15e:	f7ff ffc9 	bl	800c0f4 <__swhatbuf_r>
 800c162:	9f00      	ldr	r7, [sp, #0]
 800c164:	4605      	mov	r5, r0
 800c166:	4639      	mov	r1, r7
 800c168:	4630      	mov	r0, r6
 800c16a:	f7fe fec7 	bl	800aefc <_malloc_r>
 800c16e:	b948      	cbnz	r0, 800c184 <__smakebuf_r+0x46>
 800c170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c174:	059a      	lsls	r2, r3, #22
 800c176:	d4ee      	bmi.n	800c156 <__smakebuf_r+0x18>
 800c178:	f023 0303 	bic.w	r3, r3, #3
 800c17c:	f043 0302 	orr.w	r3, r3, #2
 800c180:	81a3      	strh	r3, [r4, #12]
 800c182:	e7e2      	b.n	800c14a <__smakebuf_r+0xc>
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c18a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c18e:	81a3      	strh	r3, [r4, #12]
 800c190:	9b01      	ldr	r3, [sp, #4]
 800c192:	6020      	str	r0, [r4, #0]
 800c194:	b15b      	cbz	r3, 800c1ae <__smakebuf_r+0x70>
 800c196:	4630      	mov	r0, r6
 800c198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c19c:	f000 f81e 	bl	800c1dc <_isatty_r>
 800c1a0:	b128      	cbz	r0, 800c1ae <__smakebuf_r+0x70>
 800c1a2:	89a3      	ldrh	r3, [r4, #12]
 800c1a4:	f023 0303 	bic.w	r3, r3, #3
 800c1a8:	f043 0301 	orr.w	r3, r3, #1
 800c1ac:	81a3      	strh	r3, [r4, #12]
 800c1ae:	89a3      	ldrh	r3, [r4, #12]
 800c1b0:	431d      	orrs	r5, r3
 800c1b2:	81a5      	strh	r5, [r4, #12]
 800c1b4:	e7cf      	b.n	800c156 <__smakebuf_r+0x18>
	...

0800c1b8 <_fstat_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	4d06      	ldr	r5, [pc, #24]	@ (800c1d8 <_fstat_r+0x20>)
 800c1be:	4604      	mov	r4, r0
 800c1c0:	4608      	mov	r0, r1
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	602b      	str	r3, [r5, #0]
 800c1c6:	f7fb fa41 	bl	800764c <_fstat>
 800c1ca:	1c43      	adds	r3, r0, #1
 800c1cc:	d102      	bne.n	800c1d4 <_fstat_r+0x1c>
 800c1ce:	682b      	ldr	r3, [r5, #0]
 800c1d0:	b103      	cbz	r3, 800c1d4 <_fstat_r+0x1c>
 800c1d2:	6023      	str	r3, [r4, #0]
 800c1d4:	bd38      	pop	{r3, r4, r5, pc}
 800c1d6:	bf00      	nop
 800c1d8:	200003c0 	.word	0x200003c0

0800c1dc <_isatty_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	2300      	movs	r3, #0
 800c1e0:	4d05      	ldr	r5, [pc, #20]	@ (800c1f8 <_isatty_r+0x1c>)
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	4608      	mov	r0, r1
 800c1e6:	602b      	str	r3, [r5, #0]
 800c1e8:	f7fb fa3f 	bl	800766a <_isatty>
 800c1ec:	1c43      	adds	r3, r0, #1
 800c1ee:	d102      	bne.n	800c1f6 <_isatty_r+0x1a>
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	b103      	cbz	r3, 800c1f6 <_isatty_r+0x1a>
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	bd38      	pop	{r3, r4, r5, pc}
 800c1f8:	200003c0 	.word	0x200003c0

0800c1fc <_init>:
 800c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fe:	bf00      	nop
 800c200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c202:	bc08      	pop	{r3}
 800c204:	469e      	mov	lr, r3
 800c206:	4770      	bx	lr

0800c208 <_fini>:
 800c208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20a:	bf00      	nop
 800c20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c20e:	bc08      	pop	{r3}
 800c210:	469e      	mov	lr, r3
 800c212:	4770      	bx	lr
