
Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dfc  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fd4  08008fe4  08008fe4  00009fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfb8  0800bfb8  0000d010  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfb8  0800bfb8  0000cfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfc0  0800bfc0  0000d010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfc0  0800bfc0  0000cfc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bfc4  0800bfc4  0000cfc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800bfc8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000010  0800bfd8  0000d010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800bfd8  0000d4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cb4  00000000  00000000  0000d039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdd  00000000  00000000  00016ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  000188d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f3  00000000  00000000  00019080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001965e  00000000  00000000  00019673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be64  00000000  00000000  00032cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090aed  00000000  00000000  0003eb35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed4  00000000  00000000  000cf668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  000d153c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	08008fcc 	.word	0x08008fcc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	08008fcc 	.word	0x08008fcc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_drsub>:
 800048c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e002      	b.n	8000498 <__adddf3>
 8000492:	bf00      	nop

08000494 <__aeabi_dsub>:
 8000494:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000498 <__adddf3>:
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800049e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	bf1f      	itttt	ne
 80004ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004be:	f000 80e2 	beq.w	8000686 <__adddf3+0x1ee>
 80004c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ca:	bfb8      	it	lt
 80004cc:	426d      	neglt	r5, r5
 80004ce:	dd0c      	ble.n	80004ea <__adddf3+0x52>
 80004d0:	442c      	add	r4, r5
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	ea82 0000 	eor.w	r0, r2, r0
 80004de:	ea83 0101 	eor.w	r1, r3, r1
 80004e2:	ea80 0202 	eor.w	r2, r0, r2
 80004e6:	ea81 0303 	eor.w	r3, r1, r3
 80004ea:	2d36      	cmp	r5, #54	@ 0x36
 80004ec:	bf88      	it	hi
 80004ee:	bd30      	pophi	{r4, r5, pc}
 80004f0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x70>
 8000502:	4240      	negs	r0, r0
 8000504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000508:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800050c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x84>
 8000516:	4252      	negs	r2, r2
 8000518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800051c:	ea94 0f05 	teq	r4, r5
 8000520:	f000 80a7 	beq.w	8000672 <__adddf3+0x1da>
 8000524:	f1a4 0401 	sub.w	r4, r4, #1
 8000528:	f1d5 0e20 	rsbs	lr, r5, #32
 800052c:	db0d      	blt.n	800054a <__adddf3+0xb2>
 800052e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000532:	fa22 f205 	lsr.w	r2, r2, r5
 8000536:	1880      	adds	r0, r0, r2
 8000538:	f141 0100 	adc.w	r1, r1, #0
 800053c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000540:	1880      	adds	r0, r0, r2
 8000542:	fa43 f305 	asr.w	r3, r3, r5
 8000546:	4159      	adcs	r1, r3
 8000548:	e00e      	b.n	8000568 <__adddf3+0xd0>
 800054a:	f1a5 0520 	sub.w	r5, r5, #32
 800054e:	f10e 0e20 	add.w	lr, lr, #32
 8000552:	2a01      	cmp	r2, #1
 8000554:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000558:	bf28      	it	cs
 800055a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800055e:	fa43 f305 	asr.w	r3, r3, r5
 8000562:	18c0      	adds	r0, r0, r3
 8000564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800056c:	d507      	bpl.n	800057e <__adddf3+0xe6>
 800056e:	f04f 0e00 	mov.w	lr, #0
 8000572:	f1dc 0c00 	rsbs	ip, ip, #0
 8000576:	eb7e 0000 	sbcs.w	r0, lr, r0
 800057a:	eb6e 0101 	sbc.w	r1, lr, r1
 800057e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000582:	d31b      	bcc.n	80005bc <__adddf3+0x124>
 8000584:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000588:	d30c      	bcc.n	80005a4 <__adddf3+0x10c>
 800058a:	0849      	lsrs	r1, r1, #1
 800058c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000590:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000594:	f104 0401 	add.w	r4, r4, #1
 8000598:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800059c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005a0:	f080 809a 	bcs.w	80006d8 <__adddf3+0x240>
 80005a4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a8:	bf08      	it	eq
 80005aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ae:	f150 0000 	adcs.w	r0, r0, #0
 80005b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b6:	ea41 0105 	orr.w	r1, r1, r5
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c0:	4140      	adcs	r0, r0
 80005c2:	eb41 0101 	adc.w	r1, r1, r1
 80005c6:	3c01      	subs	r4, #1
 80005c8:	bf28      	it	cs
 80005ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ce:	d2e9      	bcs.n	80005a4 <__adddf3+0x10c>
 80005d0:	f091 0f00 	teq	r1, #0
 80005d4:	bf04      	itt	eq
 80005d6:	4601      	moveq	r1, r0
 80005d8:	2000      	moveq	r0, #0
 80005da:	fab1 f381 	clz	r3, r1
 80005de:	bf08      	it	eq
 80005e0:	3320      	addeq	r3, #32
 80005e2:	f1a3 030b 	sub.w	r3, r3, #11
 80005e6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ea:	da0c      	bge.n	8000606 <__adddf3+0x16e>
 80005ec:	320c      	adds	r2, #12
 80005ee:	dd08      	ble.n	8000602 <__adddf3+0x16a>
 80005f0:	f102 0c14 	add.w	ip, r2, #20
 80005f4:	f1c2 020c 	rsb	r2, r2, #12
 80005f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000600:	e00c      	b.n	800061c <__adddf3+0x184>
 8000602:	f102 0214 	add.w	r2, r2, #20
 8000606:	bfd8      	it	le
 8000608:	f1c2 0c20 	rsble	ip, r2, #32
 800060c:	fa01 f102 	lsl.w	r1, r1, r2
 8000610:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000614:	bfdc      	itt	le
 8000616:	ea41 010c 	orrle.w	r1, r1, ip
 800061a:	4090      	lslle	r0, r2
 800061c:	1ae4      	subs	r4, r4, r3
 800061e:	bfa2      	ittt	ge
 8000620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000624:	4329      	orrge	r1, r5
 8000626:	bd30      	popge	{r4, r5, pc}
 8000628:	ea6f 0404 	mvn.w	r4, r4
 800062c:	3c1f      	subs	r4, #31
 800062e:	da1c      	bge.n	800066a <__adddf3+0x1d2>
 8000630:	340c      	adds	r4, #12
 8000632:	dc0e      	bgt.n	8000652 <__adddf3+0x1ba>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0220 	rsb	r2, r4, #32
 800063c:	fa20 f004 	lsr.w	r0, r0, r4
 8000640:	fa01 f302 	lsl.w	r3, r1, r2
 8000644:	ea40 0003 	orr.w	r0, r0, r3
 8000648:	fa21 f304 	lsr.w	r3, r1, r4
 800064c:	ea45 0103 	orr.w	r1, r5, r3
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f1c4 040c 	rsb	r4, r4, #12
 8000656:	f1c4 0220 	rsb	r2, r4, #32
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 f304 	lsl.w	r3, r1, r4
 8000662:	ea40 0003 	orr.w	r0, r0, r3
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	fa21 f004 	lsr.w	r0, r1, r4
 800066e:	4629      	mov	r1, r5
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	f094 0f00 	teq	r4, #0
 8000676:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800067a:	bf06      	itte	eq
 800067c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000680:	3401      	addeq	r4, #1
 8000682:	3d01      	subne	r5, #1
 8000684:	e74e      	b.n	8000524 <__adddf3+0x8c>
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf18      	it	ne
 800068c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000690:	d029      	beq.n	80006e6 <__adddf3+0x24e>
 8000692:	ea94 0f05 	teq	r4, r5
 8000696:	bf08      	it	eq
 8000698:	ea90 0f02 	teqeq	r0, r2
 800069c:	d005      	beq.n	80006aa <__adddf3+0x212>
 800069e:	ea54 0c00 	orrs.w	ip, r4, r0
 80006a2:	bf04      	itt	eq
 80006a4:	4619      	moveq	r1, r3
 80006a6:	4610      	moveq	r0, r2
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea91 0f03 	teq	r1, r3
 80006ae:	bf1e      	ittt	ne
 80006b0:	2100      	movne	r1, #0
 80006b2:	2000      	movne	r0, #0
 80006b4:	bd30      	popne	{r4, r5, pc}
 80006b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ba:	d105      	bne.n	80006c8 <__adddf3+0x230>
 80006bc:	0040      	lsls	r0, r0, #1
 80006be:	4149      	adcs	r1, r1
 80006c0:	bf28      	it	cs
 80006c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006c6:	bd30      	pop	{r4, r5, pc}
 80006c8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006cc:	bf3c      	itt	cc
 80006ce:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006d2:	bd30      	popcc	{r4, r5, pc}
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006dc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf1a      	itte	ne
 80006ec:	4619      	movne	r1, r3
 80006ee:	4610      	movne	r0, r2
 80006f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f4:	bf1c      	itt	ne
 80006f6:	460b      	movne	r3, r1
 80006f8:	4602      	movne	r2, r0
 80006fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006fe:	bf06      	itte	eq
 8000700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000704:	ea91 0f03 	teqeq	r1, r3
 8000708:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	bf00      	nop

08000710 <__aeabi_ui2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f04f 0500 	mov.w	r5, #0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e750      	b.n	80005d0 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_i2d>:
 8000730:	f090 0f00 	teq	r0, #0
 8000734:	bf04      	itt	eq
 8000736:	2100      	moveq	r1, #0
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000740:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000744:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000748:	bf48      	it	mi
 800074a:	4240      	negmi	r0, r0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e73e      	b.n	80005d0 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_f2d>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800075a:	ea4f 0131 	mov.w	r1, r1, rrx
 800075e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000762:	bf1f      	itttt	ne
 8000764:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000768:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800076c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000770:	4770      	bxne	lr
 8000772:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000776:	bf08      	it	eq
 8000778:	4770      	bxeq	lr
 800077a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800077e:	bf04      	itt	eq
 8000780:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000784:	4770      	bxeq	lr
 8000786:	b530      	push	{r4, r5, lr}
 8000788:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	e71c      	b.n	80005d0 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_ul2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f04f 0500 	mov.w	r5, #0
 80007a6:	e00a      	b.n	80007be <__aeabi_l2d+0x16>

080007a8 <__aeabi_l2d>:
 80007a8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	b530      	push	{r4, r5, lr}
 80007b2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007b6:	d502      	bpl.n	80007be <__aeabi_l2d+0x16>
 80007b8:	4240      	negs	r0, r0
 80007ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007be:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ca:	f43f aed8 	beq.w	800057e <__adddf3+0xe6>
 80007ce:	f04f 0203 	mov.w	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007de:	bf18      	it	ne
 80007e0:	3203      	addne	r2, #3
 80007e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ee:	fa20 f002 	lsr.w	r0, r0, r2
 80007f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007f6:	ea40 000e 	orr.w	r0, r0, lr
 80007fa:	fa21 f102 	lsr.w	r1, r1, r2
 80007fe:	4414      	add	r4, r2
 8000800:	e6bd      	b.n	800057e <__adddf3+0xe6>
 8000802:	bf00      	nop

08000804 <__aeabi_d2uiz>:
 8000804:	004a      	lsls	r2, r1, #1
 8000806:	d211      	bcs.n	800082c <__aeabi_d2uiz+0x28>
 8000808:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800080c:	d211      	bcs.n	8000832 <__aeabi_d2uiz+0x2e>
 800080e:	d50d      	bpl.n	800082c <__aeabi_d2uiz+0x28>
 8000810:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000818:	d40e      	bmi.n	8000838 <__aeabi_d2uiz+0x34>
 800081a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000826:	fa23 f002 	lsr.w	r0, r3, r2
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000836:	d102      	bne.n	800083e <__aeabi_d2uiz+0x3a>
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	4770      	bx	lr
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	4770      	bx	lr

08000844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000858:	4b20      	ldr	r3, [pc, #128]	@ (80008dc <MX_GPIO_Init+0x98>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a1f      	ldr	r2, [pc, #124]	@ (80008dc <MX_GPIO_Init+0x98>)
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <MX_GPIO_Init+0x98>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0320 	and.w	r3, r3, #32
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_GPIO_Init+0x98>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a19      	ldr	r2, [pc, #100]	@ (80008dc <MX_GPIO_Init+0x98>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_GPIO_Init+0x98>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0310 	and.w	r3, r3, #16
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_GPIO_Init+0x98>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a13      	ldr	r2, [pc, #76]	@ (80008dc <MX_GPIO_Init+0x98>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_GPIO_Init+0x98>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008a0:	2320      	movs	r3, #32
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	480b      	ldr	r0, [pc, #44]	@ (80008e0 <MX_GPIO_Init+0x9c>)
 80008b4:	f006 ff38 	bl	8007728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_GPIO_Init+0xa0>)
 80008ce:	f006 ff2b 	bl	8007728 <HAL_GPIO_Init>

}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40011000 	.word	0x40011000
 80008e4:	40010800 	.word	0x40010800

080008e8 <lcd_wr_xdata>:
 *              ʡ����ռ�.
 * @param       data : Ҫд�������
 * @retval      ��
 */
void lcd_wr_xdata(uint16_t data)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
    LCD_RS(1);
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <lcd_wr_xdata+0x40>)
 80008f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008f8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <lcd_wr_xdata+0x40>)
 80008fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000900:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(data);
 8000902:	4a0a      	ldr	r2, [pc, #40]	@ (800092c <lcd_wr_xdata+0x44>)
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	60d3      	str	r3, [r2, #12]
    LCD_WR(0);
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <lcd_wr_xdata+0x40>)
 800090a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800090e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <lcd_wr_xdata+0x40>)
 8000912:	2280      	movs	r2, #128	@ 0x80
 8000914:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000916:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <lcd_wr_xdata+0x40>)
 8000918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800091c:	611a      	str	r2, [r3, #16]
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	40011000 	.word	0x40011000
 800092c:	40010c00 	.word	0x40010c00

08000930 <lcd_write_reg>:
 * @param       regno:�Ĵ������/��ַ
 * @param       data:Ҫд�������
 * @retval      ��
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	460a      	mov	r2, r1
 800093a:	80fb      	strh	r3, [r7, #6]
 800093c:	4613      	mov	r3, r2
 800093e:	80bb      	strh	r3, [r7, #4]
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000944:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <lcd_write_reg+0x7c>)
 8000946:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800094a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800094c:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <lcd_write_reg+0x7c>)
 800094e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000952:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000954:	89fb      	ldrh	r3, [r7, #14]
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <lcd_write_reg+0x80>)
 800095a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800095c:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <lcd_write_reg+0x7c>)
 800095e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000962:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <lcd_write_reg+0x7c>)
 8000966:	2280      	movs	r2, #128	@ 0x80
 8000968:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <lcd_write_reg+0x7c>)
 800096c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000970:	611a      	str	r2, [r3, #16]
}
 8000972:	bf00      	nop
    lcd_wr_regno(regno);    /* д��Ҫд�ļĴ������ */
    lcd_wr_data(data);      /* д������ */
 8000974:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <lcd_write_reg+0x7c>)
 8000976:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800097a:	611a      	str	r2, [r3, #16]
 800097c:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <lcd_write_reg+0x7c>)
 800097e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <lcd_write_reg+0x80>)
 8000986:	88bb      	ldrh	r3, [r7, #4]
 8000988:	60d3      	str	r3, [r2, #12]
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <lcd_write_reg+0x7c>)
 800098c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <lcd_write_reg+0x7c>)
 8000994:	2280      	movs	r2, #128	@ 0x80
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <lcd_write_reg+0x7c>)
 800099a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800099e:	611a      	str	r2, [r3, #16]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40011000 	.word	0x40011000
 80009b0:	40010c00 	.word	0x40010c00

080009b4 <lcd_opt_delay>:
 * @brief       LCD��ʱ����,�����ڲ�����mdk -O1ʱ���Ż�ʱ��Ҫ���õĵط�
 * @param       t:��ʱ����ֵ
 * @retval      ��
 */
static void lcd_opt_delay(uint32_t i)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    while (i--);
 80009bc:	bf00      	nop
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1fa      	bne.n	80009be <lcd_opt_delay+0xa>
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <lcd_rd_data>:
 * @brief       LCD������
 * @param       ��
 * @retval      ��ȡ��������
 */
static uint16_t lcd_rd_data(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* ��ֹ���Ż� */
    
    GPIO_InitTypeDef gpio_init_struct;
    /* LCD_DATA ����ģʽ����, ��������, ׼���������� */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 80009da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009de:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct); 
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4818      	ldr	r0, [pc, #96]	@ (8000a54 <lcd_rd_data+0x80>)
 80009f2:	f006 fe99 	bl	8007728 <HAL_GPIO_Init>

    LCD_RS(1);              /* RS=1,��ʾ�������� */
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <lcd_rd_data+0x84>)
 80009f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009fc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <lcd_rd_data+0x84>)
 8000a00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a04:	611a      	str	r2, [r3, #16]
    LCD_RD(0);
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <lcd_rd_data+0x84>)
 8000a08:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a0c:	611a      	str	r2, [r3, #16]
    lcd_opt_delay(2);
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff ffd0 	bl	80009b4 <lcd_opt_delay>
    ram = LCD_DATA_IN;      /* ��ȡ���� */
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <lcd_rd_data+0x80>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	82fb      	strh	r3, [r7, #22]
    LCD_RD(1);
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <lcd_rd_data+0x84>)
 8000a1e:	2240      	movs	r2, #64	@ 0x40
 8000a20:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <lcd_rd_data+0x84>)
 8000a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a28:	611a      	str	r2, [r3, #16]
    
    /* LCD_DATA ����ģʽ����, �������, �ָ����״̬ */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000a2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a2e:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <lcd_rd_data+0x80>)
 8000a42:	f006 fe71 	bl	8007728 <HAL_GPIO_Init>

    return ram;
 8000a46:	8afb      	ldrh	r3, [r7, #22]
 8000a48:	b29b      	uxth	r3, r3
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	40011000 	.word	0x40011000

08000a5c <lcd_set_cursor>:
 * @brief       ���ù��λ��(��RGB����Ч)
 * @param       x,y: ����
 * @retval      ��
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	@ 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	460a      	mov	r2, r1
 8000a66:	80fb      	strh	r3, [r7, #6]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8000a6c:	4b44      	ldr	r3, [pc, #272]	@ (8000b80 <lcd_set_cursor+0x124>)
 8000a6e:	889b      	ldrh	r3, [r3, #4]
 8000a70:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000a74:	4293      	cmp	r3, r2
 8000a76:	f040 8189 	bne.w	8000d8c <lcd_set_cursor+0x330>
    {
        if (lcddev.dir == 0)    /* ����ģʽ, x������Ҫ�任 */
 8000a7a:	4b41      	ldr	r3, [pc, #260]	@ (8000b80 <lcd_set_cursor+0x124>)
 8000a7c:	799b      	ldrb	r3, [r3, #6]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 8084 	bne.w	8000b8c <lcd_set_cursor+0x130>
        {
            x = lcddev.width - 1 - x;
 8000a84:	4b3e      	ldr	r3, [pc, #248]	@ (8000b80 <lcd_set_cursor+0x124>)
 8000a86:	881a      	ldrh	r2, [r3, #0]
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8000a92:	4b3b      	ldr	r3, [pc, #236]	@ (8000b80 <lcd_set_cursor+0x124>)
 8000a94:	895b      	ldrh	r3, [r3, #10]
 8000a96:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000a98:	4b3a      	ldr	r3, [pc, #232]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000a9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a9e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000aa0:	4b38      	ldr	r3, [pc, #224]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000aa2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000aa6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000aa8:	89fb      	ldrh	r3, [r7, #14]
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	4b36      	ldr	r3, [pc, #216]	@ (8000b88 <lcd_set_cursor+0x12c>)
 8000aae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000ab0:	4b34      	ldr	r3, [pc, #208]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000ab2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ab6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000ab8:	4b32      	ldr	r3, [pc, #200]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000abe:	4b31      	ldr	r3, [pc, #196]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000ac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ac4:	611a      	str	r2, [r3, #16]
}
 8000ac6:	bf00      	nop
            lcd_wr_data(0);
 8000ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000aca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ace:	611a      	str	r2, [r3, #16]
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000ad2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ad6:	611a      	str	r2, [r3, #16]
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b88 <lcd_set_cursor+0x12c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	4b29      	ldr	r3, [pc, #164]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000ae0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ae4:	611a      	str	r2, [r3, #16]
 8000ae6:	4b27      	ldr	r3, [pc, #156]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000ae8:	2280      	movs	r2, #128	@ 0x80
 8000aea:	611a      	str	r2, [r3, #16]
 8000aec:	4b25      	ldr	r3, [pc, #148]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000af2:	611a      	str	r2, [r3, #16]
            lcd_wr_data(0);
 8000af4:	4b23      	ldr	r3, [pc, #140]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000af6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	4b21      	ldr	r3, [pc, #132]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000afe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b02:	611a      	str	r2, [r3, #16]
 8000b04:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <lcd_set_cursor+0x12c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b10:	611a      	str	r2, [r3, #16]
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b14:	2280      	movs	r2, #128	@ 0x80
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b1e:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x >> 8);
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b26:	611a      	str	r2, [r3, #16]
 8000b28:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <lcd_set_cursor+0x12c>)
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b44:	2280      	movs	r2, #128	@ 0x80
 8000b46:	611a      	str	r2, [r3, #16]
 8000b48:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b4e:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b56:	611a      	str	r2, [r3, #16]
 8000b58:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	4a09      	ldr	r2, [pc, #36]	@ (8000b88 <lcd_set_cursor+0x12c>)
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	60d3      	str	r3, [r2, #12]
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b72:	2280      	movs	r2, #128	@ 0x80
 8000b74:	611a      	str	r2, [r3, #16]
 8000b76:	4b03      	ldr	r3, [pc, #12]	@ (8000b84 <lcd_set_cursor+0x128>)
 8000b78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b7c:	611a      	str	r2, [r3, #16]
 8000b7e:	e081      	b.n	8000c84 <lcd_set_cursor+0x228>
 8000b80:	2000002c 	.word	0x2000002c
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40010c00 	.word	0x40010c00
        }
        else                    /* ����ģʽ */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8000b8c:	4b7c      	ldr	r3, [pc, #496]	@ (8000d80 <lcd_set_cursor+0x324>)
 8000b8e:	895b      	ldrh	r3, [r3, #10]
 8000b90:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000b92:	4b7c      	ldr	r3, [pc, #496]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000b94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b98:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000b9a:	4b7a      	ldr	r3, [pc, #488]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000b9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ba0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000ba2:	8a3b      	ldrh	r3, [r7, #16]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	4b78      	ldr	r3, [pc, #480]	@ (8000d88 <lcd_set_cursor+0x32c>)
 8000ba8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000baa:	4b76      	ldr	r3, [pc, #472]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000bac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bb0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000bb2:	4b74      	ldr	r3, [pc, #464]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000bb4:	2280      	movs	r2, #128	@ 0x80
 8000bb6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000bb8:	4b72      	ldr	r3, [pc, #456]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bbe:	611a      	str	r2, [r3, #16]
}
 8000bc0:	bf00      	nop
            lcd_wr_data(x >> 8);
 8000bc2:	4b70      	ldr	r3, [pc, #448]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000bc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bc8:	611a      	str	r2, [r3, #16]
 8000bca:	4b6e      	ldr	r3, [pc, #440]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000bcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bd0:	611a      	str	r2, [r3, #16]
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8000d88 <lcd_set_cursor+0x32c>)
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	4b69      	ldr	r3, [pc, #420]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000bde:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	4b67      	ldr	r3, [pc, #412]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	611a      	str	r2, [r3, #16]
 8000bea:	4b66      	ldr	r3, [pc, #408]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bf0:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000bf2:	4b64      	ldr	r3, [pc, #400]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000bf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf8:	611a      	str	r2, [r3, #16]
 8000bfa:	4b62      	ldr	r3, [pc, #392]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000bfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	4a60      	ldr	r2, [pc, #384]	@ (8000d88 <lcd_set_cursor+0x32c>)
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	60d3      	str	r3, [r2, #12]
 8000c0a:	4b5e      	ldr	r3, [pc, #376]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c10:	611a      	str	r2, [r3, #16]
 8000c12:	4b5c      	ldr	r3, [pc, #368]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c14:	2280      	movs	r2, #128	@ 0x80
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	4b5a      	ldr	r3, [pc, #360]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c1e:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) >> 8);
 8000c20:	4b58      	ldr	r3, [pc, #352]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	4b56      	ldr	r3, [pc, #344]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c2e:	611a      	str	r2, [r3, #16]
 8000c30:	4b53      	ldr	r3, [pc, #332]	@ (8000d80 <lcd_set_cursor+0x324>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	121a      	asrs	r2, r3, #8
 8000c38:	4b53      	ldr	r3, [pc, #332]	@ (8000d88 <lcd_set_cursor+0x32c>)
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	4b51      	ldr	r3, [pc, #324]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c3e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c42:	611a      	str	r2, [r3, #16]
 8000c44:	4b4f      	ldr	r3, [pc, #316]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c50:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8000c52:	4b4c      	ldr	r3, [pc, #304]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c58:	611a      	str	r2, [r3, #16]
 8000c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	4b47      	ldr	r3, [pc, #284]	@ (8000d80 <lcd_set_cursor+0x324>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	4a47      	ldr	r2, [pc, #284]	@ (8000d88 <lcd_set_cursor+0x32c>)
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	60d3      	str	r3, [r2, #12]
 8000c6e:	4b45      	ldr	r3, [pc, #276]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c74:	611a      	str	r2, [r3, #16]
 8000c76:	4b43      	ldr	r3, [pc, #268]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	4b41      	ldr	r3, [pc, #260]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c82:	611a      	str	r2, [r3, #16]
        }

        lcd_wr_regno(lcddev.setycmd);
 8000c84:	4b3e      	ldr	r3, [pc, #248]	@ (8000d80 <lcd_set_cursor+0x324>)
 8000c86:	899b      	ldrh	r3, [r3, #12]
 8000c88:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000c90:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000c92:	4b3c      	ldr	r3, [pc, #240]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000c94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c98:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000c9a:	8a7b      	ldrh	r3, [r7, #18]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d88 <lcd_set_cursor+0x32c>)
 8000ca0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000ca2:	4b38      	ldr	r3, [pc, #224]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000ca4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ca8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000caa:	4b36      	ldr	r3, [pc, #216]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000cac:	2280      	movs	r2, #128	@ 0x80
 8000cae:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000cb0:	4b34      	ldr	r3, [pc, #208]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb6:	611a      	str	r2, [r3, #16]
}
 8000cb8:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000cba:	4b32      	ldr	r3, [pc, #200]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000cbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cc0:	611a      	str	r2, [r3, #16]
 8000cc2:	4b30      	ldr	r3, [pc, #192]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000cc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cc8:	611a      	str	r2, [r3, #16]
 8000cca:	88bb      	ldrh	r3, [r7, #4]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d88 <lcd_set_cursor+0x32c>)
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000cd6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000cde:	2280      	movs	r2, #128	@ 0x80
 8000ce0:	611a      	str	r2, [r3, #16]
 8000ce2:	4b28      	ldr	r3, [pc, #160]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce8:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8000cea:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cf0:	611a      	str	r2, [r3, #16]
 8000cf2:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000cf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	4a22      	ldr	r2, [pc, #136]	@ (8000d88 <lcd_set_cursor+0x32c>)
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	60d3      	str	r3, [r2, #12]
 8000d02:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d04:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d08:	611a      	str	r2, [r3, #16]
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d0c:	2280      	movs	r2, #128	@ 0x80
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d16:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <lcd_set_cursor+0x324>)
 8000d2a:	885b      	ldrh	r3, [r3, #2]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	121a      	asrs	r2, r3, #8
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <lcd_set_cursor+0x32c>)
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d36:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d3e:	2280      	movs	r2, #128	@ 0x80
 8000d40:	611a      	str	r2, [r3, #16]
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d48:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d58:	611a      	str	r2, [r3, #16]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <lcd_set_cursor+0x324>)
 8000d5c:	885b      	ldrh	r3, [r3, #2]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	4a09      	ldr	r2, [pc, #36]	@ (8000d88 <lcd_set_cursor+0x32c>)
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	60d3      	str	r3, [r2, #12]
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d68:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d6c:	611a      	str	r2, [r3, #16]
 8000d6e:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d70:	2280      	movs	r2, #128	@ 0x80
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <lcd_set_cursor+0x328>)
 8000d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d7a:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 8000d7c:	e176      	b.n	800106c <lcd_set_cursor+0x610>
 8000d7e:	bf00      	nop
 8000d80:	2000002c 	.word	0x2000002c
 8000d84:	40011000 	.word	0x40011000
 8000d88:	40010c00 	.word	0x40010c00
    else if (lcddev.id == 0X5510)
 8000d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8000f38 <lcd_set_cursor+0x4dc>)
 8000d8e:	889b      	ldrh	r3, [r3, #4]
 8000d90:	f245 5210 	movw	r2, #21776	@ 0x5510
 8000d94:	4293      	cmp	r3, r2
 8000d96:	f040 80d5 	bne.w	8000f44 <lcd_set_cursor+0x4e8>
        lcd_wr_regno(lcddev.setxcmd);
 8000d9a:	4b67      	ldr	r3, [pc, #412]	@ (8000f38 <lcd_set_cursor+0x4dc>)
 8000d9c:	895b      	ldrh	r3, [r3, #10]
 8000d9e:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000da0:	4b66      	ldr	r3, [pc, #408]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000da2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000da6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000da8:	4b64      	ldr	r3, [pc, #400]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000daa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000dae:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000db0:	8b7b      	ldrh	r3, [r7, #26]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b62      	ldr	r3, [pc, #392]	@ (8000f40 <lcd_set_cursor+0x4e4>)
 8000db6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000db8:	4b60      	ldr	r3, [pc, #384]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000dba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dbe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000dc2:	2280      	movs	r2, #128	@ 0x80
 8000dc4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dcc:	611a      	str	r2, [r3, #16]
}
 8000dce:	bf00      	nop
        lcd_wr_data(x >> 8);
 8000dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000dd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	4b58      	ldr	r3, [pc, #352]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000dda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	4b56      	ldr	r3, [pc, #344]	@ (8000f40 <lcd_set_cursor+0x4e4>)
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	4b54      	ldr	r3, [pc, #336]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000dec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	4b52      	ldr	r3, [pc, #328]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	4b50      	ldr	r3, [pc, #320]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dfe:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 8000e00:	4b4d      	ldr	r3, [pc, #308]	@ (8000f38 <lcd_set_cursor+0x4dc>)
 8000e02:	895b      	ldrh	r3, [r3, #10]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e10:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000e12:	4b4a      	ldr	r3, [pc, #296]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e18:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000e1a:	8b3b      	ldrh	r3, [r7, #24]
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b48      	ldr	r3, [pc, #288]	@ (8000f40 <lcd_set_cursor+0x4e4>)
 8000e20:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000e22:	4b46      	ldr	r3, [pc, #280]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e28:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000e2a:	4b44      	ldr	r3, [pc, #272]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e2c:	2280      	movs	r2, #128	@ 0x80
 8000e2e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000e30:	4b42      	ldr	r3, [pc, #264]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e36:	611a      	str	r2, [r3, #16]
}
 8000e38:	bf00      	nop
        lcd_wr_data(x & 0XFF);
 8000e3a:	4b40      	ldr	r3, [pc, #256]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e40:	611a      	str	r2, [r3, #16]
 8000e42:	4b3e      	ldr	r3, [pc, #248]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e48:	611a      	str	r2, [r3, #16]
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f40 <lcd_set_cursor+0x4e4>)
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	60d3      	str	r3, [r2, #12]
 8000e52:	4b3a      	ldr	r3, [pc, #232]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	4b38      	ldr	r3, [pc, #224]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	4b36      	ldr	r3, [pc, #216]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e66:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8000e68:	4b33      	ldr	r3, [pc, #204]	@ (8000f38 <lcd_set_cursor+0x4dc>)
 8000e6a:	899b      	ldrh	r3, [r3, #12]
 8000e6c:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000e6e:	4b33      	ldr	r3, [pc, #204]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e74:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000e76:	4b31      	ldr	r3, [pc, #196]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e7c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000e7e:	8afb      	ldrh	r3, [r7, #22]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <lcd_set_cursor+0x4e4>)
 8000e84:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000e86:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e8c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e90:	2280      	movs	r2, #128	@ 0x80
 8000e92:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000e94:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e9a:	611a      	str	r2, [r3, #16]
}
 8000e9c:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000e9e:	4b27      	ldr	r3, [pc, #156]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000ea0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ea4:	611a      	str	r2, [r3, #16]
 8000ea6:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000ea8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000eac:	611a      	str	r2, [r3, #16]
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <lcd_set_cursor+0x4e4>)
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000eba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000ec2:	2280      	movs	r2, #128	@ 0x80
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ecc:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8000ece:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <lcd_set_cursor+0x4dc>)
 8000ed0:	899b      	ldrh	r3, [r3, #12]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000eda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ede:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000ee0:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000ee2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ee6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000ee8:	8abb      	ldrh	r3, [r7, #20]
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <lcd_set_cursor+0x4e4>)
 8000eee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000ef2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ef6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000ef8:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000efa:	2280      	movs	r2, #128	@ 0x80
 8000efc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f04:	611a      	str	r2, [r3, #16]
}
 8000f06:	bf00      	nop
        lcd_wr_data(y & 0XFF);
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000f0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000f12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	4a09      	ldr	r2, [pc, #36]	@ (8000f40 <lcd_set_cursor+0x4e4>)
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	60d3      	str	r3, [r2, #12]
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000f22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000f2a:	2280      	movs	r2, #128	@ 0x80
 8000f2c:	611a      	str	r2, [r3, #16]
 8000f2e:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <lcd_set_cursor+0x4e0>)
 8000f30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f34:	611a      	str	r2, [r3, #16]
}
 8000f36:	e099      	b.n	800106c <lcd_set_cursor+0x610>
 8000f38:	2000002c 	.word	0x2000002c
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	40010c00 	.word	0x40010c00
        lcd_wr_regno(lcddev.setxcmd);
 8000f44:	4b4c      	ldr	r3, [pc, #304]	@ (8001078 <lcd_set_cursor+0x61c>)
 8000f46:	895b      	ldrh	r3, [r3, #10]
 8000f48:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800107c <lcd_set_cursor+0x620>)
 8000f4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f50:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000f52:	4b4a      	ldr	r3, [pc, #296]	@ (800107c <lcd_set_cursor+0x620>)
 8000f54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f58:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000f5a:	8bfb      	ldrh	r3, [r7, #30]
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b48      	ldr	r3, [pc, #288]	@ (8001080 <lcd_set_cursor+0x624>)
 8000f60:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000f62:	4b46      	ldr	r3, [pc, #280]	@ (800107c <lcd_set_cursor+0x620>)
 8000f64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f68:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000f6a:	4b44      	ldr	r3, [pc, #272]	@ (800107c <lcd_set_cursor+0x620>)
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000f70:	4b42      	ldr	r3, [pc, #264]	@ (800107c <lcd_set_cursor+0x620>)
 8000f72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f76:	611a      	str	r2, [r3, #16]
}
 8000f78:	bf00      	nop
        lcd_wr_data(x >> 8);
 8000f7a:	4b40      	ldr	r3, [pc, #256]	@ (800107c <lcd_set_cursor+0x620>)
 8000f7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	4b3e      	ldr	r3, [pc, #248]	@ (800107c <lcd_set_cursor+0x620>)
 8000f84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f88:	611a      	str	r2, [r3, #16]
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	4b3b      	ldr	r3, [pc, #236]	@ (8001080 <lcd_set_cursor+0x624>)
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	4b39      	ldr	r3, [pc, #228]	@ (800107c <lcd_set_cursor+0x620>)
 8000f96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	4b37      	ldr	r3, [pc, #220]	@ (800107c <lcd_set_cursor+0x620>)
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	4b36      	ldr	r3, [pc, #216]	@ (800107c <lcd_set_cursor+0x620>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa8:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
 8000faa:	4b34      	ldr	r3, [pc, #208]	@ (800107c <lcd_set_cursor+0x620>)
 8000fac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	4b32      	ldr	r3, [pc, #200]	@ (800107c <lcd_set_cursor+0x620>)
 8000fb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fb8:	611a      	str	r2, [r3, #16]
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	4a30      	ldr	r2, [pc, #192]	@ (8001080 <lcd_set_cursor+0x624>)
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	60d3      	str	r3, [r2, #12]
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800107c <lcd_set_cursor+0x620>)
 8000fc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	4b2c      	ldr	r3, [pc, #176]	@ (800107c <lcd_set_cursor+0x620>)
 8000fcc:	2280      	movs	r2, #128	@ 0x80
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <lcd_set_cursor+0x620>)
 8000fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd6:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8000fd8:	4b27      	ldr	r3, [pc, #156]	@ (8001078 <lcd_set_cursor+0x61c>)
 8000fda:	899b      	ldrh	r3, [r3, #12]
 8000fdc:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000fde:	4b27      	ldr	r3, [pc, #156]	@ (800107c <lcd_set_cursor+0x620>)
 8000fe0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000fe4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000fe6:	4b25      	ldr	r3, [pc, #148]	@ (800107c <lcd_set_cursor+0x620>)
 8000fe8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000fee:	8bbb      	ldrh	r3, [r7, #28]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b23      	ldr	r3, [pc, #140]	@ (8001080 <lcd_set_cursor+0x624>)
 8000ff4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000ff6:	4b21      	ldr	r3, [pc, #132]	@ (800107c <lcd_set_cursor+0x620>)
 8000ff8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ffc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <lcd_set_cursor+0x620>)
 8001000:	2280      	movs	r2, #128	@ 0x80
 8001002:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001004:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <lcd_set_cursor+0x620>)
 8001006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800100a:	611a      	str	r2, [r3, #16]
}
 800100c:	bf00      	nop
        lcd_wr_data(y >> 8);
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <lcd_set_cursor+0x620>)
 8001010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <lcd_set_cursor+0x620>)
 8001018:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <lcd_set_cursor+0x624>)
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	4b14      	ldr	r3, [pc, #80]	@ (800107c <lcd_set_cursor+0x620>)
 800102a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <lcd_set_cursor+0x620>)
 8001032:	2280      	movs	r2, #128	@ 0x80
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <lcd_set_cursor+0x620>)
 8001038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800103c:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <lcd_set_cursor+0x620>)
 8001040:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001044:	611a      	str	r2, [r3, #16]
 8001046:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <lcd_set_cursor+0x620>)
 8001048:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800104c:	611a      	str	r2, [r3, #16]
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <lcd_set_cursor+0x624>)
 8001052:	b2db      	uxtb	r3, r3
 8001054:	60d3      	str	r3, [r2, #12]
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <lcd_set_cursor+0x620>)
 8001058:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	4b07      	ldr	r3, [pc, #28]	@ (800107c <lcd_set_cursor+0x620>)
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <lcd_set_cursor+0x620>)
 8001066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800106a:	611a      	str	r2, [r3, #16]
}
 800106c:	bf00      	nop
 800106e:	3724      	adds	r7, #36	@ 0x24
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000002c 	.word	0x2000002c
 800107c:	40011000 	.word	0x40011000
 8001080:	40010c00 	.word	0x40010c00

08001084 <lcd_scan_dir>:
 *
 * @param       dir:0~7,����8������(���嶨���lcd.h)
 * @retval      ��
 */
void lcd_scan_dir(uint8_t dir)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t dirreg = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t temp;

    /* ����ʱ����1963���ı�ɨ�跽��, ����IC�ı�ɨ�跽������ʱ1963�ı䷽��, ����IC���ı�ɨ�跽�� */
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 8001096:	4b5f      	ldr	r3, [pc, #380]	@ (8001214 <lcd_scan_dir+0x190>)
 8001098:	799b      	ldrb	r3, [r3, #6]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d105      	bne.n	80010aa <lcd_scan_dir+0x26>
 800109e:	4b5d      	ldr	r3, [pc, #372]	@ (8001214 <lcd_scan_dir+0x190>)
 80010a0:	889b      	ldrh	r3, [r3, #4]
 80010a2:	f641 1263 	movw	r2, #6499	@ 0x1963
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d109      	bne.n	80010be <lcd_scan_dir+0x3a>
 80010aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001214 <lcd_scan_dir+0x190>)
 80010ac:	799b      	ldrb	r3, [r3, #6]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d134      	bne.n	800111c <lcd_scan_dir+0x98>
 80010b2:	4b58      	ldr	r3, [pc, #352]	@ (8001214 <lcd_scan_dir+0x190>)
 80010b4:	889b      	ldrh	r3, [r3, #4]
 80010b6:	f641 1263 	movw	r2, #6499	@ 0x1963
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12e      	bne.n	800111c <lcd_scan_dir+0x98>
    {
        switch (dir)   /* ����ת�� */
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	d82b      	bhi.n	800111c <lcd_scan_dir+0x98>
 80010c4:	a201      	add	r2, pc, #4	@ (adr r2, 80010cc <lcd_scan_dir+0x48>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	080010ed 	.word	0x080010ed
 80010d0:	080010f3 	.word	0x080010f3
 80010d4:	080010f9 	.word	0x080010f9
 80010d8:	080010ff 	.word	0x080010ff
 80010dc:	08001105 	.word	0x08001105
 80010e0:	0800110b 	.word	0x0800110b
 80010e4:	08001111 	.word	0x08001111
 80010e8:	08001117 	.word	0x08001117
        {
            case 0:
                dir = 6;
 80010ec:	2306      	movs	r3, #6
 80010ee:	71fb      	strb	r3, [r7, #7]
                break;
 80010f0:	e014      	b.n	800111c <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 80010f2:	2307      	movs	r3, #7
 80010f4:	71fb      	strb	r3, [r7, #7]
                break;
 80010f6:	e011      	b.n	800111c <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	71fb      	strb	r3, [r7, #7]
                break;
 80010fc:	e00e      	b.n	800111c <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 80010fe:	2305      	movs	r3, #5
 8001100:	71fb      	strb	r3, [r7, #7]
                break;
 8001102:	e00b      	b.n	800111c <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	71fb      	strb	r3, [r7, #7]
                break;
 8001108:	e008      	b.n	800111c <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	71fb      	strb	r3, [r7, #7]
                break;
 800110e:	e005      	b.n	800111c <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 8001110:	2303      	movs	r3, #3
 8001112:	71fb      	strb	r3, [r7, #7]
                break;
 8001114:	e002      	b.n	800111c <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	71fb      	strb	r3, [r7, #7]
                break;
 800111a:	bf00      	nop
        }
    }

    /* ����ɨ�跽ʽ ���� 0X36/0X3600 �Ĵ��� bit 5,6,7 λ��ֵ */
    switch (dir)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b07      	cmp	r3, #7
 8001120:	d835      	bhi.n	800118e <lcd_scan_dir+0x10a>
 8001122:	a201      	add	r2, pc, #4	@ (adr r2, 8001128 <lcd_scan_dir+0xa4>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	0800118f 	.word	0x0800118f
 800112c:	08001149 	.word	0x08001149
 8001130:	08001153 	.word	0x08001153
 8001134:	0800115d 	.word	0x0800115d
 8001138:	08001167 	.word	0x08001167
 800113c:	08001171 	.word	0x08001171
 8001140:	0800117b 	.word	0x0800117b
 8001144:	08001185 	.word	0x08001185
        case L2R_U2D:/* ������,���ϵ��� */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* ������,���µ��� */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001148:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800114a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800114e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001150:	e01d      	b.n	800118e <lcd_scan_dir+0x10a>

        case R2L_U2D:/* ���ҵ���,���ϵ��� */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8001152:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001158:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 800115a:	e018      	b.n	800118e <lcd_scan_dir+0x10a>

        case R2L_D2U:/* ���ҵ���,���µ��� */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 800115c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800115e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001162:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001164:	e013      	b.n	800118e <lcd_scan_dir+0x10a>

        case U2D_L2R:/* ���ϵ���,������ */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8001166:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 800116e:	e00e      	b.n	800118e <lcd_scan_dir+0x10a>

        case U2D_R2L:/* ���ϵ���,���ҵ��� */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001170:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001172:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001176:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001178:	e009      	b.n	800118e <lcd_scan_dir+0x10a>

        case D2U_L2R:/* ���µ���,������ */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800117a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800117c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001180:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001182:	e004      	b.n	800118e <lcd_scan_dir+0x10a>

        case D2U_R2L:/* ���µ���,���ҵ��� */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001184:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001186:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800118a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 800118c:	bf00      	nop
    }

    dirreg = 0X36;  /* �Ծ��󲿷�����IC, ��0X36�Ĵ������� */
 800118e:	2336      	movs	r3, #54	@ 0x36
 8001190:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (lcddev.id == 0X5510)
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <lcd_scan_dir+0x190>)
 8001194:	889b      	ldrh	r3, [r3, #4]
 8001196:	f245 5210 	movw	r2, #21776	@ 0x5510
 800119a:	4293      	cmp	r3, r2
 800119c:	d102      	bne.n	80011a4 <lcd_scan_dir+0x120>
    {
        dirreg = 0X3600;    /* ����5510, ����������ic�ļĴ����в��� */
 800119e:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 80011a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* 9341 & 7789 & 7796 Ҫ����BGRλ */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <lcd_scan_dir+0x190>)
 80011a6:	889b      	ldrh	r3, [r3, #4]
 80011a8:	f249 3241 	movw	r2, #37697	@ 0x9341
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d00b      	beq.n	80011c8 <lcd_scan_dir+0x144>
 80011b0:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <lcd_scan_dir+0x190>)
 80011b2:	889b      	ldrh	r3, [r3, #4]
 80011b4:	f247 7289 	movw	r2, #30601	@ 0x7789
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d005      	beq.n	80011c8 <lcd_scan_dir+0x144>
 80011bc:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <lcd_scan_dir+0x190>)
 80011be:	889b      	ldrh	r3, [r3, #4]
 80011c0:	f247 7296 	movw	r2, #30614	@ 0x7796
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d103      	bne.n	80011d0 <lcd_scan_dir+0x14c>
    {
        regval |= 0X08;
 80011c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011ca:	f043 0308 	orr.w	r3, r3, #8
 80011ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    lcd_write_reg(dirreg, regval);
 80011d0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80011d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fbaa 	bl	8000930 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963�������괦�� */
 80011dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <lcd_scan_dir+0x190>)
 80011de:	889b      	ldrh	r3, [r3, #4]
 80011e0:	f641 1263 	movw	r2, #6499	@ 0x1963
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d027      	beq.n	8001238 <lcd_scan_dir+0x1b4>
    {
        if (regval & 0X20)
 80011e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011ea:	f003 0320 	and.w	r3, r3, #32
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d012      	beq.n	8001218 <lcd_scan_dir+0x194>
        {
            if (lcddev.width < lcddev.height)   /* ����X,Y */
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <lcd_scan_dir+0x190>)
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <lcd_scan_dir+0x190>)
 80011f8:	885b      	ldrh	r3, [r3, #2]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d21c      	bcs.n	8001238 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 80011fe:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <lcd_scan_dir+0x190>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <lcd_scan_dir+0x190>)
 8001206:	885a      	ldrh	r2, [r3, #2]
 8001208:	4b02      	ldr	r3, [pc, #8]	@ (8001214 <lcd_scan_dir+0x190>)
 800120a:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 800120c:	4a01      	ldr	r2, [pc, #4]	@ (8001214 <lcd_scan_dir+0x190>)
 800120e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001210:	8053      	strh	r3, [r2, #2]
 8001212:	e011      	b.n	8001238 <lcd_scan_dir+0x1b4>
 8001214:	2000002c 	.word	0x2000002c
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* ����X,Y */
 8001218:	4b9c      	ldr	r3, [pc, #624]	@ (800148c <lcd_scan_dir+0x408>)
 800121a:	881a      	ldrh	r2, [r3, #0]
 800121c:	4b9b      	ldr	r3, [pc, #620]	@ (800148c <lcd_scan_dir+0x408>)
 800121e:	885b      	ldrh	r3, [r3, #2]
 8001220:	429a      	cmp	r2, r3
 8001222:	d909      	bls.n	8001238 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 8001224:	4b99      	ldr	r3, [pc, #612]	@ (800148c <lcd_scan_dir+0x408>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 800122a:	4b98      	ldr	r3, [pc, #608]	@ (800148c <lcd_scan_dir+0x408>)
 800122c:	885a      	ldrh	r2, [r3, #2]
 800122e:	4b97      	ldr	r3, [pc, #604]	@ (800148c <lcd_scan_dir+0x408>)
 8001230:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8001232:	4a96      	ldr	r2, [pc, #600]	@ (800148c <lcd_scan_dir+0x408>)
 8001234:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001236:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* ������ʾ����(����)��С */
    if (lcddev.id == 0X5510)
 8001238:	4b94      	ldr	r3, [pc, #592]	@ (800148c <lcd_scan_dir+0x408>)
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001240:	4293      	cmp	r3, r2
 8001242:	f040 81af 	bne.w	80015a4 <lcd_scan_dir+0x520>
    {
        lcd_wr_regno(lcddev.setxcmd);
 8001246:	4b91      	ldr	r3, [pc, #580]	@ (800148c <lcd_scan_dir+0x408>)
 8001248:	895b      	ldrh	r3, [r3, #10]
 800124a:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800124c:	4b90      	ldr	r3, [pc, #576]	@ (8001490 <lcd_scan_dir+0x40c>)
 800124e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001252:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001254:	4b8e      	ldr	r3, [pc, #568]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001256:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800125a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800125c:	8bbb      	ldrh	r3, [r7, #28]
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b8c      	ldr	r3, [pc, #560]	@ (8001494 <lcd_scan_dir+0x410>)
 8001262:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001264:	4b8a      	ldr	r3, [pc, #552]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001266:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800126a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800126c:	4b88      	ldr	r3, [pc, #544]	@ (8001490 <lcd_scan_dir+0x40c>)
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001272:	4b87      	ldr	r3, [pc, #540]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001278:	611a      	str	r2, [r3, #16]
}
 800127a:	bf00      	nop
        lcd_wr_data(0);
 800127c:	4b84      	ldr	r3, [pc, #528]	@ (8001490 <lcd_scan_dir+0x40c>)
 800127e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	4b82      	ldr	r3, [pc, #520]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001286:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	4b81      	ldr	r3, [pc, #516]	@ (8001494 <lcd_scan_dir+0x410>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	4b7f      	ldr	r3, [pc, #508]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001294:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	4b7d      	ldr	r3, [pc, #500]	@ (8001490 <lcd_scan_dir+0x40c>)
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	611a      	str	r2, [r3, #16]
 80012a0:	4b7b      	ldr	r3, [pc, #492]	@ (8001490 <lcd_scan_dir+0x40c>)
 80012a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a6:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 80012a8:	4b78      	ldr	r3, [pc, #480]	@ (800148c <lcd_scan_dir+0x408>)
 80012aa:	895b      	ldrh	r3, [r3, #10]
 80012ac:	3301      	adds	r3, #1
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80012b2:	4b77      	ldr	r3, [pc, #476]	@ (8001490 <lcd_scan_dir+0x40c>)
 80012b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80012ba:	4b75      	ldr	r3, [pc, #468]	@ (8001490 <lcd_scan_dir+0x40c>)
 80012bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80012c2:	8b7b      	ldrh	r3, [r7, #26]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4b73      	ldr	r3, [pc, #460]	@ (8001494 <lcd_scan_dir+0x410>)
 80012c8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80012ca:	4b71      	ldr	r3, [pc, #452]	@ (8001490 <lcd_scan_dir+0x40c>)
 80012cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012d0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80012d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001490 <lcd_scan_dir+0x40c>)
 80012d4:	2280      	movs	r2, #128	@ 0x80
 80012d6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80012d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001490 <lcd_scan_dir+0x40c>)
 80012da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012de:	611a      	str	r2, [r3, #16]
}
 80012e0:	bf00      	nop
        lcd_wr_data(0);
 80012e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001490 <lcd_scan_dir+0x40c>)
 80012e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	4b69      	ldr	r3, [pc, #420]	@ (8001490 <lcd_scan_dir+0x40c>)
 80012ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012f0:	611a      	str	r2, [r3, #16]
 80012f2:	4b68      	ldr	r3, [pc, #416]	@ (8001494 <lcd_scan_dir+0x410>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	4b65      	ldr	r3, [pc, #404]	@ (8001490 <lcd_scan_dir+0x40c>)
 80012fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	4b63      	ldr	r3, [pc, #396]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001302:	2280      	movs	r2, #128	@ 0x80
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	4b62      	ldr	r3, [pc, #392]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800130c:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 2);
 800130e:	4b5f      	ldr	r3, [pc, #380]	@ (800148c <lcd_scan_dir+0x408>)
 8001310:	895b      	ldrh	r3, [r3, #10]
 8001312:	3302      	adds	r3, #2
 8001314:	b29b      	uxth	r3, r3
 8001316:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001318:	4b5d      	ldr	r3, [pc, #372]	@ (8001490 <lcd_scan_dir+0x40c>)
 800131a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800131e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001320:	4b5b      	ldr	r3, [pc, #364]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001322:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001326:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001328:	8b3b      	ldrh	r3, [r7, #24]
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b59      	ldr	r3, [pc, #356]	@ (8001494 <lcd_scan_dir+0x410>)
 800132e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001330:	4b57      	ldr	r3, [pc, #348]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001332:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001336:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001338:	4b55      	ldr	r3, [pc, #340]	@ (8001490 <lcd_scan_dir+0x40c>)
 800133a:	2280      	movs	r2, #128	@ 0x80
 800133c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800133e:	4b54      	ldr	r3, [pc, #336]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001344:	611a      	str	r2, [r3, #16]
}
 8001346:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) >> 8);
 8001348:	4b51      	ldr	r3, [pc, #324]	@ (8001490 <lcd_scan_dir+0x40c>)
 800134a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800134e:	611a      	str	r2, [r3, #16]
 8001350:	4b4f      	ldr	r3, [pc, #316]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001352:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	4b4c      	ldr	r3, [pc, #304]	@ (800148c <lcd_scan_dir+0x408>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	121a      	asrs	r2, r3, #8
 8001360:	4b4c      	ldr	r3, [pc, #304]	@ (8001494 <lcd_scan_dir+0x410>)
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	4b4a      	ldr	r3, [pc, #296]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001366:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	4b48      	ldr	r3, [pc, #288]	@ (8001490 <lcd_scan_dir+0x40c>)
 800136e:	2280      	movs	r2, #128	@ 0x80
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	4b47      	ldr	r3, [pc, #284]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001378:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 3);
 800137a:	4b44      	ldr	r3, [pc, #272]	@ (800148c <lcd_scan_dir+0x408>)
 800137c:	895b      	ldrh	r3, [r3, #10]
 800137e:	3303      	adds	r3, #3
 8001380:	b29b      	uxth	r3, r3
 8001382:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001384:	4b42      	ldr	r3, [pc, #264]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001386:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800138a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800138c:	4b40      	ldr	r3, [pc, #256]	@ (8001490 <lcd_scan_dir+0x40c>)
 800138e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001392:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001394:	8afb      	ldrh	r3, [r7, #22]
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b3e      	ldr	r3, [pc, #248]	@ (8001494 <lcd_scan_dir+0x410>)
 800139a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800139c:	4b3c      	ldr	r3, [pc, #240]	@ (8001490 <lcd_scan_dir+0x40c>)
 800139e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013a2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80013a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001490 <lcd_scan_dir+0x40c>)
 80013a6:	2280      	movs	r2, #128	@ 0x80
 80013a8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80013aa:	4b39      	ldr	r3, [pc, #228]	@ (8001490 <lcd_scan_dir+0x40c>)
 80013ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013b0:	611a      	str	r2, [r3, #16]
}
 80013b2:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 80013b4:	4b36      	ldr	r3, [pc, #216]	@ (8001490 <lcd_scan_dir+0x40c>)
 80013b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <lcd_scan_dir+0x40c>)
 80013be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	4b31      	ldr	r3, [pc, #196]	@ (800148c <lcd_scan_dir+0x408>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	4a32      	ldr	r2, [pc, #200]	@ (8001494 <lcd_scan_dir+0x410>)
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	60d3      	str	r3, [r2, #12]
 80013d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <lcd_scan_dir+0x40c>)
 80013d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013d6:	611a      	str	r2, [r3, #16]
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <lcd_scan_dir+0x40c>)
 80013da:	2280      	movs	r2, #128	@ 0x80
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <lcd_scan_dir+0x40c>)
 80013e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e4:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <lcd_scan_dir+0x408>)
 80013e8:	899b      	ldrh	r3, [r3, #12]
 80013ea:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80013ec:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <lcd_scan_dir+0x40c>)
 80013ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013f2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80013f4:	4b26      	ldr	r3, [pc, #152]	@ (8001490 <lcd_scan_dir+0x40c>)
 80013f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013fa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80013fc:	8abb      	ldrh	r3, [r7, #20]
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b24      	ldr	r3, [pc, #144]	@ (8001494 <lcd_scan_dir+0x410>)
 8001402:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001406:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800140a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <lcd_scan_dir+0x40c>)
 800140e:	2280      	movs	r2, #128	@ 0x80
 8001410:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001418:	611a      	str	r2, [r3, #16]
}
 800141a:	bf00      	nop
        lcd_wr_data(0);
 800141c:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <lcd_scan_dir+0x40c>)
 800141e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001426:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800142a:	611a      	str	r2, [r3, #16]
 800142c:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <lcd_scan_dir+0x410>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001434:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001438:	611a      	str	r2, [r3, #16]
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <lcd_scan_dir+0x40c>)
 800143c:	2280      	movs	r2, #128	@ 0x80
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001446:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8001448:	4b10      	ldr	r3, [pc, #64]	@ (800148c <lcd_scan_dir+0x408>)
 800144a:	899b      	ldrh	r3, [r3, #12]
 800144c:	3301      	adds	r3, #1
 800144e:	b29b      	uxth	r3, r3
 8001450:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001452:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001454:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001458:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800145a:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <lcd_scan_dir+0x40c>)
 800145c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001460:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001462:	8a7b      	ldrh	r3, [r7, #18]
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <lcd_scan_dir+0x410>)
 8001468:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <lcd_scan_dir+0x40c>)
 800146c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001470:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001472:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001474:	2280      	movs	r2, #128	@ 0x80
 8001476:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <lcd_scan_dir+0x40c>)
 800147a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800147e:	611a      	str	r2, [r3, #16]
}
 8001480:	bf00      	nop
        lcd_wr_data(0);
 8001482:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <lcd_scan_dir+0x40c>)
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	e005      	b.n	8001498 <lcd_scan_dir+0x414>
 800148c:	2000002c 	.word	0x2000002c
 8001490:	40011000 	.word	0x40011000
 8001494:	40010c00 	.word	0x40010c00
 8001498:	4b3f      	ldr	r3, [pc, #252]	@ (8001598 <lcd_scan_dir+0x514>)
 800149a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800149e:	611a      	str	r2, [r3, #16]
 80014a0:	4b3e      	ldr	r3, [pc, #248]	@ (800159c <lcd_scan_dir+0x518>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001598 <lcd_scan_dir+0x514>)
 80014a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001598 <lcd_scan_dir+0x514>)
 80014b0:	2280      	movs	r2, #128	@ 0x80
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	4b38      	ldr	r3, [pc, #224]	@ (8001598 <lcd_scan_dir+0x514>)
 80014b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ba:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 2);
 80014bc:	4b38      	ldr	r3, [pc, #224]	@ (80015a0 <lcd_scan_dir+0x51c>)
 80014be:	899b      	ldrh	r3, [r3, #12]
 80014c0:	3302      	adds	r3, #2
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80014c6:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <lcd_scan_dir+0x514>)
 80014c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014cc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80014ce:	4b32      	ldr	r3, [pc, #200]	@ (8001598 <lcd_scan_dir+0x514>)
 80014d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014d4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80014d6:	8a3b      	ldrh	r3, [r7, #16]
 80014d8:	b29a      	uxth	r2, r3
 80014da:	4b30      	ldr	r3, [pc, #192]	@ (800159c <lcd_scan_dir+0x518>)
 80014dc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80014de:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <lcd_scan_dir+0x514>)
 80014e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014e4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80014e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001598 <lcd_scan_dir+0x514>)
 80014e8:	2280      	movs	r2, #128	@ 0x80
 80014ea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <lcd_scan_dir+0x514>)
 80014ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014f2:	611a      	str	r2, [r3, #16]
}
 80014f4:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) >> 8);
 80014f6:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <lcd_scan_dir+0x514>)
 80014f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014fc:	611a      	str	r2, [r3, #16]
 80014fe:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <lcd_scan_dir+0x514>)
 8001500:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <lcd_scan_dir+0x51c>)
 8001508:	885b      	ldrh	r3, [r3, #2]
 800150a:	3b01      	subs	r3, #1
 800150c:	121a      	asrs	r2, r3, #8
 800150e:	4b23      	ldr	r3, [pc, #140]	@ (800159c <lcd_scan_dir+0x518>)
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <lcd_scan_dir+0x514>)
 8001514:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <lcd_scan_dir+0x514>)
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <lcd_scan_dir+0x514>)
 8001522:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001526:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 3);
 8001528:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <lcd_scan_dir+0x51c>)
 800152a:	899b      	ldrh	r3, [r3, #12]
 800152c:	3303      	adds	r3, #3
 800152e:	b29b      	uxth	r3, r3
 8001530:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001532:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <lcd_scan_dir+0x514>)
 8001534:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001538:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800153a:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <lcd_scan_dir+0x514>)
 800153c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001540:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	b29a      	uxth	r2, r3
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <lcd_scan_dir+0x518>)
 8001548:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <lcd_scan_dir+0x514>)
 800154c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001550:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <lcd_scan_dir+0x514>)
 8001554:	2280      	movs	r2, #128	@ 0x80
 8001556:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <lcd_scan_dir+0x514>)
 800155a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800155e:	611a      	str	r2, [r3, #16]
}
 8001560:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <lcd_scan_dir+0x514>)
 8001564:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001568:	611a      	str	r2, [r3, #16]
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <lcd_scan_dir+0x514>)
 800156c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <lcd_scan_dir+0x51c>)
 8001574:	885b      	ldrh	r3, [r3, #2]
 8001576:	3b01      	subs	r3, #1
 8001578:	4a08      	ldr	r2, [pc, #32]	@ (800159c <lcd_scan_dir+0x518>)
 800157a:	b2db      	uxtb	r3, r3
 800157c:	60d3      	str	r3, [r2, #12]
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <lcd_scan_dir+0x514>)
 8001580:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001584:	611a      	str	r2, [r3, #16]
 8001586:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <lcd_scan_dir+0x514>)
 8001588:	2280      	movs	r2, #128	@ 0x80
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	4b02      	ldr	r3, [pc, #8]	@ (8001598 <lcd_scan_dir+0x514>)
 800158e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001592:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 8001594:	e0f8      	b.n	8001788 <lcd_scan_dir+0x704>
 8001596:	bf00      	nop
 8001598:	40011000 	.word	0x40011000
 800159c:	40010c00 	.word	0x40010c00
 80015a0:	2000002c 	.word	0x2000002c
        lcd_wr_regno(lcddev.setxcmd);
 80015a4:	4b7a      	ldr	r3, [pc, #488]	@ (8001790 <lcd_scan_dir+0x70c>)
 80015a6:	895b      	ldrh	r3, [r3, #10]
 80015a8:	843b      	strh	r3, [r7, #32]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80015aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001794 <lcd_scan_dir+0x710>)
 80015ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015b0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80015b2:	4b78      	ldr	r3, [pc, #480]	@ (8001794 <lcd_scan_dir+0x710>)
 80015b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015b8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80015ba:	8c3b      	ldrh	r3, [r7, #32]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b76      	ldr	r3, [pc, #472]	@ (8001798 <lcd_scan_dir+0x714>)
 80015c0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80015c2:	4b74      	ldr	r3, [pc, #464]	@ (8001794 <lcd_scan_dir+0x710>)
 80015c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015c8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80015ca:	4b72      	ldr	r3, [pc, #456]	@ (8001794 <lcd_scan_dir+0x710>)
 80015cc:	2280      	movs	r2, #128	@ 0x80
 80015ce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80015d0:	4b70      	ldr	r3, [pc, #448]	@ (8001794 <lcd_scan_dir+0x710>)
 80015d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d6:	611a      	str	r2, [r3, #16]
}
 80015d8:	bf00      	nop
        lcd_wr_data(0);
 80015da:	4b6e      	ldr	r3, [pc, #440]	@ (8001794 <lcd_scan_dir+0x710>)
 80015dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001794 <lcd_scan_dir+0x710>)
 80015e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015e8:	611a      	str	r2, [r3, #16]
 80015ea:	4b6b      	ldr	r3, [pc, #428]	@ (8001798 <lcd_scan_dir+0x714>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	4b68      	ldr	r3, [pc, #416]	@ (8001794 <lcd_scan_dir+0x710>)
 80015f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	4b66      	ldr	r3, [pc, #408]	@ (8001794 <lcd_scan_dir+0x710>)
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	611a      	str	r2, [r3, #16]
 80015fe:	4b65      	ldr	r3, [pc, #404]	@ (8001794 <lcd_scan_dir+0x710>)
 8001600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001604:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 8001606:	4b63      	ldr	r3, [pc, #396]	@ (8001794 <lcd_scan_dir+0x710>)
 8001608:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	4b61      	ldr	r3, [pc, #388]	@ (8001794 <lcd_scan_dir+0x710>)
 8001610:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	4b60      	ldr	r3, [pc, #384]	@ (8001798 <lcd_scan_dir+0x714>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	4b5d      	ldr	r3, [pc, #372]	@ (8001794 <lcd_scan_dir+0x710>)
 800161e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	4b5b      	ldr	r3, [pc, #364]	@ (8001794 <lcd_scan_dir+0x710>)
 8001626:	2280      	movs	r2, #128	@ 0x80
 8001628:	611a      	str	r2, [r3, #16]
 800162a:	4b5a      	ldr	r3, [pc, #360]	@ (8001794 <lcd_scan_dir+0x710>)
 800162c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001630:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) >> 8);
 8001632:	4b58      	ldr	r3, [pc, #352]	@ (8001794 <lcd_scan_dir+0x710>)
 8001634:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	4b56      	ldr	r3, [pc, #344]	@ (8001794 <lcd_scan_dir+0x710>)
 800163c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	4b53      	ldr	r3, [pc, #332]	@ (8001790 <lcd_scan_dir+0x70c>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	3b01      	subs	r3, #1
 8001648:	121a      	asrs	r2, r3, #8
 800164a:	4b53      	ldr	r3, [pc, #332]	@ (8001798 <lcd_scan_dir+0x714>)
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	4b51      	ldr	r3, [pc, #324]	@ (8001794 <lcd_scan_dir+0x710>)
 8001650:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	4b4f      	ldr	r3, [pc, #316]	@ (8001794 <lcd_scan_dir+0x710>)
 8001658:	2280      	movs	r2, #128	@ 0x80
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	4b4d      	ldr	r3, [pc, #308]	@ (8001794 <lcd_scan_dir+0x710>)
 800165e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001662:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8001664:	4b4b      	ldr	r3, [pc, #300]	@ (8001794 <lcd_scan_dir+0x710>)
 8001666:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	4b49      	ldr	r3, [pc, #292]	@ (8001794 <lcd_scan_dir+0x710>)
 800166e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	4b46      	ldr	r3, [pc, #280]	@ (8001790 <lcd_scan_dir+0x70c>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	3b01      	subs	r3, #1
 800167a:	4a47      	ldr	r2, [pc, #284]	@ (8001798 <lcd_scan_dir+0x714>)
 800167c:	b2db      	uxtb	r3, r3
 800167e:	60d3      	str	r3, [r2, #12]
 8001680:	4b44      	ldr	r3, [pc, #272]	@ (8001794 <lcd_scan_dir+0x710>)
 8001682:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	4b42      	ldr	r3, [pc, #264]	@ (8001794 <lcd_scan_dir+0x710>)
 800168a:	2280      	movs	r2, #128	@ 0x80
 800168c:	611a      	str	r2, [r3, #16]
 800168e:	4b41      	ldr	r3, [pc, #260]	@ (8001794 <lcd_scan_dir+0x710>)
 8001690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001694:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8001696:	4b3e      	ldr	r3, [pc, #248]	@ (8001790 <lcd_scan_dir+0x70c>)
 8001698:	899b      	ldrh	r3, [r3, #12]
 800169a:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800169c:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <lcd_scan_dir+0x710>)
 800169e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016a2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80016a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001794 <lcd_scan_dir+0x710>)
 80016a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016aa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80016ac:	8bfb      	ldrh	r3, [r7, #30]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4b39      	ldr	r3, [pc, #228]	@ (8001798 <lcd_scan_dir+0x714>)
 80016b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80016b4:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <lcd_scan_dir+0x710>)
 80016b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80016bc:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <lcd_scan_dir+0x710>)
 80016be:	2280      	movs	r2, #128	@ 0x80
 80016c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80016c2:	4b34      	ldr	r3, [pc, #208]	@ (8001794 <lcd_scan_dir+0x710>)
 80016c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c8:	611a      	str	r2, [r3, #16]
}
 80016ca:	bf00      	nop
        lcd_wr_data(0);
 80016cc:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <lcd_scan_dir+0x710>)
 80016ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <lcd_scan_dir+0x710>)
 80016d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016da:	611a      	str	r2, [r3, #16]
 80016dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <lcd_scan_dir+0x714>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <lcd_scan_dir+0x710>)
 80016e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <lcd_scan_dir+0x710>)
 80016ec:	2280      	movs	r2, #128	@ 0x80
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <lcd_scan_dir+0x710>)
 80016f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016f6:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 80016f8:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <lcd_scan_dir+0x710>)
 80016fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <lcd_scan_dir+0x710>)
 8001702:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <lcd_scan_dir+0x714>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <lcd_scan_dir+0x710>)
 8001710:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <lcd_scan_dir+0x710>)
 8001718:	2280      	movs	r2, #128	@ 0x80
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <lcd_scan_dir+0x710>)
 800171e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001722:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <lcd_scan_dir+0x710>)
 8001726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <lcd_scan_dir+0x710>)
 800172e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <lcd_scan_dir+0x70c>)
 8001736:	885b      	ldrh	r3, [r3, #2]
 8001738:	3b01      	subs	r3, #1
 800173a:	121a      	asrs	r2, r3, #8
 800173c:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <lcd_scan_dir+0x714>)
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <lcd_scan_dir+0x710>)
 8001742:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001746:	611a      	str	r2, [r3, #16]
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <lcd_scan_dir+0x710>)
 800174a:	2280      	movs	r2, #128	@ 0x80
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <lcd_scan_dir+0x710>)
 8001750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001754:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <lcd_scan_dir+0x710>)
 8001758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800175c:	611a      	str	r2, [r3, #16]
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <lcd_scan_dir+0x710>)
 8001760:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <lcd_scan_dir+0x70c>)
 8001768:	885b      	ldrh	r3, [r3, #2]
 800176a:	3b01      	subs	r3, #1
 800176c:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <lcd_scan_dir+0x714>)
 800176e:	b2db      	uxtb	r3, r3
 8001770:	60d3      	str	r3, [r2, #12]
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <lcd_scan_dir+0x710>)
 8001774:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <lcd_scan_dir+0x710>)
 800177c:	2280      	movs	r2, #128	@ 0x80
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <lcd_scan_dir+0x710>)
 8001782:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001786:	611a      	str	r2, [r3, #16]
}
 8001788:	bf00      	nop
 800178a:	3728      	adds	r7, #40	@ 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000002c 	.word	0x2000002c
 8001794:	40011000 	.word	0x40011000
 8001798:	40010c00 	.word	0x40010c00

0800179c <lcd_draw_point>:
 * @param       x,y: ����
 * @param       color: �����ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	603a      	str	r2, [r7, #0]
 80017a6:	80fb      	strh	r3, [r7, #6]
 80017a8:	460b      	mov	r3, r1
 80017aa:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* ���ù��λ�� */
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff f952 	bl	8000a5c <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 80017b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <lcd_draw_point+0x88>)
 80017ba:	891b      	ldrh	r3, [r3, #8]
 80017bc:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80017be:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <lcd_draw_point+0x8c>)
 80017c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017c4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80017c6:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <lcd_draw_point+0x8c>)
 80017c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017cc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80017ce:	89fb      	ldrh	r3, [r7, #14]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <lcd_draw_point+0x90>)
 80017d4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80017d6:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <lcd_draw_point+0x8c>)
 80017d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017dc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <lcd_draw_point+0x8c>)
 80017e0:	2280      	movs	r2, #128	@ 0x80
 80017e2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <lcd_draw_point+0x8c>)
 80017e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ea:	611a      	str	r2, [r3, #16]
}
 80017ec:	bf00      	nop
}
 80017ee:	bf00      	nop
    lcd_write_ram_prepare();    /* ��ʼд��GRAM */
    lcd_wr_data(color);
 80017f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <lcd_draw_point+0x8c>)
 80017f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <lcd_draw_point+0x8c>)
 80017fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <lcd_draw_point+0x90>)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	60d3      	str	r3, [r2, #12]
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <lcd_draw_point+0x8c>)
 8001808:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <lcd_draw_point+0x8c>)
 8001810:	2280      	movs	r2, #128	@ 0x80
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <lcd_draw_point+0x8c>)
 8001816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800181a:	611a      	str	r2, [r3, #16]
}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000002c 	.word	0x2000002c
 8001828:	40011000 	.word	0x40011000
 800182c:	40010c00 	.word	0x40010c00

08001830 <lcd_ssd_backlight_set>:
 * @brief       SSD1963�����������ú���
 * @param       pwm: ����ȼ�,0~100.Խ��Խ��.
 * @retval      ��
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
 800183a:	23be      	movs	r3, #190	@ 0xbe
 800183c:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800183e:	4b5a      	ldr	r3, [pc, #360]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001840:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001844:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001846:	4b58      	ldr	r3, [pc, #352]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001848:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800184c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b56      	ldr	r3, [pc, #344]	@ (80019ac <lcd_ssd_backlight_set+0x17c>)
 8001854:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001856:	4b54      	ldr	r3, [pc, #336]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001858:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800185c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800185e:	4b52      	ldr	r3, [pc, #328]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001860:	2280      	movs	r2, #128	@ 0x80
 8001862:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001864:	4b50      	ldr	r3, [pc, #320]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800186a:	611a      	str	r2, [r3, #16]
}
 800186c:	bf00      	nop
    lcd_wr_regno(0xBE);         /* ����PWM��� */
    lcd_wr_data(0x05);          /* 1����PWMƵ�� */
 800186e:	4b4e      	ldr	r3, [pc, #312]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001870:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001874:	611a      	str	r2, [r3, #16]
 8001876:	4b4c      	ldr	r3, [pc, #304]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001878:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	4b4b      	ldr	r3, [pc, #300]	@ (80019ac <lcd_ssd_backlight_set+0x17c>)
 8001880:	2205      	movs	r2, #5
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	4b48      	ldr	r3, [pc, #288]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001886:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800188a:	611a      	str	r2, [r3, #16]
 800188c:	4b46      	ldr	r3, [pc, #280]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 800188e:	2280      	movs	r2, #128	@ 0x80
 8001890:	611a      	str	r2, [r3, #16]
 8001892:	4b45      	ldr	r3, [pc, #276]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001898:	611a      	str	r2, [r3, #16]
    lcd_wr_data(pwm * 2.55);    /* 2����PWMռ�ձ� */
 800189a:	4b43      	ldr	r3, [pc, #268]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 800189c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018a0:	611a      	str	r2, [r3, #16]
 80018a2:	4b41      	ldr	r3, [pc, #260]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 80018a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe ff3f 	bl	8000730 <__aeabi_i2d>
 80018b2:	a33b      	add	r3, pc, #236	@ (adr r3, 80019a0 <lcd_ssd_backlight_set+0x170>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe fcbe 	bl	8000238 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4c3a      	ldr	r4, [pc, #232]	@ (80019ac <lcd_ssd_backlight_set+0x17c>)
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7fe ff9d 	bl	8000804 <__aeabi_d2uiz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	60e3      	str	r3, [r4, #12]
 80018ce:	4b36      	ldr	r3, [pc, #216]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 80018d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	4b34      	ldr	r3, [pc, #208]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 80018d8:	2280      	movs	r2, #128	@ 0x80
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	4b32      	ldr	r3, [pc, #200]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 80018de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e2:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x01);          /* 3����C */
 80018e4:	4b30      	ldr	r3, [pc, #192]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 80018e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018ea:	611a      	str	r2, [r3, #16]
 80018ec:	4b2e      	ldr	r3, [pc, #184]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 80018ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	4b2d      	ldr	r3, [pc, #180]	@ (80019ac <lcd_ssd_backlight_set+0x17c>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 80018fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001900:	611a      	str	r2, [r3, #16]
 8001902:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001904:	2280      	movs	r2, #128	@ 0x80
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 800190a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800190e:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0xFF);          /* 4����D */
 8001910:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001912:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 800191a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <lcd_ssd_backlight_set+0x17c>)
 8001922:	22ff      	movs	r2, #255	@ 0xff
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001928:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001930:	2280      	movs	r2, #128	@ 0x80
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800193a:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 5����E */
 800193c:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 800193e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001946:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <lcd_ssd_backlight_set+0x17c>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001954:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 800195c:	2280      	movs	r2, #128	@ 0x80
 800195e:	611a      	str	r2, [r3, #16]
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001966:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 6����F */
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 800196a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001972:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <lcd_ssd_backlight_set+0x17c>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001980:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 8001988:	2280      	movs	r2, #128	@ 0x80
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <lcd_ssd_backlight_set+0x178>)
 800198e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001992:	611a      	str	r2, [r3, #16]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bd90      	pop	{r4, r7, pc}
 800199c:	f3af 8000 	nop.w
 80019a0:	66666666 	.word	0x66666666
 80019a4:	40046666 	.word	0x40046666
 80019a8:	40011000 	.word	0x40011000
 80019ac:	40010c00 	.word	0x40010c00

080019b0 <lcd_display_dir>:
 * @brief       ����LCD��ʾ����
 * @param       dir:0,����; 1,����
 * @retval      ��
 */
void lcd_display_dir(uint8_t dir)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* ����/���� */
 80019ba:	4a68      	ldr	r2, [pc, #416]	@ (8001b5c <lcd_display_dir+0x1ac>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* ���� */
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d165      	bne.n	8001a92 <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 80019c6:	4b65      	ldr	r3, [pc, #404]	@ (8001b5c <lcd_display_dir+0x1ac>)
 80019c8:	22f0      	movs	r2, #240	@ 0xf0
 80019ca:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 80019cc:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <lcd_display_dir+0x1ac>)
 80019ce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019d2:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 80019d4:	4b61      	ldr	r3, [pc, #388]	@ (8001b5c <lcd_display_dir+0x1ac>)
 80019d6:	889b      	ldrh	r3, [r3, #4]
 80019d8:	f245 5210 	movw	r2, #21776	@ 0x5510
 80019dc:	4293      	cmp	r3, r2
 80019de:	d114      	bne.n	8001a0a <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 80019e0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b5c <lcd_display_dir+0x1ac>)
 80019e2:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80019e6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 80019e8:	4b5c      	ldr	r3, [pc, #368]	@ (8001b5c <lcd_display_dir+0x1ac>)
 80019ea:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 80019ee:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 80019f0:	4b5a      	ldr	r3, [pc, #360]	@ (8001b5c <lcd_display_dir+0x1ac>)
 80019f2:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 80019f6:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 80019f8:	4b58      	ldr	r3, [pc, #352]	@ (8001b5c <lcd_display_dir+0x1ac>)
 80019fa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80019fe:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001a00:	4b56      	ldr	r3, [pc, #344]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a02:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001a06:	805a      	strh	r2, [r3, #2]
 8001a08:	e020      	b.n	8001a4c <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 8001a0a:	4b54      	ldr	r3, [pc, #336]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a0c:	889b      	ldrh	r3, [r3, #4]
 8001a0e:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d111      	bne.n	8001a3a <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001a16:	4b51      	ldr	r3, [pc, #324]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a18:	222c      	movs	r2, #44	@ 0x2c
 8001a1a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* ����дX����ָ�� */
 8001a1c:	4b4f      	ldr	r3, [pc, #316]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a1e:	222b      	movs	r2, #43	@ 0x2b
 8001a20:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* ����дY����ָ�� */
 8001a22:	4b4e      	ldr	r3, [pc, #312]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a24:	222a      	movs	r2, #42	@ 0x2a
 8001a26:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* ���ÿ��480 */
 8001a28:	4b4c      	ldr	r3, [pc, #304]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a2a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001a2e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* ���ø߶�800 */
 8001a30:	4b4a      	ldr	r3, [pc, #296]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a32:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001a36:	805a      	strh	r2, [r3, #2]
 8001a38:	e008      	b.n	8001a4c <lcd_display_dir+0x9c>
        }
        else   /* ����IC, ����: 9341 / 5310 / 7789 / 7796 / 9806 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001a3a:	4b48      	ldr	r3, [pc, #288]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a3c:	222c      	movs	r2, #44	@ 0x2c
 8001a3e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001a40:	4b46      	ldr	r3, [pc, #280]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a42:	222a      	movs	r2, #42	@ 0x2a
 8001a44:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001a46:	4b45      	ldr	r3, [pc, #276]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a48:	222b      	movs	r2, #43	@ 0x2b
 8001a4a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001a4c:	4b43      	ldr	r3, [pc, #268]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a4e:	889b      	ldrh	r3, [r3, #4]
 8001a50:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d005      	beq.n	8001a64 <lcd_display_dir+0xb4>
 8001a58:	4b40      	ldr	r3, [pc, #256]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a5a:	889b      	ldrh	r3, [r3, #4]
 8001a5c:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d107      	bne.n	8001a74 <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8001a64:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a66:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001a6a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a6e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001a72:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* �����9806 ���ʾ�� 480*800 �ֱ��� */
 8001a74:	4b39      	ldr	r3, [pc, #228]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a76:	889b      	ldrh	r3, [r3, #4]
 8001a78:	f649 0206 	movw	r2, #38918	@ 0x9806
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d165      	bne.n	8001b4c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001a80:	4b36      	ldr	r3, [pc, #216]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a82:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001a86:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001a88:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a8a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001a8e:	805a      	strh	r2, [r3, #2]
 8001a90:	e05c      	b.n	8001b4c <lcd_display_dir+0x19c>
        }
    }
    else                /* ���� */
    {
        lcddev.width = 320;         /* Ĭ�Ͽ�� */
 8001a92:	4b32      	ldr	r3, [pc, #200]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a94:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001a98:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Ĭ�ϸ߶� */
 8001a9a:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001a9c:	22f0      	movs	r2, #240	@ 0xf0
 8001a9e:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001aa2:	889b      	ldrh	r3, [r3, #4]
 8001aa4:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d114      	bne.n	8001ad6 <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 8001aac:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001aae:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001ab2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001ab4:	4b29      	ldr	r3, [pc, #164]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001ab6:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001aba:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001abc:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001abe:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001ac2:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8001ac4:	4b25      	ldr	r3, [pc, #148]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001ac6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001aca:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001acc:	4b23      	ldr	r3, [pc, #140]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001ace:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001ad2:	805a      	strh	r2, [r3, #2]
 8001ad4:	e026      	b.n	8001b24 <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8001ad6:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001ad8:	889b      	ldrh	r3, [r3, #4]
 8001ada:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d005      	beq.n	8001aee <lcd_display_dir+0x13e>
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001ae4:	889b      	ldrh	r3, [r3, #4]
 8001ae6:	f649 0206 	movw	r2, #38918	@ 0x9806
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d111      	bne.n	8001b12 <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001af0:	222c      	movs	r2, #44	@ 0x2c
 8001af2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* ����дX����ָ�� */
 8001af4:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001af6:	222a      	movs	r2, #42	@ 0x2a
 8001af8:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* ����дY����ָ�� */
 8001afa:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001afc:	222b      	movs	r2, #43	@ 0x2b
 8001afe:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* ���ÿ��800 */
 8001b00:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001b02:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b06:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* ���ø߶�480 */
 8001b08:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001b0a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b0e:	805a      	strh	r2, [r3, #2]
 8001b10:	e008      	b.n	8001b24 <lcd_display_dir+0x174>
        }
        else     /* ����IC, ����: 9341 / 5310 / 7789 / 7796 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001b12:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001b14:	222c      	movs	r2, #44	@ 0x2c
 8001b16:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001b18:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001b1a:	222a      	movs	r2, #42	@ 0x2a
 8001b1c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001b20:	222b      	movs	r2, #43	@ 0x2b
 8001b22:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001b24:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001b26:	889b      	ldrh	r3, [r3, #4]
 8001b28:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d005      	beq.n	8001b3c <lcd_display_dir+0x18c>
 8001b30:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001b32:	889b      	ldrh	r3, [r3, #4]
 8001b34:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d107      	bne.n	8001b4c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001b3e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b42:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <lcd_display_dir+0x1ac>)
 8001b46:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b4a:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Ĭ��ɨ�跽�� */
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fa99 	bl	8001084 <lcd_scan_dir>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000002c 	.word	0x2000002c

08001b60 <lcd_init>:
 *
 * @param       ��
 * @retval      ��
 */
void lcd_init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0da      	sub	sp, #360	@ 0x168
 8001b64:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_struct;
    
    LCD_BL_GPIO_CLK_ENABLE();   /* LCD_BL��ʱ��ʹ�� */
 8001b66:	4bbe      	ldr	r3, [pc, #760]	@ (8001e60 <lcd_init+0x300>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	4abd      	ldr	r2, [pc, #756]	@ (8001e60 <lcd_init+0x300>)
 8001b6c:	f043 0310 	orr.w	r3, r3, #16
 8001b70:	6193      	str	r3, [r2, #24]
 8001b72:	4bbb      	ldr	r3, [pc, #748]	@ (8001e60 <lcd_init+0x300>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f003 0210 	and.w	r2, r3, #16
 8001b7a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001b7e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001b88:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b8c:	681b      	ldr	r3, [r3, #0]
    LCD_CS_GPIO_CLK_ENABLE();   /* LCD_CS��ʱ��ʹ�� */
 8001b8e:	4bb4      	ldr	r3, [pc, #720]	@ (8001e60 <lcd_init+0x300>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	4ab3      	ldr	r2, [pc, #716]	@ (8001e60 <lcd_init+0x300>)
 8001b94:	f043 0310 	orr.w	r3, r3, #16
 8001b98:	6193      	str	r3, [r2, #24]
 8001b9a:	4bb1      	ldr	r3, [pc, #708]	@ (8001e60 <lcd_init+0x300>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0210 	and.w	r2, r3, #16
 8001ba2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ba6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001bb0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001bb4:	681b      	ldr	r3, [r3, #0]
    LCD_WR_GPIO_CLK_ENABLE();   /* LCD_WR��ʱ��ʹ�� */
 8001bb6:	4baa      	ldr	r3, [pc, #680]	@ (8001e60 <lcd_init+0x300>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4aa9      	ldr	r2, [pc, #676]	@ (8001e60 <lcd_init+0x300>)
 8001bbc:	f043 0310 	orr.w	r3, r3, #16
 8001bc0:	6193      	str	r3, [r2, #24]
 8001bc2:	4ba7      	ldr	r3, [pc, #668]	@ (8001e60 <lcd_init+0x300>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0210 	and.w	r2, r3, #16
 8001bca:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001bce:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001bd8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001bdc:	681b      	ldr	r3, [r3, #0]
    LCD_RD_GPIO_CLK_ENABLE();   /* LCD_RD��ʱ��ʹ�� */
 8001bde:	4ba0      	ldr	r3, [pc, #640]	@ (8001e60 <lcd_init+0x300>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	4a9f      	ldr	r2, [pc, #636]	@ (8001e60 <lcd_init+0x300>)
 8001be4:	f043 0310 	orr.w	r3, r3, #16
 8001be8:	6193      	str	r3, [r2, #24]
 8001bea:	4b9d      	ldr	r3, [pc, #628]	@ (8001e60 <lcd_init+0x300>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 0210 	and.w	r2, r3, #16
 8001bf2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001bf6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c00:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001c04:	681b      	ldr	r3, [r3, #0]
    LCD_RS_GPIO_CLK_ENABLE();   /* LCD_RS��ʱ��ʹ�� */
 8001c06:	4b96      	ldr	r3, [pc, #600]	@ (8001e60 <lcd_init+0x300>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	4a95      	ldr	r2, [pc, #596]	@ (8001e60 <lcd_init+0x300>)
 8001c0c:	f043 0310 	orr.w	r3, r3, #16
 8001c10:	6193      	str	r3, [r2, #24]
 8001c12:	4b93      	ldr	r3, [pc, #588]	@ (8001e60 <lcd_init+0x300>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f003 0210 	and.w	r2, r3, #16
 8001c1a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c1e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c28:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c2c:	681b      	ldr	r3, [r3, #0]
    LCD_DATA_GPIO_CLK_ENABLE(); /* LCD_DATA��ʱ��ʹ�� */
 8001c2e:	4b8c      	ldr	r3, [pc, #560]	@ (8001e60 <lcd_init+0x300>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	4a8b      	ldr	r2, [pc, #556]	@ (8001e60 <lcd_init+0x300>)
 8001c34:	f043 0308 	orr.w	r3, r3, #8
 8001c38:	6193      	str	r3, [r2, #24]
 8001c3a:	4b89      	ldr	r3, [pc, #548]	@ (8001e60 <lcd_init+0x300>)
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f003 0208 	and.w	r2, r3, #8
 8001c42:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c46:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c50:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c54:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_AFIO_CLK_ENABLE();
 8001c56:	4b82      	ldr	r3, [pc, #520]	@ (8001e60 <lcd_init+0x300>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	4a81      	ldr	r2, [pc, #516]	@ (8001e60 <lcd_init+0x300>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6193      	str	r3, [r2, #24]
 8001c62:	4b7f      	ldr	r3, [pc, #508]	@ (8001e60 <lcd_init+0x300>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c6e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c78:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c7c:	681b      	ldr	r3, [r3, #0]
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); /* ��ֹJTAG, ʹ��SWD, �ͷ�PB3,PB4������������ͨIO�� */
 8001c7e:	4b79      	ldr	r3, [pc, #484]	@ (8001e64 <lcd_init+0x304>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c86:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c8a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c8e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c92:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c9e:	4a71      	ldr	r2, [pc, #452]	@ (8001e64 <lcd_init+0x304>)
 8001ca0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001ca4:	6053      	str	r3, [r2, #4]
    
    gpio_init_struct.Pin = LCD_BL_GPIO_PIN;
 8001ca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001caa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;               
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          
 8001cba:	2303      	movs	r3, #3
 8001cbc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &gpio_init_struct);     /* LCD_BL����ģʽ����(�������) */
 8001cc0:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4868      	ldr	r0, [pc, #416]	@ (8001e68 <lcd_init+0x308>)
 8001cc8:	f005 fd2e 	bl	8007728 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_CS_GPIO_PIN;
 8001ccc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cd0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ���츴�� */
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    /* ���� */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          /* ���� */
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_CS���� */
 8001ce6:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001cea:	4619      	mov	r1, r3
 8001cec:	485e      	ldr	r0, [pc, #376]	@ (8001e68 <lcd_init+0x308>)
 8001cee:	f005 fd1b 	bl	8007728 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_WR_GPIO_PIN;
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_WR���� */
 8001cf8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	485a      	ldr	r0, [pc, #360]	@ (8001e68 <lcd_init+0x308>)
 8001d00:	f005 fd12 	bl	8007728 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RD_GPIO_PIN;
 8001d04:	2340      	movs	r3, #64	@ 0x40
 8001d06:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RD���� */
 8001d0a:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4855      	ldr	r0, [pc, #340]	@ (8001e68 <lcd_init+0x308>)
 8001d12:	f005 fd09 	bl	8007728 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RS_GPIO_PIN;
 8001d16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d1a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RS���� */
 8001d1e:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d22:	4619      	mov	r1, r3
 8001d24:	4850      	ldr	r0, [pc, #320]	@ (8001e68 <lcd_init+0x308>)
 8001d26:	f005 fcff 	bl	8007728 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8001d2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d2e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ������� */
 8001d32:	2301      	movs	r3, #1
 8001d34:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);   /* LCD_DATA����ģʽ���� */
 8001d38:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	484b      	ldr	r0, [pc, #300]	@ (8001e6c <lcd_init+0x30c>)
 8001d40:	f005 fcf2 	bl	8007728 <HAL_GPIO_Init>
    LCD_WR(1);                  /* WR Ĭ�ϸߵ�ƽ */
 8001d44:	4b48      	ldr	r3, [pc, #288]	@ (8001e68 <lcd_init+0x308>)
 8001d46:	2280      	movs	r2, #128	@ 0x80
 8001d48:	611a      	str	r2, [r3, #16]
    LCD_RD(1);                  /* RD Ĭ�ϸߵ�ƽ */
 8001d4a:	4b47      	ldr	r3, [pc, #284]	@ (8001e68 <lcd_init+0x308>)
 8001d4c:	2240      	movs	r2, #64	@ 0x40
 8001d4e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);                  /* CS Ĭ�ϸߵ�ƽ */
 8001d50:	4b45      	ldr	r3, [pc, #276]	@ (8001e68 <lcd_init+0x308>)
 8001d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d56:	611a      	str	r2, [r3, #16]
    LCD_RS(1);                  /* RS Ĭ�ϸߵ�ƽ */
 8001d58:	4b43      	ldr	r3, [pc, #268]	@ (8001e68 <lcd_init+0x308>)
 8001d5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d5e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(0XFFFF);       /* DATA Ĭ�ϸߵ�ƽ */
 8001d60:	4b42      	ldr	r3, [pc, #264]	@ (8001e6c <lcd_init+0x30c>)
 8001d62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d66:	60da      	str	r2, [r3, #12]

    lcd_opt_delay(0X1FFFF);
 8001d68:	4841      	ldr	r0, [pc, #260]	@ (8001e70 <lcd_init+0x310>)
 8001d6a:	f7fe fe23 	bl	80009b4 <lcd_opt_delay>
 8001d6e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d72:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d76:	22d3      	movs	r2, #211	@ 0xd3
 8001d78:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e68 <lcd_init+0x308>)
 8001d7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d80:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001d82:	4b39      	ldr	r3, [pc, #228]	@ (8001e68 <lcd_init+0x308>)
 8001d84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d88:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001d8a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d8e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b35      	ldr	r3, [pc, #212]	@ (8001e6c <lcd_init+0x30c>)
 8001d98:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001d9a:	4b33      	ldr	r3, [pc, #204]	@ (8001e68 <lcd_init+0x308>)
 8001d9c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001da0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001da2:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <lcd_init+0x308>)
 8001da4:	2280      	movs	r2, #128	@ 0x80
 8001da6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001da8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <lcd_init+0x308>)
 8001daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dae:	611a      	str	r2, [r3, #16]
}
 8001db0:	bf00      	nop

    /* ����9341 ID�Ķ�ȡ */
    lcd_wr_regno(0XD3);
    lcddev.id = lcd_rd_data();  /* dummy read */
 8001db2:	f7fe fe0f 	bl	80009d4 <lcd_rd_data>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b2e      	ldr	r3, [pc, #184]	@ (8001e74 <lcd_init+0x314>)
 8001dbc:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ����0X00 */
 8001dbe:	f7fe fe09 	bl	80009d4 <lcd_rd_data>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e74 <lcd_init+0x314>)
 8001dc8:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ��ȡ0X93 */
 8001dca:	f7fe fe03 	bl	80009d4 <lcd_rd_data>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b28      	ldr	r3, [pc, #160]	@ (8001e74 <lcd_init+0x314>)
 8001dd4:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 8001dd6:	4b27      	ldr	r3, [pc, #156]	@ (8001e74 <lcd_init+0x314>)
 8001dd8:	889b      	ldrh	r3, [r3, #4]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <lcd_init+0x314>)
 8001de0:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* ��ȡ0X41 */
 8001de2:	f7fe fdf7 	bl	80009d4 <lcd_rd_data>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b22      	ldr	r3, [pc, #136]	@ (8001e74 <lcd_init+0x314>)
 8001dec:	889b      	ldrh	r3, [r3, #4]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <lcd_init+0x314>)
 8001df4:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* ���� 9341 , ���Կ����ǲ��� ST7789 */
 8001df6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e74 <lcd_init+0x314>)
 8001df8:	889b      	ldrh	r3, [r3, #4]
 8001dfa:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	f000 820e 	beq.w	8002220 <lcd_init+0x6c0>
 8001e04:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e08:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001e10:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <lcd_init+0x308>)
 8001e12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e16:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001e18:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <lcd_init+0x308>)
 8001e1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e1e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001e20:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e24:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <lcd_init+0x30c>)
 8001e2e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001e30:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <lcd_init+0x308>)
 8001e32:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e36:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <lcd_init+0x308>)
 8001e3a:	2280      	movs	r2, #128	@ 0x80
 8001e3c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <lcd_init+0x308>)
 8001e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e44:	611a      	str	r2, [r3, #16]
}
 8001e46:	bf00      	nop
    {
        lcd_wr_regno(0X04);
        lcddev.id = lcd_rd_data();      /* dummy read */
 8001e48:	f7fe fdc4 	bl	80009d4 <lcd_rd_data>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <lcd_init+0x314>)
 8001e52:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ����0X85 */
 8001e54:	f7fe fdbe 	bl	80009d4 <lcd_rd_data>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	e00c      	b.n	8001e78 <lcd_init+0x318>
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40011000 	.word	0x40011000
 8001e6c:	40010c00 	.word	0x40010c00
 8001e70:	0001ffff 	.word	0x0001ffff
 8001e74:	2000002c 	.word	0x2000002c
 8001e78:	4bb1      	ldr	r3, [pc, #708]	@ (8002140 <lcd_init+0x5e0>)
 8001e7a:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ��ȡ0X85 */
 8001e7c:	f7fe fdaa 	bl	80009d4 <lcd_rd_data>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	4bae      	ldr	r3, [pc, #696]	@ (8002140 <lcd_init+0x5e0>)
 8001e86:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8001e88:	4bad      	ldr	r3, [pc, #692]	@ (8002140 <lcd_init+0x5e0>)
 8001e8a:	889b      	ldrh	r3, [r3, #4]
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	4bab      	ldr	r3, [pc, #684]	@ (8002140 <lcd_init+0x5e0>)
 8001e92:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* ��ȡ0X52 */
 8001e94:	f7fe fd9e 	bl	80009d4 <lcd_rd_data>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4ba8      	ldr	r3, [pc, #672]	@ (8002140 <lcd_init+0x5e0>)
 8001e9e:	889b      	ldrh	r3, [r3, #4]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4ba6      	ldr	r3, [pc, #664]	@ (8002140 <lcd_init+0x5e0>)
 8001ea6:	809a      	strh	r2, [r3, #4]
        
        if (lcddev.id == 0X8552)        /* ��8552��IDת����7789 */
 8001ea8:	4ba5      	ldr	r3, [pc, #660]	@ (8002140 <lcd_init+0x5e0>)
 8001eaa:	889b      	ldrh	r3, [r3, #4]
 8001eac:	f248 5252 	movw	r2, #34130	@ 0x8552
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d103      	bne.n	8001ebc <lcd_init+0x35c>
        {
            lcddev.id = 0x7789;
 8001eb4:	4ba2      	ldr	r3, [pc, #648]	@ (8002140 <lcd_init+0x5e0>)
 8001eb6:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001eba:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Ҳ����ST7789, �����ǲ��� NT35310 */
 8001ebc:	4ba0      	ldr	r3, [pc, #640]	@ (8002140 <lcd_init+0x5e0>)
 8001ebe:	889b      	ldrh	r3, [r3, #4]
 8001ec0:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	f000 81ab 	beq.w	8002220 <lcd_init+0x6c0>
 8001eca:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ece:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ed2:	22d4      	movs	r2, #212	@ 0xd4
 8001ed4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001ed6:	4b9b      	ldr	r3, [pc, #620]	@ (8002144 <lcd_init+0x5e4>)
 8001ed8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001edc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001ede:	4b99      	ldr	r3, [pc, #612]	@ (8002144 <lcd_init+0x5e4>)
 8001ee0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ee4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001ee6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001eea:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	4b95      	ldr	r3, [pc, #596]	@ (8002148 <lcd_init+0x5e8>)
 8001ef4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001ef6:	4b93      	ldr	r3, [pc, #588]	@ (8002144 <lcd_init+0x5e4>)
 8001ef8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001efc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001efe:	4b91      	ldr	r3, [pc, #580]	@ (8002144 <lcd_init+0x5e4>)
 8001f00:	2280      	movs	r2, #128	@ 0x80
 8001f02:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001f04:	4b8f      	ldr	r3, [pc, #572]	@ (8002144 <lcd_init+0x5e4>)
 8001f06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f0a:	611a      	str	r2, [r3, #16]
}
 8001f0c:	bf00      	nop
        {
            lcd_wr_regno(0xD4);
            lcddev.id = lcd_rd_data();  /* dummy read */
 8001f0e:	f7fe fd61 	bl	80009d4 <lcd_rd_data>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b8a      	ldr	r3, [pc, #552]	@ (8002140 <lcd_init+0x5e0>)
 8001f18:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x01 */
 8001f1a:	f7fe fd5b 	bl	80009d4 <lcd_rd_data>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b87      	ldr	r3, [pc, #540]	@ (8002140 <lcd_init+0x5e0>)
 8001f24:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x53 */
 8001f26:	f7fe fd55 	bl	80009d4 <lcd_rd_data>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b84      	ldr	r3, [pc, #528]	@ (8002140 <lcd_init+0x5e0>)
 8001f30:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8001f32:	4b83      	ldr	r3, [pc, #524]	@ (8002140 <lcd_init+0x5e0>)
 8001f34:	889b      	ldrh	r3, [r3, #4]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	4b81      	ldr	r3, [pc, #516]	@ (8002140 <lcd_init+0x5e0>)
 8001f3c:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* �������0x10 */
 8001f3e:	f7fe fd49 	bl	80009d4 <lcd_rd_data>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b7e      	ldr	r3, [pc, #504]	@ (8002140 <lcd_init+0x5e0>)
 8001f48:	889b      	ldrh	r3, [r3, #4]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002140 <lcd_init+0x5e0>)
 8001f50:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Ҳ����NT35310,���Կ����ǲ���ST7796 */
 8001f52:	4b7b      	ldr	r3, [pc, #492]	@ (8002140 <lcd_init+0x5e0>)
 8001f54:	889b      	ldrh	r3, [r3, #4]
 8001f56:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	f000 8160 	beq.w	8002220 <lcd_init+0x6c0>
 8001f60:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f64:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8001f68:	22d3      	movs	r2, #211	@ 0xd3
 8001f6a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001f6c:	4b75      	ldr	r3, [pc, #468]	@ (8002144 <lcd_init+0x5e4>)
 8001f6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f72:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001f74:	4b73      	ldr	r3, [pc, #460]	@ (8002144 <lcd_init+0x5e4>)
 8001f76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f7a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001f7c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f80:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b6f      	ldr	r3, [pc, #444]	@ (8002148 <lcd_init+0x5e8>)
 8001f8a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001f8c:	4b6d      	ldr	r3, [pc, #436]	@ (8002144 <lcd_init+0x5e4>)
 8001f8e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f92:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001f94:	4b6b      	ldr	r3, [pc, #428]	@ (8002144 <lcd_init+0x5e4>)
 8001f96:	2280      	movs	r2, #128	@ 0x80
 8001f98:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002144 <lcd_init+0x5e4>)
 8001f9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fa0:	611a      	str	r2, [r3, #16]
}
 8001fa2:	bf00      	nop
            {
                lcd_wr_regno(0XD3);
                lcddev.id = lcd_rd_data();  /* dummy read */
 8001fa4:	f7fe fd16 	bl	80009d4 <lcd_rd_data>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b64      	ldr	r3, [pc, #400]	@ (8002140 <lcd_init+0x5e0>)
 8001fae:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ����0X00 */
 8001fb0:	f7fe fd10 	bl	80009d4 <lcd_rd_data>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b61      	ldr	r3, [pc, #388]	@ (8002140 <lcd_init+0x5e0>)
 8001fba:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ��ȡ0X77 */
 8001fbc:	f7fe fd0a 	bl	80009d4 <lcd_rd_data>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8002140 <lcd_init+0x5e0>)
 8001fc6:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8001fc8:	4b5d      	ldr	r3, [pc, #372]	@ (8002140 <lcd_init+0x5e0>)
 8001fca:	889b      	ldrh	r3, [r3, #4]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002140 <lcd_init+0x5e0>)
 8001fd2:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* ��ȡ0X96 */
 8001fd4:	f7fe fcfe 	bl	80009d4 <lcd_rd_data>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b58      	ldr	r3, [pc, #352]	@ (8002140 <lcd_init+0x5e0>)
 8001fde:	889b      	ldrh	r3, [r3, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	4b56      	ldr	r3, [pc, #344]	@ (8002140 <lcd_init+0x5e0>)
 8001fe6:	809a      	strh	r2, [r3, #4]
                
                if (lcddev.id != 0x7796)    /* Ҳ����ST7796,���Կ����ǲ���NT35510 */
 8001fe8:	4b55      	ldr	r3, [pc, #340]	@ (8002140 <lcd_init+0x5e0>)
 8001fea:	889b      	ldrh	r3, [r3, #4]
 8001fec:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	f000 8115 	beq.w	8002220 <lcd_init+0x6c0>
                {
                    /* ������Կ�������ṩ�� */
                    lcd_write_reg(0xF000, 0x0055);
 8001ff6:	2155      	movs	r1, #85	@ 0x55
 8001ff8:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8001ffc:	f7fe fc98 	bl	8000930 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8002000:	21aa      	movs	r1, #170	@ 0xaa
 8002002:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8002006:	f7fe fc93 	bl	8000930 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 800200a:	2152      	movs	r1, #82	@ 0x52
 800200c:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8002010:	f7fe fc8e 	bl	8000930 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 8002014:	2108      	movs	r1, #8
 8002016:	f24f 0003 	movw	r0, #61443	@ 0xf003
 800201a:	f7fe fc89 	bl	8000930 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 800201e:	2101      	movs	r1, #1
 8002020:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8002024:	f7fe fc84 	bl	8000930 <lcd_write_reg>
 8002028:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800202c:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8002030:	f44f 4245 	mov.w	r2, #50432	@ 0xc500
 8002034:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002036:	4b43      	ldr	r3, [pc, #268]	@ (8002144 <lcd_init+0x5e4>)
 8002038:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800203c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800203e:	4b41      	ldr	r3, [pc, #260]	@ (8002144 <lcd_init+0x5e4>)
 8002040:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002044:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002046:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800204a:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b3d      	ldr	r3, [pc, #244]	@ (8002148 <lcd_init+0x5e8>)
 8002054:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002056:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <lcd_init+0x5e4>)
 8002058:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800205c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800205e:	4b39      	ldr	r3, [pc, #228]	@ (8002144 <lcd_init+0x5e4>)
 8002060:	2280      	movs	r2, #128	@ 0x80
 8002062:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002064:	4b37      	ldr	r3, [pc, #220]	@ (8002144 <lcd_init+0x5e4>)
 8002066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800206a:	611a      	str	r2, [r3, #16]
}
 800206c:	bf00      	nop

                    lcd_wr_regno(0xC500);       /* ��ȡID�Ͱ�λ */
                    lcddev.id = lcd_rd_data();  /* ����0x55 */
 800206e:	f7fe fcb1 	bl	80009d4 <lcd_rd_data>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	4b32      	ldr	r3, [pc, #200]	@ (8002140 <lcd_init+0x5e0>)
 8002078:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 800207a:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <lcd_init+0x5e0>)
 800207c:	889b      	ldrh	r3, [r3, #4]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b2f      	ldr	r3, [pc, #188]	@ (8002140 <lcd_init+0x5e0>)
 8002084:	809a      	strh	r2, [r3, #4]
 8002086:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800208a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800208e:	f24c 5201 	movw	r2, #50433	@ 0xc501
 8002092:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002094:	4b2b      	ldr	r3, [pc, #172]	@ (8002144 <lcd_init+0x5e4>)
 8002096:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800209a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800209c:	4b29      	ldr	r3, [pc, #164]	@ (8002144 <lcd_init+0x5e4>)
 800209e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020a2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80020a4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80020a8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b25      	ldr	r3, [pc, #148]	@ (8002148 <lcd_init+0x5e8>)
 80020b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80020b4:	4b23      	ldr	r3, [pc, #140]	@ (8002144 <lcd_init+0x5e4>)
 80020b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80020bc:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <lcd_init+0x5e4>)
 80020be:	2280      	movs	r2, #128	@ 0x80
 80020c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80020c2:	4b20      	ldr	r3, [pc, #128]	@ (8002144 <lcd_init+0x5e4>)
 80020c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020c8:	611a      	str	r2, [r3, #16]
}
 80020ca:	bf00      	nop

                    lcd_wr_regno(0xC501);       /* ��ȡID�߰�λ */
                    lcddev.id |= lcd_rd_data(); /* ����0x10 */
 80020cc:	f7fe fc82 	bl	80009d4 <lcd_rd_data>
 80020d0:	4603      	mov	r3, r0
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <lcd_init+0x5e0>)
 80020d6:	889b      	ldrh	r3, [r3, #4]
 80020d8:	4313      	orrs	r3, r2
 80020da:	b29a      	uxth	r2, r3
 80020dc:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <lcd_init+0x5e0>)
 80020de:	809a      	strh	r2, [r3, #4]
                    
                    //delay_ms(5);                /* �ȴ�5ms, ��Ϊ0XC501ָ���1963��˵���������λָ��, �ȴ�5ms��1963��λ����ٲ��� */

                    if (lcddev.id != 0x5510)    /* Ҳ����NT5510,���Կ����ǲ���ILI9806 */
 80020e0:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <lcd_init+0x5e0>)
 80020e2:	889b      	ldrh	r3, [r3, #4]
 80020e4:	f245 5210 	movw	r2, #21776	@ 0x5510
 80020e8:	4293      	cmp	r3, r2
 80020ea:	f000 8099 	beq.w	8002220 <lcd_init+0x6c0>
 80020ee:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80020f2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020f6:	22d3      	movs	r2, #211	@ 0xd3
 80020f8:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <lcd_init+0x5e4>)
 80020fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002100:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002102:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <lcd_init+0x5e4>)
 8002104:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002108:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800210a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800210e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	b29a      	uxth	r2, r3
 8002116:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <lcd_init+0x5e8>)
 8002118:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800211a:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <lcd_init+0x5e4>)
 800211c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002120:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002122:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <lcd_init+0x5e4>)
 8002124:	2280      	movs	r2, #128	@ 0x80
 8002126:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <lcd_init+0x5e4>)
 800212a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800212e:	611a      	str	r2, [r3, #16]
}
 8002130:	bf00      	nop
                    {
                        lcd_wr_regno(0XD3);
                        lcddev.id = lcd_rd_data();  /* dummy read */
 8002132:	f7fe fc4f 	bl	80009d4 <lcd_rd_data>
 8002136:	4603      	mov	r3, r0
 8002138:	461a      	mov	r2, r3
 800213a:	4b01      	ldr	r3, [pc, #4]	@ (8002140 <lcd_init+0x5e0>)
 800213c:	809a      	strh	r2, [r3, #4]
 800213e:	e005      	b.n	800214c <lcd_init+0x5ec>
 8002140:	2000002c 	.word	0x2000002c
 8002144:	40011000 	.word	0x40011000
 8002148:	40010c00 	.word	0x40010c00
                        lcddev.id = lcd_rd_data();  /* ����0X00 */
 800214c:	f7fe fc42 	bl	80009d4 <lcd_rd_data>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	4bb2      	ldr	r3, [pc, #712]	@ (8002420 <lcd_init+0x8c0>)
 8002156:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* ����0X98 */
 8002158:	f7fe fc3c 	bl	80009d4 <lcd_rd_data>
 800215c:	4603      	mov	r3, r0
 800215e:	461a      	mov	r2, r3
 8002160:	4baf      	ldr	r3, [pc, #700]	@ (8002420 <lcd_init+0x8c0>)
 8002162:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 8002164:	4bae      	ldr	r3, [pc, #696]	@ (8002420 <lcd_init+0x8c0>)
 8002166:	889b      	ldrh	r3, [r3, #4]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	b29a      	uxth	r2, r3
 800216c:	4bac      	ldr	r3, [pc, #688]	@ (8002420 <lcd_init+0x8c0>)
 800216e:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* ����0X06 */
 8002170:	f7fe fc30 	bl	80009d4 <lcd_rd_data>
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	4ba9      	ldr	r3, [pc, #676]	@ (8002420 <lcd_init+0x8c0>)
 800217a:	889b      	ldrh	r3, [r3, #4]
 800217c:	4313      	orrs	r3, r2
 800217e:	b29a      	uxth	r2, r3
 8002180:	4ba7      	ldr	r3, [pc, #668]	@ (8002420 <lcd_init+0x8c0>)
 8002182:	809a      	strh	r2, [r3, #4]
                        
                        if (lcddev.id != 0x9806)    /* Ҳ����ILI9806,���Կ����ǲ���SSD1963 */
 8002184:	4ba6      	ldr	r3, [pc, #664]	@ (8002420 <lcd_init+0x8c0>)
 8002186:	889b      	ldrh	r3, [r3, #4]
 8002188:	f649 0206 	movw	r2, #38918	@ 0x9806
 800218c:	4293      	cmp	r3, r2
 800218e:	d047      	beq.n	8002220 <lcd_init+0x6c0>
 8002190:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002194:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002198:	22a1      	movs	r2, #161	@ 0xa1
 800219a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800219c:	4ba1      	ldr	r3, [pc, #644]	@ (8002424 <lcd_init+0x8c4>)
 800219e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021a2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80021a4:	4b9f      	ldr	r3, [pc, #636]	@ (8002424 <lcd_init+0x8c4>)
 80021a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021aa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80021ac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021b0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	4b9b      	ldr	r3, [pc, #620]	@ (8002428 <lcd_init+0x8c8>)
 80021ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80021bc:	4b99      	ldr	r3, [pc, #612]	@ (8002424 <lcd_init+0x8c4>)
 80021be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80021c4:	4b97      	ldr	r3, [pc, #604]	@ (8002424 <lcd_init+0x8c4>)
 80021c6:	2280      	movs	r2, #128	@ 0x80
 80021c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80021ca:	4b96      	ldr	r3, [pc, #600]	@ (8002424 <lcd_init+0x8c4>)
 80021cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021d0:	611a      	str	r2, [r3, #16]
}
 80021d2:	bf00      	nop
                        {
                            lcd_wr_regno(0xA1);
                            lcddev.id = lcd_rd_data();
 80021d4:	f7fe fbfe 	bl	80009d4 <lcd_rd_data>
 80021d8:	4603      	mov	r3, r0
 80021da:	461a      	mov	r2, r3
 80021dc:	4b90      	ldr	r3, [pc, #576]	@ (8002420 <lcd_init+0x8c0>)
 80021de:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* ����0x57 */
 80021e0:	f7fe fbf8 	bl	80009d4 <lcd_rd_data>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b8d      	ldr	r3, [pc, #564]	@ (8002420 <lcd_init+0x8c0>)
 80021ea:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 80021ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002420 <lcd_init+0x8c0>)
 80021ee:	889b      	ldrh	r3, [r3, #4]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b8a      	ldr	r3, [pc, #552]	@ (8002420 <lcd_init+0x8c0>)
 80021f6:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* ����0x61 */
 80021f8:	f7fe fbec 	bl	80009d4 <lcd_rd_data>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461a      	mov	r2, r3
 8002200:	4b87      	ldr	r3, [pc, #540]	@ (8002420 <lcd_init+0x8c0>)
 8002202:	889b      	ldrh	r3, [r3, #4]
 8002204:	4313      	orrs	r3, r2
 8002206:	b29a      	uxth	r2, r3
 8002208:	4b85      	ldr	r3, [pc, #532]	@ (8002420 <lcd_init+0x8c0>)
 800220a:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* SSD1963���ص�ID��5761H,Ϊ��������,����ǿ������Ϊ1963 */
 800220c:	4b84      	ldr	r3, [pc, #528]	@ (8002420 <lcd_init+0x8c0>)
 800220e:	889b      	ldrh	r3, [r3, #4]
 8002210:	f245 7261 	movw	r2, #22369	@ 0x5761
 8002214:	4293      	cmp	r3, r2
 8002216:	d103      	bne.n	8002220 <lcd_init+0x6c0>
 8002218:	4b81      	ldr	r3, [pc, #516]	@ (8002420 <lcd_init+0x8c0>)
 800221a:	f641 1263 	movw	r2, #6499	@ 0x1963
 800221e:	809a      	strh	r2, [r3, #4]
     * ����(������f_putc����), ����, �����ʼ������1, �������ε�����
     * ���� printf ��� !!!!!!!
     */
    //printf("LCD ID:%x\r\n", lcddev.id); /* ��ӡLCD ID */

    if (lcddev.id == 0X7789)
 8002220:	4b7f      	ldr	r3, [pc, #508]	@ (8002420 <lcd_init+0x8c0>)
 8002222:	889b      	ldrh	r3, [r3, #4]
 8002224:	f247 7289 	movw	r2, #30601	@ 0x7789
 8002228:	4293      	cmp	r3, r2
 800222a:	f040 82f3 	bne.w	8002814 <lcd_init+0xcb4>
 800222e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002232:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002236:	2211      	movs	r2, #17
 8002238:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800223a:	4b7a      	ldr	r3, [pc, #488]	@ (8002424 <lcd_init+0x8c4>)
 800223c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002240:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002242:	4b78      	ldr	r3, [pc, #480]	@ (8002424 <lcd_init+0x8c4>)
 8002244:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002248:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800224a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800224e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29a      	uxth	r2, r3
 8002256:	4b74      	ldr	r3, [pc, #464]	@ (8002428 <lcd_init+0x8c8>)
 8002258:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800225a:	4b72      	ldr	r3, [pc, #456]	@ (8002424 <lcd_init+0x8c4>)
 800225c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002260:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002262:	4b70      	ldr	r3, [pc, #448]	@ (8002424 <lcd_init+0x8c4>)
 8002264:	2280      	movs	r2, #128	@ 0x80
 8002266:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002268:	4b6e      	ldr	r3, [pc, #440]	@ (8002424 <lcd_init+0x8c4>)
 800226a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800226e:	611a      	str	r2, [r3, #16]
}
 8002270:	bf00      	nop
    {
        //lcd_ex_st7789_reginit();    /* ִ��ST7789��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 8002272:	2078      	movs	r0, #120	@ 0x78
 8002274:	f004 ffe4 	bl	8007240 <HAL_Delay>
 8002278:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800227c:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002280:	2236      	movs	r2, #54	@ 0x36
 8002282:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002284:	4b67      	ldr	r3, [pc, #412]	@ (8002424 <lcd_init+0x8c4>)
 8002286:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800228a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800228c:	4b65      	ldr	r3, [pc, #404]	@ (8002424 <lcd_init+0x8c4>)
 800228e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002292:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002294:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002298:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	4b61      	ldr	r3, [pc, #388]	@ (8002428 <lcd_init+0x8c8>)
 80022a2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80022a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002424 <lcd_init+0x8c4>)
 80022a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022aa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80022ac:	4b5d      	ldr	r3, [pc, #372]	@ (8002424 <lcd_init+0x8c4>)
 80022ae:	2280      	movs	r2, #128	@ 0x80
 80022b0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80022b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002424 <lcd_init+0x8c4>)
 80022b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022b8:	611a      	str	r2, [r3, #16]
}
 80022ba:	bf00      	nop

        lcd_wr_regno(0x36);
        lcd_wr_xdata(0x00);
 80022bc:	2000      	movs	r0, #0
 80022be:	f7fe fb13 	bl	80008e8 <lcd_wr_xdata>
 80022c2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80022c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022ca:	223a      	movs	r2, #58	@ 0x3a
 80022cc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80022ce:	4b55      	ldr	r3, [pc, #340]	@ (8002424 <lcd_init+0x8c4>)
 80022d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022d4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80022d6:	4b53      	ldr	r3, [pc, #332]	@ (8002424 <lcd_init+0x8c4>)
 80022d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022dc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80022de:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80022e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002428 <lcd_init+0x8c8>)
 80022ec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002424 <lcd_init+0x8c4>)
 80022f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022f4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80022f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002424 <lcd_init+0x8c4>)
 80022f8:	2280      	movs	r2, #128	@ 0x80
 80022fa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80022fc:	4b49      	ldr	r3, [pc, #292]	@ (8002424 <lcd_init+0x8c4>)
 80022fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002302:	611a      	str	r2, [r3, #16]
}
 8002304:	bf00      	nop


        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0X05);
 8002306:	2005      	movs	r0, #5
 8002308:	f7fe faee 	bl	80008e8 <lcd_wr_xdata>
 800230c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002310:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8002314:	22b2      	movs	r2, #178	@ 0xb2
 8002316:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002318:	4b42      	ldr	r3, [pc, #264]	@ (8002424 <lcd_init+0x8c4>)
 800231a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800231e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002320:	4b40      	ldr	r3, [pc, #256]	@ (8002424 <lcd_init+0x8c4>)
 8002322:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002326:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002328:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800232c:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29a      	uxth	r2, r3
 8002334:	4b3c      	ldr	r3, [pc, #240]	@ (8002428 <lcd_init+0x8c8>)
 8002336:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002338:	4b3a      	ldr	r3, [pc, #232]	@ (8002424 <lcd_init+0x8c4>)
 800233a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800233e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002340:	4b38      	ldr	r3, [pc, #224]	@ (8002424 <lcd_init+0x8c4>)
 8002342:	2280      	movs	r2, #128	@ 0x80
 8002344:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002346:	4b37      	ldr	r3, [pc, #220]	@ (8002424 <lcd_init+0x8c4>)
 8002348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800234c:	611a      	str	r2, [r3, #16]
}
 800234e:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x0C);
 8002350:	200c      	movs	r0, #12
 8002352:	f7fe fac9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8002356:	200c      	movs	r0, #12
 8002358:	f7fe fac6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800235c:	2000      	movs	r0, #0
 800235e:	f7fe fac3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002362:	2033      	movs	r0, #51	@ 0x33
 8002364:	f7fe fac0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002368:	2033      	movs	r0, #51	@ 0x33
 800236a:	f7fe fabd 	bl	80008e8 <lcd_wr_xdata>
 800236e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002372:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002376:	22b7      	movs	r2, #183	@ 0xb7
 8002378:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800237a:	4b2a      	ldr	r3, [pc, #168]	@ (8002424 <lcd_init+0x8c4>)
 800237c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002380:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002382:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <lcd_init+0x8c4>)
 8002384:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002388:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800238a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800238e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	b29a      	uxth	r2, r3
 8002396:	4b24      	ldr	r3, [pc, #144]	@ (8002428 <lcd_init+0x8c8>)
 8002398:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800239a:	4b22      	ldr	r3, [pc, #136]	@ (8002424 <lcd_init+0x8c4>)
 800239c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023a0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80023a2:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <lcd_init+0x8c4>)
 80023a4:	2280      	movs	r2, #128	@ 0x80
 80023a6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80023a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <lcd_init+0x8c4>)
 80023aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023ae:	611a      	str	r2, [r3, #16]
}
 80023b0:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x35);
 80023b2:	2035      	movs	r0, #53	@ 0x35
 80023b4:	f7fe fa98 	bl	80008e8 <lcd_wr_xdata>
 80023b8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023bc:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 80023c0:	22bb      	movs	r2, #187	@ 0xbb
 80023c2:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80023c4:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <lcd_init+0x8c4>)
 80023c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023ca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80023cc:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <lcd_init+0x8c4>)
 80023ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023d2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80023d4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023d8:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <lcd_init+0x8c8>)
 80023e2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80023e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <lcd_init+0x8c4>)
 80023e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023ea:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80023ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <lcd_init+0x8c4>)
 80023ee:	2280      	movs	r2, #128	@ 0x80
 80023f0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80023f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <lcd_init+0x8c4>)
 80023f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023f8:	611a      	str	r2, [r3, #16]
}
 80023fa:	bf00      	nop

        lcd_wr_regno(0xBB); /* vcom */
        lcd_wr_xdata(0x32); /* 30 */
 80023fc:	2032      	movs	r0, #50	@ 0x32
 80023fe:	f7fe fa73 	bl	80008e8 <lcd_wr_xdata>
 8002402:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002406:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800240a:	22c0      	movs	r2, #192	@ 0xc0
 800240c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800240e:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <lcd_init+0x8c4>)
 8002410:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002414:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002416:	4b03      	ldr	r3, [pc, #12]	@ (8002424 <lcd_init+0x8c4>)
 8002418:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800241c:	611a      	str	r2, [r3, #16]
 800241e:	e005      	b.n	800242c <lcd_init+0x8cc>
 8002420:	2000002c 	.word	0x2000002c
 8002424:	40011000 	.word	0x40011000
 8002428:	40010c00 	.word	0x40010c00
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800242c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002430:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29a      	uxth	r2, r3
 8002438:	4bbf      	ldr	r3, [pc, #764]	@ (8002738 <lcd_init+0xbd8>)
 800243a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800243c:	4bbf      	ldr	r3, [pc, #764]	@ (800273c <lcd_init+0xbdc>)
 800243e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002442:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002444:	4bbd      	ldr	r3, [pc, #756]	@ (800273c <lcd_init+0xbdc>)
 8002446:	2280      	movs	r2, #128	@ 0x80
 8002448:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800244a:	4bbc      	ldr	r3, [pc, #752]	@ (800273c <lcd_init+0xbdc>)
 800244c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002450:	611a      	str	r2, [r3, #16]
}
 8002452:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x0C);
 8002454:	200c      	movs	r0, #12
 8002456:	f7fe fa47 	bl	80008e8 <lcd_wr_xdata>
 800245a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800245e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8002462:	22c2      	movs	r2, #194	@ 0xc2
 8002464:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002466:	4bb5      	ldr	r3, [pc, #724]	@ (800273c <lcd_init+0xbdc>)
 8002468:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800246c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800246e:	4bb3      	ldr	r3, [pc, #716]	@ (800273c <lcd_init+0xbdc>)
 8002470:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002474:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002476:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800247a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	b29a      	uxth	r2, r3
 8002482:	4bad      	ldr	r3, [pc, #692]	@ (8002738 <lcd_init+0xbd8>)
 8002484:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002486:	4bad      	ldr	r3, [pc, #692]	@ (800273c <lcd_init+0xbdc>)
 8002488:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800248c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800248e:	4bab      	ldr	r3, [pc, #684]	@ (800273c <lcd_init+0xbdc>)
 8002490:	2280      	movs	r2, #128	@ 0x80
 8002492:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002494:	4ba9      	ldr	r3, [pc, #676]	@ (800273c <lcd_init+0xbdc>)
 8002496:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249a:	611a      	str	r2, [r3, #16]
}
 800249c:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x01);
 800249e:	2001      	movs	r0, #1
 80024a0:	f7fe fa22 	bl	80008e8 <lcd_wr_xdata>
 80024a4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80024ac:	22c3      	movs	r2, #195	@ 0xc3
 80024ae:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80024b0:	4ba2      	ldr	r3, [pc, #648]	@ (800273c <lcd_init+0xbdc>)
 80024b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024b6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80024b8:	4ba0      	ldr	r3, [pc, #640]	@ (800273c <lcd_init+0xbdc>)
 80024ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024be:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80024c0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	4b9a      	ldr	r3, [pc, #616]	@ (8002738 <lcd_init+0xbd8>)
 80024ce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80024d0:	4b9a      	ldr	r3, [pc, #616]	@ (800273c <lcd_init+0xbdc>)
 80024d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80024d6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80024d8:	4b98      	ldr	r3, [pc, #608]	@ (800273c <lcd_init+0xbdc>)
 80024da:	2280      	movs	r2, #128	@ 0x80
 80024dc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80024de:	4b97      	ldr	r3, [pc, #604]	@ (800273c <lcd_init+0xbdc>)
 80024e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024e4:	611a      	str	r2, [r3, #16]
}
 80024e6:	bf00      	nop

        lcd_wr_regno(0xC3); /* vrh */
        lcd_wr_xdata(0x10); /* 17 0D */
 80024e8:	2010      	movs	r0, #16
 80024ea:	f7fe f9fd 	bl	80008e8 <lcd_wr_xdata>
 80024ee:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024f2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80024f6:	22c4      	movs	r2, #196	@ 0xc4
 80024f8:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80024fa:	4b90      	ldr	r3, [pc, #576]	@ (800273c <lcd_init+0xbdc>)
 80024fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002500:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002502:	4b8e      	ldr	r3, [pc, #568]	@ (800273c <lcd_init+0xbdc>)
 8002504:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002508:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800250a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800250e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b88      	ldr	r3, [pc, #544]	@ (8002738 <lcd_init+0xbd8>)
 8002518:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800251a:	4b88      	ldr	r3, [pc, #544]	@ (800273c <lcd_init+0xbdc>)
 800251c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002520:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002522:	4b86      	ldr	r3, [pc, #536]	@ (800273c <lcd_init+0xbdc>)
 8002524:	2280      	movs	r2, #128	@ 0x80
 8002526:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002528:	4b84      	ldr	r3, [pc, #528]	@ (800273c <lcd_init+0xbdc>)
 800252a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800252e:	611a      	str	r2, [r3, #16]
}
 8002530:	bf00      	nop

        lcd_wr_regno(0xC4); /* vdv */
        lcd_wr_xdata(0x20); /* 20 */
 8002532:	2020      	movs	r0, #32
 8002534:	f7fe f9d8 	bl	80008e8 <lcd_wr_xdata>
 8002538:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800253c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002540:	22c6      	movs	r2, #198	@ 0xc6
 8002542:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002544:	4b7d      	ldr	r3, [pc, #500]	@ (800273c <lcd_init+0xbdc>)
 8002546:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800254a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800254c:	4b7b      	ldr	r3, [pc, #492]	@ (800273c <lcd_init+0xbdc>)
 800254e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002552:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002554:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002558:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b29a      	uxth	r2, r3
 8002560:	4b75      	ldr	r3, [pc, #468]	@ (8002738 <lcd_init+0xbd8>)
 8002562:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002564:	4b75      	ldr	r3, [pc, #468]	@ (800273c <lcd_init+0xbdc>)
 8002566:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800256a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800256c:	4b73      	ldr	r3, [pc, #460]	@ (800273c <lcd_init+0xbdc>)
 800256e:	2280      	movs	r2, #128	@ 0x80
 8002570:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002572:	4b72      	ldr	r3, [pc, #456]	@ (800273c <lcd_init+0xbdc>)
 8002574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002578:	611a      	str	r2, [r3, #16]
}
 800257a:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x0f);
 800257c:	200f      	movs	r0, #15
 800257e:	f7fe f9b3 	bl	80008e8 <lcd_wr_xdata>
 8002582:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002586:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800258a:	22d0      	movs	r2, #208	@ 0xd0
 800258c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800258e:	4b6b      	ldr	r3, [pc, #428]	@ (800273c <lcd_init+0xbdc>)
 8002590:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002594:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002596:	4b69      	ldr	r3, [pc, #420]	@ (800273c <lcd_init+0xbdc>)
 8002598:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800259c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800259e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025a2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4b63      	ldr	r3, [pc, #396]	@ (8002738 <lcd_init+0xbd8>)
 80025ac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80025ae:	4b63      	ldr	r3, [pc, #396]	@ (800273c <lcd_init+0xbdc>)
 80025b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025b4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80025b6:	4b61      	ldr	r3, [pc, #388]	@ (800273c <lcd_init+0xbdc>)
 80025b8:	2280      	movs	r2, #128	@ 0x80
 80025ba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80025bc:	4b5f      	ldr	r3, [pc, #380]	@ (800273c <lcd_init+0xbdc>)
 80025be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025c2:	611a      	str	r2, [r3, #16]
}
 80025c4:	bf00      	nop

        lcd_wr_regno(0xD0);
        lcd_wr_xdata(0xA4);
 80025c6:	20a4      	movs	r0, #164	@ 0xa4
 80025c8:	f7fe f98e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 80025cc:	20a1      	movs	r0, #161	@ 0xa1
 80025ce:	f7fe f98b 	bl	80008e8 <lcd_wr_xdata>
 80025d2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025da:	22e0      	movs	r2, #224	@ 0xe0
 80025dc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80025de:	4b57      	ldr	r3, [pc, #348]	@ (800273c <lcd_init+0xbdc>)
 80025e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025e4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80025e6:	4b55      	ldr	r3, [pc, #340]	@ (800273c <lcd_init+0xbdc>)
 80025e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025ec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80025ee:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025f2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002738 <lcd_init+0xbd8>)
 80025fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80025fe:	4b4f      	ldr	r3, [pc, #316]	@ (800273c <lcd_init+0xbdc>)
 8002600:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002604:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002606:	4b4d      	ldr	r3, [pc, #308]	@ (800273c <lcd_init+0xbdc>)
 8002608:	2280      	movs	r2, #128	@ 0x80
 800260a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800260c:	4b4b      	ldr	r3, [pc, #300]	@ (800273c <lcd_init+0xbdc>)
 800260e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002612:	611a      	str	r2, [r3, #16]
}
 8002614:	bf00      	nop

        lcd_wr_regno(0xE0); /* Set Gamma  */
        lcd_wr_xdata(0xd0);
 8002616:	20d0      	movs	r0, #208	@ 0xd0
 8002618:	f7fe f966 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800261c:	2000      	movs	r0, #0
 800261e:	f7fe f963 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8002622:	2002      	movs	r0, #2
 8002624:	f7fe f960 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002628:	2007      	movs	r0, #7
 800262a:	f7fe f95d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 800262e:	200a      	movs	r0, #10
 8002630:	f7fe f95a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002634:	2028      	movs	r0, #40	@ 0x28
 8002636:	f7fe f957 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 800263a:	2032      	movs	r0, #50	@ 0x32
 800263c:	f7fe f954 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0X44);
 8002640:	2044      	movs	r0, #68	@ 0x44
 8002642:	f7fe f951 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x42);
 8002646:	2042      	movs	r0, #66	@ 0x42
 8002648:	f7fe f94e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 800264c:	2006      	movs	r0, #6
 800264e:	f7fe f94b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 8002652:	200e      	movs	r0, #14
 8002654:	f7fe f948 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8002658:	2012      	movs	r0, #18
 800265a:	f7fe f945 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 800265e:	2014      	movs	r0, #20
 8002660:	f7fe f942 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002664:	2017      	movs	r0, #23
 8002666:	f7fe f93f 	bl	80008e8 <lcd_wr_xdata>
 800266a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800266e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8002672:	22e1      	movs	r2, #225	@ 0xe1
 8002674:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002676:	4b31      	ldr	r3, [pc, #196]	@ (800273c <lcd_init+0xbdc>)
 8002678:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800267c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800267e:	4b2f      	ldr	r3, [pc, #188]	@ (800273c <lcd_init+0xbdc>)
 8002680:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002684:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002686:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800268a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29a      	uxth	r2, r3
 8002692:	4b29      	ldr	r3, [pc, #164]	@ (8002738 <lcd_init+0xbd8>)
 8002694:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002696:	4b29      	ldr	r3, [pc, #164]	@ (800273c <lcd_init+0xbdc>)
 8002698:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800269c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800269e:	4b27      	ldr	r3, [pc, #156]	@ (800273c <lcd_init+0xbdc>)
 80026a0:	2280      	movs	r2, #128	@ 0x80
 80026a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80026a4:	4b25      	ldr	r3, [pc, #148]	@ (800273c <lcd_init+0xbdc>)
 80026a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026aa:	611a      	str	r2, [r3, #16]
}
 80026ac:	bf00      	nop


        lcd_wr_regno(0XE1);  /* Set Gamma */
        lcd_wr_xdata(0xd0);
 80026ae:	20d0      	movs	r0, #208	@ 0xd0
 80026b0:	f7fe f91a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe f917 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80026ba:	2002      	movs	r0, #2
 80026bc:	f7fe f914 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 80026c0:	2007      	movs	r0, #7
 80026c2:	f7fe f911 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 80026c6:	200a      	movs	r0, #10
 80026c8:	f7fe f90e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80026cc:	2028      	movs	r0, #40	@ 0x28
 80026ce:	f7fe f90b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x31);
 80026d2:	2031      	movs	r0, #49	@ 0x31
 80026d4:	f7fe f908 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 80026d8:	2054      	movs	r0, #84	@ 0x54
 80026da:	f7fe f905 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x47);
 80026de:	2047      	movs	r0, #71	@ 0x47
 80026e0:	f7fe f902 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 80026e4:	200e      	movs	r0, #14
 80026e6:	f7fe f8ff 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1c);
 80026ea:	201c      	movs	r0, #28
 80026ec:	f7fe f8fc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 80026f0:	2017      	movs	r0, #23
 80026f2:	f7fe f8f9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1b);
 80026f6:	201b      	movs	r0, #27
 80026f8:	f7fe f8f6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1e);
 80026fc:	201e      	movs	r0, #30
 80026fe:	f7fe f8f3 	bl	80008e8 <lcd_wr_xdata>
 8002702:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002706:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800270a:	222a      	movs	r2, #42	@ 0x2a
 800270c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800270e:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <lcd_init+0xbdc>)
 8002710:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002714:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002716:	4b09      	ldr	r3, [pc, #36]	@ (800273c <lcd_init+0xbdc>)
 8002718:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800271c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800271e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002722:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29a      	uxth	r2, r3
 800272a:	4b03      	ldr	r3, [pc, #12]	@ (8002738 <lcd_init+0xbd8>)
 800272c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800272e:	4b03      	ldr	r3, [pc, #12]	@ (800273c <lcd_init+0xbdc>)
 8002730:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002734:	611a      	str	r2, [r3, #16]
 8002736:	e003      	b.n	8002740 <lcd_init+0xbe0>
 8002738:	40010c00 	.word	0x40010c00
 800273c:	40011000 	.word	0x40011000
    LCD_WR(1);
 8002740:	4b32      	ldr	r3, [pc, #200]	@ (800280c <lcd_init+0xcac>)
 8002742:	2280      	movs	r2, #128	@ 0x80
 8002744:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002746:	4b31      	ldr	r3, [pc, #196]	@ (800280c <lcd_init+0xcac>)
 8002748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800274c:	611a      	str	r2, [r3, #16]
}
 800274e:	bf00      	nop


        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8002750:	2000      	movs	r0, #0
 8002752:	f7fe f8c9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe f8c6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe f8c3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 8002762:	20ef      	movs	r0, #239	@ 0xef
 8002764:	f7fe f8c0 	bl	80008e8 <lcd_wr_xdata>
 8002768:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800276c:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8002770:	222b      	movs	r2, #43	@ 0x2b
 8002772:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002774:	4b25      	ldr	r3, [pc, #148]	@ (800280c <lcd_init+0xcac>)
 8002776:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800277a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800277c:	4b23      	ldr	r3, [pc, #140]	@ (800280c <lcd_init+0xcac>)
 800277e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002782:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002784:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002788:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29a      	uxth	r2, r3
 8002790:	4b1f      	ldr	r3, [pc, #124]	@ (8002810 <lcd_init+0xcb0>)
 8002792:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002794:	4b1d      	ldr	r3, [pc, #116]	@ (800280c <lcd_init+0xcac>)
 8002796:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800279a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800279c:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <lcd_init+0xcac>)
 800279e:	2280      	movs	r2, #128	@ 0x80
 80027a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80027a2:	4b1a      	ldr	r3, [pc, #104]	@ (800280c <lcd_init+0xcac>)
 80027a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027a8:	611a      	str	r2, [r3, #16]
}
 80027aa:	bf00      	nop

        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7fe f89b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe f898 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80027b8:	2001      	movs	r0, #1
 80027ba:	f7fe f895 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 80027be:	203f      	movs	r0, #63	@ 0x3f
 80027c0:	f7fe f892 	bl	80008e8 <lcd_wr_xdata>
 80027c4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027cc:	2229      	movs	r2, #41	@ 0x29
 80027ce:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80027d0:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <lcd_init+0xcac>)
 80027d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027d6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <lcd_init+0xcac>)
 80027da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027de:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80027e0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027e4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <lcd_init+0xcb0>)
 80027ee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80027f0:	4b06      	ldr	r3, [pc, #24]	@ (800280c <lcd_init+0xcac>)
 80027f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80027f6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80027f8:	4b04      	ldr	r3, [pc, #16]	@ (800280c <lcd_init+0xcac>)
 80027fa:	2280      	movs	r2, #128	@ 0x80
 80027fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80027fe:	4b03      	ldr	r3, [pc, #12]	@ (800280c <lcd_init+0xcac>)
 8002800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002804:	611a      	str	r2, [r3, #16]
}
 8002806:	f004 b8f4 	b.w	80069f2 <lcd_init+0x4e92>
 800280a:	bf00      	nop
 800280c:	40011000 	.word	0x40011000
 8002810:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0X9341)
 8002814:	4bb9      	ldr	r3, [pc, #740]	@ (8002afc <lcd_init+0xf9c>)
 8002816:	889b      	ldrh	r3, [r3, #4]
 8002818:	f249 3241 	movw	r2, #37697	@ 0x9341
 800281c:	4293      	cmp	r3, r2
 800281e:	f040 83a1 	bne.w	8002f64 <lcd_init+0x1404>
 8002822:	23cf      	movs	r3, #207	@ 0xcf
 8002824:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002828:	4bb5      	ldr	r3, [pc, #724]	@ (8002b00 <lcd_init+0xfa0>)
 800282a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800282e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002830:	4bb3      	ldr	r3, [pc, #716]	@ (8002b00 <lcd_init+0xfa0>)
 8002832:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002836:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002838:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800283c:	b29a      	uxth	r2, r3
 800283e:	4bb1      	ldr	r3, [pc, #708]	@ (8002b04 <lcd_init+0xfa4>)
 8002840:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002842:	4baf      	ldr	r3, [pc, #700]	@ (8002b00 <lcd_init+0xfa0>)
 8002844:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002848:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800284a:	4bad      	ldr	r3, [pc, #692]	@ (8002b00 <lcd_init+0xfa0>)
 800284c:	2280      	movs	r2, #128	@ 0x80
 800284e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002850:	4bab      	ldr	r3, [pc, #684]	@ (8002b00 <lcd_init+0xfa0>)
 8002852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002856:	611a      	str	r2, [r3, #16]
}
 8002858:	bf00      	nop
    {
        //lcd_ex_ili9341_reginit();   /* ִ��ILI9341��ʼ�� */
        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 800285a:	2000      	movs	r0, #0
 800285c:	f7fe f844 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC1);
 8002860:	20c1      	movs	r0, #193	@ 0xc1
 8002862:	f7fe f841 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0X30);
 8002866:	2030      	movs	r0, #48	@ 0x30
 8002868:	f7fe f83e 	bl	80008e8 <lcd_wr_xdata>
 800286c:	23ed      	movs	r3, #237	@ 0xed
 800286e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002872:	4ba3      	ldr	r3, [pc, #652]	@ (8002b00 <lcd_init+0xfa0>)
 8002874:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002878:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800287a:	4ba1      	ldr	r3, [pc, #644]	@ (8002b00 <lcd_init+0xfa0>)
 800287c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002880:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002882:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b9e      	ldr	r3, [pc, #632]	@ (8002b04 <lcd_init+0xfa4>)
 800288a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800288c:	4b9c      	ldr	r3, [pc, #624]	@ (8002b00 <lcd_init+0xfa0>)
 800288e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002892:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002894:	4b9a      	ldr	r3, [pc, #616]	@ (8002b00 <lcd_init+0xfa0>)
 8002896:	2280      	movs	r2, #128	@ 0x80
 8002898:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800289a:	4b99      	ldr	r3, [pc, #612]	@ (8002b00 <lcd_init+0xfa0>)
 800289c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a0:	611a      	str	r2, [r3, #16]
}
 80028a2:	bf00      	nop
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x64);
 80028a4:	2064      	movs	r0, #100	@ 0x64
 80028a6:	f7fe f81f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 80028aa:	2003      	movs	r0, #3
 80028ac:	f7fe f81c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0X12);
 80028b0:	2012      	movs	r0, #18
 80028b2:	f7fe f819 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0X81);
 80028b6:	2081      	movs	r0, #129	@ 0x81
 80028b8:	f7fe f816 	bl	80008e8 <lcd_wr_xdata>
 80028bc:	23e8      	movs	r3, #232	@ 0xe8
 80028be:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80028c2:	4b8f      	ldr	r3, [pc, #572]	@ (8002b00 <lcd_init+0xfa0>)
 80028c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028c8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80028ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002b00 <lcd_init+0xfa0>)
 80028cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028d0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80028d2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	4b8a      	ldr	r3, [pc, #552]	@ (8002b04 <lcd_init+0xfa4>)
 80028da:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80028dc:	4b88      	ldr	r3, [pc, #544]	@ (8002b00 <lcd_init+0xfa0>)
 80028de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028e2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80028e4:	4b86      	ldr	r3, [pc, #536]	@ (8002b00 <lcd_init+0xfa0>)
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80028ea:	4b85      	ldr	r3, [pc, #532]	@ (8002b00 <lcd_init+0xfa0>)
 80028ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028f0:	611a      	str	r2, [r3, #16]
}
 80028f2:	bf00      	nop
        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x85);
 80028f4:	2085      	movs	r0, #133	@ 0x85
 80028f6:	f7fd fff7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80028fa:	2010      	movs	r0, #16
 80028fc:	f7fd fff4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8002900:	207a      	movs	r0, #122	@ 0x7a
 8002902:	f7fd fff1 	bl	80008e8 <lcd_wr_xdata>
 8002906:	23cb      	movs	r3, #203	@ 0xcb
 8002908:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800290c:	4b7c      	ldr	r3, [pc, #496]	@ (8002b00 <lcd_init+0xfa0>)
 800290e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002912:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002914:	4b7a      	ldr	r3, [pc, #488]	@ (8002b00 <lcd_init+0xfa0>)
 8002916:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800291a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800291c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8002920:	b29a      	uxth	r2, r3
 8002922:	4b78      	ldr	r3, [pc, #480]	@ (8002b04 <lcd_init+0xfa4>)
 8002924:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002926:	4b76      	ldr	r3, [pc, #472]	@ (8002b00 <lcd_init+0xfa0>)
 8002928:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800292c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800292e:	4b74      	ldr	r3, [pc, #464]	@ (8002b00 <lcd_init+0xfa0>)
 8002930:	2280      	movs	r2, #128	@ 0x80
 8002932:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002934:	4b72      	ldr	r3, [pc, #456]	@ (8002b00 <lcd_init+0xfa0>)
 8002936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800293a:	611a      	str	r2, [r3, #16]
}
 800293c:	bf00      	nop
        lcd_wr_regno(0xCB);
        lcd_wr_xdata(0x39);
 800293e:	2039      	movs	r0, #57	@ 0x39
 8002940:	f7fd ffd2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8002944:	202c      	movs	r0, #44	@ 0x2c
 8002946:	f7fd ffcf 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800294a:	2000      	movs	r0, #0
 800294c:	f7fd ffcc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8002950:	2034      	movs	r0, #52	@ 0x34
 8002952:	f7fd ffc9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8002956:	2002      	movs	r0, #2
 8002958:	f7fd ffc6 	bl	80008e8 <lcd_wr_xdata>
 800295c:	23f7      	movs	r3, #247	@ 0xf7
 800295e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002962:	4b67      	ldr	r3, [pc, #412]	@ (8002b00 <lcd_init+0xfa0>)
 8002964:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002968:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800296a:	4b65      	ldr	r3, [pc, #404]	@ (8002b00 <lcd_init+0xfa0>)
 800296c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002970:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002972:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8002976:	b29a      	uxth	r2, r3
 8002978:	4b62      	ldr	r3, [pc, #392]	@ (8002b04 <lcd_init+0xfa4>)
 800297a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800297c:	4b60      	ldr	r3, [pc, #384]	@ (8002b00 <lcd_init+0xfa0>)
 800297e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002982:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002984:	4b5e      	ldr	r3, [pc, #376]	@ (8002b00 <lcd_init+0xfa0>)
 8002986:	2280      	movs	r2, #128	@ 0x80
 8002988:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800298a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b00 <lcd_init+0xfa0>)
 800298c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002990:	611a      	str	r2, [r3, #16]
}
 8002992:	bf00      	nop
        lcd_wr_regno(0xF7);
        lcd_wr_xdata(0x20);
 8002994:	2020      	movs	r0, #32
 8002996:	f7fd ffa7 	bl	80008e8 <lcd_wr_xdata>
 800299a:	23ea      	movs	r3, #234	@ 0xea
 800299c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80029a0:	4b57      	ldr	r3, [pc, #348]	@ (8002b00 <lcd_init+0xfa0>)
 80029a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029a6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80029a8:	4b55      	ldr	r3, [pc, #340]	@ (8002b00 <lcd_init+0xfa0>)
 80029aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ae:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80029b0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	4b53      	ldr	r3, [pc, #332]	@ (8002b04 <lcd_init+0xfa4>)
 80029b8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80029ba:	4b51      	ldr	r3, [pc, #324]	@ (8002b00 <lcd_init+0xfa0>)
 80029bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029c0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80029c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002b00 <lcd_init+0xfa0>)
 80029c4:	2280      	movs	r2, #128	@ 0x80
 80029c6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80029c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002b00 <lcd_init+0xfa0>)
 80029ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ce:	611a      	str	r2, [r3, #16]
}
 80029d0:	bf00      	nop
        lcd_wr_regno(0xEA);
        lcd_wr_xdata(0x00);
 80029d2:	2000      	movs	r0, #0
 80029d4:	f7fd ff88 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fd ff85 	bl	80008e8 <lcd_wr_xdata>
 80029de:	23c0      	movs	r3, #192	@ 0xc0
 80029e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80029e4:	4b46      	ldr	r3, [pc, #280]	@ (8002b00 <lcd_init+0xfa0>)
 80029e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029ea:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80029ec:	4b44      	ldr	r3, [pc, #272]	@ (8002b00 <lcd_init+0xfa0>)
 80029ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029f2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80029f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	4b42      	ldr	r3, [pc, #264]	@ (8002b04 <lcd_init+0xfa4>)
 80029fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80029fe:	4b40      	ldr	r3, [pc, #256]	@ (8002b00 <lcd_init+0xfa0>)
 8002a00:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a04:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a06:	4b3e      	ldr	r3, [pc, #248]	@ (8002b00 <lcd_init+0xfa0>)
 8002a08:	2280      	movs	r2, #128	@ 0x80
 8002a0a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b00 <lcd_init+0xfa0>)
 8002a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a12:	611a      	str	r2, [r3, #16]
}
 8002a14:	bf00      	nop
        lcd_wr_regno(0xC0); /* Power control */
        lcd_wr_xdata(0x1B); /* VRH[5:0] */
 8002a16:	201b      	movs	r0, #27
 8002a18:	f7fd ff66 	bl	80008e8 <lcd_wr_xdata>
 8002a1c:	23c1      	movs	r3, #193	@ 0xc1
 8002a1e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a22:	4b37      	ldr	r3, [pc, #220]	@ (8002b00 <lcd_init+0xfa0>)
 8002a24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a28:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a2a:	4b35      	ldr	r3, [pc, #212]	@ (8002b00 <lcd_init+0xfa0>)
 8002a2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a30:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a32:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	4b32      	ldr	r3, [pc, #200]	@ (8002b04 <lcd_init+0xfa4>)
 8002a3a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a3c:	4b30      	ldr	r3, [pc, #192]	@ (8002b00 <lcd_init+0xfa0>)
 8002a3e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a42:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a44:	4b2e      	ldr	r3, [pc, #184]	@ (8002b00 <lcd_init+0xfa0>)
 8002a46:	2280      	movs	r2, #128	@ 0x80
 8002a48:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <lcd_init+0xfa0>)
 8002a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a50:	611a      	str	r2, [r3, #16]
}
 8002a52:	bf00      	nop
        lcd_wr_regno(0xC1); /* Power control */
        lcd_wr_xdata(0x01); /* SAP[2:0];BT[3:0] */
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7fd ff47 	bl	80008e8 <lcd_wr_xdata>
 8002a5a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a5e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a62:	22c5      	movs	r2, #197	@ 0xc5
 8002a64:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a66:	4b26      	ldr	r3, [pc, #152]	@ (8002b00 <lcd_init+0xfa0>)
 8002a68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a6c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a6e:	4b24      	ldr	r3, [pc, #144]	@ (8002b00 <lcd_init+0xfa0>)
 8002a70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a74:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a76:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a7a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <lcd_init+0xfa4>)
 8002a84:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a86:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <lcd_init+0xfa0>)
 8002a88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a8c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002b00 <lcd_init+0xfa0>)
 8002a90:	2280      	movs	r2, #128	@ 0x80
 8002a92:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a94:	4b1a      	ldr	r3, [pc, #104]	@ (8002b00 <lcd_init+0xfa0>)
 8002a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a9a:	611a      	str	r2, [r3, #16]
}
 8002a9c:	bf00      	nop
        lcd_wr_regno(0xC5); /* VCM control */
        lcd_wr_xdata(0x30); /* 3F */
 8002a9e:	2030      	movs	r0, #48	@ 0x30
 8002aa0:	f7fd ff22 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x30); /* 3C */
 8002aa4:	2030      	movs	r0, #48	@ 0x30
 8002aa6:	f7fd ff1f 	bl	80008e8 <lcd_wr_xdata>
 8002aaa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002aae:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002ab2:	22c7      	movs	r2, #199	@ 0xc7
 8002ab4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ab6:	4b12      	ldr	r3, [pc, #72]	@ (8002b00 <lcd_init+0xfa0>)
 8002ab8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002abc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002abe:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <lcd_init+0xfa0>)
 8002ac0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ac4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ac6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002aca:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b04 <lcd_init+0xfa4>)
 8002ad4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <lcd_init+0xfa0>)
 8002ad8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002adc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ade:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <lcd_init+0xfa0>)
 8002ae0:	2280      	movs	r2, #128	@ 0x80
 8002ae2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ae4:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <lcd_init+0xfa0>)
 8002ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aea:	611a      	str	r2, [r3, #16]
}
 8002aec:	bf00      	nop
        lcd_wr_regno(0xC7); /* VCM control2 */
        lcd_wr_xdata(0XB7);
 8002aee:	20b7      	movs	r0, #183	@ 0xb7
 8002af0:	f7fd fefa 	bl	80008e8 <lcd_wr_xdata>
 8002af4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002af8:	e006      	b.n	8002b08 <lcd_init+0xfa8>
 8002afa:	bf00      	nop
 8002afc:	2000002c 	.word	0x2000002c
 8002b00:	40011000 	.word	0x40011000
 8002b04:	40010c00 	.word	0x40010c00
 8002b08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b0c:	2236      	movs	r2, #54	@ 0x36
 8002b0e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b10:	4bc1      	ldr	r3, [pc, #772]	@ (8002e18 <lcd_init+0x12b8>)
 8002b12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b16:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b18:	4bbf      	ldr	r3, [pc, #764]	@ (8002e18 <lcd_init+0x12b8>)
 8002b1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b1e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b20:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	4bbb      	ldr	r3, [pc, #748]	@ (8002e1c <lcd_init+0x12bc>)
 8002b2e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b30:	4bb9      	ldr	r3, [pc, #740]	@ (8002e18 <lcd_init+0x12b8>)
 8002b32:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b36:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b38:	4bb7      	ldr	r3, [pc, #732]	@ (8002e18 <lcd_init+0x12b8>)
 8002b3a:	2280      	movs	r2, #128	@ 0x80
 8002b3c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b3e:	4bb6      	ldr	r3, [pc, #728]	@ (8002e18 <lcd_init+0x12b8>)
 8002b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b44:	611a      	str	r2, [r3, #16]
}
 8002b46:	bf00      	nop
        lcd_wr_regno(0x36); /*  Memory Access Control */
        lcd_wr_xdata(0x48);
 8002b48:	2048      	movs	r0, #72	@ 0x48
 8002b4a:	f7fd fecd 	bl	80008e8 <lcd_wr_xdata>
 8002b4e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b52:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8002b56:	223a      	movs	r2, #58	@ 0x3a
 8002b58:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b5a:	4baf      	ldr	r3, [pc, #700]	@ (8002e18 <lcd_init+0x12b8>)
 8002b5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b60:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b62:	4bad      	ldr	r3, [pc, #692]	@ (8002e18 <lcd_init+0x12b8>)
 8002b64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b68:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b6a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b6e:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	4ba9      	ldr	r3, [pc, #676]	@ (8002e1c <lcd_init+0x12bc>)
 8002b78:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b7a:	4ba7      	ldr	r3, [pc, #668]	@ (8002e18 <lcd_init+0x12b8>)
 8002b7c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b80:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b82:	4ba5      	ldr	r3, [pc, #660]	@ (8002e18 <lcd_init+0x12b8>)
 8002b84:	2280      	movs	r2, #128	@ 0x80
 8002b86:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b88:	4ba3      	ldr	r3, [pc, #652]	@ (8002e18 <lcd_init+0x12b8>)
 8002b8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b8e:	611a      	str	r2, [r3, #16]
}
 8002b90:	bf00      	nop
        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8002b92:	2055      	movs	r0, #85	@ 0x55
 8002b94:	f7fd fea8 	bl	80008e8 <lcd_wr_xdata>
 8002b98:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ba0:	22b1      	movs	r2, #177	@ 0xb1
 8002ba2:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ba4:	4b9c      	ldr	r3, [pc, #624]	@ (8002e18 <lcd_init+0x12b8>)
 8002ba6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002baa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002bac:	4b9a      	ldr	r3, [pc, #616]	@ (8002e18 <lcd_init+0x12b8>)
 8002bae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bb2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002bb4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b96      	ldr	r3, [pc, #600]	@ (8002e1c <lcd_init+0x12bc>)
 8002bc2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002bc4:	4b94      	ldr	r3, [pc, #592]	@ (8002e18 <lcd_init+0x12b8>)
 8002bc6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002bca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002bcc:	4b92      	ldr	r3, [pc, #584]	@ (8002e18 <lcd_init+0x12b8>)
 8002bce:	2280      	movs	r2, #128	@ 0x80
 8002bd0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002bd2:	4b91      	ldr	r3, [pc, #580]	@ (8002e18 <lcd_init+0x12b8>)
 8002bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bd8:	611a      	str	r2, [r3, #16]
}
 8002bda:	bf00      	nop
        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x00);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7fd fe83 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1A);
 8002be2:	201a      	movs	r0, #26
 8002be4:	f7fd fe80 	bl	80008e8 <lcd_wr_xdata>
 8002be8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bec:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002bf0:	22b6      	movs	r2, #182	@ 0xb6
 8002bf2:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002bf4:	4b88      	ldr	r3, [pc, #544]	@ (8002e18 <lcd_init+0x12b8>)
 8002bf6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bfa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002bfc:	4b86      	ldr	r3, [pc, #536]	@ (8002e18 <lcd_init+0x12b8>)
 8002bfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c02:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c04:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c08:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	4b82      	ldr	r3, [pc, #520]	@ (8002e1c <lcd_init+0x12bc>)
 8002c12:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c14:	4b80      	ldr	r3, [pc, #512]	@ (8002e18 <lcd_init+0x12b8>)
 8002c16:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c1a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e18 <lcd_init+0x12b8>)
 8002c1e:	2280      	movs	r2, #128	@ 0x80
 8002c20:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c22:	4b7d      	ldr	r3, [pc, #500]	@ (8002e18 <lcd_init+0x12b8>)
 8002c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c28:	611a      	str	r2, [r3, #16]
}
 8002c2a:	bf00      	nop
        lcd_wr_regno(0xB6); /*  Display Function Control */
        lcd_wr_xdata(0x0A);
 8002c2c:	200a      	movs	r0, #10
 8002c2e:	f7fd fe5b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8002c32:	20a2      	movs	r0, #162	@ 0xa2
 8002c34:	f7fd fe58 	bl	80008e8 <lcd_wr_xdata>
 8002c38:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c40:	22f2      	movs	r2, #242	@ 0xf2
 8002c42:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c44:	4b74      	ldr	r3, [pc, #464]	@ (8002e18 <lcd_init+0x12b8>)
 8002c46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c4a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c4c:	4b72      	ldr	r3, [pc, #456]	@ (8002e18 <lcd_init+0x12b8>)
 8002c4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c52:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c54:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c58:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b6e      	ldr	r3, [pc, #440]	@ (8002e1c <lcd_init+0x12bc>)
 8002c62:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c64:	4b6c      	ldr	r3, [pc, #432]	@ (8002e18 <lcd_init+0x12b8>)
 8002c66:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c6a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e18 <lcd_init+0x12b8>)
 8002c6e:	2280      	movs	r2, #128	@ 0x80
 8002c70:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c72:	4b69      	ldr	r3, [pc, #420]	@ (8002e18 <lcd_init+0x12b8>)
 8002c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c78:	611a      	str	r2, [r3, #16]
}
 8002c7a:	bf00      	nop
        lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
        lcd_wr_xdata(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fd fe33 	bl	80008e8 <lcd_wr_xdata>
 8002c82:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c86:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002c8a:	2226      	movs	r2, #38	@ 0x26
 8002c8c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c8e:	4b62      	ldr	r3, [pc, #392]	@ (8002e18 <lcd_init+0x12b8>)
 8002c90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c94:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c96:	4b60      	ldr	r3, [pc, #384]	@ (8002e18 <lcd_init+0x12b8>)
 8002c98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c9c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c9e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ca2:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	4b5c      	ldr	r3, [pc, #368]	@ (8002e1c <lcd_init+0x12bc>)
 8002cac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002cae:	4b5a      	ldr	r3, [pc, #360]	@ (8002e18 <lcd_init+0x12b8>)
 8002cb0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002cb4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002cb6:	4b58      	ldr	r3, [pc, #352]	@ (8002e18 <lcd_init+0x12b8>)
 8002cb8:	2280      	movs	r2, #128	@ 0x80
 8002cba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002cbc:	4b56      	ldr	r3, [pc, #344]	@ (8002e18 <lcd_init+0x12b8>)
 8002cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc2:	611a      	str	r2, [r3, #16]
}
 8002cc4:	bf00      	nop
        lcd_wr_regno(0x26); /* Gamma curve selected */
        lcd_wr_xdata(0x01);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f7fd fe0e 	bl	80008e8 <lcd_wr_xdata>
 8002ccc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002cd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cd4:	22e0      	movs	r2, #224	@ 0xe0
 8002cd6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002cd8:	4b4f      	ldr	r3, [pc, #316]	@ (8002e18 <lcd_init+0x12b8>)
 8002cda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cde:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e18 <lcd_init+0x12b8>)
 8002ce2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ce6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ce8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002cec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	4b49      	ldr	r3, [pc, #292]	@ (8002e1c <lcd_init+0x12bc>)
 8002cf6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002cf8:	4b47      	ldr	r3, [pc, #284]	@ (8002e18 <lcd_init+0x12b8>)
 8002cfa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002cfe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d00:	4b45      	ldr	r3, [pc, #276]	@ (8002e18 <lcd_init+0x12b8>)
 8002d02:	2280      	movs	r2, #128	@ 0x80
 8002d04:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d06:	4b44      	ldr	r3, [pc, #272]	@ (8002e18 <lcd_init+0x12b8>)
 8002d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d0c:	611a      	str	r2, [r3, #16]
}
 8002d0e:	bf00      	nop
        lcd_wr_regno(0xE0); /* Set Gamma */
        lcd_wr_xdata(0x0F);
 8002d10:	200f      	movs	r0, #15
 8002d12:	f7fd fde9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8002d16:	202a      	movs	r0, #42	@ 0x2a
 8002d18:	f7fd fde6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002d1c:	2028      	movs	r0, #40	@ 0x28
 8002d1e:	f7fd fde3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002d22:	2008      	movs	r0, #8
 8002d24:	f7fd fde0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8002d28:	200e      	movs	r0, #14
 8002d2a:	f7fd fddd 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002d2e:	2008      	movs	r0, #8
 8002d30:	f7fd fdda 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002d34:	2054      	movs	r0, #84	@ 0x54
 8002d36:	f7fd fdd7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0XA9);
 8002d3a:	20a9      	movs	r0, #169	@ 0xa9
 8002d3c:	f7fd fdd4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8002d40:	2043      	movs	r0, #67	@ 0x43
 8002d42:	f7fd fdd1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);
 8002d46:	200a      	movs	r0, #10
 8002d48:	f7fd fdce 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002d4c:	200f      	movs	r0, #15
 8002d4e:	f7fd fdcb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fd fdc8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fd fdc5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fd fdc2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fd fdbf 	bl	80008e8 <lcd_wr_xdata>
 8002d6a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d6e:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002d72:	22e1      	movs	r2, #225	@ 0xe1
 8002d74:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d76:	4b28      	ldr	r3, [pc, #160]	@ (8002e18 <lcd_init+0x12b8>)
 8002d78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d7c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d7e:	4b26      	ldr	r3, [pc, #152]	@ (8002e18 <lcd_init+0x12b8>)
 8002d80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d84:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d86:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d8a:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	4b22      	ldr	r3, [pc, #136]	@ (8002e1c <lcd_init+0x12bc>)
 8002d94:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d96:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <lcd_init+0x12b8>)
 8002d98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d9c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e18 <lcd_init+0x12b8>)
 8002da0:	2280      	movs	r2, #128	@ 0x80
 8002da2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002da4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e18 <lcd_init+0x12b8>)
 8002da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002daa:	611a      	str	r2, [r3, #16]
}
 8002dac:	bf00      	nop
        lcd_wr_regno(0XE1); /* Set Gamma */
        lcd_wr_xdata(0x00);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fd fd9a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);
 8002db4:	2015      	movs	r0, #21
 8002db6:	f7fd fd97 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002dba:	2017      	movs	r0, #23
 8002dbc:	f7fd fd94 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002dc0:	2007      	movs	r0, #7
 8002dc2:	f7fd fd91 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 8002dc6:	2011      	movs	r0, #17
 8002dc8:	f7fd fd8e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8002dcc:	2006      	movs	r0, #6
 8002dce:	f7fd fd8b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2B);
 8002dd2:	202b      	movs	r0, #43	@ 0x2b
 8002dd4:	f7fd fd88 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8002dd8:	2056      	movs	r0, #86	@ 0x56
 8002dda:	f7fd fd85 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8002dde:	203c      	movs	r0, #60	@ 0x3c
 8002de0:	f7fd fd82 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8002de4:	2005      	movs	r0, #5
 8002de6:	f7fd fd7f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8002dea:	2010      	movs	r0, #16
 8002dec:	f7fd fd7c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002df0:	200f      	movs	r0, #15
 8002df2:	f7fd fd79 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8002df6:	203f      	movs	r0, #63	@ 0x3f
 8002df8:	f7fd fd76 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8002dfc:	203f      	movs	r0, #63	@ 0x3f
 8002dfe:	f7fd fd73 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002e02:	200f      	movs	r0, #15
 8002e04:	f7fd fd70 	bl	80008e8 <lcd_wr_xdata>
 8002e08:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e0c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e10:	222b      	movs	r2, #43	@ 0x2b
 8002e12:	801a      	strh	r2, [r3, #0]
 8002e14:	e004      	b.n	8002e20 <lcd_init+0x12c0>
 8002e16:	bf00      	nop
 8002e18:	40011000 	.word	0x40011000
 8002e1c:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e20:	4b4e      	ldr	r3, [pc, #312]	@ (8002f5c <lcd_init+0x13fc>)
 8002e22:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e26:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e28:	4b4c      	ldr	r3, [pc, #304]	@ (8002f5c <lcd_init+0x13fc>)
 8002e2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e2e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e30:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b48      	ldr	r3, [pc, #288]	@ (8002f60 <lcd_init+0x1400>)
 8002e3e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e40:	4b46      	ldr	r3, [pc, #280]	@ (8002f5c <lcd_init+0x13fc>)
 8002e42:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e46:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e48:	4b44      	ldr	r3, [pc, #272]	@ (8002f5c <lcd_init+0x13fc>)
 8002e4a:	2280      	movs	r2, #128	@ 0x80
 8002e4c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e4e:	4b43      	ldr	r3, [pc, #268]	@ (8002f5c <lcd_init+0x13fc>)
 8002e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e54:	611a      	str	r2, [r3, #16]
}
 8002e56:	bf00      	nop
        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7fd fd45 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7fd fd42 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8002e64:	2001      	movs	r0, #1
 8002e66:	f7fd fd3f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8002e6a:	203f      	movs	r0, #63	@ 0x3f
 8002e6c:	f7fd fd3c 	bl	80008e8 <lcd_wr_xdata>
 8002e70:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e74:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8002e78:	222a      	movs	r2, #42	@ 0x2a
 8002e7a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e7c:	4b37      	ldr	r3, [pc, #220]	@ (8002f5c <lcd_init+0x13fc>)
 8002e7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e82:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e84:	4b35      	ldr	r3, [pc, #212]	@ (8002f5c <lcd_init+0x13fc>)
 8002e86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e8a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e8c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e90:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	4b31      	ldr	r3, [pc, #196]	@ (8002f60 <lcd_init+0x1400>)
 8002e9a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f5c <lcd_init+0x13fc>)
 8002e9e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ea2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f5c <lcd_init+0x13fc>)
 8002ea6:	2280      	movs	r2, #128	@ 0x80
 8002ea8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8002f5c <lcd_init+0x13fc>)
 8002eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eb0:	611a      	str	r2, [r3, #16]
}
 8002eb2:	bf00      	nop
        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fd fd17 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd fd14 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f7fd fd11 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 8002ec6:	20ef      	movs	r0, #239	@ 0xef
 8002ec8:	f7fd fd0e 	bl	80008e8 <lcd_wr_xdata>
 8002ecc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ed0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ed4:	2211      	movs	r2, #17
 8002ed6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ed8:	4b20      	ldr	r3, [pc, #128]	@ (8002f5c <lcd_init+0x13fc>)
 8002eda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ede:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <lcd_init+0x13fc>)
 8002ee2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ee6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ee8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002eec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f60 <lcd_init+0x1400>)
 8002ef6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ef8:	4b18      	ldr	r3, [pc, #96]	@ (8002f5c <lcd_init+0x13fc>)
 8002efa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002efe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f00:	4b16      	ldr	r3, [pc, #88]	@ (8002f5c <lcd_init+0x13fc>)
 8002f02:	2280      	movs	r2, #128	@ 0x80
 8002f04:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f06:	4b15      	ldr	r3, [pc, #84]	@ (8002f5c <lcd_init+0x13fc>)
 8002f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f0c:	611a      	str	r2, [r3, #16]
}
 8002f0e:	bf00      	nop
        lcd_wr_regno(0x11); /* Exit Sleep */
        HAL_Delay(120);
 8002f10:	2078      	movs	r0, #120	@ 0x78
 8002f12:	f004 f995 	bl	8007240 <HAL_Delay>
 8002f16:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f1a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8002f1e:	2229      	movs	r2, #41	@ 0x29
 8002f20:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f22:	4b0e      	ldr	r3, [pc, #56]	@ (8002f5c <lcd_init+0x13fc>)
 8002f24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f28:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <lcd_init+0x13fc>)
 8002f2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f30:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f32:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f36:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <lcd_init+0x1400>)
 8002f40:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f42:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <lcd_init+0x13fc>)
 8002f44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f48:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f4a:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <lcd_init+0x13fc>)
 8002f4c:	2280      	movs	r2, #128	@ 0x80
 8002f4e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f50:	4b02      	ldr	r3, [pc, #8]	@ (8002f5c <lcd_init+0x13fc>)
 8002f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f56:	611a      	str	r2, [r3, #16]
}
 8002f58:	f003 bd4b 	b.w	80069f2 <lcd_init+0x4e92>
 8002f5c:	40011000 	.word	0x40011000
 8002f60:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0x5310)
 8002f64:	4bbe      	ldr	r3, [pc, #760]	@ (8003260 <lcd_init+0x1700>)
 8002f66:	889b      	ldrh	r3, [r3, #4]
 8002f68:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	f041 846d 	bne.w	800484c <lcd_init+0x2cec>
 8002f72:	23ed      	movs	r3, #237	@ 0xed
 8002f74:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f78:	4bba      	ldr	r3, [pc, #744]	@ (8003264 <lcd_init+0x1704>)
 8002f7a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f7e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f80:	4bb8      	ldr	r3, [pc, #736]	@ (8003264 <lcd_init+0x1704>)
 8002f82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f86:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f88:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	4bb6      	ldr	r3, [pc, #728]	@ (8003268 <lcd_init+0x1708>)
 8002f90:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f92:	4bb4      	ldr	r3, [pc, #720]	@ (8003264 <lcd_init+0x1704>)
 8002f94:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f98:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f9a:	4bb2      	ldr	r3, [pc, #712]	@ (8003264 <lcd_init+0x1704>)
 8002f9c:	2280      	movs	r2, #128	@ 0x80
 8002f9e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002fa0:	4bb0      	ldr	r3, [pc, #704]	@ (8003264 <lcd_init+0x1704>)
 8002fa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fa6:	611a      	str	r2, [r3, #16]
}
 8002fa8:	bf00      	nop
    {
        //lcd_ex_nt35310_reginit();   /* ִ��NT35310��ʼ�� */
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x01);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f7fd fc9c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE);
 8002fb0:	20fe      	movs	r0, #254	@ 0xfe
 8002fb2:	f7fd fc99 	bl	80008e8 <lcd_wr_xdata>
 8002fb6:	23ee      	movs	r3, #238	@ 0xee
 8002fb8:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002fbc:	4ba9      	ldr	r3, [pc, #676]	@ (8003264 <lcd_init+0x1704>)
 8002fbe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fc2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002fc4:	4ba7      	ldr	r3, [pc, #668]	@ (8003264 <lcd_init+0x1704>)
 8002fc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fca:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002fcc:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	4ba5      	ldr	r3, [pc, #660]	@ (8003268 <lcd_init+0x1708>)
 8002fd4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002fd6:	4ba3      	ldr	r3, [pc, #652]	@ (8003264 <lcd_init+0x1704>)
 8002fd8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002fdc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002fde:	4ba1      	ldr	r3, [pc, #644]	@ (8003264 <lcd_init+0x1704>)
 8002fe0:	2280      	movs	r2, #128	@ 0x80
 8002fe2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002fe4:	4b9f      	ldr	r3, [pc, #636]	@ (8003264 <lcd_init+0x1704>)
 8002fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fea:	611a      	str	r2, [r3, #16]
}
 8002fec:	bf00      	nop

        lcd_wr_regno(0xEE);
        lcd_wr_xdata(0xDE);
 8002fee:	20de      	movs	r0, #222	@ 0xde
 8002ff0:	f7fd fc7a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8002ff4:	2021      	movs	r0, #33	@ 0x21
 8002ff6:	f7fd fc77 	bl	80008e8 <lcd_wr_xdata>
 8002ffa:	23f1      	movs	r3, #241	@ 0xf1
 8002ffc:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003000:	4b98      	ldr	r3, [pc, #608]	@ (8003264 <lcd_init+0x1704>)
 8003002:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003006:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003008:	4b96      	ldr	r3, [pc, #600]	@ (8003264 <lcd_init+0x1704>)
 800300a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800300e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003010:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8003014:	b29a      	uxth	r2, r3
 8003016:	4b94      	ldr	r3, [pc, #592]	@ (8003268 <lcd_init+0x1708>)
 8003018:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800301a:	4b92      	ldr	r3, [pc, #584]	@ (8003264 <lcd_init+0x1704>)
 800301c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003020:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003022:	4b90      	ldr	r3, [pc, #576]	@ (8003264 <lcd_init+0x1704>)
 8003024:	2280      	movs	r2, #128	@ 0x80
 8003026:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003028:	4b8e      	ldr	r3, [pc, #568]	@ (8003264 <lcd_init+0x1704>)
 800302a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800302e:	611a      	str	r2, [r3, #16]
}
 8003030:	bf00      	nop

        lcd_wr_regno(0xF1);
        lcd_wr_xdata(0x01);
 8003032:	2001      	movs	r0, #1
 8003034:	f7fd fc58 	bl	80008e8 <lcd_wr_xdata>
 8003038:	23df      	movs	r3, #223	@ 0xdf
 800303a:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800303e:	4b89      	ldr	r3, [pc, #548]	@ (8003264 <lcd_init+0x1704>)
 8003040:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003044:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003046:	4b87      	ldr	r3, [pc, #540]	@ (8003264 <lcd_init+0x1704>)
 8003048:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800304c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800304e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8003052:	b29a      	uxth	r2, r3
 8003054:	4b84      	ldr	r3, [pc, #528]	@ (8003268 <lcd_init+0x1708>)
 8003056:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003058:	4b82      	ldr	r3, [pc, #520]	@ (8003264 <lcd_init+0x1704>)
 800305a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800305e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003060:	4b80      	ldr	r3, [pc, #512]	@ (8003264 <lcd_init+0x1704>)
 8003062:	2280      	movs	r2, #128	@ 0x80
 8003064:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003066:	4b7f      	ldr	r3, [pc, #508]	@ (8003264 <lcd_init+0x1704>)
 8003068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800306c:	611a      	str	r2, [r3, #16]
}
 800306e:	bf00      	nop
        lcd_wr_regno(0xDF);
        lcd_wr_xdata(0x10);
 8003070:	2010      	movs	r0, #16
 8003072:	f7fd fc39 	bl	80008e8 <lcd_wr_xdata>
 8003076:	23c4      	movs	r3, #196	@ 0xc4
 8003078:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800307c:	4b79      	ldr	r3, [pc, #484]	@ (8003264 <lcd_init+0x1704>)
 800307e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003082:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003084:	4b77      	ldr	r3, [pc, #476]	@ (8003264 <lcd_init+0x1704>)
 8003086:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800308a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800308c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003090:	b29a      	uxth	r2, r3
 8003092:	4b75      	ldr	r3, [pc, #468]	@ (8003268 <lcd_init+0x1708>)
 8003094:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003096:	4b73      	ldr	r3, [pc, #460]	@ (8003264 <lcd_init+0x1704>)
 8003098:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800309c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800309e:	4b71      	ldr	r3, [pc, #452]	@ (8003264 <lcd_init+0x1704>)
 80030a0:	2280      	movs	r2, #128	@ 0x80
 80030a2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80030a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003264 <lcd_init+0x1704>)
 80030a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030aa:	611a      	str	r2, [r3, #16]
}
 80030ac:	bf00      	nop

        /* VCOMvoltage */
        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x8F);  /* 5f */
 80030ae:	208f      	movs	r0, #143	@ 0x8f
 80030b0:	f7fd fc1a 	bl	80008e8 <lcd_wr_xdata>
 80030b4:	23c6      	movs	r3, #198	@ 0xc6
 80030b6:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003264 <lcd_init+0x1704>)
 80030bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030c0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030c2:	4b68      	ldr	r3, [pc, #416]	@ (8003264 <lcd_init+0x1704>)
 80030c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030c8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030ca:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	4b65      	ldr	r3, [pc, #404]	@ (8003268 <lcd_init+0x1708>)
 80030d2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80030d4:	4b63      	ldr	r3, [pc, #396]	@ (8003264 <lcd_init+0x1704>)
 80030d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030da:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80030dc:	4b61      	ldr	r3, [pc, #388]	@ (8003264 <lcd_init+0x1704>)
 80030de:	2280      	movs	r2, #128	@ 0x80
 80030e0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80030e2:	4b60      	ldr	r3, [pc, #384]	@ (8003264 <lcd_init+0x1704>)
 80030e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030e8:	611a      	str	r2, [r3, #16]
}
 80030ea:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x00);
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7fd fbfb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 80030f2:	20e2      	movs	r0, #226	@ 0xe2
 80030f4:	f7fd fbf8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 80030f8:	20e2      	movs	r0, #226	@ 0xe2
 80030fa:	f7fd fbf5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 80030fe:	20e2      	movs	r0, #226	@ 0xe2
 8003100:	f7fd fbf2 	bl	80008e8 <lcd_wr_xdata>
 8003104:	23bf      	movs	r3, #191	@ 0xbf
 8003106:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800310a:	4b56      	ldr	r3, [pc, #344]	@ (8003264 <lcd_init+0x1704>)
 800310c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003110:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003112:	4b54      	ldr	r3, [pc, #336]	@ (8003264 <lcd_init+0x1704>)
 8003114:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003118:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800311a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800311e:	b29a      	uxth	r2, r3
 8003120:	4b51      	ldr	r3, [pc, #324]	@ (8003268 <lcd_init+0x1708>)
 8003122:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003124:	4b4f      	ldr	r3, [pc, #316]	@ (8003264 <lcd_init+0x1704>)
 8003126:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800312a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800312c:	4b4d      	ldr	r3, [pc, #308]	@ (8003264 <lcd_init+0x1704>)
 800312e:	2280      	movs	r2, #128	@ 0x80
 8003130:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003132:	4b4c      	ldr	r3, [pc, #304]	@ (8003264 <lcd_init+0x1704>)
 8003134:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003138:	611a      	str	r2, [r3, #16]
}
 800313a:	bf00      	nop
        lcd_wr_regno(0xBF);
        lcd_wr_xdata(0xAA);
 800313c:	20aa      	movs	r0, #170	@ 0xaa
 800313e:	f7fd fbd3 	bl	80008e8 <lcd_wr_xdata>
 8003142:	23b0      	movs	r3, #176	@ 0xb0
 8003144:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003148:	4b46      	ldr	r3, [pc, #280]	@ (8003264 <lcd_init+0x1704>)
 800314a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800314e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003150:	4b44      	ldr	r3, [pc, #272]	@ (8003264 <lcd_init+0x1704>)
 8003152:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003156:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003158:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 800315c:	b29a      	uxth	r2, r3
 800315e:	4b42      	ldr	r3, [pc, #264]	@ (8003268 <lcd_init+0x1708>)
 8003160:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003162:	4b40      	ldr	r3, [pc, #256]	@ (8003264 <lcd_init+0x1704>)
 8003164:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003168:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800316a:	4b3e      	ldr	r3, [pc, #248]	@ (8003264 <lcd_init+0x1704>)
 800316c:	2280      	movs	r2, #128	@ 0x80
 800316e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003170:	4b3c      	ldr	r3, [pc, #240]	@ (8003264 <lcd_init+0x1704>)
 8003172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003176:	611a      	str	r2, [r3, #16]
}
 8003178:	bf00      	nop

        lcd_wr_regno(0xB0);
        lcd_wr_xdata(0x0D);
 800317a:	200d      	movs	r0, #13
 800317c:	f7fd fbb4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003180:	2000      	movs	r0, #0
 8003182:	f7fd fbb1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 8003186:	200d      	movs	r0, #13
 8003188:	f7fd fbae 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800318c:	2000      	movs	r0, #0
 800318e:	f7fd fbab 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 8003192:	2011      	movs	r0, #17
 8003194:	f7fd fba8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003198:	2000      	movs	r0, #0
 800319a:	f7fd fba5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 800319e:	2019      	movs	r0, #25
 80031a0:	f7fd fba2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fd fb9f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 80031aa:	2021      	movs	r0, #33	@ 0x21
 80031ac:	f7fd fb9c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fd fb99 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2D);
 80031b6:	202d      	movs	r0, #45	@ 0x2d
 80031b8:	f7fd fb96 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fd fb93 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3D);
 80031c2:	203d      	movs	r0, #61	@ 0x3d
 80031c4:	f7fd fb90 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fd fb8d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80031ce:	205d      	movs	r0, #93	@ 0x5d
 80031d0:	f7fd fb8a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fb87 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80031da:	205d      	movs	r0, #93	@ 0x5d
 80031dc:	f7fd fb84 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fd fb81 	bl	80008e8 <lcd_wr_xdata>
 80031e6:	23b1      	movs	r3, #177	@ 0xb1
 80031e8:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003264 <lcd_init+0x1704>)
 80031ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031f2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80031f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003264 <lcd_init+0x1704>)
 80031f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031fa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80031fc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8003200:	b29a      	uxth	r2, r3
 8003202:	4b19      	ldr	r3, [pc, #100]	@ (8003268 <lcd_init+0x1708>)
 8003204:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003206:	4b17      	ldr	r3, [pc, #92]	@ (8003264 <lcd_init+0x1704>)
 8003208:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800320c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800320e:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <lcd_init+0x1704>)
 8003210:	2280      	movs	r2, #128	@ 0x80
 8003212:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003214:	4b13      	ldr	r3, [pc, #76]	@ (8003264 <lcd_init+0x1704>)
 8003216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800321a:	611a      	str	r2, [r3, #16]
}
 800321c:	bf00      	nop

        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x80);
 800321e:	2080      	movs	r0, #128	@ 0x80
 8003220:	f7fd fb62 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003224:	2000      	movs	r0, #0
 8003226:	f7fd fb5f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 800322a:	208b      	movs	r0, #139	@ 0x8b
 800322c:	f7fd fb5c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003230:	2000      	movs	r0, #0
 8003232:	f7fd fb59 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 8003236:	2096      	movs	r0, #150	@ 0x96
 8003238:	f7fd fb56 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800323c:	2000      	movs	r0, #0
 800323e:	f7fd fb53 	bl	80008e8 <lcd_wr_xdata>
 8003242:	23b2      	movs	r3, #178	@ 0xb2
 8003244:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003248:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <lcd_init+0x1704>)
 800324a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800324e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003250:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <lcd_init+0x1704>)
 8003252:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003256:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003258:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 800325c:	b29a      	uxth	r2, r3
 800325e:	e005      	b.n	800326c <lcd_init+0x170c>
 8003260:	2000002c 	.word	0x2000002c
 8003264:	40011000 	.word	0x40011000
 8003268:	40010c00 	.word	0x40010c00
 800326c:	4bd0      	ldr	r3, [pc, #832]	@ (80035b0 <lcd_init+0x1a50>)
 800326e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003270:	4bd0      	ldr	r3, [pc, #832]	@ (80035b4 <lcd_init+0x1a54>)
 8003272:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003276:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003278:	4bce      	ldr	r3, [pc, #824]	@ (80035b4 <lcd_init+0x1a54>)
 800327a:	2280      	movs	r2, #128	@ 0x80
 800327c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800327e:	4bcd      	ldr	r3, [pc, #820]	@ (80035b4 <lcd_init+0x1a54>)
 8003280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003284:	611a      	str	r2, [r3, #16]
}
 8003286:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x00);
 8003288:	2000      	movs	r0, #0
 800328a:	f7fd fb2d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800328e:	2000      	movs	r0, #0
 8003290:	f7fd fb2a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8003294:	2002      	movs	r0, #2
 8003296:	f7fd fb27 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800329a:	2000      	movs	r0, #0
 800329c:	f7fd fb24 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 80032a0:	2003      	movs	r0, #3
 80032a2:	f7fd fb21 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fd fb1e 	bl	80008e8 <lcd_wr_xdata>
 80032ac:	23b3      	movs	r3, #179	@ 0xb3
 80032ae:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80032b2:	4bc0      	ldr	r3, [pc, #768]	@ (80035b4 <lcd_init+0x1a54>)
 80032b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80032ba:	4bbe      	ldr	r3, [pc, #760]	@ (80035b4 <lcd_init+0x1a54>)
 80032bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80032c2:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	4bb9      	ldr	r3, [pc, #740]	@ (80035b0 <lcd_init+0x1a50>)
 80032ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80032cc:	4bb9      	ldr	r3, [pc, #740]	@ (80035b4 <lcd_init+0x1a54>)
 80032ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80032d4:	4bb7      	ldr	r3, [pc, #732]	@ (80035b4 <lcd_init+0x1a54>)
 80032d6:	2280      	movs	r2, #128	@ 0x80
 80032d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80032da:	4bb6      	ldr	r3, [pc, #728]	@ (80035b4 <lcd_init+0x1a54>)
 80032dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e0:	611a      	str	r2, [r3, #16]
}
 80032e2:	bf00      	nop

        lcd_wr_regno(0xB3);
        lcd_wr_xdata(0x00);
 80032e4:	2000      	movs	r0, #0
 80032e6:	f7fd faff 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032ea:	2000      	movs	r0, #0
 80032ec:	f7fd fafc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7fd faf9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032f6:	2000      	movs	r0, #0
 80032f8:	f7fd faf6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7fd faf3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003302:	2000      	movs	r0, #0
 8003304:	f7fd faf0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003308:	2000      	movs	r0, #0
 800330a:	f7fd faed 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800330e:	2000      	movs	r0, #0
 8003310:	f7fd faea 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003314:	2000      	movs	r0, #0
 8003316:	f7fd fae7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800331a:	2000      	movs	r0, #0
 800331c:	f7fd fae4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003320:	2000      	movs	r0, #0
 8003322:	f7fd fae1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003326:	2000      	movs	r0, #0
 8003328:	f7fd fade 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800332c:	2000      	movs	r0, #0
 800332e:	f7fd fadb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003332:	2000      	movs	r0, #0
 8003334:	f7fd fad8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003338:	2000      	movs	r0, #0
 800333a:	f7fd fad5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800333e:	2000      	movs	r0, #0
 8003340:	f7fd fad2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003344:	2000      	movs	r0, #0
 8003346:	f7fd facf 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800334a:	2000      	movs	r0, #0
 800334c:	f7fd facc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003350:	2000      	movs	r0, #0
 8003352:	f7fd fac9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003356:	2000      	movs	r0, #0
 8003358:	f7fd fac6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800335c:	2000      	movs	r0, #0
 800335e:	f7fd fac3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003362:	2000      	movs	r0, #0
 8003364:	f7fd fac0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003368:	2000      	movs	r0, #0
 800336a:	f7fd fabd 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800336e:	2000      	movs	r0, #0
 8003370:	f7fd faba 	bl	80008e8 <lcd_wr_xdata>
 8003374:	23b4      	movs	r3, #180	@ 0xb4
 8003376:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800337a:	4b8e      	ldr	r3, [pc, #568]	@ (80035b4 <lcd_init+0x1a54>)
 800337c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003380:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003382:	4b8c      	ldr	r3, [pc, #560]	@ (80035b4 <lcd_init+0x1a54>)
 8003384:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003388:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800338a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 800338e:	b29a      	uxth	r2, r3
 8003390:	4b87      	ldr	r3, [pc, #540]	@ (80035b0 <lcd_init+0x1a50>)
 8003392:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003394:	4b87      	ldr	r3, [pc, #540]	@ (80035b4 <lcd_init+0x1a54>)
 8003396:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800339a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800339c:	4b85      	ldr	r3, [pc, #532]	@ (80035b4 <lcd_init+0x1a54>)
 800339e:	2280      	movs	r2, #128	@ 0x80
 80033a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80033a2:	4b84      	ldr	r3, [pc, #528]	@ (80035b4 <lcd_init+0x1a54>)
 80033a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a8:	611a      	str	r2, [r3, #16]
}
 80033aa:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x8B);
 80033ac:	208b      	movs	r0, #139	@ 0x8b
 80033ae:	f7fd fa9b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7fd fa98 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 80033b8:	2096      	movs	r0, #150	@ 0x96
 80033ba:	f7fd fa95 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033be:	2000      	movs	r0, #0
 80033c0:	f7fd fa92 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 80033c4:	20a1      	movs	r0, #161	@ 0xa1
 80033c6:	f7fd fa8f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fd fa8c 	bl	80008e8 <lcd_wr_xdata>
 80033d0:	23b5      	movs	r3, #181	@ 0xb5
 80033d2:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80033d6:	4b77      	ldr	r3, [pc, #476]	@ (80035b4 <lcd_init+0x1a54>)
 80033d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033dc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80033de:	4b75      	ldr	r3, [pc, #468]	@ (80035b4 <lcd_init+0x1a54>)
 80033e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033e4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80033e6:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	4b70      	ldr	r3, [pc, #448]	@ (80035b0 <lcd_init+0x1a50>)
 80033ee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80033f0:	4b70      	ldr	r3, [pc, #448]	@ (80035b4 <lcd_init+0x1a54>)
 80033f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80033f6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80033f8:	4b6e      	ldr	r3, [pc, #440]	@ (80035b4 <lcd_init+0x1a54>)
 80033fa:	2280      	movs	r2, #128	@ 0x80
 80033fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80033fe:	4b6d      	ldr	r3, [pc, #436]	@ (80035b4 <lcd_init+0x1a54>)
 8003400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003404:	611a      	str	r2, [r3, #16]
}
 8003406:	bf00      	nop

        lcd_wr_regno(0xB5);
        lcd_wr_xdata(0x02);
 8003408:	2002      	movs	r0, #2
 800340a:	f7fd fa6d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800340e:	2000      	movs	r0, #0
 8003410:	f7fd fa6a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8003414:	2003      	movs	r0, #3
 8003416:	f7fd fa67 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800341a:	2000      	movs	r0, #0
 800341c:	f7fd fa64 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8003420:	2004      	movs	r0, #4
 8003422:	f7fd fa61 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003426:	2000      	movs	r0, #0
 8003428:	f7fd fa5e 	bl	80008e8 <lcd_wr_xdata>
 800342c:	23b6      	movs	r3, #182	@ 0xb6
 800342e:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003432:	4b60      	ldr	r3, [pc, #384]	@ (80035b4 <lcd_init+0x1a54>)
 8003434:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003438:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800343a:	4b5e      	ldr	r3, [pc, #376]	@ (80035b4 <lcd_init+0x1a54>)
 800343c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003440:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003442:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 8003446:	b29a      	uxth	r2, r3
 8003448:	4b59      	ldr	r3, [pc, #356]	@ (80035b0 <lcd_init+0x1a50>)
 800344a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800344c:	4b59      	ldr	r3, [pc, #356]	@ (80035b4 <lcd_init+0x1a54>)
 800344e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003452:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003454:	4b57      	ldr	r3, [pc, #348]	@ (80035b4 <lcd_init+0x1a54>)
 8003456:	2280      	movs	r2, #128	@ 0x80
 8003458:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800345a:	4b56      	ldr	r3, [pc, #344]	@ (80035b4 <lcd_init+0x1a54>)
 800345c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003460:	611a      	str	r2, [r3, #16]
}
 8003462:	bf00      	nop

        lcd_wr_regno(0xB6);
        lcd_wr_xdata(0x00);
 8003464:	2000      	movs	r0, #0
 8003466:	f7fd fa3f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800346a:	2000      	movs	r0, #0
 800346c:	f7fd fa3c 	bl	80008e8 <lcd_wr_xdata>
 8003470:	23b7      	movs	r3, #183	@ 0xb7
 8003472:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003476:	4b4f      	ldr	r3, [pc, #316]	@ (80035b4 <lcd_init+0x1a54>)
 8003478:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800347c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800347e:	4b4d      	ldr	r3, [pc, #308]	@ (80035b4 <lcd_init+0x1a54>)
 8003480:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003484:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003486:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800348a:	b29a      	uxth	r2, r3
 800348c:	4b48      	ldr	r3, [pc, #288]	@ (80035b0 <lcd_init+0x1a50>)
 800348e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003490:	4b48      	ldr	r3, [pc, #288]	@ (80035b4 <lcd_init+0x1a54>)
 8003492:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003496:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003498:	4b46      	ldr	r3, [pc, #280]	@ (80035b4 <lcd_init+0x1a54>)
 800349a:	2280      	movs	r2, #128	@ 0x80
 800349c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800349e:	4b45      	ldr	r3, [pc, #276]	@ (80035b4 <lcd_init+0x1a54>)
 80034a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034a4:	611a      	str	r2, [r3, #16]
}
 80034a6:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x00);
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7fd fa1d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034ae:	2000      	movs	r0, #0
 80034b0:	f7fd fa1a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 80034b4:	203f      	movs	r0, #63	@ 0x3f
 80034b6:	f7fd fa17 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034ba:	2000      	movs	r0, #0
 80034bc:	f7fd fa14 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x5E);
 80034c0:	205e      	movs	r0, #94	@ 0x5e
 80034c2:	f7fd fa11 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7fd fa0e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 80034cc:	2064      	movs	r0, #100	@ 0x64
 80034ce:	f7fd fa0b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034d2:	2000      	movs	r0, #0
 80034d4:	f7fd fa08 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x8C);
 80034d8:	208c      	movs	r0, #140	@ 0x8c
 80034da:	f7fd fa05 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fd fa02 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xAC);
 80034e4:	20ac      	movs	r0, #172	@ 0xac
 80034e6:	f7fd f9ff 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7fd f9fc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 80034f0:	20dc      	movs	r0, #220	@ 0xdc
 80034f2:	f7fd f9f9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fd f9f6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x70);
 80034fc:	2070      	movs	r0, #112	@ 0x70
 80034fe:	f7fd f9f3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003502:	2000      	movs	r0, #0
 8003504:	f7fd f9f0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x90);
 8003508:	2090      	movs	r0, #144	@ 0x90
 800350a:	f7fd f9ed 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800350e:	2000      	movs	r0, #0
 8003510:	f7fd f9ea 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xEB);
 8003514:	20eb      	movs	r0, #235	@ 0xeb
 8003516:	f7fd f9e7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800351a:	2000      	movs	r0, #0
 800351c:	f7fd f9e4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003520:	20dc      	movs	r0, #220	@ 0xdc
 8003522:	f7fd f9e1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003526:	2000      	movs	r0, #0
 8003528:	f7fd f9de 	bl	80008e8 <lcd_wr_xdata>
 800352c:	23b8      	movs	r3, #184	@ 0xb8
 800352e:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003532:	4b20      	ldr	r3, [pc, #128]	@ (80035b4 <lcd_init+0x1a54>)
 8003534:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003538:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800353a:	4b1e      	ldr	r3, [pc, #120]	@ (80035b4 <lcd_init+0x1a54>)
 800353c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003540:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003542:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8003546:	b29a      	uxth	r2, r3
 8003548:	4b19      	ldr	r3, [pc, #100]	@ (80035b0 <lcd_init+0x1a50>)
 800354a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800354c:	4b19      	ldr	r3, [pc, #100]	@ (80035b4 <lcd_init+0x1a54>)
 800354e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003552:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003554:	4b17      	ldr	r3, [pc, #92]	@ (80035b4 <lcd_init+0x1a54>)
 8003556:	2280      	movs	r2, #128	@ 0x80
 8003558:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800355a:	4b16      	ldr	r3, [pc, #88]	@ (80035b4 <lcd_init+0x1a54>)
 800355c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003560:	611a      	str	r2, [r3, #16]
}
 8003562:	bf00      	nop

        lcd_wr_regno(0xB8);
        lcd_wr_xdata(0x00);
 8003564:	2000      	movs	r0, #0
 8003566:	f7fd f9bf 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800356a:	2000      	movs	r0, #0
 800356c:	f7fd f9bc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003570:	2000      	movs	r0, #0
 8003572:	f7fd f9b9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003576:	2000      	movs	r0, #0
 8003578:	f7fd f9b6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800357c:	2000      	movs	r0, #0
 800357e:	f7fd f9b3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003582:	2000      	movs	r0, #0
 8003584:	f7fd f9b0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003588:	2000      	movs	r0, #0
 800358a:	f7fd f9ad 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800358e:	2000      	movs	r0, #0
 8003590:	f7fd f9aa 	bl	80008e8 <lcd_wr_xdata>
 8003594:	23ba      	movs	r3, #186	@ 0xba
 8003596:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800359a:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <lcd_init+0x1a54>)
 800359c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035a0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80035a2:	4b04      	ldr	r3, [pc, #16]	@ (80035b4 <lcd_init+0x1a54>)
 80035a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035a8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80035aa:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 80035ae:	e003      	b.n	80035b8 <lcd_init+0x1a58>
 80035b0:	40010c00 	.word	0x40010c00
 80035b4:	40011000 	.word	0x40011000
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	4bd9      	ldr	r3, [pc, #868]	@ (8003920 <lcd_init+0x1dc0>)
 80035bc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80035be:	4bd9      	ldr	r3, [pc, #868]	@ (8003924 <lcd_init+0x1dc4>)
 80035c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80035c4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80035c6:	4bd7      	ldr	r3, [pc, #860]	@ (8003924 <lcd_init+0x1dc4>)
 80035c8:	2280      	movs	r2, #128	@ 0x80
 80035ca:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80035cc:	4bd5      	ldr	r3, [pc, #852]	@ (8003924 <lcd_init+0x1dc4>)
 80035ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035d2:	611a      	str	r2, [r3, #16]
}
 80035d4:	bf00      	nop

        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0x24);
 80035d6:	2024      	movs	r0, #36	@ 0x24
 80035d8:	f7fd f986 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035dc:	2000      	movs	r0, #0
 80035de:	f7fd f983 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fd f980 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035e8:	2000      	movs	r0, #0
 80035ea:	f7fd f97d 	bl	80008e8 <lcd_wr_xdata>
 80035ee:	23c1      	movs	r3, #193	@ 0xc1
 80035f0:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80035f4:	4bcb      	ldr	r3, [pc, #812]	@ (8003924 <lcd_init+0x1dc4>)
 80035f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035fa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80035fc:	4bc9      	ldr	r3, [pc, #804]	@ (8003924 <lcd_init+0x1dc4>)
 80035fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003602:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003604:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003608:	b29a      	uxth	r2, r3
 800360a:	4bc5      	ldr	r3, [pc, #788]	@ (8003920 <lcd_init+0x1dc0>)
 800360c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800360e:	4bc5      	ldr	r3, [pc, #788]	@ (8003924 <lcd_init+0x1dc4>)
 8003610:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003614:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003616:	4bc3      	ldr	r3, [pc, #780]	@ (8003924 <lcd_init+0x1dc4>)
 8003618:	2280      	movs	r2, #128	@ 0x80
 800361a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800361c:	4bc1      	ldr	r3, [pc, #772]	@ (8003924 <lcd_init+0x1dc4>)
 800361e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003622:	611a      	str	r2, [r3, #16]
}
 8003624:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x20);
 8003626:	2020      	movs	r0, #32
 8003628:	f7fd f95e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800362c:	2000      	movs	r0, #0
 800362e:	f7fd f95b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8003632:	2054      	movs	r0, #84	@ 0x54
 8003634:	f7fd f958 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003638:	2000      	movs	r0, #0
 800363a:	f7fd f955 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 800363e:	20ff      	movs	r0, #255	@ 0xff
 8003640:	f7fd f952 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003644:	2000      	movs	r0, #0
 8003646:	f7fd f94f 	bl	80008e8 <lcd_wr_xdata>
 800364a:	23c2      	movs	r3, #194	@ 0xc2
 800364c:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003650:	4bb4      	ldr	r3, [pc, #720]	@ (8003924 <lcd_init+0x1dc4>)
 8003652:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003656:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003658:	4bb2      	ldr	r3, [pc, #712]	@ (8003924 <lcd_init+0x1dc4>)
 800365a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800365e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003660:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8003664:	b29a      	uxth	r2, r3
 8003666:	4bae      	ldr	r3, [pc, #696]	@ (8003920 <lcd_init+0x1dc0>)
 8003668:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800366a:	4bae      	ldr	r3, [pc, #696]	@ (8003924 <lcd_init+0x1dc4>)
 800366c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003670:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003672:	4bac      	ldr	r3, [pc, #688]	@ (8003924 <lcd_init+0x1dc4>)
 8003674:	2280      	movs	r2, #128	@ 0x80
 8003676:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003678:	4baa      	ldr	r3, [pc, #680]	@ (8003924 <lcd_init+0x1dc4>)
 800367a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800367e:	611a      	str	r2, [r3, #16]
}
 8003680:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x0A);
 8003682:	200a      	movs	r0, #10
 8003684:	f7fd f930 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003688:	2000      	movs	r0, #0
 800368a:	f7fd f92d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 800368e:	2004      	movs	r0, #4
 8003690:	f7fd f92a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003694:	2000      	movs	r0, #0
 8003696:	f7fd f927 	bl	80008e8 <lcd_wr_xdata>
 800369a:	23c3      	movs	r3, #195	@ 0xc3
 800369c:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80036a0:	4ba0      	ldr	r3, [pc, #640]	@ (8003924 <lcd_init+0x1dc4>)
 80036a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036a6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80036a8:	4b9e      	ldr	r3, [pc, #632]	@ (8003924 <lcd_init+0x1dc4>)
 80036aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036ae:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80036b0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	4b9a      	ldr	r3, [pc, #616]	@ (8003920 <lcd_init+0x1dc0>)
 80036b8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80036ba:	4b9a      	ldr	r3, [pc, #616]	@ (8003924 <lcd_init+0x1dc4>)
 80036bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036c0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80036c2:	4b98      	ldr	r3, [pc, #608]	@ (8003924 <lcd_init+0x1dc4>)
 80036c4:	2280      	movs	r2, #128	@ 0x80
 80036c6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80036c8:	4b96      	ldr	r3, [pc, #600]	@ (8003924 <lcd_init+0x1dc4>)
 80036ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ce:	611a      	str	r2, [r3, #16]
}
 80036d0:	bf00      	nop

        lcd_wr_regno(0xC3);
        lcd_wr_xdata(0x3C);
 80036d2:	203c      	movs	r0, #60	@ 0x3c
 80036d4:	f7fd f908 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036d8:	2000      	movs	r0, #0
 80036da:	f7fd f905 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3A);
 80036de:	203a      	movs	r0, #58	@ 0x3a
 80036e0:	f7fd f902 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036e4:	2000      	movs	r0, #0
 80036e6:	f7fd f8ff 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x39);
 80036ea:	2039      	movs	r0, #57	@ 0x39
 80036ec:	f7fd f8fc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036f0:	2000      	movs	r0, #0
 80036f2:	f7fd f8f9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 80036f6:	2037      	movs	r0, #55	@ 0x37
 80036f8:	f7fd f8f6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036fc:	2000      	movs	r0, #0
 80036fe:	f7fd f8f3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8003702:	203c      	movs	r0, #60	@ 0x3c
 8003704:	f7fd f8f0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003708:	2000      	movs	r0, #0
 800370a:	f7fd f8ed 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 800370e:	2036      	movs	r0, #54	@ 0x36
 8003710:	f7fd f8ea 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003714:	2000      	movs	r0, #0
 8003716:	f7fd f8e7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 800371a:	2032      	movs	r0, #50	@ 0x32
 800371c:	f7fd f8e4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003720:	2000      	movs	r0, #0
 8003722:	f7fd f8e1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 8003726:	202f      	movs	r0, #47	@ 0x2f
 8003728:	f7fd f8de 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800372c:	2000      	movs	r0, #0
 800372e:	f7fd f8db 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8003732:	202c      	movs	r0, #44	@ 0x2c
 8003734:	f7fd f8d8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003738:	2000      	movs	r0, #0
 800373a:	f7fd f8d5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 800373e:	2029      	movs	r0, #41	@ 0x29
 8003740:	f7fd f8d2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003744:	2000      	movs	r0, #0
 8003746:	f7fd f8cf 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 800374a:	2026      	movs	r0, #38	@ 0x26
 800374c:	f7fd f8cc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003750:	2000      	movs	r0, #0
 8003752:	f7fd f8c9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003756:	2024      	movs	r0, #36	@ 0x24
 8003758:	f7fd f8c6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800375c:	2000      	movs	r0, #0
 800375e:	f7fd f8c3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003762:	2024      	movs	r0, #36	@ 0x24
 8003764:	f7fd f8c0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003768:	2000      	movs	r0, #0
 800376a:	f7fd f8bd 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 800376e:	2023      	movs	r0, #35	@ 0x23
 8003770:	f7fd f8ba 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003774:	2000      	movs	r0, #0
 8003776:	f7fd f8b7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 800377a:	203c      	movs	r0, #60	@ 0x3c
 800377c:	f7fd f8b4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003780:	2000      	movs	r0, #0
 8003782:	f7fd f8b1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003786:	2036      	movs	r0, #54	@ 0x36
 8003788:	f7fd f8ae 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800378c:	2000      	movs	r0, #0
 800378e:	f7fd f8ab 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8003792:	2032      	movs	r0, #50	@ 0x32
 8003794:	f7fd f8a8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003798:	2000      	movs	r0, #0
 800379a:	f7fd f8a5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 800379e:	202f      	movs	r0, #47	@ 0x2f
 80037a0:	f7fd f8a2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037a4:	2000      	movs	r0, #0
 80037a6:	f7fd f89f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 80037aa:	202c      	movs	r0, #44	@ 0x2c
 80037ac:	f7fd f89c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037b0:	2000      	movs	r0, #0
 80037b2:	f7fd f899 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80037b6:	2029      	movs	r0, #41	@ 0x29
 80037b8:	f7fd f896 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037bc:	2000      	movs	r0, #0
 80037be:	f7fd f893 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 80037c2:	2026      	movs	r0, #38	@ 0x26
 80037c4:	f7fd f890 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037c8:	2000      	movs	r0, #0
 80037ca:	f7fd f88d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80037ce:	2024      	movs	r0, #36	@ 0x24
 80037d0:	f7fd f88a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037d4:	2000      	movs	r0, #0
 80037d6:	f7fd f887 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80037da:	2024      	movs	r0, #36	@ 0x24
 80037dc:	f7fd f884 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037e0:	2000      	movs	r0, #0
 80037e2:	f7fd f881 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80037e6:	2023      	movs	r0, #35	@ 0x23
 80037e8:	f7fd f87e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f7fd f87b 	bl	80008e8 <lcd_wr_xdata>
 80037f2:	23c4      	movs	r3, #196	@ 0xc4
 80037f4:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80037f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003924 <lcd_init+0x1dc4>)
 80037fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037fe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003800:	4b48      	ldr	r3, [pc, #288]	@ (8003924 <lcd_init+0x1dc4>)
 8003802:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003806:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003808:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800380c:	b29a      	uxth	r2, r3
 800380e:	4b44      	ldr	r3, [pc, #272]	@ (8003920 <lcd_init+0x1dc0>)
 8003810:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003812:	4b44      	ldr	r3, [pc, #272]	@ (8003924 <lcd_init+0x1dc4>)
 8003814:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003818:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800381a:	4b42      	ldr	r3, [pc, #264]	@ (8003924 <lcd_init+0x1dc4>)
 800381c:	2280      	movs	r2, #128	@ 0x80
 800381e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003820:	4b40      	ldr	r3, [pc, #256]	@ (8003924 <lcd_init+0x1dc4>)
 8003822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003826:	611a      	str	r2, [r3, #16]
}
 8003828:	bf00      	nop

        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x62);
 800382a:	2062      	movs	r0, #98	@ 0x62
 800382c:	f7fd f85c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003830:	2000      	movs	r0, #0
 8003832:	f7fd f859 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8003836:	2005      	movs	r0, #5
 8003838:	f7fd f856 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800383c:	2000      	movs	r0, #0
 800383e:	f7fd f853 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8003842:	2084      	movs	r0, #132	@ 0x84
 8003844:	f7fd f850 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003848:	2000      	movs	r0, #0
 800384a:	f7fd f84d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF0);
 800384e:	20f0      	movs	r0, #240	@ 0xf0
 8003850:	f7fd f84a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003854:	2000      	movs	r0, #0
 8003856:	f7fd f847 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 800385a:	2018      	movs	r0, #24
 800385c:	f7fd f844 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003860:	2000      	movs	r0, #0
 8003862:	f7fd f841 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA4);
 8003866:	20a4      	movs	r0, #164	@ 0xa4
 8003868:	f7fd f83e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800386c:	2000      	movs	r0, #0
 800386e:	f7fd f83b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 8003872:	2018      	movs	r0, #24
 8003874:	f7fd f838 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003878:	2000      	movs	r0, #0
 800387a:	f7fd f835 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 800387e:	2050      	movs	r0, #80	@ 0x50
 8003880:	f7fd f832 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003884:	2000      	movs	r0, #0
 8003886:	f7fd f82f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 800388a:	200c      	movs	r0, #12
 800388c:	f7fd f82c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003890:	2000      	movs	r0, #0
 8003892:	f7fd f829 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003896:	2017      	movs	r0, #23
 8003898:	f7fd f826 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800389c:	2000      	movs	r0, #0
 800389e:	f7fd f823 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x95);
 80038a2:	2095      	movs	r0, #149	@ 0x95
 80038a4:	f7fd f820 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7fd f81d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80038ae:	20f3      	movs	r0, #243	@ 0xf3
 80038b0:	f7fd f81a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038b4:	2000      	movs	r0, #0
 80038b6:	f7fd f817 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE6);
 80038ba:	20e6      	movs	r0, #230	@ 0xe6
 80038bc:	f7fd f814 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038c0:	2000      	movs	r0, #0
 80038c2:	f7fd f811 	bl	80008e8 <lcd_wr_xdata>
 80038c6:	23c5      	movs	r3, #197	@ 0xc5
 80038c8:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80038cc:	4b15      	ldr	r3, [pc, #84]	@ (8003924 <lcd_init+0x1dc4>)
 80038ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038d2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80038d4:	4b13      	ldr	r3, [pc, #76]	@ (8003924 <lcd_init+0x1dc4>)
 80038d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038da:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80038dc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003920 <lcd_init+0x1dc0>)
 80038e4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80038e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <lcd_init+0x1dc4>)
 80038e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038ec:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <lcd_init+0x1dc4>)
 80038f0:	2280      	movs	r2, #128	@ 0x80
 80038f2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80038f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <lcd_init+0x1dc4>)
 80038f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038fa:	611a      	str	r2, [r3, #16]
}
 80038fc:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x32);
 80038fe:	2032      	movs	r0, #50	@ 0x32
 8003900:	f7fc fff2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003904:	2000      	movs	r0, #0
 8003906:	f7fc ffef 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 800390a:	2044      	movs	r0, #68	@ 0x44
 800390c:	f7fc ffec 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003910:	2000      	movs	r0, #0
 8003912:	f7fc ffe9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x65);
 8003916:	2065      	movs	r0, #101	@ 0x65
 8003918:	f7fc ffe6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800391c:	2000      	movs	r0, #0
 800391e:	e003      	b.n	8003928 <lcd_init+0x1dc8>
 8003920:	40010c00 	.word	0x40010c00
 8003924:	40011000 	.word	0x40011000
 8003928:	f7fc ffde 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 800392c:	2076      	movs	r0, #118	@ 0x76
 800392e:	f7fc ffdb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003932:	2000      	movs	r0, #0
 8003934:	f7fc ffd8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003938:	2088      	movs	r0, #136	@ 0x88
 800393a:	f7fc ffd5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800393e:	2000      	movs	r0, #0
 8003940:	f7fc ffd2 	bl	80008e8 <lcd_wr_xdata>
 8003944:	23c6      	movs	r3, #198	@ 0xc6
 8003946:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800394a:	4bd7      	ldr	r3, [pc, #860]	@ (8003ca8 <lcd_init+0x2148>)
 800394c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003950:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003952:	4bd5      	ldr	r3, [pc, #852]	@ (8003ca8 <lcd_init+0x2148>)
 8003954:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003958:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800395a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800395e:	b29a      	uxth	r2, r3
 8003960:	4bd2      	ldr	r3, [pc, #840]	@ (8003cac <lcd_init+0x214c>)
 8003962:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003964:	4bd0      	ldr	r3, [pc, #832]	@ (8003ca8 <lcd_init+0x2148>)
 8003966:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800396a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800396c:	4bce      	ldr	r3, [pc, #824]	@ (8003ca8 <lcd_init+0x2148>)
 800396e:	2280      	movs	r2, #128	@ 0x80
 8003970:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003972:	4bcd      	ldr	r3, [pc, #820]	@ (8003ca8 <lcd_init+0x2148>)
 8003974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003978:	611a      	str	r2, [r3, #16]
}
 800397a:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x20);
 800397c:	2020      	movs	r0, #32
 800397e:	f7fc ffb3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003982:	2000      	movs	r0, #0
 8003984:	f7fc ffb0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003988:	2017      	movs	r0, #23
 800398a:	f7fc ffad 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800398e:	2000      	movs	r0, #0
 8003990:	f7fc ffaa 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003994:	2001      	movs	r0, #1
 8003996:	f7fc ffa7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800399a:	2000      	movs	r0, #0
 800399c:	f7fc ffa4 	bl	80008e8 <lcd_wr_xdata>
 80039a0:	23c7      	movs	r3, #199	@ 0xc7
 80039a2:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80039a6:	4bc0      	ldr	r3, [pc, #768]	@ (8003ca8 <lcd_init+0x2148>)
 80039a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039ac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80039ae:	4bbe      	ldr	r3, [pc, #760]	@ (8003ca8 <lcd_init+0x2148>)
 80039b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039b4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80039b6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	4bbb      	ldr	r3, [pc, #748]	@ (8003cac <lcd_init+0x214c>)
 80039be:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80039c0:	4bb9      	ldr	r3, [pc, #740]	@ (8003ca8 <lcd_init+0x2148>)
 80039c2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80039c6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80039c8:	4bb7      	ldr	r3, [pc, #732]	@ (8003ca8 <lcd_init+0x2148>)
 80039ca:	2280      	movs	r2, #128	@ 0x80
 80039cc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80039ce:	4bb6      	ldr	r3, [pc, #728]	@ (8003ca8 <lcd_init+0x2148>)
 80039d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d4:	611a      	str	r2, [r3, #16]
}
 80039d6:	bf00      	nop

        lcd_wr_regno(0xC7);
        lcd_wr_xdata(0x00);
 80039d8:	2000      	movs	r0, #0
 80039da:	f7fc ff85 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039de:	2000      	movs	r0, #0
 80039e0:	f7fc ff82 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039e4:	2000      	movs	r0, #0
 80039e6:	f7fc ff7f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039ea:	2000      	movs	r0, #0
 80039ec:	f7fc ff7c 	bl	80008e8 <lcd_wr_xdata>
 80039f0:	23c8      	movs	r3, #200	@ 0xc8
 80039f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80039f6:	4bac      	ldr	r3, [pc, #688]	@ (8003ca8 <lcd_init+0x2148>)
 80039f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039fc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80039fe:	4baa      	ldr	r3, [pc, #680]	@ (8003ca8 <lcd_init+0x2148>)
 8003a00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a04:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a06:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	4ba7      	ldr	r3, [pc, #668]	@ (8003cac <lcd_init+0x214c>)
 8003a0e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a10:	4ba5      	ldr	r3, [pc, #660]	@ (8003ca8 <lcd_init+0x2148>)
 8003a12:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a16:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a18:	4ba3      	ldr	r3, [pc, #652]	@ (8003ca8 <lcd_init+0x2148>)
 8003a1a:	2280      	movs	r2, #128	@ 0x80
 8003a1c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a1e:	4ba2      	ldr	r3, [pc, #648]	@ (8003ca8 <lcd_init+0x2148>)
 8003a20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a24:	611a      	str	r2, [r3, #16]
}
 8003a26:	bf00      	nop

        lcd_wr_regno(0xC8);
        lcd_wr_xdata(0x00);
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f7fc ff5d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f7fc ff5a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a34:	2000      	movs	r0, #0
 8003a36:	f7fc ff57 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f7fc ff54 	bl	80008e8 <lcd_wr_xdata>
 8003a40:	23c9      	movs	r3, #201	@ 0xc9
 8003a42:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a46:	4b98      	ldr	r3, [pc, #608]	@ (8003ca8 <lcd_init+0x2148>)
 8003a48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a4c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a4e:	4b96      	ldr	r3, [pc, #600]	@ (8003ca8 <lcd_init+0x2148>)
 8003a50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a54:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a56:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	4b93      	ldr	r3, [pc, #588]	@ (8003cac <lcd_init+0x214c>)
 8003a5e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a60:	4b91      	ldr	r3, [pc, #580]	@ (8003ca8 <lcd_init+0x2148>)
 8003a62:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a66:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a68:	4b8f      	ldr	r3, [pc, #572]	@ (8003ca8 <lcd_init+0x2148>)
 8003a6a:	2280      	movs	r2, #128	@ 0x80
 8003a6c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a6e:	4b8e      	ldr	r3, [pc, #568]	@ (8003ca8 <lcd_init+0x2148>)
 8003a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a74:	611a      	str	r2, [r3, #16]
}
 8003a76:	bf00      	nop

        lcd_wr_regno(0xC9);
        lcd_wr_xdata(0x00);
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f7fc ff35 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a7e:	2000      	movs	r0, #0
 8003a80:	f7fc ff32 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a84:	2000      	movs	r0, #0
 8003a86:	f7fc ff2f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f7fc ff2c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a90:	2000      	movs	r0, #0
 8003a92:	f7fc ff29 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a96:	2000      	movs	r0, #0
 8003a98:	f7fc ff26 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f7fc ff23 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f7fc ff20 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f7fc ff1d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f7fc ff1a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f7fc ff17 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aba:	2000      	movs	r0, #0
 8003abc:	f7fc ff14 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f7fc ff11 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f7fc ff0e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7fc ff0b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f7fc ff08 	bl	80008e8 <lcd_wr_xdata>
 8003ad8:	23e0      	movs	r3, #224	@ 0xe0
 8003ada:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003ade:	4b72      	ldr	r3, [pc, #456]	@ (8003ca8 <lcd_init+0x2148>)
 8003ae0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ae4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003ae6:	4b70      	ldr	r3, [pc, #448]	@ (8003ca8 <lcd_init+0x2148>)
 8003ae8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003aee:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	4b6d      	ldr	r3, [pc, #436]	@ (8003cac <lcd_init+0x214c>)
 8003af6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003af8:	4b6b      	ldr	r3, [pc, #428]	@ (8003ca8 <lcd_init+0x2148>)
 8003afa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003afe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b00:	4b69      	ldr	r3, [pc, #420]	@ (8003ca8 <lcd_init+0x2148>)
 8003b02:	2280      	movs	r2, #128	@ 0x80
 8003b04:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b06:	4b68      	ldr	r3, [pc, #416]	@ (8003ca8 <lcd_init+0x2148>)
 8003b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b0c:	611a      	str	r2, [r3, #16]
}
 8003b0e:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0x16);
 8003b10:	2016      	movs	r0, #22
 8003b12:	f7fc fee9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b16:	2000      	movs	r0, #0
 8003b18:	f7fc fee6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003b1c:	201c      	movs	r0, #28
 8003b1e:	f7fc fee3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b22:	2000      	movs	r0, #0
 8003b24:	f7fc fee0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003b28:	2021      	movs	r0, #33	@ 0x21
 8003b2a:	f7fc fedd 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f7fc feda 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003b34:	2036      	movs	r0, #54	@ 0x36
 8003b36:	f7fc fed7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7fc fed4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x46);
 8003b40:	2046      	movs	r0, #70	@ 0x46
 8003b42:	f7fc fed1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b46:	2000      	movs	r0, #0
 8003b48:	f7fc fece 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003b4c:	2052      	movs	r0, #82	@ 0x52
 8003b4e:	f7fc fecb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b52:	2000      	movs	r0, #0
 8003b54:	f7fc fec8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003b58:	2064      	movs	r0, #100	@ 0x64
 8003b5a:	f7fc fec5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f7fc fec2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003b64:	207a      	movs	r0, #122	@ 0x7a
 8003b66:	f7fc febf 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7fc febc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003b70:	208b      	movs	r0, #139	@ 0x8b
 8003b72:	f7fc feb9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b76:	2000      	movs	r0, #0
 8003b78:	f7fc feb6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003b7c:	2099      	movs	r0, #153	@ 0x99
 8003b7e:	f7fc feb3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b82:	2000      	movs	r0, #0
 8003b84:	f7fc feb0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003b88:	20a8      	movs	r0, #168	@ 0xa8
 8003b8a:	f7fc fead 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b8e:	2000      	movs	r0, #0
 8003b90:	f7fc feaa 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003b94:	20b9      	movs	r0, #185	@ 0xb9
 8003b96:	f7fc fea7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	f7fc fea4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003ba0:	20c4      	movs	r0, #196	@ 0xc4
 8003ba2:	f7fc fea1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	f7fc fe9e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003bac:	20ca      	movs	r0, #202	@ 0xca
 8003bae:	f7fc fe9b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	f7fc fe98 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003bb8:	20d2      	movs	r0, #210	@ 0xd2
 8003bba:	f7fc fe95 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f7fc fe92 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD9);
 8003bc4:	20d9      	movs	r0, #217	@ 0xd9
 8003bc6:	f7fc fe8f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f7fc fe8c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003bd0:	20e0      	movs	r0, #224	@ 0xe0
 8003bd2:	f7fc fe89 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f7fc fe86 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003bdc:	20f3      	movs	r0, #243	@ 0xf3
 8003bde:	f7fc fe83 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003be2:	2000      	movs	r0, #0
 8003be4:	f7fc fe80 	bl	80008e8 <lcd_wr_xdata>
 8003be8:	23e1      	movs	r3, #225	@ 0xe1
 8003bea:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003bee:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca8 <lcd_init+0x2148>)
 8003bf0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bf4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca8 <lcd_init+0x2148>)
 8003bf8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bfc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003bfe:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	4b29      	ldr	r3, [pc, #164]	@ (8003cac <lcd_init+0x214c>)
 8003c06:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003c08:	4b27      	ldr	r3, [pc, #156]	@ (8003ca8 <lcd_init+0x2148>)
 8003c0a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c0e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003c10:	4b25      	ldr	r3, [pc, #148]	@ (8003ca8 <lcd_init+0x2148>)
 8003c12:	2280      	movs	r2, #128	@ 0x80
 8003c14:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003c16:	4b24      	ldr	r3, [pc, #144]	@ (8003ca8 <lcd_init+0x2148>)
 8003c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c1c:	611a      	str	r2, [r3, #16]
}
 8003c1e:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0x16);
 8003c20:	2016      	movs	r0, #22
 8003c22:	f7fc fe61 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7fc fe5e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003c2c:	201c      	movs	r0, #28
 8003c2e:	f7fc fe5b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c32:	2000      	movs	r0, #0
 8003c34:	f7fc fe58 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8003c38:	2022      	movs	r0, #34	@ 0x22
 8003c3a:	f7fc fe55 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f7fc fe52 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003c44:	2036      	movs	r0, #54	@ 0x36
 8003c46:	f7fc fe4f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7fc fe4c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8003c50:	2045      	movs	r0, #69	@ 0x45
 8003c52:	f7fc fe49 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c56:	2000      	movs	r0, #0
 8003c58:	f7fc fe46 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003c5c:	2052      	movs	r0, #82	@ 0x52
 8003c5e:	f7fc fe43 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c62:	2000      	movs	r0, #0
 8003c64:	f7fc fe40 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003c68:	2064      	movs	r0, #100	@ 0x64
 8003c6a:	f7fc fe3d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f7fc fe3a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003c74:	207a      	movs	r0, #122	@ 0x7a
 8003c76:	f7fc fe37 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7fc fe34 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003c80:	208b      	movs	r0, #139	@ 0x8b
 8003c82:	f7fc fe31 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c86:	2000      	movs	r0, #0
 8003c88:	f7fc fe2e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003c8c:	2099      	movs	r0, #153	@ 0x99
 8003c8e:	f7fc fe2b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c92:	2000      	movs	r0, #0
 8003c94:	f7fc fe28 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003c98:	20a8      	movs	r0, #168	@ 0xa8
 8003c9a:	f7fc fe25 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f7fc fe22 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003ca4:	20b9      	movs	r0, #185	@ 0xb9
 8003ca6:	e003      	b.n	8003cb0 <lcd_init+0x2150>
 8003ca8:	40011000 	.word	0x40011000
 8003cac:	40010c00 	.word	0x40010c00
 8003cb0:	f7fc fe1a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f7fc fe17 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003cba:	20c4      	movs	r0, #196	@ 0xc4
 8003cbc:	f7fc fe14 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	f7fc fe11 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003cc6:	20ca      	movs	r0, #202	@ 0xca
 8003cc8:	f7fc fe0e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ccc:	2000      	movs	r0, #0
 8003cce:	f7fc fe0b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003cd2:	20d2      	movs	r0, #210	@ 0xd2
 8003cd4:	f7fc fe08 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cd8:	2000      	movs	r0, #0
 8003cda:	f7fc fe05 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD8);
 8003cde:	20d8      	movs	r0, #216	@ 0xd8
 8003ce0:	f7fc fe02 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f7fc fdff 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003cea:	20e0      	movs	r0, #224	@ 0xe0
 8003cec:	f7fc fdfc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f7fc fdf9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003cf6:	20f3      	movs	r0, #243	@ 0xf3
 8003cf8:	f7fc fdf6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f7fc fdf3 	bl	80008e8 <lcd_wr_xdata>
 8003d02:	23e2      	movs	r3, #226	@ 0xe2
 8003d04:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003d08:	4be3      	ldr	r3, [pc, #908]	@ (8004098 <lcd_init+0x2538>)
 8003d0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d0e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003d10:	4be1      	ldr	r3, [pc, #900]	@ (8004098 <lcd_init+0x2538>)
 8003d12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d16:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003d18:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	4bdf      	ldr	r3, [pc, #892]	@ (800409c <lcd_init+0x253c>)
 8003d20:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003d22:	4bdd      	ldr	r3, [pc, #884]	@ (8004098 <lcd_init+0x2538>)
 8003d24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d28:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003d2a:	4bdb      	ldr	r3, [pc, #876]	@ (8004098 <lcd_init+0x2538>)
 8003d2c:	2280      	movs	r2, #128	@ 0x80
 8003d2e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003d30:	4bd9      	ldr	r3, [pc, #868]	@ (8004098 <lcd_init+0x2538>)
 8003d32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d36:	611a      	str	r2, [r3, #16]
}
 8003d38:	bf00      	nop

        lcd_wr_regno(0xE2);
        lcd_wr_xdata(0x05);
 8003d3a:	2005      	movs	r0, #5
 8003d3c:	f7fc fdd4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d40:	2000      	movs	r0, #0
 8003d42:	f7fc fdd1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8003d46:	200b      	movs	r0, #11
 8003d48:	f7fc fdce 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f7fc fdcb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);
 8003d52:	201b      	movs	r0, #27
 8003d54:	f7fc fdc8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f7fc fdc5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8003d5e:	2034      	movs	r0, #52	@ 0x34
 8003d60:	f7fc fdc2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d64:	2000      	movs	r0, #0
 8003d66:	f7fc fdbf 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003d6a:	2044      	movs	r0, #68	@ 0x44
 8003d6c:	f7fc fdbc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d70:	2000      	movs	r0, #0
 8003d72:	f7fc fdb9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x4F);
 8003d76:	204f      	movs	r0, #79	@ 0x4f
 8003d78:	f7fc fdb6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f7fc fdb3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8003d82:	2061      	movs	r0, #97	@ 0x61
 8003d84:	f7fc fdb0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f7fc fdad 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x79);
 8003d8e:	2079      	movs	r0, #121	@ 0x79
 8003d90:	f7fc fdaa 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d94:	2000      	movs	r0, #0
 8003d96:	f7fc fda7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003d9a:	2088      	movs	r0, #136	@ 0x88
 8003d9c:	f7fc fda4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003da0:	2000      	movs	r0, #0
 8003da2:	f7fc fda1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8003da6:	2097      	movs	r0, #151	@ 0x97
 8003da8:	f7fc fd9e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dac:	2000      	movs	r0, #0
 8003dae:	f7fc fd9b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8003db2:	20a6      	movs	r0, #166	@ 0xa6
 8003db4:	f7fc fd98 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003db8:	2000      	movs	r0, #0
 8003dba:	f7fc fd95 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8003dbe:	20b7      	movs	r0, #183	@ 0xb7
 8003dc0:	f7fc fd92 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f7fc fd8f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8003dca:	20c2      	movs	r0, #194	@ 0xc2
 8003dcc:	f7fc fd8c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	f7fc fd89 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 8003dd6:	20c7      	movs	r0, #199	@ 0xc7
 8003dd8:	f7fc fd86 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7fc fd83 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 8003de2:	20d1      	movs	r0, #209	@ 0xd1
 8003de4:	f7fc fd80 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7fc fd7d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD6);
 8003dee:	20d6      	movs	r0, #214	@ 0xd6
 8003df0:	f7fc fd7a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003df4:	2000      	movs	r0, #0
 8003df6:	f7fc fd77 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8003dfa:	20dd      	movs	r0, #221	@ 0xdd
 8003dfc:	f7fc fd74 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7fc fd71 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003e06:	20f3      	movs	r0, #243	@ 0xf3
 8003e08:	f7fc fd6e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f7fc fd6b 	bl	80008e8 <lcd_wr_xdata>
 8003e12:	23e3      	movs	r3, #227	@ 0xe3
 8003e14:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003e18:	4b9f      	ldr	r3, [pc, #636]	@ (8004098 <lcd_init+0x2538>)
 8003e1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e1e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003e20:	4b9d      	ldr	r3, [pc, #628]	@ (8004098 <lcd_init+0x2538>)
 8003e22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e26:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003e28:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	4b9b      	ldr	r3, [pc, #620]	@ (800409c <lcd_init+0x253c>)
 8003e30:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003e32:	4b99      	ldr	r3, [pc, #612]	@ (8004098 <lcd_init+0x2538>)
 8003e34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e38:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003e3a:	4b97      	ldr	r3, [pc, #604]	@ (8004098 <lcd_init+0x2538>)
 8003e3c:	2280      	movs	r2, #128	@ 0x80
 8003e3e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003e40:	4b95      	ldr	r3, [pc, #596]	@ (8004098 <lcd_init+0x2538>)
 8003e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e46:	611a      	str	r2, [r3, #16]
}
 8003e48:	bf00      	nop
        lcd_wr_regno(0xE3);
        lcd_wr_xdata(0x05);
 8003e4a:	2005      	movs	r0, #5
 8003e4c:	f7fc fd4c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e50:	2000      	movs	r0, #0
 8003e52:	f7fc fd49 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA);
 8003e56:	200a      	movs	r0, #10
 8003e58:	f7fc fd46 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f7fc fd43 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003e62:	201c      	movs	r0, #28
 8003e64:	f7fc fd40 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7fc fd3d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8003e6e:	2033      	movs	r0, #51	@ 0x33
 8003e70:	f7fc fd3a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7fc fd37 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003e7a:	2044      	movs	r0, #68	@ 0x44
 8003e7c:	f7fc fd34 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e80:	2000      	movs	r0, #0
 8003e82:	f7fc fd31 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8003e86:	2050      	movs	r0, #80	@ 0x50
 8003e88:	f7fc fd2e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7fc fd2b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x62);
 8003e92:	2062      	movs	r0, #98	@ 0x62
 8003e94:	f7fc fd28 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f7fc fd25 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x78);
 8003e9e:	2078      	movs	r0, #120	@ 0x78
 8003ea0:	f7fc fd22 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7fc fd1f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003eaa:	2088      	movs	r0, #136	@ 0x88
 8003eac:	f7fc fd1c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7fc fd19 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8003eb6:	2097      	movs	r0, #151	@ 0x97
 8003eb8:	f7fc fd16 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7fc fd13 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8003ec2:	20a6      	movs	r0, #166	@ 0xa6
 8003ec4:	f7fc fd10 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f7fc fd0d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8003ece:	20b7      	movs	r0, #183	@ 0xb7
 8003ed0:	f7fc fd0a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f7fc fd07 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8003eda:	20c2      	movs	r0, #194	@ 0xc2
 8003edc:	f7fc fd04 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f7fc fd01 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 8003ee6:	20c7      	movs	r0, #199	@ 0xc7
 8003ee8:	f7fc fcfe 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eec:	2000      	movs	r0, #0
 8003eee:	f7fc fcfb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 8003ef2:	20d1      	movs	r0, #209	@ 0xd1
 8003ef4:	f7fc fcf8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f7fc fcf5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD5);
 8003efe:	20d5      	movs	r0, #213	@ 0xd5
 8003f00:	f7fc fcf2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f7fc fcef 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8003f0a:	20dd      	movs	r0, #221	@ 0xdd
 8003f0c:	f7fc fcec 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f10:	2000      	movs	r0, #0
 8003f12:	f7fc fce9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003f16:	20f3      	movs	r0, #243	@ 0xf3
 8003f18:	f7fc fce6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7fc fce3 	bl	80008e8 <lcd_wr_xdata>
 8003f22:	23e4      	movs	r3, #228	@ 0xe4
 8003f24:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003f28:	4b5b      	ldr	r3, [pc, #364]	@ (8004098 <lcd_init+0x2538>)
 8003f2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f2e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003f30:	4b59      	ldr	r3, [pc, #356]	@ (8004098 <lcd_init+0x2538>)
 8003f32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f36:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003f38:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	4b57      	ldr	r3, [pc, #348]	@ (800409c <lcd_init+0x253c>)
 8003f40:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003f42:	4b55      	ldr	r3, [pc, #340]	@ (8004098 <lcd_init+0x2538>)
 8003f44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003f48:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003f4a:	4b53      	ldr	r3, [pc, #332]	@ (8004098 <lcd_init+0x2538>)
 8003f4c:	2280      	movs	r2, #128	@ 0x80
 8003f4e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003f50:	4b51      	ldr	r3, [pc, #324]	@ (8004098 <lcd_init+0x2538>)
 8003f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f56:	611a      	str	r2, [r3, #16]
}
 8003f58:	bf00      	nop

        lcd_wr_regno(0xE4);
        lcd_wr_xdata(0x01);
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f7fc fcc4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f60:	2000      	movs	r0, #0
 8003f62:	f7fc fcc1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003f66:	2001      	movs	r0, #1
 8003f68:	f7fc fcbe 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f7fc fcbb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8003f72:	2002      	movs	r0, #2
 8003f74:	f7fc fcb8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7fc fcb5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8003f7e:	202a      	movs	r0, #42	@ 0x2a
 8003f80:	f7fc fcb2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f84:	2000      	movs	r0, #0
 8003f86:	f7fc fcaf 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8003f8a:	203c      	movs	r0, #60	@ 0x3c
 8003f8c:	f7fc fcac 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f90:	2000      	movs	r0, #0
 8003f92:	f7fc fca9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 8003f96:	204b      	movs	r0, #75	@ 0x4b
 8003f98:	f7fc fca6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f7fc fca3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003fa2:	205d      	movs	r0, #93	@ 0x5d
 8003fa4:	f7fc fca0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f7fc fc9d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8003fae:	2074      	movs	r0, #116	@ 0x74
 8003fb0:	f7fc fc9a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f7fc fc97 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8003fba:	2084      	movs	r0, #132	@ 0x84
 8003fbc:	f7fc fc94 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	f7fc fc91 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 8003fc6:	2093      	movs	r0, #147	@ 0x93
 8003fc8:	f7fc fc8e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f7fc fc8b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8003fd2:	20a2      	movs	r0, #162	@ 0xa2
 8003fd4:	f7fc fc88 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f7fc fc85 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8003fde:	20b3      	movs	r0, #179	@ 0xb3
 8003fe0:	f7fc fc82 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	f7fc fc7f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 8003fea:	20be      	movs	r0, #190	@ 0xbe
 8003fec:	f7fc fc7c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f7fc fc79 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003ff6:	20c4      	movs	r0, #196	@ 0xc4
 8003ff8:	f7fc fc76 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f7fc fc73 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 8004002:	20cd      	movs	r0, #205	@ 0xcd
 8004004:	f7fc fc70 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004008:	2000      	movs	r0, #0
 800400a:	f7fc fc6d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 800400e:	20d3      	movs	r0, #211	@ 0xd3
 8004010:	f7fc fc6a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004014:	2000      	movs	r0, #0
 8004016:	f7fc fc67 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 800401a:	20dd      	movs	r0, #221	@ 0xdd
 800401c:	f7fc fc64 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004020:	2000      	movs	r0, #0
 8004022:	f7fc fc61 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8004026:	20f3      	movs	r0, #243	@ 0xf3
 8004028:	f7fc fc5e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800402c:	2000      	movs	r0, #0
 800402e:	f7fc fc5b 	bl	80008e8 <lcd_wr_xdata>
 8004032:	23e5      	movs	r3, #229	@ 0xe5
 8004034:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004038:	4b17      	ldr	r3, [pc, #92]	@ (8004098 <lcd_init+0x2538>)
 800403a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800403e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004040:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <lcd_init+0x2538>)
 8004042:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004046:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004048:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800404c:	b29a      	uxth	r2, r3
 800404e:	4b13      	ldr	r3, [pc, #76]	@ (800409c <lcd_init+0x253c>)
 8004050:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004052:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <lcd_init+0x2538>)
 8004054:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004058:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800405a:	4b0f      	ldr	r3, [pc, #60]	@ (8004098 <lcd_init+0x2538>)
 800405c:	2280      	movs	r2, #128	@ 0x80
 800405e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004060:	4b0d      	ldr	r3, [pc, #52]	@ (8004098 <lcd_init+0x2538>)
 8004062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004066:	611a      	str	r2, [r3, #16]
}
 8004068:	bf00      	nop
        lcd_wr_regno(0xE5);
        lcd_wr_xdata(0x00);
 800406a:	2000      	movs	r0, #0
 800406c:	f7fc fc3c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004070:	2000      	movs	r0, #0
 8004072:	f7fc fc39 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004076:	2000      	movs	r0, #0
 8004078:	f7fc fc36 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800407c:	2000      	movs	r0, #0
 800407e:	f7fc fc33 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8004082:	2002      	movs	r0, #2
 8004084:	f7fc fc30 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004088:	2000      	movs	r0, #0
 800408a:	f7fc fc2d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 800408e:	2029      	movs	r0, #41	@ 0x29
 8004090:	f7fc fc2a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004094:	2000      	movs	r0, #0
 8004096:	e003      	b.n	80040a0 <lcd_init+0x2540>
 8004098:	40011000 	.word	0x40011000
 800409c:	40010c00 	.word	0x40010c00
 80040a0:	f7fc fc22 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80040a4:	203c      	movs	r0, #60	@ 0x3c
 80040a6:	f7fc fc1f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040aa:	2000      	movs	r0, #0
 80040ac:	f7fc fc1c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 80040b0:	204b      	movs	r0, #75	@ 0x4b
 80040b2:	f7fc fc19 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040b6:	2000      	movs	r0, #0
 80040b8:	f7fc fc16 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80040bc:	205d      	movs	r0, #93	@ 0x5d
 80040be:	f7fc fc13 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040c2:	2000      	movs	r0, #0
 80040c4:	f7fc fc10 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 80040c8:	2074      	movs	r0, #116	@ 0x74
 80040ca:	f7fc fc0d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040ce:	2000      	movs	r0, #0
 80040d0:	f7fc fc0a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 80040d4:	2084      	movs	r0, #132	@ 0x84
 80040d6:	f7fc fc07 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040da:	2000      	movs	r0, #0
 80040dc:	f7fc fc04 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 80040e0:	2093      	movs	r0, #147	@ 0x93
 80040e2:	f7fc fc01 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040e6:	2000      	movs	r0, #0
 80040e8:	f7fc fbfe 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 80040ec:	20a2      	movs	r0, #162	@ 0xa2
 80040ee:	f7fc fbfb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040f2:	2000      	movs	r0, #0
 80040f4:	f7fc fbf8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 80040f8:	20b3      	movs	r0, #179	@ 0xb3
 80040fa:	f7fc fbf5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040fe:	2000      	movs	r0, #0
 8004100:	f7fc fbf2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 8004104:	20be      	movs	r0, #190	@ 0xbe
 8004106:	f7fc fbef 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800410a:	2000      	movs	r0, #0
 800410c:	f7fc fbec 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8004110:	20c4      	movs	r0, #196	@ 0xc4
 8004112:	f7fc fbe9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004116:	2000      	movs	r0, #0
 8004118:	f7fc fbe6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 800411c:	20cd      	movs	r0, #205	@ 0xcd
 800411e:	f7fc fbe3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004122:	2000      	movs	r0, #0
 8004124:	f7fc fbe0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 8004128:	20d3      	movs	r0, #211	@ 0xd3
 800412a:	f7fc fbdd 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800412e:	2000      	movs	r0, #0
 8004130:	f7fc fbda 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8004134:	20dc      	movs	r0, #220	@ 0xdc
 8004136:	f7fc fbd7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800413a:	2000      	movs	r0, #0
 800413c:	f7fc fbd4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8004140:	20f3      	movs	r0, #243	@ 0xf3
 8004142:	f7fc fbd1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004146:	2000      	movs	r0, #0
 8004148:	f7fc fbce 	bl	80008e8 <lcd_wr_xdata>
 800414c:	23e6      	movs	r3, #230	@ 0xe6
 800414e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004152:	4bde      	ldr	r3, [pc, #888]	@ (80044cc <lcd_init+0x296c>)
 8004154:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004158:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800415a:	4bdc      	ldr	r3, [pc, #880]	@ (80044cc <lcd_init+0x296c>)
 800415c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004160:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004162:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8004166:	b29a      	uxth	r2, r3
 8004168:	4bd9      	ldr	r3, [pc, #868]	@ (80044d0 <lcd_init+0x2970>)
 800416a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800416c:	4bd7      	ldr	r3, [pc, #860]	@ (80044cc <lcd_init+0x296c>)
 800416e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004172:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004174:	4bd5      	ldr	r3, [pc, #852]	@ (80044cc <lcd_init+0x296c>)
 8004176:	2280      	movs	r2, #128	@ 0x80
 8004178:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800417a:	4bd4      	ldr	r3, [pc, #848]	@ (80044cc <lcd_init+0x296c>)
 800417c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004180:	611a      	str	r2, [r3, #16]
}
 8004182:	bf00      	nop

        lcd_wr_regno(0xE6);
        lcd_wr_xdata(0x11);
 8004184:	2011      	movs	r0, #17
 8004186:	f7fc fbaf 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800418a:	2000      	movs	r0, #0
 800418c:	f7fc fbac 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004190:	2034      	movs	r0, #52	@ 0x34
 8004192:	f7fc fba9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004196:	2000      	movs	r0, #0
 8004198:	f7fc fba6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 800419c:	2056      	movs	r0, #86	@ 0x56
 800419e:	f7fc fba3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041a2:	2000      	movs	r0, #0
 80041a4:	f7fc fba0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 80041a8:	2076      	movs	r0, #118	@ 0x76
 80041aa:	f7fc fb9d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f7fc fb9a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 80041b4:	2077      	movs	r0, #119	@ 0x77
 80041b6:	f7fc fb97 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ba:	2000      	movs	r0, #0
 80041bc:	f7fc fb94 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80041c0:	2066      	movs	r0, #102	@ 0x66
 80041c2:	f7fc fb91 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041c6:	2000      	movs	r0, #0
 80041c8:	f7fc fb8e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80041cc:	2088      	movs	r0, #136	@ 0x88
 80041ce:	f7fc fb8b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7fc fb88 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80041d8:	2099      	movs	r0, #153	@ 0x99
 80041da:	f7fc fb85 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041de:	2000      	movs	r0, #0
 80041e0:	f7fc fb82 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 80041e4:	20bb      	movs	r0, #187	@ 0xbb
 80041e6:	f7fc fb7f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7fc fb7c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80041f0:	2099      	movs	r0, #153	@ 0x99
 80041f2:	f7fc fb79 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041f6:	2000      	movs	r0, #0
 80041f8:	f7fc fb76 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80041fc:	2066      	movs	r0, #102	@ 0x66
 80041fe:	f7fc fb73 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004202:	2000      	movs	r0, #0
 8004204:	f7fc fb70 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004208:	2055      	movs	r0, #85	@ 0x55
 800420a:	f7fc fb6d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800420e:	2000      	movs	r0, #0
 8004210:	f7fc fb6a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004214:	2055      	movs	r0, #85	@ 0x55
 8004216:	f7fc fb67 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800421a:	2000      	movs	r0, #0
 800421c:	f7fc fb64 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004220:	2045      	movs	r0, #69	@ 0x45
 8004222:	f7fc fb61 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004226:	2000      	movs	r0, #0
 8004228:	f7fc fb5e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 800422c:	2043      	movs	r0, #67	@ 0x43
 800422e:	f7fc fb5b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004232:	2000      	movs	r0, #0
 8004234:	f7fc fb58 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004238:	2044      	movs	r0, #68	@ 0x44
 800423a:	f7fc fb55 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800423e:	2000      	movs	r0, #0
 8004240:	f7fc fb52 	bl	80008e8 <lcd_wr_xdata>
 8004244:	23e7      	movs	r3, #231	@ 0xe7
 8004246:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800424a:	4ba0      	ldr	r3, [pc, #640]	@ (80044cc <lcd_init+0x296c>)
 800424c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004250:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004252:	4b9e      	ldr	r3, [pc, #632]	@ (80044cc <lcd_init+0x296c>)
 8004254:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004258:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800425a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800425e:	b29a      	uxth	r2, r3
 8004260:	4b9b      	ldr	r3, [pc, #620]	@ (80044d0 <lcd_init+0x2970>)
 8004262:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004264:	4b99      	ldr	r3, [pc, #612]	@ (80044cc <lcd_init+0x296c>)
 8004266:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800426a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800426c:	4b97      	ldr	r3, [pc, #604]	@ (80044cc <lcd_init+0x296c>)
 800426e:	2280      	movs	r2, #128	@ 0x80
 8004270:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004272:	4b96      	ldr	r3, [pc, #600]	@ (80044cc <lcd_init+0x296c>)
 8004274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004278:	611a      	str	r2, [r3, #16]
}
 800427a:	bf00      	nop

        lcd_wr_regno(0xE7);
        lcd_wr_xdata(0x32);
 800427c:	2032      	movs	r0, #50	@ 0x32
 800427e:	f7fc fb33 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004282:	2000      	movs	r0, #0
 8004284:	f7fc fb30 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004288:	2055      	movs	r0, #85	@ 0x55
 800428a:	f7fc fb2d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800428e:	2000      	movs	r0, #0
 8004290:	f7fc fb2a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8004294:	2076      	movs	r0, #118	@ 0x76
 8004296:	f7fc fb27 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800429a:	2000      	movs	r0, #0
 800429c:	f7fc fb24 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80042a0:	2066      	movs	r0, #102	@ 0x66
 80042a2:	f7fc fb21 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042a6:	2000      	movs	r0, #0
 80042a8:	f7fc fb1e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80042ac:	2067      	movs	r0, #103	@ 0x67
 80042ae:	f7fc fb1b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042b2:	2000      	movs	r0, #0
 80042b4:	f7fc fb18 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80042b8:	2067      	movs	r0, #103	@ 0x67
 80042ba:	f7fc fb15 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042be:	2000      	movs	r0, #0
 80042c0:	f7fc fb12 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 80042c4:	2087      	movs	r0, #135	@ 0x87
 80042c6:	f7fc fb0f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042ca:	2000      	movs	r0, #0
 80042cc:	f7fc fb0c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80042d0:	2099      	movs	r0, #153	@ 0x99
 80042d2:	f7fc fb09 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f7fc fb06 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 80042dc:	20bb      	movs	r0, #187	@ 0xbb
 80042de:	f7fc fb03 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042e2:	2000      	movs	r0, #0
 80042e4:	f7fc fb00 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80042e8:	2099      	movs	r0, #153	@ 0x99
 80042ea:	f7fc fafd 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042ee:	2000      	movs	r0, #0
 80042f0:	f7fc fafa 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 80042f4:	2077      	movs	r0, #119	@ 0x77
 80042f6:	f7fc faf7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042fa:	2000      	movs	r0, #0
 80042fc:	f7fc faf4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004300:	2044      	movs	r0, #68	@ 0x44
 8004302:	f7fc faf1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004306:	2000      	movs	r0, #0
 8004308:	f7fc faee 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 800430c:	2056      	movs	r0, #86	@ 0x56
 800430e:	f7fc faeb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004312:	2000      	movs	r0, #0
 8004314:	f7fc fae8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8004318:	2023      	movs	r0, #35	@ 0x23
 800431a:	f7fc fae5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800431e:	2000      	movs	r0, #0
 8004320:	f7fc fae2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8004324:	2033      	movs	r0, #51	@ 0x33
 8004326:	f7fc fadf 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800432a:	2000      	movs	r0, #0
 800432c:	f7fc fadc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004330:	2045      	movs	r0, #69	@ 0x45
 8004332:	f7fc fad9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004336:	2000      	movs	r0, #0
 8004338:	f7fc fad6 	bl	80008e8 <lcd_wr_xdata>
 800433c:	23e8      	movs	r3, #232	@ 0xe8
 800433e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004342:	4b62      	ldr	r3, [pc, #392]	@ (80044cc <lcd_init+0x296c>)
 8004344:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004348:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800434a:	4b60      	ldr	r3, [pc, #384]	@ (80044cc <lcd_init+0x296c>)
 800434c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004350:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004352:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004356:	b29a      	uxth	r2, r3
 8004358:	4b5d      	ldr	r3, [pc, #372]	@ (80044d0 <lcd_init+0x2970>)
 800435a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800435c:	4b5b      	ldr	r3, [pc, #364]	@ (80044cc <lcd_init+0x296c>)
 800435e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004362:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004364:	4b59      	ldr	r3, [pc, #356]	@ (80044cc <lcd_init+0x296c>)
 8004366:	2280      	movs	r2, #128	@ 0x80
 8004368:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800436a:	4b58      	ldr	r3, [pc, #352]	@ (80044cc <lcd_init+0x296c>)
 800436c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004370:	611a      	str	r2, [r3, #16]
}
 8004372:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x00);
 8004374:	2000      	movs	r0, #0
 8004376:	f7fc fab7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800437a:	2000      	movs	r0, #0
 800437c:	f7fc fab4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004380:	2099      	movs	r0, #153	@ 0x99
 8004382:	f7fc fab1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004386:	2000      	movs	r0, #0
 8004388:	f7fc faae 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 800438c:	2087      	movs	r0, #135	@ 0x87
 800438e:	f7fc faab 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004392:	2000      	movs	r0, #0
 8004394:	f7fc faa8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8004398:	2088      	movs	r0, #136	@ 0x88
 800439a:	f7fc faa5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800439e:	2000      	movs	r0, #0
 80043a0:	f7fc faa2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 80043a4:	2077      	movs	r0, #119	@ 0x77
 80043a6:	f7fc fa9f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043aa:	2000      	movs	r0, #0
 80043ac:	f7fc fa9c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80043b0:	2066      	movs	r0, #102	@ 0x66
 80043b2:	f7fc fa99 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043b6:	2000      	movs	r0, #0
 80043b8:	f7fc fa96 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80043bc:	2088      	movs	r0, #136	@ 0x88
 80043be:	f7fc fa93 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043c2:	2000      	movs	r0, #0
 80043c4:	f7fc fa90 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xAA);
 80043c8:	20aa      	movs	r0, #170	@ 0xaa
 80043ca:	f7fc fa8d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043ce:	2000      	movs	r0, #0
 80043d0:	f7fc fa8a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 80043d4:	20bb      	movs	r0, #187	@ 0xbb
 80043d6:	f7fc fa87 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043da:	2000      	movs	r0, #0
 80043dc:	f7fc fa84 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80043e0:	2099      	movs	r0, #153	@ 0x99
 80043e2:	f7fc fa81 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043e6:	2000      	movs	r0, #0
 80043e8:	f7fc fa7e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80043ec:	2066      	movs	r0, #102	@ 0x66
 80043ee:	f7fc fa7b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043f2:	2000      	movs	r0, #0
 80043f4:	f7fc fa78 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80043f8:	2055      	movs	r0, #85	@ 0x55
 80043fa:	f7fc fa75 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043fe:	2000      	movs	r0, #0
 8004400:	f7fc fa72 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004404:	2055      	movs	r0, #85	@ 0x55
 8004406:	f7fc fa6f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800440a:	2000      	movs	r0, #0
 800440c:	f7fc fa6c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004410:	2044      	movs	r0, #68	@ 0x44
 8004412:	f7fc fa69 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004416:	2000      	movs	r0, #0
 8004418:	f7fc fa66 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 800441c:	2044      	movs	r0, #68	@ 0x44
 800441e:	f7fc fa63 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004422:	2000      	movs	r0, #0
 8004424:	f7fc fa60 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004428:	2055      	movs	r0, #85	@ 0x55
 800442a:	f7fc fa5d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800442e:	2000      	movs	r0, #0
 8004430:	f7fc fa5a 	bl	80008e8 <lcd_wr_xdata>
 8004434:	23e9      	movs	r3, #233	@ 0xe9
 8004436:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800443a:	4b24      	ldr	r3, [pc, #144]	@ (80044cc <lcd_init+0x296c>)
 800443c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004440:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004442:	4b22      	ldr	r3, [pc, #136]	@ (80044cc <lcd_init+0x296c>)
 8004444:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004448:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800444a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800444e:	b29a      	uxth	r2, r3
 8004450:	4b1f      	ldr	r3, [pc, #124]	@ (80044d0 <lcd_init+0x2970>)
 8004452:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004454:	4b1d      	ldr	r3, [pc, #116]	@ (80044cc <lcd_init+0x296c>)
 8004456:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800445a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800445c:	4b1b      	ldr	r3, [pc, #108]	@ (80044cc <lcd_init+0x296c>)
 800445e:	2280      	movs	r2, #128	@ 0x80
 8004460:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004462:	4b1a      	ldr	r3, [pc, #104]	@ (80044cc <lcd_init+0x296c>)
 8004464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004468:	611a      	str	r2, [r3, #16]
}
 800446a:	bf00      	nop

        lcd_wr_regno(0xE9);
        lcd_wr_xdata(0xAA);
 800446c:	20aa      	movs	r0, #170	@ 0xaa
 800446e:	f7fc fa3b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004472:	2000      	movs	r0, #0
 8004474:	f7fc fa38 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004478:	2000      	movs	r0, #0
 800447a:	f7fc fa35 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800447e:	2000      	movs	r0, #0
 8004480:	f7fc fa32 	bl	80008e8 <lcd_wr_xdata>
 8004484:	2300      	movs	r3, #0
 8004486:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800448a:	4b10      	ldr	r3, [pc, #64]	@ (80044cc <lcd_init+0x296c>)
 800448c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004490:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004492:	4b0e      	ldr	r3, [pc, #56]	@ (80044cc <lcd_init+0x296c>)
 8004494:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004498:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800449a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800449e:	b29a      	uxth	r2, r3
 80044a0:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <lcd_init+0x2970>)
 80044a2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80044a4:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <lcd_init+0x296c>)
 80044a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80044aa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80044ac:	4b07      	ldr	r3, [pc, #28]	@ (80044cc <lcd_init+0x296c>)
 80044ae:	2280      	movs	r2, #128	@ 0x80
 80044b0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80044b2:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <lcd_init+0x296c>)
 80044b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044b8:	611a      	str	r2, [r3, #16]
}
 80044ba:	bf00      	nop

        lcd_wr_regno(0x00);
        lcd_wr_xdata(0xAA);
 80044bc:	20aa      	movs	r0, #170	@ 0xaa
 80044be:	f7fc fa13 	bl	80008e8 <lcd_wr_xdata>
 80044c2:	23cf      	movs	r3, #207	@ 0xcf
 80044c4:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80044c8:	e004      	b.n	80044d4 <lcd_init+0x2974>
 80044ca:	bf00      	nop
 80044cc:	40011000 	.word	0x40011000
 80044d0:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80044d4:	4bbc      	ldr	r3, [pc, #752]	@ (80047c8 <lcd_init+0x2c68>)
 80044d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044da:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80044dc:	4bba      	ldr	r3, [pc, #744]	@ (80047c8 <lcd_init+0x2c68>)
 80044de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044e2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80044e4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	4bb8      	ldr	r3, [pc, #736]	@ (80047cc <lcd_init+0x2c6c>)
 80044ec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80044ee:	4bb6      	ldr	r3, [pc, #728]	@ (80047c8 <lcd_init+0x2c68>)
 80044f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80044f4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80044f6:	4bb4      	ldr	r3, [pc, #720]	@ (80047c8 <lcd_init+0x2c68>)
 80044f8:	2280      	movs	r2, #128	@ 0x80
 80044fa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80044fc:	4bb2      	ldr	r3, [pc, #712]	@ (80047c8 <lcd_init+0x2c68>)
 80044fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004502:	611a      	str	r2, [r3, #16]
}
 8004504:	bf00      	nop

        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 8004506:	2000      	movs	r0, #0
 8004508:	f7fc f9ee 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800450c:	2000      	movs	r0, #0
 800450e:	f7fc f9eb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004512:	2000      	movs	r0, #0
 8004514:	f7fc f9e8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004518:	2000      	movs	r0, #0
 800451a:	f7fc f9e5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800451e:	2000      	movs	r0, #0
 8004520:	f7fc f9e2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004524:	2000      	movs	r0, #0
 8004526:	f7fc f9df 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800452a:	2000      	movs	r0, #0
 800452c:	f7fc f9dc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004530:	2000      	movs	r0, #0
 8004532:	f7fc f9d9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004536:	2000      	movs	r0, #0
 8004538:	f7fc f9d6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800453c:	2000      	movs	r0, #0
 800453e:	f7fc f9d3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004542:	2000      	movs	r0, #0
 8004544:	f7fc f9d0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004548:	2000      	movs	r0, #0
 800454a:	f7fc f9cd 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800454e:	2000      	movs	r0, #0
 8004550:	f7fc f9ca 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004554:	2000      	movs	r0, #0
 8004556:	f7fc f9c7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800455a:	2000      	movs	r0, #0
 800455c:	f7fc f9c4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004560:	2000      	movs	r0, #0
 8004562:	f7fc f9c1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004566:	2000      	movs	r0, #0
 8004568:	f7fc f9be 	bl	80008e8 <lcd_wr_xdata>
 800456c:	23f0      	movs	r3, #240	@ 0xf0
 800456e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004572:	4b95      	ldr	r3, [pc, #596]	@ (80047c8 <lcd_init+0x2c68>)
 8004574:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004578:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800457a:	4b93      	ldr	r3, [pc, #588]	@ (80047c8 <lcd_init+0x2c68>)
 800457c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004580:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004582:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004586:	b29a      	uxth	r2, r3
 8004588:	4b90      	ldr	r3, [pc, #576]	@ (80047cc <lcd_init+0x2c6c>)
 800458a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800458c:	4b8e      	ldr	r3, [pc, #568]	@ (80047c8 <lcd_init+0x2c68>)
 800458e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004592:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004594:	4b8c      	ldr	r3, [pc, #560]	@ (80047c8 <lcd_init+0x2c68>)
 8004596:	2280      	movs	r2, #128	@ 0x80
 8004598:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800459a:	4b8b      	ldr	r3, [pc, #556]	@ (80047c8 <lcd_init+0x2c68>)
 800459c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045a0:	611a      	str	r2, [r3, #16]
}
 80045a2:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x00);
 80045a4:	2000      	movs	r0, #0
 80045a6:	f7fc f99f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 80045aa:	2050      	movs	r0, #80	@ 0x50
 80045ac:	f7fc f99c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045b0:	2000      	movs	r0, #0
 80045b2:	f7fc f999 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045b6:	2000      	movs	r0, #0
 80045b8:	f7fc f996 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045bc:	2000      	movs	r0, #0
 80045be:	f7fc f993 	bl	80008e8 <lcd_wr_xdata>
 80045c2:	23f3      	movs	r3, #243	@ 0xf3
 80045c4:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80045c8:	4b7f      	ldr	r3, [pc, #508]	@ (80047c8 <lcd_init+0x2c68>)
 80045ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045ce:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80045d0:	4b7d      	ldr	r3, [pc, #500]	@ (80047c8 <lcd_init+0x2c68>)
 80045d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045d6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80045d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80045dc:	b29a      	uxth	r2, r3
 80045de:	4b7b      	ldr	r3, [pc, #492]	@ (80047cc <lcd_init+0x2c6c>)
 80045e0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80045e2:	4b79      	ldr	r3, [pc, #484]	@ (80047c8 <lcd_init+0x2c68>)
 80045e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80045e8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80045ea:	4b77      	ldr	r3, [pc, #476]	@ (80047c8 <lcd_init+0x2c68>)
 80045ec:	2280      	movs	r2, #128	@ 0x80
 80045ee:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80045f0:	4b75      	ldr	r3, [pc, #468]	@ (80047c8 <lcd_init+0x2c68>)
 80045f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045f6:	611a      	str	r2, [r3, #16]
}
 80045f8:	bf00      	nop

        lcd_wr_regno(0xF3);
        lcd_wr_xdata(0x00);
 80045fa:	2000      	movs	r0, #0
 80045fc:	f7fc f974 	bl	80008e8 <lcd_wr_xdata>
 8004600:	23f9      	movs	r3, #249	@ 0xf9
 8004602:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004606:	4b70      	ldr	r3, [pc, #448]	@ (80047c8 <lcd_init+0x2c68>)
 8004608:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800460c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800460e:	4b6e      	ldr	r3, [pc, #440]	@ (80047c8 <lcd_init+0x2c68>)
 8004610:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004614:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004616:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800461a:	b29a      	uxth	r2, r3
 800461c:	4b6b      	ldr	r3, [pc, #428]	@ (80047cc <lcd_init+0x2c6c>)
 800461e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004620:	4b69      	ldr	r3, [pc, #420]	@ (80047c8 <lcd_init+0x2c68>)
 8004622:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004626:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004628:	4b67      	ldr	r3, [pc, #412]	@ (80047c8 <lcd_init+0x2c68>)
 800462a:	2280      	movs	r2, #128	@ 0x80
 800462c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800462e:	4b66      	ldr	r3, [pc, #408]	@ (80047c8 <lcd_init+0x2c68>)
 8004630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004634:	611a      	str	r2, [r3, #16]
}
 8004636:	bf00      	nop

        lcd_wr_regno(0xF9);
        lcd_wr_xdata(0x06);
 8004638:	2006      	movs	r0, #6
 800463a:	f7fc f955 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 800463e:	2010      	movs	r0, #16
 8004640:	f7fc f952 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004644:	2029      	movs	r0, #41	@ 0x29
 8004646:	f7fc f94f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800464a:	2000      	movs	r0, #0
 800464c:	f7fc f94c 	bl	80008e8 <lcd_wr_xdata>
 8004650:	233a      	movs	r3, #58	@ 0x3a
 8004652:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004656:	4b5c      	ldr	r3, [pc, #368]	@ (80047c8 <lcd_init+0x2c68>)
 8004658:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800465c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800465e:	4b5a      	ldr	r3, [pc, #360]	@ (80047c8 <lcd_init+0x2c68>)
 8004660:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004664:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004666:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800466a:	b29a      	uxth	r2, r3
 800466c:	4b57      	ldr	r3, [pc, #348]	@ (80047cc <lcd_init+0x2c6c>)
 800466e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004670:	4b55      	ldr	r3, [pc, #340]	@ (80047c8 <lcd_init+0x2c68>)
 8004672:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004676:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004678:	4b53      	ldr	r3, [pc, #332]	@ (80047c8 <lcd_init+0x2c68>)
 800467a:	2280      	movs	r2, #128	@ 0x80
 800467c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800467e:	4b52      	ldr	r3, [pc, #328]	@ (80047c8 <lcd_init+0x2c68>)
 8004680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004684:	611a      	str	r2, [r3, #16]
}
 8004686:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);  /* 66 */
 8004688:	2055      	movs	r0, #85	@ 0x55
 800468a:	f7fc f92d 	bl	80008e8 <lcd_wr_xdata>
 800468e:	2311      	movs	r3, #17
 8004690:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004694:	4b4c      	ldr	r3, [pc, #304]	@ (80047c8 <lcd_init+0x2c68>)
 8004696:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800469a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800469c:	4b4a      	ldr	r3, [pc, #296]	@ (80047c8 <lcd_init+0x2c68>)
 800469e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046a2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80046a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	4b48      	ldr	r3, [pc, #288]	@ (80047cc <lcd_init+0x2c6c>)
 80046ac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80046ae:	4b46      	ldr	r3, [pc, #280]	@ (80047c8 <lcd_init+0x2c68>)
 80046b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80046b4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80046b6:	4b44      	ldr	r3, [pc, #272]	@ (80047c8 <lcd_init+0x2c68>)
 80046b8:	2280      	movs	r2, #128	@ 0x80
 80046ba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80046bc:	4b42      	ldr	r3, [pc, #264]	@ (80047c8 <lcd_init+0x2c68>)
 80046be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046c2:	611a      	str	r2, [r3, #16]
}
 80046c4:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(100);
 80046c6:	2064      	movs	r0, #100	@ 0x64
 80046c8:	f002 fdba 	bl	8007240 <HAL_Delay>
 80046cc:	2329      	movs	r3, #41	@ 0x29
 80046ce:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80046d2:	4b3d      	ldr	r3, [pc, #244]	@ (80047c8 <lcd_init+0x2c68>)
 80046d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046d8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046da:	4b3b      	ldr	r3, [pc, #236]	@ (80047c8 <lcd_init+0x2c68>)
 80046dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046e0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80046e2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	4b38      	ldr	r3, [pc, #224]	@ (80047cc <lcd_init+0x2c6c>)
 80046ea:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80046ec:	4b36      	ldr	r3, [pc, #216]	@ (80047c8 <lcd_init+0x2c68>)
 80046ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80046f2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80046f4:	4b34      	ldr	r3, [pc, #208]	@ (80047c8 <lcd_init+0x2c68>)
 80046f6:	2280      	movs	r2, #128	@ 0x80
 80046f8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80046fa:	4b33      	ldr	r3, [pc, #204]	@ (80047c8 <lcd_init+0x2c68>)
 80046fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004700:	611a      	str	r2, [r3, #16]
}
 8004702:	bf00      	nop
 8004704:	2335      	movs	r3, #53	@ 0x35
 8004706:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800470a:	4b2f      	ldr	r3, [pc, #188]	@ (80047c8 <lcd_init+0x2c68>)
 800470c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004710:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004712:	4b2d      	ldr	r3, [pc, #180]	@ (80047c8 <lcd_init+0x2c68>)
 8004714:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004718:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800471a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800471e:	b29a      	uxth	r2, r3
 8004720:	4b2a      	ldr	r3, [pc, #168]	@ (80047cc <lcd_init+0x2c6c>)
 8004722:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004724:	4b28      	ldr	r3, [pc, #160]	@ (80047c8 <lcd_init+0x2c68>)
 8004726:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800472a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800472c:	4b26      	ldr	r3, [pc, #152]	@ (80047c8 <lcd_init+0x2c68>)
 800472e:	2280      	movs	r2, #128	@ 0x80
 8004730:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004732:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <lcd_init+0x2c68>)
 8004734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004738:	611a      	str	r2, [r3, #16]
}
 800473a:	bf00      	nop
        lcd_wr_regno(0x29);
        lcd_wr_regno(0x35);
        lcd_wr_xdata(0x00);
 800473c:	2000      	movs	r0, #0
 800473e:	f7fc f8d3 	bl	80008e8 <lcd_wr_xdata>
 8004742:	2351      	movs	r3, #81	@ 0x51
 8004744:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004748:	4b1f      	ldr	r3, [pc, #124]	@ (80047c8 <lcd_init+0x2c68>)
 800474a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800474e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004750:	4b1d      	ldr	r3, [pc, #116]	@ (80047c8 <lcd_init+0x2c68>)
 8004752:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004756:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004758:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800475c:	b29a      	uxth	r2, r3
 800475e:	4b1b      	ldr	r3, [pc, #108]	@ (80047cc <lcd_init+0x2c6c>)
 8004760:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004762:	4b19      	ldr	r3, [pc, #100]	@ (80047c8 <lcd_init+0x2c68>)
 8004764:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004768:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800476a:	4b17      	ldr	r3, [pc, #92]	@ (80047c8 <lcd_init+0x2c68>)
 800476c:	2280      	movs	r2, #128	@ 0x80
 800476e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004770:	4b15      	ldr	r3, [pc, #84]	@ (80047c8 <lcd_init+0x2c68>)
 8004772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004776:	611a      	str	r2, [r3, #16]
}
 8004778:	bf00      	nop

        lcd_wr_regno(0x51);
        lcd_wr_xdata(0xFF);
 800477a:	20ff      	movs	r0, #255	@ 0xff
 800477c:	f7fc f8b4 	bl	80008e8 <lcd_wr_xdata>
 8004780:	2353      	movs	r3, #83	@ 0x53
 8004782:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004786:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <lcd_init+0x2c68>)
 8004788:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800478c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800478e:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <lcd_init+0x2c68>)
 8004790:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004794:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004796:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800479a:	b29a      	uxth	r2, r3
 800479c:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <lcd_init+0x2c6c>)
 800479e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80047a0:	4b09      	ldr	r3, [pc, #36]	@ (80047c8 <lcd_init+0x2c68>)
 80047a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80047a6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80047a8:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <lcd_init+0x2c68>)
 80047aa:	2280      	movs	r2, #128	@ 0x80
 80047ac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80047ae:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <lcd_init+0x2c68>)
 80047b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047b4:	611a      	str	r2, [r3, #16]
}
 80047b6:	bf00      	nop
        lcd_wr_regno(0x53);
        lcd_wr_xdata(0x2C);
 80047b8:	202c      	movs	r0, #44	@ 0x2c
 80047ba:	f7fc f895 	bl	80008e8 <lcd_wr_xdata>
 80047be:	2355      	movs	r3, #85	@ 0x55
 80047c0:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 80047c4:	e004      	b.n	80047d0 <lcd_init+0x2c70>
 80047c6:	bf00      	nop
 80047c8:	40011000 	.word	0x40011000
 80047cc:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80047d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004844 <lcd_init+0x2ce4>)
 80047d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047d6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80047d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004844 <lcd_init+0x2ce4>)
 80047da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047de:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80047e0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	4b18      	ldr	r3, [pc, #96]	@ (8004848 <lcd_init+0x2ce8>)
 80047e8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80047ea:	4b16      	ldr	r3, [pc, #88]	@ (8004844 <lcd_init+0x2ce4>)
 80047ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80047f0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80047f2:	4b14      	ldr	r3, [pc, #80]	@ (8004844 <lcd_init+0x2ce4>)
 80047f4:	2280      	movs	r2, #128	@ 0x80
 80047f6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80047f8:	4b12      	ldr	r3, [pc, #72]	@ (8004844 <lcd_init+0x2ce4>)
 80047fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047fe:	611a      	str	r2, [r3, #16]
}
 8004800:	bf00      	nop
        lcd_wr_regno(0x55);
        lcd_wr_xdata(0x82);
 8004802:	2082      	movs	r0, #130	@ 0x82
 8004804:	f7fc f870 	bl	80008e8 <lcd_wr_xdata>
 8004808:	232c      	movs	r3, #44	@ 0x2c
 800480a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800480e:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <lcd_init+0x2ce4>)
 8004810:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004814:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004816:	4b0b      	ldr	r3, [pc, #44]	@ (8004844 <lcd_init+0x2ce4>)
 8004818:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800481c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800481e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8004822:	b29a      	uxth	r2, r3
 8004824:	4b08      	ldr	r3, [pc, #32]	@ (8004848 <lcd_init+0x2ce8>)
 8004826:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004828:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <lcd_init+0x2ce4>)
 800482a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800482e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004830:	4b04      	ldr	r3, [pc, #16]	@ (8004844 <lcd_init+0x2ce4>)
 8004832:	2280      	movs	r2, #128	@ 0x80
 8004834:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004836:	4b03      	ldr	r3, [pc, #12]	@ (8004844 <lcd_init+0x2ce4>)
 8004838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800483c:	611a      	str	r2, [r3, #16]
}
 800483e:	f002 b8d8 	b.w	80069f2 <lcd_init+0x4e92>
 8004842:	bf00      	nop
 8004844:	40011000 	.word	0x40011000
 8004848:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2c);
    }
    else if (lcddev.id == 0x7796)
 800484c:	4bb4      	ldr	r3, [pc, #720]	@ (8004b20 <lcd_init+0x2fc0>)
 800484e:	889b      	ldrh	r3, [r3, #4]
 8004850:	f247 7296 	movw	r2, #30614	@ 0x7796
 8004854:	4293      	cmp	r3, r2
 8004856:	f040 82e3 	bne.w	8004e20 <lcd_init+0x32c0>
 800485a:	2311      	movs	r3, #17
 800485c:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004860:	4bb0      	ldr	r3, [pc, #704]	@ (8004b24 <lcd_init+0x2fc4>)
 8004862:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004866:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004868:	4bae      	ldr	r3, [pc, #696]	@ (8004b24 <lcd_init+0x2fc4>)
 800486a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800486e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004870:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8004874:	b29a      	uxth	r2, r3
 8004876:	4bac      	ldr	r3, [pc, #688]	@ (8004b28 <lcd_init+0x2fc8>)
 8004878:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800487a:	4baa      	ldr	r3, [pc, #680]	@ (8004b24 <lcd_init+0x2fc4>)
 800487c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004880:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004882:	4ba8      	ldr	r3, [pc, #672]	@ (8004b24 <lcd_init+0x2fc4>)
 8004884:	2280      	movs	r2, #128	@ 0x80
 8004886:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004888:	4ba6      	ldr	r3, [pc, #664]	@ (8004b24 <lcd_init+0x2fc4>)
 800488a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800488e:	611a      	str	r2, [r3, #16]
}
 8004890:	bf00      	nop
    {
       // lcd_ex_st7796_reginit();    /* ִ��ST7796��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 8004892:	2078      	movs	r0, #120	@ 0x78
 8004894:	f002 fcd4 	bl	8007240 <HAL_Delay>
 8004898:	2336      	movs	r3, #54	@ 0x36
 800489a:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800489e:	4ba1      	ldr	r3, [pc, #644]	@ (8004b24 <lcd_init+0x2fc4>)
 80048a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048a4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80048a6:	4b9f      	ldr	r3, [pc, #636]	@ (8004b24 <lcd_init+0x2fc4>)
 80048a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048ac:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80048ae:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	4b9c      	ldr	r3, [pc, #624]	@ (8004b28 <lcd_init+0x2fc8>)
 80048b6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80048b8:	4b9a      	ldr	r3, [pc, #616]	@ (8004b24 <lcd_init+0x2fc4>)
 80048ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048be:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80048c0:	4b98      	ldr	r3, [pc, #608]	@ (8004b24 <lcd_init+0x2fc4>)
 80048c2:	2280      	movs	r2, #128	@ 0x80
 80048c4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80048c6:	4b97      	ldr	r3, [pc, #604]	@ (8004b24 <lcd_init+0x2fc4>)
 80048c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048cc:	611a      	str	r2, [r3, #16]
}
 80048ce:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
        lcd_wr_xdata(0x48);
 80048d0:	2048      	movs	r0, #72	@ 0x48
 80048d2:	f7fc f809 	bl	80008e8 <lcd_wr_xdata>
 80048d6:	233a      	movs	r3, #58	@ 0x3a
 80048d8:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80048dc:	4b91      	ldr	r3, [pc, #580]	@ (8004b24 <lcd_init+0x2fc4>)
 80048de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048e2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80048e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004b24 <lcd_init+0x2fc4>)
 80048e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048ea:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80048ec:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004b28 <lcd_init+0x2fc8>)
 80048f4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80048f6:	4b8b      	ldr	r3, [pc, #556]	@ (8004b24 <lcd_init+0x2fc4>)
 80048f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048fc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80048fe:	4b89      	ldr	r3, [pc, #548]	@ (8004b24 <lcd_init+0x2fc4>)
 8004900:	2280      	movs	r2, #128	@ 0x80
 8004902:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004904:	4b87      	ldr	r3, [pc, #540]	@ (8004b24 <lcd_init+0x2fc4>)
 8004906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800490a:	611a      	str	r2, [r3, #16]
}
 800490c:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 800490e:	2055      	movs	r0, #85	@ 0x55
 8004910:	f7fb ffea 	bl	80008e8 <lcd_wr_xdata>
 8004914:	23f0      	movs	r3, #240	@ 0xf0
 8004916:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800491a:	4b82      	ldr	r3, [pc, #520]	@ (8004b24 <lcd_init+0x2fc4>)
 800491c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004920:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004922:	4b80      	ldr	r3, [pc, #512]	@ (8004b24 <lcd_init+0x2fc4>)
 8004924:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004928:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800492a:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800492e:	b29a      	uxth	r2, r3
 8004930:	4b7d      	ldr	r3, [pc, #500]	@ (8004b28 <lcd_init+0x2fc8>)
 8004932:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004934:	4b7b      	ldr	r3, [pc, #492]	@ (8004b24 <lcd_init+0x2fc4>)
 8004936:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800493a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800493c:	4b79      	ldr	r3, [pc, #484]	@ (8004b24 <lcd_init+0x2fc4>)
 800493e:	2280      	movs	r2, #128	@ 0x80
 8004940:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004942:	4b78      	ldr	r3, [pc, #480]	@ (8004b24 <lcd_init+0x2fc4>)
 8004944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004948:	611a      	str	r2, [r3, #16]
}
 800494a:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0xC3);
 800494c:	20c3      	movs	r0, #195	@ 0xc3
 800494e:	f7fb ffcb 	bl	80008e8 <lcd_wr_xdata>
 8004952:	23f0      	movs	r3, #240	@ 0xf0
 8004954:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004958:	4b72      	ldr	r3, [pc, #456]	@ (8004b24 <lcd_init+0x2fc4>)
 800495a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800495e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004960:	4b70      	ldr	r3, [pc, #448]	@ (8004b24 <lcd_init+0x2fc4>)
 8004962:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004966:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004968:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 800496c:	b29a      	uxth	r2, r3
 800496e:	4b6e      	ldr	r3, [pc, #440]	@ (8004b28 <lcd_init+0x2fc8>)
 8004970:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004972:	4b6c      	ldr	r3, [pc, #432]	@ (8004b24 <lcd_init+0x2fc4>)
 8004974:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004978:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800497a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b24 <lcd_init+0x2fc4>)
 800497c:	2280      	movs	r2, #128	@ 0x80
 800497e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004980:	4b68      	ldr	r3, [pc, #416]	@ (8004b24 <lcd_init+0x2fc4>)
 8004982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004986:	611a      	str	r2, [r3, #16]
}
 8004988:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x96);
 800498a:	2096      	movs	r0, #150	@ 0x96
 800498c:	f7fb ffac 	bl	80008e8 <lcd_wr_xdata>
 8004990:	23b4      	movs	r3, #180	@ 0xb4
 8004992:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004996:	4b63      	ldr	r3, [pc, #396]	@ (8004b24 <lcd_init+0x2fc4>)
 8004998:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800499c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800499e:	4b61      	ldr	r3, [pc, #388]	@ (8004b24 <lcd_init+0x2fc4>)
 80049a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80049a6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004b28 <lcd_init+0x2fc8>)
 80049ae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80049b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004b24 <lcd_init+0x2fc4>)
 80049b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80049b6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80049b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004b24 <lcd_init+0x2fc4>)
 80049ba:	2280      	movs	r2, #128	@ 0x80
 80049bc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80049be:	4b59      	ldr	r3, [pc, #356]	@ (8004b24 <lcd_init+0x2fc4>)
 80049c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049c4:	611a      	str	r2, [r3, #16]
}
 80049c6:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x01);
 80049c8:	2001      	movs	r0, #1
 80049ca:	f7fb ff8d 	bl	80008e8 <lcd_wr_xdata>
 80049ce:	23b6      	movs	r3, #182	@ 0xb6
 80049d0:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80049d4:	4b53      	ldr	r3, [pc, #332]	@ (8004b24 <lcd_init+0x2fc4>)
 80049d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049da:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80049dc:	4b51      	ldr	r3, [pc, #324]	@ (8004b24 <lcd_init+0x2fc4>)
 80049de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049e2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80049e4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004b28 <lcd_init+0x2fc8>)
 80049ec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80049ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004b24 <lcd_init+0x2fc4>)
 80049f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80049f4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80049f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004b24 <lcd_init+0x2fc4>)
 80049f8:	2280      	movs	r2, #128	@ 0x80
 80049fa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80049fc:	4b49      	ldr	r3, [pc, #292]	@ (8004b24 <lcd_init+0x2fc4>)
 80049fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a02:	611a      	str	r2, [r3, #16]
}
 8004a04:	bf00      	nop

        lcd_wr_regno(0xB6); /* Display Function Control */
        lcd_wr_xdata(0x0A);
 8004a06:	200a      	movs	r0, #10
 8004a08:	f7fb ff6e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004a0c:	20a2      	movs	r0, #162	@ 0xa2
 8004a0e:	f7fb ff6b 	bl	80008e8 <lcd_wr_xdata>
 8004a12:	23b7      	movs	r3, #183	@ 0xb7
 8004a14:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a18:	4b42      	ldr	r3, [pc, #264]	@ (8004b24 <lcd_init+0x2fc4>)
 8004a1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a1e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a20:	4b40      	ldr	r3, [pc, #256]	@ (8004b24 <lcd_init+0x2fc4>)
 8004a22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a26:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a28:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b28 <lcd_init+0x2fc8>)
 8004a30:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a32:	4b3c      	ldr	r3, [pc, #240]	@ (8004b24 <lcd_init+0x2fc4>)
 8004a34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a38:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b24 <lcd_init+0x2fc4>)
 8004a3c:	2280      	movs	r2, #128	@ 0x80
 8004a3e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a40:	4b38      	ldr	r3, [pc, #224]	@ (8004b24 <lcd_init+0x2fc4>)
 8004a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a46:	611a      	str	r2, [r3, #16]
}
 8004a48:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0xC6);
 8004a4a:	20c6      	movs	r0, #198	@ 0xc6
 8004a4c:	f7fb ff4c 	bl	80008e8 <lcd_wr_xdata>
 8004a50:	23b9      	movs	r3, #185	@ 0xb9
 8004a52:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a56:	4b33      	ldr	r3, [pc, #204]	@ (8004b24 <lcd_init+0x2fc4>)
 8004a58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a5c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a5e:	4b31      	ldr	r3, [pc, #196]	@ (8004b24 <lcd_init+0x2fc4>)
 8004a60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a64:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a66:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b28 <lcd_init+0x2fc8>)
 8004a6e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a70:	4b2c      	ldr	r3, [pc, #176]	@ (8004b24 <lcd_init+0x2fc4>)
 8004a72:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a76:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a78:	4b2a      	ldr	r3, [pc, #168]	@ (8004b24 <lcd_init+0x2fc4>)
 8004a7a:	2280      	movs	r2, #128	@ 0x80
 8004a7c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a7e:	4b29      	ldr	r3, [pc, #164]	@ (8004b24 <lcd_init+0x2fc4>)
 8004a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a84:	611a      	str	r2, [r3, #16]
}
 8004a86:	bf00      	nop

        lcd_wr_regno(0xB9);
        lcd_wr_xdata(0x02);
 8004a88:	2002      	movs	r0, #2
 8004a8a:	f7fb ff2d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8004a8e:	20e0      	movs	r0, #224	@ 0xe0
 8004a90:	f7fb ff2a 	bl	80008e8 <lcd_wr_xdata>
 8004a94:	23c0      	movs	r3, #192	@ 0xc0
 8004a96:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a9a:	4b22      	ldr	r3, [pc, #136]	@ (8004b24 <lcd_init+0x2fc4>)
 8004a9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004aa0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004aa2:	4b20      	ldr	r3, [pc, #128]	@ (8004b24 <lcd_init+0x2fc4>)
 8004aa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aa8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004aaa:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b28 <lcd_init+0x2fc8>)
 8004ab2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b24 <lcd_init+0x2fc4>)
 8004ab6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004aba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004abc:	4b19      	ldr	r3, [pc, #100]	@ (8004b24 <lcd_init+0x2fc4>)
 8004abe:	2280      	movs	r2, #128	@ 0x80
 8004ac0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004ac2:	4b18      	ldr	r3, [pc, #96]	@ (8004b24 <lcd_init+0x2fc4>)
 8004ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ac8:	611a      	str	r2, [r3, #16]
}
 8004aca:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x80);
 8004acc:	2080      	movs	r0, #128	@ 0x80
 8004ace:	f7fb ff0b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x16);
 8004ad2:	2016      	movs	r0, #22
 8004ad4:	f7fb ff08 	bl	80008e8 <lcd_wr_xdata>
 8004ad8:	23c1      	movs	r3, #193	@ 0xc1
 8004ada:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004ade:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <lcd_init+0x2fc4>)
 8004ae0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ae4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8004b24 <lcd_init+0x2fc4>)
 8004ae8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004aee:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b28 <lcd_init+0x2fc8>)
 8004af6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004af8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <lcd_init+0x2fc4>)
 8004afa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004afe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b00:	4b08      	ldr	r3, [pc, #32]	@ (8004b24 <lcd_init+0x2fc4>)
 8004b02:	2280      	movs	r2, #128	@ 0x80
 8004b04:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b06:	4b07      	ldr	r3, [pc, #28]	@ (8004b24 <lcd_init+0x2fc4>)
 8004b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b0c:	611a      	str	r2, [r3, #16]
}
 8004b0e:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x19);
 8004b10:	2019      	movs	r0, #25
 8004b12:	f7fb fee9 	bl	80008e8 <lcd_wr_xdata>
 8004b16:	23c2      	movs	r3, #194	@ 0xc2
 8004b18:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
 8004b1c:	e006      	b.n	8004b2c <lcd_init+0x2fcc>
 8004b1e:	bf00      	nop
 8004b20:	2000002c 	.word	0x2000002c
 8004b24:	40011000 	.word	0x40011000
 8004b28:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b2c:	4bba      	ldr	r3, [pc, #744]	@ (8004e18 <lcd_init+0x32b8>)
 8004b2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b32:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b34:	4bb8      	ldr	r3, [pc, #736]	@ (8004e18 <lcd_init+0x32b8>)
 8004b36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b3a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b3c:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	4bb6      	ldr	r3, [pc, #728]	@ (8004e1c <lcd_init+0x32bc>)
 8004b44:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b46:	4bb4      	ldr	r3, [pc, #720]	@ (8004e18 <lcd_init+0x32b8>)
 8004b48:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b4c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b4e:	4bb2      	ldr	r3, [pc, #712]	@ (8004e18 <lcd_init+0x32b8>)
 8004b50:	2280      	movs	r2, #128	@ 0x80
 8004b52:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b54:	4bb0      	ldr	r3, [pc, #704]	@ (8004e18 <lcd_init+0x32b8>)
 8004b56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b5a:	611a      	str	r2, [r3, #16]
}
 8004b5c:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0xA7);
 8004b5e:	20a7      	movs	r0, #167	@ 0xa7
 8004b60:	f7fb fec2 	bl	80008e8 <lcd_wr_xdata>
 8004b64:	23c5      	movs	r3, #197	@ 0xc5
 8004b66:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b6a:	4bab      	ldr	r3, [pc, #684]	@ (8004e18 <lcd_init+0x32b8>)
 8004b6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b70:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b72:	4ba9      	ldr	r3, [pc, #676]	@ (8004e18 <lcd_init+0x32b8>)
 8004b74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b78:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b7a:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	4ba6      	ldr	r3, [pc, #664]	@ (8004e1c <lcd_init+0x32bc>)
 8004b82:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b84:	4ba4      	ldr	r3, [pc, #656]	@ (8004e18 <lcd_init+0x32b8>)
 8004b86:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b8a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b8c:	4ba2      	ldr	r3, [pc, #648]	@ (8004e18 <lcd_init+0x32b8>)
 8004b8e:	2280      	movs	r2, #128	@ 0x80
 8004b90:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b92:	4ba1      	ldr	r3, [pc, #644]	@ (8004e18 <lcd_init+0x32b8>)
 8004b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b98:	611a      	str	r2, [r3, #16]
}
 8004b9a:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x16);
 8004b9c:	2016      	movs	r0, #22
 8004b9e:	f7fb fea3 	bl	80008e8 <lcd_wr_xdata>
 8004ba2:	23e8      	movs	r3, #232	@ 0xe8
 8004ba4:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004ba8:	4b9b      	ldr	r3, [pc, #620]	@ (8004e18 <lcd_init+0x32b8>)
 8004baa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004bb0:	4b99      	ldr	r3, [pc, #612]	@ (8004e18 <lcd_init+0x32b8>)
 8004bb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bb6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004bb8:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	4b97      	ldr	r3, [pc, #604]	@ (8004e1c <lcd_init+0x32bc>)
 8004bc0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004bc2:	4b95      	ldr	r3, [pc, #596]	@ (8004e18 <lcd_init+0x32b8>)
 8004bc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004bc8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004bca:	4b93      	ldr	r3, [pc, #588]	@ (8004e18 <lcd_init+0x32b8>)
 8004bcc:	2280      	movs	r2, #128	@ 0x80
 8004bce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004bd0:	4b91      	ldr	r3, [pc, #580]	@ (8004e18 <lcd_init+0x32b8>)
 8004bd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bd6:	611a      	str	r2, [r3, #16]
}
 8004bd8:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x40);
 8004bda:	2040      	movs	r0, #64	@ 0x40
 8004bdc:	f7fb fe84 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x8A);
 8004be0:	208a      	movs	r0, #138	@ 0x8a
 8004be2:	f7fb fe81 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004be6:	2000      	movs	r0, #0
 8004be8:	f7fb fe7e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bec:	2000      	movs	r0, #0
 8004bee:	f7fb fe7b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004bf2:	2029      	movs	r0, #41	@ 0x29
 8004bf4:	f7fb fe78 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8004bf8:	2019      	movs	r0, #25
 8004bfa:	f7fb fe75 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xA5);
 8004bfe:	20a5      	movs	r0, #165	@ 0xa5
 8004c00:	f7fb fe72 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8004c04:	2033      	movs	r0, #51	@ 0x33
 8004c06:	f7fb fe6f 	bl	80008e8 <lcd_wr_xdata>
 8004c0a:	23e0      	movs	r3, #224	@ 0xe0
 8004c0c:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c10:	4b81      	ldr	r3, [pc, #516]	@ (8004e18 <lcd_init+0x32b8>)
 8004c12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c16:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c18:	4b7f      	ldr	r3, [pc, #508]	@ (8004e18 <lcd_init+0x32b8>)
 8004c1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c1e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c20:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	4b7d      	ldr	r3, [pc, #500]	@ (8004e1c <lcd_init+0x32bc>)
 8004c28:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e18 <lcd_init+0x32b8>)
 8004c2c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c30:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c32:	4b79      	ldr	r3, [pc, #484]	@ (8004e18 <lcd_init+0x32b8>)
 8004c34:	2280      	movs	r2, #128	@ 0x80
 8004c36:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c38:	4b77      	ldr	r3, [pc, #476]	@ (8004e18 <lcd_init+0x32b8>)
 8004c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c3e:	611a      	str	r2, [r3, #16]
}
 8004c40:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0xF0);
 8004c42:	20f0      	movs	r0, #240	@ 0xf0
 8004c44:	f7fb fe50 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8004c48:	2007      	movs	r0, #7
 8004c4a:	f7fb fe4d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 8004c4e:	200d      	movs	r0, #13
 8004c50:	f7fb fe4a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8004c54:	2004      	movs	r0, #4
 8004c56:	f7fb fe47 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8004c5a:	2005      	movs	r0, #5
 8004c5c:	f7fb fe44 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004c60:	2014      	movs	r0, #20
 8004c62:	f7fb fe41 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004c66:	2036      	movs	r0, #54	@ 0x36
 8004c68:	f7fb fe3e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8004c6c:	2054      	movs	r0, #84	@ 0x54
 8004c6e:	f7fb fe3b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004c72:	204c      	movs	r0, #76	@ 0x4c
 8004c74:	f7fb fe38 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x38);
 8004c78:	2038      	movs	r0, #56	@ 0x38
 8004c7a:	f7fb fe35 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8004c7e:	2013      	movs	r0, #19
 8004c80:	f7fb fe32 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004c84:	2014      	movs	r0, #20
 8004c86:	f7fb fe2f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2E);
 8004c8a:	202e      	movs	r0, #46	@ 0x2e
 8004c8c:	f7fb fe2c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004c90:	2034      	movs	r0, #52	@ 0x34
 8004c92:	f7fb fe29 	bl	80008e8 <lcd_wr_xdata>
 8004c96:	23e1      	movs	r3, #225	@ 0xe1
 8004c98:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c9c:	4b5e      	ldr	r3, [pc, #376]	@ (8004e18 <lcd_init+0x32b8>)
 8004c9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ca2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004ca4:	4b5c      	ldr	r3, [pc, #368]	@ (8004e18 <lcd_init+0x32b8>)
 8004ca6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004caa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004cac:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	4b5a      	ldr	r3, [pc, #360]	@ (8004e1c <lcd_init+0x32bc>)
 8004cb4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004cb6:	4b58      	ldr	r3, [pc, #352]	@ (8004e18 <lcd_init+0x32b8>)
 8004cb8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cbc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004cbe:	4b56      	ldr	r3, [pc, #344]	@ (8004e18 <lcd_init+0x32b8>)
 8004cc0:	2280      	movs	r2, #128	@ 0x80
 8004cc2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004cc4:	4b54      	ldr	r3, [pc, #336]	@ (8004e18 <lcd_init+0x32b8>)
 8004cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cca:	611a      	str	r2, [r3, #16]
}
 8004ccc:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0xF0);
 8004cce:	20f0      	movs	r0, #240	@ 0xf0
 8004cd0:	f7fb fe0a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004cd4:	2010      	movs	r0, #16
 8004cd6:	f7fb fe07 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004cda:	2014      	movs	r0, #20
 8004cdc:	f7fb fe04 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8004ce0:	200e      	movs	r0, #14
 8004ce2:	f7fb fe01 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8004ce6:	200c      	movs	r0, #12
 8004ce8:	f7fb fdfe 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8004cec:	2008      	movs	r0, #8
 8004cee:	f7fb fdfb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x35);
 8004cf2:	2035      	movs	r0, #53	@ 0x35
 8004cf4:	f7fb fdf8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004cf8:	2044      	movs	r0, #68	@ 0x44
 8004cfa:	f7fb fdf5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004cfe:	204c      	movs	r0, #76	@ 0x4c
 8004d00:	f7fb fdf2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8004d04:	2026      	movs	r0, #38	@ 0x26
 8004d06:	f7fb fdef 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004d0a:	2010      	movs	r0, #16
 8004d0c:	f7fb fdec 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8004d10:	2012      	movs	r0, #18
 8004d12:	f7fb fde9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8004d16:	202c      	movs	r0, #44	@ 0x2c
 8004d18:	f7fb fde6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8004d1c:	2032      	movs	r0, #50	@ 0x32
 8004d1e:	f7fb fde3 	bl	80008e8 <lcd_wr_xdata>
 8004d22:	23f0      	movs	r3, #240	@ 0xf0
 8004d24:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d28:	4b3b      	ldr	r3, [pc, #236]	@ (8004e18 <lcd_init+0x32b8>)
 8004d2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d2e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d30:	4b39      	ldr	r3, [pc, #228]	@ (8004e18 <lcd_init+0x32b8>)
 8004d32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d36:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d38:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	4b37      	ldr	r3, [pc, #220]	@ (8004e1c <lcd_init+0x32bc>)
 8004d40:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d42:	4b35      	ldr	r3, [pc, #212]	@ (8004e18 <lcd_init+0x32b8>)
 8004d44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d48:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d4a:	4b33      	ldr	r3, [pc, #204]	@ (8004e18 <lcd_init+0x32b8>)
 8004d4c:	2280      	movs	r2, #128	@ 0x80
 8004d4e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d50:	4b31      	ldr	r3, [pc, #196]	@ (8004e18 <lcd_init+0x32b8>)
 8004d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d56:	611a      	str	r2, [r3, #16]
}
 8004d58:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x3C);
 8004d5a:	203c      	movs	r0, #60	@ 0x3c
 8004d5c:	f7fb fdc4 	bl	80008e8 <lcd_wr_xdata>
 8004d60:	23f0      	movs	r3, #240	@ 0xf0
 8004d62:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d66:	4b2c      	ldr	r3, [pc, #176]	@ (8004e18 <lcd_init+0x32b8>)
 8004d68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d6c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8004e18 <lcd_init+0x32b8>)
 8004d70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d74:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d76:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	4b27      	ldr	r3, [pc, #156]	@ (8004e1c <lcd_init+0x32bc>)
 8004d7e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d80:	4b25      	ldr	r3, [pc, #148]	@ (8004e18 <lcd_init+0x32b8>)
 8004d82:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d86:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d88:	4b23      	ldr	r3, [pc, #140]	@ (8004e18 <lcd_init+0x32b8>)
 8004d8a:	2280      	movs	r2, #128	@ 0x80
 8004d8c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d8e:	4b22      	ldr	r3, [pc, #136]	@ (8004e18 <lcd_init+0x32b8>)
 8004d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d94:	611a      	str	r2, [r3, #16]
}
 8004d96:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x69);
 8004d98:	2069      	movs	r0, #105	@ 0x69
 8004d9a:	f7fb fda5 	bl	80008e8 <lcd_wr_xdata>

        HAL_Delay(120);
 8004d9e:	2078      	movs	r0, #120	@ 0x78
 8004da0:	f002 fa4e 	bl	8007240 <HAL_Delay>
 8004da4:	2321      	movs	r3, #33	@ 0x21
 8004da6:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004daa:	4b1b      	ldr	r3, [pc, #108]	@ (8004e18 <lcd_init+0x32b8>)
 8004dac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004db0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004db2:	4b19      	ldr	r3, [pc, #100]	@ (8004e18 <lcd_init+0x32b8>)
 8004db4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004db8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004dba:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	4b16      	ldr	r3, [pc, #88]	@ (8004e1c <lcd_init+0x32bc>)
 8004dc2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004dc4:	4b14      	ldr	r3, [pc, #80]	@ (8004e18 <lcd_init+0x32b8>)
 8004dc6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004dca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004dcc:	4b12      	ldr	r3, [pc, #72]	@ (8004e18 <lcd_init+0x32b8>)
 8004dce:	2280      	movs	r2, #128	@ 0x80
 8004dd0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004dd2:	4b11      	ldr	r3, [pc, #68]	@ (8004e18 <lcd_init+0x32b8>)
 8004dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dd8:	611a      	str	r2, [r3, #16]
}
 8004dda:	bf00      	nop
 8004ddc:	2329      	movs	r3, #41	@ 0x29
 8004dde:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004de2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e18 <lcd_init+0x32b8>)
 8004de4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004de8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004dea:	4b0b      	ldr	r3, [pc, #44]	@ (8004e18 <lcd_init+0x32b8>)
 8004dec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004df0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004df2:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	4b08      	ldr	r3, [pc, #32]	@ (8004e1c <lcd_init+0x32bc>)
 8004dfa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004dfc:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <lcd_init+0x32b8>)
 8004dfe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e02:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e04:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <lcd_init+0x32b8>)
 8004e06:	2280      	movs	r2, #128	@ 0x80
 8004e08:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e0a:	4b03      	ldr	r3, [pc, #12]	@ (8004e18 <lcd_init+0x32b8>)
 8004e0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e10:	611a      	str	r2, [r3, #16]
}
 8004e12:	f001 bdee 	b.w	80069f2 <lcd_init+0x4e92>
 8004e16:	bf00      	nop
 8004e18:	40011000 	.word	0x40011000
 8004e1c:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x21);
        lcd_wr_regno(0x29);
    }
    else if (lcddev.id == 0x5510)
 8004e20:	4b03      	ldr	r3, [pc, #12]	@ (8004e30 <lcd_init+0x32d0>)
 8004e22:	889b      	ldrh	r3, [r3, #4]
 8004e24:	f245 5210 	movw	r2, #21776	@ 0x5510
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	f040 87b3 	bne.w	8005d94 <lcd_init+0x4234>
 8004e2e:	e001      	b.n	8004e34 <lcd_init+0x32d4>
 8004e30:	2000002c 	.word	0x2000002c
    {
        //lcd_ex_nt35510_reginit();   /* ִ��NT35510��ʼ�� */

        lcd_write_reg(0xF000, 0x55);
 8004e34:	2155      	movs	r1, #85	@ 0x55
 8004e36:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8004e3a:	f7fb fd79 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8004e3e:	21aa      	movs	r1, #170	@ 0xaa
 8004e40:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8004e44:	f7fb fd74 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8004e48:	2152      	movs	r1, #82	@ 0x52
 8004e4a:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8004e4e:	f7fb fd6f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8004e52:	2108      	movs	r1, #8
 8004e54:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8004e58:	f7fb fd6a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x01);
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8004e62:	f7fb fd65 	bl	8000930 <lcd_write_reg>
        /* AVDD Set AVDD 5.2V */
        lcd_write_reg(0xB000, 0x0D);
 8004e66:	210d      	movs	r1, #13
 8004e68:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8004e6c:	f7fb fd60 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB001, 0x0D);
 8004e70:	210d      	movs	r1, #13
 8004e72:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8004e76:	f7fb fd5b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB002, 0x0D);
 8004e7a:	210d      	movs	r1, #13
 8004e7c:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8004e80:	f7fb fd56 	bl	8000930 <lcd_write_reg>
        /* AVDD ratio */
        lcd_write_reg(0xB600, 0x34);
 8004e84:	2134      	movs	r1, #52	@ 0x34
 8004e86:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8004e8a:	f7fb fd51 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB601, 0x34);
 8004e8e:	2134      	movs	r1, #52	@ 0x34
 8004e90:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8004e94:	f7fb fd4c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB602, 0x34);
 8004e98:	2134      	movs	r1, #52	@ 0x34
 8004e9a:	f24b 6002 	movw	r0, #46594	@ 0xb602
 8004e9e:	f7fb fd47 	bl	8000930 <lcd_write_reg>
        /* AVEE -5.2V */
        lcd_write_reg(0xB100, 0x0D);
 8004ea2:	210d      	movs	r1, #13
 8004ea4:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8004ea8:	f7fb fd42 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x0D);
 8004eac:	210d      	movs	r1, #13
 8004eae:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8004eb2:	f7fb fd3d 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB102, 0x0D);
 8004eb6:	210d      	movs	r1, #13
 8004eb8:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8004ebc:	f7fb fd38 	bl	8000930 <lcd_write_reg>
        /* AVEE ratio */
        lcd_write_reg(0xB700, 0x34);
 8004ec0:	2134      	movs	r1, #52	@ 0x34
 8004ec2:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8004ec6:	f7fb fd33 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x34);
 8004eca:	2134      	movs	r1, #52	@ 0x34
 8004ecc:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8004ed0:	f7fb fd2e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB702, 0x34);
 8004ed4:	2134      	movs	r1, #52	@ 0x34
 8004ed6:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8004eda:	f7fb fd29 	bl	8000930 <lcd_write_reg>
        /* VCL -2.5V */
        lcd_write_reg(0xB200, 0x00);
 8004ede:	2100      	movs	r1, #0
 8004ee0:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 8004ee4:	f7fb fd24 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB201, 0x00);
 8004ee8:	2100      	movs	r1, #0
 8004eea:	f24b 2001 	movw	r0, #45569	@ 0xb201
 8004eee:	f7fb fd1f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB202, 0x00);
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	f24b 2002 	movw	r0, #45570	@ 0xb202
 8004ef8:	f7fb fd1a 	bl	8000930 <lcd_write_reg>
        /* VCL ratio */
        lcd_write_reg(0xB800, 0x24);
 8004efc:	2124      	movs	r1, #36	@ 0x24
 8004efe:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8004f02:	f7fb fd15 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x24);
 8004f06:	2124      	movs	r1, #36	@ 0x24
 8004f08:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8004f0c:	f7fb fd10 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x24);
 8004f10:	2124      	movs	r1, #36	@ 0x24
 8004f12:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8004f16:	f7fb fd0b 	bl	8000930 <lcd_write_reg>
        /* VGH 15V (Free pump) */
        lcd_write_reg(0xBF00, 0x01);
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 8004f20:	f7fb fd06 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB300, 0x0F);
 8004f24:	210f      	movs	r1, #15
 8004f26:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8004f2a:	f7fb fd01 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB301, 0x0F);
 8004f2e:	210f      	movs	r1, #15
 8004f30:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8004f34:	f7fb fcfc 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB302, 0x0F);
 8004f38:	210f      	movs	r1, #15
 8004f3a:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8004f3e:	f7fb fcf7 	bl	8000930 <lcd_write_reg>
        /* VGH ratio */
        lcd_write_reg(0xB900, 0x34);
 8004f42:	2134      	movs	r1, #52	@ 0x34
 8004f44:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8004f48:	f7fb fcf2 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB901, 0x34);
 8004f4c:	2134      	movs	r1, #52	@ 0x34
 8004f4e:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8004f52:	f7fb fced 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB902, 0x34);
 8004f56:	2134      	movs	r1, #52	@ 0x34
 8004f58:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8004f5c:	f7fb fce8 	bl	8000930 <lcd_write_reg>
        /* VGL_REG -10V */
        lcd_write_reg(0xB500, 0x08);
 8004f60:	2108      	movs	r1, #8
 8004f62:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8004f66:	f7fb fce3 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB501, 0x08);
 8004f6a:	2108      	movs	r1, #8
 8004f6c:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8004f70:	f7fb fcde 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB502, 0x08);
 8004f74:	2108      	movs	r1, #8
 8004f76:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8004f7a:	f7fb fcd9 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xC200, 0x03);
 8004f7e:	2103      	movs	r1, #3
 8004f80:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 8004f84:	f7fb fcd4 	bl	8000930 <lcd_write_reg>
        /* VGLX ratio */
        lcd_write_reg(0xBA00, 0x24);
 8004f88:	2124      	movs	r1, #36	@ 0x24
 8004f8a:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8004f8e:	f7fb fccf 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xBA01, 0x24);
 8004f92:	2124      	movs	r1, #36	@ 0x24
 8004f94:	f64b 2001 	movw	r0, #47617	@ 0xba01
 8004f98:	f7fb fcca 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xBA02, 0x24);
 8004f9c:	2124      	movs	r1, #36	@ 0x24
 8004f9e:	f64b 2002 	movw	r0, #47618	@ 0xba02
 8004fa2:	f7fb fcc5 	bl	8000930 <lcd_write_reg>
        /* VGMP/VGSP 4.5V/0V */
        lcd_write_reg(0xBC00, 0x00);
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8004fac:	f7fb fcc0 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x78);
 8004fb0:	2178      	movs	r1, #120	@ 0x78
 8004fb2:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8004fb6:	f7fb fcbb 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8004fba:	2100      	movs	r1, #0
 8004fbc:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8004fc0:	f7fb fcb6 	bl	8000930 <lcd_write_reg>
        /* VGMN/VGSN -4.5V/0V */
        lcd_write_reg(0xBD00, 0x00);
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8004fca:	f7fb fcb1 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xBD01, 0x78);
 8004fce:	2178      	movs	r1, #120	@ 0x78
 8004fd0:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 8004fd4:	f7fb fcac 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xBD02, 0x00);
 8004fd8:	2100      	movs	r1, #0
 8004fda:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8004fde:	f7fb fca7 	bl	8000930 <lcd_write_reg>
        /* VCOM */
        lcd_write_reg(0xBE00, 0x00);
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8004fe8:	f7fb fca2 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xBE01, 0x64);
 8004fec:	2164      	movs	r1, #100	@ 0x64
 8004fee:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 8004ff2:	f7fb fc9d 	bl	8000930 <lcd_write_reg>
        /* Gamma Setting */
        lcd_write_reg(0xD100, 0x00);
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8004ffc:	f7fb fc98 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD101, 0x33);
 8005000:	2133      	movs	r1, #51	@ 0x33
 8005002:	f24d 1001 	movw	r0, #53505	@ 0xd101
 8005006:	f7fb fc93 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD102, 0x00);
 800500a:	2100      	movs	r1, #0
 800500c:	f24d 1002 	movw	r0, #53506	@ 0xd102
 8005010:	f7fb fc8e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD103, 0x34);
 8005014:	2134      	movs	r1, #52	@ 0x34
 8005016:	f24d 1003 	movw	r0, #53507	@ 0xd103
 800501a:	f7fb fc89 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD104, 0x00);
 800501e:	2100      	movs	r1, #0
 8005020:	f24d 1004 	movw	r0, #53508	@ 0xd104
 8005024:	f7fb fc84 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD105, 0x3A);
 8005028:	213a      	movs	r1, #58	@ 0x3a
 800502a:	f24d 1005 	movw	r0, #53509	@ 0xd105
 800502e:	f7fb fc7f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD106, 0x00);
 8005032:	2100      	movs	r1, #0
 8005034:	f24d 1006 	movw	r0, #53510	@ 0xd106
 8005038:	f7fb fc7a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD107, 0x4A);
 800503c:	214a      	movs	r1, #74	@ 0x4a
 800503e:	f24d 1007 	movw	r0, #53511	@ 0xd107
 8005042:	f7fb fc75 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD108, 0x00);
 8005046:	2100      	movs	r1, #0
 8005048:	f24d 1008 	movw	r0, #53512	@ 0xd108
 800504c:	f7fb fc70 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD109, 0x5C);
 8005050:	215c      	movs	r1, #92	@ 0x5c
 8005052:	f24d 1009 	movw	r0, #53513	@ 0xd109
 8005056:	f7fb fc6b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD10A, 0x00);
 800505a:	2100      	movs	r1, #0
 800505c:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8005060:	f7fb fc66 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD10B, 0x81);
 8005064:	2181      	movs	r1, #129	@ 0x81
 8005066:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 800506a:	f7fb fc61 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD10C, 0x00);
 800506e:	2100      	movs	r1, #0
 8005070:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 8005074:	f7fb fc5c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD10D, 0xA6);
 8005078:	21a6      	movs	r1, #166	@ 0xa6
 800507a:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 800507e:	f7fb fc57 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD10E, 0x00);
 8005082:	2100      	movs	r1, #0
 8005084:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8005088:	f7fb fc52 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD10F, 0xE5);
 800508c:	21e5      	movs	r1, #229	@ 0xe5
 800508e:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 8005092:	f7fb fc4d 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD110, 0x01);
 8005096:	2101      	movs	r1, #1
 8005098:	f24d 1010 	movw	r0, #53520	@ 0xd110
 800509c:	f7fb fc48 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD111, 0x13);
 80050a0:	2113      	movs	r1, #19
 80050a2:	f24d 1011 	movw	r0, #53521	@ 0xd111
 80050a6:	f7fb fc43 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD112, 0x01);
 80050aa:	2101      	movs	r1, #1
 80050ac:	f24d 1012 	movw	r0, #53522	@ 0xd112
 80050b0:	f7fb fc3e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD113, 0x54);
 80050b4:	2154      	movs	r1, #84	@ 0x54
 80050b6:	f24d 1013 	movw	r0, #53523	@ 0xd113
 80050ba:	f7fb fc39 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD114, 0x01);
 80050be:	2101      	movs	r1, #1
 80050c0:	f24d 1014 	movw	r0, #53524	@ 0xd114
 80050c4:	f7fb fc34 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD115, 0x82);
 80050c8:	2182      	movs	r1, #130	@ 0x82
 80050ca:	f24d 1015 	movw	r0, #53525	@ 0xd115
 80050ce:	f7fb fc2f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD116, 0x01);
 80050d2:	2101      	movs	r1, #1
 80050d4:	f24d 1016 	movw	r0, #53526	@ 0xd116
 80050d8:	f7fb fc2a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD117, 0xCA);
 80050dc:	21ca      	movs	r1, #202	@ 0xca
 80050de:	f24d 1017 	movw	r0, #53527	@ 0xd117
 80050e2:	f7fb fc25 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD118, 0x02);
 80050e6:	2102      	movs	r1, #2
 80050e8:	f24d 1018 	movw	r0, #53528	@ 0xd118
 80050ec:	f7fb fc20 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD119, 0x00);
 80050f0:	2100      	movs	r1, #0
 80050f2:	f24d 1019 	movw	r0, #53529	@ 0xd119
 80050f6:	f7fb fc1b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD11A, 0x02);
 80050fa:	2102      	movs	r1, #2
 80050fc:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 8005100:	f7fb fc16 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD11B, 0x01);
 8005104:	2101      	movs	r1, #1
 8005106:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 800510a:	f7fb fc11 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD11C, 0x02);
 800510e:	2102      	movs	r1, #2
 8005110:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 8005114:	f7fb fc0c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD11D, 0x34);
 8005118:	2134      	movs	r1, #52	@ 0x34
 800511a:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 800511e:	f7fb fc07 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD11E, 0x02);
 8005122:	2102      	movs	r1, #2
 8005124:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8005128:	f7fb fc02 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD11F, 0x67);
 800512c:	2167      	movs	r1, #103	@ 0x67
 800512e:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 8005132:	f7fb fbfd 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD120, 0x02);
 8005136:	2102      	movs	r1, #2
 8005138:	f24d 1020 	movw	r0, #53536	@ 0xd120
 800513c:	f7fb fbf8 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD121, 0x84);
 8005140:	2184      	movs	r1, #132	@ 0x84
 8005142:	f24d 1021 	movw	r0, #53537	@ 0xd121
 8005146:	f7fb fbf3 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD122, 0x02);
 800514a:	2102      	movs	r1, #2
 800514c:	f24d 1022 	movw	r0, #53538	@ 0xd122
 8005150:	f7fb fbee 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD123, 0xA4);
 8005154:	21a4      	movs	r1, #164	@ 0xa4
 8005156:	f24d 1023 	movw	r0, #53539	@ 0xd123
 800515a:	f7fb fbe9 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD124, 0x02);
 800515e:	2102      	movs	r1, #2
 8005160:	f24d 1024 	movw	r0, #53540	@ 0xd124
 8005164:	f7fb fbe4 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD125, 0xB7);
 8005168:	21b7      	movs	r1, #183	@ 0xb7
 800516a:	f24d 1025 	movw	r0, #53541	@ 0xd125
 800516e:	f7fb fbdf 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD126, 0x02);
 8005172:	2102      	movs	r1, #2
 8005174:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8005178:	f7fb fbda 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD127, 0xCF);
 800517c:	21cf      	movs	r1, #207	@ 0xcf
 800517e:	f24d 1027 	movw	r0, #53543	@ 0xd127
 8005182:	f7fb fbd5 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD128, 0x02);
 8005186:	2102      	movs	r1, #2
 8005188:	f24d 1028 	movw	r0, #53544	@ 0xd128
 800518c:	f7fb fbd0 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD129, 0xDE);
 8005190:	21de      	movs	r1, #222	@ 0xde
 8005192:	f24d 1029 	movw	r0, #53545	@ 0xd129
 8005196:	f7fb fbcb 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD12A, 0x02);
 800519a:	2102      	movs	r1, #2
 800519c:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 80051a0:	f7fb fbc6 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD12B, 0xF2);
 80051a4:	21f2      	movs	r1, #242	@ 0xf2
 80051a6:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 80051aa:	f7fb fbc1 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD12C, 0x02);
 80051ae:	2102      	movs	r1, #2
 80051b0:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 80051b4:	f7fb fbbc 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD12D, 0xFE);
 80051b8:	21fe      	movs	r1, #254	@ 0xfe
 80051ba:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 80051be:	f7fb fbb7 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD12E, 0x03);
 80051c2:	2103      	movs	r1, #3
 80051c4:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 80051c8:	f7fb fbb2 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD12F, 0x10);
 80051cc:	2110      	movs	r1, #16
 80051ce:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 80051d2:	f7fb fbad 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD130, 0x03);
 80051d6:	2103      	movs	r1, #3
 80051d8:	f24d 1030 	movw	r0, #53552	@ 0xd130
 80051dc:	f7fb fba8 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD131, 0x33);
 80051e0:	2133      	movs	r1, #51	@ 0x33
 80051e2:	f24d 1031 	movw	r0, #53553	@ 0xd131
 80051e6:	f7fb fba3 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD132, 0x03);
 80051ea:	2103      	movs	r1, #3
 80051ec:	f24d 1032 	movw	r0, #53554	@ 0xd132
 80051f0:	f7fb fb9e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD133, 0x6D);
 80051f4:	216d      	movs	r1, #109	@ 0x6d
 80051f6:	f24d 1033 	movw	r0, #53555	@ 0xd133
 80051fa:	f7fb fb99 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD200, 0x00);
 80051fe:	2100      	movs	r1, #0
 8005200:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 8005204:	f7fb fb94 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD201, 0x33);
 8005208:	2133      	movs	r1, #51	@ 0x33
 800520a:	f24d 2001 	movw	r0, #53761	@ 0xd201
 800520e:	f7fb fb8f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD202, 0x00);
 8005212:	2100      	movs	r1, #0
 8005214:	f24d 2002 	movw	r0, #53762	@ 0xd202
 8005218:	f7fb fb8a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD203, 0x34);
 800521c:	2134      	movs	r1, #52	@ 0x34
 800521e:	f24d 2003 	movw	r0, #53763	@ 0xd203
 8005222:	f7fb fb85 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD204, 0x00);
 8005226:	2100      	movs	r1, #0
 8005228:	f24d 2004 	movw	r0, #53764	@ 0xd204
 800522c:	f7fb fb80 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD205, 0x3A);
 8005230:	213a      	movs	r1, #58	@ 0x3a
 8005232:	f24d 2005 	movw	r0, #53765	@ 0xd205
 8005236:	f7fb fb7b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD206, 0x00);
 800523a:	2100      	movs	r1, #0
 800523c:	f24d 2006 	movw	r0, #53766	@ 0xd206
 8005240:	f7fb fb76 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD207, 0x4A);
 8005244:	214a      	movs	r1, #74	@ 0x4a
 8005246:	f24d 2007 	movw	r0, #53767	@ 0xd207
 800524a:	f7fb fb71 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD208, 0x00);
 800524e:	2100      	movs	r1, #0
 8005250:	f24d 2008 	movw	r0, #53768	@ 0xd208
 8005254:	f7fb fb6c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD209, 0x5C);
 8005258:	215c      	movs	r1, #92	@ 0x5c
 800525a:	f24d 2009 	movw	r0, #53769	@ 0xd209
 800525e:	f7fb fb67 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD20A, 0x00);
 8005262:	2100      	movs	r1, #0
 8005264:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8005268:	f7fb fb62 	bl	8000930 <lcd_write_reg>

        lcd_write_reg(0xD20B, 0x81);
 800526c:	2181      	movs	r1, #129	@ 0x81
 800526e:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 8005272:	f7fb fb5d 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD20C, 0x00);
 8005276:	2100      	movs	r1, #0
 8005278:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 800527c:	f7fb fb58 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD20D, 0xA6);
 8005280:	21a6      	movs	r1, #166	@ 0xa6
 8005282:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 8005286:	f7fb fb53 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD20E, 0x00);
 800528a:	2100      	movs	r1, #0
 800528c:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8005290:	f7fb fb4e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD20F, 0xE5);
 8005294:	21e5      	movs	r1, #229	@ 0xe5
 8005296:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 800529a:	f7fb fb49 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD210, 0x01);
 800529e:	2101      	movs	r1, #1
 80052a0:	f24d 2010 	movw	r0, #53776	@ 0xd210
 80052a4:	f7fb fb44 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD211, 0x13);
 80052a8:	2113      	movs	r1, #19
 80052aa:	f24d 2011 	movw	r0, #53777	@ 0xd211
 80052ae:	f7fb fb3f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD212, 0x01);
 80052b2:	2101      	movs	r1, #1
 80052b4:	f24d 2012 	movw	r0, #53778	@ 0xd212
 80052b8:	f7fb fb3a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD213, 0x54);
 80052bc:	2154      	movs	r1, #84	@ 0x54
 80052be:	f24d 2013 	movw	r0, #53779	@ 0xd213
 80052c2:	f7fb fb35 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD214, 0x01);
 80052c6:	2101      	movs	r1, #1
 80052c8:	f24d 2014 	movw	r0, #53780	@ 0xd214
 80052cc:	f7fb fb30 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD215, 0x82);
 80052d0:	2182      	movs	r1, #130	@ 0x82
 80052d2:	f24d 2015 	movw	r0, #53781	@ 0xd215
 80052d6:	f7fb fb2b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD216, 0x01);
 80052da:	2101      	movs	r1, #1
 80052dc:	f24d 2016 	movw	r0, #53782	@ 0xd216
 80052e0:	f7fb fb26 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD217, 0xCA);
 80052e4:	21ca      	movs	r1, #202	@ 0xca
 80052e6:	f24d 2017 	movw	r0, #53783	@ 0xd217
 80052ea:	f7fb fb21 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD218, 0x02);
 80052ee:	2102      	movs	r1, #2
 80052f0:	f24d 2018 	movw	r0, #53784	@ 0xd218
 80052f4:	f7fb fb1c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD219, 0x00);
 80052f8:	2100      	movs	r1, #0
 80052fa:	f24d 2019 	movw	r0, #53785	@ 0xd219
 80052fe:	f7fb fb17 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD21A, 0x02);
 8005302:	2102      	movs	r1, #2
 8005304:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 8005308:	f7fb fb12 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD21B, 0x01);
 800530c:	2101      	movs	r1, #1
 800530e:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 8005312:	f7fb fb0d 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD21C, 0x02);
 8005316:	2102      	movs	r1, #2
 8005318:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 800531c:	f7fb fb08 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD21D, 0x34);
 8005320:	2134      	movs	r1, #52	@ 0x34
 8005322:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 8005326:	f7fb fb03 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD21E, 0x02);
 800532a:	2102      	movs	r1, #2
 800532c:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 8005330:	f7fb fafe 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD21F, 0x67);
 8005334:	2167      	movs	r1, #103	@ 0x67
 8005336:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 800533a:	f7fb faf9 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD220, 0x02);
 800533e:	2102      	movs	r1, #2
 8005340:	f24d 2020 	movw	r0, #53792	@ 0xd220
 8005344:	f7fb faf4 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD221, 0x84);
 8005348:	2184      	movs	r1, #132	@ 0x84
 800534a:	f24d 2021 	movw	r0, #53793	@ 0xd221
 800534e:	f7fb faef 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD222, 0x02);
 8005352:	2102      	movs	r1, #2
 8005354:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8005358:	f7fb faea 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD223, 0xA4);
 800535c:	21a4      	movs	r1, #164	@ 0xa4
 800535e:	f24d 2023 	movw	r0, #53795	@ 0xd223
 8005362:	f7fb fae5 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD224, 0x02);
 8005366:	2102      	movs	r1, #2
 8005368:	f24d 2024 	movw	r0, #53796	@ 0xd224
 800536c:	f7fb fae0 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD225, 0xB7);
 8005370:	21b7      	movs	r1, #183	@ 0xb7
 8005372:	f24d 2025 	movw	r0, #53797	@ 0xd225
 8005376:	f7fb fadb 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD226, 0x02);
 800537a:	2102      	movs	r1, #2
 800537c:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8005380:	f7fb fad6 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD227, 0xCF);
 8005384:	21cf      	movs	r1, #207	@ 0xcf
 8005386:	f24d 2027 	movw	r0, #53799	@ 0xd227
 800538a:	f7fb fad1 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD228, 0x02);
 800538e:	2102      	movs	r1, #2
 8005390:	f24d 2028 	movw	r0, #53800	@ 0xd228
 8005394:	f7fb facc 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD229, 0xDE);
 8005398:	21de      	movs	r1, #222	@ 0xde
 800539a:	f24d 2029 	movw	r0, #53801	@ 0xd229
 800539e:	f7fb fac7 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD22A, 0x02);
 80053a2:	2102      	movs	r1, #2
 80053a4:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 80053a8:	f7fb fac2 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD22B, 0xF2);
 80053ac:	21f2      	movs	r1, #242	@ 0xf2
 80053ae:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 80053b2:	f7fb fabd 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD22C, 0x02);
 80053b6:	2102      	movs	r1, #2
 80053b8:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 80053bc:	f7fb fab8 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD22D, 0xFE);
 80053c0:	21fe      	movs	r1, #254	@ 0xfe
 80053c2:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 80053c6:	f7fb fab3 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD22E, 0x03);
 80053ca:	2103      	movs	r1, #3
 80053cc:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 80053d0:	f7fb faae 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD22F, 0x10);
 80053d4:	2110      	movs	r1, #16
 80053d6:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 80053da:	f7fb faa9 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD230, 0x03);
 80053de:	2103      	movs	r1, #3
 80053e0:	f24d 2030 	movw	r0, #53808	@ 0xd230
 80053e4:	f7fb faa4 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD231, 0x33);
 80053e8:	2133      	movs	r1, #51	@ 0x33
 80053ea:	f24d 2031 	movw	r0, #53809	@ 0xd231
 80053ee:	f7fb fa9f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD232, 0x03);
 80053f2:	2103      	movs	r1, #3
 80053f4:	f24d 2032 	movw	r0, #53810	@ 0xd232
 80053f8:	f7fb fa9a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD233, 0x6D);
 80053fc:	216d      	movs	r1, #109	@ 0x6d
 80053fe:	f24d 2033 	movw	r0, #53811	@ 0xd233
 8005402:	f7fb fa95 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD300, 0x00);
 8005406:	2100      	movs	r1, #0
 8005408:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 800540c:	f7fb fa90 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD301, 0x33);
 8005410:	2133      	movs	r1, #51	@ 0x33
 8005412:	f24d 3001 	movw	r0, #54017	@ 0xd301
 8005416:	f7fb fa8b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD302, 0x00);
 800541a:	2100      	movs	r1, #0
 800541c:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8005420:	f7fb fa86 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD303, 0x34);
 8005424:	2134      	movs	r1, #52	@ 0x34
 8005426:	f24d 3003 	movw	r0, #54019	@ 0xd303
 800542a:	f7fb fa81 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD304, 0x00);
 800542e:	2100      	movs	r1, #0
 8005430:	f24d 3004 	movw	r0, #54020	@ 0xd304
 8005434:	f7fb fa7c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD305, 0x3A);
 8005438:	213a      	movs	r1, #58	@ 0x3a
 800543a:	f24d 3005 	movw	r0, #54021	@ 0xd305
 800543e:	f7fb fa77 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD306, 0x00);
 8005442:	2100      	movs	r1, #0
 8005444:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8005448:	f7fb fa72 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD307, 0x4A);
 800544c:	214a      	movs	r1, #74	@ 0x4a
 800544e:	f24d 3007 	movw	r0, #54023	@ 0xd307
 8005452:	f7fb fa6d 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD308, 0x00);
 8005456:	2100      	movs	r1, #0
 8005458:	f24d 3008 	movw	r0, #54024	@ 0xd308
 800545c:	f7fb fa68 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD309, 0x5C);
 8005460:	215c      	movs	r1, #92	@ 0x5c
 8005462:	f24d 3009 	movw	r0, #54025	@ 0xd309
 8005466:	f7fb fa63 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD30A, 0x00);
 800546a:	2100      	movs	r1, #0
 800546c:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8005470:	f7fb fa5e 	bl	8000930 <lcd_write_reg>

        lcd_write_reg(0xD30B, 0x81);
 8005474:	2181      	movs	r1, #129	@ 0x81
 8005476:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 800547a:	f7fb fa59 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD30C, 0x00);
 800547e:	2100      	movs	r1, #0
 8005480:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 8005484:	f7fb fa54 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD30D, 0xA6);
 8005488:	21a6      	movs	r1, #166	@ 0xa6
 800548a:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 800548e:	f7fb fa4f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD30E, 0x00);
 8005492:	2100      	movs	r1, #0
 8005494:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8005498:	f7fb fa4a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD30F, 0xE5);
 800549c:	21e5      	movs	r1, #229	@ 0xe5
 800549e:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 80054a2:	f7fb fa45 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD310, 0x01);
 80054a6:	2101      	movs	r1, #1
 80054a8:	f24d 3010 	movw	r0, #54032	@ 0xd310
 80054ac:	f7fb fa40 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD311, 0x13);
 80054b0:	2113      	movs	r1, #19
 80054b2:	f24d 3011 	movw	r0, #54033	@ 0xd311
 80054b6:	f7fb fa3b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD312, 0x01);
 80054ba:	2101      	movs	r1, #1
 80054bc:	f24d 3012 	movw	r0, #54034	@ 0xd312
 80054c0:	f7fb fa36 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD313, 0x54);
 80054c4:	2154      	movs	r1, #84	@ 0x54
 80054c6:	f24d 3013 	movw	r0, #54035	@ 0xd313
 80054ca:	f7fb fa31 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD314, 0x01);
 80054ce:	2101      	movs	r1, #1
 80054d0:	f24d 3014 	movw	r0, #54036	@ 0xd314
 80054d4:	f7fb fa2c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD315, 0x82);
 80054d8:	2182      	movs	r1, #130	@ 0x82
 80054da:	f24d 3015 	movw	r0, #54037	@ 0xd315
 80054de:	f7fb fa27 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD316, 0x01);
 80054e2:	2101      	movs	r1, #1
 80054e4:	f24d 3016 	movw	r0, #54038	@ 0xd316
 80054e8:	f7fb fa22 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD317, 0xCA);
 80054ec:	21ca      	movs	r1, #202	@ 0xca
 80054ee:	f24d 3017 	movw	r0, #54039	@ 0xd317
 80054f2:	f7fb fa1d 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD318, 0x02);
 80054f6:	2102      	movs	r1, #2
 80054f8:	f24d 3018 	movw	r0, #54040	@ 0xd318
 80054fc:	f7fb fa18 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD319, 0x00);
 8005500:	2100      	movs	r1, #0
 8005502:	f24d 3019 	movw	r0, #54041	@ 0xd319
 8005506:	f7fb fa13 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD31A, 0x02);
 800550a:	2102      	movs	r1, #2
 800550c:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8005510:	f7fb fa0e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD31B, 0x01);
 8005514:	2101      	movs	r1, #1
 8005516:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 800551a:	f7fb fa09 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD31C, 0x02);
 800551e:	2102      	movs	r1, #2
 8005520:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 8005524:	f7fb fa04 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD31D, 0x34);
 8005528:	2134      	movs	r1, #52	@ 0x34
 800552a:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 800552e:	f7fb f9ff 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD31E, 0x02);
 8005532:	2102      	movs	r1, #2
 8005534:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 8005538:	f7fb f9fa 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD31F, 0x67);
 800553c:	2167      	movs	r1, #103	@ 0x67
 800553e:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 8005542:	f7fb f9f5 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD320, 0x02);
 8005546:	2102      	movs	r1, #2
 8005548:	f24d 3020 	movw	r0, #54048	@ 0xd320
 800554c:	f7fb f9f0 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD321, 0x84);
 8005550:	2184      	movs	r1, #132	@ 0x84
 8005552:	f24d 3021 	movw	r0, #54049	@ 0xd321
 8005556:	f7fb f9eb 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD322, 0x02);
 800555a:	2102      	movs	r1, #2
 800555c:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8005560:	f7fb f9e6 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD323, 0xA4);
 8005564:	21a4      	movs	r1, #164	@ 0xa4
 8005566:	f24d 3023 	movw	r0, #54051	@ 0xd323
 800556a:	f7fb f9e1 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD324, 0x02);
 800556e:	2102      	movs	r1, #2
 8005570:	f24d 3024 	movw	r0, #54052	@ 0xd324
 8005574:	f7fb f9dc 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD325, 0xB7);
 8005578:	21b7      	movs	r1, #183	@ 0xb7
 800557a:	f24d 3025 	movw	r0, #54053	@ 0xd325
 800557e:	f7fb f9d7 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD326, 0x02);
 8005582:	2102      	movs	r1, #2
 8005584:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8005588:	f7fb f9d2 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD327, 0xCF);
 800558c:	21cf      	movs	r1, #207	@ 0xcf
 800558e:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8005592:	f7fb f9cd 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD328, 0x02);
 8005596:	2102      	movs	r1, #2
 8005598:	f24d 3028 	movw	r0, #54056	@ 0xd328
 800559c:	f7fb f9c8 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD329, 0xDE);
 80055a0:	21de      	movs	r1, #222	@ 0xde
 80055a2:	f24d 3029 	movw	r0, #54057	@ 0xd329
 80055a6:	f7fb f9c3 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD32A, 0x02);
 80055aa:	2102      	movs	r1, #2
 80055ac:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 80055b0:	f7fb f9be 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD32B, 0xF2);
 80055b4:	21f2      	movs	r1, #242	@ 0xf2
 80055b6:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 80055ba:	f7fb f9b9 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD32C, 0x02);
 80055be:	2102      	movs	r1, #2
 80055c0:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 80055c4:	f7fb f9b4 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD32D, 0xFE);
 80055c8:	21fe      	movs	r1, #254	@ 0xfe
 80055ca:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 80055ce:	f7fb f9af 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD32E, 0x03);
 80055d2:	2103      	movs	r1, #3
 80055d4:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 80055d8:	f7fb f9aa 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD32F, 0x10);
 80055dc:	2110      	movs	r1, #16
 80055de:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 80055e2:	f7fb f9a5 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD330, 0x03);
 80055e6:	2103      	movs	r1, #3
 80055e8:	f24d 3030 	movw	r0, #54064	@ 0xd330
 80055ec:	f7fb f9a0 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD331, 0x33);
 80055f0:	2133      	movs	r1, #51	@ 0x33
 80055f2:	f24d 3031 	movw	r0, #54065	@ 0xd331
 80055f6:	f7fb f99b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD332, 0x03);
 80055fa:	2103      	movs	r1, #3
 80055fc:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8005600:	f7fb f996 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD333, 0x6D);
 8005604:	216d      	movs	r1, #109	@ 0x6d
 8005606:	f24d 3033 	movw	r0, #54067	@ 0xd333
 800560a:	f7fb f991 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD400, 0x00);
 800560e:	2100      	movs	r1, #0
 8005610:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 8005614:	f7fb f98c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD401, 0x33);
 8005618:	2133      	movs	r1, #51	@ 0x33
 800561a:	f24d 4001 	movw	r0, #54273	@ 0xd401
 800561e:	f7fb f987 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD402, 0x00);
 8005622:	2100      	movs	r1, #0
 8005624:	f24d 4002 	movw	r0, #54274	@ 0xd402
 8005628:	f7fb f982 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD403, 0x34);
 800562c:	2134      	movs	r1, #52	@ 0x34
 800562e:	f24d 4003 	movw	r0, #54275	@ 0xd403
 8005632:	f7fb f97d 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD404, 0x00);
 8005636:	2100      	movs	r1, #0
 8005638:	f24d 4004 	movw	r0, #54276	@ 0xd404
 800563c:	f7fb f978 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD405, 0x3A);
 8005640:	213a      	movs	r1, #58	@ 0x3a
 8005642:	f24d 4005 	movw	r0, #54277	@ 0xd405
 8005646:	f7fb f973 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD406, 0x00);
 800564a:	2100      	movs	r1, #0
 800564c:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8005650:	f7fb f96e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD407, 0x4A);
 8005654:	214a      	movs	r1, #74	@ 0x4a
 8005656:	f24d 4007 	movw	r0, #54279	@ 0xd407
 800565a:	f7fb f969 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD408, 0x00);
 800565e:	2100      	movs	r1, #0
 8005660:	f24d 4008 	movw	r0, #54280	@ 0xd408
 8005664:	f7fb f964 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD409, 0x5C);
 8005668:	215c      	movs	r1, #92	@ 0x5c
 800566a:	f24d 4009 	movw	r0, #54281	@ 0xd409
 800566e:	f7fb f95f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD40A, 0x00);
 8005672:	2100      	movs	r1, #0
 8005674:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8005678:	f7fb f95a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD40B, 0x81);
 800567c:	2181      	movs	r1, #129	@ 0x81
 800567e:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 8005682:	f7fb f955 	bl	8000930 <lcd_write_reg>

        lcd_write_reg(0xD40C, 0x00);
 8005686:	2100      	movs	r1, #0
 8005688:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 800568c:	f7fb f950 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD40D, 0xA6);
 8005690:	21a6      	movs	r1, #166	@ 0xa6
 8005692:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 8005696:	f7fb f94b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD40E, 0x00);
 800569a:	2100      	movs	r1, #0
 800569c:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 80056a0:	f7fb f946 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD40F, 0xE5);
 80056a4:	21e5      	movs	r1, #229	@ 0xe5
 80056a6:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 80056aa:	f7fb f941 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD410, 0x01);
 80056ae:	2101      	movs	r1, #1
 80056b0:	f24d 4010 	movw	r0, #54288	@ 0xd410
 80056b4:	f7fb f93c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD411, 0x13);
 80056b8:	2113      	movs	r1, #19
 80056ba:	f24d 4011 	movw	r0, #54289	@ 0xd411
 80056be:	f7fb f937 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD412, 0x01);
 80056c2:	2101      	movs	r1, #1
 80056c4:	f24d 4012 	movw	r0, #54290	@ 0xd412
 80056c8:	f7fb f932 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD413, 0x54);
 80056cc:	2154      	movs	r1, #84	@ 0x54
 80056ce:	f24d 4013 	movw	r0, #54291	@ 0xd413
 80056d2:	f7fb f92d 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD414, 0x01);
 80056d6:	2101      	movs	r1, #1
 80056d8:	f24d 4014 	movw	r0, #54292	@ 0xd414
 80056dc:	f7fb f928 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD415, 0x82);
 80056e0:	2182      	movs	r1, #130	@ 0x82
 80056e2:	f24d 4015 	movw	r0, #54293	@ 0xd415
 80056e6:	f7fb f923 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD416, 0x01);
 80056ea:	2101      	movs	r1, #1
 80056ec:	f24d 4016 	movw	r0, #54294	@ 0xd416
 80056f0:	f7fb f91e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD417, 0xCA);
 80056f4:	21ca      	movs	r1, #202	@ 0xca
 80056f6:	f24d 4017 	movw	r0, #54295	@ 0xd417
 80056fa:	f7fb f919 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD418, 0x02);
 80056fe:	2102      	movs	r1, #2
 8005700:	f24d 4018 	movw	r0, #54296	@ 0xd418
 8005704:	f7fb f914 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD419, 0x00);
 8005708:	2100      	movs	r1, #0
 800570a:	f24d 4019 	movw	r0, #54297	@ 0xd419
 800570e:	f7fb f90f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD41A, 0x02);
 8005712:	2102      	movs	r1, #2
 8005714:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 8005718:	f7fb f90a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD41B, 0x01);
 800571c:	2101      	movs	r1, #1
 800571e:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 8005722:	f7fb f905 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD41C, 0x02);
 8005726:	2102      	movs	r1, #2
 8005728:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 800572c:	f7fb f900 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD41D, 0x34);
 8005730:	2134      	movs	r1, #52	@ 0x34
 8005732:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 8005736:	f7fb f8fb 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD41E, 0x02);
 800573a:	2102      	movs	r1, #2
 800573c:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 8005740:	f7fb f8f6 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD41F, 0x67);
 8005744:	2167      	movs	r1, #103	@ 0x67
 8005746:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 800574a:	f7fb f8f1 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD420, 0x02);
 800574e:	2102      	movs	r1, #2
 8005750:	f24d 4020 	movw	r0, #54304	@ 0xd420
 8005754:	f7fb f8ec 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD421, 0x84);
 8005758:	2184      	movs	r1, #132	@ 0x84
 800575a:	f24d 4021 	movw	r0, #54305	@ 0xd421
 800575e:	f7fb f8e7 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD422, 0x02);
 8005762:	2102      	movs	r1, #2
 8005764:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8005768:	f7fb f8e2 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD423, 0xA4);
 800576c:	21a4      	movs	r1, #164	@ 0xa4
 800576e:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8005772:	f7fb f8dd 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD424, 0x02);
 8005776:	2102      	movs	r1, #2
 8005778:	f24d 4024 	movw	r0, #54308	@ 0xd424
 800577c:	f7fb f8d8 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD425, 0xB7);
 8005780:	21b7      	movs	r1, #183	@ 0xb7
 8005782:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8005786:	f7fb f8d3 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD426, 0x02);
 800578a:	2102      	movs	r1, #2
 800578c:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8005790:	f7fb f8ce 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD427, 0xCF);
 8005794:	21cf      	movs	r1, #207	@ 0xcf
 8005796:	f24d 4027 	movw	r0, #54311	@ 0xd427
 800579a:	f7fb f8c9 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD428, 0x02);
 800579e:	2102      	movs	r1, #2
 80057a0:	f24d 4028 	movw	r0, #54312	@ 0xd428
 80057a4:	f7fb f8c4 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD429, 0xDE);
 80057a8:	21de      	movs	r1, #222	@ 0xde
 80057aa:	f24d 4029 	movw	r0, #54313	@ 0xd429
 80057ae:	f7fb f8bf 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD42A, 0x02);
 80057b2:	2102      	movs	r1, #2
 80057b4:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 80057b8:	f7fb f8ba 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD42B, 0xF2);
 80057bc:	21f2      	movs	r1, #242	@ 0xf2
 80057be:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 80057c2:	f7fb f8b5 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD42C, 0x02);
 80057c6:	2102      	movs	r1, #2
 80057c8:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 80057cc:	f7fb f8b0 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD42D, 0xFE);
 80057d0:	21fe      	movs	r1, #254	@ 0xfe
 80057d2:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 80057d6:	f7fb f8ab 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD42E, 0x03);
 80057da:	2103      	movs	r1, #3
 80057dc:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 80057e0:	f7fb f8a6 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD42F, 0x10);
 80057e4:	2110      	movs	r1, #16
 80057e6:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 80057ea:	f7fb f8a1 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD430, 0x03);
 80057ee:	2103      	movs	r1, #3
 80057f0:	f24d 4030 	movw	r0, #54320	@ 0xd430
 80057f4:	f7fb f89c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD431, 0x33);
 80057f8:	2133      	movs	r1, #51	@ 0x33
 80057fa:	f24d 4031 	movw	r0, #54321	@ 0xd431
 80057fe:	f7fb f897 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD432, 0x03);
 8005802:	2103      	movs	r1, #3
 8005804:	f24d 4032 	movw	r0, #54322	@ 0xd432
 8005808:	f7fb f892 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD433, 0x6D);
 800580c:	216d      	movs	r1, #109	@ 0x6d
 800580e:	f24d 4033 	movw	r0, #54323	@ 0xd433
 8005812:	f7fb f88d 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD500, 0x00);
 8005816:	2100      	movs	r1, #0
 8005818:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 800581c:	f7fb f888 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD501, 0x33);
 8005820:	2133      	movs	r1, #51	@ 0x33
 8005822:	f24d 5001 	movw	r0, #54529	@ 0xd501
 8005826:	f7fb f883 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD502, 0x00);
 800582a:	2100      	movs	r1, #0
 800582c:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8005830:	f7fb f87e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD503, 0x34);
 8005834:	2134      	movs	r1, #52	@ 0x34
 8005836:	f24d 5003 	movw	r0, #54531	@ 0xd503
 800583a:	f7fb f879 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD504, 0x00);
 800583e:	2100      	movs	r1, #0
 8005840:	f24d 5004 	movw	r0, #54532	@ 0xd504
 8005844:	f7fb f874 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD505, 0x3A);
 8005848:	213a      	movs	r1, #58	@ 0x3a
 800584a:	f24d 5005 	movw	r0, #54533	@ 0xd505
 800584e:	f7fb f86f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD506, 0x00);
 8005852:	2100      	movs	r1, #0
 8005854:	f24d 5006 	movw	r0, #54534	@ 0xd506
 8005858:	f7fb f86a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD507, 0x4A);
 800585c:	214a      	movs	r1, #74	@ 0x4a
 800585e:	f24d 5007 	movw	r0, #54535	@ 0xd507
 8005862:	f7fb f865 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD508, 0x00);
 8005866:	2100      	movs	r1, #0
 8005868:	f24d 5008 	movw	r0, #54536	@ 0xd508
 800586c:	f7fb f860 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD509, 0x5C);
 8005870:	215c      	movs	r1, #92	@ 0x5c
 8005872:	f24d 5009 	movw	r0, #54537	@ 0xd509
 8005876:	f7fb f85b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD50A, 0x00);
 800587a:	2100      	movs	r1, #0
 800587c:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8005880:	f7fb f856 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD50B, 0x81);
 8005884:	2181      	movs	r1, #129	@ 0x81
 8005886:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 800588a:	f7fb f851 	bl	8000930 <lcd_write_reg>

        lcd_write_reg(0xD50C, 0x00);
 800588e:	2100      	movs	r1, #0
 8005890:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 8005894:	f7fb f84c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD50D, 0xA6);
 8005898:	21a6      	movs	r1, #166	@ 0xa6
 800589a:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 800589e:	f7fb f847 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD50E, 0x00);
 80058a2:	2100      	movs	r1, #0
 80058a4:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 80058a8:	f7fb f842 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD50F, 0xE5);
 80058ac:	21e5      	movs	r1, #229	@ 0xe5
 80058ae:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 80058b2:	f7fb f83d 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD510, 0x01);
 80058b6:	2101      	movs	r1, #1
 80058b8:	f24d 5010 	movw	r0, #54544	@ 0xd510
 80058bc:	f7fb f838 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD511, 0x13);
 80058c0:	2113      	movs	r1, #19
 80058c2:	f24d 5011 	movw	r0, #54545	@ 0xd511
 80058c6:	f7fb f833 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD512, 0x01);
 80058ca:	2101      	movs	r1, #1
 80058cc:	f24d 5012 	movw	r0, #54546	@ 0xd512
 80058d0:	f7fb f82e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD513, 0x54);
 80058d4:	2154      	movs	r1, #84	@ 0x54
 80058d6:	f24d 5013 	movw	r0, #54547	@ 0xd513
 80058da:	f7fb f829 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD514, 0x01);
 80058de:	2101      	movs	r1, #1
 80058e0:	f24d 5014 	movw	r0, #54548	@ 0xd514
 80058e4:	f7fb f824 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD515, 0x82);
 80058e8:	2182      	movs	r1, #130	@ 0x82
 80058ea:	f24d 5015 	movw	r0, #54549	@ 0xd515
 80058ee:	f7fb f81f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD516, 0x01);
 80058f2:	2101      	movs	r1, #1
 80058f4:	f24d 5016 	movw	r0, #54550	@ 0xd516
 80058f8:	f7fb f81a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD517, 0xCA);
 80058fc:	21ca      	movs	r1, #202	@ 0xca
 80058fe:	f24d 5017 	movw	r0, #54551	@ 0xd517
 8005902:	f7fb f815 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD518, 0x02);
 8005906:	2102      	movs	r1, #2
 8005908:	f24d 5018 	movw	r0, #54552	@ 0xd518
 800590c:	f7fb f810 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD519, 0x00);
 8005910:	2100      	movs	r1, #0
 8005912:	f24d 5019 	movw	r0, #54553	@ 0xd519
 8005916:	f7fb f80b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD51A, 0x02);
 800591a:	2102      	movs	r1, #2
 800591c:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8005920:	f7fb f806 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD51B, 0x01);
 8005924:	2101      	movs	r1, #1
 8005926:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 800592a:	f7fb f801 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD51C, 0x02);
 800592e:	2102      	movs	r1, #2
 8005930:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8005934:	f7fa fffc 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD51D, 0x34);
 8005938:	2134      	movs	r1, #52	@ 0x34
 800593a:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 800593e:	f7fa fff7 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD51E, 0x02);
 8005942:	2102      	movs	r1, #2
 8005944:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 8005948:	f7fa fff2 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD51F, 0x67);
 800594c:	2167      	movs	r1, #103	@ 0x67
 800594e:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 8005952:	f7fa ffed 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD520, 0x02);
 8005956:	2102      	movs	r1, #2
 8005958:	f24d 5020 	movw	r0, #54560	@ 0xd520
 800595c:	f7fa ffe8 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD521, 0x84);
 8005960:	2184      	movs	r1, #132	@ 0x84
 8005962:	f24d 5021 	movw	r0, #54561	@ 0xd521
 8005966:	f7fa ffe3 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD522, 0x02);
 800596a:	2102      	movs	r1, #2
 800596c:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8005970:	f7fa ffde 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD523, 0xA4);
 8005974:	21a4      	movs	r1, #164	@ 0xa4
 8005976:	f24d 5023 	movw	r0, #54563	@ 0xd523
 800597a:	f7fa ffd9 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD524, 0x02);
 800597e:	2102      	movs	r1, #2
 8005980:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8005984:	f7fa ffd4 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD525, 0xB7);
 8005988:	21b7      	movs	r1, #183	@ 0xb7
 800598a:	f24d 5025 	movw	r0, #54565	@ 0xd525
 800598e:	f7fa ffcf 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD526, 0x02);
 8005992:	2102      	movs	r1, #2
 8005994:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8005998:	f7fa ffca 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD527, 0xCF);
 800599c:	21cf      	movs	r1, #207	@ 0xcf
 800599e:	f24d 5027 	movw	r0, #54567	@ 0xd527
 80059a2:	f7fa ffc5 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD528, 0x02);
 80059a6:	2102      	movs	r1, #2
 80059a8:	f24d 5028 	movw	r0, #54568	@ 0xd528
 80059ac:	f7fa ffc0 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD529, 0xDE);
 80059b0:	21de      	movs	r1, #222	@ 0xde
 80059b2:	f24d 5029 	movw	r0, #54569	@ 0xd529
 80059b6:	f7fa ffbb 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD52A, 0x02);
 80059ba:	2102      	movs	r1, #2
 80059bc:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 80059c0:	f7fa ffb6 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD52B, 0xF2);
 80059c4:	21f2      	movs	r1, #242	@ 0xf2
 80059c6:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 80059ca:	f7fa ffb1 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD52C, 0x02);
 80059ce:	2102      	movs	r1, #2
 80059d0:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 80059d4:	f7fa ffac 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD52D, 0xFE);
 80059d8:	21fe      	movs	r1, #254	@ 0xfe
 80059da:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 80059de:	f7fa ffa7 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD52E, 0x03);
 80059e2:	2103      	movs	r1, #3
 80059e4:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 80059e8:	f7fa ffa2 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD52F, 0x10);
 80059ec:	2110      	movs	r1, #16
 80059ee:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 80059f2:	f7fa ff9d 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD530, 0x03);
 80059f6:	2103      	movs	r1, #3
 80059f8:	f24d 5030 	movw	r0, #54576	@ 0xd530
 80059fc:	f7fa ff98 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD531, 0x33);
 8005a00:	2133      	movs	r1, #51	@ 0x33
 8005a02:	f24d 5031 	movw	r0, #54577	@ 0xd531
 8005a06:	f7fa ff93 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD532, 0x03);
 8005a0a:	2103      	movs	r1, #3
 8005a0c:	f24d 5032 	movw	r0, #54578	@ 0xd532
 8005a10:	f7fa ff8e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD533, 0x6D);
 8005a14:	216d      	movs	r1, #109	@ 0x6d
 8005a16:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8005a1a:	f7fa ff89 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD600, 0x00);
 8005a1e:	2100      	movs	r1, #0
 8005a20:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8005a24:	f7fa ff84 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD601, 0x33);
 8005a28:	2133      	movs	r1, #51	@ 0x33
 8005a2a:	f24d 6001 	movw	r0, #54785	@ 0xd601
 8005a2e:	f7fa ff7f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD602, 0x00);
 8005a32:	2100      	movs	r1, #0
 8005a34:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8005a38:	f7fa ff7a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD603, 0x34);
 8005a3c:	2134      	movs	r1, #52	@ 0x34
 8005a3e:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8005a42:	f7fa ff75 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD604, 0x00);
 8005a46:	2100      	movs	r1, #0
 8005a48:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8005a4c:	f7fa ff70 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD605, 0x3A);
 8005a50:	213a      	movs	r1, #58	@ 0x3a
 8005a52:	f24d 6005 	movw	r0, #54789	@ 0xd605
 8005a56:	f7fa ff6b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD606, 0x00);
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8005a60:	f7fa ff66 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD607, 0x4A);
 8005a64:	214a      	movs	r1, #74	@ 0x4a
 8005a66:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8005a6a:	f7fa ff61 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD608, 0x00);
 8005a6e:	2100      	movs	r1, #0
 8005a70:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8005a74:	f7fa ff5c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD609, 0x5C);
 8005a78:	215c      	movs	r1, #92	@ 0x5c
 8005a7a:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8005a7e:	f7fa ff57 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD60A, 0x00);
 8005a82:	2100      	movs	r1, #0
 8005a84:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8005a88:	f7fa ff52 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD60B, 0x81);
 8005a8c:	2181      	movs	r1, #129	@ 0x81
 8005a8e:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8005a92:	f7fa ff4d 	bl	8000930 <lcd_write_reg>

        lcd_write_reg(0xD60C, 0x00);
 8005a96:	2100      	movs	r1, #0
 8005a98:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 8005a9c:	f7fa ff48 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD60D, 0xA6);
 8005aa0:	21a6      	movs	r1, #166	@ 0xa6
 8005aa2:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8005aa6:	f7fa ff43 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD60E, 0x00);
 8005aaa:	2100      	movs	r1, #0
 8005aac:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 8005ab0:	f7fa ff3e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD60F, 0xE5);
 8005ab4:	21e5      	movs	r1, #229	@ 0xe5
 8005ab6:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8005aba:	f7fa ff39 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD610, 0x01);
 8005abe:	2101      	movs	r1, #1
 8005ac0:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8005ac4:	f7fa ff34 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD611, 0x13);
 8005ac8:	2113      	movs	r1, #19
 8005aca:	f24d 6011 	movw	r0, #54801	@ 0xd611
 8005ace:	f7fa ff2f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD612, 0x01);
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	f24d 6012 	movw	r0, #54802	@ 0xd612
 8005ad8:	f7fa ff2a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD613, 0x54);
 8005adc:	2154      	movs	r1, #84	@ 0x54
 8005ade:	f24d 6013 	movw	r0, #54803	@ 0xd613
 8005ae2:	f7fa ff25 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD614, 0x01);
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	f24d 6014 	movw	r0, #54804	@ 0xd614
 8005aec:	f7fa ff20 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD615, 0x82);
 8005af0:	2182      	movs	r1, #130	@ 0x82
 8005af2:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8005af6:	f7fa ff1b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD616, 0x01);
 8005afa:	2101      	movs	r1, #1
 8005afc:	f24d 6016 	movw	r0, #54806	@ 0xd616
 8005b00:	f7fa ff16 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD617, 0xCA);
 8005b04:	21ca      	movs	r1, #202	@ 0xca
 8005b06:	f24d 6017 	movw	r0, #54807	@ 0xd617
 8005b0a:	f7fa ff11 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD618, 0x02);
 8005b0e:	2102      	movs	r1, #2
 8005b10:	f24d 6018 	movw	r0, #54808	@ 0xd618
 8005b14:	f7fa ff0c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD619, 0x00);
 8005b18:	2100      	movs	r1, #0
 8005b1a:	f24d 6019 	movw	r0, #54809	@ 0xd619
 8005b1e:	f7fa ff07 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD61A, 0x02);
 8005b22:	2102      	movs	r1, #2
 8005b24:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8005b28:	f7fa ff02 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD61B, 0x01);
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 8005b32:	f7fa fefd 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD61C, 0x02);
 8005b36:	2102      	movs	r1, #2
 8005b38:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8005b3c:	f7fa fef8 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD61D, 0x34);
 8005b40:	2134      	movs	r1, #52	@ 0x34
 8005b42:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 8005b46:	f7fa fef3 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD61E, 0x02);
 8005b4a:	2102      	movs	r1, #2
 8005b4c:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8005b50:	f7fa feee 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD61F, 0x67);
 8005b54:	2167      	movs	r1, #103	@ 0x67
 8005b56:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 8005b5a:	f7fa fee9 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD620, 0x02);
 8005b5e:	2102      	movs	r1, #2
 8005b60:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8005b64:	f7fa fee4 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD621, 0x84);
 8005b68:	2184      	movs	r1, #132	@ 0x84
 8005b6a:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8005b6e:	f7fa fedf 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD622, 0x02);
 8005b72:	2102      	movs	r1, #2
 8005b74:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8005b78:	f7fa feda 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD623, 0xA4);
 8005b7c:	21a4      	movs	r1, #164	@ 0xa4
 8005b7e:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8005b82:	f7fa fed5 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD624, 0x02);
 8005b86:	2102      	movs	r1, #2
 8005b88:	f24d 6024 	movw	r0, #54820	@ 0xd624
 8005b8c:	f7fa fed0 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD625, 0xB7);
 8005b90:	21b7      	movs	r1, #183	@ 0xb7
 8005b92:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8005b96:	f7fa fecb 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD626, 0x02);
 8005b9a:	2102      	movs	r1, #2
 8005b9c:	f24d 6026 	movw	r0, #54822	@ 0xd626
 8005ba0:	f7fa fec6 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD627, 0xCF);
 8005ba4:	21cf      	movs	r1, #207	@ 0xcf
 8005ba6:	f24d 6027 	movw	r0, #54823	@ 0xd627
 8005baa:	f7fa fec1 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD628, 0x02);
 8005bae:	2102      	movs	r1, #2
 8005bb0:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8005bb4:	f7fa febc 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD629, 0xDE);
 8005bb8:	21de      	movs	r1, #222	@ 0xde
 8005bba:	f24d 6029 	movw	r0, #54825	@ 0xd629
 8005bbe:	f7fa feb7 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD62A, 0x02);
 8005bc2:	2102      	movs	r1, #2
 8005bc4:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8005bc8:	f7fa feb2 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD62B, 0xF2);
 8005bcc:	21f2      	movs	r1, #242	@ 0xf2
 8005bce:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 8005bd2:	f7fa fead 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD62C, 0x02);
 8005bd6:	2102      	movs	r1, #2
 8005bd8:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 8005bdc:	f7fa fea8 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD62D, 0xFE);
 8005be0:	21fe      	movs	r1, #254	@ 0xfe
 8005be2:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8005be6:	f7fa fea3 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD62E, 0x03);
 8005bea:	2103      	movs	r1, #3
 8005bec:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 8005bf0:	f7fa fe9e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD62F, 0x10);
 8005bf4:	2110      	movs	r1, #16
 8005bf6:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8005bfa:	f7fa fe99 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD630, 0x03);
 8005bfe:	2103      	movs	r1, #3
 8005c00:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8005c04:	f7fa fe94 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD631, 0x33);
 8005c08:	2133      	movs	r1, #51	@ 0x33
 8005c0a:	f24d 6031 	movw	r0, #54833	@ 0xd631
 8005c0e:	f7fa fe8f 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD632, 0x03);
 8005c12:	2103      	movs	r1, #3
 8005c14:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8005c18:	f7fa fe8a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xD633, 0x6D);
 8005c1c:	216d      	movs	r1, #109	@ 0x6d
 8005c1e:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8005c22:	f7fa fe85 	bl	8000930 <lcd_write_reg>
        /* LV2 Page 0 enable */
        lcd_write_reg(0xF000, 0x55);
 8005c26:	2155      	movs	r1, #85	@ 0x55
 8005c28:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8005c2c:	f7fa fe80 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8005c30:	21aa      	movs	r1, #170	@ 0xaa
 8005c32:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8005c36:	f7fa fe7b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8005c3a:	2152      	movs	r1, #82	@ 0x52
 8005c3c:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8005c40:	f7fa fe76 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8005c44:	2108      	movs	r1, #8
 8005c46:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8005c4a:	f7fa fe71 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x00);
 8005c4e:	2100      	movs	r1, #0
 8005c50:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8005c54:	f7fa fe6c 	bl	8000930 <lcd_write_reg>
        /* Display control */
        lcd_write_reg(0xB100, 0xCC);
 8005c58:	21cc      	movs	r1, #204	@ 0xcc
 8005c5a:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8005c5e:	f7fa fe67 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x00);
 8005c62:	2100      	movs	r1, #0
 8005c64:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8005c68:	f7fa fe62 	bl	8000930 <lcd_write_reg>
        /* Source hold time */
        lcd_write_reg(0xB600, 0x05);
 8005c6c:	2105      	movs	r1, #5
 8005c6e:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8005c72:	f7fa fe5d 	bl	8000930 <lcd_write_reg>
        /* Gate EQ control */
        lcd_write_reg(0xB700, 0x70);
 8005c76:	2170      	movs	r1, #112	@ 0x70
 8005c78:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8005c7c:	f7fa fe58 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x70);
 8005c80:	2170      	movs	r1, #112	@ 0x70
 8005c82:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8005c86:	f7fa fe53 	bl	8000930 <lcd_write_reg>
        /* Source EQ control (Mode 2) */
        lcd_write_reg(0xB800, 0x01);
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8005c90:	f7fa fe4e 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x03);
 8005c94:	2103      	movs	r1, #3
 8005c96:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8005c9a:	f7fa fe49 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x03);
 8005c9e:	2103      	movs	r1, #3
 8005ca0:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8005ca4:	f7fa fe44 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xB803, 0x03);
 8005ca8:	2103      	movs	r1, #3
 8005caa:	f64b 0003 	movw	r0, #47107	@ 0xb803
 8005cae:	f7fa fe3f 	bl	8000930 <lcd_write_reg>
        /* Inversion mode (2-dot) */
        lcd_write_reg(0xBC00, 0x02);
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8005cb8:	f7fa fe3a 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x00);
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8005cc2:	f7fa fe35 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8005ccc:	f7fa fe30 	bl	8000930 <lcd_write_reg>
        /* Timing control 4H w/ 4-delay */
        lcd_write_reg(0xC900, 0xD0);
 8005cd0:	21d0      	movs	r1, #208	@ 0xd0
 8005cd2:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 8005cd6:	f7fa fe2b 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xC901, 0x02);
 8005cda:	2102      	movs	r1, #2
 8005cdc:	f64c 1001 	movw	r0, #51457	@ 0xc901
 8005ce0:	f7fa fe26 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xC902, 0x50);
 8005ce4:	2150      	movs	r1, #80	@ 0x50
 8005ce6:	f64c 1002 	movw	r0, #51458	@ 0xc902
 8005cea:	f7fa fe21 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xC903, 0x50);
 8005cee:	2150      	movs	r1, #80	@ 0x50
 8005cf0:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8005cf4:	f7fa fe1c 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0xC904, 0x50);
 8005cf8:	2150      	movs	r1, #80	@ 0x50
 8005cfa:	f64c 1004 	movw	r0, #51460	@ 0xc904
 8005cfe:	f7fa fe17 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0x3500, 0x00);
 8005d02:	2100      	movs	r1, #0
 8005d04:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 8005d08:	f7fa fe12 	bl	8000930 <lcd_write_reg>
        lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8005d0c:	2155      	movs	r1, #85	@ 0x55
 8005d0e:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 8005d12:	f7fa fe0d 	bl	8000930 <lcd_write_reg>
 8005d16:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8005d1a:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005d8c <lcd_init+0x422c>)
 8005d20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d24:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005d26:	4b19      	ldr	r3, [pc, #100]	@ (8005d8c <lcd_init+0x422c>)
 8005d28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005d2c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005d2e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	4b16      	ldr	r3, [pc, #88]	@ (8005d90 <lcd_init+0x4230>)
 8005d36:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005d38:	4b14      	ldr	r3, [pc, #80]	@ (8005d8c <lcd_init+0x422c>)
 8005d3a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005d3e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005d40:	4b12      	ldr	r3, [pc, #72]	@ (8005d8c <lcd_init+0x422c>)
 8005d42:	2280      	movs	r2, #128	@ 0x80
 8005d44:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005d46:	4b11      	ldr	r3, [pc, #68]	@ (8005d8c <lcd_init+0x422c>)
 8005d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d4c:	611a      	str	r2, [r3, #16]
}
 8005d4e:	bf00      	nop
 8005d50:	f44f 5324 	mov.w	r3, #10496	@ 0x2900
 8005d54:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005d58:	4b0c      	ldr	r3, [pc, #48]	@ (8005d8c <lcd_init+0x422c>)
 8005d5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d5e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005d60:	4b0a      	ldr	r3, [pc, #40]	@ (8005d8c <lcd_init+0x422c>)
 8005d62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005d66:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005d68:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	4b08      	ldr	r3, [pc, #32]	@ (8005d90 <lcd_init+0x4230>)
 8005d70:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005d72:	4b06      	ldr	r3, [pc, #24]	@ (8005d8c <lcd_init+0x422c>)
 8005d74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005d78:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005d7a:	4b04      	ldr	r3, [pc, #16]	@ (8005d8c <lcd_init+0x422c>)
 8005d7c:	2280      	movs	r2, #128	@ 0x80
 8005d7e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005d80:	4b02      	ldr	r3, [pc, #8]	@ (8005d8c <lcd_init+0x422c>)
 8005d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d86:	611a      	str	r2, [r3, #16]
}
 8005d88:	f000 be33 	b.w	80069f2 <lcd_init+0x4e92>
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x1100);
        //delay_us(120);
        lcd_wr_regno(0x2900);
    }
    else if (lcddev.id == 0x9806)
 8005d94:	4bc3      	ldr	r3, [pc, #780]	@ (80060a4 <lcd_init+0x4544>)
 8005d96:	889b      	ldrh	r3, [r3, #4]
 8005d98:	f649 0206 	movw	r2, #38918	@ 0x9806
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	f040 8407 	bne.w	80065b0 <lcd_init+0x4a50>
 8005da2:	23ff      	movs	r3, #255	@ 0xff
 8005da4:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005da8:	4bbf      	ldr	r3, [pc, #764]	@ (80060a8 <lcd_init+0x4548>)
 8005daa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005dae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005db0:	4bbd      	ldr	r3, [pc, #756]	@ (80060a8 <lcd_init+0x4548>)
 8005db2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005db6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005db8:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	4bbb      	ldr	r3, [pc, #748]	@ (80060ac <lcd_init+0x454c>)
 8005dc0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005dc2:	4bb9      	ldr	r3, [pc, #740]	@ (80060a8 <lcd_init+0x4548>)
 8005dc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005dc8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005dca:	4bb7      	ldr	r3, [pc, #732]	@ (80060a8 <lcd_init+0x4548>)
 8005dcc:	2280      	movs	r2, #128	@ 0x80
 8005dce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005dd0:	4bb5      	ldr	r3, [pc, #724]	@ (80060a8 <lcd_init+0x4548>)
 8005dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dd6:	611a      	str	r2, [r3, #16]
}
 8005dd8:	bf00      	nop
    {
       // lcd_ex_ili9806_reginit();   /* ִ��ILI9806��ʼ�� */
        lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
        lcd_wr_xdata(0xFF);
 8005dda:	20ff      	movs	r0, #255	@ 0xff
 8005ddc:	f7fa fd84 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x98);
 8005de0:	2098      	movs	r0, #152	@ 0x98
 8005de2:	f7fa fd81 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8005de6:	2006      	movs	r0, #6
 8005de8:	f7fa fd7e 	bl	80008e8 <lcd_wr_xdata>
 8005dec:	23bc      	movs	r3, #188	@ 0xbc
 8005dee:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005df2:	4bad      	ldr	r3, [pc, #692]	@ (80060a8 <lcd_init+0x4548>)
 8005df4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005df8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005dfa:	4bab      	ldr	r3, [pc, #684]	@ (80060a8 <lcd_init+0x4548>)
 8005dfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e00:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005e02:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	4ba8      	ldr	r3, [pc, #672]	@ (80060ac <lcd_init+0x454c>)
 8005e0a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005e0c:	4ba6      	ldr	r3, [pc, #664]	@ (80060a8 <lcd_init+0x4548>)
 8005e0e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005e12:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005e14:	4ba4      	ldr	r3, [pc, #656]	@ (80060a8 <lcd_init+0x4548>)
 8005e16:	2280      	movs	r2, #128	@ 0x80
 8005e18:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005e1a:	4ba3      	ldr	r3, [pc, #652]	@ (80060a8 <lcd_init+0x4548>)
 8005e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e20:	611a      	str	r2, [r3, #16]
}
 8005e22:	bf00      	nop

        lcd_wr_regno(0xBC); /* GIP 1 */
        lcd_wr_xdata(0x01);
 8005e24:	2001      	movs	r0, #1
 8005e26:	f7fa fd5f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8005e2a:	200f      	movs	r0, #15
 8005e2c:	f7fa fd5c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8005e30:	2061      	movs	r0, #97	@ 0x61
 8005e32:	f7fa fd59 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005e36:	20ff      	movs	r0, #255	@ 0xff
 8005e38:	f7fa fd56 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f7fa fd53 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e42:	2001      	movs	r0, #1
 8005e44:	f7fa fd50 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8005e48:	200b      	movs	r0, #11
 8005e4a:	f7fa fd4d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8005e4e:	2010      	movs	r0, #16
 8005e50:	f7fa fd4a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 8005e54:	2037      	movs	r0, #55	@ 0x37
 8005e56:	f7fa fd47 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x63);
 8005e5a:	2063      	movs	r0, #99	@ 0x63
 8005e5c:	f7fa fd44 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005e60:	20ff      	movs	r0, #255	@ 0xff
 8005e62:	f7fa fd41 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005e66:	20ff      	movs	r0, #255	@ 0xff
 8005e68:	f7fa fd3e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	f7fa fd3b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e72:	2001      	movs	r0, #1
 8005e74:	f7fa fd38 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005e78:	2000      	movs	r0, #0
 8005e7a:	f7fa fd35 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005e7e:	2000      	movs	r0, #0
 8005e80:	f7fa fd32 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005e84:	20ff      	movs	r0, #255	@ 0xff
 8005e86:	f7fa fd2f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8005e8a:	2052      	movs	r0, #82	@ 0x52
 8005e8c:	f7fa fd2c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e90:	2001      	movs	r0, #1
 8005e92:	f7fa fd29 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005e96:	2000      	movs	r0, #0
 8005e98:	f7fa fd26 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8005e9c:	2040      	movs	r0, #64	@ 0x40
 8005e9e:	f7fa fd23 	bl	80008e8 <lcd_wr_xdata>
 8005ea2:	23bd      	movs	r3, #189	@ 0xbd
 8005ea4:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005ea8:	4b7f      	ldr	r3, [pc, #508]	@ (80060a8 <lcd_init+0x4548>)
 8005eaa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005eae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005eb0:	4b7d      	ldr	r3, [pc, #500]	@ (80060a8 <lcd_init+0x4548>)
 8005eb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005eb6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005eb8:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80060ac <lcd_init+0x454c>)
 8005ec0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005ec2:	4b79      	ldr	r3, [pc, #484]	@ (80060a8 <lcd_init+0x4548>)
 8005ec4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005ec8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005eca:	4b77      	ldr	r3, [pc, #476]	@ (80060a8 <lcd_init+0x4548>)
 8005ecc:	2280      	movs	r2, #128	@ 0x80
 8005ece:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005ed0:	4b75      	ldr	r3, [pc, #468]	@ (80060a8 <lcd_init+0x4548>)
 8005ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ed6:	611a      	str	r2, [r3, #16]
}
 8005ed8:	bf00      	nop

        lcd_wr_regno(0xBD); /* GIP 2 */
        lcd_wr_xdata(0x01);
 8005eda:	2001      	movs	r0, #1
 8005edc:	f7fa fd04 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8005ee0:	2023      	movs	r0, #35	@ 0x23
 8005ee2:	f7fa fd01 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8005ee6:	2045      	movs	r0, #69	@ 0x45
 8005ee8:	f7fa fcfe 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8005eec:	2067      	movs	r0, #103	@ 0x67
 8005eee:	f7fa fcfb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	f7fa fcf8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8005ef8:	2023      	movs	r0, #35	@ 0x23
 8005efa:	f7fa fcf5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8005efe:	2045      	movs	r0, #69	@ 0x45
 8005f00:	f7fa fcf2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8005f04:	2067      	movs	r0, #103	@ 0x67
 8005f06:	f7fa fcef 	bl	80008e8 <lcd_wr_xdata>
 8005f0a:	23be      	movs	r3, #190	@ 0xbe
 8005f0c:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005f10:	4b65      	ldr	r3, [pc, #404]	@ (80060a8 <lcd_init+0x4548>)
 8005f12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f16:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005f18:	4b63      	ldr	r3, [pc, #396]	@ (80060a8 <lcd_init+0x4548>)
 8005f1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f1e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005f20:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	4b61      	ldr	r3, [pc, #388]	@ (80060ac <lcd_init+0x454c>)
 8005f28:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005f2a:	4b5f      	ldr	r3, [pc, #380]	@ (80060a8 <lcd_init+0x4548>)
 8005f2c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005f30:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005f32:	4b5d      	ldr	r3, [pc, #372]	@ (80060a8 <lcd_init+0x4548>)
 8005f34:	2280      	movs	r2, #128	@ 0x80
 8005f36:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005f38:	4b5b      	ldr	r3, [pc, #364]	@ (80060a8 <lcd_init+0x4548>)
 8005f3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f3e:	611a      	str	r2, [r3, #16]
}
 8005f40:	bf00      	nop

        lcd_wr_regno(0xBE); /* GIP 3 */
        lcd_wr_xdata(0x00);
 8005f42:	2000      	movs	r0, #0
 8005f44:	f7fa fcd0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f48:	2001      	movs	r0, #1
 8005f4a:	f7fa fccd 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xAB);
 8005f4e:	20ab      	movs	r0, #171	@ 0xab
 8005f50:	f7fa fcca 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x60);
 8005f54:	2060      	movs	r0, #96	@ 0x60
 8005f56:	f7fa fcc7 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f5a:	2022      	movs	r0, #34	@ 0x22
 8005f5c:	f7fa fcc4 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f60:	2022      	movs	r0, #34	@ 0x22
 8005f62:	f7fa fcc1 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f66:	2022      	movs	r0, #34	@ 0x22
 8005f68:	f7fa fcbe 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f6c:	2022      	movs	r0, #34	@ 0x22
 8005f6e:	f7fa fcbb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f72:	2022      	movs	r0, #34	@ 0x22
 8005f74:	f7fa fcb8 	bl	80008e8 <lcd_wr_xdata>
 8005f78:	23c7      	movs	r3, #199	@ 0xc7
 8005f7a:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80060a8 <lcd_init+0x4548>)
 8005f80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f84:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005f86:	4b48      	ldr	r3, [pc, #288]	@ (80060a8 <lcd_init+0x4548>)
 8005f88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f8c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005f8e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	4b45      	ldr	r3, [pc, #276]	@ (80060ac <lcd_init+0x454c>)
 8005f96:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005f98:	4b43      	ldr	r3, [pc, #268]	@ (80060a8 <lcd_init+0x4548>)
 8005f9a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005f9e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005fa0:	4b41      	ldr	r3, [pc, #260]	@ (80060a8 <lcd_init+0x4548>)
 8005fa2:	2280      	movs	r2, #128	@ 0x80
 8005fa4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005fa6:	4b40      	ldr	r3, [pc, #256]	@ (80060a8 <lcd_init+0x4548>)
 8005fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fac:	611a      	str	r2, [r3, #16]
}
 8005fae:	bf00      	nop

        lcd_wr_regno(0xC7); /* VCOM Control */
        lcd_wr_xdata(0x36);
 8005fb0:	2036      	movs	r0, #54	@ 0x36
 8005fb2:	f7fa fc99 	bl	80008e8 <lcd_wr_xdata>
 8005fb6:	23ed      	movs	r3, #237	@ 0xed
 8005fb8:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80060a8 <lcd_init+0x4548>)
 8005fbe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fc2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005fc4:	4b38      	ldr	r3, [pc, #224]	@ (80060a8 <lcd_init+0x4548>)
 8005fc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005fca:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005fcc:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	4b36      	ldr	r3, [pc, #216]	@ (80060ac <lcd_init+0x454c>)
 8005fd4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005fd6:	4b34      	ldr	r3, [pc, #208]	@ (80060a8 <lcd_init+0x4548>)
 8005fd8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005fdc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005fde:	4b32      	ldr	r3, [pc, #200]	@ (80060a8 <lcd_init+0x4548>)
 8005fe0:	2280      	movs	r2, #128	@ 0x80
 8005fe2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005fe4:	4b30      	ldr	r3, [pc, #192]	@ (80060a8 <lcd_init+0x4548>)
 8005fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fea:	611a      	str	r2, [r3, #16]
}
 8005fec:	bf00      	nop

        lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
        lcd_wr_xdata(0x7F);
 8005fee:	207f      	movs	r0, #127	@ 0x7f
 8005ff0:	f7fa fc7a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8005ff4:	200f      	movs	r0, #15
 8005ff6:	f7fa fc77 	bl	80008e8 <lcd_wr_xdata>
 8005ffa:	23c0      	movs	r3, #192	@ 0xc0
 8005ffc:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006000:	4b29      	ldr	r3, [pc, #164]	@ (80060a8 <lcd_init+0x4548>)
 8006002:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006006:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006008:	4b27      	ldr	r3, [pc, #156]	@ (80060a8 <lcd_init+0x4548>)
 800600a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800600e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006010:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8006014:	b29a      	uxth	r2, r3
 8006016:	4b25      	ldr	r3, [pc, #148]	@ (80060ac <lcd_init+0x454c>)
 8006018:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800601a:	4b23      	ldr	r3, [pc, #140]	@ (80060a8 <lcd_init+0x4548>)
 800601c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006020:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006022:	4b21      	ldr	r3, [pc, #132]	@ (80060a8 <lcd_init+0x4548>)
 8006024:	2280      	movs	r2, #128	@ 0x80
 8006026:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006028:	4b1f      	ldr	r3, [pc, #124]	@ (80060a8 <lcd_init+0x4548>)
 800602a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800602e:	611a      	str	r2, [r3, #16]
}
 8006030:	bf00      	nop

        lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
        lcd_wr_xdata(0x0F);
 8006032:	200f      	movs	r0, #15
 8006034:	f7fa fc58 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8006038:	200b      	movs	r0, #11
 800603a:	f7fa fc55 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* VGH 15V,VGLO-10V */
 800603e:	200a      	movs	r0, #10
 8006040:	f7fa fc52 	bl	80008e8 <lcd_wr_xdata>
 8006044:	23fc      	movs	r3, #252	@ 0xfc
 8006046:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800604a:	4b17      	ldr	r3, [pc, #92]	@ (80060a8 <lcd_init+0x4548>)
 800604c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006050:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006052:	4b15      	ldr	r3, [pc, #84]	@ (80060a8 <lcd_init+0x4548>)
 8006054:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006058:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800605a:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800605e:	b29a      	uxth	r2, r3
 8006060:	4b12      	ldr	r3, [pc, #72]	@ (80060ac <lcd_init+0x454c>)
 8006062:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006064:	4b10      	ldr	r3, [pc, #64]	@ (80060a8 <lcd_init+0x4548>)
 8006066:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800606a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800606c:	4b0e      	ldr	r3, [pc, #56]	@ (80060a8 <lcd_init+0x4548>)
 800606e:	2280      	movs	r2, #128	@ 0x80
 8006070:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006072:	4b0d      	ldr	r3, [pc, #52]	@ (80060a8 <lcd_init+0x4548>)
 8006074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006078:	611a      	str	r2, [r3, #16]
}
 800607a:	bf00      	nop

        lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
        lcd_wr_xdata(0x08);
 800607c:	2008      	movs	r0, #8
 800607e:	f7fa fc33 	bl	80008e8 <lcd_wr_xdata>
 8006082:	23df      	movs	r3, #223	@ 0xdf
 8006084:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006088:	4b07      	ldr	r3, [pc, #28]	@ (80060a8 <lcd_init+0x4548>)
 800608a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800608e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006090:	4b05      	ldr	r3, [pc, #20]	@ (80060a8 <lcd_init+0x4548>)
 8006092:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006096:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006098:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 800609c:	b29a      	uxth	r2, r3
 800609e:	4b03      	ldr	r3, [pc, #12]	@ (80060ac <lcd_init+0x454c>)
 80060a0:	60da      	str	r2, [r3, #12]
 80060a2:	e005      	b.n	80060b0 <lcd_init+0x4550>
 80060a4:	2000002c 	.word	0x2000002c
 80060a8:	40011000 	.word	0x40011000
 80060ac:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 80060b0:	4bc7      	ldr	r3, [pc, #796]	@ (80063d0 <lcd_init+0x4870>)
 80060b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80060b6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80060b8:	4bc5      	ldr	r3, [pc, #788]	@ (80063d0 <lcd_init+0x4870>)
 80060ba:	2280      	movs	r2, #128	@ 0x80
 80060bc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80060be:	4bc4      	ldr	r3, [pc, #784]	@ (80063d0 <lcd_init+0x4870>)
 80060c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c4:	611a      	str	r2, [r3, #16]
}
 80060c6:	bf00      	nop

        lcd_wr_regno(0XDF);
        lcd_wr_xdata(0x00);
 80060c8:	2000      	movs	r0, #0
 80060ca:	f7fa fc0d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80060ce:	2000      	movs	r0, #0
 80060d0:	f7fa fc0a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80060d4:	2000      	movs	r0, #0
 80060d6:	f7fa fc07 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80060da:	2000      	movs	r0, #0
 80060dc:	f7fa fc04 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80060e0:	2000      	movs	r0, #0
 80060e2:	f7fa fc01 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 80060e6:	2020      	movs	r0, #32
 80060e8:	f7fa fbfe 	bl	80008e8 <lcd_wr_xdata>
 80060ec:	23f3      	movs	r3, #243	@ 0xf3
 80060ee:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80060f2:	4bb7      	ldr	r3, [pc, #732]	@ (80063d0 <lcd_init+0x4870>)
 80060f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060f8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80060fa:	4bb5      	ldr	r3, [pc, #724]	@ (80063d0 <lcd_init+0x4870>)
 80060fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006100:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006102:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8006106:	b29a      	uxth	r2, r3
 8006108:	4bb2      	ldr	r3, [pc, #712]	@ (80063d4 <lcd_init+0x4874>)
 800610a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800610c:	4bb0      	ldr	r3, [pc, #704]	@ (80063d0 <lcd_init+0x4870>)
 800610e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006112:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006114:	4bae      	ldr	r3, [pc, #696]	@ (80063d0 <lcd_init+0x4870>)
 8006116:	2280      	movs	r2, #128	@ 0x80
 8006118:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800611a:	4bad      	ldr	r3, [pc, #692]	@ (80063d0 <lcd_init+0x4870>)
 800611c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006120:	611a      	str	r2, [r3, #16]
}
 8006122:	bf00      	nop

        lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
        lcd_wr_xdata(0x74);
 8006124:	2074      	movs	r0, #116	@ 0x74
 8006126:	f7fa fbdf 	bl	80008e8 <lcd_wr_xdata>
 800612a:	23b4      	movs	r3, #180	@ 0xb4
 800612c:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006130:	4ba7      	ldr	r3, [pc, #668]	@ (80063d0 <lcd_init+0x4870>)
 8006132:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006136:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006138:	4ba5      	ldr	r3, [pc, #660]	@ (80063d0 <lcd_init+0x4870>)
 800613a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800613e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006140:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8006144:	b29a      	uxth	r2, r3
 8006146:	4ba3      	ldr	r3, [pc, #652]	@ (80063d4 <lcd_init+0x4874>)
 8006148:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800614a:	4ba1      	ldr	r3, [pc, #644]	@ (80063d0 <lcd_init+0x4870>)
 800614c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006150:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006152:	4b9f      	ldr	r3, [pc, #636]	@ (80063d0 <lcd_init+0x4870>)
 8006154:	2280      	movs	r2, #128	@ 0x80
 8006156:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006158:	4b9d      	ldr	r3, [pc, #628]	@ (80063d0 <lcd_init+0x4870>)
 800615a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800615e:	611a      	str	r2, [r3, #16]
}
 8006160:	bf00      	nop

        lcd_wr_regno(0xB4); /* Inversion Type */
        lcd_wr_xdata(0x00);  /* 02 */
 8006162:	2000      	movs	r0, #0
 8006164:	f7fa fbc0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006168:	2000      	movs	r0, #0
 800616a:	f7fa fbbd 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 800616e:	2000      	movs	r0, #0
 8006170:	f7fa fbba 	bl	80008e8 <lcd_wr_xdata>
 8006174:	23f7      	movs	r3, #247	@ 0xf7
 8006176:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800617a:	4b95      	ldr	r3, [pc, #596]	@ (80063d0 <lcd_init+0x4870>)
 800617c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006180:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006182:	4b93      	ldr	r3, [pc, #588]	@ (80063d0 <lcd_init+0x4870>)
 8006184:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006188:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800618a:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 800618e:	b29a      	uxth	r2, r3
 8006190:	4b90      	ldr	r3, [pc, #576]	@ (80063d4 <lcd_init+0x4874>)
 8006192:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006194:	4b8e      	ldr	r3, [pc, #568]	@ (80063d0 <lcd_init+0x4870>)
 8006196:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800619a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800619c:	4b8c      	ldr	r3, [pc, #560]	@ (80063d0 <lcd_init+0x4870>)
 800619e:	2280      	movs	r2, #128	@ 0x80
 80061a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80061a2:	4b8b      	ldr	r3, [pc, #556]	@ (80063d0 <lcd_init+0x4870>)
 80061a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061a8:	611a      	str	r2, [r3, #16]
}
 80061aa:	bf00      	nop

        lcd_wr_regno(0xF7); /* Resolution Control */
        lcd_wr_xdata(0x82);  /* 480*800 */
 80061ac:	2082      	movs	r0, #130	@ 0x82
 80061ae:	f7fa fb9b 	bl	80008e8 <lcd_wr_xdata>
 80061b2:	23b1      	movs	r3, #177	@ 0xb1
 80061b4:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80061b8:	4b85      	ldr	r3, [pc, #532]	@ (80063d0 <lcd_init+0x4870>)
 80061ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061be:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80061c0:	4b83      	ldr	r3, [pc, #524]	@ (80063d0 <lcd_init+0x4870>)
 80061c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80061c6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80061c8:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	4b81      	ldr	r3, [pc, #516]	@ (80063d4 <lcd_init+0x4874>)
 80061d0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80061d2:	4b7f      	ldr	r3, [pc, #508]	@ (80063d0 <lcd_init+0x4870>)
 80061d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80061d8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80061da:	4b7d      	ldr	r3, [pc, #500]	@ (80063d0 <lcd_init+0x4870>)
 80061dc:	2280      	movs	r2, #128	@ 0x80
 80061de:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80061e0:	4b7b      	ldr	r3, [pc, #492]	@ (80063d0 <lcd_init+0x4870>)
 80061e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061e6:	611a      	str	r2, [r3, #16]
}
 80061e8:	bf00      	nop

        lcd_wr_regno(0xB1); /* FRAME RATE Setting */
        lcd_wr_xdata(0x00);
 80061ea:	2000      	movs	r0, #0
 80061ec:	f7fa fb7c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 80061f0:	2013      	movs	r0, #19
 80061f2:	f7fa fb79 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 80061f6:	2013      	movs	r0, #19
 80061f8:	f7fa fb76 	bl	80008e8 <lcd_wr_xdata>
 80061fc:	23f2      	movs	r3, #242	@ 0xf2
 80061fe:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006202:	4b73      	ldr	r3, [pc, #460]	@ (80063d0 <lcd_init+0x4870>)
 8006204:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006208:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800620a:	4b71      	ldr	r3, [pc, #452]	@ (80063d0 <lcd_init+0x4870>)
 800620c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006210:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006212:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8006216:	b29a      	uxth	r2, r3
 8006218:	4b6e      	ldr	r3, [pc, #440]	@ (80063d4 <lcd_init+0x4874>)
 800621a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800621c:	4b6c      	ldr	r3, [pc, #432]	@ (80063d0 <lcd_init+0x4870>)
 800621e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006222:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006224:	4b6a      	ldr	r3, [pc, #424]	@ (80063d0 <lcd_init+0x4870>)
 8006226:	2280      	movs	r2, #128	@ 0x80
 8006228:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800622a:	4b69      	ldr	r3, [pc, #420]	@ (80063d0 <lcd_init+0x4870>)
 800622c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006230:	611a      	str	r2, [r3, #16]
}
 8006232:	bf00      	nop

        lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
        lcd_wr_xdata(0x80);
 8006234:	2080      	movs	r0, #128	@ 0x80
 8006236:	f7fa fb57 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 800623a:	2004      	movs	r0, #4
 800623c:	f7fa fb54 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8006240:	2040      	movs	r0, #64	@ 0x40
 8006242:	f7fa fb51 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8006246:	2028      	movs	r0, #40	@ 0x28
 8006248:	f7fa fb4e 	bl	80008e8 <lcd_wr_xdata>
 800624c:	23c1      	movs	r3, #193	@ 0xc1
 800624e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006252:	4b5f      	ldr	r3, [pc, #380]	@ (80063d0 <lcd_init+0x4870>)
 8006254:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006258:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800625a:	4b5d      	ldr	r3, [pc, #372]	@ (80063d0 <lcd_init+0x4870>)
 800625c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006260:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006262:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8006266:	b29a      	uxth	r2, r3
 8006268:	4b5a      	ldr	r3, [pc, #360]	@ (80063d4 <lcd_init+0x4874>)
 800626a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800626c:	4b58      	ldr	r3, [pc, #352]	@ (80063d0 <lcd_init+0x4870>)
 800626e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006272:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006274:	4b56      	ldr	r3, [pc, #344]	@ (80063d0 <lcd_init+0x4870>)
 8006276:	2280      	movs	r2, #128	@ 0x80
 8006278:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800627a:	4b55      	ldr	r3, [pc, #340]	@ (80063d0 <lcd_init+0x4870>)
 800627c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006280:	611a      	str	r2, [r3, #16]
}
 8006282:	bf00      	nop

        lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
        lcd_wr_xdata(0x17);
 8006284:	2017      	movs	r0, #23
 8006286:	f7fa fb2f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMP */
 800628a:	2088      	movs	r0, #136	@ 0x88
 800628c:	f7fa fb2c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMN */
 8006290:	2088      	movs	r0, #136	@ 0x88
 8006292:	f7fa fb29 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 8006296:	2020      	movs	r0, #32
 8006298:	f7fa fb26 	bl	80008e8 <lcd_wr_xdata>
 800629c:	23e0      	movs	r3, #224	@ 0xe0
 800629e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80062a2:	4b4b      	ldr	r3, [pc, #300]	@ (80063d0 <lcd_init+0x4870>)
 80062a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80062aa:	4b49      	ldr	r3, [pc, #292]	@ (80063d0 <lcd_init+0x4870>)
 80062ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80062b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80062b2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	4b46      	ldr	r3, [pc, #280]	@ (80063d4 <lcd_init+0x4874>)
 80062ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80062bc:	4b44      	ldr	r3, [pc, #272]	@ (80063d0 <lcd_init+0x4870>)
 80062be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80062c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80062c4:	4b42      	ldr	r3, [pc, #264]	@ (80063d0 <lcd_init+0x4870>)
 80062c6:	2280      	movs	r2, #128	@ 0x80
 80062c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80062ca:	4b41      	ldr	r3, [pc, #260]	@ (80063d0 <lcd_init+0x4870>)
 80062cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062d0:	611a      	str	r2, [r3, #16]
}
 80062d2:	bf00      	nop

        lcd_wr_regno(0xE0); /* Positive Gamma Control */
        lcd_wr_xdata(0x00);  /* P1 */
 80062d4:	2000      	movs	r0, #0
 80062d6:	f7fa fb07 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P2 */
 80062da:	200a      	movs	r0, #10
 80062dc:	f7fa fb04 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);  /* P3 */
 80062e0:	2012      	movs	r0, #18
 80062e2:	f7fa fb01 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P4 */
 80062e6:	2010      	movs	r0, #16
 80062e8:	f7fa fafe 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 80062ec:	200e      	movs	r0, #14
 80062ee:	f7fa fafb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);  /* P6 */
 80062f2:	2020      	movs	r0, #32
 80062f4:	f7fa faf8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xCC);  /* P7 */
 80062f8:	20cc      	movs	r0, #204	@ 0xcc
 80062fa:	f7fa faf5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);  /* P8 */
 80062fe:	2007      	movs	r0, #7
 8006300:	f7fa faf2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 8006304:	2006      	movs	r0, #6
 8006306:	f7fa faef 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P10 */
 800630a:	200b      	movs	r0, #11
 800630c:	f7fa faec 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P11 */
 8006310:	200e      	movs	r0, #14
 8006312:	f7fa fae9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P12 */
 8006316:	200f      	movs	r0, #15
 8006318:	f7fa fae6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P13 */
 800631c:	200d      	movs	r0, #13
 800631e:	f7fa fae3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 8006322:	2015      	movs	r0, #21
 8006324:	f7fa fae0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P15 */
 8006328:	2010      	movs	r0, #16
 800632a:	f7fa fadd 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 800632e:	2000      	movs	r0, #0
 8006330:	f7fa fada 	bl	80008e8 <lcd_wr_xdata>
 8006334:	23e1      	movs	r3, #225	@ 0xe1
 8006336:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800633a:	4b25      	ldr	r3, [pc, #148]	@ (80063d0 <lcd_init+0x4870>)
 800633c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006340:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006342:	4b23      	ldr	r3, [pc, #140]	@ (80063d0 <lcd_init+0x4870>)
 8006344:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006348:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800634a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800634e:	b29a      	uxth	r2, r3
 8006350:	4b20      	ldr	r3, [pc, #128]	@ (80063d4 <lcd_init+0x4874>)
 8006352:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006354:	4b1e      	ldr	r3, [pc, #120]	@ (80063d0 <lcd_init+0x4870>)
 8006356:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800635a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800635c:	4b1c      	ldr	r3, [pc, #112]	@ (80063d0 <lcd_init+0x4870>)
 800635e:	2280      	movs	r2, #128	@ 0x80
 8006360:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006362:	4b1b      	ldr	r3, [pc, #108]	@ (80063d0 <lcd_init+0x4870>)
 8006364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006368:	611a      	str	r2, [r3, #16]
}
 800636a:	bf00      	nop

        lcd_wr_regno(0xE1); /* Negative Gamma Correction */
        lcd_wr_xdata(0x00);  /* P1 */
 800636c:	2000      	movs	r0, #0
 800636e:	f7fa fabb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P2 */
 8006372:	200b      	movs	r0, #11
 8006374:	f7fa fab8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);  /* P3 */
 8006378:	2013      	movs	r0, #19
 800637a:	f7fa fab5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P4 */
 800637e:	200d      	movs	r0, #13
 8006380:	f7fa fab2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 8006384:	200e      	movs	r0, #14
 8006386:	f7fa faaf 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);  /* P6 */
 800638a:	201b      	movs	r0, #27
 800638c:	f7fa faac 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x71);  /* P7 */
 8006390:	2071      	movs	r0, #113	@ 0x71
 8006392:	f7fa faa9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P8 */
 8006396:	2006      	movs	r0, #6
 8006398:	f7fa faa6 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 800639c:	2006      	movs	r0, #6
 800639e:	f7fa faa3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P10 */
 80063a2:	200a      	movs	r0, #10
 80063a4:	f7fa faa0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P11 */
 80063a8:	200f      	movs	r0, #15
 80063aa:	f7fa fa9d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P12 */
 80063ae:	200e      	movs	r0, #14
 80063b0:	f7fa fa9a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P13 */
 80063b4:	200f      	movs	r0, #15
 80063b6:	f7fa fa97 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 80063ba:	2015      	movs	r0, #21
 80063bc:	f7fa fa94 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);  /* P15 */
 80063c0:	200c      	movs	r0, #12
 80063c2:	f7fa fa91 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 80063c6:	2000      	movs	r0, #0
 80063c8:	f7fa fa8e 	bl	80008e8 <lcd_wr_xdata>
 80063cc:	e004      	b.n	80063d8 <lcd_init+0x4878>
 80063ce:	bf00      	nop
 80063d0:	40011000 	.word	0x40011000
 80063d4:	40010c00 	.word	0x40010c00
 80063d8:	232a      	movs	r3, #42	@ 0x2a
 80063da:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80063de:	4b72      	ldr	r3, [pc, #456]	@ (80065a8 <lcd_init+0x4a48>)
 80063e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063e4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80063e6:	4b70      	ldr	r3, [pc, #448]	@ (80065a8 <lcd_init+0x4a48>)
 80063e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80063ec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80063ee:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	4b6d      	ldr	r3, [pc, #436]	@ (80065ac <lcd_init+0x4a4c>)
 80063f6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80063f8:	4b6b      	ldr	r3, [pc, #428]	@ (80065a8 <lcd_init+0x4a48>)
 80063fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80063fe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006400:	4b69      	ldr	r3, [pc, #420]	@ (80065a8 <lcd_init+0x4a48>)
 8006402:	2280      	movs	r2, #128	@ 0x80
 8006404:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006406:	4b68      	ldr	r3, [pc, #416]	@ (80065a8 <lcd_init+0x4a48>)
 8006408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800640c:	611a      	str	r2, [r3, #16]
}
 800640e:	bf00      	nop

        lcd_wr_regno(0x2a);
        lcd_wr_xdata(0x00);
 8006410:	2000      	movs	r0, #0
 8006412:	f7fa fa69 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006416:	2000      	movs	r0, #0
 8006418:	f7fa fa66 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800641c:	2001      	movs	r0, #1
 800641e:	f7fa fa63 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xdf);
 8006422:	20df      	movs	r0, #223	@ 0xdf
 8006424:	f7fa fa60 	bl	80008e8 <lcd_wr_xdata>
 8006428:	232b      	movs	r3, #43	@ 0x2b
 800642a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800642e:	4b5e      	ldr	r3, [pc, #376]	@ (80065a8 <lcd_init+0x4a48>)
 8006430:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006434:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006436:	4b5c      	ldr	r3, [pc, #368]	@ (80065a8 <lcd_init+0x4a48>)
 8006438:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800643c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800643e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 8006442:	b29a      	uxth	r2, r3
 8006444:	4b59      	ldr	r3, [pc, #356]	@ (80065ac <lcd_init+0x4a4c>)
 8006446:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006448:	4b57      	ldr	r3, [pc, #348]	@ (80065a8 <lcd_init+0x4a48>)
 800644a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800644e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006450:	4b55      	ldr	r3, [pc, #340]	@ (80065a8 <lcd_init+0x4a48>)
 8006452:	2280      	movs	r2, #128	@ 0x80
 8006454:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006456:	4b54      	ldr	r3, [pc, #336]	@ (80065a8 <lcd_init+0x4a48>)
 8006458:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800645c:	611a      	str	r2, [r3, #16]
}
 800645e:	bf00      	nop

        lcd_wr_regno(0x2b);
        lcd_wr_xdata(0x00);
 8006460:	2000      	movs	r0, #0
 8006462:	f7fa fa41 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006466:	2000      	movs	r0, #0
 8006468:	f7fa fa3e 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 800646c:	2003      	movs	r0, #3
 800646e:	f7fa fa3b 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x1f);
 8006472:	201f      	movs	r0, #31
 8006474:	f7fa fa38 	bl	80008e8 <lcd_wr_xdata>
 8006478:	233a      	movs	r3, #58	@ 0x3a
 800647a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800647e:	4b4a      	ldr	r3, [pc, #296]	@ (80065a8 <lcd_init+0x4a48>)
 8006480:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006484:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006486:	4b48      	ldr	r3, [pc, #288]	@ (80065a8 <lcd_init+0x4a48>)
 8006488:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800648c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800648e:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8006492:	b29a      	uxth	r2, r3
 8006494:	4b45      	ldr	r3, [pc, #276]	@ (80065ac <lcd_init+0x4a4c>)
 8006496:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006498:	4b43      	ldr	r3, [pc, #268]	@ (80065a8 <lcd_init+0x4a48>)
 800649a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800649e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80064a0:	4b41      	ldr	r3, [pc, #260]	@ (80065a8 <lcd_init+0x4a48>)
 80064a2:	2280      	movs	r2, #128	@ 0x80
 80064a4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80064a6:	4b40      	ldr	r3, [pc, #256]	@ (80065a8 <lcd_init+0x4a48>)
 80064a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064ac:	611a      	str	r2, [r3, #16]
}
 80064ae:	bf00      	nop

        lcd_wr_regno(0x3A); /* Pixel Format */
        lcd_wr_xdata(0x55);
 80064b0:	2055      	movs	r0, #85	@ 0x55
 80064b2:	f7fa fa19 	bl	80008e8 <lcd_wr_xdata>
 80064b6:	2336      	movs	r3, #54	@ 0x36
 80064b8:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80064bc:	4b3a      	ldr	r3, [pc, #232]	@ (80065a8 <lcd_init+0x4a48>)
 80064be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064c2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80064c4:	4b38      	ldr	r3, [pc, #224]	@ (80065a8 <lcd_init+0x4a48>)
 80064c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80064ca:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80064cc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	4b36      	ldr	r3, [pc, #216]	@ (80065ac <lcd_init+0x4a4c>)
 80064d4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80064d6:	4b34      	ldr	r3, [pc, #208]	@ (80065a8 <lcd_init+0x4a48>)
 80064d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80064dc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80064de:	4b32      	ldr	r3, [pc, #200]	@ (80065a8 <lcd_init+0x4a48>)
 80064e0:	2280      	movs	r2, #128	@ 0x80
 80064e2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80064e4:	4b30      	ldr	r3, [pc, #192]	@ (80065a8 <lcd_init+0x4a48>)
 80064e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064ea:	611a      	str	r2, [r3, #16]
}
 80064ec:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Access Control */
        lcd_wr_xdata(0x00);  /* 02-180 */
 80064ee:	2000      	movs	r0, #0
 80064f0:	f7fa f9fa 	bl	80008e8 <lcd_wr_xdata>
 80064f4:	2311      	movs	r3, #17
 80064f6:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80064fa:	4b2b      	ldr	r3, [pc, #172]	@ (80065a8 <lcd_init+0x4a48>)
 80064fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006500:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006502:	4b29      	ldr	r3, [pc, #164]	@ (80065a8 <lcd_init+0x4a48>)
 8006504:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006508:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800650a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800650e:	b29a      	uxth	r2, r3
 8006510:	4b26      	ldr	r3, [pc, #152]	@ (80065ac <lcd_init+0x4a4c>)
 8006512:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006514:	4b24      	ldr	r3, [pc, #144]	@ (80065a8 <lcd_init+0x4a48>)
 8006516:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800651a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800651c:	4b22      	ldr	r3, [pc, #136]	@ (80065a8 <lcd_init+0x4a48>)
 800651e:	2280      	movs	r2, #128	@ 0x80
 8006520:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006522:	4b21      	ldr	r3, [pc, #132]	@ (80065a8 <lcd_init+0x4a48>)
 8006524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006528:	611a      	str	r2, [r3, #16]
}
 800652a:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(120);
 800652c:	2078      	movs	r0, #120	@ 0x78
 800652e:	f000 fe87 	bl	8007240 <HAL_Delay>
 8006532:	2329      	movs	r3, #41	@ 0x29
 8006534:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006538:	4b1b      	ldr	r3, [pc, #108]	@ (80065a8 <lcd_init+0x4a48>)
 800653a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800653e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006540:	4b19      	ldr	r3, [pc, #100]	@ (80065a8 <lcd_init+0x4a48>)
 8006542:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006546:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006548:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 800654c:	b29a      	uxth	r2, r3
 800654e:	4b17      	ldr	r3, [pc, #92]	@ (80065ac <lcd_init+0x4a4c>)
 8006550:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006552:	4b15      	ldr	r3, [pc, #84]	@ (80065a8 <lcd_init+0x4a48>)
 8006554:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006558:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800655a:	4b13      	ldr	r3, [pc, #76]	@ (80065a8 <lcd_init+0x4a48>)
 800655c:	2280      	movs	r2, #128	@ 0x80
 800655e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006560:	4b11      	ldr	r3, [pc, #68]	@ (80065a8 <lcd_init+0x4a48>)
 8006562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006566:	611a      	str	r2, [r3, #16]
}
 8006568:	bf00      	nop
        lcd_wr_regno(0x29);
        HAL_Delay(20);
 800656a:	2014      	movs	r0, #20
 800656c:	f000 fe68 	bl	8007240 <HAL_Delay>
 8006570:	232c      	movs	r3, #44	@ 0x2c
 8006572:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006576:	4b0c      	ldr	r3, [pc, #48]	@ (80065a8 <lcd_init+0x4a48>)
 8006578:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800657c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800657e:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <lcd_init+0x4a48>)
 8006580:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006584:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006586:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
 800658a:	b29a      	uxth	r2, r3
 800658c:	4b07      	ldr	r3, [pc, #28]	@ (80065ac <lcd_init+0x4a4c>)
 800658e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006590:	4b05      	ldr	r3, [pc, #20]	@ (80065a8 <lcd_init+0x4a48>)
 8006592:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006596:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006598:	4b03      	ldr	r3, [pc, #12]	@ (80065a8 <lcd_init+0x4a48>)
 800659a:	2280      	movs	r2, #128	@ 0x80
 800659c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800659e:	4b02      	ldr	r3, [pc, #8]	@ (80065a8 <lcd_init+0x4a48>)
 80065a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065a4:	611a      	str	r2, [r3, #16]
}
 80065a6:	e224      	b.n	80069f2 <lcd_init+0x4e92>
 80065a8:	40011000 	.word	0x40011000
 80065ac:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2C);
    }
    else if (lcddev.id == 0x1963)
 80065b0:	4bbe      	ldr	r3, [pc, #760]	@ (80068ac <lcd_init+0x4d4c>)
 80065b2:	889b      	ldrh	r3, [r3, #4]
 80065b4:	f641 1263 	movw	r2, #6499	@ 0x1963
 80065b8:	4293      	cmp	r3, r2
 80065ba:	f040 821a 	bne.w	80069f2 <lcd_init+0x4e92>
 80065be:	23e2      	movs	r3, #226	@ 0xe2
 80065c0:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80065c4:	4bba      	ldr	r3, [pc, #744]	@ (80068b0 <lcd_init+0x4d50>)
 80065c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065ca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80065cc:	4bb8      	ldr	r3, [pc, #736]	@ (80068b0 <lcd_init+0x4d50>)
 80065ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065d2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80065d4:	f8b7 3152 	ldrh.w	r3, [r7, #338]	@ 0x152
 80065d8:	b29a      	uxth	r2, r3
 80065da:	4bb6      	ldr	r3, [pc, #728]	@ (80068b4 <lcd_init+0x4d54>)
 80065dc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80065de:	4bb4      	ldr	r3, [pc, #720]	@ (80068b0 <lcd_init+0x4d50>)
 80065e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80065e4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80065e6:	4bb2      	ldr	r3, [pc, #712]	@ (80068b0 <lcd_init+0x4d50>)
 80065e8:	2280      	movs	r2, #128	@ 0x80
 80065ea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80065ec:	4bb0      	ldr	r3, [pc, #704]	@ (80068b0 <lcd_init+0x4d50>)
 80065ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065f2:	611a      	str	r2, [r3, #16]
}
 80065f4:	bf00      	nop
    {
        //lcd_ex_ssd1963_reginit();   /* ִ��SSD1963��ʼ�� */
        lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
        lcd_wr_xdata(0x1D); /* ����1 */
 80065f6:	201d      	movs	r0, #29
 80065f8:	f7fa f976 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x02); /* ����2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 80065fc:	2002      	movs	r0, #2
 80065fe:	f7fa f973 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x04); /* ����3 Validate M and N values */
 8006602:	2004      	movs	r0, #4
 8006604:	f7fa f970 	bl	80008e8 <lcd_wr_xdata>
 8006608:	23e0      	movs	r3, #224	@ 0xe0
 800660a:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800660e:	4ba8      	ldr	r3, [pc, #672]	@ (80068b0 <lcd_init+0x4d50>)
 8006610:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006614:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006616:	4ba6      	ldr	r3, [pc, #664]	@ (80068b0 <lcd_init+0x4d50>)
 8006618:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800661c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800661e:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 8006622:	b29a      	uxth	r2, r3
 8006624:	4ba3      	ldr	r3, [pc, #652]	@ (80068b4 <lcd_init+0x4d54>)
 8006626:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006628:	4ba1      	ldr	r3, [pc, #644]	@ (80068b0 <lcd_init+0x4d50>)
 800662a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800662e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006630:	4b9f      	ldr	r3, [pc, #636]	@ (80068b0 <lcd_init+0x4d50>)
 8006632:	2280      	movs	r2, #128	@ 0x80
 8006634:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006636:	4b9e      	ldr	r3, [pc, #632]	@ (80068b0 <lcd_init+0x4d50>)
 8006638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800663c:	611a      	str	r2, [r3, #16]
}
 800663e:	bf00      	nop
        //delay_us(100);
        lcd_wr_regno(0xE0); /*  Start PLL command */
        lcd_wr_xdata(0x01); /*  enable PLL */
 8006640:	2001      	movs	r0, #1
 8006642:	f7fa f951 	bl	80008e8 <lcd_wr_xdata>
        HAL_Delay(10);
 8006646:	200a      	movs	r0, #10
 8006648:	f000 fdfa 	bl	8007240 <HAL_Delay>
 800664c:	23e0      	movs	r3, #224	@ 0xe0
 800664e:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006652:	4b97      	ldr	r3, [pc, #604]	@ (80068b0 <lcd_init+0x4d50>)
 8006654:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006658:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800665a:	4b95      	ldr	r3, [pc, #596]	@ (80068b0 <lcd_init+0x4d50>)
 800665c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006660:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006662:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8006666:	b29a      	uxth	r2, r3
 8006668:	4b92      	ldr	r3, [pc, #584]	@ (80068b4 <lcd_init+0x4d54>)
 800666a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800666c:	4b90      	ldr	r3, [pc, #576]	@ (80068b0 <lcd_init+0x4d50>)
 800666e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006672:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006674:	4b8e      	ldr	r3, [pc, #568]	@ (80068b0 <lcd_init+0x4d50>)
 8006676:	2280      	movs	r2, #128	@ 0x80
 8006678:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800667a:	4b8d      	ldr	r3, [pc, #564]	@ (80068b0 <lcd_init+0x4d50>)
 800667c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006680:	611a      	str	r2, [r3, #16]
}
 8006682:	bf00      	nop
        lcd_wr_regno(0xE0); /*  Start PLL command again */
        lcd_wr_xdata(0x03); /*  now, use PLL output as system clock */
 8006684:	2003      	movs	r0, #3
 8006686:	f7fa f92f 	bl	80008e8 <lcd_wr_xdata>
        HAL_Delay(12);
 800668a:	200c      	movs	r0, #12
 800668c:	f000 fdd8 	bl	8007240 <HAL_Delay>
 8006690:	2301      	movs	r3, #1
 8006692:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006696:	4b86      	ldr	r3, [pc, #536]	@ (80068b0 <lcd_init+0x4d50>)
 8006698:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800669c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800669e:	4b84      	ldr	r3, [pc, #528]	@ (80068b0 <lcd_init+0x4d50>)
 80066a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066a6:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	4b81      	ldr	r3, [pc, #516]	@ (80068b4 <lcd_init+0x4d54>)
 80066ae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80066b0:	4b7f      	ldr	r3, [pc, #508]	@ (80068b0 <lcd_init+0x4d50>)
 80066b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80066b6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80066b8:	4b7d      	ldr	r3, [pc, #500]	@ (80068b0 <lcd_init+0x4d50>)
 80066ba:	2280      	movs	r2, #128	@ 0x80
 80066bc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80066be:	4b7c      	ldr	r3, [pc, #496]	@ (80068b0 <lcd_init+0x4d50>)
 80066c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066c4:	611a      	str	r2, [r3, #16]
}
 80066c6:	bf00      	nop
        lcd_wr_regno(0x01); /* ��λ */
        HAL_Delay(10);
 80066c8:	200a      	movs	r0, #10
 80066ca:	f000 fdb9 	bl	8007240 <HAL_Delay>
 80066ce:	23e6      	movs	r3, #230	@ 0xe6
 80066d0:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80066d4:	4b76      	ldr	r3, [pc, #472]	@ (80068b0 <lcd_init+0x4d50>)
 80066d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066da:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80066dc:	4b74      	ldr	r3, [pc, #464]	@ (80068b0 <lcd_init+0x4d50>)
 80066de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066e2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066e4:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	4b72      	ldr	r3, [pc, #456]	@ (80068b4 <lcd_init+0x4d54>)
 80066ec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80066ee:	4b70      	ldr	r3, [pc, #448]	@ (80068b0 <lcd_init+0x4d50>)
 80066f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80066f4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80066f6:	4b6e      	ldr	r3, [pc, #440]	@ (80068b0 <lcd_init+0x4d50>)
 80066f8:	2280      	movs	r2, #128	@ 0x80
 80066fa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80066fc:	4b6c      	ldr	r3, [pc, #432]	@ (80068b0 <lcd_init+0x4d50>)
 80066fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006702:	611a      	str	r2, [r3, #16]
}
 8006704:	bf00      	nop

        lcd_wr_regno(0xE6); /* ��������Ƶ��,33Mhz */
        lcd_wr_xdata(0x2F);
 8006706:	202f      	movs	r0, #47	@ 0x2f
 8006708:	f7fa f8ee 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 800670c:	20ff      	movs	r0, #255	@ 0xff
 800670e:	f7fa f8eb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006712:	20ff      	movs	r0, #255	@ 0xff
 8006714:	f7fa f8e8 	bl	80008e8 <lcd_wr_xdata>
 8006718:	23b0      	movs	r3, #176	@ 0xb0
 800671a:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800671e:	4b64      	ldr	r3, [pc, #400]	@ (80068b0 <lcd_init+0x4d50>)
 8006720:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006724:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006726:	4b62      	ldr	r3, [pc, #392]	@ (80068b0 <lcd_init+0x4d50>)
 8006728:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800672c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800672e:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 8006732:	b29a      	uxth	r2, r3
 8006734:	4b5f      	ldr	r3, [pc, #380]	@ (80068b4 <lcd_init+0x4d54>)
 8006736:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006738:	4b5d      	ldr	r3, [pc, #372]	@ (80068b0 <lcd_init+0x4d50>)
 800673a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800673e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006740:	4b5b      	ldr	r3, [pc, #364]	@ (80068b0 <lcd_init+0x4d50>)
 8006742:	2280      	movs	r2, #128	@ 0x80
 8006744:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006746:	4b5a      	ldr	r3, [pc, #360]	@ (80068b0 <lcd_init+0x4d50>)
 8006748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800674c:	611a      	str	r2, [r3, #16]
}
 800674e:	bf00      	nop

        lcd_wr_regno(0xB0); /* ����LCDģʽ */
        lcd_wr_xdata(0x20); /* 24λģʽ */
 8006750:	2020      	movs	r0, #32
 8006752:	f7fa f8c9 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* TFT ģʽ */
 8006756:	2000      	movs	r0, #0
 8006758:	f7fa f8c6 	bl	80008e8 <lcd_wr_xdata>

        lcd_wr_xdata((SSD_HOR_RESOLUTION - 1) >> 8); /* ����LCDˮƽ���� */
 800675c:	2003      	movs	r0, #3
 800675e:	f7fa f8c3 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_RESOLUTION - 1);
 8006762:	f240 301f 	movw	r0, #799	@ 0x31f
 8006766:	f7fa f8bf 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata((SSD_VER_RESOLUTION - 1) >> 8); /* ����LCD��ֱ���� */
 800676a:	2001      	movs	r0, #1
 800676c:	f7fa f8bc 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_RESOLUTION - 1);
 8006770:	f240 10df 	movw	r0, #479	@ 0x1df
 8006774:	f7fa f8b8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* RGB���� */
 8006778:	2000      	movs	r0, #0
 800677a:	f7fa f8b5 	bl	80008e8 <lcd_wr_xdata>
 800677e:	23b4      	movs	r3, #180	@ 0xb4
 8006780:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006784:	4b4a      	ldr	r3, [pc, #296]	@ (80068b0 <lcd_init+0x4d50>)
 8006786:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800678a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800678c:	4b48      	ldr	r3, [pc, #288]	@ (80068b0 <lcd_init+0x4d50>)
 800678e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006792:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006794:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8006798:	b29a      	uxth	r2, r3
 800679a:	4b46      	ldr	r3, [pc, #280]	@ (80068b4 <lcd_init+0x4d54>)
 800679c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800679e:	4b44      	ldr	r3, [pc, #272]	@ (80068b0 <lcd_init+0x4d50>)
 80067a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80067a4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80067a6:	4b42      	ldr	r3, [pc, #264]	@ (80068b0 <lcd_init+0x4d50>)
 80067a8:	2280      	movs	r2, #128	@ 0x80
 80067aa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067ac:	4b40      	ldr	r3, [pc, #256]	@ (80068b0 <lcd_init+0x4d50>)
 80067ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067b2:	611a      	str	r2, [r3, #16]
}
 80067b4:	bf00      	nop

        lcd_wr_regno(0xB4); /* Set horizontal period */
        lcd_wr_xdata((SSD_HT - 1) >> 8);
 80067b6:	2004      	movs	r0, #4
 80067b8:	f7fa f896 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HT - 1);
 80067bc:	f240 401f 	movw	r0, #1055	@ 0x41f
 80067c0:	f7fa f892 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS >> 8);
 80067c4:	2000      	movs	r0, #0
 80067c6:	f7fa f88f 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS);
 80067ca:	202e      	movs	r0, #46	@ 0x2e
 80067cc:	f7fa f88c 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_PULSE_WIDTH - 1);
 80067d0:	2000      	movs	r0, #0
 80067d2:	f7fa f889 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80067d6:	2000      	movs	r0, #0
 80067d8:	f7fa f886 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80067dc:	2000      	movs	r0, #0
 80067de:	f7fa f883 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80067e2:	2000      	movs	r0, #0
 80067e4:	f7fa f880 	bl	80008e8 <lcd_wr_xdata>
 80067e8:	23b6      	movs	r3, #182	@ 0xb6
 80067ea:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80067ee:	4b30      	ldr	r3, [pc, #192]	@ (80068b0 <lcd_init+0x4d50>)
 80067f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067f4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80067f6:	4b2e      	ldr	r3, [pc, #184]	@ (80068b0 <lcd_init+0x4d50>)
 80067f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067fc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80067fe:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8006802:	b29a      	uxth	r2, r3
 8006804:	4b2b      	ldr	r3, [pc, #172]	@ (80068b4 <lcd_init+0x4d54>)
 8006806:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006808:	4b29      	ldr	r3, [pc, #164]	@ (80068b0 <lcd_init+0x4d50>)
 800680a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800680e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006810:	4b27      	ldr	r3, [pc, #156]	@ (80068b0 <lcd_init+0x4d50>)
 8006812:	2280      	movs	r2, #128	@ 0x80
 8006814:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006816:	4b26      	ldr	r3, [pc, #152]	@ (80068b0 <lcd_init+0x4d50>)
 8006818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800681c:	611a      	str	r2, [r3, #16]
}
 800681e:	bf00      	nop
        lcd_wr_regno(0xB6); /* Set vertical perio */
        lcd_wr_xdata((SSD_VT - 1) >> 8);
 8006820:	2002      	movs	r0, #2
 8006822:	f7fa f861 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VT - 1);
 8006826:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 800682a:	f7fa f85d 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS >> 8);
 800682e:	2000      	movs	r0, #0
 8006830:	f7fa f85a 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS);
 8006834:	2017      	movs	r0, #23
 8006836:	f7fa f857 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_FRONT_PORCH - 1);
 800683a:	2015      	movs	r0, #21
 800683c:	f7fa f854 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006840:	2000      	movs	r0, #0
 8006842:	f7fa f851 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006846:	2000      	movs	r0, #0
 8006848:	f7fa f84e 	bl	80008e8 <lcd_wr_xdata>
 800684c:	23f0      	movs	r3, #240	@ 0xf0
 800684e:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006852:	4b17      	ldr	r3, [pc, #92]	@ (80068b0 <lcd_init+0x4d50>)
 8006854:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006858:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800685a:	4b15      	ldr	r3, [pc, #84]	@ (80068b0 <lcd_init+0x4d50>)
 800685c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006860:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006862:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8006866:	b29a      	uxth	r2, r3
 8006868:	4b12      	ldr	r3, [pc, #72]	@ (80068b4 <lcd_init+0x4d54>)
 800686a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800686c:	4b10      	ldr	r3, [pc, #64]	@ (80068b0 <lcd_init+0x4d50>)
 800686e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006872:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006874:	4b0e      	ldr	r3, [pc, #56]	@ (80068b0 <lcd_init+0x4d50>)
 8006876:	2280      	movs	r2, #128	@ 0x80
 8006878:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800687a:	4b0d      	ldr	r3, [pc, #52]	@ (80068b0 <lcd_init+0x4d50>)
 800687c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006880:	611a      	str	r2, [r3, #16]
}
 8006882:	bf00      	nop

        lcd_wr_regno(0xF0); /* ����SSD1963��CPU�ӿ�Ϊ16bit */
        lcd_wr_xdata(0x03); /* 16-bit(565 format) data for 16bpp */
 8006884:	2003      	movs	r0, #3
 8006886:	f7fa f82f 	bl	80008e8 <lcd_wr_xdata>
 800688a:	2329      	movs	r3, #41	@ 0x29
 800688c:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006890:	4b07      	ldr	r3, [pc, #28]	@ (80068b0 <lcd_init+0x4d50>)
 8006892:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006896:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006898:	4b05      	ldr	r3, [pc, #20]	@ (80068b0 <lcd_init+0x4d50>)
 800689a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800689e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80068a0:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	4b03      	ldr	r3, [pc, #12]	@ (80068b4 <lcd_init+0x4d54>)
 80068a8:	60da      	str	r2, [r3, #12]
 80068aa:	e005      	b.n	80068b8 <lcd_init+0x4d58>
 80068ac:	2000002c 	.word	0x2000002c
 80068b0:	40011000 	.word	0x40011000
 80068b4:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 80068b8:	4b56      	ldr	r3, [pc, #344]	@ (8006a14 <lcd_init+0x4eb4>)
 80068ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068be:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80068c0:	4b54      	ldr	r3, [pc, #336]	@ (8006a14 <lcd_init+0x4eb4>)
 80068c2:	2280      	movs	r2, #128	@ 0x80
 80068c4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068c6:	4b53      	ldr	r3, [pc, #332]	@ (8006a14 <lcd_init+0x4eb4>)
 80068c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068cc:	611a      	str	r2, [r3, #16]
}
 80068ce:	bf00      	nop
 80068d0:	23d0      	movs	r3, #208	@ 0xd0
 80068d2:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80068d6:	4b4f      	ldr	r3, [pc, #316]	@ (8006a14 <lcd_init+0x4eb4>)
 80068d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068dc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80068de:	4b4d      	ldr	r3, [pc, #308]	@ (8006a14 <lcd_init+0x4eb4>)
 80068e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068e4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80068e6:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	4b4a      	ldr	r3, [pc, #296]	@ (8006a18 <lcd_init+0x4eb8>)
 80068ee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80068f0:	4b48      	ldr	r3, [pc, #288]	@ (8006a14 <lcd_init+0x4eb4>)
 80068f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068f6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80068f8:	4b46      	ldr	r3, [pc, #280]	@ (8006a14 <lcd_init+0x4eb4>)
 80068fa:	2280      	movs	r2, #128	@ 0x80
 80068fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068fe:	4b45      	ldr	r3, [pc, #276]	@ (8006a14 <lcd_init+0x4eb4>)
 8006900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006904:	611a      	str	r2, [r3, #16]
}
 8006906:	bf00      	nop

        lcd_wr_regno(0x29); /* ������ʾ */
        /* ����PWM���  ����ͨ��ռ�ձȿɵ� */
        lcd_wr_regno(0xD0); /* �����Զ���ƽ��DBC */
        lcd_wr_xdata(0x00); /* disable */
 8006908:	2000      	movs	r0, #0
 800690a:	f7f9 ffed 	bl	80008e8 <lcd_wr_xdata>
 800690e:	23be      	movs	r3, #190	@ 0xbe
 8006910:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006914:	4b3f      	ldr	r3, [pc, #252]	@ (8006a14 <lcd_init+0x4eb4>)
 8006916:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800691a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800691c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a14 <lcd_init+0x4eb4>)
 800691e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006922:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006924:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8006928:	b29a      	uxth	r2, r3
 800692a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a18 <lcd_init+0x4eb8>)
 800692c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800692e:	4b39      	ldr	r3, [pc, #228]	@ (8006a14 <lcd_init+0x4eb4>)
 8006930:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006934:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006936:	4b37      	ldr	r3, [pc, #220]	@ (8006a14 <lcd_init+0x4eb4>)
 8006938:	2280      	movs	r2, #128	@ 0x80
 800693a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800693c:	4b35      	ldr	r3, [pc, #212]	@ (8006a14 <lcd_init+0x4eb4>)
 800693e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006942:	611a      	str	r2, [r3, #16]
}
 8006944:	bf00      	nop

        lcd_wr_regno(0xBE); /* ����PWM��� */
        lcd_wr_xdata(0x05); /* 1����PWMƵ�� */
 8006946:	2005      	movs	r0, #5
 8006948:	f7f9 ffce 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE); /* 2����PWMռ�ձ� */
 800694c:	20fe      	movs	r0, #254	@ 0xfe
 800694e:	f7f9 ffcb 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* 3����C */
 8006952:	2001      	movs	r0, #1
 8006954:	f7f9 ffc8 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 4����D */
 8006958:	2000      	movs	r0, #0
 800695a:	f7f9 ffc5 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 5����E */
 800695e:	2000      	movs	r0, #0
 8006960:	f7f9 ffc2 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 6����F */
 8006964:	2000      	movs	r0, #0
 8006966:	f7f9 ffbf 	bl	80008e8 <lcd_wr_xdata>
 800696a:	23b8      	movs	r3, #184	@ 0xb8
 800696c:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006970:	4b28      	ldr	r3, [pc, #160]	@ (8006a14 <lcd_init+0x4eb4>)
 8006972:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006976:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006978:	4b26      	ldr	r3, [pc, #152]	@ (8006a14 <lcd_init+0x4eb4>)
 800697a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800697e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006980:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8006984:	b29a      	uxth	r2, r3
 8006986:	4b24      	ldr	r3, [pc, #144]	@ (8006a18 <lcd_init+0x4eb8>)
 8006988:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800698a:	4b22      	ldr	r3, [pc, #136]	@ (8006a14 <lcd_init+0x4eb4>)
 800698c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006990:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006992:	4b20      	ldr	r3, [pc, #128]	@ (8006a14 <lcd_init+0x4eb4>)
 8006994:	2280      	movs	r2, #128	@ 0x80
 8006996:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006998:	4b1e      	ldr	r3, [pc, #120]	@ (8006a14 <lcd_init+0x4eb4>)
 800699a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800699e:	611a      	str	r2, [r3, #16]
}
 80069a0:	bf00      	nop

        lcd_wr_regno(0xB8); /* ����GPIO���� */
        lcd_wr_xdata(0x03); /* 2��IO�����ó���� */
 80069a2:	2003      	movs	r0, #3
 80069a4:	f7f9 ffa0 	bl	80008e8 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* GPIOʹ��������IO���� */
 80069a8:	2001      	movs	r0, #1
 80069aa:	f7f9 ff9d 	bl	80008e8 <lcd_wr_xdata>
 80069ae:	23ba      	movs	r3, #186	@ 0xba
 80069b0:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80069b4:	4b17      	ldr	r3, [pc, #92]	@ (8006a14 <lcd_init+0x4eb4>)
 80069b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069ba:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80069bc:	4b15      	ldr	r3, [pc, #84]	@ (8006a14 <lcd_init+0x4eb4>)
 80069be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069c2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80069c4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	4b13      	ldr	r3, [pc, #76]	@ (8006a18 <lcd_init+0x4eb8>)
 80069cc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80069ce:	4b11      	ldr	r3, [pc, #68]	@ (8006a14 <lcd_init+0x4eb4>)
 80069d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80069d4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80069d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006a14 <lcd_init+0x4eb4>)
 80069d8:	2280      	movs	r2, #128	@ 0x80
 80069da:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80069dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006a14 <lcd_init+0x4eb4>)
 80069de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069e2:	611a      	str	r2, [r3, #16]
}
 80069e4:	bf00      	nop
        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0X01); /* GPIO[1:0]=01,����LCD���� */
 80069e6:	2001      	movs	r0, #1
 80069e8:	f7f9 ff7e 	bl	80008e8 <lcd_wr_xdata>
        lcd_ssd_backlight_set(100); /* ��������Ϊ���� */
 80069ec:	2064      	movs	r0, #100	@ 0x64
 80069ee:	f7fa ff1f 	bl	8001830 <lcd_ssd_backlight_set>
    }

    lcd_display_dir(0); /* Ĭ��Ϊ���� */
 80069f2:	2000      	movs	r0, #0
 80069f4:	f7fa ffdc 	bl	80019b0 <lcd_display_dir>
    LCD_BL(1);          /* �������� */
 80069f8:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <lcd_init+0x4eb4>)
 80069fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80069fe:	611a      	str	r2, [r3, #16]
    lcd_clear(WHITE);
 8006a00:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006a04:	f000 f80a 	bl	8006a1c <lcd_clear>
}
 8006a08:	bf00      	nop
 8006a0a:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40011000 	.word	0x40011000
 8006a18:	40010c00 	.word	0x40010c00

08006a1c <lcd_clear>:
 * @brief       ��������
 * @param       color: Ҫ��������ɫ
 * @retval      ��
 */
void lcd_clear(uint16_t color)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
    uint32_t totalpoint = lcddev.width;
 8006a2a:	4b27      	ldr	r3, [pc, #156]	@ (8006ac8 <lcd_clear+0xac>)
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	613b      	str	r3, [r7, #16]
    totalpoint *= lcddev.height;    /* �õ��ܵ��� */
 8006a30:	4b25      	ldr	r3, [pc, #148]	@ (8006ac8 <lcd_clear+0xac>)
 8006a32:	885b      	ldrh	r3, [r3, #2]
 8006a34:	461a      	mov	r2, r3
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	fb02 f303 	mul.w	r3, r2, r3
 8006a3c:	613b      	str	r3, [r7, #16]
    lcd_set_cursor(0x00, 0x0000);   /* ���ù��λ�� */
 8006a3e:	2100      	movs	r1, #0
 8006a40:	2000      	movs	r0, #0
 8006a42:	f7fa f80b 	bl	8000a5c <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8006a46:	4b20      	ldr	r3, [pc, #128]	@ (8006ac8 <lcd_clear+0xac>)
 8006a48:	891b      	ldrh	r3, [r3, #8]
 8006a4a:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8006acc <lcd_clear+0xb0>)
 8006a4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a52:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a54:	4b1d      	ldr	r3, [pc, #116]	@ (8006acc <lcd_clear+0xb0>)
 8006a56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a5a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a5c:	89fb      	ldrh	r3, [r7, #14]
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad0 <lcd_clear+0xb4>)
 8006a62:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a64:	4b19      	ldr	r3, [pc, #100]	@ (8006acc <lcd_clear+0xb0>)
 8006a66:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a6a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a6c:	4b17      	ldr	r3, [pc, #92]	@ (8006acc <lcd_clear+0xb0>)
 8006a6e:	2280      	movs	r2, #128	@ 0x80
 8006a70:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a72:	4b16      	ldr	r3, [pc, #88]	@ (8006acc <lcd_clear+0xb0>)
 8006a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a78:	611a      	str	r2, [r3, #16]
}
 8006a7a:	bf00      	nop
}
 8006a7c:	bf00      	nop
     * RS, CS�Ĳ���, �Ӷ������ٶ�, ��51֡��ߵ�78֡����, ���50%
     * ��������: -O2�Ż�, ��ˢ��
     * �����ٶ�Ҫ���ʱ��, ���Լ����Ż�: lcd_fill, lcd_color_fill, 
     * lcd_set_cursor �� lcd_draw_point �Ⱥ���, ��ҿ��������Ż�
     */
    LCD_RS(1);                      /* RS=1,��ʾд���� */
 8006a7e:	4b13      	ldr	r3, [pc, #76]	@ (8006acc <lcd_clear+0xb0>)
 8006a80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a84:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a86:	4b11      	ldr	r3, [pc, #68]	@ (8006acc <lcd_clear+0xb0>)
 8006a88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a8c:	611a      	str	r2, [r3, #16]
    
    for (index = 0; index < totalpoint; index++)
 8006a8e:	2300      	movs	r3, #0
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	e00c      	b.n	8006aae <lcd_clear+0x92>
    {
        LCD_DATA_OUT(color);        /* д��Ҫд������ */
 8006a94:	4a0e      	ldr	r2, [pc, #56]	@ (8006ad0 <lcd_clear+0xb4>)
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	60d3      	str	r3, [r2, #12]
        LCD_WR(0);
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006acc <lcd_clear+0xb0>)
 8006a9c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006aa0:	611a      	str	r2, [r3, #16]
        LCD_WR(1);
 8006aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8006acc <lcd_clear+0xb0>)
 8006aa4:	2280      	movs	r2, #128	@ 0x80
 8006aa6:	611a      	str	r2, [r3, #16]
    for (index = 0; index < totalpoint; index++)
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d3ee      	bcc.n	8006a94 <lcd_clear+0x78>
    }
    
    LCD_CS(1);
 8006ab6:	4b05      	ldr	r3, [pc, #20]	@ (8006acc <lcd_clear+0xb0>)
 8006ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006abc:	611a      	str	r2, [r3, #16]
}
 8006abe:	bf00      	nop
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	2000002c 	.word	0x2000002c
 8006acc:	40011000 	.word	0x40011000
 8006ad0:	40010c00 	.word	0x40010c00

08006ad4 <lcd_show_char>:
 * @param       mode : ���ӷ�ʽ(1); �ǵ��ӷ�ʽ(0);
 * @param       color : �ַ�����ɫ;
 * @retval      ��
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8006ad4:	b590      	push	{r4, r7, lr}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4604      	mov	r4, r0
 8006adc:	4608      	mov	r0, r1
 8006ade:	4611      	mov	r1, r2
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	80fb      	strh	r3, [r7, #6]
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	80bb      	strh	r3, [r7, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	70fb      	strb	r3, [r7, #3]
 8006aee:	4613      	mov	r3, r2
 8006af0:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8006af2:	88bb      	ldrh	r3, [r7, #4]
 8006af4:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* �õ�����һ���ַ���Ӧ������ռ���ֽ��� */
 8006afe:	78bb      	ldrb	r3, [r7, #2]
 8006b00:	08db      	lsrs	r3, r3, #3
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	78bb      	ldrb	r3, [r7, #2]
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bf14      	ite	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	2300      	moveq	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	4413      	add	r3, r2
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	78ba      	ldrb	r2, [r7, #2]
 8006b1e:	0852      	lsrs	r2, r2, #1
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
 8006b26:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* �õ�ƫ�ƺ��ֵ��ASCII�ֿ��Ǵӿո�ʼȡģ������-' '���Ƕ�Ӧ�ַ����ֿ⣩ */
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	3b20      	subs	r3, #32
 8006b2c:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8006b2e:	78bb      	ldrb	r3, [r7, #2]
 8006b30:	3b0c      	subs	r3, #12
 8006b32:	2b14      	cmp	r3, #20
 8006b34:	f200 8099 	bhi.w	8006c6a <lcd_show_char+0x196>
 8006b38:	a201      	add	r2, pc, #4	@ (adr r2, 8006b40 <lcd_show_char+0x6c>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b95 	.word	0x08006b95
 8006b44:	08006c6b 	.word	0x08006c6b
 8006b48:	08006c6b 	.word	0x08006c6b
 8006b4c:	08006c6b 	.word	0x08006c6b
 8006b50:	08006ba7 	.word	0x08006ba7
 8006b54:	08006c6b 	.word	0x08006c6b
 8006b58:	08006c6b 	.word	0x08006c6b
 8006b5c:	08006c6b 	.word	0x08006c6b
 8006b60:	08006c6b 	.word	0x08006c6b
 8006b64:	08006c6b 	.word	0x08006c6b
 8006b68:	08006c6b 	.word	0x08006c6b
 8006b6c:	08006c6b 	.word	0x08006c6b
 8006b70:	08006bb3 	.word	0x08006bb3
 8006b74:	08006c6b 	.word	0x08006c6b
 8006b78:	08006c6b 	.word	0x08006c6b
 8006b7c:	08006c6b 	.word	0x08006c6b
 8006b80:	08006c6b 	.word	0x08006c6b
 8006b84:	08006c6b 	.word	0x08006c6b
 8006b88:	08006c6b 	.word	0x08006c6b
 8006b8c:	08006c6b 	.word	0x08006c6b
 8006b90:	08006bc5 	.word	0x08006bc5
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* ����1206���� */
 8006b94:	78fa      	ldrb	r2, [r7, #3]
 8006b96:	4613      	mov	r3, r2
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4a36      	ldr	r2, [pc, #216]	@ (8006c78 <lcd_show_char+0x1a4>)
 8006ba0:	4413      	add	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]
            break;
 8006ba4:	e014      	b.n	8006bd0 <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* ����1608���� */
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	4a34      	ldr	r2, [pc, #208]	@ (8006c7c <lcd_show_char+0x1a8>)
 8006bac:	4413      	add	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]
            break;
 8006bb0:	e00e      	b.n	8006bd0 <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* ����2412���� */
 8006bb2:	78fa      	ldrb	r2, [r7, #3]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4a30      	ldr	r2, [pc, #192]	@ (8006c80 <lcd_show_char+0x1ac>)
 8006bbe:	4413      	add	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
            break;
 8006bc2:	e005      	b.n	8006bd0 <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* ����3216���� */
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	019b      	lsls	r3, r3, #6
 8006bc8:	4a2e      	ldr	r2, [pc, #184]	@ (8006c84 <lcd_show_char+0x1b0>)
 8006bca:	4413      	add	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]
            break;
 8006bce:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	757b      	strb	r3, [r7, #21]
 8006bd4:	e044      	b.n	8006c60 <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* ��ȡ�ַ��ĵ������� */
 8006bd6:	7d7b      	ldrb	r3, [r7, #21]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4413      	add	r3, r2
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8006be0:	2300      	movs	r3, #0
 8006be2:	75bb      	strb	r3, [r7, #22]
 8006be4:	e034      	b.n	8006c50 <lcd_show_char+0x17c>
        {
            if (temp & 0x80)        /* ��Ч��,��Ҫ��ʾ */
 8006be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	da06      	bge.n	8006bfc <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* �������,Ҫ��ʾ����� */
 8006bee:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006bf0:	88b9      	ldrh	r1, [r7, #4]
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fa fdd1 	bl	800179c <lcd_draw_point>
 8006bfa:	e00a      	b.n	8006c12 <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* ��Ч��,����ʾ */
 8006bfc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d106      	bne.n	8006c12 <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* ������ɫ,�൱������㲻��ʾ(ע�ⱳ��ɫ��ȫ�ֱ�������) */
 8006c04:	4b20      	ldr	r3, [pc, #128]	@ (8006c88 <lcd_show_char+0x1b4>)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	88b9      	ldrh	r1, [r7, #4]
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fa fdc5 	bl	800179c <lcd_draw_point>
            }

            temp <<= 1; /* ��λ, �Ա��ȡ��һ��λ��״̬ */
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	75fb      	strb	r3, [r7, #23]
            y++;
 8006c18:	88bb      	ldrh	r3, [r7, #4]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* �������� */
 8006c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8006c8c <lcd_show_char+0x1b8>)
 8006c20:	885b      	ldrh	r3, [r3, #2]
 8006c22:	88ba      	ldrh	r2, [r7, #4]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d222      	bcs.n	8006c6e <lcd_show_char+0x19a>

            if ((y - y0) == size)   /* ��ʾ��һ����? */
 8006c28:	88ba      	ldrh	r2, [r7, #4]
 8006c2a:	89fb      	ldrh	r3, [r7, #14]
 8006c2c:	1ad2      	subs	r2, r2, r3
 8006c2e:	78bb      	ldrb	r3, [r7, #2]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d10a      	bne.n	8006c4a <lcd_show_char+0x176>
            {
                y = y0; /* y���긴λ */
 8006c34:	89fb      	ldrh	r3, [r7, #14]
 8006c36:	80bb      	strh	r3, [r7, #4]
                x++;    /* x������� */
 8006c38:	88fb      	ldrh	r3, [r7, #6]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   /* x���곬������ */
 8006c3e:	4b13      	ldr	r3, [pc, #76]	@ (8006c8c <lcd_show_char+0x1b8>)
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	88fa      	ldrh	r2, [r7, #6]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d307      	bcc.n	8006c58 <lcd_show_char+0x184>
 8006c48:	e012      	b.n	8006c70 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8006c4a:	7dbb      	ldrb	r3, [r7, #22]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	75bb      	strb	r3, [r7, #22]
 8006c50:	7dbb      	ldrb	r3, [r7, #22]
 8006c52:	2b07      	cmp	r3, #7
 8006c54:	d9c7      	bls.n	8006be6 <lcd_show_char+0x112>
 8006c56:	e000      	b.n	8006c5a <lcd_show_char+0x186>

                break;
 8006c58:	bf00      	nop
    for (t = 0; t < csize; t++)
 8006c5a:	7d7b      	ldrb	r3, [r7, #21]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	757b      	strb	r3, [r7, #21]
 8006c60:	7d7a      	ldrb	r2, [r7, #21]
 8006c62:	7b7b      	ldrb	r3, [r7, #13]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d3b6      	bcc.n	8006bd6 <lcd_show_char+0x102>
 8006c68:	e002      	b.n	8006c70 <lcd_show_char+0x19c>
            return ;
 8006c6a:	bf00      	nop
 8006c6c:	e000      	b.n	8006c70 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* �������� */
 8006c6e:	bf00      	nop
            }
        }
    }
}
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd90      	pop	{r4, r7, pc}
 8006c76:	bf00      	nop
 8006c78:	0800900c 	.word	0x0800900c
 8006c7c:	08009480 	.word	0x08009480
 8006c80:	08009a70 	.word	0x08009a70
 8006c84:	0800a7cc 	.word	0x0800a7cc
 8006c88:	20000000 	.word	0x20000000
 8006c8c:	2000002c 	.word	0x2000002c

08006c90 <lcd_show_string>:
 * @param       p           : �ַ����׵�ַ
 * @param       color       : �ַ�������ɫ;
 * @retval      ��
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8006c90:	b590      	push	{r4, r7, lr}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af02      	add	r7, sp, #8
 8006c96:	4604      	mov	r4, r0
 8006c98:	4608      	mov	r0, r1
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	80fb      	strh	r3, [r7, #6]
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	80bb      	strh	r3, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	807b      	strh	r3, [r7, #2]
 8006caa:	4613      	mov	r3, r2
 8006cac:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	73fb      	strb	r3, [r7, #15]
    width += x;
 8006cb2:	887a      	ldrh	r2, [r7, #2]
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	807b      	strh	r3, [r7, #2]
    height += y;
 8006cba:	883a      	ldrh	r2, [r7, #0]
 8006cbc:	88bb      	ldrh	r3, [r7, #4]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 8006cc2:	e027      	b.n	8006d14 <lcd_show_string+0x84>
    {
        if (x >= width)
 8006cc4:	88fa      	ldrh	r2, [r7, #6]
 8006cc6:	887b      	ldrh	r3, [r7, #2]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d307      	bcc.n	8006cdc <lcd_show_string+0x4c>
        {
            x = x0;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	80fb      	strh	r3, [r7, #6]
            y += size;
 8006cd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	88bb      	ldrh	r3, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* �˳� */
 8006cdc:	88ba      	ldrh	r2, [r7, #4]
 8006cde:	883b      	ldrh	r3, [r7, #0]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d220      	bcs.n	8006d26 <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	781a      	ldrb	r2, [r3, #0]
 8006ce8:	f897 4020 	ldrb.w	r4, [r7, #32]
 8006cec:	88b9      	ldrh	r1, [r7, #4]
 8006cee:	88f8      	ldrh	r0, [r7, #6]
 8006cf0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006cf2:	9301      	str	r3, [sp, #4]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	f7ff feeb 	bl	8006ad4 <lcd_show_char>
        x += size / 2;
 8006cfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	88fb      	ldrh	r3, [r7, #6]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	80fb      	strh	r3, [r7, #6]
        p++;
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	3301      	adds	r3, #1
 8006d12:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 8006d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b7e      	cmp	r3, #126	@ 0x7e
 8006d1a:	d805      	bhi.n	8006d28 <lcd_show_string+0x98>
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b1f      	cmp	r3, #31
 8006d22:	d8cf      	bhi.n	8006cc4 <lcd_show_string+0x34>
    }
}
 8006d24:	e000      	b.n	8006d28 <lcd_show_string+0x98>
        if (y >= height)break;  /* �˳� */
 8006d26:	bf00      	nop
}
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd90      	pop	{r4, r7, pc}

08006d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006d30:	b5b0      	push	{r4, r5, r7, lr}
 8006d32:	b08a      	sub	sp, #40	@ 0x28
 8006d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006d36:	f000 fa21 	bl	800717c <HAL_Init>

  /* USER CODE BEGIN Init */
  lcd_init();
 8006d3a:	f7fa ff11 	bl	8001b60 <lcd_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006d3e:	f000 f859 	bl	8006df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006d42:	f7f9 fd7f 	bl	8000844 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8006d46:	f000 f975 	bl	8007034 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)rxBuffer,1);
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	4922      	ldr	r1, [pc, #136]	@ (8006dd8 <main+0xa8>)
 8006d4e:	4823      	ldr	r0, [pc, #140]	@ (8006ddc <main+0xac>)
 8006d50:	f001 fb81 	bl	8008456 <HAL_UART_Receive_IT>
  lcd_clear(WHITE);g_back_color = WHITE;
 8006d54:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006d58:	f7ff fe60 	bl	8006a1c <lcd_clear>
 8006d5c:	4b20      	ldr	r3, [pc, #128]	@ (8006de0 <main+0xb0>)
 8006d5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006d62:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin) == GPIO_PIN_RESET){
 8006d64:	2120      	movs	r1, #32
 8006d66:	481f      	ldr	r0, [pc, #124]	@ (8006de4 <main+0xb4>)
 8006d68:	f000 fe72 	bl	8007a50 <HAL_GPIO_ReadPin>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d115      	bne.n	8006d9e <main+0x6e>
		  char msg[] = "KEY0 is pressed\n";
 8006d72:	4b1d      	ldr	r3, [pc, #116]	@ (8006de8 <main+0xb8>)
 8006d74:	f107 0414 	add.w	r4, r7, #20
 8006d78:	461d      	mov	r5, r3
 8006d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d7e:	682b      	ldr	r3, [r5, #0]
 8006d80:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8006d82:	f107 0314 	add.w	r3, r7, #20
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7f9 fa4e 	bl	8000228 <strlen>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	f107 0114 	add.w	r1, r7, #20
 8006d94:	f04f 33ff 	mov.w	r3, #4294967295
 8006d98:	4810      	ldr	r0, [pc, #64]	@ (8006ddc <main+0xac>)
 8006d9a:	f001 fad1 	bl	8008340 <HAL_UART_Transmit>
//		  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);
	  }
	  if(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin) == GPIO_PIN_RESET){
 8006d9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006da2:	4812      	ldr	r0, [pc, #72]	@ (8006dec <main+0xbc>)
 8006da4:	f000 fe54 	bl	8007a50 <HAL_GPIO_ReadPin>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1da      	bne.n	8006d64 <main+0x34>
		  char msg[] = "KEY1 is pressed\n";
 8006dae:	4b10      	ldr	r3, [pc, #64]	@ (8006df0 <main+0xc0>)
 8006db0:	463c      	mov	r4, r7
 8006db2:	461d      	mov	r5, r3
 8006db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	7023      	strb	r3, [r4, #0]
		   HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7f9 fa32 	bl	8000228 <strlen>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	4639      	mov	r1, r7
 8006dca:	f04f 33ff 	mov.w	r3, #4294967295
 8006dce:	4803      	ldr	r0, [pc, #12]	@ (8006ddc <main+0xac>)
 8006dd0:	f001 fab6 	bl	8008340 <HAL_UART_Transmit>
	  if(HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin) == GPIO_PIN_RESET){
 8006dd4:	e7c6      	b.n	8006d64 <main+0x34>
 8006dd6:	bf00      	nop
 8006dd8:	2000003c 	.word	0x2000003c
 8006ddc:	20000454 	.word	0x20000454
 8006de0:	20000000 	.word	0x20000000
 8006de4:	40011000 	.word	0x40011000
 8006de8:	08008fe4 	.word	0x08008fe4
 8006dec:	40010800 	.word	0x40010800
 8006df0:	08008ff8 	.word	0x08008ff8

08006df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b090      	sub	sp, #64	@ 0x40
 8006df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006dfa:	f107 0318 	add.w	r3, r7, #24
 8006dfe:	2228      	movs	r2, #40	@ 0x28
 8006e00:	2100      	movs	r1, #0
 8006e02:	4618      	mov	r0, r3
 8006e04:	f002 f8b6 	bl	8008f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e08:	1d3b      	adds	r3, r7, #4
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	605a      	str	r2, [r3, #4]
 8006e10:	609a      	str	r2, [r3, #8]
 8006e12:	60da      	str	r2, [r3, #12]
 8006e14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006e16:	2301      	movs	r3, #1
 8006e18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006e20:	2300      	movs	r3, #0
 8006e22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006e24:	2301      	movs	r3, #1
 8006e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006e32:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8006e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e38:	f107 0318 	add.w	r3, r7, #24
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fe1f 	bl	8007a80 <HAL_RCC_OscConfig>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006e48:	f000 f819 	bl	8006e7e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e4c:	230f      	movs	r3, #15
 8006e4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e50:	2302      	movs	r3, #2
 8006e52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006e62:	1d3b      	adds	r3, r7, #4
 8006e64:	2102      	movs	r1, #2
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 f88c 	bl	8007f84 <HAL_RCC_ClockConfig>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006e72:	f000 f804 	bl	8006e7e <Error_Handler>
  }
}
 8006e76:	bf00      	nop
 8006e78:	3740      	adds	r7, #64	@ 0x40
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006e82:	b672      	cpsid	i
}
 8006e84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006e86:	bf00      	nop
 8006e88:	e7fd      	b.n	8006e86 <Error_Handler+0x8>
	...

08006e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006e92:	4b16      	ldr	r3, [pc, #88]	@ (8006eec <HAL_MspInit+0x60>)
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	4a15      	ldr	r2, [pc, #84]	@ (8006eec <HAL_MspInit+0x60>)
 8006e98:	f043 0301 	orr.w	r3, r3, #1
 8006e9c:	6193      	str	r3, [r2, #24]
 8006e9e:	4b13      	ldr	r3, [pc, #76]	@ (8006eec <HAL_MspInit+0x60>)
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	60bb      	str	r3, [r7, #8]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006eaa:	4b10      	ldr	r3, [pc, #64]	@ (8006eec <HAL_MspInit+0x60>)
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	4a0f      	ldr	r2, [pc, #60]	@ (8006eec <HAL_MspInit+0x60>)
 8006eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eb4:	61d3      	str	r3, [r2, #28]
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006eec <HAL_MspInit+0x60>)
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ebe:	607b      	str	r3, [r7, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8006ec2:	2005      	movs	r0, #5
 8006ec4:	f000 faac 	bl	8007420 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006ec8:	4b09      	ldr	r3, [pc, #36]	@ (8006ef0 <HAL_MspInit+0x64>)
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	4a04      	ldr	r2, [pc, #16]	@ (8006ef0 <HAL_MspInit+0x64>)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	40010000 	.word	0x40010000

08006ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006ef8:	bf00      	nop
 8006efa:	e7fd      	b.n	8006ef8 <NMI_Handler+0x4>

08006efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <HardFault_Handler+0x4>

08006f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f08:	bf00      	nop
 8006f0a:	e7fd      	b.n	8006f08 <MemManage_Handler+0x4>

08006f0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f10:	bf00      	nop
 8006f12:	e7fd      	b.n	8006f10 <BusFault_Handler+0x4>

08006f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f18:	bf00      	nop
 8006f1a:	e7fd      	b.n	8006f18 <UsageFault_Handler+0x4>

08006f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f20:	bf00      	nop
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f2c:	bf00      	nop
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bc80      	pop	{r7}
 8006f32:	4770      	bx	lr

08006f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f38:	bf00      	nop
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bc80      	pop	{r7}
 8006f3e:	4770      	bx	lr

08006f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f44:	f000 f960 	bl	8007208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f48:	bf00      	nop
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006f50:	4804      	ldr	r0, [pc, #16]	@ (8006f64 <USART1_IRQHandler+0x18>)
 8006f52:	f001 faa5 	bl	80084a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)rxBuffer,1);
 8006f56:	2201      	movs	r2, #1
 8006f58:	4903      	ldr	r1, [pc, #12]	@ (8006f68 <USART1_IRQHandler+0x1c>)
 8006f5a:	4802      	ldr	r0, [pc, #8]	@ (8006f64 <USART1_IRQHandler+0x18>)
 8006f5c:	f001 fa7b 	bl	8008456 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8006f60:	bf00      	nop
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000454 	.word	0x20000454
 8006f68:	2000003c 	.word	0x2000003c

08006f6c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af04      	add	r7, sp, #16
 8006f72:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a23      	ldr	r2, [pc, #140]	@ (8007008 <HAL_UART_RxCpltCallback+0x9c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d140      	bne.n	8007000 <HAL_UART_RxCpltCallback+0x94>
		static unsigned char uRx_Data[1024] = {0};
		static unsigned char uLength = 0;
		if(rxBuffer[0] == '\n'){
 8006f7e:	4b23      	ldr	r3, [pc, #140]	@ (800700c <HAL_UART_RxCpltCallback+0xa0>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b0a      	cmp	r3, #10
 8006f84:	d12f      	bne.n	8006fe6 <HAL_UART_RxCpltCallback+0x7a>
			HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
 8006f86:	4b22      	ldr	r3, [pc, #136]	@ (8007010 <HAL_UART_RxCpltCallback+0xa4>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006f90:	4920      	ldr	r1, [pc, #128]	@ (8007014 <HAL_UART_RxCpltCallback+0xa8>)
 8006f92:	4821      	ldr	r0, [pc, #132]	@ (8007018 <HAL_UART_RxCpltCallback+0xac>)
 8006f94:	f001 f9d4 	bl	8008340 <HAL_UART_Transmit>
			uRx_Data[uLength] = '\0';
 8006f98:	4b1d      	ldr	r3, [pc, #116]	@ (8007010 <HAL_UART_RxCpltCallback+0xa4>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8007014 <HAL_UART_RxCpltCallback+0xa8>)
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	5499      	strb	r1, [r3, r2]
			lcd_clear(WHITE);g_back_color = WHITE;
 8006fa4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006fa8:	f7ff fd38 	bl	8006a1c <lcd_clear>
 8006fac:	4b1b      	ldr	r3, [pc, #108]	@ (800701c <HAL_UART_RxCpltCallback+0xb0>)
 8006fae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006fb2:	601a      	str	r2, [r3, #0]
			lcd_show_string(lcddev.width/2, lcddev.height/10,200,24,24,(char *)uRx_Data,BLACK);
 8006fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8007020 <HAL_UART_RxCpltCallback+0xb4>)
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	085b      	lsrs	r3, r3, #1
 8006fba:	b298      	uxth	r0, r3
 8006fbc:	4b18      	ldr	r3, [pc, #96]	@ (8007020 <HAL_UART_RxCpltCallback+0xb4>)
 8006fbe:	885b      	ldrh	r3, [r3, #2]
 8006fc0:	4a18      	ldr	r2, [pc, #96]	@ (8007024 <HAL_UART_RxCpltCallback+0xb8>)
 8006fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc6:	08db      	lsrs	r3, r3, #3
 8006fc8:	b299      	uxth	r1, r3
 8006fca:	2300      	movs	r3, #0
 8006fcc:	9302      	str	r3, [sp, #8]
 8006fce:	4b11      	ldr	r3, [pc, #68]	@ (8007014 <HAL_UART_RxCpltCallback+0xa8>)
 8006fd0:	9301      	str	r3, [sp, #4]
 8006fd2:	2318      	movs	r3, #24
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	2318      	movs	r3, #24
 8006fd8:	22c8      	movs	r2, #200	@ 0xc8
 8006fda:	f7ff fe59 	bl	8006c90 <lcd_show_string>
			uLength = 0;
 8006fde:	4b0c      	ldr	r3, [pc, #48]	@ (8007010 <HAL_UART_RxCpltCallback+0xa4>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
	}else{
		uRx_Data[uLength] = rxBuffer[0];
		uLength++;
		}
	}
}
 8006fe4:	e00c      	b.n	8007000 <HAL_UART_RxCpltCallback+0x94>
		uRx_Data[uLength] = rxBuffer[0];
 8006fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8007010 <HAL_UART_RxCpltCallback+0xa4>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	4b07      	ldr	r3, [pc, #28]	@ (800700c <HAL_UART_RxCpltCallback+0xa0>)
 8006fee:	7819      	ldrb	r1, [r3, #0]
 8006ff0:	4b08      	ldr	r3, [pc, #32]	@ (8007014 <HAL_UART_RxCpltCallback+0xa8>)
 8006ff2:	5499      	strb	r1, [r3, r2]
		uLength++;
 8006ff4:	4b06      	ldr	r3, [pc, #24]	@ (8007010 <HAL_UART_RxCpltCallback+0xa4>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	4b04      	ldr	r3, [pc, #16]	@ (8007010 <HAL_UART_RxCpltCallback+0xa4>)
 8006ffe:	701a      	strb	r2, [r3, #0]
}
 8007000:	bf00      	nop
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40013800 	.word	0x40013800
 800700c:	2000003c 	.word	0x2000003c
 8007010:	20000050 	.word	0x20000050
 8007014:	20000054 	.word	0x20000054
 8007018:	20000454 	.word	0x20000454
 800701c:	20000000 	.word	0x20000000
 8007020:	2000002c 	.word	0x2000002c
 8007024:	cccccccd 	.word	0xcccccccd

08007028 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800702c:	bf00      	nop
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr

08007034 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007038:	4b11      	ldr	r3, [pc, #68]	@ (8007080 <MX_USART1_UART_Init+0x4c>)
 800703a:	4a12      	ldr	r2, [pc, #72]	@ (8007084 <MX_USART1_UART_Init+0x50>)
 800703c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800703e:	4b10      	ldr	r3, [pc, #64]	@ (8007080 <MX_USART1_UART_Init+0x4c>)
 8007040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007044:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007046:	4b0e      	ldr	r3, [pc, #56]	@ (8007080 <MX_USART1_UART_Init+0x4c>)
 8007048:	2200      	movs	r2, #0
 800704a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800704c:	4b0c      	ldr	r3, [pc, #48]	@ (8007080 <MX_USART1_UART_Init+0x4c>)
 800704e:	2200      	movs	r2, #0
 8007050:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007052:	4b0b      	ldr	r3, [pc, #44]	@ (8007080 <MX_USART1_UART_Init+0x4c>)
 8007054:	2200      	movs	r2, #0
 8007056:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007058:	4b09      	ldr	r3, [pc, #36]	@ (8007080 <MX_USART1_UART_Init+0x4c>)
 800705a:	220c      	movs	r2, #12
 800705c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800705e:	4b08      	ldr	r3, [pc, #32]	@ (8007080 <MX_USART1_UART_Init+0x4c>)
 8007060:	2200      	movs	r2, #0
 8007062:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007064:	4b06      	ldr	r3, [pc, #24]	@ (8007080 <MX_USART1_UART_Init+0x4c>)
 8007066:	2200      	movs	r2, #0
 8007068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800706a:	4805      	ldr	r0, [pc, #20]	@ (8007080 <MX_USART1_UART_Init+0x4c>)
 800706c:	f001 f918 	bl	80082a0 <HAL_UART_Init>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007076:	f7ff ff02 	bl	8006e7e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800707a:	bf00      	nop
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000454 	.word	0x20000454
 8007084:	40013800 	.word	0x40013800

08007088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007090:	f107 0310 	add.w	r3, r7, #16
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	605a      	str	r2, [r3, #4]
 800709a:	609a      	str	r2, [r3, #8]
 800709c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a20      	ldr	r2, [pc, #128]	@ (8007124 <HAL_UART_MspInit+0x9c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d139      	bne.n	800711c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80070a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007128 <HAL_UART_MspInit+0xa0>)
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007128 <HAL_UART_MspInit+0xa0>)
 80070ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070b2:	6193      	str	r3, [r2, #24]
 80070b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007128 <HAL_UART_MspInit+0xa0>)
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070c0:	4b19      	ldr	r3, [pc, #100]	@ (8007128 <HAL_UART_MspInit+0xa0>)
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	4a18      	ldr	r2, [pc, #96]	@ (8007128 <HAL_UART_MspInit+0xa0>)
 80070c6:	f043 0304 	orr.w	r3, r3, #4
 80070ca:	6193      	str	r3, [r2, #24]
 80070cc:	4b16      	ldr	r3, [pc, #88]	@ (8007128 <HAL_UART_MspInit+0xa0>)
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	60bb      	str	r3, [r7, #8]
 80070d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80070d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070de:	2302      	movs	r3, #2
 80070e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80070e2:	2303      	movs	r3, #3
 80070e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070e6:	f107 0310 	add.w	r3, r7, #16
 80070ea:	4619      	mov	r1, r3
 80070ec:	480f      	ldr	r0, [pc, #60]	@ (800712c <HAL_UART_MspInit+0xa4>)
 80070ee:	f000 fb1b 	bl	8007728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80070f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070fc:	2300      	movs	r3, #0
 80070fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007100:	f107 0310 	add.w	r3, r7, #16
 8007104:	4619      	mov	r1, r3
 8007106:	4809      	ldr	r0, [pc, #36]	@ (800712c <HAL_UART_MspInit+0xa4>)
 8007108:	f000 fb0e 	bl	8007728 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800710c:	2200      	movs	r2, #0
 800710e:	2101      	movs	r1, #1
 8007110:	2025      	movs	r0, #37	@ 0x25
 8007112:	f000 f990 	bl	8007436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007116:	2025      	movs	r0, #37	@ 0x25
 8007118:	f000 f9a9 	bl	800746e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800711c:	bf00      	nop
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40013800 	.word	0x40013800
 8007128:	40021000 	.word	0x40021000
 800712c:	40010800 	.word	0x40010800

08007130 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007130:	f7ff ff7a 	bl	8007028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007134:	480b      	ldr	r0, [pc, #44]	@ (8007164 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007136:	490c      	ldr	r1, [pc, #48]	@ (8007168 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007138:	4a0c      	ldr	r2, [pc, #48]	@ (800716c <LoopFillZerobss+0x16>)
  movs r3, #0
 800713a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800713c:	e002      	b.n	8007144 <LoopCopyDataInit>

0800713e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800713e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007142:	3304      	adds	r3, #4

08007144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007148:	d3f9      	bcc.n	800713e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800714a:	4a09      	ldr	r2, [pc, #36]	@ (8007170 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800714c:	4c09      	ldr	r4, [pc, #36]	@ (8007174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800714e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007150:	e001      	b.n	8007156 <LoopFillZerobss>

08007152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007154:	3204      	adds	r2, #4

08007156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007158:	d3fb      	bcc.n	8007152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800715a:	f001 ff13 	bl	8008f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800715e:	f7ff fde7 	bl	8006d30 <main>
  bx lr
 8007162:	4770      	bx	lr
  ldr r0, =_sdata
 8007164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007168:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800716c:	0800bfc8 	.word	0x0800bfc8
  ldr r2, =_sbss
 8007170:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8007174:	200004a0 	.word	0x200004a0

08007178 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007178:	e7fe      	b.n	8007178 <ADC1_2_IRQHandler>
	...

0800717c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007180:	4b08      	ldr	r3, [pc, #32]	@ (80071a4 <HAL_Init+0x28>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a07      	ldr	r2, [pc, #28]	@ (80071a4 <HAL_Init+0x28>)
 8007186:	f043 0310 	orr.w	r3, r3, #16
 800718a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800718c:	2003      	movs	r0, #3
 800718e:	f000 f947 	bl	8007420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007192:	2000      	movs	r0, #0
 8007194:	f000 f808 	bl	80071a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007198:	f7ff fe78 	bl	8006e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	40022000 	.word	0x40022000

080071a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80071b0:	4b12      	ldr	r3, [pc, #72]	@ (80071fc <HAL_InitTick+0x54>)
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	4b12      	ldr	r3, [pc, #72]	@ (8007200 <HAL_InitTick+0x58>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	4619      	mov	r1, r3
 80071ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80071be:	fbb3 f3f1 	udiv	r3, r3, r1
 80071c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f95f 	bl	800748a <HAL_SYSTICK_Config>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e00e      	b.n	80071f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b0f      	cmp	r3, #15
 80071da:	d80a      	bhi.n	80071f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80071dc:	2200      	movs	r2, #0
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	f000 f927 	bl	8007436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80071e8:	4a06      	ldr	r2, [pc, #24]	@ (8007204 <HAL_InitTick+0x5c>)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e000      	b.n	80071f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000004 	.word	0x20000004
 8007200:	2000000c 	.word	0x2000000c
 8007204:	20000008 	.word	0x20000008

08007208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800720c:	4b05      	ldr	r3, [pc, #20]	@ (8007224 <HAL_IncTick+0x1c>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	461a      	mov	r2, r3
 8007212:	4b05      	ldr	r3, [pc, #20]	@ (8007228 <HAL_IncTick+0x20>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4413      	add	r3, r2
 8007218:	4a03      	ldr	r2, [pc, #12]	@ (8007228 <HAL_IncTick+0x20>)
 800721a:	6013      	str	r3, [r2, #0]
}
 800721c:	bf00      	nop
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr
 8007224:	2000000c 	.word	0x2000000c
 8007228:	2000049c 	.word	0x2000049c

0800722c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
  return uwTick;
 8007230:	4b02      	ldr	r3, [pc, #8]	@ (800723c <HAL_GetTick+0x10>)
 8007232:	681b      	ldr	r3, [r3, #0]
}
 8007234:	4618      	mov	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr
 800723c:	2000049c 	.word	0x2000049c

08007240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007248:	f7ff fff0 	bl	800722c <HAL_GetTick>
 800724c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d005      	beq.n	8007266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800725a:	4b0a      	ldr	r3, [pc, #40]	@ (8007284 <HAL_Delay+0x44>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007266:	bf00      	nop
 8007268:	f7ff ffe0 	bl	800722c <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	429a      	cmp	r2, r3
 8007276:	d8f7      	bhi.n	8007268 <HAL_Delay+0x28>
  {
  }
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	2000000c 	.word	0x2000000c

08007288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f003 0307 	and.w	r3, r3, #7
 8007296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007298:	4b0c      	ldr	r3, [pc, #48]	@ (80072cc <__NVIC_SetPriorityGrouping+0x44>)
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80072a4:	4013      	ands	r3, r2
 80072a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80072b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072ba:	4a04      	ldr	r2, [pc, #16]	@ (80072cc <__NVIC_SetPriorityGrouping+0x44>)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	60d3      	str	r3, [r2, #12]
}
 80072c0:	bf00      	nop
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	e000ed00 	.word	0xe000ed00

080072d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072d4:	4b04      	ldr	r3, [pc, #16]	@ (80072e8 <__NVIC_GetPriorityGrouping+0x18>)
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	0a1b      	lsrs	r3, r3, #8
 80072da:	f003 0307 	and.w	r3, r3, #7
}
 80072de:	4618      	mov	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bc80      	pop	{r7}
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	e000ed00 	.word	0xe000ed00

080072ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	db0b      	blt.n	8007316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	f003 021f 	and.w	r2, r3, #31
 8007304:	4906      	ldr	r1, [pc, #24]	@ (8007320 <__NVIC_EnableIRQ+0x34>)
 8007306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800730a:	095b      	lsrs	r3, r3, #5
 800730c:	2001      	movs	r0, #1
 800730e:	fa00 f202 	lsl.w	r2, r0, r2
 8007312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	bc80      	pop	{r7}
 800731e:	4770      	bx	lr
 8007320:	e000e100 	.word	0xe000e100

08007324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	6039      	str	r1, [r7, #0]
 800732e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007334:	2b00      	cmp	r3, #0
 8007336:	db0a      	blt.n	800734e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	b2da      	uxtb	r2, r3
 800733c:	490c      	ldr	r1, [pc, #48]	@ (8007370 <__NVIC_SetPriority+0x4c>)
 800733e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007342:	0112      	lsls	r2, r2, #4
 8007344:	b2d2      	uxtb	r2, r2
 8007346:	440b      	add	r3, r1
 8007348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800734c:	e00a      	b.n	8007364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	b2da      	uxtb	r2, r3
 8007352:	4908      	ldr	r1, [pc, #32]	@ (8007374 <__NVIC_SetPriority+0x50>)
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	f003 030f 	and.w	r3, r3, #15
 800735a:	3b04      	subs	r3, #4
 800735c:	0112      	lsls	r2, r2, #4
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	440b      	add	r3, r1
 8007362:	761a      	strb	r2, [r3, #24]
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	bc80      	pop	{r7}
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	e000e100 	.word	0xe000e100
 8007374:	e000ed00 	.word	0xe000ed00

08007378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007378:	b480      	push	{r7}
 800737a:	b089      	sub	sp, #36	@ 0x24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f1c3 0307 	rsb	r3, r3, #7
 8007392:	2b04      	cmp	r3, #4
 8007394:	bf28      	it	cs
 8007396:	2304      	movcs	r3, #4
 8007398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	3304      	adds	r3, #4
 800739e:	2b06      	cmp	r3, #6
 80073a0:	d902      	bls.n	80073a8 <NVIC_EncodePriority+0x30>
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	3b03      	subs	r3, #3
 80073a6:	e000      	b.n	80073aa <NVIC_EncodePriority+0x32>
 80073a8:	2300      	movs	r3, #0
 80073aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073ac:	f04f 32ff 	mov.w	r2, #4294967295
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	fa02 f303 	lsl.w	r3, r2, r3
 80073b6:	43da      	mvns	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	401a      	ands	r2, r3
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073c0:	f04f 31ff 	mov.w	r1, #4294967295
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ca:	43d9      	mvns	r1, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073d0:	4313      	orrs	r3, r2
         );
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3724      	adds	r7, #36	@ 0x24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bc80      	pop	{r7}
 80073da:	4770      	bx	lr

080073dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073ec:	d301      	bcc.n	80073f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80073ee:	2301      	movs	r3, #1
 80073f0:	e00f      	b.n	8007412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80073f2:	4a0a      	ldr	r2, [pc, #40]	@ (800741c <SysTick_Config+0x40>)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80073fa:	210f      	movs	r1, #15
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	f7ff ff90 	bl	8007324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007404:	4b05      	ldr	r3, [pc, #20]	@ (800741c <SysTick_Config+0x40>)
 8007406:	2200      	movs	r2, #0
 8007408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800740a:	4b04      	ldr	r3, [pc, #16]	@ (800741c <SysTick_Config+0x40>)
 800740c:	2207      	movs	r2, #7
 800740e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	e000e010 	.word	0xe000e010

08007420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff ff2d 	bl	8007288 <__NVIC_SetPriorityGrouping>
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007436:	b580      	push	{r7, lr}
 8007438:	b086      	sub	sp, #24
 800743a:	af00      	add	r7, sp, #0
 800743c:	4603      	mov	r3, r0
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
 8007442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007444:	2300      	movs	r3, #0
 8007446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007448:	f7ff ff42 	bl	80072d0 <__NVIC_GetPriorityGrouping>
 800744c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	6978      	ldr	r0, [r7, #20]
 8007454:	f7ff ff90 	bl	8007378 <NVIC_EncodePriority>
 8007458:	4602      	mov	r2, r0
 800745a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800745e:	4611      	mov	r1, r2
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff ff5f 	bl	8007324 <__NVIC_SetPriority>
}
 8007466:	bf00      	nop
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	4603      	mov	r3, r0
 8007476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff ff35 	bl	80072ec <__NVIC_EnableIRQ>
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff ffa2 	bl	80073dc <SysTick_Config>
 8007498:	4603      	mov	r3, r0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b085      	sub	sp, #20
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d008      	beq.n	80074cc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2204      	movs	r2, #4
 80074be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e020      	b.n	800750e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 020e 	bic.w	r2, r2, #14
 80074da:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0201 	bic.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f4:	2101      	movs	r1, #1
 80074f6:	fa01 f202 	lsl.w	r2, r1, r2
 80074fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800750c:	7bfb      	ldrb	r3, [r7, #15]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	bc80      	pop	{r7}
 8007516:	4770      	bx	lr

08007518 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d005      	beq.n	800753c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2204      	movs	r2, #4
 8007534:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	73fb      	strb	r3, [r7, #15]
 800753a:	e0d6      	b.n	80076ea <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 020e 	bic.w	r2, r2, #14
 800754a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0201 	bic.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	461a      	mov	r2, r3
 8007562:	4b64      	ldr	r3, [pc, #400]	@ (80076f4 <HAL_DMA_Abort_IT+0x1dc>)
 8007564:	429a      	cmp	r2, r3
 8007566:	d958      	bls.n	800761a <HAL_DMA_Abort_IT+0x102>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a62      	ldr	r2, [pc, #392]	@ (80076f8 <HAL_DMA_Abort_IT+0x1e0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d04f      	beq.n	8007612 <HAL_DMA_Abort_IT+0xfa>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a61      	ldr	r2, [pc, #388]	@ (80076fc <HAL_DMA_Abort_IT+0x1e4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d048      	beq.n	800760e <HAL_DMA_Abort_IT+0xf6>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a5f      	ldr	r2, [pc, #380]	@ (8007700 <HAL_DMA_Abort_IT+0x1e8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d040      	beq.n	8007608 <HAL_DMA_Abort_IT+0xf0>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a5e      	ldr	r2, [pc, #376]	@ (8007704 <HAL_DMA_Abort_IT+0x1ec>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d038      	beq.n	8007602 <HAL_DMA_Abort_IT+0xea>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a5c      	ldr	r2, [pc, #368]	@ (8007708 <HAL_DMA_Abort_IT+0x1f0>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d030      	beq.n	80075fc <HAL_DMA_Abort_IT+0xe4>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a5b      	ldr	r2, [pc, #364]	@ (800770c <HAL_DMA_Abort_IT+0x1f4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d028      	beq.n	80075f6 <HAL_DMA_Abort_IT+0xde>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a52      	ldr	r2, [pc, #328]	@ (80076f4 <HAL_DMA_Abort_IT+0x1dc>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d020      	beq.n	80075f0 <HAL_DMA_Abort_IT+0xd8>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a57      	ldr	r2, [pc, #348]	@ (8007710 <HAL_DMA_Abort_IT+0x1f8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d019      	beq.n	80075ec <HAL_DMA_Abort_IT+0xd4>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a55      	ldr	r2, [pc, #340]	@ (8007714 <HAL_DMA_Abort_IT+0x1fc>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d012      	beq.n	80075e8 <HAL_DMA_Abort_IT+0xd0>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a54      	ldr	r2, [pc, #336]	@ (8007718 <HAL_DMA_Abort_IT+0x200>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d00a      	beq.n	80075e2 <HAL_DMA_Abort_IT+0xca>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a52      	ldr	r2, [pc, #328]	@ (800771c <HAL_DMA_Abort_IT+0x204>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d102      	bne.n	80075dc <HAL_DMA_Abort_IT+0xc4>
 80075d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075da:	e01b      	b.n	8007614 <HAL_DMA_Abort_IT+0xfc>
 80075dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80075e0:	e018      	b.n	8007614 <HAL_DMA_Abort_IT+0xfc>
 80075e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075e6:	e015      	b.n	8007614 <HAL_DMA_Abort_IT+0xfc>
 80075e8:	2310      	movs	r3, #16
 80075ea:	e013      	b.n	8007614 <HAL_DMA_Abort_IT+0xfc>
 80075ec:	2301      	movs	r3, #1
 80075ee:	e011      	b.n	8007614 <HAL_DMA_Abort_IT+0xfc>
 80075f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80075f4:	e00e      	b.n	8007614 <HAL_DMA_Abort_IT+0xfc>
 80075f6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80075fa:	e00b      	b.n	8007614 <HAL_DMA_Abort_IT+0xfc>
 80075fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007600:	e008      	b.n	8007614 <HAL_DMA_Abort_IT+0xfc>
 8007602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007606:	e005      	b.n	8007614 <HAL_DMA_Abort_IT+0xfc>
 8007608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800760c:	e002      	b.n	8007614 <HAL_DMA_Abort_IT+0xfc>
 800760e:	2310      	movs	r3, #16
 8007610:	e000      	b.n	8007614 <HAL_DMA_Abort_IT+0xfc>
 8007612:	2301      	movs	r3, #1
 8007614:	4a42      	ldr	r2, [pc, #264]	@ (8007720 <HAL_DMA_Abort_IT+0x208>)
 8007616:	6053      	str	r3, [r2, #4]
 8007618:	e057      	b.n	80076ca <HAL_DMA_Abort_IT+0x1b2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a36      	ldr	r2, [pc, #216]	@ (80076f8 <HAL_DMA_Abort_IT+0x1e0>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d04f      	beq.n	80076c4 <HAL_DMA_Abort_IT+0x1ac>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a34      	ldr	r2, [pc, #208]	@ (80076fc <HAL_DMA_Abort_IT+0x1e4>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d048      	beq.n	80076c0 <HAL_DMA_Abort_IT+0x1a8>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a33      	ldr	r2, [pc, #204]	@ (8007700 <HAL_DMA_Abort_IT+0x1e8>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d040      	beq.n	80076ba <HAL_DMA_Abort_IT+0x1a2>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a31      	ldr	r2, [pc, #196]	@ (8007704 <HAL_DMA_Abort_IT+0x1ec>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d038      	beq.n	80076b4 <HAL_DMA_Abort_IT+0x19c>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a30      	ldr	r2, [pc, #192]	@ (8007708 <HAL_DMA_Abort_IT+0x1f0>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d030      	beq.n	80076ae <HAL_DMA_Abort_IT+0x196>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a2e      	ldr	r2, [pc, #184]	@ (800770c <HAL_DMA_Abort_IT+0x1f4>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d028      	beq.n	80076a8 <HAL_DMA_Abort_IT+0x190>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a26      	ldr	r2, [pc, #152]	@ (80076f4 <HAL_DMA_Abort_IT+0x1dc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d020      	beq.n	80076a2 <HAL_DMA_Abort_IT+0x18a>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a2a      	ldr	r2, [pc, #168]	@ (8007710 <HAL_DMA_Abort_IT+0x1f8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d019      	beq.n	800769e <HAL_DMA_Abort_IT+0x186>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a29      	ldr	r2, [pc, #164]	@ (8007714 <HAL_DMA_Abort_IT+0x1fc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d012      	beq.n	800769a <HAL_DMA_Abort_IT+0x182>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a27      	ldr	r2, [pc, #156]	@ (8007718 <HAL_DMA_Abort_IT+0x200>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d00a      	beq.n	8007694 <HAL_DMA_Abort_IT+0x17c>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a26      	ldr	r2, [pc, #152]	@ (800771c <HAL_DMA_Abort_IT+0x204>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d102      	bne.n	800768e <HAL_DMA_Abort_IT+0x176>
 8007688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800768c:	e01b      	b.n	80076c6 <HAL_DMA_Abort_IT+0x1ae>
 800768e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007692:	e018      	b.n	80076c6 <HAL_DMA_Abort_IT+0x1ae>
 8007694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007698:	e015      	b.n	80076c6 <HAL_DMA_Abort_IT+0x1ae>
 800769a:	2310      	movs	r3, #16
 800769c:	e013      	b.n	80076c6 <HAL_DMA_Abort_IT+0x1ae>
 800769e:	2301      	movs	r3, #1
 80076a0:	e011      	b.n	80076c6 <HAL_DMA_Abort_IT+0x1ae>
 80076a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076a6:	e00e      	b.n	80076c6 <HAL_DMA_Abort_IT+0x1ae>
 80076a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80076ac:	e00b      	b.n	80076c6 <HAL_DMA_Abort_IT+0x1ae>
 80076ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80076b2:	e008      	b.n	80076c6 <HAL_DMA_Abort_IT+0x1ae>
 80076b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80076b8:	e005      	b.n	80076c6 <HAL_DMA_Abort_IT+0x1ae>
 80076ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80076be:	e002      	b.n	80076c6 <HAL_DMA_Abort_IT+0x1ae>
 80076c0:	2310      	movs	r3, #16
 80076c2:	e000      	b.n	80076c6 <HAL_DMA_Abort_IT+0x1ae>
 80076c4:	2301      	movs	r3, #1
 80076c6:	4a17      	ldr	r2, [pc, #92]	@ (8007724 <HAL_DMA_Abort_IT+0x20c>)
 80076c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
    } 
  }
  return status;
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	40020080 	.word	0x40020080
 80076f8:	40020008 	.word	0x40020008
 80076fc:	4002001c 	.word	0x4002001c
 8007700:	40020030 	.word	0x40020030
 8007704:	40020044 	.word	0x40020044
 8007708:	40020058 	.word	0x40020058
 800770c:	4002006c 	.word	0x4002006c
 8007710:	40020408 	.word	0x40020408
 8007714:	4002041c 	.word	0x4002041c
 8007718:	40020430 	.word	0x40020430
 800771c:	40020444 	.word	0x40020444
 8007720:	40020400 	.word	0x40020400
 8007724:	40020000 	.word	0x40020000

08007728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007728:	b480      	push	{r7}
 800772a:	b08b      	sub	sp, #44	@ 0x2c
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007732:	2300      	movs	r3, #0
 8007734:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007736:	2300      	movs	r3, #0
 8007738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800773a:	e179      	b.n	8007a30 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800773c:	2201      	movs	r2, #1
 800773e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007740:	fa02 f303 	lsl.w	r3, r2, r3
 8007744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69fa      	ldr	r2, [r7, #28]
 800774c:	4013      	ands	r3, r2
 800774e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	429a      	cmp	r2, r3
 8007756:	f040 8168 	bne.w	8007a2a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	4a96      	ldr	r2, [pc, #600]	@ (80079b8 <HAL_GPIO_Init+0x290>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d05e      	beq.n	8007822 <HAL_GPIO_Init+0xfa>
 8007764:	4a94      	ldr	r2, [pc, #592]	@ (80079b8 <HAL_GPIO_Init+0x290>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d875      	bhi.n	8007856 <HAL_GPIO_Init+0x12e>
 800776a:	4a94      	ldr	r2, [pc, #592]	@ (80079bc <HAL_GPIO_Init+0x294>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d058      	beq.n	8007822 <HAL_GPIO_Init+0xfa>
 8007770:	4a92      	ldr	r2, [pc, #584]	@ (80079bc <HAL_GPIO_Init+0x294>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d86f      	bhi.n	8007856 <HAL_GPIO_Init+0x12e>
 8007776:	4a92      	ldr	r2, [pc, #584]	@ (80079c0 <HAL_GPIO_Init+0x298>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d052      	beq.n	8007822 <HAL_GPIO_Init+0xfa>
 800777c:	4a90      	ldr	r2, [pc, #576]	@ (80079c0 <HAL_GPIO_Init+0x298>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d869      	bhi.n	8007856 <HAL_GPIO_Init+0x12e>
 8007782:	4a90      	ldr	r2, [pc, #576]	@ (80079c4 <HAL_GPIO_Init+0x29c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d04c      	beq.n	8007822 <HAL_GPIO_Init+0xfa>
 8007788:	4a8e      	ldr	r2, [pc, #568]	@ (80079c4 <HAL_GPIO_Init+0x29c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d863      	bhi.n	8007856 <HAL_GPIO_Init+0x12e>
 800778e:	4a8e      	ldr	r2, [pc, #568]	@ (80079c8 <HAL_GPIO_Init+0x2a0>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d046      	beq.n	8007822 <HAL_GPIO_Init+0xfa>
 8007794:	4a8c      	ldr	r2, [pc, #560]	@ (80079c8 <HAL_GPIO_Init+0x2a0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d85d      	bhi.n	8007856 <HAL_GPIO_Init+0x12e>
 800779a:	2b12      	cmp	r3, #18
 800779c:	d82a      	bhi.n	80077f4 <HAL_GPIO_Init+0xcc>
 800779e:	2b12      	cmp	r3, #18
 80077a0:	d859      	bhi.n	8007856 <HAL_GPIO_Init+0x12e>
 80077a2:	a201      	add	r2, pc, #4	@ (adr r2, 80077a8 <HAL_GPIO_Init+0x80>)
 80077a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a8:	08007823 	.word	0x08007823
 80077ac:	080077fd 	.word	0x080077fd
 80077b0:	0800780f 	.word	0x0800780f
 80077b4:	08007851 	.word	0x08007851
 80077b8:	08007857 	.word	0x08007857
 80077bc:	08007857 	.word	0x08007857
 80077c0:	08007857 	.word	0x08007857
 80077c4:	08007857 	.word	0x08007857
 80077c8:	08007857 	.word	0x08007857
 80077cc:	08007857 	.word	0x08007857
 80077d0:	08007857 	.word	0x08007857
 80077d4:	08007857 	.word	0x08007857
 80077d8:	08007857 	.word	0x08007857
 80077dc:	08007857 	.word	0x08007857
 80077e0:	08007857 	.word	0x08007857
 80077e4:	08007857 	.word	0x08007857
 80077e8:	08007857 	.word	0x08007857
 80077ec:	08007805 	.word	0x08007805
 80077f0:	08007819 	.word	0x08007819
 80077f4:	4a75      	ldr	r2, [pc, #468]	@ (80079cc <HAL_GPIO_Init+0x2a4>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d013      	beq.n	8007822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80077fa:	e02c      	b.n	8007856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	623b      	str	r3, [r7, #32]
          break;
 8007802:	e029      	b.n	8007858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	3304      	adds	r3, #4
 800780a:	623b      	str	r3, [r7, #32]
          break;
 800780c:	e024      	b.n	8007858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	3308      	adds	r3, #8
 8007814:	623b      	str	r3, [r7, #32]
          break;
 8007816:	e01f      	b.n	8007858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	330c      	adds	r3, #12
 800781e:	623b      	str	r3, [r7, #32]
          break;
 8007820:	e01a      	b.n	8007858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d102      	bne.n	8007830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800782a:	2304      	movs	r3, #4
 800782c:	623b      	str	r3, [r7, #32]
          break;
 800782e:	e013      	b.n	8007858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d105      	bne.n	8007844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007838:	2308      	movs	r3, #8
 800783a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	611a      	str	r2, [r3, #16]
          break;
 8007842:	e009      	b.n	8007858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007844:	2308      	movs	r3, #8
 8007846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	615a      	str	r2, [r3, #20]
          break;
 800784e:	e003      	b.n	8007858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007850:	2300      	movs	r3, #0
 8007852:	623b      	str	r3, [r7, #32]
          break;
 8007854:	e000      	b.n	8007858 <HAL_GPIO_Init+0x130>
          break;
 8007856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	2bff      	cmp	r3, #255	@ 0xff
 800785c:	d801      	bhi.n	8007862 <HAL_GPIO_Init+0x13a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	e001      	b.n	8007866 <HAL_GPIO_Init+0x13e>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3304      	adds	r3, #4
 8007866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	2bff      	cmp	r3, #255	@ 0xff
 800786c:	d802      	bhi.n	8007874 <HAL_GPIO_Init+0x14c>
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	e002      	b.n	800787a <HAL_GPIO_Init+0x152>
 8007874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007876:	3b08      	subs	r3, #8
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	210f      	movs	r1, #15
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	fa01 f303 	lsl.w	r3, r1, r3
 8007888:	43db      	mvns	r3, r3
 800788a:	401a      	ands	r2, r3
 800788c:	6a39      	ldr	r1, [r7, #32]
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	fa01 f303 	lsl.w	r3, r1, r3
 8007894:	431a      	orrs	r2, r3
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 80c1 	beq.w	8007a2a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80078a8:	4b49      	ldr	r3, [pc, #292]	@ (80079d0 <HAL_GPIO_Init+0x2a8>)
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	4a48      	ldr	r2, [pc, #288]	@ (80079d0 <HAL_GPIO_Init+0x2a8>)
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	6193      	str	r3, [r2, #24]
 80078b4:	4b46      	ldr	r3, [pc, #280]	@ (80079d0 <HAL_GPIO_Init+0x2a8>)
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	60bb      	str	r3, [r7, #8]
 80078be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80078c0:	4a44      	ldr	r2, [pc, #272]	@ (80079d4 <HAL_GPIO_Init+0x2ac>)
 80078c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c4:	089b      	lsrs	r3, r3, #2
 80078c6:	3302      	adds	r3, #2
 80078c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80078ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d0:	f003 0303 	and.w	r3, r3, #3
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	220f      	movs	r2, #15
 80078d8:	fa02 f303 	lsl.w	r3, r2, r3
 80078dc:	43db      	mvns	r3, r3
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	4013      	ands	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a3c      	ldr	r2, [pc, #240]	@ (80079d8 <HAL_GPIO_Init+0x2b0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d01f      	beq.n	800792c <HAL_GPIO_Init+0x204>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a3b      	ldr	r2, [pc, #236]	@ (80079dc <HAL_GPIO_Init+0x2b4>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d019      	beq.n	8007928 <HAL_GPIO_Init+0x200>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a3a      	ldr	r2, [pc, #232]	@ (80079e0 <HAL_GPIO_Init+0x2b8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d013      	beq.n	8007924 <HAL_GPIO_Init+0x1fc>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a39      	ldr	r2, [pc, #228]	@ (80079e4 <HAL_GPIO_Init+0x2bc>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00d      	beq.n	8007920 <HAL_GPIO_Init+0x1f8>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a38      	ldr	r2, [pc, #224]	@ (80079e8 <HAL_GPIO_Init+0x2c0>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d007      	beq.n	800791c <HAL_GPIO_Init+0x1f4>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a37      	ldr	r2, [pc, #220]	@ (80079ec <HAL_GPIO_Init+0x2c4>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d101      	bne.n	8007918 <HAL_GPIO_Init+0x1f0>
 8007914:	2305      	movs	r3, #5
 8007916:	e00a      	b.n	800792e <HAL_GPIO_Init+0x206>
 8007918:	2306      	movs	r3, #6
 800791a:	e008      	b.n	800792e <HAL_GPIO_Init+0x206>
 800791c:	2304      	movs	r3, #4
 800791e:	e006      	b.n	800792e <HAL_GPIO_Init+0x206>
 8007920:	2303      	movs	r3, #3
 8007922:	e004      	b.n	800792e <HAL_GPIO_Init+0x206>
 8007924:	2302      	movs	r3, #2
 8007926:	e002      	b.n	800792e <HAL_GPIO_Init+0x206>
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <HAL_GPIO_Init+0x206>
 800792c:	2300      	movs	r3, #0
 800792e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007930:	f002 0203 	and.w	r2, r2, #3
 8007934:	0092      	lsls	r2, r2, #2
 8007936:	4093      	lsls	r3, r2
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800793e:	4925      	ldr	r1, [pc, #148]	@ (80079d4 <HAL_GPIO_Init+0x2ac>)
 8007940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007942:	089b      	lsrs	r3, r3, #2
 8007944:	3302      	adds	r3, #2
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d006      	beq.n	8007966 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007958:	4b25      	ldr	r3, [pc, #148]	@ (80079f0 <HAL_GPIO_Init+0x2c8>)
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	4924      	ldr	r1, [pc, #144]	@ (80079f0 <HAL_GPIO_Init+0x2c8>)
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	4313      	orrs	r3, r2
 8007962:	608b      	str	r3, [r1, #8]
 8007964:	e006      	b.n	8007974 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007966:	4b22      	ldr	r3, [pc, #136]	@ (80079f0 <HAL_GPIO_Init+0x2c8>)
 8007968:	689a      	ldr	r2, [r3, #8]
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	43db      	mvns	r3, r3
 800796e:	4920      	ldr	r1, [pc, #128]	@ (80079f0 <HAL_GPIO_Init+0x2c8>)
 8007970:	4013      	ands	r3, r2
 8007972:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d006      	beq.n	800798e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007980:	4b1b      	ldr	r3, [pc, #108]	@ (80079f0 <HAL_GPIO_Init+0x2c8>)
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	491a      	ldr	r1, [pc, #104]	@ (80079f0 <HAL_GPIO_Init+0x2c8>)
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	4313      	orrs	r3, r2
 800798a:	60cb      	str	r3, [r1, #12]
 800798c:	e006      	b.n	800799c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800798e:	4b18      	ldr	r3, [pc, #96]	@ (80079f0 <HAL_GPIO_Init+0x2c8>)
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	43db      	mvns	r3, r3
 8007996:	4916      	ldr	r1, [pc, #88]	@ (80079f0 <HAL_GPIO_Init+0x2c8>)
 8007998:	4013      	ands	r3, r2
 800799a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d025      	beq.n	80079f4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80079a8:	4b11      	ldr	r3, [pc, #68]	@ (80079f0 <HAL_GPIO_Init+0x2c8>)
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	4910      	ldr	r1, [pc, #64]	@ (80079f0 <HAL_GPIO_Init+0x2c8>)
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	604b      	str	r3, [r1, #4]
 80079b4:	e025      	b.n	8007a02 <HAL_GPIO_Init+0x2da>
 80079b6:	bf00      	nop
 80079b8:	10320000 	.word	0x10320000
 80079bc:	10310000 	.word	0x10310000
 80079c0:	10220000 	.word	0x10220000
 80079c4:	10210000 	.word	0x10210000
 80079c8:	10120000 	.word	0x10120000
 80079cc:	10110000 	.word	0x10110000
 80079d0:	40021000 	.word	0x40021000
 80079d4:	40010000 	.word	0x40010000
 80079d8:	40010800 	.word	0x40010800
 80079dc:	40010c00 	.word	0x40010c00
 80079e0:	40011000 	.word	0x40011000
 80079e4:	40011400 	.word	0x40011400
 80079e8:	40011800 	.word	0x40011800
 80079ec:	40011c00 	.word	0x40011c00
 80079f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80079f4:	4b15      	ldr	r3, [pc, #84]	@ (8007a4c <HAL_GPIO_Init+0x324>)
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	43db      	mvns	r3, r3
 80079fc:	4913      	ldr	r1, [pc, #76]	@ (8007a4c <HAL_GPIO_Init+0x324>)
 80079fe:	4013      	ands	r3, r2
 8007a00:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d006      	beq.n	8007a1c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a4c <HAL_GPIO_Init+0x324>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	490e      	ldr	r1, [pc, #56]	@ (8007a4c <HAL_GPIO_Init+0x324>)
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	600b      	str	r3, [r1, #0]
 8007a1a:	e006      	b.n	8007a2a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a4c <HAL_GPIO_Init+0x324>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	43db      	mvns	r3, r3
 8007a24:	4909      	ldr	r1, [pc, #36]	@ (8007a4c <HAL_GPIO_Init+0x324>)
 8007a26:	4013      	ands	r3, r2
 8007a28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a36:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f47f ae7e 	bne.w	800773c <HAL_GPIO_Init+0x14>
  }
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	372c      	adds	r7, #44	@ 0x2c
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bc80      	pop	{r7}
 8007a4a:	4770      	bx	lr
 8007a4c:	40010400 	.word	0x40010400

08007a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	887b      	ldrh	r3, [r7, #2]
 8007a62:	4013      	ands	r3, r2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
 8007a6c:	e001      	b.n	8007a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bc80      	pop	{r7}
 8007a7c:	4770      	bx	lr
	...

08007a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e272      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 8087 	beq.w	8007bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007aa0:	4b92      	ldr	r3, [pc, #584]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f003 030c 	and.w	r3, r3, #12
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d00c      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007aac:	4b8f      	ldr	r3, [pc, #572]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f003 030c 	and.w	r3, r3, #12
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d112      	bne.n	8007ade <HAL_RCC_OscConfig+0x5e>
 8007ab8:	4b8c      	ldr	r3, [pc, #560]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ac4:	d10b      	bne.n	8007ade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ac6:	4b89      	ldr	r3, [pc, #548]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d06c      	beq.n	8007bac <HAL_RCC_OscConfig+0x12c>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d168      	bne.n	8007bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e24c      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae6:	d106      	bne.n	8007af6 <HAL_RCC_OscConfig+0x76>
 8007ae8:	4b80      	ldr	r3, [pc, #512]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a7f      	ldr	r2, [pc, #508]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	e02e      	b.n	8007b54 <HAL_RCC_OscConfig+0xd4>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10c      	bne.n	8007b18 <HAL_RCC_OscConfig+0x98>
 8007afe:	4b7b      	ldr	r3, [pc, #492]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a7a      	ldr	r2, [pc, #488]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	4b78      	ldr	r3, [pc, #480]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a77      	ldr	r2, [pc, #476]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	e01d      	b.n	8007b54 <HAL_RCC_OscConfig+0xd4>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b20:	d10c      	bne.n	8007b3c <HAL_RCC_OscConfig+0xbc>
 8007b22:	4b72      	ldr	r3, [pc, #456]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a71      	ldr	r2, [pc, #452]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a6e      	ldr	r2, [pc, #440]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	e00b      	b.n	8007b54 <HAL_RCC_OscConfig+0xd4>
 8007b3c:	4b6b      	ldr	r3, [pc, #428]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a6a      	ldr	r2, [pc, #424]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	4b68      	ldr	r3, [pc, #416]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a67      	ldr	r2, [pc, #412]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d013      	beq.n	8007b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b5c:	f7ff fb66 	bl	800722c <HAL_GetTick>
 8007b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b62:	e008      	b.n	8007b76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b64:	f7ff fb62 	bl	800722c <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b64      	cmp	r3, #100	@ 0x64
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e200      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b76:	4b5d      	ldr	r3, [pc, #372]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0f0      	beq.n	8007b64 <HAL_RCC_OscConfig+0xe4>
 8007b82:	e014      	b.n	8007bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b84:	f7ff fb52 	bl	800722c <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b8c:	f7ff fb4e 	bl	800722c <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b64      	cmp	r3, #100	@ 0x64
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e1ec      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b9e:	4b53      	ldr	r3, [pc, #332]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1f0      	bne.n	8007b8c <HAL_RCC_OscConfig+0x10c>
 8007baa:	e000      	b.n	8007bae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d063      	beq.n	8007c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007bba:	4b4c      	ldr	r3, [pc, #304]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f003 030c 	and.w	r3, r3, #12
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00b      	beq.n	8007bde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007bc6:	4b49      	ldr	r3, [pc, #292]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f003 030c 	and.w	r3, r3, #12
 8007bce:	2b08      	cmp	r3, #8
 8007bd0:	d11c      	bne.n	8007c0c <HAL_RCC_OscConfig+0x18c>
 8007bd2:	4b46      	ldr	r3, [pc, #280]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d116      	bne.n	8007c0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bde:	4b43      	ldr	r3, [pc, #268]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x176>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d001      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e1c0      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	4939      	ldr	r1, [pc, #228]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c0a:	e03a      	b.n	8007c82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d020      	beq.n	8007c56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c14:	4b36      	ldr	r3, [pc, #216]	@ (8007cf0 <HAL_RCC_OscConfig+0x270>)
 8007c16:	2201      	movs	r2, #1
 8007c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c1a:	f7ff fb07 	bl	800722c <HAL_GetTick>
 8007c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c20:	e008      	b.n	8007c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c22:	f7ff fb03 	bl	800722c <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d901      	bls.n	8007c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e1a1      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c34:	4b2d      	ldr	r3, [pc, #180]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d0f0      	beq.n	8007c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c40:	4b2a      	ldr	r3, [pc, #168]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	4927      	ldr	r1, [pc, #156]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	600b      	str	r3, [r1, #0]
 8007c54:	e015      	b.n	8007c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c56:	4b26      	ldr	r3, [pc, #152]	@ (8007cf0 <HAL_RCC_OscConfig+0x270>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c5c:	f7ff fae6 	bl	800722c <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c64:	f7ff fae2 	bl	800722c <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e180      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c76:	4b1d      	ldr	r3, [pc, #116]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f0      	bne.n	8007c64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0308 	and.w	r3, r3, #8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d03a      	beq.n	8007d04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d019      	beq.n	8007cca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c96:	4b17      	ldr	r3, [pc, #92]	@ (8007cf4 <HAL_RCC_OscConfig+0x274>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c9c:	f7ff fac6 	bl	800722c <HAL_GetTick>
 8007ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ca2:	e008      	b.n	8007cb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ca4:	f7ff fac2 	bl	800722c <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e160      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cec <HAL_RCC_OscConfig+0x26c>)
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0f0      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007cc2:	2001      	movs	r0, #1
 8007cc4:	f000 face 	bl	8008264 <RCC_Delay>
 8007cc8:	e01c      	b.n	8007d04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cca:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf4 <HAL_RCC_OscConfig+0x274>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cd0:	f7ff faac 	bl	800722c <HAL_GetTick>
 8007cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cd6:	e00f      	b.n	8007cf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cd8:	f7ff faa8 	bl	800722c <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d908      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e146      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
 8007cea:	bf00      	nop
 8007cec:	40021000 	.word	0x40021000
 8007cf0:	42420000 	.word	0x42420000
 8007cf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cf8:	4b92      	ldr	r3, [pc, #584]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e9      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 80a6 	beq.w	8007e5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d12:	2300      	movs	r3, #0
 8007d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d16:	4b8b      	ldr	r3, [pc, #556]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10d      	bne.n	8007d3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d22:	4b88      	ldr	r3, [pc, #544]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	4a87      	ldr	r2, [pc, #540]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d2c:	61d3      	str	r3, [r2, #28]
 8007d2e:	4b85      	ldr	r3, [pc, #532]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d36:	60bb      	str	r3, [r7, #8]
 8007d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d3e:	4b82      	ldr	r3, [pc, #520]	@ (8007f48 <HAL_RCC_OscConfig+0x4c8>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d118      	bne.n	8007d7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8007f48 <HAL_RCC_OscConfig+0x4c8>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8007f48 <HAL_RCC_OscConfig+0x4c8>)
 8007d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d56:	f7ff fa69 	bl	800722c <HAL_GetTick>
 8007d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d5c:	e008      	b.n	8007d70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d5e:	f7ff fa65 	bl	800722c <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b64      	cmp	r3, #100	@ 0x64
 8007d6a:	d901      	bls.n	8007d70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e103      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d70:	4b75      	ldr	r3, [pc, #468]	@ (8007f48 <HAL_RCC_OscConfig+0x4c8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0f0      	beq.n	8007d5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d106      	bne.n	8007d92 <HAL_RCC_OscConfig+0x312>
 8007d84:	4b6f      	ldr	r3, [pc, #444]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	4a6e      	ldr	r2, [pc, #440]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007d8a:	f043 0301 	orr.w	r3, r3, #1
 8007d8e:	6213      	str	r3, [r2, #32]
 8007d90:	e02d      	b.n	8007dee <HAL_RCC_OscConfig+0x36e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10c      	bne.n	8007db4 <HAL_RCC_OscConfig+0x334>
 8007d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	4a69      	ldr	r2, [pc, #420]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007da0:	f023 0301 	bic.w	r3, r3, #1
 8007da4:	6213      	str	r3, [r2, #32]
 8007da6:	4b67      	ldr	r3, [pc, #412]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	4a66      	ldr	r2, [pc, #408]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007dac:	f023 0304 	bic.w	r3, r3, #4
 8007db0:	6213      	str	r3, [r2, #32]
 8007db2:	e01c      	b.n	8007dee <HAL_RCC_OscConfig+0x36e>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	2b05      	cmp	r3, #5
 8007dba:	d10c      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x356>
 8007dbc:	4b61      	ldr	r3, [pc, #388]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	4a60      	ldr	r2, [pc, #384]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007dc2:	f043 0304 	orr.w	r3, r3, #4
 8007dc6:	6213      	str	r3, [r2, #32]
 8007dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007dce:	f043 0301 	orr.w	r3, r3, #1
 8007dd2:	6213      	str	r3, [r2, #32]
 8007dd4:	e00b      	b.n	8007dee <HAL_RCC_OscConfig+0x36e>
 8007dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	4a5a      	ldr	r2, [pc, #360]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007ddc:	f023 0301 	bic.w	r3, r3, #1
 8007de0:	6213      	str	r3, [r2, #32]
 8007de2:	4b58      	ldr	r3, [pc, #352]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	4a57      	ldr	r2, [pc, #348]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007de8:	f023 0304 	bic.w	r3, r3, #4
 8007dec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d015      	beq.n	8007e22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007df6:	f7ff fa19 	bl	800722c <HAL_GetTick>
 8007dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dfc:	e00a      	b.n	8007e14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dfe:	f7ff fa15 	bl	800722c <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d901      	bls.n	8007e14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e0b1      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e14:	4b4b      	ldr	r3, [pc, #300]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d0ee      	beq.n	8007dfe <HAL_RCC_OscConfig+0x37e>
 8007e20:	e014      	b.n	8007e4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e22:	f7ff fa03 	bl	800722c <HAL_GetTick>
 8007e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e28:	e00a      	b.n	8007e40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e2a:	f7ff f9ff 	bl	800722c <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e09b      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e40:	4b40      	ldr	r3, [pc, #256]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1ee      	bne.n	8007e2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d105      	bne.n	8007e5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e52:	4b3c      	ldr	r3, [pc, #240]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	4a3b      	ldr	r2, [pc, #236]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 8087 	beq.w	8007f76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e68:	4b36      	ldr	r3, [pc, #216]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f003 030c 	and.w	r3, r3, #12
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d061      	beq.n	8007f38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d146      	bne.n	8007f0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e7c:	4b33      	ldr	r3, [pc, #204]	@ (8007f4c <HAL_RCC_OscConfig+0x4cc>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e82:	f7ff f9d3 	bl	800722c <HAL_GetTick>
 8007e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e88:	e008      	b.n	8007e9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e8a:	f7ff f9cf 	bl	800722c <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d901      	bls.n	8007e9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e06d      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e9c:	4b29      	ldr	r3, [pc, #164]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1f0      	bne.n	8007e8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eb0:	d108      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007eb2:	4b24      	ldr	r3, [pc, #144]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	4921      	ldr	r1, [pc, #132]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a19      	ldr	r1, [r3, #32]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	491b      	ldr	r1, [pc, #108]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007edc:	4b1b      	ldr	r3, [pc, #108]	@ (8007f4c <HAL_RCC_OscConfig+0x4cc>)
 8007ede:	2201      	movs	r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ee2:	f7ff f9a3 	bl	800722c <HAL_GetTick>
 8007ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007ee8:	e008      	b.n	8007efc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eea:	f7ff f99f 	bl	800722c <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d901      	bls.n	8007efc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e03d      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007efc:	4b11      	ldr	r3, [pc, #68]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0f0      	beq.n	8007eea <HAL_RCC_OscConfig+0x46a>
 8007f08:	e035      	b.n	8007f76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f0a:	4b10      	ldr	r3, [pc, #64]	@ (8007f4c <HAL_RCC_OscConfig+0x4cc>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f10:	f7ff f98c 	bl	800722c <HAL_GetTick>
 8007f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f18:	f7ff f988 	bl	800722c <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e026      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f2a:	4b06      	ldr	r3, [pc, #24]	@ (8007f44 <HAL_RCC_OscConfig+0x4c4>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f0      	bne.n	8007f18 <HAL_RCC_OscConfig+0x498>
 8007f36:	e01e      	b.n	8007f76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d107      	bne.n	8007f50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e019      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
 8007f44:	40021000 	.word	0x40021000
 8007f48:	40007000 	.word	0x40007000
 8007f4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007f50:	4b0b      	ldr	r3, [pc, #44]	@ (8007f80 <HAL_RCC_OscConfig+0x500>)
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d106      	bne.n	8007f72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d001      	beq.n	8007f76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e000      	b.n	8007f78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	40021000 	.word	0x40021000

08007f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e0d0      	b.n	800813a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f98:	4b6a      	ldr	r3, [pc, #424]	@ (8008144 <HAL_RCC_ClockConfig+0x1c0>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0307 	and.w	r3, r3, #7
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d910      	bls.n	8007fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fa6:	4b67      	ldr	r3, [pc, #412]	@ (8008144 <HAL_RCC_ClockConfig+0x1c0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f023 0207 	bic.w	r2, r3, #7
 8007fae:	4965      	ldr	r1, [pc, #404]	@ (8008144 <HAL_RCC_ClockConfig+0x1c0>)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fb6:	4b63      	ldr	r3, [pc, #396]	@ (8008144 <HAL_RCC_ClockConfig+0x1c0>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0307 	and.w	r3, r3, #7
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d001      	beq.n	8007fc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e0b8      	b.n	800813a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d020      	beq.n	8008016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d005      	beq.n	8007fec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fe0:	4b59      	ldr	r3, [pc, #356]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	4a58      	ldr	r2, [pc, #352]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 8007fe6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007fea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d005      	beq.n	8008004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ff8:	4b53      	ldr	r3, [pc, #332]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	4a52      	ldr	r2, [pc, #328]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 8007ffe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008004:	4b50      	ldr	r3, [pc, #320]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	494d      	ldr	r1, [pc, #308]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 8008012:	4313      	orrs	r3, r2
 8008014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d040      	beq.n	80080a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d107      	bne.n	800803a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800802a:	4b47      	ldr	r3, [pc, #284]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d115      	bne.n	8008062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e07f      	b.n	800813a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	2b02      	cmp	r3, #2
 8008040:	d107      	bne.n	8008052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008042:	4b41      	ldr	r3, [pc, #260]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d109      	bne.n	8008062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e073      	b.n	800813a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008052:	4b3d      	ldr	r3, [pc, #244]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e06b      	b.n	800813a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008062:	4b39      	ldr	r3, [pc, #228]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f023 0203 	bic.w	r2, r3, #3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	4936      	ldr	r1, [pc, #216]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 8008070:	4313      	orrs	r3, r2
 8008072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008074:	f7ff f8da 	bl	800722c <HAL_GetTick>
 8008078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800807a:	e00a      	b.n	8008092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800807c:	f7ff f8d6 	bl	800722c <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800808a:	4293      	cmp	r3, r2
 800808c:	d901      	bls.n	8008092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e053      	b.n	800813a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008092:	4b2d      	ldr	r3, [pc, #180]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f003 020c 	and.w	r2, r3, #12
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d1eb      	bne.n	800807c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080a4:	4b27      	ldr	r3, [pc, #156]	@ (8008144 <HAL_RCC_ClockConfig+0x1c0>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d210      	bcs.n	80080d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080b2:	4b24      	ldr	r3, [pc, #144]	@ (8008144 <HAL_RCC_ClockConfig+0x1c0>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f023 0207 	bic.w	r2, r3, #7
 80080ba:	4922      	ldr	r1, [pc, #136]	@ (8008144 <HAL_RCC_ClockConfig+0x1c0>)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	4313      	orrs	r3, r2
 80080c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080c2:	4b20      	ldr	r3, [pc, #128]	@ (8008144 <HAL_RCC_ClockConfig+0x1c0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d001      	beq.n	80080d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e032      	b.n	800813a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d008      	beq.n	80080f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080e0:	4b19      	ldr	r3, [pc, #100]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	4916      	ldr	r1, [pc, #88]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0308 	and.w	r3, r3, #8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d009      	beq.n	8008112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80080fe:	4b12      	ldr	r3, [pc, #72]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	490e      	ldr	r1, [pc, #56]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 800810e:	4313      	orrs	r3, r2
 8008110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008112:	f000 f821 	bl	8008158 <HAL_RCC_GetSysClockFreq>
 8008116:	4602      	mov	r2, r0
 8008118:	4b0b      	ldr	r3, [pc, #44]	@ (8008148 <HAL_RCC_ClockConfig+0x1c4>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	091b      	lsrs	r3, r3, #4
 800811e:	f003 030f 	and.w	r3, r3, #15
 8008122:	490a      	ldr	r1, [pc, #40]	@ (800814c <HAL_RCC_ClockConfig+0x1c8>)
 8008124:	5ccb      	ldrb	r3, [r1, r3]
 8008126:	fa22 f303 	lsr.w	r3, r2, r3
 800812a:	4a09      	ldr	r2, [pc, #36]	@ (8008150 <HAL_RCC_ClockConfig+0x1cc>)
 800812c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800812e:	4b09      	ldr	r3, [pc, #36]	@ (8008154 <HAL_RCC_ClockConfig+0x1d0>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4618      	mov	r0, r3
 8008134:	f7ff f838 	bl	80071a8 <HAL_InitTick>

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	40022000 	.word	0x40022000
 8008148:	40021000 	.word	0x40021000
 800814c:	0800bf8c 	.word	0x0800bf8c
 8008150:	20000004 	.word	0x20000004
 8008154:	20000008 	.word	0x20000008

08008158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	2300      	movs	r3, #0
 8008164:	60bb      	str	r3, [r7, #8]
 8008166:	2300      	movs	r3, #0
 8008168:	617b      	str	r3, [r7, #20]
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008172:	4b1e      	ldr	r3, [pc, #120]	@ (80081ec <HAL_RCC_GetSysClockFreq+0x94>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f003 030c 	and.w	r3, r3, #12
 800817e:	2b04      	cmp	r3, #4
 8008180:	d002      	beq.n	8008188 <HAL_RCC_GetSysClockFreq+0x30>
 8008182:	2b08      	cmp	r3, #8
 8008184:	d003      	beq.n	800818e <HAL_RCC_GetSysClockFreq+0x36>
 8008186:	e027      	b.n	80081d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008188:	4b19      	ldr	r3, [pc, #100]	@ (80081f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800818a:	613b      	str	r3, [r7, #16]
      break;
 800818c:	e027      	b.n	80081de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	0c9b      	lsrs	r3, r3, #18
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	4a17      	ldr	r2, [pc, #92]	@ (80081f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008198:	5cd3      	ldrb	r3, [r2, r3]
 800819a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d010      	beq.n	80081c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80081a6:	4b11      	ldr	r3, [pc, #68]	@ (80081ec <HAL_RCC_GetSysClockFreq+0x94>)
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	0c5b      	lsrs	r3, r3, #17
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	4a11      	ldr	r2, [pc, #68]	@ (80081f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80081b2:	5cd3      	ldrb	r3, [r2, r3]
 80081b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a0d      	ldr	r2, [pc, #52]	@ (80081f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80081ba:	fb03 f202 	mul.w	r2, r3, r2
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c4:	617b      	str	r3, [r7, #20]
 80081c6:	e004      	b.n	80081d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a0c      	ldr	r2, [pc, #48]	@ (80081fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80081cc:	fb02 f303 	mul.w	r3, r2, r3
 80081d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	613b      	str	r3, [r7, #16]
      break;
 80081d6:	e002      	b.n	80081de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80081d8:	4b05      	ldr	r3, [pc, #20]	@ (80081f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80081da:	613b      	str	r3, [r7, #16]
      break;
 80081dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081de:	693b      	ldr	r3, [r7, #16]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bc80      	pop	{r7}
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	40021000 	.word	0x40021000
 80081f0:	007a1200 	.word	0x007a1200
 80081f4:	0800bfa4 	.word	0x0800bfa4
 80081f8:	0800bfb4 	.word	0x0800bfb4
 80081fc:	003d0900 	.word	0x003d0900

08008200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008204:	4b02      	ldr	r3, [pc, #8]	@ (8008210 <HAL_RCC_GetHCLKFreq+0x10>)
 8008206:	681b      	ldr	r3, [r3, #0]
}
 8008208:	4618      	mov	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	bc80      	pop	{r7}
 800820e:	4770      	bx	lr
 8008210:	20000004 	.word	0x20000004

08008214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008218:	f7ff fff2 	bl	8008200 <HAL_RCC_GetHCLKFreq>
 800821c:	4602      	mov	r2, r0
 800821e:	4b05      	ldr	r3, [pc, #20]	@ (8008234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	0a1b      	lsrs	r3, r3, #8
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	4903      	ldr	r1, [pc, #12]	@ (8008238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800822a:	5ccb      	ldrb	r3, [r1, r3]
 800822c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008230:	4618      	mov	r0, r3
 8008232:	bd80      	pop	{r7, pc}
 8008234:	40021000 	.word	0x40021000
 8008238:	0800bf9c 	.word	0x0800bf9c

0800823c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008240:	f7ff ffde 	bl	8008200 <HAL_RCC_GetHCLKFreq>
 8008244:	4602      	mov	r2, r0
 8008246:	4b05      	ldr	r3, [pc, #20]	@ (800825c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	0adb      	lsrs	r3, r3, #11
 800824c:	f003 0307 	and.w	r3, r3, #7
 8008250:	4903      	ldr	r1, [pc, #12]	@ (8008260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008252:	5ccb      	ldrb	r3, [r1, r3]
 8008254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008258:	4618      	mov	r0, r3
 800825a:	bd80      	pop	{r7, pc}
 800825c:	40021000 	.word	0x40021000
 8008260:	0800bf9c 	.word	0x0800bf9c

08008264 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800826c:	4b0a      	ldr	r3, [pc, #40]	@ (8008298 <RCC_Delay+0x34>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a0a      	ldr	r2, [pc, #40]	@ (800829c <RCC_Delay+0x38>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	0a5b      	lsrs	r3, r3, #9
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	fb02 f303 	mul.w	r3, r2, r3
 800827e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008280:	bf00      	nop
  }
  while (Delay --);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1e5a      	subs	r2, r3, #1
 8008286:	60fa      	str	r2, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1f9      	bne.n	8008280 <RCC_Delay+0x1c>
}
 800828c:	bf00      	nop
 800828e:	bf00      	nop
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	bc80      	pop	{r7}
 8008296:	4770      	bx	lr
 8008298:	20000004 	.word	0x20000004
 800829c:	10624dd3 	.word	0x10624dd3

080082a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e042      	b.n	8008338 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d106      	bne.n	80082cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7fe fede 	bl	8007088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2224      	movs	r2, #36	@ 0x24
 80082d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fdb7 	bl	8008e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	691a      	ldr	r2, [r3, #16]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	695a      	ldr	r2, [r3, #20]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2220      	movs	r2, #32
 8008324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2220      	movs	r2, #32
 800832c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08a      	sub	sp, #40	@ 0x28
 8008344:	af02      	add	r7, sp, #8
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	4613      	mov	r3, r2
 800834e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b20      	cmp	r3, #32
 800835e:	d175      	bne.n	800844c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <HAL_UART_Transmit+0x2c>
 8008366:	88fb      	ldrh	r3, [r7, #6]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e06e      	b.n	800844e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2221      	movs	r2, #33	@ 0x21
 800837a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800837e:	f7fe ff55 	bl	800722c <HAL_GetTick>
 8008382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	88fa      	ldrh	r2, [r7, #6]
 8008388:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	88fa      	ldrh	r2, [r7, #6]
 800838e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008398:	d108      	bne.n	80083ac <HAL_UART_Transmit+0x6c>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d104      	bne.n	80083ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	61bb      	str	r3, [r7, #24]
 80083aa:	e003      	b.n	80083b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083b4:	e02e      	b.n	8008414 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2200      	movs	r2, #0
 80083be:	2180      	movs	r1, #128	@ 0x80
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 fb1c 	bl	80089fe <UART_WaitOnFlagUntilTimeout>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e03a      	b.n	800844e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10b      	bne.n	80083f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	3302      	adds	r3, #2
 80083f2:	61bb      	str	r3, [r7, #24]
 80083f4:	e007      	b.n	8008406 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	781a      	ldrb	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	3301      	adds	r3, #1
 8008404:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800840a:	b29b      	uxth	r3, r3
 800840c:	3b01      	subs	r3, #1
 800840e:	b29a      	uxth	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008418:	b29b      	uxth	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1cb      	bne.n	80083b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2200      	movs	r2, #0
 8008426:	2140      	movs	r1, #64	@ 0x40
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 fae8 	bl	80089fe <UART_WaitOnFlagUntilTimeout>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d005      	beq.n	8008440 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e006      	b.n	800844e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	e000      	b.n	800844e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800844c:	2302      	movs	r3, #2
  }
}
 800844e:	4618      	mov	r0, r3
 8008450:	3720      	adds	r7, #32
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	4613      	mov	r3, r2
 8008462:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b20      	cmp	r3, #32
 800846e:	d112      	bne.n	8008496 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <HAL_UART_Receive_IT+0x26>
 8008476:	88fb      	ldrh	r3, [r7, #6]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e00b      	b.n	8008498 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008486:	88fb      	ldrh	r3, [r7, #6]
 8008488:	461a      	mov	r2, r3
 800848a:	68b9      	ldr	r1, [r7, #8]
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 fb0f 	bl	8008ab0 <UART_Start_Receive_IT>
 8008492:	4603      	mov	r3, r0
 8008494:	e000      	b.n	8008498 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008496:	2302      	movs	r3, #2
  }
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b0ba      	sub	sp, #232	@ 0xe8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084d6:	f003 030f 	and.w	r3, r3, #15
 80084da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80084de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10f      	bne.n	8008506 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d009      	beq.n	8008506 <HAL_UART_IRQHandler+0x66>
 80084f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fbec 	bl	8008cdc <UART_Receive_IT>
      return;
 8008504:	e25b      	b.n	80089be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 80de 	beq.w	80086cc <HAL_UART_IRQHandler+0x22c>
 8008510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d106      	bne.n	800852a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800851c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008520:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 80d1 	beq.w	80086cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800852a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00b      	beq.n	800854e <HAL_UART_IRQHandler+0xae>
 8008536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800853a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800853e:	2b00      	cmp	r3, #0
 8008540:	d005      	beq.n	800854e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008546:	f043 0201 	orr.w	r2, r3, #1
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800854e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008552:	f003 0304 	and.w	r3, r3, #4
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00b      	beq.n	8008572 <HAL_UART_IRQHandler+0xd2>
 800855a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d005      	beq.n	8008572 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800856a:	f043 0202 	orr.w	r2, r3, #2
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00b      	beq.n	8008596 <HAL_UART_IRQHandler+0xf6>
 800857e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800858e:	f043 0204 	orr.w	r2, r3, #4
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800859a:	f003 0308 	and.w	r3, r3, #8
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d011      	beq.n	80085c6 <HAL_UART_IRQHandler+0x126>
 80085a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d105      	bne.n	80085ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80085ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085be:	f043 0208 	orr.w	r2, r3, #8
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 81f2 	beq.w	80089b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d4:	f003 0320 	and.w	r3, r3, #32
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d008      	beq.n	80085ee <HAL_UART_IRQHandler+0x14e>
 80085dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fb77 	bl	8008cdc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bf14      	ite	ne
 80085fc:	2301      	movne	r3, #1
 80085fe:	2300      	moveq	r3, #0
 8008600:	b2db      	uxtb	r3, r3
 8008602:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860a:	f003 0308 	and.w	r3, r3, #8
 800860e:	2b00      	cmp	r3, #0
 8008610:	d103      	bne.n	800861a <HAL_UART_IRQHandler+0x17a>
 8008612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008616:	2b00      	cmp	r3, #0
 8008618:	d04f      	beq.n	80086ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fa81 	bl	8008b22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d041      	beq.n	80086b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3314      	adds	r3, #20
 8008634:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008644:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800864c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3314      	adds	r3, #20
 8008656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800865a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800865e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1d9      	bne.n	800862e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d013      	beq.n	80086aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008686:	4a7e      	ldr	r2, [pc, #504]	@ (8008880 <HAL_UART_IRQHandler+0x3e0>)
 8008688:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe ff42 	bl	8007518 <HAL_DMA_Abort_IT>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d016      	beq.n	80086c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80086a4:	4610      	mov	r0, r2
 80086a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a8:	e00e      	b.n	80086c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f993 	bl	80089d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b0:	e00a      	b.n	80086c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f98f 	bl	80089d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b8:	e006      	b.n	80086c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f98b 	bl	80089d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80086c6:	e175      	b.n	80089b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c8:	bf00      	nop
    return;
 80086ca:	e173      	b.n	80089b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	f040 814f 	bne.w	8008974 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086da:	f003 0310 	and.w	r3, r3, #16
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 8148 	beq.w	8008974 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80086e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e8:	f003 0310 	and.w	r3, r3, #16
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 8141 	beq.w	8008974 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086f2:	2300      	movs	r3, #0
 80086f4:	60bb      	str	r3, [r7, #8]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	60bb      	str	r3, [r7, #8]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	60bb      	str	r3, [r7, #8]
 8008706:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 80b6 	beq.w	8008884 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008724:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 8145 	beq.w	80089b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008736:	429a      	cmp	r2, r3
 8008738:	f080 813e 	bcs.w	80089b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008742:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	2b20      	cmp	r3, #32
 800874c:	f000 8088 	beq.w	8008860 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	330c      	adds	r3, #12
 8008756:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800875e:	e853 3f00 	ldrex	r3, [r3]
 8008762:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008766:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800876a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800876e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	330c      	adds	r3, #12
 8008778:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800877c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008780:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008788:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800878c:	e841 2300 	strex	r3, r2, [r1]
 8008790:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008794:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1d9      	bne.n	8008750 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3314      	adds	r3, #20
 80087a2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087ae:	f023 0301 	bic.w	r3, r3, #1
 80087b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3314      	adds	r3, #20
 80087bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087c0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e1      	bne.n	800879c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3314      	adds	r3, #20
 80087de:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3314      	adds	r3, #20
 80087f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80087fc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80087fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008802:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800880a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e3      	bne.n	80087d8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	330c      	adds	r3, #12
 8008824:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008828:	e853 3f00 	ldrex	r3, [r3]
 800882c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800882e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008830:	f023 0310 	bic.w	r3, r3, #16
 8008834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	330c      	adds	r3, #12
 800883e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008842:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008844:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008846:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008848:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800884a:	e841 2300 	strex	r3, r2, [r1]
 800884e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1e3      	bne.n	800881e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe fe21 	bl	80074a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800886e:	b29b      	uxth	r3, r3
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	b29b      	uxth	r3, r3
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f8b6 	bl	80089e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800887c:	e09c      	b.n	80089b8 <HAL_UART_IRQHandler+0x518>
 800887e:	bf00      	nop
 8008880:	08008be7 	.word	0x08008be7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800888c:	b29b      	uxth	r3, r3
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008898:	b29b      	uxth	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 808e 	beq.w	80089bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80088a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8089 	beq.w	80089bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	330c      	adds	r3, #12
 80088b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b4:	e853 3f00 	ldrex	r3, [r3]
 80088b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	330c      	adds	r3, #12
 80088ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80088ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80088d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088d6:	e841 2300 	strex	r3, r2, [r1]
 80088da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1e3      	bne.n	80088aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3314      	adds	r3, #20
 80088e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	e853 3f00 	ldrex	r3, [r3]
 80088f0:	623b      	str	r3, [r7, #32]
   return(result);
 80088f2:	6a3b      	ldr	r3, [r7, #32]
 80088f4:	f023 0301 	bic.w	r3, r3, #1
 80088f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3314      	adds	r3, #20
 8008902:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008906:	633a      	str	r2, [r7, #48]	@ 0x30
 8008908:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800890c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1e3      	bne.n	80088e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2220      	movs	r2, #32
 800891e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	330c      	adds	r3, #12
 800892e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	e853 3f00 	ldrex	r3, [r3]
 8008936:	60fb      	str	r3, [r7, #12]
   return(result);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 0310 	bic.w	r3, r3, #16
 800893e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	330c      	adds	r3, #12
 8008948:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800894c:	61fa      	str	r2, [r7, #28]
 800894e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	69b9      	ldr	r1, [r7, #24]
 8008952:	69fa      	ldr	r2, [r7, #28]
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	617b      	str	r3, [r7, #20]
   return(result);
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e3      	bne.n	8008928 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2202      	movs	r2, #2
 8008964:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008966:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f83b 	bl	80089e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008972:	e023      	b.n	80089bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800897c:	2b00      	cmp	r3, #0
 800897e:	d009      	beq.n	8008994 <HAL_UART_IRQHandler+0x4f4>
 8008980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f93e 	bl	8008c0e <UART_Transmit_IT>
    return;
 8008992:	e014      	b.n	80089be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00e      	beq.n	80089be <HAL_UART_IRQHandler+0x51e>
 80089a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d008      	beq.n	80089be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f97d 	bl	8008cac <UART_EndTransmit_IT>
    return;
 80089b2:	e004      	b.n	80089be <HAL_UART_IRQHandler+0x51e>
    return;
 80089b4:	bf00      	nop
 80089b6:	e002      	b.n	80089be <HAL_UART_IRQHandler+0x51e>
      return;
 80089b8:	bf00      	nop
 80089ba:	e000      	b.n	80089be <HAL_UART_IRQHandler+0x51e>
      return;
 80089bc:	bf00      	nop
  }
}
 80089be:	37e8      	adds	r7, #232	@ 0xe8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bc80      	pop	{r7}
 80089d4:	4770      	bx	lr

080089d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089de:	bf00      	nop
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bc80      	pop	{r7}
 80089e6:	4770      	bx	lr

080089e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bc80      	pop	{r7}
 80089fc:	4770      	bx	lr

080089fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b086      	sub	sp, #24
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	60b9      	str	r1, [r7, #8]
 8008a08:	603b      	str	r3, [r7, #0]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a0e:	e03b      	b.n	8008a88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a16:	d037      	beq.n	8008a88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a18:	f7fe fc08 	bl	800722c <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	6a3a      	ldr	r2, [r7, #32]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d302      	bcc.n	8008a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e03a      	b.n	8008aa8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d023      	beq.n	8008a88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b80      	cmp	r3, #128	@ 0x80
 8008a44:	d020      	beq.n	8008a88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b40      	cmp	r3, #64	@ 0x40
 8008a4a:	d01d      	beq.n	8008a88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0308 	and.w	r3, r3, #8
 8008a56:	2b08      	cmp	r3, #8
 8008a58:	d116      	bne.n	8008a88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	617b      	str	r3, [r7, #20]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	617b      	str	r3, [r7, #20]
 8008a6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 f856 	bl	8008b22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2208      	movs	r2, #8
 8008a7a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e00f      	b.n	8008aa8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	4013      	ands	r3, r2
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	bf0c      	ite	eq
 8008a98:	2301      	moveq	r3, #1
 8008a9a:	2300      	movne	r3, #0
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d0b4      	beq.n	8008a10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	88fa      	ldrh	r2, [r7, #6]
 8008ac8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	88fa      	ldrh	r2, [r7, #6]
 8008ace:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2222      	movs	r2, #34	@ 0x22
 8008ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d007      	beq.n	8008af6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008af4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	695a      	ldr	r2, [r3, #20]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f042 0201 	orr.w	r2, r2, #1
 8008b04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68da      	ldr	r2, [r3, #12]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f042 0220 	orr.w	r2, r2, #32
 8008b14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bc80      	pop	{r7}
 8008b20:	4770      	bx	lr

08008b22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b095      	sub	sp, #84	@ 0x54
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	330c      	adds	r3, #12
 8008b30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	330c      	adds	r3, #12
 8008b48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b52:	e841 2300 	strex	r3, r2, [r1]
 8008b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1e5      	bne.n	8008b2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3314      	adds	r3, #20
 8008b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	f023 0301 	bic.w	r3, r3, #1
 8008b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3314      	adds	r3, #20
 8008b7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e5      	bne.n	8008b5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d119      	bne.n	8008bce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	330c      	adds	r3, #12
 8008ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f023 0310 	bic.w	r3, r3, #16
 8008bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	330c      	adds	r3, #12
 8008bb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bba:	61ba      	str	r2, [r7, #24]
 8008bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	6979      	ldr	r1, [r7, #20]
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e5      	bne.n	8008b9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008bdc:	bf00      	nop
 8008bde:	3754      	adds	r7, #84	@ 0x54
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bc80      	pop	{r7}
 8008be4:	4770      	bx	lr

08008be6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7ff fee8 	bl	80089d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c06:	bf00      	nop
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b085      	sub	sp, #20
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b21      	cmp	r3, #33	@ 0x21
 8008c20:	d13e      	bne.n	8008ca0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c2a:	d114      	bne.n	8008c56 <UART_Transmit_IT+0x48>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d110      	bne.n	8008c56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	1c9a      	adds	r2, r3, #2
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	621a      	str	r2, [r3, #32]
 8008c54:	e008      	b.n	8008c68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	1c59      	adds	r1, r3, #1
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	6211      	str	r1, [r2, #32]
 8008c60:	781a      	ldrb	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	4619      	mov	r1, r3
 8008c76:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10f      	bne.n	8008c9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68da      	ldr	r2, [r3, #12]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	e000      	b.n	8008ca2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ca0:	2302      	movs	r3, #2
  }
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bc80      	pop	{r7}
 8008caa:	4770      	bx	lr

08008cac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7ff fe79 	bl	80089c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b08c      	sub	sp, #48	@ 0x30
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	2b22      	cmp	r3, #34	@ 0x22
 8008cee:	f040 80ae 	bne.w	8008e4e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cfa:	d117      	bne.n	8008d2c <UART_Receive_IT+0x50>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d113      	bne.n	8008d2c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d04:	2300      	movs	r3, #0
 8008d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d24:	1c9a      	adds	r2, r3, #2
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d2a:	e026      	b.n	8008d7a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008d32:	2300      	movs	r3, #0
 8008d34:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d3e:	d007      	beq.n	8008d50 <UART_Receive_IT+0x74>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10a      	bne.n	8008d5e <UART_Receive_IT+0x82>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d106      	bne.n	8008d5e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5a:	701a      	strb	r2, [r3, #0]
 8008d5c:	e008      	b.n	8008d70 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	3b01      	subs	r3, #1
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	4619      	mov	r1, r3
 8008d88:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d15d      	bne.n	8008e4a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f022 0220 	bic.w	r2, r2, #32
 8008d9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008dac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	695a      	ldr	r2, [r3, #20]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0201 	bic.w	r2, r2, #1
 8008dbc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d135      	bne.n	8008e40 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	330c      	adds	r3, #12
 8008de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	613b      	str	r3, [r7, #16]
   return(result);
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f023 0310 	bic.w	r3, r3, #16
 8008df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	330c      	adds	r3, #12
 8008df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dfa:	623a      	str	r2, [r7, #32]
 8008dfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	69f9      	ldr	r1, [r7, #28]
 8008e00:	6a3a      	ldr	r2, [r7, #32]
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e5      	bne.n	8008dda <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0310 	and.w	r3, r3, #16
 8008e18:	2b10      	cmp	r3, #16
 8008e1a:	d10a      	bne.n	8008e32 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60fb      	str	r3, [r7, #12]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff fdd5 	bl	80089e8 <HAL_UARTEx_RxEventCallback>
 8008e3e:	e002      	b.n	8008e46 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7fe f893 	bl	8006f6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	e002      	b.n	8008e50 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e000      	b.n	8008e50 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008e4e:	2302      	movs	r3, #2
  }
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3730      	adds	r7, #48	@ 0x30
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008e92:	f023 030c 	bic.w	r3, r3, #12
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	6812      	ldr	r2, [r2, #0]
 8008e9a:	68b9      	ldr	r1, [r7, #8]
 8008e9c:	430b      	orrs	r3, r1
 8008e9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	699a      	ldr	r2, [r3, #24]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a2c      	ldr	r2, [pc, #176]	@ (8008f6c <UART_SetConfig+0x114>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d103      	bne.n	8008ec8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008ec0:	f7ff f9bc 	bl	800823c <HAL_RCC_GetPCLK2Freq>
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	e002      	b.n	8008ece <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008ec8:	f7ff f9a4 	bl	8008214 <HAL_RCC_GetPCLK1Freq>
 8008ecc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009a      	lsls	r2, r3, #2
 8008ed8:	441a      	add	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee4:	4a22      	ldr	r2, [pc, #136]	@ (8008f70 <UART_SetConfig+0x118>)
 8008ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eea:	095b      	lsrs	r3, r3, #5
 8008eec:	0119      	lsls	r1, r3, #4
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	009a      	lsls	r2, r3, #2
 8008ef8:	441a      	add	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f04:	4b1a      	ldr	r3, [pc, #104]	@ (8008f70 <UART_SetConfig+0x118>)
 8008f06:	fba3 0302 	umull	r0, r3, r3, r2
 8008f0a:	095b      	lsrs	r3, r3, #5
 8008f0c:	2064      	movs	r0, #100	@ 0x64
 8008f0e:	fb00 f303 	mul.w	r3, r0, r3
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	3332      	adds	r3, #50	@ 0x32
 8008f18:	4a15      	ldr	r2, [pc, #84]	@ (8008f70 <UART_SetConfig+0x118>)
 8008f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1e:	095b      	lsrs	r3, r3, #5
 8008f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f24:	4419      	add	r1, r3
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009a      	lsls	r2, r3, #2
 8008f30:	441a      	add	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f70 <UART_SetConfig+0x118>)
 8008f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8008f42:	095b      	lsrs	r3, r3, #5
 8008f44:	2064      	movs	r0, #100	@ 0x64
 8008f46:	fb00 f303 	mul.w	r3, r0, r3
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	011b      	lsls	r3, r3, #4
 8008f4e:	3332      	adds	r3, #50	@ 0x32
 8008f50:	4a07      	ldr	r2, [pc, #28]	@ (8008f70 <UART_SetConfig+0x118>)
 8008f52:	fba2 2303 	umull	r2, r3, r2, r3
 8008f56:	095b      	lsrs	r3, r3, #5
 8008f58:	f003 020f 	and.w	r2, r3, #15
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	440a      	add	r2, r1
 8008f62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008f64:	bf00      	nop
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	40013800 	.word	0x40013800
 8008f70:	51eb851f 	.word	0x51eb851f

08008f74 <memset>:
 8008f74:	4603      	mov	r3, r0
 8008f76:	4402      	add	r2, r0
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d100      	bne.n	8008f7e <memset+0xa>
 8008f7c:	4770      	bx	lr
 8008f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f82:	e7f9      	b.n	8008f78 <memset+0x4>

08008f84 <__libc_init_array>:
 8008f84:	b570      	push	{r4, r5, r6, lr}
 8008f86:	2600      	movs	r6, #0
 8008f88:	4d0c      	ldr	r5, [pc, #48]	@ (8008fbc <__libc_init_array+0x38>)
 8008f8a:	4c0d      	ldr	r4, [pc, #52]	@ (8008fc0 <__libc_init_array+0x3c>)
 8008f8c:	1b64      	subs	r4, r4, r5
 8008f8e:	10a4      	asrs	r4, r4, #2
 8008f90:	42a6      	cmp	r6, r4
 8008f92:	d109      	bne.n	8008fa8 <__libc_init_array+0x24>
 8008f94:	f000 f81a 	bl	8008fcc <_init>
 8008f98:	2600      	movs	r6, #0
 8008f9a:	4d0a      	ldr	r5, [pc, #40]	@ (8008fc4 <__libc_init_array+0x40>)
 8008f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8008fc8 <__libc_init_array+0x44>)
 8008f9e:	1b64      	subs	r4, r4, r5
 8008fa0:	10a4      	asrs	r4, r4, #2
 8008fa2:	42a6      	cmp	r6, r4
 8008fa4:	d105      	bne.n	8008fb2 <__libc_init_array+0x2e>
 8008fa6:	bd70      	pop	{r4, r5, r6, pc}
 8008fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fac:	4798      	blx	r3
 8008fae:	3601      	adds	r6, #1
 8008fb0:	e7ee      	b.n	8008f90 <__libc_init_array+0xc>
 8008fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fb6:	4798      	blx	r3
 8008fb8:	3601      	adds	r6, #1
 8008fba:	e7f2      	b.n	8008fa2 <__libc_init_array+0x1e>
 8008fbc:	0800bfc0 	.word	0x0800bfc0
 8008fc0:	0800bfc0 	.word	0x0800bfc0
 8008fc4:	0800bfc0 	.word	0x0800bfc0
 8008fc8:	0800bfc4 	.word	0x0800bfc4

08008fcc <_init>:
 8008fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fce:	bf00      	nop
 8008fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd2:	bc08      	pop	{r3}
 8008fd4:	469e      	mov	lr, r3
 8008fd6:	4770      	bx	lr

08008fd8 <_fini>:
 8008fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fda:	bf00      	nop
 8008fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fde:	bc08      	pop	{r3}
 8008fe0:	469e      	mov	lr, r3
 8008fe2:	4770      	bx	lr
