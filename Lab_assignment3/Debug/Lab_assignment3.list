
Lab_assignment3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba4  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003038  0800ad8c  0800ad8c  0000bd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddc4  0800ddc4  0000f06c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ddc4  0800ddc4  0000f06c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ddc4  0800ddc4  0000f06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddc4  0800ddc4  0000edc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ddc8  0800ddc8  0000edc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800ddcc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000180c  2000006c  0800de38  0000f06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001878  0800de38  0000f878  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3bb  00000000  00000000  0000f095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002467  00000000  00000000  0001e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  000208b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a92  00000000  00000000  00021638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025c0  00000000  00000000  000220ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001216b  00000000  00000000  0002468a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099565  00000000  00000000  000367f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfd5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e00  00000000  00000000  000cfda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000d3ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000006c 	.word	0x2000006c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ad74 	.word	0x0800ad74

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000070 	.word	0x20000070
 8000224:	0800ad74 	.word	0x0800ad74

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000848:	4b46      	ldr	r3, [pc, #280]	@ (8000964 <MX_GPIO_Init+0x130>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a45      	ldr	r2, [pc, #276]	@ (8000964 <MX_GPIO_Init+0x130>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b40      	ldr	r3, [pc, #256]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a3f      	ldr	r2, [pc, #252]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b3d      	ldr	r3, [pc, #244]	@ (8000964 <MX_GPIO_Init+0x130>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000878:	4b3a      	ldr	r3, [pc, #232]	@ (8000964 <MX_GPIO_Init+0x130>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a39      	ldr	r2, [pc, #228]	@ (8000964 <MX_GPIO_Init+0x130>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b37      	ldr	r3, [pc, #220]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0310 	and.w	r3, r3, #16
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000896:	4834      	ldr	r0, [pc, #208]	@ (8000968 <MX_GPIO_Init+0x134>)
 8000898:	f007 fed1 	bl	800863e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2104      	movs	r1, #4
 80008a0:	4832      	ldr	r0, [pc, #200]	@ (800096c <MX_GPIO_Init+0x138>)
 80008a2:	f007 fecc 	bl	800863e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <MX_GPIO_Init+0x13c>)
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	482b      	ldr	r0, [pc, #172]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008ba:	f007 fd15 	bl	80082e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008be:	2320      	movs	r3, #32
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000974 <MX_GPIO_Init+0x140>)
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	4829      	ldr	r0, [pc, #164]	@ (8000978 <MX_GPIO_Init+0x144>)
 80008d2:	f007 fd09 	bl	80082e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	481e      	ldr	r0, [pc, #120]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008f0:	f007 fcfa 	bl	80082e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <MX_GPIO_Init+0x140>)
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	4817      	ldr	r0, [pc, #92]	@ (8000968 <MX_GPIO_Init+0x134>)
 800090a:	f007 fced 	bl	80082e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800090e:	2304      	movs	r3, #4
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	4811      	ldr	r0, [pc, #68]	@ (800096c <MX_GPIO_Init+0x138>)
 8000926:	f007 fcdf 	bl	80082e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2102      	movs	r1, #2
 800092e:	2006      	movs	r0, #6
 8000930:	f007 fb61 	bl	8007ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000934:	2006      	movs	r0, #6
 8000936:	f007 fb7a 	bl	800802e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	2017      	movs	r0, #23
 8000940:	f007 fb59 	bl	8007ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000944:	2017      	movs	r0, #23
 8000946:	f007 fb72 	bl	800802e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2102      	movs	r1, #2
 800094e:	2028      	movs	r0, #40	@ 0x28
 8000950:	f007 fb51 	bl	8007ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000954:	2028      	movs	r0, #40	@ 0x28
 8000956:	f007 fb6a 	bl	800802e <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40010800 	.word	0x40010800
 800096c:	40011400 	.word	0x40011400
 8000970:	10110000 	.word	0x10110000
 8000974:	10210000 	.word	0x10210000
 8000978:	40011000 	.word	0x40011000

0800097c <lcd_wr_xdata>:
 *              ʡ����ռ�.
 * @param       data : Ҫд�������
 * @retval      ��
 */
void lcd_wr_xdata(uint16_t data)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
    LCD_RS(1);
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <lcd_wr_xdata+0x40>)
 8000988:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800098c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <lcd_wr_xdata+0x40>)
 8000990:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000994:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(data);
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <lcd_wr_xdata+0x44>)
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	60d3      	str	r3, [r2, #12]
    LCD_WR(0);
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <lcd_wr_xdata+0x40>)
 800099e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009a2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <lcd_wr_xdata+0x40>)
 80009a6:	2280      	movs	r2, #128	@ 0x80
 80009a8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80009aa:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <lcd_wr_xdata+0x40>)
 80009ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009b0:	611a      	str	r2, [r3, #16]
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	40011000 	.word	0x40011000
 80009c0:	40010c00 	.word	0x40010c00

080009c4 <lcd_write_reg>:
 * @param       regno:�Ĵ������/��ַ
 * @param       data:Ҫд�������
 * @retval      ��
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	460a      	mov	r2, r1
 80009ce:	80fb      	strh	r3, [r7, #6]
 80009d0:	4613      	mov	r3, r2
 80009d2:	80bb      	strh	r3, [r7, #4]
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80009d8:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <lcd_write_reg+0x7c>)
 80009da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80009de:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <lcd_write_reg+0x7c>)
 80009e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009e6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <lcd_write_reg+0x80>)
 80009ee:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80009f0:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <lcd_write_reg+0x7c>)
 80009f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009f6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <lcd_write_reg+0x7c>)
 80009fa:	2280      	movs	r2, #128	@ 0x80
 80009fc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <lcd_write_reg+0x7c>)
 8000a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a04:	611a      	str	r2, [r3, #16]
}
 8000a06:	bf00      	nop
    lcd_wr_regno(regno);    /* д��Ҫд�ļĴ������ */
    lcd_wr_data(data);      /* д������ */
 8000a08:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <lcd_write_reg+0x7c>)
 8000a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a0e:	611a      	str	r2, [r3, #16]
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <lcd_write_reg+0x7c>)
 8000a12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <lcd_write_reg+0x80>)
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	60d3      	str	r3, [r2, #12]
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <lcd_write_reg+0x7c>)
 8000a20:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <lcd_write_reg+0x7c>)
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	611a      	str	r2, [r3, #16]
 8000a2c:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <lcd_write_reg+0x7c>)
 8000a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a32:	611a      	str	r2, [r3, #16]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40011000 	.word	0x40011000
 8000a44:	40010c00 	.word	0x40010c00

08000a48 <lcd_opt_delay>:
 * @brief       LCD��ʱ����,�����ڲ�����mdk -O1ʱ���Ż�ʱ��Ҫ���õĵط�
 * @param       t:��ʱ����ֵ
 * @retval      ��
 */
static void lcd_opt_delay(uint32_t i)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    while (i--);
 8000a50:	bf00      	nop
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	1e5a      	subs	r2, r3, #1
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1fa      	bne.n	8000a52 <lcd_opt_delay+0xa>
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <lcd_rd_data>:
 * @brief       LCD������
 * @param       ��
 * @retval      ��ȡ��������
 */
static uint16_t lcd_rd_data(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* ��ֹ���Ż� */
    
    GPIO_InitTypeDef gpio_init_struct;
    /* LCD_DATA ����ģʽ����, ��������, ׼���������� */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000a6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a72:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct); 
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4619      	mov	r1, r3
 8000a84:	4818      	ldr	r0, [pc, #96]	@ (8000ae8 <lcd_rd_data+0x80>)
 8000a86:	f007 fc2f 	bl	80082e8 <HAL_GPIO_Init>

    LCD_RS(1);              /* RS=1,��ʾ�������� */
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <lcd_rd_data+0x84>)
 8000a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a90:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <lcd_rd_data+0x84>)
 8000a94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a98:	611a      	str	r2, [r3, #16]
    LCD_RD(0);
 8000a9a:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <lcd_rd_data+0x84>)
 8000a9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000aa0:	611a      	str	r2, [r3, #16]
    lcd_opt_delay(2);
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f7ff ffd0 	bl	8000a48 <lcd_opt_delay>
    ram = LCD_DATA_IN;      /* ��ȡ���� */
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <lcd_rd_data+0x80>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	82fb      	strh	r3, [r7, #22]
    LCD_RD(1);
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <lcd_rd_data+0x84>)
 8000ab2:	2240      	movs	r2, #64	@ 0x40
 8000ab4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <lcd_rd_data+0x84>)
 8000ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000abc:	611a      	str	r2, [r3, #16]
    
    /* LCD_DATA ����ģʽ����, �������, �ָ����״̬ */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000abe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ac2:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <lcd_rd_data+0x80>)
 8000ad6:	f007 fc07 	bl	80082e8 <HAL_GPIO_Init>

    return ram;
 8000ada:	8afb      	ldrh	r3, [r7, #22]
 8000adc:	b29b      	uxth	r3, r3
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40011000 	.word	0x40011000

08000af0 <lcd_display_off>:
 * @brief       LCD�ر���ʾ
 * @param       ��
 * @retval      ��
 */
void lcd_display_off(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
    if (lcddev.id == 0X5510)
 8000af6:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <lcd_display_off+0x88>)
 8000af8:	889b      	ldrh	r3, [r3, #4]
 8000afa:	f245 5210 	movw	r2, #21776	@ 0x5510
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d11a      	bne.n	8000b38 <lcd_display_off+0x48>
 8000b02:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b06:	80bb      	strh	r3, [r7, #4]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <lcd_display_off+0x8c>)
 8000b0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b0e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000b10:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <lcd_display_off+0x8c>)
 8000b12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b16:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000b18:	88bb      	ldrh	r3, [r7, #4]
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <lcd_display_off+0x90>)
 8000b1e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000b20:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <lcd_display_off+0x8c>)
 8000b22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b26:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <lcd_display_off+0x8c>)
 8000b2a:	2280      	movs	r2, #128	@ 0x80
 8000b2c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <lcd_display_off+0x8c>)
 8000b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b34:	611a      	str	r2, [r3, #16]
}
 8000b36:	e019      	b.n	8000b6c <lcd_display_off+0x7c>
 8000b38:	2328      	movs	r3, #40	@ 0x28
 8000b3a:	80fb      	strh	r3, [r7, #6]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <lcd_display_off+0x8c>)
 8000b3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b42:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000b44:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <lcd_display_off+0x8c>)
 8000b46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b4a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <lcd_display_off+0x90>)
 8000b52:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <lcd_display_off+0x8c>)
 8000b56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b5a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <lcd_display_off+0x8c>)
 8000b5e:	2280      	movs	r2, #128	@ 0x80
 8000b60:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <lcd_display_off+0x8c>)
 8000b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b68:	611a      	str	r2, [r3, #16]
}
 8000b6a:	bf00      	nop
    }
    else    /* 9341/5310/1963/7789/7796/9806 �ȷ��͹ر���ʾָ�� */
    {
        lcd_wr_regno(0X28);     /* �ر���ʾ */
    }
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000088 	.word	0x20000088
 8000b7c:	40011000 	.word	0x40011000
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <lcd_set_cursor>:
 * @brief       ���ù��λ��(��RGB����Ч)
 * @param       x,y: ����
 * @retval      ��
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	@ 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	80fb      	strh	r3, [r7, #6]
 8000b90:	4613      	mov	r3, r2
 8000b92:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8000b94:	4b44      	ldr	r3, [pc, #272]	@ (8000ca8 <lcd_set_cursor+0x124>)
 8000b96:	889b      	ldrh	r3, [r3, #4]
 8000b98:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	f040 8189 	bne.w	8000eb4 <lcd_set_cursor+0x330>
    {
        if (lcddev.dir == 0)    /* ����ģʽ, x������Ҫ�任 */
 8000ba2:	4b41      	ldr	r3, [pc, #260]	@ (8000ca8 <lcd_set_cursor+0x124>)
 8000ba4:	799b      	ldrb	r3, [r3, #6]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8084 	bne.w	8000cb4 <lcd_set_cursor+0x130>
        {
            x = lcddev.width - 1 - x;
 8000bac:	4b3e      	ldr	r3, [pc, #248]	@ (8000ca8 <lcd_set_cursor+0x124>)
 8000bae:	881a      	ldrh	r2, [r3, #0]
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8000bba:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca8 <lcd_set_cursor+0x124>)
 8000bbc:	895b      	ldrh	r3, [r3, #10]
 8000bbe:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cac <lcd_set_cursor+0x128>)
 8000bc2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000bc6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000bc8:	4b38      	ldr	r3, [pc, #224]	@ (8000cac <lcd_set_cursor+0x128>)
 8000bca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000bd0:	89fb      	ldrh	r3, [r7, #14]
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b36      	ldr	r3, [pc, #216]	@ (8000cb0 <lcd_set_cursor+0x12c>)
 8000bd6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000bd8:	4b34      	ldr	r3, [pc, #208]	@ (8000cac <lcd_set_cursor+0x128>)
 8000bda:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bde:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000be0:	4b32      	ldr	r3, [pc, #200]	@ (8000cac <lcd_set_cursor+0x128>)
 8000be2:	2280      	movs	r2, #128	@ 0x80
 8000be4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000be6:	4b31      	ldr	r3, [pc, #196]	@ (8000cac <lcd_set_cursor+0x128>)
 8000be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bec:	611a      	str	r2, [r3, #16]
}
 8000bee:	bf00      	nop
            lcd_wr_data(0);
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8000cac <lcd_set_cursor+0x128>)
 8000bf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <lcd_set_cursor+0x128>)
 8000bfa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb0 <lcd_set_cursor+0x12c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c08:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c0c:	611a      	str	r2, [r3, #16]
 8000c0e:	4b27      	ldr	r3, [pc, #156]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c10:	2280      	movs	r2, #128	@ 0x80
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c1a:	611a      	str	r2, [r3, #16]
            lcd_wr_data(0);
 8000c1c:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <lcd_set_cursor+0x12c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c38:	611a      	str	r2, [r3, #16]
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c3c:	2280      	movs	r2, #128	@ 0x80
 8000c3e:	611a      	str	r2, [r3, #16]
 8000c40:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c46:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x >> 8);
 8000c48:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	0a1b      	lsrs	r3, r3, #8
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <lcd_set_cursor+0x12c>)
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c68:	611a      	str	r2, [r3, #16]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c6c:	2280      	movs	r2, #128	@ 0x80
 8000c6e:	611a      	str	r2, [r3, #16]
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c76:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c86:	611a      	str	r2, [r3, #16]
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	4a09      	ldr	r2, [pc, #36]	@ (8000cb0 <lcd_set_cursor+0x12c>)
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	60d3      	str	r3, [r2, #12]
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c92:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c96:	611a      	str	r2, [r3, #16]
 8000c98:	4b04      	ldr	r3, [pc, #16]	@ (8000cac <lcd_set_cursor+0x128>)
 8000c9a:	2280      	movs	r2, #128	@ 0x80
 8000c9c:	611a      	str	r2, [r3, #16]
 8000c9e:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <lcd_set_cursor+0x128>)
 8000ca0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ca4:	611a      	str	r2, [r3, #16]
 8000ca6:	e081      	b.n	8000dac <lcd_set_cursor+0x228>
 8000ca8:	20000088 	.word	0x20000088
 8000cac:	40011000 	.word	0x40011000
 8000cb0:	40010c00 	.word	0x40010c00
        }
        else                    /* ����ģʽ */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8000cb4:	4b7c      	ldr	r3, [pc, #496]	@ (8000ea8 <lcd_set_cursor+0x324>)
 8000cb6:	895b      	ldrh	r3, [r3, #10]
 8000cb8:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000cba:	4b7c      	ldr	r3, [pc, #496]	@ (8000eac <lcd_set_cursor+0x328>)
 8000cbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000cc0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8000eac <lcd_set_cursor+0x328>)
 8000cc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cc8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000cca:	8a3b      	ldrh	r3, [r7, #16]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b78      	ldr	r3, [pc, #480]	@ (8000eb0 <lcd_set_cursor+0x32c>)
 8000cd0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000cd2:	4b76      	ldr	r3, [pc, #472]	@ (8000eac <lcd_set_cursor+0x328>)
 8000cd4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000cd8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000cda:	4b74      	ldr	r3, [pc, #464]	@ (8000eac <lcd_set_cursor+0x328>)
 8000cdc:	2280      	movs	r2, #128	@ 0x80
 8000cde:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000ce0:	4b72      	ldr	r3, [pc, #456]	@ (8000eac <lcd_set_cursor+0x328>)
 8000ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce6:	611a      	str	r2, [r3, #16]
}
 8000ce8:	bf00      	nop
            lcd_wr_data(x >> 8);
 8000cea:	4b70      	ldr	r3, [pc, #448]	@ (8000eac <lcd_set_cursor+0x328>)
 8000cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cf0:	611a      	str	r2, [r3, #16]
 8000cf2:	4b6e      	ldr	r3, [pc, #440]	@ (8000eac <lcd_set_cursor+0x328>)
 8000cf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b6b      	ldr	r3, [pc, #428]	@ (8000eb0 <lcd_set_cursor+0x32c>)
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	4b69      	ldr	r3, [pc, #420]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d06:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	4b67      	ldr	r3, [pc, #412]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	611a      	str	r2, [r3, #16]
 8000d12:	4b66      	ldr	r3, [pc, #408]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d18:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000d1a:	4b64      	ldr	r3, [pc, #400]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	4b62      	ldr	r3, [pc, #392]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d28:	611a      	str	r2, [r3, #16]
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	4a60      	ldr	r2, [pc, #384]	@ (8000eb0 <lcd_set_cursor+0x32c>)
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	60d3      	str	r3, [r2, #12]
 8000d32:	4b5e      	ldr	r3, [pc, #376]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	4b5c      	ldr	r3, [pc, #368]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d3c:	2280      	movs	r2, #128	@ 0x80
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	4b5a      	ldr	r3, [pc, #360]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d46:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) >> 8);
 8000d48:	4b58      	ldr	r3, [pc, #352]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d4e:	611a      	str	r2, [r3, #16]
 8000d50:	4b56      	ldr	r3, [pc, #344]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d56:	611a      	str	r2, [r3, #16]
 8000d58:	4b53      	ldr	r3, [pc, #332]	@ (8000ea8 <lcd_set_cursor+0x324>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	121a      	asrs	r2, r3, #8
 8000d60:	4b53      	ldr	r3, [pc, #332]	@ (8000eb0 <lcd_set_cursor+0x32c>)
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	4b51      	ldr	r3, [pc, #324]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d66:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d6e:	2280      	movs	r2, #128	@ 0x80
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	4b4e      	ldr	r3, [pc, #312]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d78:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8000d7a:	4b4c      	ldr	r3, [pc, #304]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d80:	611a      	str	r2, [r3, #16]
 8000d82:	4b4a      	ldr	r3, [pc, #296]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d88:	611a      	str	r2, [r3, #16]
 8000d8a:	4b47      	ldr	r3, [pc, #284]	@ (8000ea8 <lcd_set_cursor+0x324>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	4a47      	ldr	r2, [pc, #284]	@ (8000eb0 <lcd_set_cursor+0x32c>)
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	60d3      	str	r3, [r2, #12]
 8000d96:	4b45      	ldr	r3, [pc, #276]	@ (8000eac <lcd_set_cursor+0x328>)
 8000d98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	4b43      	ldr	r3, [pc, #268]	@ (8000eac <lcd_set_cursor+0x328>)
 8000da0:	2280      	movs	r2, #128	@ 0x80
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	4b41      	ldr	r3, [pc, #260]	@ (8000eac <lcd_set_cursor+0x328>)
 8000da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000daa:	611a      	str	r2, [r3, #16]
        }

        lcd_wr_regno(lcddev.setycmd);
 8000dac:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea8 <lcd_set_cursor+0x324>)
 8000dae:	899b      	ldrh	r3, [r3, #12]
 8000db0:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000db2:	4b3e      	ldr	r3, [pc, #248]	@ (8000eac <lcd_set_cursor+0x328>)
 8000db4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000db8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000dba:	4b3c      	ldr	r3, [pc, #240]	@ (8000eac <lcd_set_cursor+0x328>)
 8000dbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000dc0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000dc2:	8a7b      	ldrh	r3, [r7, #18]
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b3a      	ldr	r3, [pc, #232]	@ (8000eb0 <lcd_set_cursor+0x32c>)
 8000dc8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000dca:	4b38      	ldr	r3, [pc, #224]	@ (8000eac <lcd_set_cursor+0x328>)
 8000dcc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dd0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000dd2:	4b36      	ldr	r3, [pc, #216]	@ (8000eac <lcd_set_cursor+0x328>)
 8000dd4:	2280      	movs	r2, #128	@ 0x80
 8000dd6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000dd8:	4b34      	ldr	r3, [pc, #208]	@ (8000eac <lcd_set_cursor+0x328>)
 8000dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dde:	611a      	str	r2, [r3, #16]
}
 8000de0:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000de2:	4b32      	ldr	r3, [pc, #200]	@ (8000eac <lcd_set_cursor+0x328>)
 8000de4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000de8:	611a      	str	r2, [r3, #16]
 8000dea:	4b30      	ldr	r3, [pc, #192]	@ (8000eac <lcd_set_cursor+0x328>)
 8000dec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	88bb      	ldrh	r3, [r7, #4]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb0 <lcd_set_cursor+0x32c>)
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000eac <lcd_set_cursor+0x328>)
 8000dfe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e06:	2280      	movs	r2, #128	@ 0x80
 8000e08:	611a      	str	r2, [r3, #16]
 8000e0a:	4b28      	ldr	r3, [pc, #160]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e10:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8000e12:	4b26      	ldr	r3, [pc, #152]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e20:	611a      	str	r2, [r3, #16]
 8000e22:	88bb      	ldrh	r3, [r7, #4]
 8000e24:	4a22      	ldr	r2, [pc, #136]	@ (8000eb0 <lcd_set_cursor+0x32c>)
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	60d3      	str	r3, [r2, #12]
 8000e2a:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e2c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e30:	611a      	str	r2, [r3, #16]
 8000e32:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e34:	2280      	movs	r2, #128	@ 0x80
 8000e36:	611a      	str	r2, [r3, #16]
 8000e38:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e3e:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <lcd_set_cursor+0x324>)
 8000e52:	885b      	ldrh	r3, [r3, #2]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	121a      	asrs	r2, r3, #8
 8000e58:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <lcd_set_cursor+0x32c>)
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e66:	2280      	movs	r2, #128	@ 0x80
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e70:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e80:	611a      	str	r2, [r3, #16]
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <lcd_set_cursor+0x324>)
 8000e84:	885b      	ldrh	r3, [r3, #2]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	4a09      	ldr	r2, [pc, #36]	@ (8000eb0 <lcd_set_cursor+0x32c>)
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	60d3      	str	r3, [r2, #12]
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e90:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e98:	2280      	movs	r2, #128	@ 0x80
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	4b03      	ldr	r3, [pc, #12]	@ (8000eac <lcd_set_cursor+0x328>)
 8000e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ea2:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 8000ea4:	e176      	b.n	8001194 <lcd_set_cursor+0x610>
 8000ea6:	bf00      	nop
 8000ea8:	20000088 	.word	0x20000088
 8000eac:	40011000 	.word	0x40011000
 8000eb0:	40010c00 	.word	0x40010c00
    else if (lcddev.id == 0X5510)
 8000eb4:	4b6a      	ldr	r3, [pc, #424]	@ (8001060 <lcd_set_cursor+0x4dc>)
 8000eb6:	889b      	ldrh	r3, [r3, #4]
 8000eb8:	f245 5210 	movw	r2, #21776	@ 0x5510
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	f040 80d5 	bne.w	800106c <lcd_set_cursor+0x4e8>
        lcd_wr_regno(lcddev.setxcmd);
 8000ec2:	4b67      	ldr	r3, [pc, #412]	@ (8001060 <lcd_set_cursor+0x4dc>)
 8000ec4:	895b      	ldrh	r3, [r3, #10]
 8000ec6:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000ec8:	4b66      	ldr	r3, [pc, #408]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000eca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ece:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000ed0:	4b64      	ldr	r3, [pc, #400]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000ed2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ed6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000ed8:	8b7b      	ldrh	r3, [r7, #26]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b62      	ldr	r3, [pc, #392]	@ (8001068 <lcd_set_cursor+0x4e4>)
 8000ede:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000ee0:	4b60      	ldr	r3, [pc, #384]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000ee2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ee6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000ee8:	4b5e      	ldr	r3, [pc, #376]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000eea:	2280      	movs	r2, #128	@ 0x80
 8000eec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000eee:	4b5d      	ldr	r3, [pc, #372]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef4:	611a      	str	r2, [r3, #16]
}
 8000ef6:	bf00      	nop
        lcd_wr_data(x >> 8);
 8000ef8:	4b5a      	ldr	r3, [pc, #360]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000efa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	4b58      	ldr	r3, [pc, #352]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f06:	611a      	str	r2, [r3, #16]
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	0a1b      	lsrs	r3, r3, #8
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	4b56      	ldr	r3, [pc, #344]	@ (8001068 <lcd_set_cursor+0x4e4>)
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	4b54      	ldr	r3, [pc, #336]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f14:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	4b52      	ldr	r3, [pc, #328]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f1c:	2280      	movs	r2, #128	@ 0x80
 8000f1e:	611a      	str	r2, [r3, #16]
 8000f20:	4b50      	ldr	r3, [pc, #320]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f26:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 8000f28:	4b4d      	ldr	r3, [pc, #308]	@ (8001060 <lcd_set_cursor+0x4dc>)
 8000f2a:	895b      	ldrh	r3, [r3, #10]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000f32:	4b4c      	ldr	r3, [pc, #304]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f38:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f40:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000f42:	8b3b      	ldrh	r3, [r7, #24]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b48      	ldr	r3, [pc, #288]	@ (8001068 <lcd_set_cursor+0x4e4>)
 8000f48:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000f4a:	4b46      	ldr	r3, [pc, #280]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f50:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000f52:	4b44      	ldr	r3, [pc, #272]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000f58:	4b42      	ldr	r3, [pc, #264]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f5e:	611a      	str	r2, [r3, #16]
}
 8000f60:	bf00      	nop
        lcd_wr_data(x & 0XFF);
 8000f62:	4b40      	ldr	r3, [pc, #256]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f68:	611a      	str	r2, [r3, #16]
 8000f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f70:	611a      	str	r2, [r3, #16]
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4a3c      	ldr	r2, [pc, #240]	@ (8001068 <lcd_set_cursor+0x4e4>)
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	60d3      	str	r3, [r2, #12]
 8000f7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f7c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	4b38      	ldr	r3, [pc, #224]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f84:	2280      	movs	r2, #128	@ 0x80
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	4b36      	ldr	r3, [pc, #216]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f8e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8000f90:	4b33      	ldr	r3, [pc, #204]	@ (8001060 <lcd_set_cursor+0x4dc>)
 8000f92:	899b      	ldrh	r3, [r3, #12]
 8000f94:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000f96:	4b33      	ldr	r3, [pc, #204]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000f98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f9c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000f9e:	4b31      	ldr	r3, [pc, #196]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000fa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fa4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000fa6:	8afb      	ldrh	r3, [r7, #22]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b2f      	ldr	r3, [pc, #188]	@ (8001068 <lcd_set_cursor+0x4e4>)
 8000fac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000fae:	4b2d      	ldr	r3, [pc, #180]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000fb0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000fb4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000fbc:	4b29      	ldr	r3, [pc, #164]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc2:	611a      	str	r2, [r3, #16]
}
 8000fc4:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000fc6:	4b27      	ldr	r3, [pc, #156]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000fc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fcc:	611a      	str	r2, [r3, #16]
 8000fce:	4b25      	ldr	r3, [pc, #148]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000fd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fd4:	611a      	str	r2, [r3, #16]
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4b22      	ldr	r3, [pc, #136]	@ (8001068 <lcd_set_cursor+0x4e4>)
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	4b20      	ldr	r3, [pc, #128]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000fe2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000fea:	2280      	movs	r2, #128	@ 0x80
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8000ff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ff4:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <lcd_set_cursor+0x4dc>)
 8000ff8:	899b      	ldrh	r3, [r3, #12]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001000:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8001002:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001006:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001008:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <lcd_set_cursor+0x4e0>)
 800100a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800100e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001010:	8abb      	ldrh	r3, [r7, #20]
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <lcd_set_cursor+0x4e4>)
 8001016:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <lcd_set_cursor+0x4e0>)
 800101a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800101e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001020:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8001022:	2280      	movs	r2, #128	@ 0x80
 8001024:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8001028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800102c:	611a      	str	r2, [r3, #16]
}
 800102e:	bf00      	nop
        lcd_wr_data(y & 0XFF);
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8001032:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <lcd_set_cursor+0x4e0>)
 800103a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	4a09      	ldr	r2, [pc, #36]	@ (8001068 <lcd_set_cursor+0x4e4>)
 8001044:	b2db      	uxtb	r3, r3
 8001046:	60d3      	str	r3, [r2, #12]
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <lcd_set_cursor+0x4e0>)
 800104a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <lcd_set_cursor+0x4e0>)
 8001058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800105c:	611a      	str	r2, [r3, #16]
}
 800105e:	e099      	b.n	8001194 <lcd_set_cursor+0x610>
 8001060:	20000088 	.word	0x20000088
 8001064:	40011000 	.word	0x40011000
 8001068:	40010c00 	.word	0x40010c00
        lcd_wr_regno(lcddev.setxcmd);
 800106c:	4b4c      	ldr	r3, [pc, #304]	@ (80011a0 <lcd_set_cursor+0x61c>)
 800106e:	895b      	ldrh	r3, [r3, #10]
 8001070:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001072:	4b4c      	ldr	r3, [pc, #304]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001074:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001078:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800107a:	4b4a      	ldr	r3, [pc, #296]	@ (80011a4 <lcd_set_cursor+0x620>)
 800107c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001080:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001082:	8bfb      	ldrh	r3, [r7, #30]
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b48      	ldr	r3, [pc, #288]	@ (80011a8 <lcd_set_cursor+0x624>)
 8001088:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800108a:	4b46      	ldr	r3, [pc, #280]	@ (80011a4 <lcd_set_cursor+0x620>)
 800108c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001090:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001092:	4b44      	ldr	r3, [pc, #272]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001098:	4b42      	ldr	r3, [pc, #264]	@ (80011a4 <lcd_set_cursor+0x620>)
 800109a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800109e:	611a      	str	r2, [r3, #16]
}
 80010a0:	bf00      	nop
        lcd_wr_data(x >> 8);
 80010a2:	4b40      	ldr	r3, [pc, #256]	@ (80011a4 <lcd_set_cursor+0x620>)
 80010a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	4b3e      	ldr	r3, [pc, #248]	@ (80011a4 <lcd_set_cursor+0x620>)
 80010ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010b0:	611a      	str	r2, [r3, #16]
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b3b      	ldr	r3, [pc, #236]	@ (80011a8 <lcd_set_cursor+0x624>)
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	4b39      	ldr	r3, [pc, #228]	@ (80011a4 <lcd_set_cursor+0x620>)
 80010be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	4b37      	ldr	r3, [pc, #220]	@ (80011a4 <lcd_set_cursor+0x620>)
 80010c6:	2280      	movs	r2, #128	@ 0x80
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	4b36      	ldr	r3, [pc, #216]	@ (80011a4 <lcd_set_cursor+0x620>)
 80010cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010d0:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
 80010d2:	4b34      	ldr	r3, [pc, #208]	@ (80011a4 <lcd_set_cursor+0x620>)
 80010d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	4b32      	ldr	r3, [pc, #200]	@ (80011a4 <lcd_set_cursor+0x620>)
 80010dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010e0:	611a      	str	r2, [r3, #16]
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	4a30      	ldr	r2, [pc, #192]	@ (80011a8 <lcd_set_cursor+0x624>)
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	60d3      	str	r3, [r2, #12]
 80010ea:	4b2e      	ldr	r3, [pc, #184]	@ (80011a4 <lcd_set_cursor+0x620>)
 80010ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010f0:	611a      	str	r2, [r3, #16]
 80010f2:	4b2c      	ldr	r3, [pc, #176]	@ (80011a4 <lcd_set_cursor+0x620>)
 80010f4:	2280      	movs	r2, #128	@ 0x80
 80010f6:	611a      	str	r2, [r3, #16]
 80010f8:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <lcd_set_cursor+0x620>)
 80010fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010fe:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <lcd_set_cursor+0x61c>)
 8001102:	899b      	ldrh	r3, [r3, #12]
 8001104:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001106:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001108:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800110c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800110e:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001110:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001114:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001116:	8bbb      	ldrh	r3, [r7, #28]
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <lcd_set_cursor+0x624>)
 800111c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001120:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001124:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001126:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001128:	2280      	movs	r2, #128	@ 0x80
 800112a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800112c:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <lcd_set_cursor+0x620>)
 800112e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001132:	611a      	str	r2, [r3, #16]
}
 8001134:	bf00      	nop
        lcd_wr_data(y >> 8);
 8001136:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001138:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001140:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001144:	611a      	str	r2, [r3, #16]
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <lcd_set_cursor+0x624>)
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001152:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <lcd_set_cursor+0x620>)
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001164:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001168:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800116c:	611a      	str	r2, [r3, #16]
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001170:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001174:	611a      	str	r2, [r3, #16]
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	4a0b      	ldr	r2, [pc, #44]	@ (80011a8 <lcd_set_cursor+0x624>)
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60d3      	str	r3, [r2, #12]
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001180:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <lcd_set_cursor+0x620>)
 8001188:	2280      	movs	r2, #128	@ 0x80
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <lcd_set_cursor+0x620>)
 800118e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001192:	611a      	str	r2, [r3, #16]
}
 8001194:	bf00      	nop
 8001196:	3724      	adds	r7, #36	@ 0x24
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000088 	.word	0x20000088
 80011a4:	40011000 	.word	0x40011000
 80011a8:	40010c00 	.word	0x40010c00

080011ac <lcd_scan_dir>:
 *
 * @param       dir:0~7,����8������(���嶨���lcd.h)
 * @retval      ��
 */
void lcd_scan_dir(uint8_t dir)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t dirreg = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t temp;

    /* ����ʱ����1963���ı�ɨ�跽��, ����IC�ı�ɨ�跽������ʱ1963�ı䷽��, ����IC���ı�ɨ�跽�� */
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 80011be:	4b5f      	ldr	r3, [pc, #380]	@ (800133c <lcd_scan_dir+0x190>)
 80011c0:	799b      	ldrb	r3, [r3, #6]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d105      	bne.n	80011d2 <lcd_scan_dir+0x26>
 80011c6:	4b5d      	ldr	r3, [pc, #372]	@ (800133c <lcd_scan_dir+0x190>)
 80011c8:	889b      	ldrh	r3, [r3, #4]
 80011ca:	f641 1263 	movw	r2, #6499	@ 0x1963
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d109      	bne.n	80011e6 <lcd_scan_dir+0x3a>
 80011d2:	4b5a      	ldr	r3, [pc, #360]	@ (800133c <lcd_scan_dir+0x190>)
 80011d4:	799b      	ldrb	r3, [r3, #6]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d134      	bne.n	8001244 <lcd_scan_dir+0x98>
 80011da:	4b58      	ldr	r3, [pc, #352]	@ (800133c <lcd_scan_dir+0x190>)
 80011dc:	889b      	ldrh	r3, [r3, #4]
 80011de:	f641 1263 	movw	r2, #6499	@ 0x1963
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d12e      	bne.n	8001244 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* ����ת�� */
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	d82b      	bhi.n	8001244 <lcd_scan_dir+0x98>
 80011ec:	a201      	add	r2, pc, #4	@ (adr r2, 80011f4 <lcd_scan_dir+0x48>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001215 	.word	0x08001215
 80011f8:	0800121b 	.word	0x0800121b
 80011fc:	08001221 	.word	0x08001221
 8001200:	08001227 	.word	0x08001227
 8001204:	0800122d 	.word	0x0800122d
 8001208:	08001233 	.word	0x08001233
 800120c:	08001239 	.word	0x08001239
 8001210:	0800123f 	.word	0x0800123f
        {
            case 0:
                dir = 6;
 8001214:	2306      	movs	r3, #6
 8001216:	71fb      	strb	r3, [r7, #7]
                break;
 8001218:	e014      	b.n	8001244 <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 800121a:	2307      	movs	r3, #7
 800121c:	71fb      	strb	r3, [r7, #7]
                break;
 800121e:	e011      	b.n	8001244 <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 8001220:	2304      	movs	r3, #4
 8001222:	71fb      	strb	r3, [r7, #7]
                break;
 8001224:	e00e      	b.n	8001244 <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 8001226:	2305      	movs	r3, #5
 8001228:	71fb      	strb	r3, [r7, #7]
                break;
 800122a:	e00b      	b.n	8001244 <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 800122c:	2301      	movs	r3, #1
 800122e:	71fb      	strb	r3, [r7, #7]
                break;
 8001230:	e008      	b.n	8001244 <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	71fb      	strb	r3, [r7, #7]
                break;
 8001236:	e005      	b.n	8001244 <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 8001238:	2303      	movs	r3, #3
 800123a:	71fb      	strb	r3, [r7, #7]
                break;
 800123c:	e002      	b.n	8001244 <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	71fb      	strb	r3, [r7, #7]
                break;
 8001242:	bf00      	nop
        }
    }

    /* ����ɨ�跽ʽ ���� 0X36/0X3600 �Ĵ��� bit 5,6,7 λ��ֵ */
    switch (dir)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b07      	cmp	r3, #7
 8001248:	d835      	bhi.n	80012b6 <lcd_scan_dir+0x10a>
 800124a:	a201      	add	r2, pc, #4	@ (adr r2, 8001250 <lcd_scan_dir+0xa4>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	080012b7 	.word	0x080012b7
 8001254:	08001271 	.word	0x08001271
 8001258:	0800127b 	.word	0x0800127b
 800125c:	08001285 	.word	0x08001285
 8001260:	0800128f 	.word	0x0800128f
 8001264:	08001299 	.word	0x08001299
 8001268:	080012a3 	.word	0x080012a3
 800126c:	080012ad 	.word	0x080012ad
        case L2R_U2D:/* ������,���ϵ��� */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* ������,���µ��� */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001270:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001276:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001278:	e01d      	b.n	80012b6 <lcd_scan_dir+0x10a>

        case R2L_U2D:/* ���ҵ���,���ϵ��� */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800127a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800127c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001280:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001282:	e018      	b.n	80012b6 <lcd_scan_dir+0x10a>

        case R2L_D2U:/* ���ҵ���,���µ��� */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001286:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800128a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 800128c:	e013      	b.n	80012b6 <lcd_scan_dir+0x10a>

        case U2D_L2R:/* ���ϵ���,������ */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800128e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001290:	f043 0320 	orr.w	r3, r3, #32
 8001294:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001296:	e00e      	b.n	80012b6 <lcd_scan_dir+0x10a>

        case U2D_R2L:/* ���ϵ���,���ҵ��� */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001298:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800129a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800129e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 80012a0:	e009      	b.n	80012b6 <lcd_scan_dir+0x10a>

        case D2U_L2R:/* ���µ���,������ */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80012a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012a4:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80012a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 80012aa:	e004      	b.n	80012b6 <lcd_scan_dir+0x10a>

        case D2U_R2L:/* ���µ���,���ҵ��� */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80012ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012ae:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80012b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 80012b4:	bf00      	nop
    }

    dirreg = 0X36;  /* �Ծ��󲿷�����IC, ��0X36�Ĵ������� */
 80012b6:	2336      	movs	r3, #54	@ 0x36
 80012b8:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (lcddev.id == 0X5510)
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <lcd_scan_dir+0x190>)
 80012bc:	889b      	ldrh	r3, [r3, #4]
 80012be:	f245 5210 	movw	r2, #21776	@ 0x5510
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d102      	bne.n	80012cc <lcd_scan_dir+0x120>
    {
        dirreg = 0X3600;    /* ����5510, ����������ic�ļĴ����в��� */
 80012c6:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 80012ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* 9341 & 7789 & 7796 Ҫ����BGRλ */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <lcd_scan_dir+0x190>)
 80012ce:	889b      	ldrh	r3, [r3, #4]
 80012d0:	f249 3241 	movw	r2, #37697	@ 0x9341
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d00b      	beq.n	80012f0 <lcd_scan_dir+0x144>
 80012d8:	4b18      	ldr	r3, [pc, #96]	@ (800133c <lcd_scan_dir+0x190>)
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	f247 7289 	movw	r2, #30601	@ 0x7789
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d005      	beq.n	80012f0 <lcd_scan_dir+0x144>
 80012e4:	4b15      	ldr	r3, [pc, #84]	@ (800133c <lcd_scan_dir+0x190>)
 80012e6:	889b      	ldrh	r3, [r3, #4]
 80012e8:	f247 7296 	movw	r2, #30614	@ 0x7796
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d103      	bne.n	80012f8 <lcd_scan_dir+0x14c>
    {
        regval |= 0X08;
 80012f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    lcd_write_reg(dirreg, regval);
 80012f8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80012fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fb60 	bl	80009c4 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963�������괦�� */
 8001304:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <lcd_scan_dir+0x190>)
 8001306:	889b      	ldrh	r3, [r3, #4]
 8001308:	f641 1263 	movw	r2, #6499	@ 0x1963
 800130c:	4293      	cmp	r3, r2
 800130e:	d027      	beq.n	8001360 <lcd_scan_dir+0x1b4>
    {
        if (regval & 0X20)
 8001310:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001312:	f003 0320 	and.w	r3, r3, #32
 8001316:	2b00      	cmp	r3, #0
 8001318:	d012      	beq.n	8001340 <lcd_scan_dir+0x194>
        {
            if (lcddev.width < lcddev.height)   /* ����X,Y */
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <lcd_scan_dir+0x190>)
 800131c:	881a      	ldrh	r2, [r3, #0]
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <lcd_scan_dir+0x190>)
 8001320:	885b      	ldrh	r3, [r3, #2]
 8001322:	429a      	cmp	r2, r3
 8001324:	d21c      	bcs.n	8001360 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 8001326:	4b05      	ldr	r3, [pc, #20]	@ (800133c <lcd_scan_dir+0x190>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <lcd_scan_dir+0x190>)
 800132e:	885a      	ldrh	r2, [r3, #2]
 8001330:	4b02      	ldr	r3, [pc, #8]	@ (800133c <lcd_scan_dir+0x190>)
 8001332:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8001334:	4a01      	ldr	r2, [pc, #4]	@ (800133c <lcd_scan_dir+0x190>)
 8001336:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001338:	8053      	strh	r3, [r2, #2]
 800133a:	e011      	b.n	8001360 <lcd_scan_dir+0x1b4>
 800133c:	20000088 	.word	0x20000088
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* ����X,Y */
 8001340:	4b9c      	ldr	r3, [pc, #624]	@ (80015b4 <lcd_scan_dir+0x408>)
 8001342:	881a      	ldrh	r2, [r3, #0]
 8001344:	4b9b      	ldr	r3, [pc, #620]	@ (80015b4 <lcd_scan_dir+0x408>)
 8001346:	885b      	ldrh	r3, [r3, #2]
 8001348:	429a      	cmp	r2, r3
 800134a:	d909      	bls.n	8001360 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 800134c:	4b99      	ldr	r3, [pc, #612]	@ (80015b4 <lcd_scan_dir+0x408>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 8001352:	4b98      	ldr	r3, [pc, #608]	@ (80015b4 <lcd_scan_dir+0x408>)
 8001354:	885a      	ldrh	r2, [r3, #2]
 8001356:	4b97      	ldr	r3, [pc, #604]	@ (80015b4 <lcd_scan_dir+0x408>)
 8001358:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 800135a:	4a96      	ldr	r2, [pc, #600]	@ (80015b4 <lcd_scan_dir+0x408>)
 800135c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800135e:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* ������ʾ����(����)��С */
    if (lcddev.id == 0X5510)
 8001360:	4b94      	ldr	r3, [pc, #592]	@ (80015b4 <lcd_scan_dir+0x408>)
 8001362:	889b      	ldrh	r3, [r3, #4]
 8001364:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001368:	4293      	cmp	r3, r2
 800136a:	f040 81af 	bne.w	80016cc <lcd_scan_dir+0x520>
    {
        lcd_wr_regno(lcddev.setxcmd);
 800136e:	4b91      	ldr	r3, [pc, #580]	@ (80015b4 <lcd_scan_dir+0x408>)
 8001370:	895b      	ldrh	r3, [r3, #10]
 8001372:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001374:	4b90      	ldr	r3, [pc, #576]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001376:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800137a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800137c:	4b8e      	ldr	r3, [pc, #568]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800137e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001382:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001384:	8bbb      	ldrh	r3, [r7, #28]
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b8c      	ldr	r3, [pc, #560]	@ (80015bc <lcd_scan_dir+0x410>)
 800138a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800138c:	4b8a      	ldr	r3, [pc, #552]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800138e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001392:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001394:	4b88      	ldr	r3, [pc, #544]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800139a:	4b87      	ldr	r3, [pc, #540]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800139c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013a0:	611a      	str	r2, [r3, #16]
}
 80013a2:	bf00      	nop
        lcd_wr_data(0);
 80013a4:	4b84      	ldr	r3, [pc, #528]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80013a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013aa:	611a      	str	r2, [r3, #16]
 80013ac:	4b82      	ldr	r3, [pc, #520]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80013ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013b2:	611a      	str	r2, [r3, #16]
 80013b4:	4b81      	ldr	r3, [pc, #516]	@ (80015bc <lcd_scan_dir+0x410>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	4b7f      	ldr	r3, [pc, #508]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80013bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	4b7d      	ldr	r3, [pc, #500]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80013c4:	2280      	movs	r2, #128	@ 0x80
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	4b7b      	ldr	r3, [pc, #492]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80013ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ce:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 80013d0:	4b78      	ldr	r3, [pc, #480]	@ (80015b4 <lcd_scan_dir+0x408>)
 80013d2:	895b      	ldrh	r3, [r3, #10]
 80013d4:	3301      	adds	r3, #1
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80013da:	4b77      	ldr	r3, [pc, #476]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80013dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013e0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80013e2:	4b75      	ldr	r3, [pc, #468]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80013e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013e8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80013ea:	8b7b      	ldrh	r3, [r7, #26]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4b73      	ldr	r3, [pc, #460]	@ (80015bc <lcd_scan_dir+0x410>)
 80013f0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80013f2:	4b71      	ldr	r3, [pc, #452]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80013f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013f8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80013fa:	4b6f      	ldr	r3, [pc, #444]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80013fc:	2280      	movs	r2, #128	@ 0x80
 80013fe:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001400:	4b6d      	ldr	r3, [pc, #436]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001406:	611a      	str	r2, [r3, #16]
}
 8001408:	bf00      	nop
        lcd_wr_data(0);
 800140a:	4b6b      	ldr	r3, [pc, #428]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800140c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	4b69      	ldr	r3, [pc, #420]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001414:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	4b68      	ldr	r3, [pc, #416]	@ (80015bc <lcd_scan_dir+0x410>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	4b65      	ldr	r3, [pc, #404]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001422:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	4b63      	ldr	r3, [pc, #396]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800142a:	2280      	movs	r2, #128	@ 0x80
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	4b62      	ldr	r3, [pc, #392]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001434:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 2);
 8001436:	4b5f      	ldr	r3, [pc, #380]	@ (80015b4 <lcd_scan_dir+0x408>)
 8001438:	895b      	ldrh	r3, [r3, #10]
 800143a:	3302      	adds	r3, #2
 800143c:	b29b      	uxth	r3, r3
 800143e:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001440:	4b5d      	ldr	r3, [pc, #372]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001442:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001446:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001448:	4b5b      	ldr	r3, [pc, #364]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800144a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800144e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001450:	8b3b      	ldrh	r3, [r7, #24]
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b59      	ldr	r3, [pc, #356]	@ (80015bc <lcd_scan_dir+0x410>)
 8001456:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001458:	4b57      	ldr	r3, [pc, #348]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800145a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800145e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001460:	4b55      	ldr	r3, [pc, #340]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001462:	2280      	movs	r2, #128	@ 0x80
 8001464:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001466:	4b54      	ldr	r3, [pc, #336]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800146c:	611a      	str	r2, [r3, #16]
}
 800146e:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) >> 8);
 8001470:	4b51      	ldr	r3, [pc, #324]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001472:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	4b4f      	ldr	r3, [pc, #316]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800147a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	4b4c      	ldr	r3, [pc, #304]	@ (80015b4 <lcd_scan_dir+0x408>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	3b01      	subs	r3, #1
 8001486:	121a      	asrs	r2, r3, #8
 8001488:	4b4c      	ldr	r3, [pc, #304]	@ (80015bc <lcd_scan_dir+0x410>)
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	4b4a      	ldr	r3, [pc, #296]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800148e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	4b48      	ldr	r3, [pc, #288]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001496:	2280      	movs	r2, #128	@ 0x80
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	4b47      	ldr	r3, [pc, #284]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800149c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a0:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 3);
 80014a2:	4b44      	ldr	r3, [pc, #272]	@ (80015b4 <lcd_scan_dir+0x408>)
 80014a4:	895b      	ldrh	r3, [r3, #10]
 80014a6:	3303      	adds	r3, #3
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80014ac:	4b42      	ldr	r3, [pc, #264]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80014ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014b2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80014b4:	4b40      	ldr	r3, [pc, #256]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80014b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014ba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80014bc:	8afb      	ldrh	r3, [r7, #22]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b3e      	ldr	r3, [pc, #248]	@ (80015bc <lcd_scan_dir+0x410>)
 80014c2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80014c4:	4b3c      	ldr	r3, [pc, #240]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80014c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014ca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80014cc:	4b3a      	ldr	r3, [pc, #232]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80014ce:	2280      	movs	r2, #128	@ 0x80
 80014d0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80014d2:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80014d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d8:	611a      	str	r2, [r3, #16]
}
 80014da:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 80014dc:	4b36      	ldr	r3, [pc, #216]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80014de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014e2:	611a      	str	r2, [r3, #16]
 80014e4:	4b34      	ldr	r3, [pc, #208]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80014e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <lcd_scan_dir+0x408>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	4a32      	ldr	r2, [pc, #200]	@ (80015bc <lcd_scan_dir+0x410>)
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	60d3      	str	r3, [r2, #12]
 80014f8:	4b2f      	ldr	r3, [pc, #188]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80014fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	4b2d      	ldr	r3, [pc, #180]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001502:	2280      	movs	r2, #128	@ 0x80
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	4b2c      	ldr	r3, [pc, #176]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800150c:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 800150e:	4b29      	ldr	r3, [pc, #164]	@ (80015b4 <lcd_scan_dir+0x408>)
 8001510:	899b      	ldrh	r3, [r3, #12]
 8001512:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001514:	4b28      	ldr	r3, [pc, #160]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001516:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800151a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800151c:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800151e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001522:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001524:	8abb      	ldrh	r3, [r7, #20]
 8001526:	b29a      	uxth	r2, r3
 8001528:	4b24      	ldr	r3, [pc, #144]	@ (80015bc <lcd_scan_dir+0x410>)
 800152a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800152c:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800152e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001532:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001534:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001536:	2280      	movs	r2, #128	@ 0x80
 8001538:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800153a:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800153c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001540:	611a      	str	r2, [r3, #16]
}
 8001542:	bf00      	nop
        lcd_wr_data(0);
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001546:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800154e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001552:	611a      	str	r2, [r3, #16]
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <lcd_scan_dir+0x410>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800155c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001564:	2280      	movs	r2, #128	@ 0x80
 8001566:	611a      	str	r2, [r3, #16]
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800156a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800156e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8001570:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <lcd_scan_dir+0x408>)
 8001572:	899b      	ldrh	r3, [r3, #12]
 8001574:	3301      	adds	r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800157a:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800157c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001580:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001584:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001588:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800158a:	8a7b      	ldrh	r3, [r7, #18]
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <lcd_scan_dir+0x410>)
 8001590:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <lcd_scan_dir+0x40c>)
 8001594:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001598:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800159a:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <lcd_scan_dir+0x40c>)
 800159c:	2280      	movs	r2, #128	@ 0x80
 800159e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80015a0:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80015a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015a6:	611a      	str	r2, [r3, #16]
}
 80015a8:	bf00      	nop
        lcd_wr_data(0);
 80015aa:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <lcd_scan_dir+0x40c>)
 80015ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	e005      	b.n	80015c0 <lcd_scan_dir+0x414>
 80015b4:	20000088 	.word	0x20000088
 80015b8:	40011000 	.word	0x40011000
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	4b3f      	ldr	r3, [pc, #252]	@ (80016c0 <lcd_scan_dir+0x514>)
 80015c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	4b3e      	ldr	r3, [pc, #248]	@ (80016c4 <lcd_scan_dir+0x518>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	4b3c      	ldr	r3, [pc, #240]	@ (80016c0 <lcd_scan_dir+0x514>)
 80015d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	4b3a      	ldr	r3, [pc, #232]	@ (80016c0 <lcd_scan_dir+0x514>)
 80015d8:	2280      	movs	r2, #128	@ 0x80
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	4b38      	ldr	r3, [pc, #224]	@ (80016c0 <lcd_scan_dir+0x514>)
 80015de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e2:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 2);
 80015e4:	4b38      	ldr	r3, [pc, #224]	@ (80016c8 <lcd_scan_dir+0x51c>)
 80015e6:	899b      	ldrh	r3, [r3, #12]
 80015e8:	3302      	adds	r3, #2
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80015ee:	4b34      	ldr	r3, [pc, #208]	@ (80016c0 <lcd_scan_dir+0x514>)
 80015f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015f4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80015f6:	4b32      	ldr	r3, [pc, #200]	@ (80016c0 <lcd_scan_dir+0x514>)
 80015f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015fc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80015fe:	8a3b      	ldrh	r3, [r7, #16]
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b30      	ldr	r3, [pc, #192]	@ (80016c4 <lcd_scan_dir+0x518>)
 8001604:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001606:	4b2e      	ldr	r3, [pc, #184]	@ (80016c0 <lcd_scan_dir+0x514>)
 8001608:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800160c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800160e:	4b2c      	ldr	r3, [pc, #176]	@ (80016c0 <lcd_scan_dir+0x514>)
 8001610:	2280      	movs	r2, #128	@ 0x80
 8001612:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001614:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <lcd_scan_dir+0x514>)
 8001616:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800161a:	611a      	str	r2, [r3, #16]
}
 800161c:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) >> 8);
 800161e:	4b28      	ldr	r3, [pc, #160]	@ (80016c0 <lcd_scan_dir+0x514>)
 8001620:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <lcd_scan_dir+0x514>)
 8001628:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800162c:	611a      	str	r2, [r3, #16]
 800162e:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <lcd_scan_dir+0x51c>)
 8001630:	885b      	ldrh	r3, [r3, #2]
 8001632:	3b01      	subs	r3, #1
 8001634:	121a      	asrs	r2, r3, #8
 8001636:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <lcd_scan_dir+0x518>)
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <lcd_scan_dir+0x514>)
 800163c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <lcd_scan_dir+0x514>)
 8001644:	2280      	movs	r2, #128	@ 0x80
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <lcd_scan_dir+0x514>)
 800164a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800164e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 3);
 8001650:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <lcd_scan_dir+0x51c>)
 8001652:	899b      	ldrh	r3, [r3, #12]
 8001654:	3303      	adds	r3, #3
 8001656:	b29b      	uxth	r3, r3
 8001658:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800165a:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <lcd_scan_dir+0x514>)
 800165c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001660:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <lcd_scan_dir+0x514>)
 8001664:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001668:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800166a:	89fb      	ldrh	r3, [r7, #14]
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <lcd_scan_dir+0x518>)
 8001670:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001672:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <lcd_scan_dir+0x514>)
 8001674:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001678:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <lcd_scan_dir+0x514>)
 800167c:	2280      	movs	r2, #128	@ 0x80
 800167e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <lcd_scan_dir+0x514>)
 8001682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001686:	611a      	str	r2, [r3, #16]
}
 8001688:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 800168a:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <lcd_scan_dir+0x514>)
 800168c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001690:	611a      	str	r2, [r3, #16]
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <lcd_scan_dir+0x514>)
 8001694:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <lcd_scan_dir+0x51c>)
 800169c:	885b      	ldrh	r3, [r3, #2]
 800169e:	3b01      	subs	r3, #1
 80016a0:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <lcd_scan_dir+0x518>)
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	60d3      	str	r3, [r2, #12]
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <lcd_scan_dir+0x514>)
 80016a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016ac:	611a      	str	r2, [r3, #16]
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <lcd_scan_dir+0x514>)
 80016b0:	2280      	movs	r2, #128	@ 0x80
 80016b2:	611a      	str	r2, [r3, #16]
 80016b4:	4b02      	ldr	r3, [pc, #8]	@ (80016c0 <lcd_scan_dir+0x514>)
 80016b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ba:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 80016bc:	e0f8      	b.n	80018b0 <lcd_scan_dir+0x704>
 80016be:	bf00      	nop
 80016c0:	40011000 	.word	0x40011000
 80016c4:	40010c00 	.word	0x40010c00
 80016c8:	20000088 	.word	0x20000088
        lcd_wr_regno(lcddev.setxcmd);
 80016cc:	4b7a      	ldr	r3, [pc, #488]	@ (80018b8 <lcd_scan_dir+0x70c>)
 80016ce:	895b      	ldrh	r3, [r3, #10]
 80016d0:	843b      	strh	r3, [r7, #32]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80016d2:	4b7a      	ldr	r3, [pc, #488]	@ (80018bc <lcd_scan_dir+0x710>)
 80016d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016d8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80016da:	4b78      	ldr	r3, [pc, #480]	@ (80018bc <lcd_scan_dir+0x710>)
 80016dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016e0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80016e2:	8c3b      	ldrh	r3, [r7, #32]
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	4b76      	ldr	r3, [pc, #472]	@ (80018c0 <lcd_scan_dir+0x714>)
 80016e8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80016ea:	4b74      	ldr	r3, [pc, #464]	@ (80018bc <lcd_scan_dir+0x710>)
 80016ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016f0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80016f2:	4b72      	ldr	r3, [pc, #456]	@ (80018bc <lcd_scan_dir+0x710>)
 80016f4:	2280      	movs	r2, #128	@ 0x80
 80016f6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80016f8:	4b70      	ldr	r3, [pc, #448]	@ (80018bc <lcd_scan_dir+0x710>)
 80016fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016fe:	611a      	str	r2, [r3, #16]
}
 8001700:	bf00      	nop
        lcd_wr_data(0);
 8001702:	4b6e      	ldr	r3, [pc, #440]	@ (80018bc <lcd_scan_dir+0x710>)
 8001704:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001708:	611a      	str	r2, [r3, #16]
 800170a:	4b6c      	ldr	r3, [pc, #432]	@ (80018bc <lcd_scan_dir+0x710>)
 800170c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	4b6b      	ldr	r3, [pc, #428]	@ (80018c0 <lcd_scan_dir+0x714>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	4b68      	ldr	r3, [pc, #416]	@ (80018bc <lcd_scan_dir+0x710>)
 800171a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800171e:	611a      	str	r2, [r3, #16]
 8001720:	4b66      	ldr	r3, [pc, #408]	@ (80018bc <lcd_scan_dir+0x710>)
 8001722:	2280      	movs	r2, #128	@ 0x80
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	4b65      	ldr	r3, [pc, #404]	@ (80018bc <lcd_scan_dir+0x710>)
 8001728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800172c:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 800172e:	4b63      	ldr	r3, [pc, #396]	@ (80018bc <lcd_scan_dir+0x710>)
 8001730:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	4b61      	ldr	r3, [pc, #388]	@ (80018bc <lcd_scan_dir+0x710>)
 8001738:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800173c:	611a      	str	r2, [r3, #16]
 800173e:	4b60      	ldr	r3, [pc, #384]	@ (80018c0 <lcd_scan_dir+0x714>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	4b5d      	ldr	r3, [pc, #372]	@ (80018bc <lcd_scan_dir+0x710>)
 8001746:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800174a:	611a      	str	r2, [r3, #16]
 800174c:	4b5b      	ldr	r3, [pc, #364]	@ (80018bc <lcd_scan_dir+0x710>)
 800174e:	2280      	movs	r2, #128	@ 0x80
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	4b5a      	ldr	r3, [pc, #360]	@ (80018bc <lcd_scan_dir+0x710>)
 8001754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001758:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) >> 8);
 800175a:	4b58      	ldr	r3, [pc, #352]	@ (80018bc <lcd_scan_dir+0x710>)
 800175c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001760:	611a      	str	r2, [r3, #16]
 8001762:	4b56      	ldr	r3, [pc, #344]	@ (80018bc <lcd_scan_dir+0x710>)
 8001764:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001768:	611a      	str	r2, [r3, #16]
 800176a:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <lcd_scan_dir+0x70c>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	3b01      	subs	r3, #1
 8001770:	121a      	asrs	r2, r3, #8
 8001772:	4b53      	ldr	r3, [pc, #332]	@ (80018c0 <lcd_scan_dir+0x714>)
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	4b51      	ldr	r3, [pc, #324]	@ (80018bc <lcd_scan_dir+0x710>)
 8001778:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800177c:	611a      	str	r2, [r3, #16]
 800177e:	4b4f      	ldr	r3, [pc, #316]	@ (80018bc <lcd_scan_dir+0x710>)
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	4b4d      	ldr	r3, [pc, #308]	@ (80018bc <lcd_scan_dir+0x710>)
 8001786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800178a:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 800178c:	4b4b      	ldr	r3, [pc, #300]	@ (80018bc <lcd_scan_dir+0x710>)
 800178e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	4b49      	ldr	r3, [pc, #292]	@ (80018bc <lcd_scan_dir+0x710>)
 8001796:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	4b46      	ldr	r3, [pc, #280]	@ (80018b8 <lcd_scan_dir+0x70c>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	4a47      	ldr	r2, [pc, #284]	@ (80018c0 <lcd_scan_dir+0x714>)
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	60d3      	str	r3, [r2, #12]
 80017a8:	4b44      	ldr	r3, [pc, #272]	@ (80018bc <lcd_scan_dir+0x710>)
 80017aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	4b42      	ldr	r3, [pc, #264]	@ (80018bc <lcd_scan_dir+0x710>)
 80017b2:	2280      	movs	r2, #128	@ 0x80
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <lcd_scan_dir+0x710>)
 80017b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017bc:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 80017be:	4b3e      	ldr	r3, [pc, #248]	@ (80018b8 <lcd_scan_dir+0x70c>)
 80017c0:	899b      	ldrh	r3, [r3, #12]
 80017c2:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80017c4:	4b3d      	ldr	r3, [pc, #244]	@ (80018bc <lcd_scan_dir+0x710>)
 80017c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017ca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80017cc:	4b3b      	ldr	r3, [pc, #236]	@ (80018bc <lcd_scan_dir+0x710>)
 80017ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017d2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80017d4:	8bfb      	ldrh	r3, [r7, #30]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b39      	ldr	r3, [pc, #228]	@ (80018c0 <lcd_scan_dir+0x714>)
 80017da:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80017dc:	4b37      	ldr	r3, [pc, #220]	@ (80018bc <lcd_scan_dir+0x710>)
 80017de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017e2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80017e4:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <lcd_scan_dir+0x710>)
 80017e6:	2280      	movs	r2, #128	@ 0x80
 80017e8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80017ea:	4b34      	ldr	r3, [pc, #208]	@ (80018bc <lcd_scan_dir+0x710>)
 80017ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f0:	611a      	str	r2, [r3, #16]
}
 80017f2:	bf00      	nop
        lcd_wr_data(0);
 80017f4:	4b31      	ldr	r3, [pc, #196]	@ (80018bc <lcd_scan_dir+0x710>)
 80017f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	4b2f      	ldr	r3, [pc, #188]	@ (80018bc <lcd_scan_dir+0x710>)
 80017fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	4b2e      	ldr	r3, [pc, #184]	@ (80018c0 <lcd_scan_dir+0x714>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	4b2c      	ldr	r3, [pc, #176]	@ (80018bc <lcd_scan_dir+0x710>)
 800180c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001810:	611a      	str	r2, [r3, #16]
 8001812:	4b2a      	ldr	r3, [pc, #168]	@ (80018bc <lcd_scan_dir+0x710>)
 8001814:	2280      	movs	r2, #128	@ 0x80
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <lcd_scan_dir+0x710>)
 800181a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800181e:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 8001820:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <lcd_scan_dir+0x710>)
 8001822:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001826:	611a      	str	r2, [r3, #16]
 8001828:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <lcd_scan_dir+0x710>)
 800182a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <lcd_scan_dir+0x714>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <lcd_scan_dir+0x710>)
 8001838:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <lcd_scan_dir+0x710>)
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	611a      	str	r2, [r3, #16]
 8001844:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <lcd_scan_dir+0x710>)
 8001846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800184a:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 800184c:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <lcd_scan_dir+0x710>)
 800184e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001852:	611a      	str	r2, [r3, #16]
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <lcd_scan_dir+0x710>)
 8001856:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <lcd_scan_dir+0x70c>)
 800185e:	885b      	ldrh	r3, [r3, #2]
 8001860:	3b01      	subs	r3, #1
 8001862:	121a      	asrs	r2, r3, #8
 8001864:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <lcd_scan_dir+0x714>)
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <lcd_scan_dir+0x710>)
 800186a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800186e:	611a      	str	r2, [r3, #16]
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <lcd_scan_dir+0x710>)
 8001872:	2280      	movs	r2, #128	@ 0x80
 8001874:	611a      	str	r2, [r3, #16]
 8001876:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <lcd_scan_dir+0x710>)
 8001878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800187c:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <lcd_scan_dir+0x710>)
 8001880:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <lcd_scan_dir+0x710>)
 8001888:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <lcd_scan_dir+0x70c>)
 8001890:	885b      	ldrh	r3, [r3, #2]
 8001892:	3b01      	subs	r3, #1
 8001894:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <lcd_scan_dir+0x714>)
 8001896:	b2db      	uxtb	r3, r3
 8001898:	60d3      	str	r3, [r2, #12]
 800189a:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <lcd_scan_dir+0x710>)
 800189c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018a0:	611a      	str	r2, [r3, #16]
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <lcd_scan_dir+0x710>)
 80018a4:	2280      	movs	r2, #128	@ 0x80
 80018a6:	611a      	str	r2, [r3, #16]
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <lcd_scan_dir+0x710>)
 80018aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ae:	611a      	str	r2, [r3, #16]
}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	@ 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000088 	.word	0x20000088
 80018bc:	40011000 	.word	0x40011000
 80018c0:	40010c00 	.word	0x40010c00

080018c4 <lcd_draw_point>:
 * @param       x,y: ����
 * @param       color: �����ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	603a      	str	r2, [r7, #0]
 80018ce:	80fb      	strh	r3, [r7, #6]
 80018d0:	460b      	mov	r3, r1
 80018d2:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* ���ù��λ�� */
 80018d4:	88ba      	ldrh	r2, [r7, #4]
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f952 	bl	8000b84 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 80018e0:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <lcd_draw_point+0x88>)
 80018e2:	891b      	ldrh	r3, [r3, #8]
 80018e4:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80018e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <lcd_draw_point+0x8c>)
 80018e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80018ee:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <lcd_draw_point+0x8c>)
 80018f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018f4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80018f6:	89fb      	ldrh	r3, [r7, #14]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <lcd_draw_point+0x90>)
 80018fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <lcd_draw_point+0x8c>)
 8001900:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001904:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <lcd_draw_point+0x8c>)
 8001908:	2280      	movs	r2, #128	@ 0x80
 800190a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800190c:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <lcd_draw_point+0x8c>)
 800190e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001912:	611a      	str	r2, [r3, #16]
}
 8001914:	bf00      	nop
}
 8001916:	bf00      	nop
    lcd_write_ram_prepare();    /* ��ʼд��GRAM */
    lcd_wr_data(color);
 8001918:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <lcd_draw_point+0x8c>)
 800191a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <lcd_draw_point+0x8c>)
 8001922:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <lcd_draw_point+0x90>)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	60d3      	str	r3, [r2, #12]
 800192e:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <lcd_draw_point+0x8c>)
 8001930:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <lcd_draw_point+0x8c>)
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <lcd_draw_point+0x8c>)
 800193e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001942:	611a      	str	r2, [r3, #16]
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000088 	.word	0x20000088
 8001950:	40011000 	.word	0x40011000
 8001954:	40010c00 	.word	0x40010c00

08001958 <lcd_ssd_backlight_set>:
 * @brief       SSD1963�����������ú���
 * @param       pwm: ����ȼ�,0~100.Խ��Խ��.
 * @retval      ��
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
 8001962:	23be      	movs	r3, #190	@ 0xbe
 8001964:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001966:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001968:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800196c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800196e:	4b58      	ldr	r3, [pc, #352]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001970:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001974:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b56      	ldr	r3, [pc, #344]	@ (8001ad4 <lcd_ssd_backlight_set+0x17c>)
 800197c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800197e:	4b54      	ldr	r3, [pc, #336]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001980:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001984:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001986:	4b52      	ldr	r3, [pc, #328]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001988:	2280      	movs	r2, #128	@ 0x80
 800198a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800198c:	4b50      	ldr	r3, [pc, #320]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 800198e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001992:	611a      	str	r2, [r3, #16]
}
 8001994:	bf00      	nop
    lcd_wr_regno(0xBE);         /* ����PWM��� */
    lcd_wr_data(0x05);          /* 1����PWMƵ�� */
 8001996:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 80019a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad4 <lcd_ssd_backlight_set+0x17c>)
 80019a8:	2205      	movs	r2, #5
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	4b48      	ldr	r3, [pc, #288]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 80019ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019b2:	611a      	str	r2, [r3, #16]
 80019b4:	4b46      	ldr	r3, [pc, #280]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 80019b6:	2280      	movs	r2, #128	@ 0x80
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	4b45      	ldr	r3, [pc, #276]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 80019bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c0:	611a      	str	r2, [r3, #16]
    lcd_wr_data(pwm * 2.55);    /* 2����PWMռ�ձ� */
 80019c2:	4b43      	ldr	r3, [pc, #268]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 80019c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	4b41      	ldr	r3, [pc, #260]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 80019cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fea3 	bl	8000720 <__aeabi_i2d>
 80019da:	a33b      	add	r3, pc, #236	@ (adr r3, 8001ac8 <lcd_ssd_backlight_set+0x170>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fc22 	bl	8000228 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4c3a      	ldr	r4, [pc, #232]	@ (8001ad4 <lcd_ssd_backlight_set+0x17c>)
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7fe ff01 	bl	80007f4 <__aeabi_d2uiz>
 80019f2:	4603      	mov	r3, r0
 80019f4:	60e3      	str	r3, [r4, #12]
 80019f6:	4b36      	ldr	r3, [pc, #216]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 80019f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	4b34      	ldr	r3, [pc, #208]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a00:	2280      	movs	r2, #128	@ 0x80
 8001a02:	611a      	str	r2, [r3, #16]
 8001a04:	4b32      	ldr	r3, [pc, #200]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a0a:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x01);          /* 3����C */
 8001a0c:	4b30      	ldr	r3, [pc, #192]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a12:	611a      	str	r2, [r3, #16]
 8001a14:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a1a:	611a      	str	r2, [r3, #16]
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad4 <lcd_ssd_backlight_set+0x17c>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	4b29      	ldr	r3, [pc, #164]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a2c:	2280      	movs	r2, #128	@ 0x80
 8001a2e:	611a      	str	r2, [r3, #16]
 8001a30:	4b27      	ldr	r3, [pc, #156]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a36:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0xFF);          /* 4����D */
 8001a38:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <lcd_ssd_backlight_set+0x17c>)
 8001a4a:	22ff      	movs	r2, #255	@ 0xff
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a50:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a54:	611a      	str	r2, [r3, #16]
 8001a56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a58:	2280      	movs	r2, #128	@ 0x80
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a62:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 5����E */
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a6a:	611a      	str	r2, [r3, #16]
 8001a6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a72:	611a      	str	r2, [r3, #16]
 8001a74:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <lcd_ssd_backlight_set+0x17c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a7c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a84:	2280      	movs	r2, #128	@ 0x80
 8001a86:	611a      	str	r2, [r3, #16]
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a8e:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 6����F */
 8001a90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a96:	611a      	str	r2, [r3, #16]
 8001a98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001a9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a9e:	611a      	str	r2, [r3, #16]
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <lcd_ssd_backlight_set+0x17c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001aa8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001aac:	611a      	str	r2, [r3, #16]
 8001aae:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001ab0:	2280      	movs	r2, #128	@ 0x80
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <lcd_ssd_backlight_set+0x178>)
 8001ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aba:	611a      	str	r2, [r3, #16]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	66666666 	.word	0x66666666
 8001acc:	40046666 	.word	0x40046666
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	40010c00 	.word	0x40010c00

08001ad8 <lcd_display_dir>:
 * @brief       ����LCD��ʾ����
 * @param       dir:0,����; 1,����
 * @retval      ��
 */
void lcd_display_dir(uint8_t dir)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* ����/���� */
 8001ae2:	4a68      	ldr	r2, [pc, #416]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* ���� */
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d165      	bne.n	8001bba <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 8001aee:	4b65      	ldr	r3, [pc, #404]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001af0:	22f0      	movs	r2, #240	@ 0xf0
 8001af2:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 8001af4:	4b63      	ldr	r3, [pc, #396]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001af6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001afa:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001afc:	4b61      	ldr	r3, [pc, #388]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001afe:	889b      	ldrh	r3, [r3, #4]
 8001b00:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d114      	bne.n	8001b32 <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8001b08:	4b5e      	ldr	r3, [pc, #376]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b0a:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001b0e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001b10:	4b5c      	ldr	r3, [pc, #368]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b12:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001b16:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001b18:	4b5a      	ldr	r3, [pc, #360]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b1a:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001b1e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8001b20:	4b58      	ldr	r3, [pc, #352]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b22:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b26:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001b28:	4b56      	ldr	r3, [pc, #344]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b2a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b2e:	805a      	strh	r2, [r3, #2]
 8001b30:	e020      	b.n	8001b74 <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 8001b32:	4b54      	ldr	r3, [pc, #336]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b34:	889b      	ldrh	r3, [r3, #4]
 8001b36:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d111      	bne.n	8001b62 <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001b3e:	4b51      	ldr	r3, [pc, #324]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b40:	222c      	movs	r2, #44	@ 0x2c
 8001b42:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* ����дX����ָ�� */
 8001b44:	4b4f      	ldr	r3, [pc, #316]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b46:	222b      	movs	r2, #43	@ 0x2b
 8001b48:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* ����дY����ָ�� */
 8001b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b4c:	222a      	movs	r2, #42	@ 0x2a
 8001b4e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* ���ÿ��480 */
 8001b50:	4b4c      	ldr	r3, [pc, #304]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b52:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b56:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* ���ø߶�800 */
 8001b58:	4b4a      	ldr	r3, [pc, #296]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b5a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b5e:	805a      	strh	r2, [r3, #2]
 8001b60:	e008      	b.n	8001b74 <lcd_display_dir+0x9c>
        }
        else   /* ����IC, ����: 9341 / 5310 / 7789 / 7796 / 9806 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001b62:	4b48      	ldr	r3, [pc, #288]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b64:	222c      	movs	r2, #44	@ 0x2c
 8001b66:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001b68:	4b46      	ldr	r3, [pc, #280]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b6a:	222a      	movs	r2, #42	@ 0x2a
 8001b6c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001b6e:	4b45      	ldr	r3, [pc, #276]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b70:	222b      	movs	r2, #43	@ 0x2b
 8001b72:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001b74:	4b43      	ldr	r3, [pc, #268]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b76:	889b      	ldrh	r3, [r3, #4]
 8001b78:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d005      	beq.n	8001b8c <lcd_display_dir+0xb4>
 8001b80:	4b40      	ldr	r3, [pc, #256]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b82:	889b      	ldrh	r3, [r3, #4]
 8001b84:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d107      	bne.n	8001b9c <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8001b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b8e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b92:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001b94:	4b3b      	ldr	r3, [pc, #236]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b96:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b9a:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* �����9806 ���ʾ�� 480*800 �ֱ��� */
 8001b9c:	4b39      	ldr	r3, [pc, #228]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001b9e:	889b      	ldrh	r3, [r3, #4]
 8001ba0:	f649 0206 	movw	r2, #38918	@ 0x9806
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d165      	bne.n	8001c74 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001ba8:	4b36      	ldr	r3, [pc, #216]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001baa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001bae:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001bb0:	4b34      	ldr	r3, [pc, #208]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001bb2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001bb6:	805a      	strh	r2, [r3, #2]
 8001bb8:	e05c      	b.n	8001c74 <lcd_display_dir+0x19c>
        }
    }
    else                /* ���� */
    {
        lcddev.width = 320;         /* Ĭ�Ͽ�� */
 8001bba:	4b32      	ldr	r3, [pc, #200]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001bbc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001bc0:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Ĭ�ϸ߶� */
 8001bc2:	4b30      	ldr	r3, [pc, #192]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001bc4:	22f0      	movs	r2, #240	@ 0xf0
 8001bc6:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001bca:	889b      	ldrh	r3, [r3, #4]
 8001bcc:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d114      	bne.n	8001bfe <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001bd6:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001bda:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001bdc:	4b29      	ldr	r3, [pc, #164]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001bde:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001be2:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001be4:	4b27      	ldr	r3, [pc, #156]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001be6:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001bea:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8001bec:	4b25      	ldr	r3, [pc, #148]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001bee:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001bf2:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001bf4:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001bf6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001bfa:	805a      	strh	r2, [r3, #2]
 8001bfc:	e026      	b.n	8001c4c <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8001bfe:	4b21      	ldr	r3, [pc, #132]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c00:	889b      	ldrh	r3, [r3, #4]
 8001c02:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d005      	beq.n	8001c16 <lcd_display_dir+0x13e>
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c0c:	889b      	ldrh	r3, [r3, #4]
 8001c0e:	f649 0206 	movw	r2, #38918	@ 0x9806
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d111      	bne.n	8001c3a <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001c16:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c18:	222c      	movs	r2, #44	@ 0x2c
 8001c1a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* ����дX����ָ�� */
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c1e:	222a      	movs	r2, #42	@ 0x2a
 8001c20:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* ����дY����ָ�� */
 8001c22:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c24:	222b      	movs	r2, #43	@ 0x2b
 8001c26:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* ���ÿ��800 */
 8001c28:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c2a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001c2e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* ���ø߶�480 */
 8001c30:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c32:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001c36:	805a      	strh	r2, [r3, #2]
 8001c38:	e008      	b.n	8001c4c <lcd_display_dir+0x174>
        }
        else     /* ����IC, ����: 9341 / 5310 / 7789 / 7796 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c3c:	222c      	movs	r2, #44	@ 0x2c
 8001c3e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001c40:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c42:	222a      	movs	r2, #42	@ 0x2a
 8001c44:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c48:	222b      	movs	r2, #43	@ 0x2b
 8001c4a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d005      	beq.n	8001c64 <lcd_display_dir+0x18c>
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c5a:	889b      	ldrh	r3, [r3, #4]
 8001c5c:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d107      	bne.n	8001c74 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001c64:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c66:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001c6a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <lcd_display_dir+0x1ac>)
 8001c6e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001c72:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Ĭ��ɨ�跽�� */
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff fa99 	bl	80011ac <lcd_scan_dir>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000088 	.word	0x20000088

08001c88 <lcd_init>:
 *
 * @param       ��
 * @retval      ��
 */
void lcd_init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b0da      	sub	sp, #360	@ 0x168
 8001c8c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_struct;
    
    LCD_BL_GPIO_CLK_ENABLE();   /* LCD_BL��ʱ��ʹ�� */
 8001c8e:	4bbe      	ldr	r3, [pc, #760]	@ (8001f88 <lcd_init+0x300>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	4abd      	ldr	r2, [pc, #756]	@ (8001f88 <lcd_init+0x300>)
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	6193      	str	r3, [r2, #24]
 8001c9a:	4bbb      	ldr	r3, [pc, #748]	@ (8001f88 <lcd_init+0x300>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f003 0210 	and.w	r2, r3, #16
 8001ca2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ca6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cb0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cb4:	681b      	ldr	r3, [r3, #0]
    LCD_CS_GPIO_CLK_ENABLE();   /* LCD_CS��ʱ��ʹ�� */
 8001cb6:	4bb4      	ldr	r3, [pc, #720]	@ (8001f88 <lcd_init+0x300>)
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	4ab3      	ldr	r2, [pc, #716]	@ (8001f88 <lcd_init+0x300>)
 8001cbc:	f043 0310 	orr.w	r3, r3, #16
 8001cc0:	6193      	str	r3, [r2, #24]
 8001cc2:	4bb1      	ldr	r3, [pc, #708]	@ (8001f88 <lcd_init+0x300>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f003 0210 	and.w	r2, r3, #16
 8001cca:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cd8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001cdc:	681b      	ldr	r3, [r3, #0]
    LCD_WR_GPIO_CLK_ENABLE();   /* LCD_WR��ʱ��ʹ�� */
 8001cde:	4baa      	ldr	r3, [pc, #680]	@ (8001f88 <lcd_init+0x300>)
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	4aa9      	ldr	r2, [pc, #676]	@ (8001f88 <lcd_init+0x300>)
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	6193      	str	r3, [r2, #24]
 8001cea:	4ba7      	ldr	r3, [pc, #668]	@ (8001f88 <lcd_init+0x300>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f003 0210 	and.w	r2, r3, #16
 8001cf2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001cf6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d00:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001d04:	681b      	ldr	r3, [r3, #0]
    LCD_RD_GPIO_CLK_ENABLE();   /* LCD_RD��ʱ��ʹ�� */
 8001d06:	4ba0      	ldr	r3, [pc, #640]	@ (8001f88 <lcd_init+0x300>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	4a9f      	ldr	r2, [pc, #636]	@ (8001f88 <lcd_init+0x300>)
 8001d0c:	f043 0310 	orr.w	r3, r3, #16
 8001d10:	6193      	str	r3, [r2, #24]
 8001d12:	4b9d      	ldr	r3, [pc, #628]	@ (8001f88 <lcd_init+0x300>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 0210 	and.w	r2, r3, #16
 8001d1a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d1e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d28:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001d2c:	681b      	ldr	r3, [r3, #0]
    LCD_RS_GPIO_CLK_ENABLE();   /* LCD_RS��ʱ��ʹ�� */
 8001d2e:	4b96      	ldr	r3, [pc, #600]	@ (8001f88 <lcd_init+0x300>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	4a95      	ldr	r2, [pc, #596]	@ (8001f88 <lcd_init+0x300>)
 8001d34:	f043 0310 	orr.w	r3, r3, #16
 8001d38:	6193      	str	r3, [r2, #24]
 8001d3a:	4b93      	ldr	r3, [pc, #588]	@ (8001f88 <lcd_init+0x300>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f003 0210 	and.w	r2, r3, #16
 8001d42:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d46:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d50:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001d54:	681b      	ldr	r3, [r3, #0]
    LCD_DATA_GPIO_CLK_ENABLE(); /* LCD_DATA��ʱ��ʹ�� */
 8001d56:	4b8c      	ldr	r3, [pc, #560]	@ (8001f88 <lcd_init+0x300>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	4a8b      	ldr	r2, [pc, #556]	@ (8001f88 <lcd_init+0x300>)
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	6193      	str	r3, [r2, #24]
 8001d62:	4b89      	ldr	r3, [pc, #548]	@ (8001f88 <lcd_init+0x300>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0208 	and.w	r2, r3, #8
 8001d6a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d6e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d78:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d7c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7e:	4b82      	ldr	r3, [pc, #520]	@ (8001f88 <lcd_init+0x300>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4a81      	ldr	r2, [pc, #516]	@ (8001f88 <lcd_init+0x300>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6193      	str	r3, [r2, #24]
 8001d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f88 <lcd_init+0x300>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d96:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001da0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001da4:	681b      	ldr	r3, [r3, #0]
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); /* ��ֹJTAG, ʹ��SWD, �ͷ�PB3,PB4������������ͨIO�� */
 8001da6:	4b79      	ldr	r3, [pc, #484]	@ (8001f8c <lcd_init+0x304>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001dae:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001db2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001db6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001dba:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001dbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dc2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001dc6:	4a71      	ldr	r2, [pc, #452]	@ (8001f8c <lcd_init+0x304>)
 8001dc8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001dcc:	6053      	str	r3, [r2, #4]
    
    gpio_init_struct.Pin = LCD_BL_GPIO_PIN;
 8001dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dd2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;               
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          
 8001de2:	2303      	movs	r3, #3
 8001de4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &gpio_init_struct);     /* LCD_BL����ģʽ����(�������) */
 8001de8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001dec:	4619      	mov	r1, r3
 8001dee:	4868      	ldr	r0, [pc, #416]	@ (8001f90 <lcd_init+0x308>)
 8001df0:	f006 fa7a 	bl	80082e8 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_CS_GPIO_PIN;
 8001df4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001df8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ���츴�� */
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    /* ���� */
 8001e02:	2301      	movs	r3, #1
 8001e04:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          /* ���� */
 8001e08:	2303      	movs	r3, #3
 8001e0a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_CS���� */
 8001e0e:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001e12:	4619      	mov	r1, r3
 8001e14:	485e      	ldr	r0, [pc, #376]	@ (8001f90 <lcd_init+0x308>)
 8001e16:	f006 fa67 	bl	80082e8 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_WR_GPIO_PIN;
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_WR���� */
 8001e20:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001e24:	4619      	mov	r1, r3
 8001e26:	485a      	ldr	r0, [pc, #360]	@ (8001f90 <lcd_init+0x308>)
 8001e28:	f006 fa5e 	bl	80082e8 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RD_GPIO_PIN;
 8001e2c:	2340      	movs	r3, #64	@ 0x40
 8001e2e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RD���� */
 8001e32:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001e36:	4619      	mov	r1, r3
 8001e38:	4855      	ldr	r0, [pc, #340]	@ (8001f90 <lcd_init+0x308>)
 8001e3a:	f006 fa55 	bl	80082e8 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RS_GPIO_PIN;
 8001e3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e42:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RS���� */
 8001e46:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4850      	ldr	r0, [pc, #320]	@ (8001f90 <lcd_init+0x308>)
 8001e4e:	f006 fa4b 	bl	80082e8 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8001e52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e56:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ������� */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);   /* LCD_DATA����ģʽ���� */
 8001e60:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001e64:	4619      	mov	r1, r3
 8001e66:	484b      	ldr	r0, [pc, #300]	@ (8001f94 <lcd_init+0x30c>)
 8001e68:	f006 fa3e 	bl	80082e8 <HAL_GPIO_Init>
    LCD_WR(1);                  /* WR Ĭ�ϸߵ�ƽ */
 8001e6c:	4b48      	ldr	r3, [pc, #288]	@ (8001f90 <lcd_init+0x308>)
 8001e6e:	2280      	movs	r2, #128	@ 0x80
 8001e70:	611a      	str	r2, [r3, #16]
    LCD_RD(1);                  /* RD Ĭ�ϸߵ�ƽ */
 8001e72:	4b47      	ldr	r3, [pc, #284]	@ (8001f90 <lcd_init+0x308>)
 8001e74:	2240      	movs	r2, #64	@ 0x40
 8001e76:	611a      	str	r2, [r3, #16]
    LCD_CS(1);                  /* CS Ĭ�ϸߵ�ƽ */
 8001e78:	4b45      	ldr	r3, [pc, #276]	@ (8001f90 <lcd_init+0x308>)
 8001e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e7e:	611a      	str	r2, [r3, #16]
    LCD_RS(1);                  /* RS Ĭ�ϸߵ�ƽ */
 8001e80:	4b43      	ldr	r3, [pc, #268]	@ (8001f90 <lcd_init+0x308>)
 8001e82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e86:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(0XFFFF);       /* DATA Ĭ�ϸߵ�ƽ */
 8001e88:	4b42      	ldr	r3, [pc, #264]	@ (8001f94 <lcd_init+0x30c>)
 8001e8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e8e:	60da      	str	r2, [r3, #12]

    lcd_opt_delay(0X1FFFF);
 8001e90:	4841      	ldr	r0, [pc, #260]	@ (8001f98 <lcd_init+0x310>)
 8001e92:	f7fe fdd9 	bl	8000a48 <lcd_opt_delay>
 8001e96:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e9a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e9e:	22d3      	movs	r2, #211	@ 0xd3
 8001ea0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8001f90 <lcd_init+0x308>)
 8001ea4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ea8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001eaa:	4b39      	ldr	r3, [pc, #228]	@ (8001f90 <lcd_init+0x308>)
 8001eac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eb0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001eb2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001eb6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	4b35      	ldr	r3, [pc, #212]	@ (8001f94 <lcd_init+0x30c>)
 8001ec0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001ec2:	4b33      	ldr	r3, [pc, #204]	@ (8001f90 <lcd_init+0x308>)
 8001ec4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ec8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001eca:	4b31      	ldr	r3, [pc, #196]	@ (8001f90 <lcd_init+0x308>)
 8001ecc:	2280      	movs	r2, #128	@ 0x80
 8001ece:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <lcd_init+0x308>)
 8001ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed6:	611a      	str	r2, [r3, #16]
}
 8001ed8:	bf00      	nop

    /* ����9341 ID�Ķ�ȡ */
    lcd_wr_regno(0XD3);
    lcddev.id = lcd_rd_data();  /* dummy read */
 8001eda:	f7fe fdc5 	bl	8000a68 <lcd_rd_data>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f9c <lcd_init+0x314>)
 8001ee4:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ����0X00 */
 8001ee6:	f7fe fdbf 	bl	8000a68 <lcd_rd_data>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b2b      	ldr	r3, [pc, #172]	@ (8001f9c <lcd_init+0x314>)
 8001ef0:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ��ȡ0X93 */
 8001ef2:	f7fe fdb9 	bl	8000a68 <lcd_rd_data>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b28      	ldr	r3, [pc, #160]	@ (8001f9c <lcd_init+0x314>)
 8001efc:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 8001efe:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <lcd_init+0x314>)
 8001f00:	889b      	ldrh	r3, [r3, #4]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <lcd_init+0x314>)
 8001f08:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* ��ȡ0X41 */
 8001f0a:	f7fe fdad 	bl	8000a68 <lcd_rd_data>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <lcd_init+0x314>)
 8001f14:	889b      	ldrh	r3, [r3, #4]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <lcd_init+0x314>)
 8001f1c:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* ���� 9341 , ���Կ����ǲ��� ST7789 */
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <lcd_init+0x314>)
 8001f20:	889b      	ldrh	r3, [r3, #4]
 8001f22:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001f26:	4293      	cmp	r3, r2
 8001f28:	f000 820e 	beq.w	8002348 <lcd_init+0x6c0>
 8001f2c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f30:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8001f34:	2204      	movs	r2, #4
 8001f36:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001f38:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <lcd_init+0x308>)
 8001f3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f3e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001f40:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <lcd_init+0x308>)
 8001f42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f46:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001f48:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f4c:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <lcd_init+0x30c>)
 8001f56:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001f58:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <lcd_init+0x308>)
 8001f5a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f5e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <lcd_init+0x308>)
 8001f62:	2280      	movs	r2, #128	@ 0x80
 8001f64:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <lcd_init+0x308>)
 8001f68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f6c:	611a      	str	r2, [r3, #16]
}
 8001f6e:	bf00      	nop
    {
        lcd_wr_regno(0X04);
        lcddev.id = lcd_rd_data();      /* dummy read */
 8001f70:	f7fe fd7a 	bl	8000a68 <lcd_rd_data>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <lcd_init+0x314>)
 8001f7a:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ����0X85 */
 8001f7c:	f7fe fd74 	bl	8000a68 <lcd_rd_data>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	e00c      	b.n	8001fa0 <lcd_init+0x318>
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	40011000 	.word	0x40011000
 8001f94:	40010c00 	.word	0x40010c00
 8001f98:	0001ffff 	.word	0x0001ffff
 8001f9c:	20000088 	.word	0x20000088
 8001fa0:	4bb1      	ldr	r3, [pc, #708]	@ (8002268 <lcd_init+0x5e0>)
 8001fa2:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ��ȡ0X85 */
 8001fa4:	f7fe fd60 	bl	8000a68 <lcd_rd_data>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4bae      	ldr	r3, [pc, #696]	@ (8002268 <lcd_init+0x5e0>)
 8001fae:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8001fb0:	4bad      	ldr	r3, [pc, #692]	@ (8002268 <lcd_init+0x5e0>)
 8001fb2:	889b      	ldrh	r3, [r3, #4]
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	4bab      	ldr	r3, [pc, #684]	@ (8002268 <lcd_init+0x5e0>)
 8001fba:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* ��ȡ0X52 */
 8001fbc:	f7fe fd54 	bl	8000a68 <lcd_rd_data>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4ba8      	ldr	r3, [pc, #672]	@ (8002268 <lcd_init+0x5e0>)
 8001fc6:	889b      	ldrh	r3, [r3, #4]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	4ba6      	ldr	r3, [pc, #664]	@ (8002268 <lcd_init+0x5e0>)
 8001fce:	809a      	strh	r2, [r3, #4]
        
        if (lcddev.id == 0X8552)        /* ��8552��IDת����7789 */
 8001fd0:	4ba5      	ldr	r3, [pc, #660]	@ (8002268 <lcd_init+0x5e0>)
 8001fd2:	889b      	ldrh	r3, [r3, #4]
 8001fd4:	f248 5252 	movw	r2, #34130	@ 0x8552
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d103      	bne.n	8001fe4 <lcd_init+0x35c>
        {
            lcddev.id = 0x7789;
 8001fdc:	4ba2      	ldr	r3, [pc, #648]	@ (8002268 <lcd_init+0x5e0>)
 8001fde:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001fe2:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Ҳ����ST7789, �����ǲ��� NT35310 */
 8001fe4:	4ba0      	ldr	r3, [pc, #640]	@ (8002268 <lcd_init+0x5e0>)
 8001fe6:	889b      	ldrh	r3, [r3, #4]
 8001fe8:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001fec:	4293      	cmp	r3, r2
 8001fee:	f000 81ab 	beq.w	8002348 <lcd_init+0x6c0>
 8001ff2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ff6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ffa:	22d4      	movs	r2, #212	@ 0xd4
 8001ffc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001ffe:	4b9b      	ldr	r3, [pc, #620]	@ (800226c <lcd_init+0x5e4>)
 8002000:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002004:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002006:	4b99      	ldr	r3, [pc, #612]	@ (800226c <lcd_init+0x5e4>)
 8002008:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800200c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800200e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002012:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	b29a      	uxth	r2, r3
 800201a:	4b95      	ldr	r3, [pc, #596]	@ (8002270 <lcd_init+0x5e8>)
 800201c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800201e:	4b93      	ldr	r3, [pc, #588]	@ (800226c <lcd_init+0x5e4>)
 8002020:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002024:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002026:	4b91      	ldr	r3, [pc, #580]	@ (800226c <lcd_init+0x5e4>)
 8002028:	2280      	movs	r2, #128	@ 0x80
 800202a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800202c:	4b8f      	ldr	r3, [pc, #572]	@ (800226c <lcd_init+0x5e4>)
 800202e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002032:	611a      	str	r2, [r3, #16]
}
 8002034:	bf00      	nop
        {
            lcd_wr_regno(0xD4);
            lcddev.id = lcd_rd_data();  /* dummy read */
 8002036:	f7fe fd17 	bl	8000a68 <lcd_rd_data>
 800203a:	4603      	mov	r3, r0
 800203c:	461a      	mov	r2, r3
 800203e:	4b8a      	ldr	r3, [pc, #552]	@ (8002268 <lcd_init+0x5e0>)
 8002040:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x01 */
 8002042:	f7fe fd11 	bl	8000a68 <lcd_rd_data>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	4b87      	ldr	r3, [pc, #540]	@ (8002268 <lcd_init+0x5e0>)
 800204c:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x53 */
 800204e:	f7fe fd0b 	bl	8000a68 <lcd_rd_data>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	4b84      	ldr	r3, [pc, #528]	@ (8002268 <lcd_init+0x5e0>)
 8002058:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 800205a:	4b83      	ldr	r3, [pc, #524]	@ (8002268 <lcd_init+0x5e0>)
 800205c:	889b      	ldrh	r3, [r3, #4]
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b81      	ldr	r3, [pc, #516]	@ (8002268 <lcd_init+0x5e0>)
 8002064:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* �������0x10 */
 8002066:	f7fe fcff 	bl	8000a68 <lcd_rd_data>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	4b7e      	ldr	r3, [pc, #504]	@ (8002268 <lcd_init+0x5e0>)
 8002070:	889b      	ldrh	r3, [r3, #4]
 8002072:	4313      	orrs	r3, r2
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b7c      	ldr	r3, [pc, #496]	@ (8002268 <lcd_init+0x5e0>)
 8002078:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Ҳ����NT35310,���Կ����ǲ���ST7796 */
 800207a:	4b7b      	ldr	r3, [pc, #492]	@ (8002268 <lcd_init+0x5e0>)
 800207c:	889b      	ldrh	r3, [r3, #4]
 800207e:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002082:	4293      	cmp	r3, r2
 8002084:	f000 8160 	beq.w	8002348 <lcd_init+0x6c0>
 8002088:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800208c:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8002090:	22d3      	movs	r2, #211	@ 0xd3
 8002092:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002094:	4b75      	ldr	r3, [pc, #468]	@ (800226c <lcd_init+0x5e4>)
 8002096:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800209a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800209c:	4b73      	ldr	r3, [pc, #460]	@ (800226c <lcd_init+0x5e4>)
 800209e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020a2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80020a4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80020a8:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002270 <lcd_init+0x5e8>)
 80020b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80020b4:	4b6d      	ldr	r3, [pc, #436]	@ (800226c <lcd_init+0x5e4>)
 80020b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80020bc:	4b6b      	ldr	r3, [pc, #428]	@ (800226c <lcd_init+0x5e4>)
 80020be:	2280      	movs	r2, #128	@ 0x80
 80020c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80020c2:	4b6a      	ldr	r3, [pc, #424]	@ (800226c <lcd_init+0x5e4>)
 80020c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020c8:	611a      	str	r2, [r3, #16]
}
 80020ca:	bf00      	nop
            {
                lcd_wr_regno(0XD3);
                lcddev.id = lcd_rd_data();  /* dummy read */
 80020cc:	f7fe fccc 	bl	8000a68 <lcd_rd_data>
 80020d0:	4603      	mov	r3, r0
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b64      	ldr	r3, [pc, #400]	@ (8002268 <lcd_init+0x5e0>)
 80020d6:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ����0X00 */
 80020d8:	f7fe fcc6 	bl	8000a68 <lcd_rd_data>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	4b61      	ldr	r3, [pc, #388]	@ (8002268 <lcd_init+0x5e0>)
 80020e2:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ��ȡ0X77 */
 80020e4:	f7fe fcc0 	bl	8000a68 <lcd_rd_data>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002268 <lcd_init+0x5e0>)
 80020ee:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 80020f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002268 <lcd_init+0x5e0>)
 80020f2:	889b      	ldrh	r3, [r3, #4]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002268 <lcd_init+0x5e0>)
 80020fa:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* ��ȡ0X96 */
 80020fc:	f7fe fcb4 	bl	8000a68 <lcd_rd_data>
 8002100:	4603      	mov	r3, r0
 8002102:	461a      	mov	r2, r3
 8002104:	4b58      	ldr	r3, [pc, #352]	@ (8002268 <lcd_init+0x5e0>)
 8002106:	889b      	ldrh	r3, [r3, #4]
 8002108:	4313      	orrs	r3, r2
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b56      	ldr	r3, [pc, #344]	@ (8002268 <lcd_init+0x5e0>)
 800210e:	809a      	strh	r2, [r3, #4]
                
                if (lcddev.id != 0x7796)    /* Ҳ����ST7796,���Կ����ǲ���NT35510 */
 8002110:	4b55      	ldr	r3, [pc, #340]	@ (8002268 <lcd_init+0x5e0>)
 8002112:	889b      	ldrh	r3, [r3, #4]
 8002114:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002118:	4293      	cmp	r3, r2
 800211a:	f000 8115 	beq.w	8002348 <lcd_init+0x6c0>
                {
                    /* ������Կ�������ṩ�� */
                    lcd_write_reg(0xF000, 0x0055);
 800211e:	2155      	movs	r1, #85	@ 0x55
 8002120:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8002124:	f7fe fc4e 	bl	80009c4 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8002128:	21aa      	movs	r1, #170	@ 0xaa
 800212a:	f24f 0001 	movw	r0, #61441	@ 0xf001
 800212e:	f7fe fc49 	bl	80009c4 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 8002132:	2152      	movs	r1, #82	@ 0x52
 8002134:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8002138:	f7fe fc44 	bl	80009c4 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 800213c:	2108      	movs	r1, #8
 800213e:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8002142:	f7fe fc3f 	bl	80009c4 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 8002146:	2101      	movs	r1, #1
 8002148:	f24f 0004 	movw	r0, #61444	@ 0xf004
 800214c:	f7fe fc3a 	bl	80009c4 <lcd_write_reg>
 8002150:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002154:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8002158:	f44f 4245 	mov.w	r2, #50432	@ 0xc500
 800215c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800215e:	4b43      	ldr	r3, [pc, #268]	@ (800226c <lcd_init+0x5e4>)
 8002160:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002164:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002166:	4b41      	ldr	r3, [pc, #260]	@ (800226c <lcd_init+0x5e4>)
 8002168:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800216c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800216e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002172:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	b29a      	uxth	r2, r3
 800217a:	4b3d      	ldr	r3, [pc, #244]	@ (8002270 <lcd_init+0x5e8>)
 800217c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800217e:	4b3b      	ldr	r3, [pc, #236]	@ (800226c <lcd_init+0x5e4>)
 8002180:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002184:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002186:	4b39      	ldr	r3, [pc, #228]	@ (800226c <lcd_init+0x5e4>)
 8002188:	2280      	movs	r2, #128	@ 0x80
 800218a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800218c:	4b37      	ldr	r3, [pc, #220]	@ (800226c <lcd_init+0x5e4>)
 800218e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002192:	611a      	str	r2, [r3, #16]
}
 8002194:	bf00      	nop

                    lcd_wr_regno(0xC500);       /* ��ȡID�Ͱ�λ */
                    lcddev.id = lcd_rd_data();  /* ����0x55 */
 8002196:	f7fe fc67 	bl	8000a68 <lcd_rd_data>
 800219a:	4603      	mov	r3, r0
 800219c:	461a      	mov	r2, r3
 800219e:	4b32      	ldr	r3, [pc, #200]	@ (8002268 <lcd_init+0x5e0>)
 80021a0:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 80021a2:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <lcd_init+0x5e0>)
 80021a4:	889b      	ldrh	r3, [r3, #4]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002268 <lcd_init+0x5e0>)
 80021ac:	809a      	strh	r2, [r3, #4]
 80021ae:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021b2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021b6:	f24c 5201 	movw	r2, #50433	@ 0xc501
 80021ba:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80021bc:	4b2b      	ldr	r3, [pc, #172]	@ (800226c <lcd_init+0x5e4>)
 80021be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021c2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80021c4:	4b29      	ldr	r3, [pc, #164]	@ (800226c <lcd_init+0x5e4>)
 80021c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ca:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80021cc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021d0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b25      	ldr	r3, [pc, #148]	@ (8002270 <lcd_init+0x5e8>)
 80021da:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80021dc:	4b23      	ldr	r3, [pc, #140]	@ (800226c <lcd_init+0x5e4>)
 80021de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021e2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80021e4:	4b21      	ldr	r3, [pc, #132]	@ (800226c <lcd_init+0x5e4>)
 80021e6:	2280      	movs	r2, #128	@ 0x80
 80021e8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80021ea:	4b20      	ldr	r3, [pc, #128]	@ (800226c <lcd_init+0x5e4>)
 80021ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f0:	611a      	str	r2, [r3, #16]
}
 80021f2:	bf00      	nop

                    lcd_wr_regno(0xC501);       /* ��ȡID�߰�λ */
                    lcddev.id |= lcd_rd_data(); /* ����0x10 */
 80021f4:	f7fe fc38 	bl	8000a68 <lcd_rd_data>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <lcd_init+0x5e0>)
 80021fe:	889b      	ldrh	r3, [r3, #4]
 8002200:	4313      	orrs	r3, r2
 8002202:	b29a      	uxth	r2, r3
 8002204:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <lcd_init+0x5e0>)
 8002206:	809a      	strh	r2, [r3, #4]
                    
                    //delay_ms(5);                /* �ȴ�5ms, ��Ϊ0XC501ָ���1963��˵���������λָ��, �ȴ�5ms��1963��λ����ٲ��� */

                    if (lcddev.id != 0x5510)    /* Ҳ����NT5510,���Կ����ǲ���ILI9806 */
 8002208:	4b17      	ldr	r3, [pc, #92]	@ (8002268 <lcd_init+0x5e0>)
 800220a:	889b      	ldrh	r3, [r3, #4]
 800220c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002210:	4293      	cmp	r3, r2
 8002212:	f000 8099 	beq.w	8002348 <lcd_init+0x6c0>
 8002216:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800221a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800221e:	22d3      	movs	r2, #211	@ 0xd3
 8002220:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002222:	4b12      	ldr	r3, [pc, #72]	@ (800226c <lcd_init+0x5e4>)
 8002224:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002228:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <lcd_init+0x5e4>)
 800222c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002230:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002232:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002236:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29a      	uxth	r2, r3
 800223e:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <lcd_init+0x5e8>)
 8002240:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <lcd_init+0x5e4>)
 8002244:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002248:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800224a:	4b08      	ldr	r3, [pc, #32]	@ (800226c <lcd_init+0x5e4>)
 800224c:	2280      	movs	r2, #128	@ 0x80
 800224e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <lcd_init+0x5e4>)
 8002252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002256:	611a      	str	r2, [r3, #16]
}
 8002258:	bf00      	nop
                    {
                        lcd_wr_regno(0XD3);
                        lcddev.id = lcd_rd_data();  /* dummy read */
 800225a:	f7fe fc05 	bl	8000a68 <lcd_rd_data>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	4b01      	ldr	r3, [pc, #4]	@ (8002268 <lcd_init+0x5e0>)
 8002264:	809a      	strh	r2, [r3, #4]
 8002266:	e005      	b.n	8002274 <lcd_init+0x5ec>
 8002268:	20000088 	.word	0x20000088
 800226c:	40011000 	.word	0x40011000
 8002270:	40010c00 	.word	0x40010c00
                        lcddev.id = lcd_rd_data();  /* ����0X00 */
 8002274:	f7fe fbf8 	bl	8000a68 <lcd_rd_data>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	4bb2      	ldr	r3, [pc, #712]	@ (8002548 <lcd_init+0x8c0>)
 800227e:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* ����0X98 */
 8002280:	f7fe fbf2 	bl	8000a68 <lcd_rd_data>
 8002284:	4603      	mov	r3, r0
 8002286:	461a      	mov	r2, r3
 8002288:	4baf      	ldr	r3, [pc, #700]	@ (8002548 <lcd_init+0x8c0>)
 800228a:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 800228c:	4bae      	ldr	r3, [pc, #696]	@ (8002548 <lcd_init+0x8c0>)
 800228e:	889b      	ldrh	r3, [r3, #4]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	b29a      	uxth	r2, r3
 8002294:	4bac      	ldr	r3, [pc, #688]	@ (8002548 <lcd_init+0x8c0>)
 8002296:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* ����0X06 */
 8002298:	f7fe fbe6 	bl	8000a68 <lcd_rd_data>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	4ba9      	ldr	r3, [pc, #676]	@ (8002548 <lcd_init+0x8c0>)
 80022a2:	889b      	ldrh	r3, [r3, #4]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	4ba7      	ldr	r3, [pc, #668]	@ (8002548 <lcd_init+0x8c0>)
 80022aa:	809a      	strh	r2, [r3, #4]
                        
                        if (lcddev.id != 0x9806)    /* Ҳ����ILI9806,���Կ����ǲ���SSD1963 */
 80022ac:	4ba6      	ldr	r3, [pc, #664]	@ (8002548 <lcd_init+0x8c0>)
 80022ae:	889b      	ldrh	r3, [r3, #4]
 80022b0:	f649 0206 	movw	r2, #38918	@ 0x9806
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d047      	beq.n	8002348 <lcd_init+0x6c0>
 80022b8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80022bc:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80022c0:	22a1      	movs	r2, #161	@ 0xa1
 80022c2:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80022c4:	4ba1      	ldr	r3, [pc, #644]	@ (800254c <lcd_init+0x8c4>)
 80022c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022ca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80022cc:	4b9f      	ldr	r3, [pc, #636]	@ (800254c <lcd_init+0x8c4>)
 80022ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022d2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80022d4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80022d8:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	4b9b      	ldr	r3, [pc, #620]	@ (8002550 <lcd_init+0x8c8>)
 80022e2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80022e4:	4b99      	ldr	r3, [pc, #612]	@ (800254c <lcd_init+0x8c4>)
 80022e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022ea:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80022ec:	4b97      	ldr	r3, [pc, #604]	@ (800254c <lcd_init+0x8c4>)
 80022ee:	2280      	movs	r2, #128	@ 0x80
 80022f0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80022f2:	4b96      	ldr	r3, [pc, #600]	@ (800254c <lcd_init+0x8c4>)
 80022f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022f8:	611a      	str	r2, [r3, #16]
}
 80022fa:	bf00      	nop
                        {
                            lcd_wr_regno(0xA1);
                            lcddev.id = lcd_rd_data();
 80022fc:	f7fe fbb4 	bl	8000a68 <lcd_rd_data>
 8002300:	4603      	mov	r3, r0
 8002302:	461a      	mov	r2, r3
 8002304:	4b90      	ldr	r3, [pc, #576]	@ (8002548 <lcd_init+0x8c0>)
 8002306:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* ����0x57 */
 8002308:	f7fe fbae 	bl	8000a68 <lcd_rd_data>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	4b8d      	ldr	r3, [pc, #564]	@ (8002548 <lcd_init+0x8c0>)
 8002312:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 8002314:	4b8c      	ldr	r3, [pc, #560]	@ (8002548 <lcd_init+0x8c0>)
 8002316:	889b      	ldrh	r3, [r3, #4]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	b29a      	uxth	r2, r3
 800231c:	4b8a      	ldr	r3, [pc, #552]	@ (8002548 <lcd_init+0x8c0>)
 800231e:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* ����0x61 */
 8002320:	f7fe fba2 	bl	8000a68 <lcd_rd_data>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	4b87      	ldr	r3, [pc, #540]	@ (8002548 <lcd_init+0x8c0>)
 800232a:	889b      	ldrh	r3, [r3, #4]
 800232c:	4313      	orrs	r3, r2
 800232e:	b29a      	uxth	r2, r3
 8002330:	4b85      	ldr	r3, [pc, #532]	@ (8002548 <lcd_init+0x8c0>)
 8002332:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* SSD1963���ص�ID��5761H,Ϊ��������,����ǿ������Ϊ1963 */
 8002334:	4b84      	ldr	r3, [pc, #528]	@ (8002548 <lcd_init+0x8c0>)
 8002336:	889b      	ldrh	r3, [r3, #4]
 8002338:	f245 7261 	movw	r2, #22369	@ 0x5761
 800233c:	4293      	cmp	r3, r2
 800233e:	d103      	bne.n	8002348 <lcd_init+0x6c0>
 8002340:	4b81      	ldr	r3, [pc, #516]	@ (8002548 <lcd_init+0x8c0>)
 8002342:	f641 1263 	movw	r2, #6499	@ 0x1963
 8002346:	809a      	strh	r2, [r3, #4]
     * ����(������f_putc����), ����, �����ʼ������1, �������ε�����
     * ���� printf ��� !!!!!!!
     */
    //printf("LCD ID:%x\r\n", lcddev.id); /* ��ӡLCD ID */

    if (lcddev.id == 0X7789)
 8002348:	4b7f      	ldr	r3, [pc, #508]	@ (8002548 <lcd_init+0x8c0>)
 800234a:	889b      	ldrh	r3, [r3, #4]
 800234c:	f247 7289 	movw	r2, #30601	@ 0x7789
 8002350:	4293      	cmp	r3, r2
 8002352:	f040 82f3 	bne.w	800293c <lcd_init+0xcb4>
 8002356:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800235a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800235e:	2211      	movs	r2, #17
 8002360:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002362:	4b7a      	ldr	r3, [pc, #488]	@ (800254c <lcd_init+0x8c4>)
 8002364:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002368:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800236a:	4b78      	ldr	r3, [pc, #480]	@ (800254c <lcd_init+0x8c4>)
 800236c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002370:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002372:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002376:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b29a      	uxth	r2, r3
 800237e:	4b74      	ldr	r3, [pc, #464]	@ (8002550 <lcd_init+0x8c8>)
 8002380:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002382:	4b72      	ldr	r3, [pc, #456]	@ (800254c <lcd_init+0x8c4>)
 8002384:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002388:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800238a:	4b70      	ldr	r3, [pc, #448]	@ (800254c <lcd_init+0x8c4>)
 800238c:	2280      	movs	r2, #128	@ 0x80
 800238e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002390:	4b6e      	ldr	r3, [pc, #440]	@ (800254c <lcd_init+0x8c4>)
 8002392:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002396:	611a      	str	r2, [r3, #16]
}
 8002398:	bf00      	nop
    {
        //lcd_ex_st7789_reginit();    /* ִ��ST7789��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 800239a:	2078      	movs	r0, #120	@ 0x78
 800239c:	f005 fd30 	bl	8007e00 <HAL_Delay>
 80023a0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023a4:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80023a8:	2236      	movs	r2, #54	@ 0x36
 80023aa:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80023ac:	4b67      	ldr	r3, [pc, #412]	@ (800254c <lcd_init+0x8c4>)
 80023ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023b2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80023b4:	4b65      	ldr	r3, [pc, #404]	@ (800254c <lcd_init+0x8c4>)
 80023b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023ba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80023bc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023c0:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b61      	ldr	r3, [pc, #388]	@ (8002550 <lcd_init+0x8c8>)
 80023ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80023cc:	4b5f      	ldr	r3, [pc, #380]	@ (800254c <lcd_init+0x8c4>)
 80023ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80023d4:	4b5d      	ldr	r3, [pc, #372]	@ (800254c <lcd_init+0x8c4>)
 80023d6:	2280      	movs	r2, #128	@ 0x80
 80023d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80023da:	4b5c      	ldr	r3, [pc, #368]	@ (800254c <lcd_init+0x8c4>)
 80023dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023e0:	611a      	str	r2, [r3, #16]
}
 80023e2:	bf00      	nop

        lcd_wr_regno(0x36);
        lcd_wr_xdata(0x00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe fac9 	bl	800097c <lcd_wr_xdata>
 80023ea:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023f2:	223a      	movs	r2, #58	@ 0x3a
 80023f4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80023f6:	4b55      	ldr	r3, [pc, #340]	@ (800254c <lcd_init+0x8c4>)
 80023f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023fc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80023fe:	4b53      	ldr	r3, [pc, #332]	@ (800254c <lcd_init+0x8c4>)
 8002400:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002404:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002406:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800240a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b4f      	ldr	r3, [pc, #316]	@ (8002550 <lcd_init+0x8c8>)
 8002414:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002416:	4b4d      	ldr	r3, [pc, #308]	@ (800254c <lcd_init+0x8c4>)
 8002418:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800241c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800241e:	4b4b      	ldr	r3, [pc, #300]	@ (800254c <lcd_init+0x8c4>)
 8002420:	2280      	movs	r2, #128	@ 0x80
 8002422:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002424:	4b49      	ldr	r3, [pc, #292]	@ (800254c <lcd_init+0x8c4>)
 8002426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800242a:	611a      	str	r2, [r3, #16]
}
 800242c:	bf00      	nop


        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0X05);
 800242e:	2005      	movs	r0, #5
 8002430:	f7fe faa4 	bl	800097c <lcd_wr_xdata>
 8002434:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002438:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 800243c:	22b2      	movs	r2, #178	@ 0xb2
 800243e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002440:	4b42      	ldr	r3, [pc, #264]	@ (800254c <lcd_init+0x8c4>)
 8002442:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002446:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002448:	4b40      	ldr	r3, [pc, #256]	@ (800254c <lcd_init+0x8c4>)
 800244a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800244e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002450:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002454:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29a      	uxth	r2, r3
 800245c:	4b3c      	ldr	r3, [pc, #240]	@ (8002550 <lcd_init+0x8c8>)
 800245e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002460:	4b3a      	ldr	r3, [pc, #232]	@ (800254c <lcd_init+0x8c4>)
 8002462:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002466:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002468:	4b38      	ldr	r3, [pc, #224]	@ (800254c <lcd_init+0x8c4>)
 800246a:	2280      	movs	r2, #128	@ 0x80
 800246c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800246e:	4b37      	ldr	r3, [pc, #220]	@ (800254c <lcd_init+0x8c4>)
 8002470:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002474:	611a      	str	r2, [r3, #16]
}
 8002476:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x0C);
 8002478:	200c      	movs	r0, #12
 800247a:	f7fe fa7f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 800247e:	200c      	movs	r0, #12
 8002480:	f7fe fa7c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002484:	2000      	movs	r0, #0
 8002486:	f7fe fa79 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 800248a:	2033      	movs	r0, #51	@ 0x33
 800248c:	f7fe fa76 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002490:	2033      	movs	r0, #51	@ 0x33
 8002492:	f7fe fa73 	bl	800097c <lcd_wr_xdata>
 8002496:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800249a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800249e:	22b7      	movs	r2, #183	@ 0xb7
 80024a0:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80024a2:	4b2a      	ldr	r3, [pc, #168]	@ (800254c <lcd_init+0x8c4>)
 80024a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80024aa:	4b28      	ldr	r3, [pc, #160]	@ (800254c <lcd_init+0x8c4>)
 80024ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80024b2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024b6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b24      	ldr	r3, [pc, #144]	@ (8002550 <lcd_init+0x8c8>)
 80024c0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80024c2:	4b22      	ldr	r3, [pc, #136]	@ (800254c <lcd_init+0x8c4>)
 80024c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80024c8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80024ca:	4b20      	ldr	r3, [pc, #128]	@ (800254c <lcd_init+0x8c4>)
 80024cc:	2280      	movs	r2, #128	@ 0x80
 80024ce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80024d0:	4b1e      	ldr	r3, [pc, #120]	@ (800254c <lcd_init+0x8c4>)
 80024d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d6:	611a      	str	r2, [r3, #16]
}
 80024d8:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x35);
 80024da:	2035      	movs	r0, #53	@ 0x35
 80024dc:	f7fe fa4e 	bl	800097c <lcd_wr_xdata>
 80024e0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024e4:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 80024e8:	22bb      	movs	r2, #187	@ 0xbb
 80024ea:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80024ec:	4b17      	ldr	r3, [pc, #92]	@ (800254c <lcd_init+0x8c4>)
 80024ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024f2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80024f4:	4b15      	ldr	r3, [pc, #84]	@ (800254c <lcd_init+0x8c4>)
 80024f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024fa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80024fc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002500:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29a      	uxth	r2, r3
 8002508:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <lcd_init+0x8c8>)
 800250a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800250c:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <lcd_init+0x8c4>)
 800250e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002512:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002514:	4b0d      	ldr	r3, [pc, #52]	@ (800254c <lcd_init+0x8c4>)
 8002516:	2280      	movs	r2, #128	@ 0x80
 8002518:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800251a:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <lcd_init+0x8c4>)
 800251c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002520:	611a      	str	r2, [r3, #16]
}
 8002522:	bf00      	nop

        lcd_wr_regno(0xBB); /* vcom */
        lcd_wr_xdata(0x32); /* 30 */
 8002524:	2032      	movs	r0, #50	@ 0x32
 8002526:	f7fe fa29 	bl	800097c <lcd_wr_xdata>
 800252a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800252e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002532:	22c0      	movs	r2, #192	@ 0xc0
 8002534:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002536:	4b05      	ldr	r3, [pc, #20]	@ (800254c <lcd_init+0x8c4>)
 8002538:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800253c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800253e:	4b03      	ldr	r3, [pc, #12]	@ (800254c <lcd_init+0x8c4>)
 8002540:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002544:	611a      	str	r2, [r3, #16]
 8002546:	e005      	b.n	8002554 <lcd_init+0x8cc>
 8002548:	20000088 	.word	0x20000088
 800254c:	40011000 	.word	0x40011000
 8002550:	40010c00 	.word	0x40010c00
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002554:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002558:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b29a      	uxth	r2, r3
 8002560:	4bbf      	ldr	r3, [pc, #764]	@ (8002860 <lcd_init+0xbd8>)
 8002562:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002564:	4bbf      	ldr	r3, [pc, #764]	@ (8002864 <lcd_init+0xbdc>)
 8002566:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800256a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800256c:	4bbd      	ldr	r3, [pc, #756]	@ (8002864 <lcd_init+0xbdc>)
 800256e:	2280      	movs	r2, #128	@ 0x80
 8002570:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002572:	4bbc      	ldr	r3, [pc, #752]	@ (8002864 <lcd_init+0xbdc>)
 8002574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002578:	611a      	str	r2, [r3, #16]
}
 800257a:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x0C);
 800257c:	200c      	movs	r0, #12
 800257e:	f7fe f9fd 	bl	800097c <lcd_wr_xdata>
 8002582:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002586:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800258a:	22c2      	movs	r2, #194	@ 0xc2
 800258c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800258e:	4bb5      	ldr	r3, [pc, #724]	@ (8002864 <lcd_init+0xbdc>)
 8002590:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002594:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002596:	4bb3      	ldr	r3, [pc, #716]	@ (8002864 <lcd_init+0xbdc>)
 8002598:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800259c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800259e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025a2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4bad      	ldr	r3, [pc, #692]	@ (8002860 <lcd_init+0xbd8>)
 80025ac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80025ae:	4bad      	ldr	r3, [pc, #692]	@ (8002864 <lcd_init+0xbdc>)
 80025b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025b4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80025b6:	4bab      	ldr	r3, [pc, #684]	@ (8002864 <lcd_init+0xbdc>)
 80025b8:	2280      	movs	r2, #128	@ 0x80
 80025ba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80025bc:	4ba9      	ldr	r3, [pc, #676]	@ (8002864 <lcd_init+0xbdc>)
 80025be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025c2:	611a      	str	r2, [r3, #16]
}
 80025c4:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x01);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f7fe f9d8 	bl	800097c <lcd_wr_xdata>
 80025cc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80025d4:	22c3      	movs	r2, #195	@ 0xc3
 80025d6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80025d8:	4ba2      	ldr	r3, [pc, #648]	@ (8002864 <lcd_init+0xbdc>)
 80025da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025de:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80025e0:	4ba0      	ldr	r3, [pc, #640]	@ (8002864 <lcd_init+0xbdc>)
 80025e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025e6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80025e8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	4b9a      	ldr	r3, [pc, #616]	@ (8002860 <lcd_init+0xbd8>)
 80025f6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80025f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002864 <lcd_init+0xbdc>)
 80025fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025fe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002600:	4b98      	ldr	r3, [pc, #608]	@ (8002864 <lcd_init+0xbdc>)
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002606:	4b97      	ldr	r3, [pc, #604]	@ (8002864 <lcd_init+0xbdc>)
 8002608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800260c:	611a      	str	r2, [r3, #16]
}
 800260e:	bf00      	nop

        lcd_wr_regno(0xC3); /* vrh */
        lcd_wr_xdata(0x10); /* 17 0D */
 8002610:	2010      	movs	r0, #16
 8002612:	f7fe f9b3 	bl	800097c <lcd_wr_xdata>
 8002616:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800261a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800261e:	22c4      	movs	r2, #196	@ 0xc4
 8002620:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002622:	4b90      	ldr	r3, [pc, #576]	@ (8002864 <lcd_init+0xbdc>)
 8002624:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002628:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800262a:	4b8e      	ldr	r3, [pc, #568]	@ (8002864 <lcd_init+0xbdc>)
 800262c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002630:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002632:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002636:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	b29a      	uxth	r2, r3
 800263e:	4b88      	ldr	r3, [pc, #544]	@ (8002860 <lcd_init+0xbd8>)
 8002640:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002642:	4b88      	ldr	r3, [pc, #544]	@ (8002864 <lcd_init+0xbdc>)
 8002644:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002648:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800264a:	4b86      	ldr	r3, [pc, #536]	@ (8002864 <lcd_init+0xbdc>)
 800264c:	2280      	movs	r2, #128	@ 0x80
 800264e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002650:	4b84      	ldr	r3, [pc, #528]	@ (8002864 <lcd_init+0xbdc>)
 8002652:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002656:	611a      	str	r2, [r3, #16]
}
 8002658:	bf00      	nop

        lcd_wr_regno(0xC4); /* vdv */
        lcd_wr_xdata(0x20); /* 20 */
 800265a:	2020      	movs	r0, #32
 800265c:	f7fe f98e 	bl	800097c <lcd_wr_xdata>
 8002660:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002664:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002668:	22c6      	movs	r2, #198	@ 0xc6
 800266a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800266c:	4b7d      	ldr	r3, [pc, #500]	@ (8002864 <lcd_init+0xbdc>)
 800266e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002672:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002674:	4b7b      	ldr	r3, [pc, #492]	@ (8002864 <lcd_init+0xbdc>)
 8002676:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800267a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800267c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002680:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29a      	uxth	r2, r3
 8002688:	4b75      	ldr	r3, [pc, #468]	@ (8002860 <lcd_init+0xbd8>)
 800268a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800268c:	4b75      	ldr	r3, [pc, #468]	@ (8002864 <lcd_init+0xbdc>)
 800268e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002692:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002694:	4b73      	ldr	r3, [pc, #460]	@ (8002864 <lcd_init+0xbdc>)
 8002696:	2280      	movs	r2, #128	@ 0x80
 8002698:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800269a:	4b72      	ldr	r3, [pc, #456]	@ (8002864 <lcd_init+0xbdc>)
 800269c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026a0:	611a      	str	r2, [r3, #16]
}
 80026a2:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x0f);
 80026a4:	200f      	movs	r0, #15
 80026a6:	f7fe f969 	bl	800097c <lcd_wr_xdata>
 80026aa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026ae:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80026b2:	22d0      	movs	r2, #208	@ 0xd0
 80026b4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80026b6:	4b6b      	ldr	r3, [pc, #428]	@ (8002864 <lcd_init+0xbdc>)
 80026b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80026be:	4b69      	ldr	r3, [pc, #420]	@ (8002864 <lcd_init+0xbdc>)
 80026c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026c4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80026c6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026ca:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <lcd_init+0xbd8>)
 80026d4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80026d6:	4b63      	ldr	r3, [pc, #396]	@ (8002864 <lcd_init+0xbdc>)
 80026d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026dc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80026de:	4b61      	ldr	r3, [pc, #388]	@ (8002864 <lcd_init+0xbdc>)
 80026e0:	2280      	movs	r2, #128	@ 0x80
 80026e2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80026e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002864 <lcd_init+0xbdc>)
 80026e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ea:	611a      	str	r2, [r3, #16]
}
 80026ec:	bf00      	nop

        lcd_wr_regno(0xD0);
        lcd_wr_xdata(0xA4);
 80026ee:	20a4      	movs	r0, #164	@ 0xa4
 80026f0:	f7fe f944 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 80026f4:	20a1      	movs	r0, #161	@ 0xa1
 80026f6:	f7fe f941 	bl	800097c <lcd_wr_xdata>
 80026fa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002702:	22e0      	movs	r2, #224	@ 0xe0
 8002704:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002706:	4b57      	ldr	r3, [pc, #348]	@ (8002864 <lcd_init+0xbdc>)
 8002708:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800270c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800270e:	4b55      	ldr	r3, [pc, #340]	@ (8002864 <lcd_init+0xbdc>)
 8002710:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002714:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002716:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800271a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	b29a      	uxth	r2, r3
 8002722:	4b4f      	ldr	r3, [pc, #316]	@ (8002860 <lcd_init+0xbd8>)
 8002724:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002726:	4b4f      	ldr	r3, [pc, #316]	@ (8002864 <lcd_init+0xbdc>)
 8002728:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800272c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800272e:	4b4d      	ldr	r3, [pc, #308]	@ (8002864 <lcd_init+0xbdc>)
 8002730:	2280      	movs	r2, #128	@ 0x80
 8002732:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002734:	4b4b      	ldr	r3, [pc, #300]	@ (8002864 <lcd_init+0xbdc>)
 8002736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800273a:	611a      	str	r2, [r3, #16]
}
 800273c:	bf00      	nop

        lcd_wr_regno(0xE0); /* Set Gamma  */
        lcd_wr_xdata(0xd0);
 800273e:	20d0      	movs	r0, #208	@ 0xd0
 8002740:	f7fe f91c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002744:	2000      	movs	r0, #0
 8002746:	f7fe f919 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800274a:	2002      	movs	r0, #2
 800274c:	f7fe f916 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002750:	2007      	movs	r0, #7
 8002752:	f7fe f913 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 8002756:	200a      	movs	r0, #10
 8002758:	f7fe f910 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 800275c:	2028      	movs	r0, #40	@ 0x28
 800275e:	f7fe f90d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8002762:	2032      	movs	r0, #50	@ 0x32
 8002764:	f7fe f90a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0X44);
 8002768:	2044      	movs	r0, #68	@ 0x44
 800276a:	f7fe f907 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x42);
 800276e:	2042      	movs	r0, #66	@ 0x42
 8002770:	f7fe f904 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8002774:	2006      	movs	r0, #6
 8002776:	f7fe f901 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 800277a:	200e      	movs	r0, #14
 800277c:	f7fe f8fe 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8002780:	2012      	movs	r0, #18
 8002782:	f7fe f8fb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8002786:	2014      	movs	r0, #20
 8002788:	f7fe f8f8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 800278c:	2017      	movs	r0, #23
 800278e:	f7fe f8f5 	bl	800097c <lcd_wr_xdata>
 8002792:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002796:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800279a:	22e1      	movs	r2, #225	@ 0xe1
 800279c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800279e:	4b31      	ldr	r3, [pc, #196]	@ (8002864 <lcd_init+0xbdc>)
 80027a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027a4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80027a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002864 <lcd_init+0xbdc>)
 80027a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027ac:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80027ae:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027b2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	4b29      	ldr	r3, [pc, #164]	@ (8002860 <lcd_init+0xbd8>)
 80027bc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80027be:	4b29      	ldr	r3, [pc, #164]	@ (8002864 <lcd_init+0xbdc>)
 80027c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80027c4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80027c6:	4b27      	ldr	r3, [pc, #156]	@ (8002864 <lcd_init+0xbdc>)
 80027c8:	2280      	movs	r2, #128	@ 0x80
 80027ca:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80027cc:	4b25      	ldr	r3, [pc, #148]	@ (8002864 <lcd_init+0xbdc>)
 80027ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027d2:	611a      	str	r2, [r3, #16]
}
 80027d4:	bf00      	nop


        lcd_wr_regno(0XE1);  /* Set Gamma */
        lcd_wr_xdata(0xd0);
 80027d6:	20d0      	movs	r0, #208	@ 0xd0
 80027d8:	f7fe f8d0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7fe f8cd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80027e2:	2002      	movs	r0, #2
 80027e4:	f7fe f8ca 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 80027e8:	2007      	movs	r0, #7
 80027ea:	f7fe f8c7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 80027ee:	200a      	movs	r0, #10
 80027f0:	f7fe f8c4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80027f4:	2028      	movs	r0, #40	@ 0x28
 80027f6:	f7fe f8c1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x31);
 80027fa:	2031      	movs	r0, #49	@ 0x31
 80027fc:	f7fe f8be 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002800:	2054      	movs	r0, #84	@ 0x54
 8002802:	f7fe f8bb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x47);
 8002806:	2047      	movs	r0, #71	@ 0x47
 8002808:	f7fe f8b8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 800280c:	200e      	movs	r0, #14
 800280e:	f7fe f8b5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1c);
 8002812:	201c      	movs	r0, #28
 8002814:	f7fe f8b2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002818:	2017      	movs	r0, #23
 800281a:	f7fe f8af 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1b);
 800281e:	201b      	movs	r0, #27
 8002820:	f7fe f8ac 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1e);
 8002824:	201e      	movs	r0, #30
 8002826:	f7fe f8a9 	bl	800097c <lcd_wr_xdata>
 800282a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800282e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002832:	222a      	movs	r2, #42	@ 0x2a
 8002834:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002836:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <lcd_init+0xbdc>)
 8002838:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800283c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <lcd_init+0xbdc>)
 8002840:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002844:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002846:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800284a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	b29a      	uxth	r2, r3
 8002852:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <lcd_init+0xbd8>)
 8002854:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002856:	4b03      	ldr	r3, [pc, #12]	@ (8002864 <lcd_init+0xbdc>)
 8002858:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800285c:	611a      	str	r2, [r3, #16]
 800285e:	e003      	b.n	8002868 <lcd_init+0xbe0>
 8002860:	40010c00 	.word	0x40010c00
 8002864:	40011000 	.word	0x40011000
    LCD_WR(1);
 8002868:	4b32      	ldr	r3, [pc, #200]	@ (8002934 <lcd_init+0xcac>)
 800286a:	2280      	movs	r2, #128	@ 0x80
 800286c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800286e:	4b31      	ldr	r3, [pc, #196]	@ (8002934 <lcd_init+0xcac>)
 8002870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002874:	611a      	str	r2, [r3, #16]
}
 8002876:	bf00      	nop


        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe f87f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe f87c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002884:	2000      	movs	r0, #0
 8002886:	f7fe f879 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 800288a:	20ef      	movs	r0, #239	@ 0xef
 800288c:	f7fe f876 	bl	800097c <lcd_wr_xdata>
 8002890:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002894:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8002898:	222b      	movs	r2, #43	@ 0x2b
 800289a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800289c:	4b25      	ldr	r3, [pc, #148]	@ (8002934 <lcd_init+0xcac>)
 800289e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028a2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80028a4:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <lcd_init+0xcac>)
 80028a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028aa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80028ac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80028b0:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002938 <lcd_init+0xcb0>)
 80028ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80028bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002934 <lcd_init+0xcac>)
 80028be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80028c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002934 <lcd_init+0xcac>)
 80028c6:	2280      	movs	r2, #128	@ 0x80
 80028c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80028ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002934 <lcd_init+0xcac>)
 80028cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028d0:	611a      	str	r2, [r3, #16]
}
 80028d2:	bf00      	nop

        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7fe f851 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe f84e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80028e0:	2001      	movs	r0, #1
 80028e2:	f7fe f84b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 80028e6:	203f      	movs	r0, #63	@ 0x3f
 80028e8:	f7fe f848 	bl	800097c <lcd_wr_xdata>
 80028ec:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80028f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028f4:	2229      	movs	r2, #41	@ 0x29
 80028f6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80028f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002934 <lcd_init+0xcac>)
 80028fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028fe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002900:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <lcd_init+0xcac>)
 8002902:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002906:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002908:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800290c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <lcd_init+0xcb0>)
 8002916:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002918:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <lcd_init+0xcac>)
 800291a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800291e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002920:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <lcd_init+0xcac>)
 8002922:	2280      	movs	r2, #128	@ 0x80
 8002924:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002926:	4b03      	ldr	r3, [pc, #12]	@ (8002934 <lcd_init+0xcac>)
 8002928:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800292c:	611a      	str	r2, [r3, #16]
}
 800292e:	f004 b8f4 	b.w	8006b1a <lcd_init+0x4e92>
 8002932:	bf00      	nop
 8002934:	40011000 	.word	0x40011000
 8002938:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0X9341)
 800293c:	4bb9      	ldr	r3, [pc, #740]	@ (8002c24 <lcd_init+0xf9c>)
 800293e:	889b      	ldrh	r3, [r3, #4]
 8002940:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002944:	4293      	cmp	r3, r2
 8002946:	f040 83a1 	bne.w	800308c <lcd_init+0x1404>
 800294a:	23cf      	movs	r3, #207	@ 0xcf
 800294c:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002950:	4bb5      	ldr	r3, [pc, #724]	@ (8002c28 <lcd_init+0xfa0>)
 8002952:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002956:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002958:	4bb3      	ldr	r3, [pc, #716]	@ (8002c28 <lcd_init+0xfa0>)
 800295a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800295e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002960:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002964:	b29a      	uxth	r2, r3
 8002966:	4bb1      	ldr	r3, [pc, #708]	@ (8002c2c <lcd_init+0xfa4>)
 8002968:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800296a:	4baf      	ldr	r3, [pc, #700]	@ (8002c28 <lcd_init+0xfa0>)
 800296c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002970:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002972:	4bad      	ldr	r3, [pc, #692]	@ (8002c28 <lcd_init+0xfa0>)
 8002974:	2280      	movs	r2, #128	@ 0x80
 8002976:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002978:	4bab      	ldr	r3, [pc, #684]	@ (8002c28 <lcd_init+0xfa0>)
 800297a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800297e:	611a      	str	r2, [r3, #16]
}
 8002980:	bf00      	nop
    {
        //lcd_ex_ili9341_reginit();   /* ִ��ILI9341��ʼ�� */
        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 8002982:	2000      	movs	r0, #0
 8002984:	f7fd fffa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC1);
 8002988:	20c1      	movs	r0, #193	@ 0xc1
 800298a:	f7fd fff7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0X30);
 800298e:	2030      	movs	r0, #48	@ 0x30
 8002990:	f7fd fff4 	bl	800097c <lcd_wr_xdata>
 8002994:	23ed      	movs	r3, #237	@ 0xed
 8002996:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800299a:	4ba3      	ldr	r3, [pc, #652]	@ (8002c28 <lcd_init+0xfa0>)
 800299c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029a0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80029a2:	4ba1      	ldr	r3, [pc, #644]	@ (8002c28 <lcd_init+0xfa0>)
 80029a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029a8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80029aa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	4b9e      	ldr	r3, [pc, #632]	@ (8002c2c <lcd_init+0xfa4>)
 80029b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80029b4:	4b9c      	ldr	r3, [pc, #624]	@ (8002c28 <lcd_init+0xfa0>)
 80029b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80029bc:	4b9a      	ldr	r3, [pc, #616]	@ (8002c28 <lcd_init+0xfa0>)
 80029be:	2280      	movs	r2, #128	@ 0x80
 80029c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80029c2:	4b99      	ldr	r3, [pc, #612]	@ (8002c28 <lcd_init+0xfa0>)
 80029c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029c8:	611a      	str	r2, [r3, #16]
}
 80029ca:	bf00      	nop
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x64);
 80029cc:	2064      	movs	r0, #100	@ 0x64
 80029ce:	f7fd ffd5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 80029d2:	2003      	movs	r0, #3
 80029d4:	f7fd ffd2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0X12);
 80029d8:	2012      	movs	r0, #18
 80029da:	f7fd ffcf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0X81);
 80029de:	2081      	movs	r0, #129	@ 0x81
 80029e0:	f7fd ffcc 	bl	800097c <lcd_wr_xdata>
 80029e4:	23e8      	movs	r3, #232	@ 0xe8
 80029e6:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80029ea:	4b8f      	ldr	r3, [pc, #572]	@ (8002c28 <lcd_init+0xfa0>)
 80029ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80029f2:	4b8d      	ldr	r3, [pc, #564]	@ (8002c28 <lcd_init+0xfa0>)
 80029f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80029fa:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b8a      	ldr	r3, [pc, #552]	@ (8002c2c <lcd_init+0xfa4>)
 8002a02:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a04:	4b88      	ldr	r3, [pc, #544]	@ (8002c28 <lcd_init+0xfa0>)
 8002a06:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a0a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a0c:	4b86      	ldr	r3, [pc, #536]	@ (8002c28 <lcd_init+0xfa0>)
 8002a0e:	2280      	movs	r2, #128	@ 0x80
 8002a10:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a12:	4b85      	ldr	r3, [pc, #532]	@ (8002c28 <lcd_init+0xfa0>)
 8002a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a18:	611a      	str	r2, [r3, #16]
}
 8002a1a:	bf00      	nop
        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x85);
 8002a1c:	2085      	movs	r0, #133	@ 0x85
 8002a1e:	f7fd ffad 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8002a22:	2010      	movs	r0, #16
 8002a24:	f7fd ffaa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8002a28:	207a      	movs	r0, #122	@ 0x7a
 8002a2a:	f7fd ffa7 	bl	800097c <lcd_wr_xdata>
 8002a2e:	23cb      	movs	r3, #203	@ 0xcb
 8002a30:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a34:	4b7c      	ldr	r3, [pc, #496]	@ (8002c28 <lcd_init+0xfa0>)
 8002a36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a3a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a3c:	4b7a      	ldr	r3, [pc, #488]	@ (8002c28 <lcd_init+0xfa0>)
 8002a3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a42:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a44:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	4b78      	ldr	r3, [pc, #480]	@ (8002c2c <lcd_init+0xfa4>)
 8002a4c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a4e:	4b76      	ldr	r3, [pc, #472]	@ (8002c28 <lcd_init+0xfa0>)
 8002a50:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a54:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a56:	4b74      	ldr	r3, [pc, #464]	@ (8002c28 <lcd_init+0xfa0>)
 8002a58:	2280      	movs	r2, #128	@ 0x80
 8002a5a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a5c:	4b72      	ldr	r3, [pc, #456]	@ (8002c28 <lcd_init+0xfa0>)
 8002a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a62:	611a      	str	r2, [r3, #16]
}
 8002a64:	bf00      	nop
        lcd_wr_regno(0xCB);
        lcd_wr_xdata(0x39);
 8002a66:	2039      	movs	r0, #57	@ 0x39
 8002a68:	f7fd ff88 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8002a6c:	202c      	movs	r0, #44	@ 0x2c
 8002a6e:	f7fd ff85 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7fd ff82 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8002a78:	2034      	movs	r0, #52	@ 0x34
 8002a7a:	f7fd ff7f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f7fd ff7c 	bl	800097c <lcd_wr_xdata>
 8002a84:	23f7      	movs	r3, #247	@ 0xf7
 8002a86:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a8a:	4b67      	ldr	r3, [pc, #412]	@ (8002c28 <lcd_init+0xfa0>)
 8002a8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a90:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a92:	4b65      	ldr	r3, [pc, #404]	@ (8002c28 <lcd_init+0xfa0>)
 8002a94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a98:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a9a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	4b62      	ldr	r3, [pc, #392]	@ (8002c2c <lcd_init+0xfa4>)
 8002aa2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002aa4:	4b60      	ldr	r3, [pc, #384]	@ (8002c28 <lcd_init+0xfa0>)
 8002aa6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002aaa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002aac:	4b5e      	ldr	r3, [pc, #376]	@ (8002c28 <lcd_init+0xfa0>)
 8002aae:	2280      	movs	r2, #128	@ 0x80
 8002ab0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c28 <lcd_init+0xfa0>)
 8002ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab8:	611a      	str	r2, [r3, #16]
}
 8002aba:	bf00      	nop
        lcd_wr_regno(0xF7);
        lcd_wr_xdata(0x20);
 8002abc:	2020      	movs	r0, #32
 8002abe:	f7fd ff5d 	bl	800097c <lcd_wr_xdata>
 8002ac2:	23ea      	movs	r3, #234	@ 0xea
 8002ac4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ac8:	4b57      	ldr	r3, [pc, #348]	@ (8002c28 <lcd_init+0xfa0>)
 8002aca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ace:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ad0:	4b55      	ldr	r3, [pc, #340]	@ (8002c28 <lcd_init+0xfa0>)
 8002ad2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ad6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ad8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	4b53      	ldr	r3, [pc, #332]	@ (8002c2c <lcd_init+0xfa4>)
 8002ae0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ae2:	4b51      	ldr	r3, [pc, #324]	@ (8002c28 <lcd_init+0xfa0>)
 8002ae4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ae8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002aea:	4b4f      	ldr	r3, [pc, #316]	@ (8002c28 <lcd_init+0xfa0>)
 8002aec:	2280      	movs	r2, #128	@ 0x80
 8002aee:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002af0:	4b4d      	ldr	r3, [pc, #308]	@ (8002c28 <lcd_init+0xfa0>)
 8002af2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002af6:	611a      	str	r2, [r3, #16]
}
 8002af8:	bf00      	nop
        lcd_wr_regno(0xEA);
        lcd_wr_xdata(0x00);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fd ff3e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7fd ff3b 	bl	800097c <lcd_wr_xdata>
 8002b06:	23c0      	movs	r3, #192	@ 0xc0
 8002b08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b0c:	4b46      	ldr	r3, [pc, #280]	@ (8002c28 <lcd_init+0xfa0>)
 8002b0e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b12:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b14:	4b44      	ldr	r3, [pc, #272]	@ (8002c28 <lcd_init+0xfa0>)
 8002b16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b1a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	4b42      	ldr	r3, [pc, #264]	@ (8002c2c <lcd_init+0xfa4>)
 8002b24:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b26:	4b40      	ldr	r3, [pc, #256]	@ (8002c28 <lcd_init+0xfa0>)
 8002b28:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b2c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c28 <lcd_init+0xfa0>)
 8002b30:	2280      	movs	r2, #128	@ 0x80
 8002b32:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b34:	4b3c      	ldr	r3, [pc, #240]	@ (8002c28 <lcd_init+0xfa0>)
 8002b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b3a:	611a      	str	r2, [r3, #16]
}
 8002b3c:	bf00      	nop
        lcd_wr_regno(0xC0); /* Power control */
        lcd_wr_xdata(0x1B); /* VRH[5:0] */
 8002b3e:	201b      	movs	r0, #27
 8002b40:	f7fd ff1c 	bl	800097c <lcd_wr_xdata>
 8002b44:	23c1      	movs	r3, #193	@ 0xc1
 8002b46:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b4a:	4b37      	ldr	r3, [pc, #220]	@ (8002c28 <lcd_init+0xfa0>)
 8002b4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b50:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b52:	4b35      	ldr	r3, [pc, #212]	@ (8002c28 <lcd_init+0xfa0>)
 8002b54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b58:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b5a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	4b32      	ldr	r3, [pc, #200]	@ (8002c2c <lcd_init+0xfa4>)
 8002b62:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b64:	4b30      	ldr	r3, [pc, #192]	@ (8002c28 <lcd_init+0xfa0>)
 8002b66:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b6a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c28 <lcd_init+0xfa0>)
 8002b6e:	2280      	movs	r2, #128	@ 0x80
 8002b70:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b72:	4b2d      	ldr	r3, [pc, #180]	@ (8002c28 <lcd_init+0xfa0>)
 8002b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b78:	611a      	str	r2, [r3, #16]
}
 8002b7a:	bf00      	nop
        lcd_wr_regno(0xC1); /* Power control */
        lcd_wr_xdata(0x01); /* SAP[2:0];BT[3:0] */
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f7fd fefd 	bl	800097c <lcd_wr_xdata>
 8002b82:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b86:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b8a:	22c5      	movs	r2, #197	@ 0xc5
 8002b8c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b8e:	4b26      	ldr	r3, [pc, #152]	@ (8002c28 <lcd_init+0xfa0>)
 8002b90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b94:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b96:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <lcd_init+0xfa0>)
 8002b98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b9c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b9e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ba2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	4b20      	ldr	r3, [pc, #128]	@ (8002c2c <lcd_init+0xfa4>)
 8002bac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002bae:	4b1e      	ldr	r3, [pc, #120]	@ (8002c28 <lcd_init+0xfa0>)
 8002bb0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002bb4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c28 <lcd_init+0xfa0>)
 8002bb8:	2280      	movs	r2, #128	@ 0x80
 8002bba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <lcd_init+0xfa0>)
 8002bbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bc2:	611a      	str	r2, [r3, #16]
}
 8002bc4:	bf00      	nop
        lcd_wr_regno(0xC5); /* VCM control */
        lcd_wr_xdata(0x30); /* 3F */
 8002bc6:	2030      	movs	r0, #48	@ 0x30
 8002bc8:	f7fd fed8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x30); /* 3C */
 8002bcc:	2030      	movs	r0, #48	@ 0x30
 8002bce:	f7fd fed5 	bl	800097c <lcd_wr_xdata>
 8002bd2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bd6:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002bda:	22c7      	movs	r2, #199	@ 0xc7
 8002bdc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <lcd_init+0xfa0>)
 8002be0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002be4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002be6:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <lcd_init+0xfa0>)
 8002be8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002bee:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bf2:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <lcd_init+0xfa4>)
 8002bfc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <lcd_init+0xfa0>)
 8002c00:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c04:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c06:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <lcd_init+0xfa0>)
 8002c08:	2280      	movs	r2, #128	@ 0x80
 8002c0a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c0c:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <lcd_init+0xfa0>)
 8002c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c12:	611a      	str	r2, [r3, #16]
}
 8002c14:	bf00      	nop
        lcd_wr_regno(0xC7); /* VCM control2 */
        lcd_wr_xdata(0XB7);
 8002c16:	20b7      	movs	r0, #183	@ 0xb7
 8002c18:	f7fd feb0 	bl	800097c <lcd_wr_xdata>
 8002c1c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c20:	e006      	b.n	8002c30 <lcd_init+0xfa8>
 8002c22:	bf00      	nop
 8002c24:	20000088 	.word	0x20000088
 8002c28:	40011000 	.word	0x40011000
 8002c2c:	40010c00 	.word	0x40010c00
 8002c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c34:	2236      	movs	r2, #54	@ 0x36
 8002c36:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c38:	4bc1      	ldr	r3, [pc, #772]	@ (8002f40 <lcd_init+0x12b8>)
 8002c3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c3e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c40:	4bbf      	ldr	r3, [pc, #764]	@ (8002f40 <lcd_init+0x12b8>)
 8002c42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c46:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c48:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4bbb      	ldr	r3, [pc, #748]	@ (8002f44 <lcd_init+0x12bc>)
 8002c56:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c58:	4bb9      	ldr	r3, [pc, #740]	@ (8002f40 <lcd_init+0x12b8>)
 8002c5a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c5e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c60:	4bb7      	ldr	r3, [pc, #732]	@ (8002f40 <lcd_init+0x12b8>)
 8002c62:	2280      	movs	r2, #128	@ 0x80
 8002c64:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c66:	4bb6      	ldr	r3, [pc, #728]	@ (8002f40 <lcd_init+0x12b8>)
 8002c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c6c:	611a      	str	r2, [r3, #16]
}
 8002c6e:	bf00      	nop
        lcd_wr_regno(0x36); /*  Memory Access Control */
        lcd_wr_xdata(0x48);
 8002c70:	2048      	movs	r0, #72	@ 0x48
 8002c72:	f7fd fe83 	bl	800097c <lcd_wr_xdata>
 8002c76:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c7a:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8002c7e:	223a      	movs	r2, #58	@ 0x3a
 8002c80:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c82:	4baf      	ldr	r3, [pc, #700]	@ (8002f40 <lcd_init+0x12b8>)
 8002c84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c88:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c8a:	4bad      	ldr	r3, [pc, #692]	@ (8002f40 <lcd_init+0x12b8>)
 8002c8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c90:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c92:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c96:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	4ba9      	ldr	r3, [pc, #676]	@ (8002f44 <lcd_init+0x12bc>)
 8002ca0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ca2:	4ba7      	ldr	r3, [pc, #668]	@ (8002f40 <lcd_init+0x12b8>)
 8002ca4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ca8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002caa:	4ba5      	ldr	r3, [pc, #660]	@ (8002f40 <lcd_init+0x12b8>)
 8002cac:	2280      	movs	r2, #128	@ 0x80
 8002cae:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002cb0:	4ba3      	ldr	r3, [pc, #652]	@ (8002f40 <lcd_init+0x12b8>)
 8002cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb6:	611a      	str	r2, [r3, #16]
}
 8002cb8:	bf00      	nop
        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8002cba:	2055      	movs	r0, #85	@ 0x55
 8002cbc:	f7fd fe5e 	bl	800097c <lcd_wr_xdata>
 8002cc0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002cc8:	22b1      	movs	r2, #177	@ 0xb1
 8002cca:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ccc:	4b9c      	ldr	r3, [pc, #624]	@ (8002f40 <lcd_init+0x12b8>)
 8002cce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cd2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002cd4:	4b9a      	ldr	r3, [pc, #616]	@ (8002f40 <lcd_init+0x12b8>)
 8002cd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cda:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002cdc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	4b96      	ldr	r3, [pc, #600]	@ (8002f44 <lcd_init+0x12bc>)
 8002cea:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002cec:	4b94      	ldr	r3, [pc, #592]	@ (8002f40 <lcd_init+0x12b8>)
 8002cee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002cf2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002cf4:	4b92      	ldr	r3, [pc, #584]	@ (8002f40 <lcd_init+0x12b8>)
 8002cf6:	2280      	movs	r2, #128	@ 0x80
 8002cf8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002cfa:	4b91      	ldr	r3, [pc, #580]	@ (8002f40 <lcd_init+0x12b8>)
 8002cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d00:	611a      	str	r2, [r3, #16]
}
 8002d02:	bf00      	nop
        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x00);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7fd fe39 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1A);
 8002d0a:	201a      	movs	r0, #26
 8002d0c:	f7fd fe36 	bl	800097c <lcd_wr_xdata>
 8002d10:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d14:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002d18:	22b6      	movs	r2, #182	@ 0xb6
 8002d1a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d1c:	4b88      	ldr	r3, [pc, #544]	@ (8002f40 <lcd_init+0x12b8>)
 8002d1e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d22:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d24:	4b86      	ldr	r3, [pc, #536]	@ (8002f40 <lcd_init+0x12b8>)
 8002d26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d2a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d2c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d30:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	4b82      	ldr	r3, [pc, #520]	@ (8002f44 <lcd_init+0x12bc>)
 8002d3a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d3c:	4b80      	ldr	r3, [pc, #512]	@ (8002f40 <lcd_init+0x12b8>)
 8002d3e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d42:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d44:	4b7e      	ldr	r3, [pc, #504]	@ (8002f40 <lcd_init+0x12b8>)
 8002d46:	2280      	movs	r2, #128	@ 0x80
 8002d48:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f40 <lcd_init+0x12b8>)
 8002d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d50:	611a      	str	r2, [r3, #16]
}
 8002d52:	bf00      	nop
        lcd_wr_regno(0xB6); /*  Display Function Control */
        lcd_wr_xdata(0x0A);
 8002d54:	200a      	movs	r0, #10
 8002d56:	f7fd fe11 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8002d5a:	20a2      	movs	r0, #162	@ 0xa2
 8002d5c:	f7fd fe0e 	bl	800097c <lcd_wr_xdata>
 8002d60:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d68:	22f2      	movs	r2, #242	@ 0xf2
 8002d6a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d6c:	4b74      	ldr	r3, [pc, #464]	@ (8002f40 <lcd_init+0x12b8>)
 8002d6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d72:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d74:	4b72      	ldr	r3, [pc, #456]	@ (8002f40 <lcd_init+0x12b8>)
 8002d76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d7a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d7c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	4b6e      	ldr	r3, [pc, #440]	@ (8002f44 <lcd_init+0x12bc>)
 8002d8a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f40 <lcd_init+0x12b8>)
 8002d8e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d92:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d94:	4b6a      	ldr	r3, [pc, #424]	@ (8002f40 <lcd_init+0x12b8>)
 8002d96:	2280      	movs	r2, #128	@ 0x80
 8002d98:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d9a:	4b69      	ldr	r3, [pc, #420]	@ (8002f40 <lcd_init+0x12b8>)
 8002d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da0:	611a      	str	r2, [r3, #16]
}
 8002da2:	bf00      	nop
        lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
        lcd_wr_xdata(0x00);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7fd fde9 	bl	800097c <lcd_wr_xdata>
 8002daa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002dae:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002db2:	2226      	movs	r2, #38	@ 0x26
 8002db4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002db6:	4b62      	ldr	r3, [pc, #392]	@ (8002f40 <lcd_init+0x12b8>)
 8002db8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002dbc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002dbe:	4b60      	ldr	r3, [pc, #384]	@ (8002f40 <lcd_init+0x12b8>)
 8002dc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dc4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002dc6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002dca:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f44 <lcd_init+0x12bc>)
 8002dd4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002dd6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f40 <lcd_init+0x12b8>)
 8002dd8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ddc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002dde:	4b58      	ldr	r3, [pc, #352]	@ (8002f40 <lcd_init+0x12b8>)
 8002de0:	2280      	movs	r2, #128	@ 0x80
 8002de2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002de4:	4b56      	ldr	r3, [pc, #344]	@ (8002f40 <lcd_init+0x12b8>)
 8002de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dea:	611a      	str	r2, [r3, #16]
}
 8002dec:	bf00      	nop
        lcd_wr_regno(0x26); /* Gamma curve selected */
        lcd_wr_xdata(0x01);
 8002dee:	2001      	movs	r0, #1
 8002df0:	f7fd fdc4 	bl	800097c <lcd_wr_xdata>
 8002df4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002df8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dfc:	22e0      	movs	r2, #224	@ 0xe0
 8002dfe:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e00:	4b4f      	ldr	r3, [pc, #316]	@ (8002f40 <lcd_init+0x12b8>)
 8002e02:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e06:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e08:	4b4d      	ldr	r3, [pc, #308]	@ (8002f40 <lcd_init+0x12b8>)
 8002e0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e0e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e10:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	4b49      	ldr	r3, [pc, #292]	@ (8002f44 <lcd_init+0x12bc>)
 8002e1e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e20:	4b47      	ldr	r3, [pc, #284]	@ (8002f40 <lcd_init+0x12b8>)
 8002e22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e26:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e28:	4b45      	ldr	r3, [pc, #276]	@ (8002f40 <lcd_init+0x12b8>)
 8002e2a:	2280      	movs	r2, #128	@ 0x80
 8002e2c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e2e:	4b44      	ldr	r3, [pc, #272]	@ (8002f40 <lcd_init+0x12b8>)
 8002e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e34:	611a      	str	r2, [r3, #16]
}
 8002e36:	bf00      	nop
        lcd_wr_regno(0xE0); /* Set Gamma */
        lcd_wr_xdata(0x0F);
 8002e38:	200f      	movs	r0, #15
 8002e3a:	f7fd fd9f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8002e3e:	202a      	movs	r0, #42	@ 0x2a
 8002e40:	f7fd fd9c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002e44:	2028      	movs	r0, #40	@ 0x28
 8002e46:	f7fd fd99 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002e4a:	2008      	movs	r0, #8
 8002e4c:	f7fd fd96 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8002e50:	200e      	movs	r0, #14
 8002e52:	f7fd fd93 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002e56:	2008      	movs	r0, #8
 8002e58:	f7fd fd90 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002e5c:	2054      	movs	r0, #84	@ 0x54
 8002e5e:	f7fd fd8d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0XA9);
 8002e62:	20a9      	movs	r0, #169	@ 0xa9
 8002e64:	f7fd fd8a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8002e68:	2043      	movs	r0, #67	@ 0x43
 8002e6a:	f7fd fd87 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);
 8002e6e:	200a      	movs	r0, #10
 8002e70:	f7fd fd84 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002e74:	200f      	movs	r0, #15
 8002e76:	f7fd fd81 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7fd fd7e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fd fd7b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7fd fd78 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7fd fd75 	bl	800097c <lcd_wr_xdata>
 8002e92:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e96:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002e9a:	22e1      	movs	r2, #225	@ 0xe1
 8002e9c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e9e:	4b28      	ldr	r3, [pc, #160]	@ (8002f40 <lcd_init+0x12b8>)
 8002ea0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ea4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ea6:	4b26      	ldr	r3, [pc, #152]	@ (8002f40 <lcd_init+0x12b8>)
 8002ea8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eac:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002eae:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002eb2:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	4b22      	ldr	r3, [pc, #136]	@ (8002f44 <lcd_init+0x12bc>)
 8002ebc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ebe:	4b20      	ldr	r3, [pc, #128]	@ (8002f40 <lcd_init+0x12b8>)
 8002ec0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ec4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f40 <lcd_init+0x12b8>)
 8002ec8:	2280      	movs	r2, #128	@ 0x80
 8002eca:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8002f40 <lcd_init+0x12b8>)
 8002ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ed2:	611a      	str	r2, [r3, #16]
}
 8002ed4:	bf00      	nop
        lcd_wr_regno(0XE1); /* Set Gamma */
        lcd_wr_xdata(0x00);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7fd fd50 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x15);
 8002edc:	2015      	movs	r0, #21
 8002ede:	f7fd fd4d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002ee2:	2017      	movs	r0, #23
 8002ee4:	f7fd fd4a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002ee8:	2007      	movs	r0, #7
 8002eea:	f7fd fd47 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 8002eee:	2011      	movs	r0, #17
 8002ef0:	f7fd fd44 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8002ef4:	2006      	movs	r0, #6
 8002ef6:	f7fd fd41 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2B);
 8002efa:	202b      	movs	r0, #43	@ 0x2b
 8002efc:	f7fd fd3e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8002f00:	2056      	movs	r0, #86	@ 0x56
 8002f02:	f7fd fd3b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8002f06:	203c      	movs	r0, #60	@ 0x3c
 8002f08:	f7fd fd38 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8002f0c:	2005      	movs	r0, #5
 8002f0e:	f7fd fd35 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8002f12:	2010      	movs	r0, #16
 8002f14:	f7fd fd32 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002f18:	200f      	movs	r0, #15
 8002f1a:	f7fd fd2f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8002f1e:	203f      	movs	r0, #63	@ 0x3f
 8002f20:	f7fd fd2c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8002f24:	203f      	movs	r0, #63	@ 0x3f
 8002f26:	f7fd fd29 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002f2a:	200f      	movs	r0, #15
 8002f2c:	f7fd fd26 	bl	800097c <lcd_wr_xdata>
 8002f30:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f38:	222b      	movs	r2, #43	@ 0x2b
 8002f3a:	801a      	strh	r2, [r3, #0]
 8002f3c:	e004      	b.n	8002f48 <lcd_init+0x12c0>
 8002f3e:	bf00      	nop
 8002f40:	40011000 	.word	0x40011000
 8002f44:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f48:	4b4e      	ldr	r3, [pc, #312]	@ (8003084 <lcd_init+0x13fc>)
 8002f4a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f4e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f50:	4b4c      	ldr	r3, [pc, #304]	@ (8003084 <lcd_init+0x13fc>)
 8002f52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f56:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f58:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f5c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b48      	ldr	r3, [pc, #288]	@ (8003088 <lcd_init+0x1400>)
 8002f66:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f68:	4b46      	ldr	r3, [pc, #280]	@ (8003084 <lcd_init+0x13fc>)
 8002f6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f6e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f70:	4b44      	ldr	r3, [pc, #272]	@ (8003084 <lcd_init+0x13fc>)
 8002f72:	2280      	movs	r2, #128	@ 0x80
 8002f74:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f76:	4b43      	ldr	r3, [pc, #268]	@ (8003084 <lcd_init+0x13fc>)
 8002f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f7c:	611a      	str	r2, [r3, #16]
}
 8002f7e:	bf00      	nop
        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fd fcfb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7fd fcf8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f7fd fcf5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8002f92:	203f      	movs	r0, #63	@ 0x3f
 8002f94:	f7fd fcf2 	bl	800097c <lcd_wr_xdata>
 8002f98:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f9c:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8002fa0:	222a      	movs	r2, #42	@ 0x2a
 8002fa2:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002fa4:	4b37      	ldr	r3, [pc, #220]	@ (8003084 <lcd_init+0x13fc>)
 8002fa6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002faa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002fac:	4b35      	ldr	r3, [pc, #212]	@ (8003084 <lcd_init+0x13fc>)
 8002fae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fb2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002fb4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002fb8:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	4b31      	ldr	r3, [pc, #196]	@ (8003088 <lcd_init+0x1400>)
 8002fc2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8003084 <lcd_init+0x13fc>)
 8002fc6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002fca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003084 <lcd_init+0x13fc>)
 8002fce:	2280      	movs	r2, #128	@ 0x80
 8002fd0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8003084 <lcd_init+0x13fc>)
 8002fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fd8:	611a      	str	r2, [r3, #16]
}
 8002fda:	bf00      	nop
        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd fccd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f7fd fcca 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd fcc7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 8002fee:	20ef      	movs	r0, #239	@ 0xef
 8002ff0:	f7fd fcc4 	bl	800097c <lcd_wr_xdata>
 8002ff4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ff8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ffc:	2211      	movs	r2, #17
 8002ffe:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003000:	4b20      	ldr	r3, [pc, #128]	@ (8003084 <lcd_init+0x13fc>)
 8003002:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003006:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003008:	4b1e      	ldr	r3, [pc, #120]	@ (8003084 <lcd_init+0x13fc>)
 800300a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800300e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003010:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003014:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	b29a      	uxth	r2, r3
 800301c:	4b1a      	ldr	r3, [pc, #104]	@ (8003088 <lcd_init+0x1400>)
 800301e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003020:	4b18      	ldr	r3, [pc, #96]	@ (8003084 <lcd_init+0x13fc>)
 8003022:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003026:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003028:	4b16      	ldr	r3, [pc, #88]	@ (8003084 <lcd_init+0x13fc>)
 800302a:	2280      	movs	r2, #128	@ 0x80
 800302c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800302e:	4b15      	ldr	r3, [pc, #84]	@ (8003084 <lcd_init+0x13fc>)
 8003030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003034:	611a      	str	r2, [r3, #16]
}
 8003036:	bf00      	nop
        lcd_wr_regno(0x11); /* Exit Sleep */
        HAL_Delay(120);
 8003038:	2078      	movs	r0, #120	@ 0x78
 800303a:	f004 fee1 	bl	8007e00 <HAL_Delay>
 800303e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003042:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003046:	2229      	movs	r2, #41	@ 0x29
 8003048:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800304a:	4b0e      	ldr	r3, [pc, #56]	@ (8003084 <lcd_init+0x13fc>)
 800304c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003050:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003052:	4b0c      	ldr	r3, [pc, #48]	@ (8003084 <lcd_init+0x13fc>)
 8003054:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003058:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800305a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800305e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	b29a      	uxth	r2, r3
 8003066:	4b08      	ldr	r3, [pc, #32]	@ (8003088 <lcd_init+0x1400>)
 8003068:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <lcd_init+0x13fc>)
 800306c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003070:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003072:	4b04      	ldr	r3, [pc, #16]	@ (8003084 <lcd_init+0x13fc>)
 8003074:	2280      	movs	r2, #128	@ 0x80
 8003076:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003078:	4b02      	ldr	r3, [pc, #8]	@ (8003084 <lcd_init+0x13fc>)
 800307a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800307e:	611a      	str	r2, [r3, #16]
}
 8003080:	f003 bd4b 	b.w	8006b1a <lcd_init+0x4e92>
 8003084:	40011000 	.word	0x40011000
 8003088:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0x5310)
 800308c:	4bbe      	ldr	r3, [pc, #760]	@ (8003388 <lcd_init+0x1700>)
 800308e:	889b      	ldrh	r3, [r3, #4]
 8003090:	f245 3210 	movw	r2, #21264	@ 0x5310
 8003094:	4293      	cmp	r3, r2
 8003096:	f041 846d 	bne.w	8004974 <lcd_init+0x2cec>
 800309a:	23ed      	movs	r3, #237	@ 0xed
 800309c:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030a0:	4bba      	ldr	r3, [pc, #744]	@ (800338c <lcd_init+0x1704>)
 80030a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030a6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030a8:	4bb8      	ldr	r3, [pc, #736]	@ (800338c <lcd_init+0x1704>)
 80030aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030ae:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030b0:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	4bb6      	ldr	r3, [pc, #728]	@ (8003390 <lcd_init+0x1708>)
 80030b8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80030ba:	4bb4      	ldr	r3, [pc, #720]	@ (800338c <lcd_init+0x1704>)
 80030bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030c0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80030c2:	4bb2      	ldr	r3, [pc, #712]	@ (800338c <lcd_init+0x1704>)
 80030c4:	2280      	movs	r2, #128	@ 0x80
 80030c6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80030c8:	4bb0      	ldr	r3, [pc, #704]	@ (800338c <lcd_init+0x1704>)
 80030ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ce:	611a      	str	r2, [r3, #16]
}
 80030d0:	bf00      	nop
    {
        //lcd_ex_nt35310_reginit();   /* ִ��NT35310��ʼ�� */
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x01);
 80030d2:	2001      	movs	r0, #1
 80030d4:	f7fd fc52 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFE);
 80030d8:	20fe      	movs	r0, #254	@ 0xfe
 80030da:	f7fd fc4f 	bl	800097c <lcd_wr_xdata>
 80030de:	23ee      	movs	r3, #238	@ 0xee
 80030e0:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030e4:	4ba9      	ldr	r3, [pc, #676]	@ (800338c <lcd_init+0x1704>)
 80030e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030ea:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030ec:	4ba7      	ldr	r3, [pc, #668]	@ (800338c <lcd_init+0x1704>)
 80030ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030f2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030f4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	4ba5      	ldr	r3, [pc, #660]	@ (8003390 <lcd_init+0x1708>)
 80030fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80030fe:	4ba3      	ldr	r3, [pc, #652]	@ (800338c <lcd_init+0x1704>)
 8003100:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003104:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003106:	4ba1      	ldr	r3, [pc, #644]	@ (800338c <lcd_init+0x1704>)
 8003108:	2280      	movs	r2, #128	@ 0x80
 800310a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800310c:	4b9f      	ldr	r3, [pc, #636]	@ (800338c <lcd_init+0x1704>)
 800310e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003112:	611a      	str	r2, [r3, #16]
}
 8003114:	bf00      	nop

        lcd_wr_regno(0xEE);
        lcd_wr_xdata(0xDE);
 8003116:	20de      	movs	r0, #222	@ 0xde
 8003118:	f7fd fc30 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 800311c:	2021      	movs	r0, #33	@ 0x21
 800311e:	f7fd fc2d 	bl	800097c <lcd_wr_xdata>
 8003122:	23f1      	movs	r3, #241	@ 0xf1
 8003124:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003128:	4b98      	ldr	r3, [pc, #608]	@ (800338c <lcd_init+0x1704>)
 800312a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800312e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003130:	4b96      	ldr	r3, [pc, #600]	@ (800338c <lcd_init+0x1704>)
 8003132:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003136:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003138:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 800313c:	b29a      	uxth	r2, r3
 800313e:	4b94      	ldr	r3, [pc, #592]	@ (8003390 <lcd_init+0x1708>)
 8003140:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003142:	4b92      	ldr	r3, [pc, #584]	@ (800338c <lcd_init+0x1704>)
 8003144:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003148:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800314a:	4b90      	ldr	r3, [pc, #576]	@ (800338c <lcd_init+0x1704>)
 800314c:	2280      	movs	r2, #128	@ 0x80
 800314e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003150:	4b8e      	ldr	r3, [pc, #568]	@ (800338c <lcd_init+0x1704>)
 8003152:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003156:	611a      	str	r2, [r3, #16]
}
 8003158:	bf00      	nop

        lcd_wr_regno(0xF1);
        lcd_wr_xdata(0x01);
 800315a:	2001      	movs	r0, #1
 800315c:	f7fd fc0e 	bl	800097c <lcd_wr_xdata>
 8003160:	23df      	movs	r3, #223	@ 0xdf
 8003162:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003166:	4b89      	ldr	r3, [pc, #548]	@ (800338c <lcd_init+0x1704>)
 8003168:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800316c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800316e:	4b87      	ldr	r3, [pc, #540]	@ (800338c <lcd_init+0x1704>)
 8003170:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003174:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003176:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 800317a:	b29a      	uxth	r2, r3
 800317c:	4b84      	ldr	r3, [pc, #528]	@ (8003390 <lcd_init+0x1708>)
 800317e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003180:	4b82      	ldr	r3, [pc, #520]	@ (800338c <lcd_init+0x1704>)
 8003182:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003186:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003188:	4b80      	ldr	r3, [pc, #512]	@ (800338c <lcd_init+0x1704>)
 800318a:	2280      	movs	r2, #128	@ 0x80
 800318c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800318e:	4b7f      	ldr	r3, [pc, #508]	@ (800338c <lcd_init+0x1704>)
 8003190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003194:	611a      	str	r2, [r3, #16]
}
 8003196:	bf00      	nop
        lcd_wr_regno(0xDF);
        lcd_wr_xdata(0x10);
 8003198:	2010      	movs	r0, #16
 800319a:	f7fd fbef 	bl	800097c <lcd_wr_xdata>
 800319e:	23c4      	movs	r3, #196	@ 0xc4
 80031a0:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031a4:	4b79      	ldr	r3, [pc, #484]	@ (800338c <lcd_init+0x1704>)
 80031a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031aa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80031ac:	4b77      	ldr	r3, [pc, #476]	@ (800338c <lcd_init+0x1704>)
 80031ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031b2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80031b4:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	4b75      	ldr	r3, [pc, #468]	@ (8003390 <lcd_init+0x1708>)
 80031bc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80031be:	4b73      	ldr	r3, [pc, #460]	@ (800338c <lcd_init+0x1704>)
 80031c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80031c4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80031c6:	4b71      	ldr	r3, [pc, #452]	@ (800338c <lcd_init+0x1704>)
 80031c8:	2280      	movs	r2, #128	@ 0x80
 80031ca:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80031cc:	4b6f      	ldr	r3, [pc, #444]	@ (800338c <lcd_init+0x1704>)
 80031ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031d2:	611a      	str	r2, [r3, #16]
}
 80031d4:	bf00      	nop

        /* VCOMvoltage */
        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x8F);  /* 5f */
 80031d6:	208f      	movs	r0, #143	@ 0x8f
 80031d8:	f7fd fbd0 	bl	800097c <lcd_wr_xdata>
 80031dc:	23c6      	movs	r3, #198	@ 0xc6
 80031de:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031e2:	4b6a      	ldr	r3, [pc, #424]	@ (800338c <lcd_init+0x1704>)
 80031e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80031ea:	4b68      	ldr	r3, [pc, #416]	@ (800338c <lcd_init+0x1704>)
 80031ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80031f2:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	4b65      	ldr	r3, [pc, #404]	@ (8003390 <lcd_init+0x1708>)
 80031fa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80031fc:	4b63      	ldr	r3, [pc, #396]	@ (800338c <lcd_init+0x1704>)
 80031fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003202:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003204:	4b61      	ldr	r3, [pc, #388]	@ (800338c <lcd_init+0x1704>)
 8003206:	2280      	movs	r2, #128	@ 0x80
 8003208:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800320a:	4b60      	ldr	r3, [pc, #384]	@ (800338c <lcd_init+0x1704>)
 800320c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003210:	611a      	str	r2, [r3, #16]
}
 8003212:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x00);
 8003214:	2000      	movs	r0, #0
 8003216:	f7fd fbb1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 800321a:	20e2      	movs	r0, #226	@ 0xe2
 800321c:	f7fd fbae 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003220:	20e2      	movs	r0, #226	@ 0xe2
 8003222:	f7fd fbab 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003226:	20e2      	movs	r0, #226	@ 0xe2
 8003228:	f7fd fba8 	bl	800097c <lcd_wr_xdata>
 800322c:	23bf      	movs	r3, #191	@ 0xbf
 800322e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003232:	4b56      	ldr	r3, [pc, #344]	@ (800338c <lcd_init+0x1704>)
 8003234:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003238:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800323a:	4b54      	ldr	r3, [pc, #336]	@ (800338c <lcd_init+0x1704>)
 800323c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003240:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003242:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003246:	b29a      	uxth	r2, r3
 8003248:	4b51      	ldr	r3, [pc, #324]	@ (8003390 <lcd_init+0x1708>)
 800324a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800324c:	4b4f      	ldr	r3, [pc, #316]	@ (800338c <lcd_init+0x1704>)
 800324e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003252:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003254:	4b4d      	ldr	r3, [pc, #308]	@ (800338c <lcd_init+0x1704>)
 8003256:	2280      	movs	r2, #128	@ 0x80
 8003258:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800325a:	4b4c      	ldr	r3, [pc, #304]	@ (800338c <lcd_init+0x1704>)
 800325c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003260:	611a      	str	r2, [r3, #16]
}
 8003262:	bf00      	nop
        lcd_wr_regno(0xBF);
        lcd_wr_xdata(0xAA);
 8003264:	20aa      	movs	r0, #170	@ 0xaa
 8003266:	f7fd fb89 	bl	800097c <lcd_wr_xdata>
 800326a:	23b0      	movs	r3, #176	@ 0xb0
 800326c:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003270:	4b46      	ldr	r3, [pc, #280]	@ (800338c <lcd_init+0x1704>)
 8003272:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003276:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003278:	4b44      	ldr	r3, [pc, #272]	@ (800338c <lcd_init+0x1704>)
 800327a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800327e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003280:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8003284:	b29a      	uxth	r2, r3
 8003286:	4b42      	ldr	r3, [pc, #264]	@ (8003390 <lcd_init+0x1708>)
 8003288:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800328a:	4b40      	ldr	r3, [pc, #256]	@ (800338c <lcd_init+0x1704>)
 800328c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003290:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003292:	4b3e      	ldr	r3, [pc, #248]	@ (800338c <lcd_init+0x1704>)
 8003294:	2280      	movs	r2, #128	@ 0x80
 8003296:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003298:	4b3c      	ldr	r3, [pc, #240]	@ (800338c <lcd_init+0x1704>)
 800329a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800329e:	611a      	str	r2, [r3, #16]
}
 80032a0:	bf00      	nop

        lcd_wr_regno(0xB0);
        lcd_wr_xdata(0x0D);
 80032a2:	200d      	movs	r0, #13
 80032a4:	f7fd fb6a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032a8:	2000      	movs	r0, #0
 80032aa:	f7fd fb67 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 80032ae:	200d      	movs	r0, #13
 80032b0:	f7fd fb64 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032b4:	2000      	movs	r0, #0
 80032b6:	f7fd fb61 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 80032ba:	2011      	movs	r0, #17
 80032bc:	f7fd fb5e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032c0:	2000      	movs	r0, #0
 80032c2:	f7fd fb5b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 80032c6:	2019      	movs	r0, #25
 80032c8:	f7fd fb58 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7fd fb55 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 80032d2:	2021      	movs	r0, #33	@ 0x21
 80032d4:	f7fd fb52 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032d8:	2000      	movs	r0, #0
 80032da:	f7fd fb4f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2D);
 80032de:	202d      	movs	r0, #45	@ 0x2d
 80032e0:	f7fd fb4c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032e4:	2000      	movs	r0, #0
 80032e6:	f7fd fb49 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3D);
 80032ea:	203d      	movs	r0, #61	@ 0x3d
 80032ec:	f7fd fb46 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7fd fb43 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80032f6:	205d      	movs	r0, #93	@ 0x5d
 80032f8:	f7fd fb40 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7fd fb3d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003302:	205d      	movs	r0, #93	@ 0x5d
 8003304:	f7fd fb3a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003308:	2000      	movs	r0, #0
 800330a:	f7fd fb37 	bl	800097c <lcd_wr_xdata>
 800330e:	23b1      	movs	r3, #177	@ 0xb1
 8003310:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003314:	4b1d      	ldr	r3, [pc, #116]	@ (800338c <lcd_init+0x1704>)
 8003316:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800331a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800331c:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <lcd_init+0x1704>)
 800331e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003322:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003324:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8003328:	b29a      	uxth	r2, r3
 800332a:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <lcd_init+0x1708>)
 800332c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800332e:	4b17      	ldr	r3, [pc, #92]	@ (800338c <lcd_init+0x1704>)
 8003330:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003334:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003336:	4b15      	ldr	r3, [pc, #84]	@ (800338c <lcd_init+0x1704>)
 8003338:	2280      	movs	r2, #128	@ 0x80
 800333a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800333c:	4b13      	ldr	r3, [pc, #76]	@ (800338c <lcd_init+0x1704>)
 800333e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003342:	611a      	str	r2, [r3, #16]
}
 8003344:	bf00      	nop

        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x80);
 8003346:	2080      	movs	r0, #128	@ 0x80
 8003348:	f7fd fb18 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800334c:	2000      	movs	r0, #0
 800334e:	f7fd fb15 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003352:	208b      	movs	r0, #139	@ 0x8b
 8003354:	f7fd fb12 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003358:	2000      	movs	r0, #0
 800335a:	f7fd fb0f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 800335e:	2096      	movs	r0, #150	@ 0x96
 8003360:	f7fd fb0c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003364:	2000      	movs	r0, #0
 8003366:	f7fd fb09 	bl	800097c <lcd_wr_xdata>
 800336a:	23b2      	movs	r3, #178	@ 0xb2
 800336c:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003370:	4b06      	ldr	r3, [pc, #24]	@ (800338c <lcd_init+0x1704>)
 8003372:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003376:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003378:	4b04      	ldr	r3, [pc, #16]	@ (800338c <lcd_init+0x1704>)
 800337a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800337e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003380:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8003384:	b29a      	uxth	r2, r3
 8003386:	e005      	b.n	8003394 <lcd_init+0x170c>
 8003388:	20000088 	.word	0x20000088
 800338c:	40011000 	.word	0x40011000
 8003390:	40010c00 	.word	0x40010c00
 8003394:	4bd0      	ldr	r3, [pc, #832]	@ (80036d8 <lcd_init+0x1a50>)
 8003396:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003398:	4bd0      	ldr	r3, [pc, #832]	@ (80036dc <lcd_init+0x1a54>)
 800339a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800339e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80033a0:	4bce      	ldr	r3, [pc, #824]	@ (80036dc <lcd_init+0x1a54>)
 80033a2:	2280      	movs	r2, #128	@ 0x80
 80033a4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80033a6:	4bcd      	ldr	r3, [pc, #820]	@ (80036dc <lcd_init+0x1a54>)
 80033a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033ac:	611a      	str	r2, [r3, #16]
}
 80033ae:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x00);
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7fd fae3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7fd fae0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80033bc:	2002      	movs	r0, #2
 80033be:	f7fd fadd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7fd fada 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 80033c8:	2003      	movs	r0, #3
 80033ca:	f7fd fad7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7fd fad4 	bl	800097c <lcd_wr_xdata>
 80033d4:	23b3      	movs	r3, #179	@ 0xb3
 80033d6:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80033da:	4bc0      	ldr	r3, [pc, #768]	@ (80036dc <lcd_init+0x1a54>)
 80033dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033e0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80033e2:	4bbe      	ldr	r3, [pc, #760]	@ (80036dc <lcd_init+0x1a54>)
 80033e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033e8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80033ea:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	4bb9      	ldr	r3, [pc, #740]	@ (80036d8 <lcd_init+0x1a50>)
 80033f2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80033f4:	4bb9      	ldr	r3, [pc, #740]	@ (80036dc <lcd_init+0x1a54>)
 80033f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80033fa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80033fc:	4bb7      	ldr	r3, [pc, #732]	@ (80036dc <lcd_init+0x1a54>)
 80033fe:	2280      	movs	r2, #128	@ 0x80
 8003400:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003402:	4bb6      	ldr	r3, [pc, #728]	@ (80036dc <lcd_init+0x1a54>)
 8003404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003408:	611a      	str	r2, [r3, #16]
}
 800340a:	bf00      	nop

        lcd_wr_regno(0xB3);
        lcd_wr_xdata(0x00);
 800340c:	2000      	movs	r0, #0
 800340e:	f7fd fab5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003412:	2000      	movs	r0, #0
 8003414:	f7fd fab2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003418:	2000      	movs	r0, #0
 800341a:	f7fd faaf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800341e:	2000      	movs	r0, #0
 8003420:	f7fd faac 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003424:	2000      	movs	r0, #0
 8003426:	f7fd faa9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800342a:	2000      	movs	r0, #0
 800342c:	f7fd faa6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003430:	2000      	movs	r0, #0
 8003432:	f7fd faa3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003436:	2000      	movs	r0, #0
 8003438:	f7fd faa0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800343c:	2000      	movs	r0, #0
 800343e:	f7fd fa9d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003442:	2000      	movs	r0, #0
 8003444:	f7fd fa9a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003448:	2000      	movs	r0, #0
 800344a:	f7fd fa97 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800344e:	2000      	movs	r0, #0
 8003450:	f7fd fa94 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003454:	2000      	movs	r0, #0
 8003456:	f7fd fa91 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800345a:	2000      	movs	r0, #0
 800345c:	f7fd fa8e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003460:	2000      	movs	r0, #0
 8003462:	f7fd fa8b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003466:	2000      	movs	r0, #0
 8003468:	f7fd fa88 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800346c:	2000      	movs	r0, #0
 800346e:	f7fd fa85 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003472:	2000      	movs	r0, #0
 8003474:	f7fd fa82 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003478:	2000      	movs	r0, #0
 800347a:	f7fd fa7f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800347e:	2000      	movs	r0, #0
 8003480:	f7fd fa7c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003484:	2000      	movs	r0, #0
 8003486:	f7fd fa79 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800348a:	2000      	movs	r0, #0
 800348c:	f7fd fa76 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003490:	2000      	movs	r0, #0
 8003492:	f7fd fa73 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003496:	2000      	movs	r0, #0
 8003498:	f7fd fa70 	bl	800097c <lcd_wr_xdata>
 800349c:	23b4      	movs	r3, #180	@ 0xb4
 800349e:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80034a2:	4b8e      	ldr	r3, [pc, #568]	@ (80036dc <lcd_init+0x1a54>)
 80034a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80034aa:	4b8c      	ldr	r3, [pc, #560]	@ (80036dc <lcd_init+0x1a54>)
 80034ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80034b2:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	4b87      	ldr	r3, [pc, #540]	@ (80036d8 <lcd_init+0x1a50>)
 80034ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80034bc:	4b87      	ldr	r3, [pc, #540]	@ (80036dc <lcd_init+0x1a54>)
 80034be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80034c4:	4b85      	ldr	r3, [pc, #532]	@ (80036dc <lcd_init+0x1a54>)
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80034ca:	4b84      	ldr	r3, [pc, #528]	@ (80036dc <lcd_init+0x1a54>)
 80034cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034d0:	611a      	str	r2, [r3, #16]
}
 80034d2:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x8B);
 80034d4:	208b      	movs	r0, #139	@ 0x8b
 80034d6:	f7fd fa51 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034da:	2000      	movs	r0, #0
 80034dc:	f7fd fa4e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 80034e0:	2096      	movs	r0, #150	@ 0x96
 80034e2:	f7fd fa4b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034e6:	2000      	movs	r0, #0
 80034e8:	f7fd fa48 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 80034ec:	20a1      	movs	r0, #161	@ 0xa1
 80034ee:	f7fd fa45 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034f2:	2000      	movs	r0, #0
 80034f4:	f7fd fa42 	bl	800097c <lcd_wr_xdata>
 80034f8:	23b5      	movs	r3, #181	@ 0xb5
 80034fa:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80034fe:	4b77      	ldr	r3, [pc, #476]	@ (80036dc <lcd_init+0x1a54>)
 8003500:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003504:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003506:	4b75      	ldr	r3, [pc, #468]	@ (80036dc <lcd_init+0x1a54>)
 8003508:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800350c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800350e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8003512:	b29a      	uxth	r2, r3
 8003514:	4b70      	ldr	r3, [pc, #448]	@ (80036d8 <lcd_init+0x1a50>)
 8003516:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003518:	4b70      	ldr	r3, [pc, #448]	@ (80036dc <lcd_init+0x1a54>)
 800351a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800351e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003520:	4b6e      	ldr	r3, [pc, #440]	@ (80036dc <lcd_init+0x1a54>)
 8003522:	2280      	movs	r2, #128	@ 0x80
 8003524:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003526:	4b6d      	ldr	r3, [pc, #436]	@ (80036dc <lcd_init+0x1a54>)
 8003528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800352c:	611a      	str	r2, [r3, #16]
}
 800352e:	bf00      	nop

        lcd_wr_regno(0xB5);
        lcd_wr_xdata(0x02);
 8003530:	2002      	movs	r0, #2
 8003532:	f7fd fa23 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003536:	2000      	movs	r0, #0
 8003538:	f7fd fa20 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 800353c:	2003      	movs	r0, #3
 800353e:	f7fd fa1d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003542:	2000      	movs	r0, #0
 8003544:	f7fd fa1a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8003548:	2004      	movs	r0, #4
 800354a:	f7fd fa17 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800354e:	2000      	movs	r0, #0
 8003550:	f7fd fa14 	bl	800097c <lcd_wr_xdata>
 8003554:	23b6      	movs	r3, #182	@ 0xb6
 8003556:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800355a:	4b60      	ldr	r3, [pc, #384]	@ (80036dc <lcd_init+0x1a54>)
 800355c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003560:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003562:	4b5e      	ldr	r3, [pc, #376]	@ (80036dc <lcd_init+0x1a54>)
 8003564:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003568:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800356a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 800356e:	b29a      	uxth	r2, r3
 8003570:	4b59      	ldr	r3, [pc, #356]	@ (80036d8 <lcd_init+0x1a50>)
 8003572:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003574:	4b59      	ldr	r3, [pc, #356]	@ (80036dc <lcd_init+0x1a54>)
 8003576:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800357a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800357c:	4b57      	ldr	r3, [pc, #348]	@ (80036dc <lcd_init+0x1a54>)
 800357e:	2280      	movs	r2, #128	@ 0x80
 8003580:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003582:	4b56      	ldr	r3, [pc, #344]	@ (80036dc <lcd_init+0x1a54>)
 8003584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003588:	611a      	str	r2, [r3, #16]
}
 800358a:	bf00      	nop

        lcd_wr_regno(0xB6);
        lcd_wr_xdata(0x00);
 800358c:	2000      	movs	r0, #0
 800358e:	f7fd f9f5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003592:	2000      	movs	r0, #0
 8003594:	f7fd f9f2 	bl	800097c <lcd_wr_xdata>
 8003598:	23b7      	movs	r3, #183	@ 0xb7
 800359a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800359e:	4b4f      	ldr	r3, [pc, #316]	@ (80036dc <lcd_init+0x1a54>)
 80035a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035a4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80035a6:	4b4d      	ldr	r3, [pc, #308]	@ (80036dc <lcd_init+0x1a54>)
 80035a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035ac:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80035ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	4b48      	ldr	r3, [pc, #288]	@ (80036d8 <lcd_init+0x1a50>)
 80035b6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80035b8:	4b48      	ldr	r3, [pc, #288]	@ (80036dc <lcd_init+0x1a54>)
 80035ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80035be:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80035c0:	4b46      	ldr	r3, [pc, #280]	@ (80036dc <lcd_init+0x1a54>)
 80035c2:	2280      	movs	r2, #128	@ 0x80
 80035c4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80035c6:	4b45      	ldr	r3, [pc, #276]	@ (80036dc <lcd_init+0x1a54>)
 80035c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035cc:	611a      	str	r2, [r3, #16]
}
 80035ce:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x00);
 80035d0:	2000      	movs	r0, #0
 80035d2:	f7fd f9d3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7fd f9d0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 80035dc:	203f      	movs	r0, #63	@ 0x3f
 80035de:	f7fd f9cd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fd f9ca 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x5E);
 80035e8:	205e      	movs	r0, #94	@ 0x5e
 80035ea:	f7fd f9c7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035ee:	2000      	movs	r0, #0
 80035f0:	f7fd f9c4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 80035f4:	2064      	movs	r0, #100	@ 0x64
 80035f6:	f7fd f9c1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7fd f9be 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x8C);
 8003600:	208c      	movs	r0, #140	@ 0x8c
 8003602:	f7fd f9bb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003606:	2000      	movs	r0, #0
 8003608:	f7fd f9b8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xAC);
 800360c:	20ac      	movs	r0, #172	@ 0xac
 800360e:	f7fd f9b5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003612:	2000      	movs	r0, #0
 8003614:	f7fd f9b2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003618:	20dc      	movs	r0, #220	@ 0xdc
 800361a:	f7fd f9af 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800361e:	2000      	movs	r0, #0
 8003620:	f7fd f9ac 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x70);
 8003624:	2070      	movs	r0, #112	@ 0x70
 8003626:	f7fd f9a9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800362a:	2000      	movs	r0, #0
 800362c:	f7fd f9a6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x90);
 8003630:	2090      	movs	r0, #144	@ 0x90
 8003632:	f7fd f9a3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003636:	2000      	movs	r0, #0
 8003638:	f7fd f9a0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xEB);
 800363c:	20eb      	movs	r0, #235	@ 0xeb
 800363e:	f7fd f99d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003642:	2000      	movs	r0, #0
 8003644:	f7fd f99a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003648:	20dc      	movs	r0, #220	@ 0xdc
 800364a:	f7fd f997 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800364e:	2000      	movs	r0, #0
 8003650:	f7fd f994 	bl	800097c <lcd_wr_xdata>
 8003654:	23b8      	movs	r3, #184	@ 0xb8
 8003656:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800365a:	4b20      	ldr	r3, [pc, #128]	@ (80036dc <lcd_init+0x1a54>)
 800365c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003660:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003662:	4b1e      	ldr	r3, [pc, #120]	@ (80036dc <lcd_init+0x1a54>)
 8003664:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003668:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800366a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 800366e:	b29a      	uxth	r2, r3
 8003670:	4b19      	ldr	r3, [pc, #100]	@ (80036d8 <lcd_init+0x1a50>)
 8003672:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003674:	4b19      	ldr	r3, [pc, #100]	@ (80036dc <lcd_init+0x1a54>)
 8003676:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800367a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800367c:	4b17      	ldr	r3, [pc, #92]	@ (80036dc <lcd_init+0x1a54>)
 800367e:	2280      	movs	r2, #128	@ 0x80
 8003680:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003682:	4b16      	ldr	r3, [pc, #88]	@ (80036dc <lcd_init+0x1a54>)
 8003684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003688:	611a      	str	r2, [r3, #16]
}
 800368a:	bf00      	nop

        lcd_wr_regno(0xB8);
        lcd_wr_xdata(0x00);
 800368c:	2000      	movs	r0, #0
 800368e:	f7fd f975 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003692:	2000      	movs	r0, #0
 8003694:	f7fd f972 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003698:	2000      	movs	r0, #0
 800369a:	f7fd f96f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800369e:	2000      	movs	r0, #0
 80036a0:	f7fd f96c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036a4:	2000      	movs	r0, #0
 80036a6:	f7fd f969 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036aa:	2000      	movs	r0, #0
 80036ac:	f7fd f966 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036b0:	2000      	movs	r0, #0
 80036b2:	f7fd f963 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036b6:	2000      	movs	r0, #0
 80036b8:	f7fd f960 	bl	800097c <lcd_wr_xdata>
 80036bc:	23ba      	movs	r3, #186	@ 0xba
 80036be:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80036c2:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <lcd_init+0x1a54>)
 80036c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036c8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80036ca:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <lcd_init+0x1a54>)
 80036cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036d0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80036d2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 80036d6:	e003      	b.n	80036e0 <lcd_init+0x1a58>
 80036d8:	40010c00 	.word	0x40010c00
 80036dc:	40011000 	.word	0x40011000
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	4bd9      	ldr	r3, [pc, #868]	@ (8003a48 <lcd_init+0x1dc0>)
 80036e4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80036e6:	4bd9      	ldr	r3, [pc, #868]	@ (8003a4c <lcd_init+0x1dc4>)
 80036e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036ec:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80036ee:	4bd7      	ldr	r3, [pc, #860]	@ (8003a4c <lcd_init+0x1dc4>)
 80036f0:	2280      	movs	r2, #128	@ 0x80
 80036f2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80036f4:	4bd5      	ldr	r3, [pc, #852]	@ (8003a4c <lcd_init+0x1dc4>)
 80036f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036fa:	611a      	str	r2, [r3, #16]
}
 80036fc:	bf00      	nop

        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0x24);
 80036fe:	2024      	movs	r0, #36	@ 0x24
 8003700:	f7fd f93c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003704:	2000      	movs	r0, #0
 8003706:	f7fd f939 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800370a:	2000      	movs	r0, #0
 800370c:	f7fd f936 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003710:	2000      	movs	r0, #0
 8003712:	f7fd f933 	bl	800097c <lcd_wr_xdata>
 8003716:	23c1      	movs	r3, #193	@ 0xc1
 8003718:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800371c:	4bcb      	ldr	r3, [pc, #812]	@ (8003a4c <lcd_init+0x1dc4>)
 800371e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003722:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003724:	4bc9      	ldr	r3, [pc, #804]	@ (8003a4c <lcd_init+0x1dc4>)
 8003726:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800372a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800372c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003730:	b29a      	uxth	r2, r3
 8003732:	4bc5      	ldr	r3, [pc, #788]	@ (8003a48 <lcd_init+0x1dc0>)
 8003734:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003736:	4bc5      	ldr	r3, [pc, #788]	@ (8003a4c <lcd_init+0x1dc4>)
 8003738:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800373c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800373e:	4bc3      	ldr	r3, [pc, #780]	@ (8003a4c <lcd_init+0x1dc4>)
 8003740:	2280      	movs	r2, #128	@ 0x80
 8003742:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003744:	4bc1      	ldr	r3, [pc, #772]	@ (8003a4c <lcd_init+0x1dc4>)
 8003746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800374a:	611a      	str	r2, [r3, #16]
}
 800374c:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x20);
 800374e:	2020      	movs	r0, #32
 8003750:	f7fd f914 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003754:	2000      	movs	r0, #0
 8003756:	f7fd f911 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 800375a:	2054      	movs	r0, #84	@ 0x54
 800375c:	f7fd f90e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003760:	2000      	movs	r0, #0
 8003762:	f7fd f90b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8003766:	20ff      	movs	r0, #255	@ 0xff
 8003768:	f7fd f908 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800376c:	2000      	movs	r0, #0
 800376e:	f7fd f905 	bl	800097c <lcd_wr_xdata>
 8003772:	23c2      	movs	r3, #194	@ 0xc2
 8003774:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003778:	4bb4      	ldr	r3, [pc, #720]	@ (8003a4c <lcd_init+0x1dc4>)
 800377a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800377e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003780:	4bb2      	ldr	r3, [pc, #712]	@ (8003a4c <lcd_init+0x1dc4>)
 8003782:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003786:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003788:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800378c:	b29a      	uxth	r2, r3
 800378e:	4bae      	ldr	r3, [pc, #696]	@ (8003a48 <lcd_init+0x1dc0>)
 8003790:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003792:	4bae      	ldr	r3, [pc, #696]	@ (8003a4c <lcd_init+0x1dc4>)
 8003794:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003798:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800379a:	4bac      	ldr	r3, [pc, #688]	@ (8003a4c <lcd_init+0x1dc4>)
 800379c:	2280      	movs	r2, #128	@ 0x80
 800379e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80037a0:	4baa      	ldr	r3, [pc, #680]	@ (8003a4c <lcd_init+0x1dc4>)
 80037a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037a6:	611a      	str	r2, [r3, #16]
}
 80037a8:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x0A);
 80037aa:	200a      	movs	r0, #10
 80037ac:	f7fd f8e6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037b0:	2000      	movs	r0, #0
 80037b2:	f7fd f8e3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 80037b6:	2004      	movs	r0, #4
 80037b8:	f7fd f8e0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037bc:	2000      	movs	r0, #0
 80037be:	f7fd f8dd 	bl	800097c <lcd_wr_xdata>
 80037c2:	23c3      	movs	r3, #195	@ 0xc3
 80037c4:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80037c8:	4ba0      	ldr	r3, [pc, #640]	@ (8003a4c <lcd_init+0x1dc4>)
 80037ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037ce:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80037d0:	4b9e      	ldr	r3, [pc, #632]	@ (8003a4c <lcd_init+0x1dc4>)
 80037d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037d6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80037d8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 80037dc:	b29a      	uxth	r2, r3
 80037de:	4b9a      	ldr	r3, [pc, #616]	@ (8003a48 <lcd_init+0x1dc0>)
 80037e0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80037e2:	4b9a      	ldr	r3, [pc, #616]	@ (8003a4c <lcd_init+0x1dc4>)
 80037e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80037e8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80037ea:	4b98      	ldr	r3, [pc, #608]	@ (8003a4c <lcd_init+0x1dc4>)
 80037ec:	2280      	movs	r2, #128	@ 0x80
 80037ee:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80037f0:	4b96      	ldr	r3, [pc, #600]	@ (8003a4c <lcd_init+0x1dc4>)
 80037f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037f6:	611a      	str	r2, [r3, #16]
}
 80037f8:	bf00      	nop

        lcd_wr_regno(0xC3);
        lcd_wr_xdata(0x3C);
 80037fa:	203c      	movs	r0, #60	@ 0x3c
 80037fc:	f7fd f8be 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003800:	2000      	movs	r0, #0
 8003802:	f7fd f8bb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3A);
 8003806:	203a      	movs	r0, #58	@ 0x3a
 8003808:	f7fd f8b8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800380c:	2000      	movs	r0, #0
 800380e:	f7fd f8b5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x39);
 8003812:	2039      	movs	r0, #57	@ 0x39
 8003814:	f7fd f8b2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003818:	2000      	movs	r0, #0
 800381a:	f7fd f8af 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 800381e:	2037      	movs	r0, #55	@ 0x37
 8003820:	f7fd f8ac 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003824:	2000      	movs	r0, #0
 8003826:	f7fd f8a9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 800382a:	203c      	movs	r0, #60	@ 0x3c
 800382c:	f7fd f8a6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003830:	2000      	movs	r0, #0
 8003832:	f7fd f8a3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003836:	2036      	movs	r0, #54	@ 0x36
 8003838:	f7fd f8a0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800383c:	2000      	movs	r0, #0
 800383e:	f7fd f89d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8003842:	2032      	movs	r0, #50	@ 0x32
 8003844:	f7fd f89a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003848:	2000      	movs	r0, #0
 800384a:	f7fd f897 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 800384e:	202f      	movs	r0, #47	@ 0x2f
 8003850:	f7fd f894 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003854:	2000      	movs	r0, #0
 8003856:	f7fd f891 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 800385a:	202c      	movs	r0, #44	@ 0x2c
 800385c:	f7fd f88e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003860:	2000      	movs	r0, #0
 8003862:	f7fd f88b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8003866:	2029      	movs	r0, #41	@ 0x29
 8003868:	f7fd f888 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800386c:	2000      	movs	r0, #0
 800386e:	f7fd f885 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8003872:	2026      	movs	r0, #38	@ 0x26
 8003874:	f7fd f882 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003878:	2000      	movs	r0, #0
 800387a:	f7fd f87f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 800387e:	2024      	movs	r0, #36	@ 0x24
 8003880:	f7fd f87c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003884:	2000      	movs	r0, #0
 8003886:	f7fd f879 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 800388a:	2024      	movs	r0, #36	@ 0x24
 800388c:	f7fd f876 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003890:	2000      	movs	r0, #0
 8003892:	f7fd f873 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8003896:	2023      	movs	r0, #35	@ 0x23
 8003898:	f7fd f870 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800389c:	2000      	movs	r0, #0
 800389e:	f7fd f86d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80038a2:	203c      	movs	r0, #60	@ 0x3c
 80038a4:	f7fd f86a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7fd f867 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 80038ae:	2036      	movs	r0, #54	@ 0x36
 80038b0:	f7fd f864 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038b4:	2000      	movs	r0, #0
 80038b6:	f7fd f861 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 80038ba:	2032      	movs	r0, #50	@ 0x32
 80038bc:	f7fd f85e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038c0:	2000      	movs	r0, #0
 80038c2:	f7fd f85b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 80038c6:	202f      	movs	r0, #47	@ 0x2f
 80038c8:	f7fd f858 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038cc:	2000      	movs	r0, #0
 80038ce:	f7fd f855 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 80038d2:	202c      	movs	r0, #44	@ 0x2c
 80038d4:	f7fd f852 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038d8:	2000      	movs	r0, #0
 80038da:	f7fd f84f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80038de:	2029      	movs	r0, #41	@ 0x29
 80038e0:	f7fd f84c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7fd f849 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 80038ea:	2026      	movs	r0, #38	@ 0x26
 80038ec:	f7fd f846 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038f0:	2000      	movs	r0, #0
 80038f2:	f7fd f843 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80038f6:	2024      	movs	r0, #36	@ 0x24
 80038f8:	f7fd f840 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038fc:	2000      	movs	r0, #0
 80038fe:	f7fd f83d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003902:	2024      	movs	r0, #36	@ 0x24
 8003904:	f7fd f83a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003908:	2000      	movs	r0, #0
 800390a:	f7fd f837 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 800390e:	2023      	movs	r0, #35	@ 0x23
 8003910:	f7fd f834 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003914:	2000      	movs	r0, #0
 8003916:	f7fd f831 	bl	800097c <lcd_wr_xdata>
 800391a:	23c4      	movs	r3, #196	@ 0xc4
 800391c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003920:	4b4a      	ldr	r3, [pc, #296]	@ (8003a4c <lcd_init+0x1dc4>)
 8003922:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003926:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003928:	4b48      	ldr	r3, [pc, #288]	@ (8003a4c <lcd_init+0x1dc4>)
 800392a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800392e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003930:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8003934:	b29a      	uxth	r2, r3
 8003936:	4b44      	ldr	r3, [pc, #272]	@ (8003a48 <lcd_init+0x1dc0>)
 8003938:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800393a:	4b44      	ldr	r3, [pc, #272]	@ (8003a4c <lcd_init+0x1dc4>)
 800393c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003940:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003942:	4b42      	ldr	r3, [pc, #264]	@ (8003a4c <lcd_init+0x1dc4>)
 8003944:	2280      	movs	r2, #128	@ 0x80
 8003946:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003948:	4b40      	ldr	r3, [pc, #256]	@ (8003a4c <lcd_init+0x1dc4>)
 800394a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800394e:	611a      	str	r2, [r3, #16]
}
 8003950:	bf00      	nop

        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x62);
 8003952:	2062      	movs	r0, #98	@ 0x62
 8003954:	f7fd f812 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003958:	2000      	movs	r0, #0
 800395a:	f7fd f80f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 800395e:	2005      	movs	r0, #5
 8003960:	f7fd f80c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003964:	2000      	movs	r0, #0
 8003966:	f7fd f809 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 800396a:	2084      	movs	r0, #132	@ 0x84
 800396c:	f7fd f806 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003970:	2000      	movs	r0, #0
 8003972:	f7fd f803 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF0);
 8003976:	20f0      	movs	r0, #240	@ 0xf0
 8003978:	f7fd f800 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800397c:	2000      	movs	r0, #0
 800397e:	f7fc fffd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 8003982:	2018      	movs	r0, #24
 8003984:	f7fc fffa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003988:	2000      	movs	r0, #0
 800398a:	f7fc fff7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA4);
 800398e:	20a4      	movs	r0, #164	@ 0xa4
 8003990:	f7fc fff4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003994:	2000      	movs	r0, #0
 8003996:	f7fc fff1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 800399a:	2018      	movs	r0, #24
 800399c:	f7fc ffee 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039a0:	2000      	movs	r0, #0
 80039a2:	f7fc ffeb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 80039a6:	2050      	movs	r0, #80	@ 0x50
 80039a8:	f7fc ffe8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7fc ffe5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 80039b2:	200c      	movs	r0, #12
 80039b4:	f7fc ffe2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039b8:	2000      	movs	r0, #0
 80039ba:	f7fc ffdf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 80039be:	2017      	movs	r0, #23
 80039c0:	f7fc ffdc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039c4:	2000      	movs	r0, #0
 80039c6:	f7fc ffd9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x95);
 80039ca:	2095      	movs	r0, #149	@ 0x95
 80039cc:	f7fc ffd6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039d0:	2000      	movs	r0, #0
 80039d2:	f7fc ffd3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80039d6:	20f3      	movs	r0, #243	@ 0xf3
 80039d8:	f7fc ffd0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039dc:	2000      	movs	r0, #0
 80039de:	f7fc ffcd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE6);
 80039e2:	20e6      	movs	r0, #230	@ 0xe6
 80039e4:	f7fc ffca 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039e8:	2000      	movs	r0, #0
 80039ea:	f7fc ffc7 	bl	800097c <lcd_wr_xdata>
 80039ee:	23c5      	movs	r3, #197	@ 0xc5
 80039f0:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80039f4:	4b15      	ldr	r3, [pc, #84]	@ (8003a4c <lcd_init+0x1dc4>)
 80039f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039fa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80039fc:	4b13      	ldr	r3, [pc, #76]	@ (8003a4c <lcd_init+0x1dc4>)
 80039fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a02:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a04:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <lcd_init+0x1dc0>)
 8003a0c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a4c <lcd_init+0x1dc4>)
 8003a10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a14:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a16:	4b0d      	ldr	r3, [pc, #52]	@ (8003a4c <lcd_init+0x1dc4>)
 8003a18:	2280      	movs	r2, #128	@ 0x80
 8003a1a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <lcd_init+0x1dc4>)
 8003a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a22:	611a      	str	r2, [r3, #16]
}
 8003a24:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x32);
 8003a26:	2032      	movs	r0, #50	@ 0x32
 8003a28:	f7fc ffa8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f7fc ffa5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003a32:	2044      	movs	r0, #68	@ 0x44
 8003a34:	f7fc ffa2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a38:	2000      	movs	r0, #0
 8003a3a:	f7fc ff9f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x65);
 8003a3e:	2065      	movs	r0, #101	@ 0x65
 8003a40:	f7fc ff9c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a44:	2000      	movs	r0, #0
 8003a46:	e003      	b.n	8003a50 <lcd_init+0x1dc8>
 8003a48:	40010c00 	.word	0x40010c00
 8003a4c:	40011000 	.word	0x40011000
 8003a50:	f7fc ff94 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8003a54:	2076      	movs	r0, #118	@ 0x76
 8003a56:	f7fc ff91 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7fc ff8e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003a60:	2088      	movs	r0, #136	@ 0x88
 8003a62:	f7fc ff8b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a66:	2000      	movs	r0, #0
 8003a68:	f7fc ff88 	bl	800097c <lcd_wr_xdata>
 8003a6c:	23c6      	movs	r3, #198	@ 0xc6
 8003a6e:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a72:	4bd7      	ldr	r3, [pc, #860]	@ (8003dd0 <lcd_init+0x2148>)
 8003a74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a78:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a7a:	4bd5      	ldr	r3, [pc, #852]	@ (8003dd0 <lcd_init+0x2148>)
 8003a7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a80:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a82:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	4bd2      	ldr	r3, [pc, #840]	@ (8003dd4 <lcd_init+0x214c>)
 8003a8a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a8c:	4bd0      	ldr	r3, [pc, #832]	@ (8003dd0 <lcd_init+0x2148>)
 8003a8e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a92:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a94:	4bce      	ldr	r3, [pc, #824]	@ (8003dd0 <lcd_init+0x2148>)
 8003a96:	2280      	movs	r2, #128	@ 0x80
 8003a98:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a9a:	4bcd      	ldr	r3, [pc, #820]	@ (8003dd0 <lcd_init+0x2148>)
 8003a9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aa0:	611a      	str	r2, [r3, #16]
}
 8003aa2:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x20);
 8003aa4:	2020      	movs	r0, #32
 8003aa6:	f7fc ff69 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aaa:	2000      	movs	r0, #0
 8003aac:	f7fc ff66 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003ab0:	2017      	movs	r0, #23
 8003ab2:	f7fc ff63 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f7fc ff60 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003abc:	2001      	movs	r0, #1
 8003abe:	f7fc ff5d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	f7fc ff5a 	bl	800097c <lcd_wr_xdata>
 8003ac8:	23c7      	movs	r3, #199	@ 0xc7
 8003aca:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003ace:	4bc0      	ldr	r3, [pc, #768]	@ (8003dd0 <lcd_init+0x2148>)
 8003ad0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ad4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003ad6:	4bbe      	ldr	r3, [pc, #760]	@ (8003dd0 <lcd_init+0x2148>)
 8003ad8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003adc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003ade:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	4bbb      	ldr	r3, [pc, #748]	@ (8003dd4 <lcd_init+0x214c>)
 8003ae6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003ae8:	4bb9      	ldr	r3, [pc, #740]	@ (8003dd0 <lcd_init+0x2148>)
 8003aea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003aee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003af0:	4bb7      	ldr	r3, [pc, #732]	@ (8003dd0 <lcd_init+0x2148>)
 8003af2:	2280      	movs	r2, #128	@ 0x80
 8003af4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003af6:	4bb6      	ldr	r3, [pc, #728]	@ (8003dd0 <lcd_init+0x2148>)
 8003af8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003afc:	611a      	str	r2, [r3, #16]
}
 8003afe:	bf00      	nop

        lcd_wr_regno(0xC7);
        lcd_wr_xdata(0x00);
 8003b00:	2000      	movs	r0, #0
 8003b02:	f7fc ff3b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b06:	2000      	movs	r0, #0
 8003b08:	f7fc ff38 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f7fc ff35 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b12:	2000      	movs	r0, #0
 8003b14:	f7fc ff32 	bl	800097c <lcd_wr_xdata>
 8003b18:	23c8      	movs	r3, #200	@ 0xc8
 8003b1a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003b1e:	4bac      	ldr	r3, [pc, #688]	@ (8003dd0 <lcd_init+0x2148>)
 8003b20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b24:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003b26:	4baa      	ldr	r3, [pc, #680]	@ (8003dd0 <lcd_init+0x2148>)
 8003b28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b2c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003b2e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	4ba7      	ldr	r3, [pc, #668]	@ (8003dd4 <lcd_init+0x214c>)
 8003b36:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003b38:	4ba5      	ldr	r3, [pc, #660]	@ (8003dd0 <lcd_init+0x2148>)
 8003b3a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b3e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b40:	4ba3      	ldr	r3, [pc, #652]	@ (8003dd0 <lcd_init+0x2148>)
 8003b42:	2280      	movs	r2, #128	@ 0x80
 8003b44:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b46:	4ba2      	ldr	r3, [pc, #648]	@ (8003dd0 <lcd_init+0x2148>)
 8003b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b4c:	611a      	str	r2, [r3, #16]
}
 8003b4e:	bf00      	nop

        lcd_wr_regno(0xC8);
        lcd_wr_xdata(0x00);
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7fc ff13 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b56:	2000      	movs	r0, #0
 8003b58:	f7fc ff10 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f7fc ff0d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b62:	2000      	movs	r0, #0
 8003b64:	f7fc ff0a 	bl	800097c <lcd_wr_xdata>
 8003b68:	23c9      	movs	r3, #201	@ 0xc9
 8003b6a:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003b6e:	4b98      	ldr	r3, [pc, #608]	@ (8003dd0 <lcd_init+0x2148>)
 8003b70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b74:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003b76:	4b96      	ldr	r3, [pc, #600]	@ (8003dd0 <lcd_init+0x2148>)
 8003b78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b7c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003b7e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	4b93      	ldr	r3, [pc, #588]	@ (8003dd4 <lcd_init+0x214c>)
 8003b86:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003b88:	4b91      	ldr	r3, [pc, #580]	@ (8003dd0 <lcd_init+0x2148>)
 8003b8a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b8e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b90:	4b8f      	ldr	r3, [pc, #572]	@ (8003dd0 <lcd_init+0x2148>)
 8003b92:	2280      	movs	r2, #128	@ 0x80
 8003b94:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b96:	4b8e      	ldr	r3, [pc, #568]	@ (8003dd0 <lcd_init+0x2148>)
 8003b98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b9c:	611a      	str	r2, [r3, #16]
}
 8003b9e:	bf00      	nop

        lcd_wr_regno(0xC9);
        lcd_wr_xdata(0x00);
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f7fc feeb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	f7fc fee8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bac:	2000      	movs	r0, #0
 8003bae:	f7fc fee5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	f7fc fee2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bb8:	2000      	movs	r0, #0
 8003bba:	f7fc fedf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f7fc fedc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	f7fc fed9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f7fc fed6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f7fc fed3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f7fc fed0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f7fc fecd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003be2:	2000      	movs	r0, #0
 8003be4:	f7fc feca 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003be8:	2000      	movs	r0, #0
 8003bea:	f7fc fec7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bee:	2000      	movs	r0, #0
 8003bf0:	f7fc fec4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f7fc fec1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	f7fc febe 	bl	800097c <lcd_wr_xdata>
 8003c00:	23e0      	movs	r3, #224	@ 0xe0
 8003c02:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003c06:	4b72      	ldr	r3, [pc, #456]	@ (8003dd0 <lcd_init+0x2148>)
 8003c08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c0c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003c0e:	4b70      	ldr	r3, [pc, #448]	@ (8003dd0 <lcd_init+0x2148>)
 8003c10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c14:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003c16:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	4b6d      	ldr	r3, [pc, #436]	@ (8003dd4 <lcd_init+0x214c>)
 8003c1e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003c20:	4b6b      	ldr	r3, [pc, #428]	@ (8003dd0 <lcd_init+0x2148>)
 8003c22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c26:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003c28:	4b69      	ldr	r3, [pc, #420]	@ (8003dd0 <lcd_init+0x2148>)
 8003c2a:	2280      	movs	r2, #128	@ 0x80
 8003c2c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003c2e:	4b68      	ldr	r3, [pc, #416]	@ (8003dd0 <lcd_init+0x2148>)
 8003c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c34:	611a      	str	r2, [r3, #16]
}
 8003c36:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0x16);
 8003c38:	2016      	movs	r0, #22
 8003c3a:	f7fc fe9f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f7fc fe9c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003c44:	201c      	movs	r0, #28
 8003c46:	f7fc fe99 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7fc fe96 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003c50:	2021      	movs	r0, #33	@ 0x21
 8003c52:	f7fc fe93 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c56:	2000      	movs	r0, #0
 8003c58:	f7fc fe90 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003c5c:	2036      	movs	r0, #54	@ 0x36
 8003c5e:	f7fc fe8d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c62:	2000      	movs	r0, #0
 8003c64:	f7fc fe8a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x46);
 8003c68:	2046      	movs	r0, #70	@ 0x46
 8003c6a:	f7fc fe87 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f7fc fe84 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003c74:	2052      	movs	r0, #82	@ 0x52
 8003c76:	f7fc fe81 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7fc fe7e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003c80:	2064      	movs	r0, #100	@ 0x64
 8003c82:	f7fc fe7b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c86:	2000      	movs	r0, #0
 8003c88:	f7fc fe78 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003c8c:	207a      	movs	r0, #122	@ 0x7a
 8003c8e:	f7fc fe75 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c92:	2000      	movs	r0, #0
 8003c94:	f7fc fe72 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003c98:	208b      	movs	r0, #139	@ 0x8b
 8003c9a:	f7fc fe6f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f7fc fe6c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003ca4:	2099      	movs	r0, #153	@ 0x99
 8003ca6:	f7fc fe69 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003caa:	2000      	movs	r0, #0
 8003cac:	f7fc fe66 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003cb0:	20a8      	movs	r0, #168	@ 0xa8
 8003cb2:	f7fc fe63 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	f7fc fe60 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003cbc:	20b9      	movs	r0, #185	@ 0xb9
 8003cbe:	f7fc fe5d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	f7fc fe5a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003cc8:	20c4      	movs	r0, #196	@ 0xc4
 8003cca:	f7fc fe57 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cce:	2000      	movs	r0, #0
 8003cd0:	f7fc fe54 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003cd4:	20ca      	movs	r0, #202	@ 0xca
 8003cd6:	f7fc fe51 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cda:	2000      	movs	r0, #0
 8003cdc:	f7fc fe4e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003ce0:	20d2      	movs	r0, #210	@ 0xd2
 8003ce2:	f7fc fe4b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	f7fc fe48 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD9);
 8003cec:	20d9      	movs	r0, #217	@ 0xd9
 8003cee:	f7fc fe45 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f7fc fe42 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003cf8:	20e0      	movs	r0, #224	@ 0xe0
 8003cfa:	f7fc fe3f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cfe:	2000      	movs	r0, #0
 8003d00:	f7fc fe3c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003d04:	20f3      	movs	r0, #243	@ 0xf3
 8003d06:	f7fc fe39 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	f7fc fe36 	bl	800097c <lcd_wr_xdata>
 8003d10:	23e1      	movs	r3, #225	@ 0xe1
 8003d12:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003d16:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd0 <lcd_init+0x2148>)
 8003d18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d1c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003dd0 <lcd_init+0x2148>)
 8003d20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d24:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003d26:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	4b29      	ldr	r3, [pc, #164]	@ (8003dd4 <lcd_init+0x214c>)
 8003d2e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003d30:	4b27      	ldr	r3, [pc, #156]	@ (8003dd0 <lcd_init+0x2148>)
 8003d32:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d36:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003d38:	4b25      	ldr	r3, [pc, #148]	@ (8003dd0 <lcd_init+0x2148>)
 8003d3a:	2280      	movs	r2, #128	@ 0x80
 8003d3c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003d3e:	4b24      	ldr	r3, [pc, #144]	@ (8003dd0 <lcd_init+0x2148>)
 8003d40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d44:	611a      	str	r2, [r3, #16]
}
 8003d46:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0x16);
 8003d48:	2016      	movs	r0, #22
 8003d4a:	f7fc fe17 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f7fc fe14 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003d54:	201c      	movs	r0, #28
 8003d56:	f7fc fe11 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f7fc fe0e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8003d60:	2022      	movs	r0, #34	@ 0x22
 8003d62:	f7fc fe0b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d66:	2000      	movs	r0, #0
 8003d68:	f7fc fe08 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003d6c:	2036      	movs	r0, #54	@ 0x36
 8003d6e:	f7fc fe05 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d72:	2000      	movs	r0, #0
 8003d74:	f7fc fe02 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8003d78:	2045      	movs	r0, #69	@ 0x45
 8003d7a:	f7fc fdff 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f7fc fdfc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003d84:	2052      	movs	r0, #82	@ 0x52
 8003d86:	f7fc fdf9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f7fc fdf6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003d90:	2064      	movs	r0, #100	@ 0x64
 8003d92:	f7fc fdf3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d96:	2000      	movs	r0, #0
 8003d98:	f7fc fdf0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003d9c:	207a      	movs	r0, #122	@ 0x7a
 8003d9e:	f7fc fded 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003da2:	2000      	movs	r0, #0
 8003da4:	f7fc fdea 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003da8:	208b      	movs	r0, #139	@ 0x8b
 8003daa:	f7fc fde7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dae:	2000      	movs	r0, #0
 8003db0:	f7fc fde4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003db4:	2099      	movs	r0, #153	@ 0x99
 8003db6:	f7fc fde1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f7fc fdde 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003dc0:	20a8      	movs	r0, #168	@ 0xa8
 8003dc2:	f7fc fddb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f7fc fdd8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003dcc:	20b9      	movs	r0, #185	@ 0xb9
 8003dce:	e003      	b.n	8003dd8 <lcd_init+0x2150>
 8003dd0:	40011000 	.word	0x40011000
 8003dd4:	40010c00 	.word	0x40010c00
 8003dd8:	f7fc fdd0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7fc fdcd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003de2:	20c4      	movs	r0, #196	@ 0xc4
 8003de4:	f7fc fdca 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7fc fdc7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003dee:	20ca      	movs	r0, #202	@ 0xca
 8003df0:	f7fc fdc4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003df4:	2000      	movs	r0, #0
 8003df6:	f7fc fdc1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003dfa:	20d2      	movs	r0, #210	@ 0xd2
 8003dfc:	f7fc fdbe 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7fc fdbb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD8);
 8003e06:	20d8      	movs	r0, #216	@ 0xd8
 8003e08:	f7fc fdb8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f7fc fdb5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003e12:	20e0      	movs	r0, #224	@ 0xe0
 8003e14:	f7fc fdb2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7fc fdaf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003e1e:	20f3      	movs	r0, #243	@ 0xf3
 8003e20:	f7fc fdac 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fc fda9 	bl	800097c <lcd_wr_xdata>
 8003e2a:	23e2      	movs	r3, #226	@ 0xe2
 8003e2c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003e30:	4be3      	ldr	r3, [pc, #908]	@ (80041c0 <lcd_init+0x2538>)
 8003e32:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e36:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003e38:	4be1      	ldr	r3, [pc, #900]	@ (80041c0 <lcd_init+0x2538>)
 8003e3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e3e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003e40:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	4bdf      	ldr	r3, [pc, #892]	@ (80041c4 <lcd_init+0x253c>)
 8003e48:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003e4a:	4bdd      	ldr	r3, [pc, #884]	@ (80041c0 <lcd_init+0x2538>)
 8003e4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e50:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003e52:	4bdb      	ldr	r3, [pc, #876]	@ (80041c0 <lcd_init+0x2538>)
 8003e54:	2280      	movs	r2, #128	@ 0x80
 8003e56:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003e58:	4bd9      	ldr	r3, [pc, #868]	@ (80041c0 <lcd_init+0x2538>)
 8003e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e5e:	611a      	str	r2, [r3, #16]
}
 8003e60:	bf00      	nop

        lcd_wr_regno(0xE2);
        lcd_wr_xdata(0x05);
 8003e62:	2005      	movs	r0, #5
 8003e64:	f7fc fd8a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7fc fd87 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8003e6e:	200b      	movs	r0, #11
 8003e70:	f7fc fd84 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7fc fd81 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);
 8003e7a:	201b      	movs	r0, #27
 8003e7c:	f7fc fd7e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e80:	2000      	movs	r0, #0
 8003e82:	f7fc fd7b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8003e86:	2034      	movs	r0, #52	@ 0x34
 8003e88:	f7fc fd78 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7fc fd75 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003e92:	2044      	movs	r0, #68	@ 0x44
 8003e94:	f7fc fd72 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f7fc fd6f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x4F);
 8003e9e:	204f      	movs	r0, #79	@ 0x4f
 8003ea0:	f7fc fd6c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7fc fd69 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8003eaa:	2061      	movs	r0, #97	@ 0x61
 8003eac:	f7fc fd66 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7fc fd63 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x79);
 8003eb6:	2079      	movs	r0, #121	@ 0x79
 8003eb8:	f7fc fd60 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7fc fd5d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003ec2:	2088      	movs	r0, #136	@ 0x88
 8003ec4:	f7fc fd5a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f7fc fd57 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8003ece:	2097      	movs	r0, #151	@ 0x97
 8003ed0:	f7fc fd54 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f7fc fd51 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8003eda:	20a6      	movs	r0, #166	@ 0xa6
 8003edc:	f7fc fd4e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f7fc fd4b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8003ee6:	20b7      	movs	r0, #183	@ 0xb7
 8003ee8:	f7fc fd48 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eec:	2000      	movs	r0, #0
 8003eee:	f7fc fd45 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8003ef2:	20c2      	movs	r0, #194	@ 0xc2
 8003ef4:	f7fc fd42 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f7fc fd3f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 8003efe:	20c7      	movs	r0, #199	@ 0xc7
 8003f00:	f7fc fd3c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f7fc fd39 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 8003f0a:	20d1      	movs	r0, #209	@ 0xd1
 8003f0c:	f7fc fd36 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f10:	2000      	movs	r0, #0
 8003f12:	f7fc fd33 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD6);
 8003f16:	20d6      	movs	r0, #214	@ 0xd6
 8003f18:	f7fc fd30 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7fc fd2d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8003f22:	20dd      	movs	r0, #221	@ 0xdd
 8003f24:	f7fc fd2a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f7fc fd27 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003f2e:	20f3      	movs	r0, #243	@ 0xf3
 8003f30:	f7fc fd24 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f34:	2000      	movs	r0, #0
 8003f36:	f7fc fd21 	bl	800097c <lcd_wr_xdata>
 8003f3a:	23e3      	movs	r3, #227	@ 0xe3
 8003f3c:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003f40:	4b9f      	ldr	r3, [pc, #636]	@ (80041c0 <lcd_init+0x2538>)
 8003f42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f46:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003f48:	4b9d      	ldr	r3, [pc, #628]	@ (80041c0 <lcd_init+0x2538>)
 8003f4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f4e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003f50:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	4b9b      	ldr	r3, [pc, #620]	@ (80041c4 <lcd_init+0x253c>)
 8003f58:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003f5a:	4b99      	ldr	r3, [pc, #612]	@ (80041c0 <lcd_init+0x2538>)
 8003f5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003f60:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003f62:	4b97      	ldr	r3, [pc, #604]	@ (80041c0 <lcd_init+0x2538>)
 8003f64:	2280      	movs	r2, #128	@ 0x80
 8003f66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003f68:	4b95      	ldr	r3, [pc, #596]	@ (80041c0 <lcd_init+0x2538>)
 8003f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f6e:	611a      	str	r2, [r3, #16]
}
 8003f70:	bf00      	nop
        lcd_wr_regno(0xE3);
        lcd_wr_xdata(0x05);
 8003f72:	2005      	movs	r0, #5
 8003f74:	f7fc fd02 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7fc fcff 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA);
 8003f7e:	200a      	movs	r0, #10
 8003f80:	f7fc fcfc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f84:	2000      	movs	r0, #0
 8003f86:	f7fc fcf9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003f8a:	201c      	movs	r0, #28
 8003f8c:	f7fc fcf6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f90:	2000      	movs	r0, #0
 8003f92:	f7fc fcf3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8003f96:	2033      	movs	r0, #51	@ 0x33
 8003f98:	f7fc fcf0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f7fc fced 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003fa2:	2044      	movs	r0, #68	@ 0x44
 8003fa4:	f7fc fcea 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f7fc fce7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8003fae:	2050      	movs	r0, #80	@ 0x50
 8003fb0:	f7fc fce4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f7fc fce1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x62);
 8003fba:	2062      	movs	r0, #98	@ 0x62
 8003fbc:	f7fc fcde 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	f7fc fcdb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x78);
 8003fc6:	2078      	movs	r0, #120	@ 0x78
 8003fc8:	f7fc fcd8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f7fc fcd5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003fd2:	2088      	movs	r0, #136	@ 0x88
 8003fd4:	f7fc fcd2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f7fc fccf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8003fde:	2097      	movs	r0, #151	@ 0x97
 8003fe0:	f7fc fccc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	f7fc fcc9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8003fea:	20a6      	movs	r0, #166	@ 0xa6
 8003fec:	f7fc fcc6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f7fc fcc3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8003ff6:	20b7      	movs	r0, #183	@ 0xb7
 8003ff8:	f7fc fcc0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f7fc fcbd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8004002:	20c2      	movs	r0, #194	@ 0xc2
 8004004:	f7fc fcba 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004008:	2000      	movs	r0, #0
 800400a:	f7fc fcb7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 800400e:	20c7      	movs	r0, #199	@ 0xc7
 8004010:	f7fc fcb4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004014:	2000      	movs	r0, #0
 8004016:	f7fc fcb1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 800401a:	20d1      	movs	r0, #209	@ 0xd1
 800401c:	f7fc fcae 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004020:	2000      	movs	r0, #0
 8004022:	f7fc fcab 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD5);
 8004026:	20d5      	movs	r0, #213	@ 0xd5
 8004028:	f7fc fca8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800402c:	2000      	movs	r0, #0
 800402e:	f7fc fca5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8004032:	20dd      	movs	r0, #221	@ 0xdd
 8004034:	f7fc fca2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004038:	2000      	movs	r0, #0
 800403a:	f7fc fc9f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 800403e:	20f3      	movs	r0, #243	@ 0xf3
 8004040:	f7fc fc9c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004044:	2000      	movs	r0, #0
 8004046:	f7fc fc99 	bl	800097c <lcd_wr_xdata>
 800404a:	23e4      	movs	r3, #228	@ 0xe4
 800404c:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004050:	4b5b      	ldr	r3, [pc, #364]	@ (80041c0 <lcd_init+0x2538>)
 8004052:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004056:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004058:	4b59      	ldr	r3, [pc, #356]	@ (80041c0 <lcd_init+0x2538>)
 800405a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800405e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004060:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004064:	b29a      	uxth	r2, r3
 8004066:	4b57      	ldr	r3, [pc, #348]	@ (80041c4 <lcd_init+0x253c>)
 8004068:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800406a:	4b55      	ldr	r3, [pc, #340]	@ (80041c0 <lcd_init+0x2538>)
 800406c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004070:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004072:	4b53      	ldr	r3, [pc, #332]	@ (80041c0 <lcd_init+0x2538>)
 8004074:	2280      	movs	r2, #128	@ 0x80
 8004076:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004078:	4b51      	ldr	r3, [pc, #324]	@ (80041c0 <lcd_init+0x2538>)
 800407a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800407e:	611a      	str	r2, [r3, #16]
}
 8004080:	bf00      	nop

        lcd_wr_regno(0xE4);
        lcd_wr_xdata(0x01);
 8004082:	2001      	movs	r0, #1
 8004084:	f7fc fc7a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004088:	2000      	movs	r0, #0
 800408a:	f7fc fc77 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800408e:	2001      	movs	r0, #1
 8004090:	f7fc fc74 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004094:	2000      	movs	r0, #0
 8004096:	f7fc fc71 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800409a:	2002      	movs	r0, #2
 800409c:	f7fc fc6e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7fc fc6b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 80040a6:	202a      	movs	r0, #42	@ 0x2a
 80040a8:	f7fc fc68 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7fc fc65 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80040b2:	203c      	movs	r0, #60	@ 0x3c
 80040b4:	f7fc fc62 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040b8:	2000      	movs	r0, #0
 80040ba:	f7fc fc5f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 80040be:	204b      	movs	r0, #75	@ 0x4b
 80040c0:	f7fc fc5c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7fc fc59 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80040ca:	205d      	movs	r0, #93	@ 0x5d
 80040cc:	f7fc fc56 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040d0:	2000      	movs	r0, #0
 80040d2:	f7fc fc53 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 80040d6:	2074      	movs	r0, #116	@ 0x74
 80040d8:	f7fc fc50 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040dc:	2000      	movs	r0, #0
 80040de:	f7fc fc4d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 80040e2:	2084      	movs	r0, #132	@ 0x84
 80040e4:	f7fc fc4a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040e8:	2000      	movs	r0, #0
 80040ea:	f7fc fc47 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 80040ee:	2093      	movs	r0, #147	@ 0x93
 80040f0:	f7fc fc44 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7fc fc41 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 80040fa:	20a2      	movs	r0, #162	@ 0xa2
 80040fc:	f7fc fc3e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004100:	2000      	movs	r0, #0
 8004102:	f7fc fc3b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8004106:	20b3      	movs	r0, #179	@ 0xb3
 8004108:	f7fc fc38 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800410c:	2000      	movs	r0, #0
 800410e:	f7fc fc35 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 8004112:	20be      	movs	r0, #190	@ 0xbe
 8004114:	f7fc fc32 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004118:	2000      	movs	r0, #0
 800411a:	f7fc fc2f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 800411e:	20c4      	movs	r0, #196	@ 0xc4
 8004120:	f7fc fc2c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004124:	2000      	movs	r0, #0
 8004126:	f7fc fc29 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 800412a:	20cd      	movs	r0, #205	@ 0xcd
 800412c:	f7fc fc26 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004130:	2000      	movs	r0, #0
 8004132:	f7fc fc23 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 8004136:	20d3      	movs	r0, #211	@ 0xd3
 8004138:	f7fc fc20 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800413c:	2000      	movs	r0, #0
 800413e:	f7fc fc1d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8004142:	20dd      	movs	r0, #221	@ 0xdd
 8004144:	f7fc fc1a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004148:	2000      	movs	r0, #0
 800414a:	f7fc fc17 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 800414e:	20f3      	movs	r0, #243	@ 0xf3
 8004150:	f7fc fc14 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004154:	2000      	movs	r0, #0
 8004156:	f7fc fc11 	bl	800097c <lcd_wr_xdata>
 800415a:	23e5      	movs	r3, #229	@ 0xe5
 800415c:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004160:	4b17      	ldr	r3, [pc, #92]	@ (80041c0 <lcd_init+0x2538>)
 8004162:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004166:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004168:	4b15      	ldr	r3, [pc, #84]	@ (80041c0 <lcd_init+0x2538>)
 800416a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800416e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004170:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004174:	b29a      	uxth	r2, r3
 8004176:	4b13      	ldr	r3, [pc, #76]	@ (80041c4 <lcd_init+0x253c>)
 8004178:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800417a:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <lcd_init+0x2538>)
 800417c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004180:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004182:	4b0f      	ldr	r3, [pc, #60]	@ (80041c0 <lcd_init+0x2538>)
 8004184:	2280      	movs	r2, #128	@ 0x80
 8004186:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004188:	4b0d      	ldr	r3, [pc, #52]	@ (80041c0 <lcd_init+0x2538>)
 800418a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800418e:	611a      	str	r2, [r3, #16]
}
 8004190:	bf00      	nop
        lcd_wr_regno(0xE5);
        lcd_wr_xdata(0x00);
 8004192:	2000      	movs	r0, #0
 8004194:	f7fc fbf2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004198:	2000      	movs	r0, #0
 800419a:	f7fc fbef 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800419e:	2000      	movs	r0, #0
 80041a0:	f7fc fbec 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041a4:	2000      	movs	r0, #0
 80041a6:	f7fc fbe9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80041aa:	2002      	movs	r0, #2
 80041ac:	f7fc fbe6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041b0:	2000      	movs	r0, #0
 80041b2:	f7fc fbe3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80041b6:	2029      	movs	r0, #41	@ 0x29
 80041b8:	f7fc fbe0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041bc:	2000      	movs	r0, #0
 80041be:	e003      	b.n	80041c8 <lcd_init+0x2540>
 80041c0:	40011000 	.word	0x40011000
 80041c4:	40010c00 	.word	0x40010c00
 80041c8:	f7fc fbd8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80041cc:	203c      	movs	r0, #60	@ 0x3c
 80041ce:	f7fc fbd5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7fc fbd2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 80041d8:	204b      	movs	r0, #75	@ 0x4b
 80041da:	f7fc fbcf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041de:	2000      	movs	r0, #0
 80041e0:	f7fc fbcc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80041e4:	205d      	movs	r0, #93	@ 0x5d
 80041e6:	f7fc fbc9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7fc fbc6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 80041f0:	2074      	movs	r0, #116	@ 0x74
 80041f2:	f7fc fbc3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041f6:	2000      	movs	r0, #0
 80041f8:	f7fc fbc0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 80041fc:	2084      	movs	r0, #132	@ 0x84
 80041fe:	f7fc fbbd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004202:	2000      	movs	r0, #0
 8004204:	f7fc fbba 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 8004208:	2093      	movs	r0, #147	@ 0x93
 800420a:	f7fc fbb7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800420e:	2000      	movs	r0, #0
 8004210:	f7fc fbb4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004214:	20a2      	movs	r0, #162	@ 0xa2
 8004216:	f7fc fbb1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800421a:	2000      	movs	r0, #0
 800421c:	f7fc fbae 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8004220:	20b3      	movs	r0, #179	@ 0xb3
 8004222:	f7fc fbab 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004226:	2000      	movs	r0, #0
 8004228:	f7fc fba8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 800422c:	20be      	movs	r0, #190	@ 0xbe
 800422e:	f7fc fba5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004232:	2000      	movs	r0, #0
 8004234:	f7fc fba2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8004238:	20c4      	movs	r0, #196	@ 0xc4
 800423a:	f7fc fb9f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800423e:	2000      	movs	r0, #0
 8004240:	f7fc fb9c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 8004244:	20cd      	movs	r0, #205	@ 0xcd
 8004246:	f7fc fb99 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800424a:	2000      	movs	r0, #0
 800424c:	f7fc fb96 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 8004250:	20d3      	movs	r0, #211	@ 0xd3
 8004252:	f7fc fb93 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004256:	2000      	movs	r0, #0
 8004258:	f7fc fb90 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 800425c:	20dc      	movs	r0, #220	@ 0xdc
 800425e:	f7fc fb8d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004262:	2000      	movs	r0, #0
 8004264:	f7fc fb8a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8004268:	20f3      	movs	r0, #243	@ 0xf3
 800426a:	f7fc fb87 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800426e:	2000      	movs	r0, #0
 8004270:	f7fc fb84 	bl	800097c <lcd_wr_xdata>
 8004274:	23e6      	movs	r3, #230	@ 0xe6
 8004276:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800427a:	4bde      	ldr	r3, [pc, #888]	@ (80045f4 <lcd_init+0x296c>)
 800427c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004280:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004282:	4bdc      	ldr	r3, [pc, #880]	@ (80045f4 <lcd_init+0x296c>)
 8004284:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004288:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800428a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800428e:	b29a      	uxth	r2, r3
 8004290:	4bd9      	ldr	r3, [pc, #868]	@ (80045f8 <lcd_init+0x2970>)
 8004292:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004294:	4bd7      	ldr	r3, [pc, #860]	@ (80045f4 <lcd_init+0x296c>)
 8004296:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800429a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800429c:	4bd5      	ldr	r3, [pc, #852]	@ (80045f4 <lcd_init+0x296c>)
 800429e:	2280      	movs	r2, #128	@ 0x80
 80042a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80042a2:	4bd4      	ldr	r3, [pc, #848]	@ (80045f4 <lcd_init+0x296c>)
 80042a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042a8:	611a      	str	r2, [r3, #16]
}
 80042aa:	bf00      	nop

        lcd_wr_regno(0xE6);
        lcd_wr_xdata(0x11);
 80042ac:	2011      	movs	r0, #17
 80042ae:	f7fc fb65 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042b2:	2000      	movs	r0, #0
 80042b4:	f7fc fb62 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 80042b8:	2034      	movs	r0, #52	@ 0x34
 80042ba:	f7fc fb5f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042be:	2000      	movs	r0, #0
 80042c0:	f7fc fb5c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 80042c4:	2056      	movs	r0, #86	@ 0x56
 80042c6:	f7fc fb59 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042ca:	2000      	movs	r0, #0
 80042cc:	f7fc fb56 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 80042d0:	2076      	movs	r0, #118	@ 0x76
 80042d2:	f7fc fb53 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f7fc fb50 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 80042dc:	2077      	movs	r0, #119	@ 0x77
 80042de:	f7fc fb4d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042e2:	2000      	movs	r0, #0
 80042e4:	f7fc fb4a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80042e8:	2066      	movs	r0, #102	@ 0x66
 80042ea:	f7fc fb47 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042ee:	2000      	movs	r0, #0
 80042f0:	f7fc fb44 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80042f4:	2088      	movs	r0, #136	@ 0x88
 80042f6:	f7fc fb41 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042fa:	2000      	movs	r0, #0
 80042fc:	f7fc fb3e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004300:	2099      	movs	r0, #153	@ 0x99
 8004302:	f7fc fb3b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004306:	2000      	movs	r0, #0
 8004308:	f7fc fb38 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 800430c:	20bb      	movs	r0, #187	@ 0xbb
 800430e:	f7fc fb35 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004312:	2000      	movs	r0, #0
 8004314:	f7fc fb32 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004318:	2099      	movs	r0, #153	@ 0x99
 800431a:	f7fc fb2f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800431e:	2000      	movs	r0, #0
 8004320:	f7fc fb2c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004324:	2066      	movs	r0, #102	@ 0x66
 8004326:	f7fc fb29 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800432a:	2000      	movs	r0, #0
 800432c:	f7fc fb26 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004330:	2055      	movs	r0, #85	@ 0x55
 8004332:	f7fc fb23 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004336:	2000      	movs	r0, #0
 8004338:	f7fc fb20 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 800433c:	2055      	movs	r0, #85	@ 0x55
 800433e:	f7fc fb1d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004342:	2000      	movs	r0, #0
 8004344:	f7fc fb1a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004348:	2045      	movs	r0, #69	@ 0x45
 800434a:	f7fc fb17 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800434e:	2000      	movs	r0, #0
 8004350:	f7fc fb14 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8004354:	2043      	movs	r0, #67	@ 0x43
 8004356:	f7fc fb11 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800435a:	2000      	movs	r0, #0
 800435c:	f7fc fb0e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004360:	2044      	movs	r0, #68	@ 0x44
 8004362:	f7fc fb0b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004366:	2000      	movs	r0, #0
 8004368:	f7fc fb08 	bl	800097c <lcd_wr_xdata>
 800436c:	23e7      	movs	r3, #231	@ 0xe7
 800436e:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004372:	4ba0      	ldr	r3, [pc, #640]	@ (80045f4 <lcd_init+0x296c>)
 8004374:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004378:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800437a:	4b9e      	ldr	r3, [pc, #632]	@ (80045f4 <lcd_init+0x296c>)
 800437c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004380:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004382:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8004386:	b29a      	uxth	r2, r3
 8004388:	4b9b      	ldr	r3, [pc, #620]	@ (80045f8 <lcd_init+0x2970>)
 800438a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800438c:	4b99      	ldr	r3, [pc, #612]	@ (80045f4 <lcd_init+0x296c>)
 800438e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004392:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004394:	4b97      	ldr	r3, [pc, #604]	@ (80045f4 <lcd_init+0x296c>)
 8004396:	2280      	movs	r2, #128	@ 0x80
 8004398:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800439a:	4b96      	ldr	r3, [pc, #600]	@ (80045f4 <lcd_init+0x296c>)
 800439c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043a0:	611a      	str	r2, [r3, #16]
}
 80043a2:	bf00      	nop

        lcd_wr_regno(0xE7);
        lcd_wr_xdata(0x32);
 80043a4:	2032      	movs	r0, #50	@ 0x32
 80043a6:	f7fc fae9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043aa:	2000      	movs	r0, #0
 80043ac:	f7fc fae6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80043b0:	2055      	movs	r0, #85	@ 0x55
 80043b2:	f7fc fae3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043b6:	2000      	movs	r0, #0
 80043b8:	f7fc fae0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 80043bc:	2076      	movs	r0, #118	@ 0x76
 80043be:	f7fc fadd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043c2:	2000      	movs	r0, #0
 80043c4:	f7fc fada 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80043c8:	2066      	movs	r0, #102	@ 0x66
 80043ca:	f7fc fad7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043ce:	2000      	movs	r0, #0
 80043d0:	f7fc fad4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80043d4:	2067      	movs	r0, #103	@ 0x67
 80043d6:	f7fc fad1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043da:	2000      	movs	r0, #0
 80043dc:	f7fc face 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80043e0:	2067      	movs	r0, #103	@ 0x67
 80043e2:	f7fc facb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043e6:	2000      	movs	r0, #0
 80043e8:	f7fc fac8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 80043ec:	2087      	movs	r0, #135	@ 0x87
 80043ee:	f7fc fac5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043f2:	2000      	movs	r0, #0
 80043f4:	f7fc fac2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80043f8:	2099      	movs	r0, #153	@ 0x99
 80043fa:	f7fc fabf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043fe:	2000      	movs	r0, #0
 8004400:	f7fc fabc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 8004404:	20bb      	movs	r0, #187	@ 0xbb
 8004406:	f7fc fab9 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800440a:	2000      	movs	r0, #0
 800440c:	f7fc fab6 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004410:	2099      	movs	r0, #153	@ 0x99
 8004412:	f7fc fab3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004416:	2000      	movs	r0, #0
 8004418:	f7fc fab0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800441c:	2077      	movs	r0, #119	@ 0x77
 800441e:	f7fc faad 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004422:	2000      	movs	r0, #0
 8004424:	f7fc faaa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004428:	2044      	movs	r0, #68	@ 0x44
 800442a:	f7fc faa7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800442e:	2000      	movs	r0, #0
 8004430:	f7fc faa4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8004434:	2056      	movs	r0, #86	@ 0x56
 8004436:	f7fc faa1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800443a:	2000      	movs	r0, #0
 800443c:	f7fc fa9e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8004440:	2023      	movs	r0, #35	@ 0x23
 8004442:	f7fc fa9b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004446:	2000      	movs	r0, #0
 8004448:	f7fc fa98 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 800444c:	2033      	movs	r0, #51	@ 0x33
 800444e:	f7fc fa95 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004452:	2000      	movs	r0, #0
 8004454:	f7fc fa92 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004458:	2045      	movs	r0, #69	@ 0x45
 800445a:	f7fc fa8f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800445e:	2000      	movs	r0, #0
 8004460:	f7fc fa8c 	bl	800097c <lcd_wr_xdata>
 8004464:	23e8      	movs	r3, #232	@ 0xe8
 8004466:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800446a:	4b62      	ldr	r3, [pc, #392]	@ (80045f4 <lcd_init+0x296c>)
 800446c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004470:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004472:	4b60      	ldr	r3, [pc, #384]	@ (80045f4 <lcd_init+0x296c>)
 8004474:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004478:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800447a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800447e:	b29a      	uxth	r2, r3
 8004480:	4b5d      	ldr	r3, [pc, #372]	@ (80045f8 <lcd_init+0x2970>)
 8004482:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004484:	4b5b      	ldr	r3, [pc, #364]	@ (80045f4 <lcd_init+0x296c>)
 8004486:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800448a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800448c:	4b59      	ldr	r3, [pc, #356]	@ (80045f4 <lcd_init+0x296c>)
 800448e:	2280      	movs	r2, #128	@ 0x80
 8004490:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004492:	4b58      	ldr	r3, [pc, #352]	@ (80045f4 <lcd_init+0x296c>)
 8004494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004498:	611a      	str	r2, [r3, #16]
}
 800449a:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x00);
 800449c:	2000      	movs	r0, #0
 800449e:	f7fc fa6d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044a2:	2000      	movs	r0, #0
 80044a4:	f7fc fa6a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80044a8:	2099      	movs	r0, #153	@ 0x99
 80044aa:	f7fc fa67 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ae:	2000      	movs	r0, #0
 80044b0:	f7fc fa64 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 80044b4:	2087      	movs	r0, #135	@ 0x87
 80044b6:	f7fc fa61 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ba:	2000      	movs	r0, #0
 80044bc:	f7fc fa5e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80044c0:	2088      	movs	r0, #136	@ 0x88
 80044c2:	f7fc fa5b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044c6:	2000      	movs	r0, #0
 80044c8:	f7fc fa58 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 80044cc:	2077      	movs	r0, #119	@ 0x77
 80044ce:	f7fc fa55 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044d2:	2000      	movs	r0, #0
 80044d4:	f7fc fa52 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80044d8:	2066      	movs	r0, #102	@ 0x66
 80044da:	f7fc fa4f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044de:	2000      	movs	r0, #0
 80044e0:	f7fc fa4c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80044e4:	2088      	movs	r0, #136	@ 0x88
 80044e6:	f7fc fa49 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ea:	2000      	movs	r0, #0
 80044ec:	f7fc fa46 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xAA);
 80044f0:	20aa      	movs	r0, #170	@ 0xaa
 80044f2:	f7fc fa43 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044f6:	2000      	movs	r0, #0
 80044f8:	f7fc fa40 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 80044fc:	20bb      	movs	r0, #187	@ 0xbb
 80044fe:	f7fc fa3d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004502:	2000      	movs	r0, #0
 8004504:	f7fc fa3a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004508:	2099      	movs	r0, #153	@ 0x99
 800450a:	f7fc fa37 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800450e:	2000      	movs	r0, #0
 8004510:	f7fc fa34 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004514:	2066      	movs	r0, #102	@ 0x66
 8004516:	f7fc fa31 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800451a:	2000      	movs	r0, #0
 800451c:	f7fc fa2e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004520:	2055      	movs	r0, #85	@ 0x55
 8004522:	f7fc fa2b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004526:	2000      	movs	r0, #0
 8004528:	f7fc fa28 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 800452c:	2055      	movs	r0, #85	@ 0x55
 800452e:	f7fc fa25 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004532:	2000      	movs	r0, #0
 8004534:	f7fc fa22 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004538:	2044      	movs	r0, #68	@ 0x44
 800453a:	f7fc fa1f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800453e:	2000      	movs	r0, #0
 8004540:	f7fc fa1c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004544:	2044      	movs	r0, #68	@ 0x44
 8004546:	f7fc fa19 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800454a:	2000      	movs	r0, #0
 800454c:	f7fc fa16 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004550:	2055      	movs	r0, #85	@ 0x55
 8004552:	f7fc fa13 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004556:	2000      	movs	r0, #0
 8004558:	f7fc fa10 	bl	800097c <lcd_wr_xdata>
 800455c:	23e9      	movs	r3, #233	@ 0xe9
 800455e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004562:	4b24      	ldr	r3, [pc, #144]	@ (80045f4 <lcd_init+0x296c>)
 8004564:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004568:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800456a:	4b22      	ldr	r3, [pc, #136]	@ (80045f4 <lcd_init+0x296c>)
 800456c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004570:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004572:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004576:	b29a      	uxth	r2, r3
 8004578:	4b1f      	ldr	r3, [pc, #124]	@ (80045f8 <lcd_init+0x2970>)
 800457a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800457c:	4b1d      	ldr	r3, [pc, #116]	@ (80045f4 <lcd_init+0x296c>)
 800457e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004582:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004584:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <lcd_init+0x296c>)
 8004586:	2280      	movs	r2, #128	@ 0x80
 8004588:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800458a:	4b1a      	ldr	r3, [pc, #104]	@ (80045f4 <lcd_init+0x296c>)
 800458c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004590:	611a      	str	r2, [r3, #16]
}
 8004592:	bf00      	nop

        lcd_wr_regno(0xE9);
        lcd_wr_xdata(0xAA);
 8004594:	20aa      	movs	r0, #170	@ 0xaa
 8004596:	f7fc f9f1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800459a:	2000      	movs	r0, #0
 800459c:	f7fc f9ee 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045a0:	2000      	movs	r0, #0
 80045a2:	f7fc f9eb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045a6:	2000      	movs	r0, #0
 80045a8:	f7fc f9e8 	bl	800097c <lcd_wr_xdata>
 80045ac:	2300      	movs	r3, #0
 80045ae:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80045b2:	4b10      	ldr	r3, [pc, #64]	@ (80045f4 <lcd_init+0x296c>)
 80045b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80045ba:	4b0e      	ldr	r3, [pc, #56]	@ (80045f4 <lcd_init+0x296c>)
 80045bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80045c2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	4b0b      	ldr	r3, [pc, #44]	@ (80045f8 <lcd_init+0x2970>)
 80045ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80045cc:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <lcd_init+0x296c>)
 80045ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80045d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80045d4:	4b07      	ldr	r3, [pc, #28]	@ (80045f4 <lcd_init+0x296c>)
 80045d6:	2280      	movs	r2, #128	@ 0x80
 80045d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80045da:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <lcd_init+0x296c>)
 80045dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045e0:	611a      	str	r2, [r3, #16]
}
 80045e2:	bf00      	nop

        lcd_wr_regno(0x00);
        lcd_wr_xdata(0xAA);
 80045e4:	20aa      	movs	r0, #170	@ 0xaa
 80045e6:	f7fc f9c9 	bl	800097c <lcd_wr_xdata>
 80045ea:	23cf      	movs	r3, #207	@ 0xcf
 80045ec:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80045f0:	e004      	b.n	80045fc <lcd_init+0x2974>
 80045f2:	bf00      	nop
 80045f4:	40011000 	.word	0x40011000
 80045f8:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80045fc:	4bbc      	ldr	r3, [pc, #752]	@ (80048f0 <lcd_init+0x2c68>)
 80045fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004602:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004604:	4bba      	ldr	r3, [pc, #744]	@ (80048f0 <lcd_init+0x2c68>)
 8004606:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800460a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800460c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8004610:	b29a      	uxth	r2, r3
 8004612:	4bb8      	ldr	r3, [pc, #736]	@ (80048f4 <lcd_init+0x2c6c>)
 8004614:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004616:	4bb6      	ldr	r3, [pc, #728]	@ (80048f0 <lcd_init+0x2c68>)
 8004618:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800461c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800461e:	4bb4      	ldr	r3, [pc, #720]	@ (80048f0 <lcd_init+0x2c68>)
 8004620:	2280      	movs	r2, #128	@ 0x80
 8004622:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004624:	4bb2      	ldr	r3, [pc, #712]	@ (80048f0 <lcd_init+0x2c68>)
 8004626:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800462a:	611a      	str	r2, [r3, #16]
}
 800462c:	bf00      	nop

        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 800462e:	2000      	movs	r0, #0
 8004630:	f7fc f9a4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004634:	2000      	movs	r0, #0
 8004636:	f7fc f9a1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800463a:	2000      	movs	r0, #0
 800463c:	f7fc f99e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004640:	2000      	movs	r0, #0
 8004642:	f7fc f99b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004646:	2000      	movs	r0, #0
 8004648:	f7fc f998 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800464c:	2000      	movs	r0, #0
 800464e:	f7fc f995 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004652:	2000      	movs	r0, #0
 8004654:	f7fc f992 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004658:	2000      	movs	r0, #0
 800465a:	f7fc f98f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800465e:	2000      	movs	r0, #0
 8004660:	f7fc f98c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004664:	2000      	movs	r0, #0
 8004666:	f7fc f989 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800466a:	2000      	movs	r0, #0
 800466c:	f7fc f986 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004670:	2000      	movs	r0, #0
 8004672:	f7fc f983 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004676:	2000      	movs	r0, #0
 8004678:	f7fc f980 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800467c:	2000      	movs	r0, #0
 800467e:	f7fc f97d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004682:	2000      	movs	r0, #0
 8004684:	f7fc f97a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004688:	2000      	movs	r0, #0
 800468a:	f7fc f977 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800468e:	2000      	movs	r0, #0
 8004690:	f7fc f974 	bl	800097c <lcd_wr_xdata>
 8004694:	23f0      	movs	r3, #240	@ 0xf0
 8004696:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800469a:	4b95      	ldr	r3, [pc, #596]	@ (80048f0 <lcd_init+0x2c68>)
 800469c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046a0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046a2:	4b93      	ldr	r3, [pc, #588]	@ (80048f0 <lcd_init+0x2c68>)
 80046a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046a8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80046aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	4b90      	ldr	r3, [pc, #576]	@ (80048f4 <lcd_init+0x2c6c>)
 80046b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80046b4:	4b8e      	ldr	r3, [pc, #568]	@ (80048f0 <lcd_init+0x2c68>)
 80046b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80046ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80046bc:	4b8c      	ldr	r3, [pc, #560]	@ (80048f0 <lcd_init+0x2c68>)
 80046be:	2280      	movs	r2, #128	@ 0x80
 80046c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80046c2:	4b8b      	ldr	r3, [pc, #556]	@ (80048f0 <lcd_init+0x2c68>)
 80046c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046c8:	611a      	str	r2, [r3, #16]
}
 80046ca:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x00);
 80046cc:	2000      	movs	r0, #0
 80046ce:	f7fc f955 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 80046d2:	2050      	movs	r0, #80	@ 0x50
 80046d4:	f7fc f952 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046d8:	2000      	movs	r0, #0
 80046da:	f7fc f94f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046de:	2000      	movs	r0, #0
 80046e0:	f7fc f94c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046e4:	2000      	movs	r0, #0
 80046e6:	f7fc f949 	bl	800097c <lcd_wr_xdata>
 80046ea:	23f3      	movs	r3, #243	@ 0xf3
 80046ec:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80046f0:	4b7f      	ldr	r3, [pc, #508]	@ (80048f0 <lcd_init+0x2c68>)
 80046f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046f8:	4b7d      	ldr	r3, [pc, #500]	@ (80048f0 <lcd_init+0x2c68>)
 80046fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004700:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8004704:	b29a      	uxth	r2, r3
 8004706:	4b7b      	ldr	r3, [pc, #492]	@ (80048f4 <lcd_init+0x2c6c>)
 8004708:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800470a:	4b79      	ldr	r3, [pc, #484]	@ (80048f0 <lcd_init+0x2c68>)
 800470c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004710:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004712:	4b77      	ldr	r3, [pc, #476]	@ (80048f0 <lcd_init+0x2c68>)
 8004714:	2280      	movs	r2, #128	@ 0x80
 8004716:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004718:	4b75      	ldr	r3, [pc, #468]	@ (80048f0 <lcd_init+0x2c68>)
 800471a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800471e:	611a      	str	r2, [r3, #16]
}
 8004720:	bf00      	nop

        lcd_wr_regno(0xF3);
        lcd_wr_xdata(0x00);
 8004722:	2000      	movs	r0, #0
 8004724:	f7fc f92a 	bl	800097c <lcd_wr_xdata>
 8004728:	23f9      	movs	r3, #249	@ 0xf9
 800472a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800472e:	4b70      	ldr	r3, [pc, #448]	@ (80048f0 <lcd_init+0x2c68>)
 8004730:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004734:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004736:	4b6e      	ldr	r3, [pc, #440]	@ (80048f0 <lcd_init+0x2c68>)
 8004738:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800473c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800473e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004742:	b29a      	uxth	r2, r3
 8004744:	4b6b      	ldr	r3, [pc, #428]	@ (80048f4 <lcd_init+0x2c6c>)
 8004746:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004748:	4b69      	ldr	r3, [pc, #420]	@ (80048f0 <lcd_init+0x2c68>)
 800474a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800474e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004750:	4b67      	ldr	r3, [pc, #412]	@ (80048f0 <lcd_init+0x2c68>)
 8004752:	2280      	movs	r2, #128	@ 0x80
 8004754:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004756:	4b66      	ldr	r3, [pc, #408]	@ (80048f0 <lcd_init+0x2c68>)
 8004758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800475c:	611a      	str	r2, [r3, #16]
}
 800475e:	bf00      	nop

        lcd_wr_regno(0xF9);
        lcd_wr_xdata(0x06);
 8004760:	2006      	movs	r0, #6
 8004762:	f7fc f90b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004766:	2010      	movs	r0, #16
 8004768:	f7fc f908 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 800476c:	2029      	movs	r0, #41	@ 0x29
 800476e:	f7fc f905 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004772:	2000      	movs	r0, #0
 8004774:	f7fc f902 	bl	800097c <lcd_wr_xdata>
 8004778:	233a      	movs	r3, #58	@ 0x3a
 800477a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800477e:	4b5c      	ldr	r3, [pc, #368]	@ (80048f0 <lcd_init+0x2c68>)
 8004780:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004784:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004786:	4b5a      	ldr	r3, [pc, #360]	@ (80048f0 <lcd_init+0x2c68>)
 8004788:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800478c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800478e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004792:	b29a      	uxth	r2, r3
 8004794:	4b57      	ldr	r3, [pc, #348]	@ (80048f4 <lcd_init+0x2c6c>)
 8004796:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004798:	4b55      	ldr	r3, [pc, #340]	@ (80048f0 <lcd_init+0x2c68>)
 800479a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800479e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80047a0:	4b53      	ldr	r3, [pc, #332]	@ (80048f0 <lcd_init+0x2c68>)
 80047a2:	2280      	movs	r2, #128	@ 0x80
 80047a4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80047a6:	4b52      	ldr	r3, [pc, #328]	@ (80048f0 <lcd_init+0x2c68>)
 80047a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ac:	611a      	str	r2, [r3, #16]
}
 80047ae:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);  /* 66 */
 80047b0:	2055      	movs	r0, #85	@ 0x55
 80047b2:	f7fc f8e3 	bl	800097c <lcd_wr_xdata>
 80047b6:	2311      	movs	r3, #17
 80047b8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80047bc:	4b4c      	ldr	r3, [pc, #304]	@ (80048f0 <lcd_init+0x2c68>)
 80047be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047c2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80047c4:	4b4a      	ldr	r3, [pc, #296]	@ (80048f0 <lcd_init+0x2c68>)
 80047c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047ca:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80047cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	4b48      	ldr	r3, [pc, #288]	@ (80048f4 <lcd_init+0x2c6c>)
 80047d4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80047d6:	4b46      	ldr	r3, [pc, #280]	@ (80048f0 <lcd_init+0x2c68>)
 80047d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80047dc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80047de:	4b44      	ldr	r3, [pc, #272]	@ (80048f0 <lcd_init+0x2c68>)
 80047e0:	2280      	movs	r2, #128	@ 0x80
 80047e2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80047e4:	4b42      	ldr	r3, [pc, #264]	@ (80048f0 <lcd_init+0x2c68>)
 80047e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ea:	611a      	str	r2, [r3, #16]
}
 80047ec:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(100);
 80047ee:	2064      	movs	r0, #100	@ 0x64
 80047f0:	f003 fb06 	bl	8007e00 <HAL_Delay>
 80047f4:	2329      	movs	r3, #41	@ 0x29
 80047f6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80047fa:	4b3d      	ldr	r3, [pc, #244]	@ (80048f0 <lcd_init+0x2c68>)
 80047fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004800:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004802:	4b3b      	ldr	r3, [pc, #236]	@ (80048f0 <lcd_init+0x2c68>)
 8004804:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004808:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800480a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800480e:	b29a      	uxth	r2, r3
 8004810:	4b38      	ldr	r3, [pc, #224]	@ (80048f4 <lcd_init+0x2c6c>)
 8004812:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004814:	4b36      	ldr	r3, [pc, #216]	@ (80048f0 <lcd_init+0x2c68>)
 8004816:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800481a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800481c:	4b34      	ldr	r3, [pc, #208]	@ (80048f0 <lcd_init+0x2c68>)
 800481e:	2280      	movs	r2, #128	@ 0x80
 8004820:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004822:	4b33      	ldr	r3, [pc, #204]	@ (80048f0 <lcd_init+0x2c68>)
 8004824:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004828:	611a      	str	r2, [r3, #16]
}
 800482a:	bf00      	nop
 800482c:	2335      	movs	r3, #53	@ 0x35
 800482e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004832:	4b2f      	ldr	r3, [pc, #188]	@ (80048f0 <lcd_init+0x2c68>)
 8004834:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004838:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800483a:	4b2d      	ldr	r3, [pc, #180]	@ (80048f0 <lcd_init+0x2c68>)
 800483c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004840:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004842:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004846:	b29a      	uxth	r2, r3
 8004848:	4b2a      	ldr	r3, [pc, #168]	@ (80048f4 <lcd_init+0x2c6c>)
 800484a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800484c:	4b28      	ldr	r3, [pc, #160]	@ (80048f0 <lcd_init+0x2c68>)
 800484e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004852:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004854:	4b26      	ldr	r3, [pc, #152]	@ (80048f0 <lcd_init+0x2c68>)
 8004856:	2280      	movs	r2, #128	@ 0x80
 8004858:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800485a:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <lcd_init+0x2c68>)
 800485c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004860:	611a      	str	r2, [r3, #16]
}
 8004862:	bf00      	nop
        lcd_wr_regno(0x29);
        lcd_wr_regno(0x35);
        lcd_wr_xdata(0x00);
 8004864:	2000      	movs	r0, #0
 8004866:	f7fc f889 	bl	800097c <lcd_wr_xdata>
 800486a:	2351      	movs	r3, #81	@ 0x51
 800486c:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004870:	4b1f      	ldr	r3, [pc, #124]	@ (80048f0 <lcd_init+0x2c68>)
 8004872:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004876:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004878:	4b1d      	ldr	r3, [pc, #116]	@ (80048f0 <lcd_init+0x2c68>)
 800487a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800487e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004880:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8004884:	b29a      	uxth	r2, r3
 8004886:	4b1b      	ldr	r3, [pc, #108]	@ (80048f4 <lcd_init+0x2c6c>)
 8004888:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800488a:	4b19      	ldr	r3, [pc, #100]	@ (80048f0 <lcd_init+0x2c68>)
 800488c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004890:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004892:	4b17      	ldr	r3, [pc, #92]	@ (80048f0 <lcd_init+0x2c68>)
 8004894:	2280      	movs	r2, #128	@ 0x80
 8004896:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004898:	4b15      	ldr	r3, [pc, #84]	@ (80048f0 <lcd_init+0x2c68>)
 800489a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800489e:	611a      	str	r2, [r3, #16]
}
 80048a0:	bf00      	nop

        lcd_wr_regno(0x51);
        lcd_wr_xdata(0xFF);
 80048a2:	20ff      	movs	r0, #255	@ 0xff
 80048a4:	f7fc f86a 	bl	800097c <lcd_wr_xdata>
 80048a8:	2353      	movs	r3, #83	@ 0x53
 80048aa:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80048ae:	4b10      	ldr	r3, [pc, #64]	@ (80048f0 <lcd_init+0x2c68>)
 80048b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048b4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80048b6:	4b0e      	ldr	r3, [pc, #56]	@ (80048f0 <lcd_init+0x2c68>)
 80048b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048bc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80048be:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <lcd_init+0x2c6c>)
 80048c6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80048c8:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <lcd_init+0x2c68>)
 80048ca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048ce:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80048d0:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <lcd_init+0x2c68>)
 80048d2:	2280      	movs	r2, #128	@ 0x80
 80048d4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80048d6:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <lcd_init+0x2c68>)
 80048d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048dc:	611a      	str	r2, [r3, #16]
}
 80048de:	bf00      	nop
        lcd_wr_regno(0x53);
        lcd_wr_xdata(0x2C);
 80048e0:	202c      	movs	r0, #44	@ 0x2c
 80048e2:	f7fc f84b 	bl	800097c <lcd_wr_xdata>
 80048e6:	2355      	movs	r3, #85	@ 0x55
 80048e8:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 80048ec:	e004      	b.n	80048f8 <lcd_init+0x2c70>
 80048ee:	bf00      	nop
 80048f0:	40011000 	.word	0x40011000
 80048f4:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80048f8:	4b1c      	ldr	r3, [pc, #112]	@ (800496c <lcd_init+0x2ce4>)
 80048fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048fe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004900:	4b1a      	ldr	r3, [pc, #104]	@ (800496c <lcd_init+0x2ce4>)
 8004902:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004906:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004908:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800490c:	b29a      	uxth	r2, r3
 800490e:	4b18      	ldr	r3, [pc, #96]	@ (8004970 <lcd_init+0x2ce8>)
 8004910:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004912:	4b16      	ldr	r3, [pc, #88]	@ (800496c <lcd_init+0x2ce4>)
 8004914:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004918:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800491a:	4b14      	ldr	r3, [pc, #80]	@ (800496c <lcd_init+0x2ce4>)
 800491c:	2280      	movs	r2, #128	@ 0x80
 800491e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004920:	4b12      	ldr	r3, [pc, #72]	@ (800496c <lcd_init+0x2ce4>)
 8004922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004926:	611a      	str	r2, [r3, #16]
}
 8004928:	bf00      	nop
        lcd_wr_regno(0x55);
        lcd_wr_xdata(0x82);
 800492a:	2082      	movs	r0, #130	@ 0x82
 800492c:	f7fc f826 	bl	800097c <lcd_wr_xdata>
 8004930:	232c      	movs	r3, #44	@ 0x2c
 8004932:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004936:	4b0d      	ldr	r3, [pc, #52]	@ (800496c <lcd_init+0x2ce4>)
 8004938:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800493c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800493e:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <lcd_init+0x2ce4>)
 8004940:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004944:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004946:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800494a:	b29a      	uxth	r2, r3
 800494c:	4b08      	ldr	r3, [pc, #32]	@ (8004970 <lcd_init+0x2ce8>)
 800494e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004950:	4b06      	ldr	r3, [pc, #24]	@ (800496c <lcd_init+0x2ce4>)
 8004952:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004956:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004958:	4b04      	ldr	r3, [pc, #16]	@ (800496c <lcd_init+0x2ce4>)
 800495a:	2280      	movs	r2, #128	@ 0x80
 800495c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800495e:	4b03      	ldr	r3, [pc, #12]	@ (800496c <lcd_init+0x2ce4>)
 8004960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004964:	611a      	str	r2, [r3, #16]
}
 8004966:	f002 b8d8 	b.w	8006b1a <lcd_init+0x4e92>
 800496a:	bf00      	nop
 800496c:	40011000 	.word	0x40011000
 8004970:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2c);
    }
    else if (lcddev.id == 0x7796)
 8004974:	4bb4      	ldr	r3, [pc, #720]	@ (8004c48 <lcd_init+0x2fc0>)
 8004976:	889b      	ldrh	r3, [r3, #4]
 8004978:	f247 7296 	movw	r2, #30614	@ 0x7796
 800497c:	4293      	cmp	r3, r2
 800497e:	f040 82e3 	bne.w	8004f48 <lcd_init+0x32c0>
 8004982:	2311      	movs	r3, #17
 8004984:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004988:	4bb0      	ldr	r3, [pc, #704]	@ (8004c4c <lcd_init+0x2fc4>)
 800498a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800498e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004990:	4bae      	ldr	r3, [pc, #696]	@ (8004c4c <lcd_init+0x2fc4>)
 8004992:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004996:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004998:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 800499c:	b29a      	uxth	r2, r3
 800499e:	4bac      	ldr	r3, [pc, #688]	@ (8004c50 <lcd_init+0x2fc8>)
 80049a0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80049a2:	4baa      	ldr	r3, [pc, #680]	@ (8004c4c <lcd_init+0x2fc4>)
 80049a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80049a8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80049aa:	4ba8      	ldr	r3, [pc, #672]	@ (8004c4c <lcd_init+0x2fc4>)
 80049ac:	2280      	movs	r2, #128	@ 0x80
 80049ae:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80049b0:	4ba6      	ldr	r3, [pc, #664]	@ (8004c4c <lcd_init+0x2fc4>)
 80049b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049b6:	611a      	str	r2, [r3, #16]
}
 80049b8:	bf00      	nop
    {
       // lcd_ex_st7796_reginit();    /* ִ��ST7796��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 80049ba:	2078      	movs	r0, #120	@ 0x78
 80049bc:	f003 fa20 	bl	8007e00 <HAL_Delay>
 80049c0:	2336      	movs	r3, #54	@ 0x36
 80049c2:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80049c6:	4ba1      	ldr	r3, [pc, #644]	@ (8004c4c <lcd_init+0x2fc4>)
 80049c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049cc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80049ce:	4b9f      	ldr	r3, [pc, #636]	@ (8004c4c <lcd_init+0x2fc4>)
 80049d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049d4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80049d6:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80049da:	b29a      	uxth	r2, r3
 80049dc:	4b9c      	ldr	r3, [pc, #624]	@ (8004c50 <lcd_init+0x2fc8>)
 80049de:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80049e0:	4b9a      	ldr	r3, [pc, #616]	@ (8004c4c <lcd_init+0x2fc4>)
 80049e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80049e6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80049e8:	4b98      	ldr	r3, [pc, #608]	@ (8004c4c <lcd_init+0x2fc4>)
 80049ea:	2280      	movs	r2, #128	@ 0x80
 80049ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80049ee:	4b97      	ldr	r3, [pc, #604]	@ (8004c4c <lcd_init+0x2fc4>)
 80049f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049f4:	611a      	str	r2, [r3, #16]
}
 80049f6:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
        lcd_wr_xdata(0x48);
 80049f8:	2048      	movs	r0, #72	@ 0x48
 80049fa:	f7fb ffbf 	bl	800097c <lcd_wr_xdata>
 80049fe:	233a      	movs	r3, #58	@ 0x3a
 8004a00:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a04:	4b91      	ldr	r3, [pc, #580]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a06:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a0a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a0c:	4b8f      	ldr	r3, [pc, #572]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a12:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a14:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8004c50 <lcd_init+0x2fc8>)
 8004a1c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a1e:	4b8b      	ldr	r3, [pc, #556]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a20:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a24:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a26:	4b89      	ldr	r3, [pc, #548]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a28:	2280      	movs	r2, #128	@ 0x80
 8004a2a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a2c:	4b87      	ldr	r3, [pc, #540]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a32:	611a      	str	r2, [r3, #16]
}
 8004a34:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8004a36:	2055      	movs	r0, #85	@ 0x55
 8004a38:	f7fb ffa0 	bl	800097c <lcd_wr_xdata>
 8004a3c:	23f0      	movs	r3, #240	@ 0xf0
 8004a3e:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a42:	4b82      	ldr	r3, [pc, #520]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a48:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a4a:	4b80      	ldr	r3, [pc, #512]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a50:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a52:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	4b7d      	ldr	r3, [pc, #500]	@ (8004c50 <lcd_init+0x2fc8>)
 8004a5a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a5c:	4b7b      	ldr	r3, [pc, #492]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a62:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a64:	4b79      	ldr	r3, [pc, #484]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a66:	2280      	movs	r2, #128	@ 0x80
 8004a68:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a6a:	4b78      	ldr	r3, [pc, #480]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a70:	611a      	str	r2, [r3, #16]
}
 8004a72:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0xC3);
 8004a74:	20c3      	movs	r0, #195	@ 0xc3
 8004a76:	f7fb ff81 	bl	800097c <lcd_wr_xdata>
 8004a7a:	23f0      	movs	r3, #240	@ 0xf0
 8004a7c:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a80:	4b72      	ldr	r3, [pc, #456]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a86:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a88:	4b70      	ldr	r3, [pc, #448]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a8e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a90:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	4b6e      	ldr	r3, [pc, #440]	@ (8004c50 <lcd_init+0x2fc8>)
 8004a98:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a9a:	4b6c      	ldr	r3, [pc, #432]	@ (8004c4c <lcd_init+0x2fc4>)
 8004a9c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004aa0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c4c <lcd_init+0x2fc4>)
 8004aa4:	2280      	movs	r2, #128	@ 0x80
 8004aa6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004aa8:	4b68      	ldr	r3, [pc, #416]	@ (8004c4c <lcd_init+0x2fc4>)
 8004aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aae:	611a      	str	r2, [r3, #16]
}
 8004ab0:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x96);
 8004ab2:	2096      	movs	r0, #150	@ 0x96
 8004ab4:	f7fb ff62 	bl	800097c <lcd_wr_xdata>
 8004ab8:	23b4      	movs	r3, #180	@ 0xb4
 8004aba:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004abe:	4b63      	ldr	r3, [pc, #396]	@ (8004c4c <lcd_init+0x2fc4>)
 8004ac0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ac4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004ac6:	4b61      	ldr	r3, [pc, #388]	@ (8004c4c <lcd_init+0x2fc4>)
 8004ac8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004acc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ace:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8004c50 <lcd_init+0x2fc8>)
 8004ad6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ad8:	4b5c      	ldr	r3, [pc, #368]	@ (8004c4c <lcd_init+0x2fc4>)
 8004ada:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ade:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8004c4c <lcd_init+0x2fc4>)
 8004ae2:	2280      	movs	r2, #128	@ 0x80
 8004ae4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004ae6:	4b59      	ldr	r3, [pc, #356]	@ (8004c4c <lcd_init+0x2fc4>)
 8004ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aec:	611a      	str	r2, [r3, #16]
}
 8004aee:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x01);
 8004af0:	2001      	movs	r0, #1
 8004af2:	f7fb ff43 	bl	800097c <lcd_wr_xdata>
 8004af6:	23b6      	movs	r3, #182	@ 0xb6
 8004af8:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004afc:	4b53      	ldr	r3, [pc, #332]	@ (8004c4c <lcd_init+0x2fc4>)
 8004afe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b02:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b04:	4b51      	ldr	r3, [pc, #324]	@ (8004c4c <lcd_init+0x2fc4>)
 8004b06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b0a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b0c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	4b4f      	ldr	r3, [pc, #316]	@ (8004c50 <lcd_init+0x2fc8>)
 8004b14:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b16:	4b4d      	ldr	r3, [pc, #308]	@ (8004c4c <lcd_init+0x2fc4>)
 8004b18:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b1c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b1e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c4c <lcd_init+0x2fc4>)
 8004b20:	2280      	movs	r2, #128	@ 0x80
 8004b22:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b24:	4b49      	ldr	r3, [pc, #292]	@ (8004c4c <lcd_init+0x2fc4>)
 8004b26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b2a:	611a      	str	r2, [r3, #16]
}
 8004b2c:	bf00      	nop

        lcd_wr_regno(0xB6); /* Display Function Control */
        lcd_wr_xdata(0x0A);
 8004b2e:	200a      	movs	r0, #10
 8004b30:	f7fb ff24 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004b34:	20a2      	movs	r0, #162	@ 0xa2
 8004b36:	f7fb ff21 	bl	800097c <lcd_wr_xdata>
 8004b3a:	23b7      	movs	r3, #183	@ 0xb7
 8004b3c:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b40:	4b42      	ldr	r3, [pc, #264]	@ (8004c4c <lcd_init+0x2fc4>)
 8004b42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b46:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b48:	4b40      	ldr	r3, [pc, #256]	@ (8004c4c <lcd_init+0x2fc4>)
 8004b4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b4e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b50:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	4b3e      	ldr	r3, [pc, #248]	@ (8004c50 <lcd_init+0x2fc8>)
 8004b58:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c4c <lcd_init+0x2fc4>)
 8004b5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b60:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b62:	4b3a      	ldr	r3, [pc, #232]	@ (8004c4c <lcd_init+0x2fc4>)
 8004b64:	2280      	movs	r2, #128	@ 0x80
 8004b66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b68:	4b38      	ldr	r3, [pc, #224]	@ (8004c4c <lcd_init+0x2fc4>)
 8004b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b6e:	611a      	str	r2, [r3, #16]
}
 8004b70:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0xC6);
 8004b72:	20c6      	movs	r0, #198	@ 0xc6
 8004b74:	f7fb ff02 	bl	800097c <lcd_wr_xdata>
 8004b78:	23b9      	movs	r3, #185	@ 0xb9
 8004b7a:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b7e:	4b33      	ldr	r3, [pc, #204]	@ (8004c4c <lcd_init+0x2fc4>)
 8004b80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b84:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b86:	4b31      	ldr	r3, [pc, #196]	@ (8004c4c <lcd_init+0x2fc4>)
 8004b88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b8c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b8e:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	4b2e      	ldr	r3, [pc, #184]	@ (8004c50 <lcd_init+0x2fc8>)
 8004b96:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b98:	4b2c      	ldr	r3, [pc, #176]	@ (8004c4c <lcd_init+0x2fc4>)
 8004b9a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b9e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c4c <lcd_init+0x2fc4>)
 8004ba2:	2280      	movs	r2, #128	@ 0x80
 8004ba4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004ba6:	4b29      	ldr	r3, [pc, #164]	@ (8004c4c <lcd_init+0x2fc4>)
 8004ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bac:	611a      	str	r2, [r3, #16]
}
 8004bae:	bf00      	nop

        lcd_wr_regno(0xB9);
        lcd_wr_xdata(0x02);
 8004bb0:	2002      	movs	r0, #2
 8004bb2:	f7fb fee3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8004bb6:	20e0      	movs	r0, #224	@ 0xe0
 8004bb8:	f7fb fee0 	bl	800097c <lcd_wr_xdata>
 8004bbc:	23c0      	movs	r3, #192	@ 0xc0
 8004bbe:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004bc2:	4b22      	ldr	r3, [pc, #136]	@ (8004c4c <lcd_init+0x2fc4>)
 8004bc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bc8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004bca:	4b20      	ldr	r3, [pc, #128]	@ (8004c4c <lcd_init+0x2fc4>)
 8004bcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bd0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004bd2:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c50 <lcd_init+0x2fc8>)
 8004bda:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8004c4c <lcd_init+0x2fc4>)
 8004bde:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004be2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004be4:	4b19      	ldr	r3, [pc, #100]	@ (8004c4c <lcd_init+0x2fc4>)
 8004be6:	2280      	movs	r2, #128	@ 0x80
 8004be8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004bea:	4b18      	ldr	r3, [pc, #96]	@ (8004c4c <lcd_init+0x2fc4>)
 8004bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bf0:	611a      	str	r2, [r3, #16]
}
 8004bf2:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x80);
 8004bf4:	2080      	movs	r0, #128	@ 0x80
 8004bf6:	f7fb fec1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x16);
 8004bfa:	2016      	movs	r0, #22
 8004bfc:	f7fb febe 	bl	800097c <lcd_wr_xdata>
 8004c00:	23c1      	movs	r3, #193	@ 0xc1
 8004c02:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c06:	4b11      	ldr	r3, [pc, #68]	@ (8004c4c <lcd_init+0x2fc4>)
 8004c08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c0c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c4c <lcd_init+0x2fc4>)
 8004c10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c14:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c16:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <lcd_init+0x2fc8>)
 8004c1e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c20:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <lcd_init+0x2fc4>)
 8004c22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c26:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c28:	4b08      	ldr	r3, [pc, #32]	@ (8004c4c <lcd_init+0x2fc4>)
 8004c2a:	2280      	movs	r2, #128	@ 0x80
 8004c2c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c2e:	4b07      	ldr	r3, [pc, #28]	@ (8004c4c <lcd_init+0x2fc4>)
 8004c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c34:	611a      	str	r2, [r3, #16]
}
 8004c36:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x19);
 8004c38:	2019      	movs	r0, #25
 8004c3a:	f7fb fe9f 	bl	800097c <lcd_wr_xdata>
 8004c3e:	23c2      	movs	r3, #194	@ 0xc2
 8004c40:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
 8004c44:	e006      	b.n	8004c54 <lcd_init+0x2fcc>
 8004c46:	bf00      	nop
 8004c48:	20000088 	.word	0x20000088
 8004c4c:	40011000 	.word	0x40011000
 8004c50:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c54:	4bba      	ldr	r3, [pc, #744]	@ (8004f40 <lcd_init+0x32b8>)
 8004c56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c5a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c5c:	4bb8      	ldr	r3, [pc, #736]	@ (8004f40 <lcd_init+0x32b8>)
 8004c5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c62:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c64:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	4bb6      	ldr	r3, [pc, #728]	@ (8004f44 <lcd_init+0x32bc>)
 8004c6c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c6e:	4bb4      	ldr	r3, [pc, #720]	@ (8004f40 <lcd_init+0x32b8>)
 8004c70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c74:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c76:	4bb2      	ldr	r3, [pc, #712]	@ (8004f40 <lcd_init+0x32b8>)
 8004c78:	2280      	movs	r2, #128	@ 0x80
 8004c7a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c7c:	4bb0      	ldr	r3, [pc, #704]	@ (8004f40 <lcd_init+0x32b8>)
 8004c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c82:	611a      	str	r2, [r3, #16]
}
 8004c84:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0xA7);
 8004c86:	20a7      	movs	r0, #167	@ 0xa7
 8004c88:	f7fb fe78 	bl	800097c <lcd_wr_xdata>
 8004c8c:	23c5      	movs	r3, #197	@ 0xc5
 8004c8e:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c92:	4bab      	ldr	r3, [pc, #684]	@ (8004f40 <lcd_init+0x32b8>)
 8004c94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c98:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c9a:	4ba9      	ldr	r3, [pc, #676]	@ (8004f40 <lcd_init+0x32b8>)
 8004c9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ca0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ca2:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	4ba6      	ldr	r3, [pc, #664]	@ (8004f44 <lcd_init+0x32bc>)
 8004caa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004cac:	4ba4      	ldr	r3, [pc, #656]	@ (8004f40 <lcd_init+0x32b8>)
 8004cae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cb2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004cb4:	4ba2      	ldr	r3, [pc, #648]	@ (8004f40 <lcd_init+0x32b8>)
 8004cb6:	2280      	movs	r2, #128	@ 0x80
 8004cb8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004cba:	4ba1      	ldr	r3, [pc, #644]	@ (8004f40 <lcd_init+0x32b8>)
 8004cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cc0:	611a      	str	r2, [r3, #16]
}
 8004cc2:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x16);
 8004cc4:	2016      	movs	r0, #22
 8004cc6:	f7fb fe59 	bl	800097c <lcd_wr_xdata>
 8004cca:	23e8      	movs	r3, #232	@ 0xe8
 8004ccc:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004cd0:	4b9b      	ldr	r3, [pc, #620]	@ (8004f40 <lcd_init+0x32b8>)
 8004cd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cd6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004cd8:	4b99      	ldr	r3, [pc, #612]	@ (8004f40 <lcd_init+0x32b8>)
 8004cda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cde:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ce0:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	4b97      	ldr	r3, [pc, #604]	@ (8004f44 <lcd_init+0x32bc>)
 8004ce8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004cea:	4b95      	ldr	r3, [pc, #596]	@ (8004f40 <lcd_init+0x32b8>)
 8004cec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cf0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004cf2:	4b93      	ldr	r3, [pc, #588]	@ (8004f40 <lcd_init+0x32b8>)
 8004cf4:	2280      	movs	r2, #128	@ 0x80
 8004cf6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004cf8:	4b91      	ldr	r3, [pc, #580]	@ (8004f40 <lcd_init+0x32b8>)
 8004cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cfe:	611a      	str	r2, [r3, #16]
}
 8004d00:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x40);
 8004d02:	2040      	movs	r0, #64	@ 0x40
 8004d04:	f7fb fe3a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x8A);
 8004d08:	208a      	movs	r0, #138	@ 0x8a
 8004d0a:	f7fb fe37 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f7fb fe34 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004d14:	2000      	movs	r0, #0
 8004d16:	f7fb fe31 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004d1a:	2029      	movs	r0, #41	@ 0x29
 8004d1c:	f7fb fe2e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8004d20:	2019      	movs	r0, #25
 8004d22:	f7fb fe2b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xA5);
 8004d26:	20a5      	movs	r0, #165	@ 0xa5
 8004d28:	f7fb fe28 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8004d2c:	2033      	movs	r0, #51	@ 0x33
 8004d2e:	f7fb fe25 	bl	800097c <lcd_wr_xdata>
 8004d32:	23e0      	movs	r3, #224	@ 0xe0
 8004d34:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d38:	4b81      	ldr	r3, [pc, #516]	@ (8004f40 <lcd_init+0x32b8>)
 8004d3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d3e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d40:	4b7f      	ldr	r3, [pc, #508]	@ (8004f40 <lcd_init+0x32b8>)
 8004d42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d46:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d48:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f44 <lcd_init+0x32bc>)
 8004d50:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d52:	4b7b      	ldr	r3, [pc, #492]	@ (8004f40 <lcd_init+0x32b8>)
 8004d54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d58:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d5a:	4b79      	ldr	r3, [pc, #484]	@ (8004f40 <lcd_init+0x32b8>)
 8004d5c:	2280      	movs	r2, #128	@ 0x80
 8004d5e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d60:	4b77      	ldr	r3, [pc, #476]	@ (8004f40 <lcd_init+0x32b8>)
 8004d62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d66:	611a      	str	r2, [r3, #16]
}
 8004d68:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0xF0);
 8004d6a:	20f0      	movs	r0, #240	@ 0xf0
 8004d6c:	f7fb fe06 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8004d70:	2007      	movs	r0, #7
 8004d72:	f7fb fe03 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 8004d76:	200d      	movs	r0, #13
 8004d78:	f7fb fe00 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8004d7c:	2004      	movs	r0, #4
 8004d7e:	f7fb fdfd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8004d82:	2005      	movs	r0, #5
 8004d84:	f7fb fdfa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004d88:	2014      	movs	r0, #20
 8004d8a:	f7fb fdf7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004d8e:	2036      	movs	r0, #54	@ 0x36
 8004d90:	f7fb fdf4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8004d94:	2054      	movs	r0, #84	@ 0x54
 8004d96:	f7fb fdf1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004d9a:	204c      	movs	r0, #76	@ 0x4c
 8004d9c:	f7fb fdee 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x38);
 8004da0:	2038      	movs	r0, #56	@ 0x38
 8004da2:	f7fb fdeb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8004da6:	2013      	movs	r0, #19
 8004da8:	f7fb fde8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004dac:	2014      	movs	r0, #20
 8004dae:	f7fb fde5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2E);
 8004db2:	202e      	movs	r0, #46	@ 0x2e
 8004db4:	f7fb fde2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004db8:	2034      	movs	r0, #52	@ 0x34
 8004dba:	f7fb fddf 	bl	800097c <lcd_wr_xdata>
 8004dbe:	23e1      	movs	r3, #225	@ 0xe1
 8004dc0:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004dc4:	4b5e      	ldr	r3, [pc, #376]	@ (8004f40 <lcd_init+0x32b8>)
 8004dc6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004dca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8004f40 <lcd_init+0x32b8>)
 8004dce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dd2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004dd4:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	4b5a      	ldr	r3, [pc, #360]	@ (8004f44 <lcd_init+0x32bc>)
 8004ddc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004dde:	4b58      	ldr	r3, [pc, #352]	@ (8004f40 <lcd_init+0x32b8>)
 8004de0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004de4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004de6:	4b56      	ldr	r3, [pc, #344]	@ (8004f40 <lcd_init+0x32b8>)
 8004de8:	2280      	movs	r2, #128	@ 0x80
 8004dea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004dec:	4b54      	ldr	r3, [pc, #336]	@ (8004f40 <lcd_init+0x32b8>)
 8004dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004df2:	611a      	str	r2, [r3, #16]
}
 8004df4:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0xF0);
 8004df6:	20f0      	movs	r0, #240	@ 0xf0
 8004df8:	f7fb fdc0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004dfc:	2010      	movs	r0, #16
 8004dfe:	f7fb fdbd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004e02:	2014      	movs	r0, #20
 8004e04:	f7fb fdba 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8004e08:	200e      	movs	r0, #14
 8004e0a:	f7fb fdb7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8004e0e:	200c      	movs	r0, #12
 8004e10:	f7fb fdb4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8004e14:	2008      	movs	r0, #8
 8004e16:	f7fb fdb1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x35);
 8004e1a:	2035      	movs	r0, #53	@ 0x35
 8004e1c:	f7fb fdae 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004e20:	2044      	movs	r0, #68	@ 0x44
 8004e22:	f7fb fdab 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004e26:	204c      	movs	r0, #76	@ 0x4c
 8004e28:	f7fb fda8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8004e2c:	2026      	movs	r0, #38	@ 0x26
 8004e2e:	f7fb fda5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004e32:	2010      	movs	r0, #16
 8004e34:	f7fb fda2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8004e38:	2012      	movs	r0, #18
 8004e3a:	f7fb fd9f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8004e3e:	202c      	movs	r0, #44	@ 0x2c
 8004e40:	f7fb fd9c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8004e44:	2032      	movs	r0, #50	@ 0x32
 8004e46:	f7fb fd99 	bl	800097c <lcd_wr_xdata>
 8004e4a:	23f0      	movs	r3, #240	@ 0xf0
 8004e4c:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e50:	4b3b      	ldr	r3, [pc, #236]	@ (8004f40 <lcd_init+0x32b8>)
 8004e52:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e56:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e58:	4b39      	ldr	r3, [pc, #228]	@ (8004f40 <lcd_init+0x32b8>)
 8004e5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e5e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e60:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	4b37      	ldr	r3, [pc, #220]	@ (8004f44 <lcd_init+0x32bc>)
 8004e68:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e6a:	4b35      	ldr	r3, [pc, #212]	@ (8004f40 <lcd_init+0x32b8>)
 8004e6c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e70:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e72:	4b33      	ldr	r3, [pc, #204]	@ (8004f40 <lcd_init+0x32b8>)
 8004e74:	2280      	movs	r2, #128	@ 0x80
 8004e76:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e78:	4b31      	ldr	r3, [pc, #196]	@ (8004f40 <lcd_init+0x32b8>)
 8004e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e7e:	611a      	str	r2, [r3, #16]
}
 8004e80:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x3C);
 8004e82:	203c      	movs	r0, #60	@ 0x3c
 8004e84:	f7fb fd7a 	bl	800097c <lcd_wr_xdata>
 8004e88:	23f0      	movs	r3, #240	@ 0xf0
 8004e8a:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004f40 <lcd_init+0x32b8>)
 8004e90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e94:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e96:	4b2a      	ldr	r3, [pc, #168]	@ (8004f40 <lcd_init+0x32b8>)
 8004e98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e9c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e9e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	4b27      	ldr	r3, [pc, #156]	@ (8004f44 <lcd_init+0x32bc>)
 8004ea6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ea8:	4b25      	ldr	r3, [pc, #148]	@ (8004f40 <lcd_init+0x32b8>)
 8004eaa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004eae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004eb0:	4b23      	ldr	r3, [pc, #140]	@ (8004f40 <lcd_init+0x32b8>)
 8004eb2:	2280      	movs	r2, #128	@ 0x80
 8004eb4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004eb6:	4b22      	ldr	r3, [pc, #136]	@ (8004f40 <lcd_init+0x32b8>)
 8004eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ebc:	611a      	str	r2, [r3, #16]
}
 8004ebe:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x69);
 8004ec0:	2069      	movs	r0, #105	@ 0x69
 8004ec2:	f7fb fd5b 	bl	800097c <lcd_wr_xdata>

        HAL_Delay(120);
 8004ec6:	2078      	movs	r0, #120	@ 0x78
 8004ec8:	f002 ff9a 	bl	8007e00 <HAL_Delay>
 8004ecc:	2321      	movs	r3, #33	@ 0x21
 8004ece:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f40 <lcd_init+0x32b8>)
 8004ed4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ed8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004eda:	4b19      	ldr	r3, [pc, #100]	@ (8004f40 <lcd_init+0x32b8>)
 8004edc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ee0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ee2:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	4b16      	ldr	r3, [pc, #88]	@ (8004f44 <lcd_init+0x32bc>)
 8004eea:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004eec:	4b14      	ldr	r3, [pc, #80]	@ (8004f40 <lcd_init+0x32b8>)
 8004eee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ef2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ef4:	4b12      	ldr	r3, [pc, #72]	@ (8004f40 <lcd_init+0x32b8>)
 8004ef6:	2280      	movs	r2, #128	@ 0x80
 8004ef8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004efa:	4b11      	ldr	r3, [pc, #68]	@ (8004f40 <lcd_init+0x32b8>)
 8004efc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f00:	611a      	str	r2, [r3, #16]
}
 8004f02:	bf00      	nop
 8004f04:	2329      	movs	r3, #41	@ 0x29
 8004f06:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f40 <lcd_init+0x32b8>)
 8004f0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f10:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004f12:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <lcd_init+0x32b8>)
 8004f14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f18:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004f1a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	4b08      	ldr	r3, [pc, #32]	@ (8004f44 <lcd_init+0x32bc>)
 8004f22:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004f24:	4b06      	ldr	r3, [pc, #24]	@ (8004f40 <lcd_init+0x32b8>)
 8004f26:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f2a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004f2c:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <lcd_init+0x32b8>)
 8004f2e:	2280      	movs	r2, #128	@ 0x80
 8004f30:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004f32:	4b03      	ldr	r3, [pc, #12]	@ (8004f40 <lcd_init+0x32b8>)
 8004f34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f38:	611a      	str	r2, [r3, #16]
}
 8004f3a:	f001 bdee 	b.w	8006b1a <lcd_init+0x4e92>
 8004f3e:	bf00      	nop
 8004f40:	40011000 	.word	0x40011000
 8004f44:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x21);
        lcd_wr_regno(0x29);
    }
    else if (lcddev.id == 0x5510)
 8004f48:	4b03      	ldr	r3, [pc, #12]	@ (8004f58 <lcd_init+0x32d0>)
 8004f4a:	889b      	ldrh	r3, [r3, #4]
 8004f4c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8004f50:	4293      	cmp	r3, r2
 8004f52:	f040 87b3 	bne.w	8005ebc <lcd_init+0x4234>
 8004f56:	e001      	b.n	8004f5c <lcd_init+0x32d4>
 8004f58:	20000088 	.word	0x20000088
    {
        //lcd_ex_nt35510_reginit();   /* ִ��NT35510��ʼ�� */

        lcd_write_reg(0xF000, 0x55);
 8004f5c:	2155      	movs	r1, #85	@ 0x55
 8004f5e:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8004f62:	f7fb fd2f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8004f66:	21aa      	movs	r1, #170	@ 0xaa
 8004f68:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8004f6c:	f7fb fd2a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8004f70:	2152      	movs	r1, #82	@ 0x52
 8004f72:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8004f76:	f7fb fd25 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8004f7a:	2108      	movs	r1, #8
 8004f7c:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8004f80:	f7fb fd20 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x01);
 8004f84:	2101      	movs	r1, #1
 8004f86:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8004f8a:	f7fb fd1b 	bl	80009c4 <lcd_write_reg>
        /* AVDD Set AVDD 5.2V */
        lcd_write_reg(0xB000, 0x0D);
 8004f8e:	210d      	movs	r1, #13
 8004f90:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8004f94:	f7fb fd16 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB001, 0x0D);
 8004f98:	210d      	movs	r1, #13
 8004f9a:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8004f9e:	f7fb fd11 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB002, 0x0D);
 8004fa2:	210d      	movs	r1, #13
 8004fa4:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8004fa8:	f7fb fd0c 	bl	80009c4 <lcd_write_reg>
        /* AVDD ratio */
        lcd_write_reg(0xB600, 0x34);
 8004fac:	2134      	movs	r1, #52	@ 0x34
 8004fae:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8004fb2:	f7fb fd07 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB601, 0x34);
 8004fb6:	2134      	movs	r1, #52	@ 0x34
 8004fb8:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8004fbc:	f7fb fd02 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB602, 0x34);
 8004fc0:	2134      	movs	r1, #52	@ 0x34
 8004fc2:	f24b 6002 	movw	r0, #46594	@ 0xb602
 8004fc6:	f7fb fcfd 	bl	80009c4 <lcd_write_reg>
        /* AVEE -5.2V */
        lcd_write_reg(0xB100, 0x0D);
 8004fca:	210d      	movs	r1, #13
 8004fcc:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8004fd0:	f7fb fcf8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x0D);
 8004fd4:	210d      	movs	r1, #13
 8004fd6:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8004fda:	f7fb fcf3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB102, 0x0D);
 8004fde:	210d      	movs	r1, #13
 8004fe0:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8004fe4:	f7fb fcee 	bl	80009c4 <lcd_write_reg>
        /* AVEE ratio */
        lcd_write_reg(0xB700, 0x34);
 8004fe8:	2134      	movs	r1, #52	@ 0x34
 8004fea:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8004fee:	f7fb fce9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x34);
 8004ff2:	2134      	movs	r1, #52	@ 0x34
 8004ff4:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8004ff8:	f7fb fce4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB702, 0x34);
 8004ffc:	2134      	movs	r1, #52	@ 0x34
 8004ffe:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8005002:	f7fb fcdf 	bl	80009c4 <lcd_write_reg>
        /* VCL -2.5V */
        lcd_write_reg(0xB200, 0x00);
 8005006:	2100      	movs	r1, #0
 8005008:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 800500c:	f7fb fcda 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB201, 0x00);
 8005010:	2100      	movs	r1, #0
 8005012:	f24b 2001 	movw	r0, #45569	@ 0xb201
 8005016:	f7fb fcd5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB202, 0x00);
 800501a:	2100      	movs	r1, #0
 800501c:	f24b 2002 	movw	r0, #45570	@ 0xb202
 8005020:	f7fb fcd0 	bl	80009c4 <lcd_write_reg>
        /* VCL ratio */
        lcd_write_reg(0xB800, 0x24);
 8005024:	2124      	movs	r1, #36	@ 0x24
 8005026:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 800502a:	f7fb fccb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x24);
 800502e:	2124      	movs	r1, #36	@ 0x24
 8005030:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8005034:	f7fb fcc6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x24);
 8005038:	2124      	movs	r1, #36	@ 0x24
 800503a:	f64b 0002 	movw	r0, #47106	@ 0xb802
 800503e:	f7fb fcc1 	bl	80009c4 <lcd_write_reg>
        /* VGH 15V (Free pump) */
        lcd_write_reg(0xBF00, 0x01);
 8005042:	2101      	movs	r1, #1
 8005044:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 8005048:	f7fb fcbc 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB300, 0x0F);
 800504c:	210f      	movs	r1, #15
 800504e:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8005052:	f7fb fcb7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB301, 0x0F);
 8005056:	210f      	movs	r1, #15
 8005058:	f24b 3001 	movw	r0, #45825	@ 0xb301
 800505c:	f7fb fcb2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB302, 0x0F);
 8005060:	210f      	movs	r1, #15
 8005062:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8005066:	f7fb fcad 	bl	80009c4 <lcd_write_reg>
        /* VGH ratio */
        lcd_write_reg(0xB900, 0x34);
 800506a:	2134      	movs	r1, #52	@ 0x34
 800506c:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8005070:	f7fb fca8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB901, 0x34);
 8005074:	2134      	movs	r1, #52	@ 0x34
 8005076:	f64b 1001 	movw	r0, #47361	@ 0xb901
 800507a:	f7fb fca3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB902, 0x34);
 800507e:	2134      	movs	r1, #52	@ 0x34
 8005080:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8005084:	f7fb fc9e 	bl	80009c4 <lcd_write_reg>
        /* VGL_REG -10V */
        lcd_write_reg(0xB500, 0x08);
 8005088:	2108      	movs	r1, #8
 800508a:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 800508e:	f7fb fc99 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB501, 0x08);
 8005092:	2108      	movs	r1, #8
 8005094:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8005098:	f7fb fc94 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB502, 0x08);
 800509c:	2108      	movs	r1, #8
 800509e:	f24b 5002 	movw	r0, #46338	@ 0xb502
 80050a2:	f7fb fc8f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xC200, 0x03);
 80050a6:	2103      	movs	r1, #3
 80050a8:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 80050ac:	f7fb fc8a 	bl	80009c4 <lcd_write_reg>
        /* VGLX ratio */
        lcd_write_reg(0xBA00, 0x24);
 80050b0:	2124      	movs	r1, #36	@ 0x24
 80050b2:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 80050b6:	f7fb fc85 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBA01, 0x24);
 80050ba:	2124      	movs	r1, #36	@ 0x24
 80050bc:	f64b 2001 	movw	r0, #47617	@ 0xba01
 80050c0:	f7fb fc80 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBA02, 0x24);
 80050c4:	2124      	movs	r1, #36	@ 0x24
 80050c6:	f64b 2002 	movw	r0, #47618	@ 0xba02
 80050ca:	f7fb fc7b 	bl	80009c4 <lcd_write_reg>
        /* VGMP/VGSP 4.5V/0V */
        lcd_write_reg(0xBC00, 0x00);
 80050ce:	2100      	movs	r1, #0
 80050d0:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 80050d4:	f7fb fc76 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x78);
 80050d8:	2178      	movs	r1, #120	@ 0x78
 80050da:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 80050de:	f7fb fc71 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 80050e2:	2100      	movs	r1, #0
 80050e4:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 80050e8:	f7fb fc6c 	bl	80009c4 <lcd_write_reg>
        /* VGMN/VGSN -4.5V/0V */
        lcd_write_reg(0xBD00, 0x00);
 80050ec:	2100      	movs	r1, #0
 80050ee:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 80050f2:	f7fb fc67 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBD01, 0x78);
 80050f6:	2178      	movs	r1, #120	@ 0x78
 80050f8:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 80050fc:	f7fb fc62 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBD02, 0x00);
 8005100:	2100      	movs	r1, #0
 8005102:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8005106:	f7fb fc5d 	bl	80009c4 <lcd_write_reg>
        /* VCOM */
        lcd_write_reg(0xBE00, 0x00);
 800510a:	2100      	movs	r1, #0
 800510c:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8005110:	f7fb fc58 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBE01, 0x64);
 8005114:	2164      	movs	r1, #100	@ 0x64
 8005116:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 800511a:	f7fb fc53 	bl	80009c4 <lcd_write_reg>
        /* Gamma Setting */
        lcd_write_reg(0xD100, 0x00);
 800511e:	2100      	movs	r1, #0
 8005120:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8005124:	f7fb fc4e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD101, 0x33);
 8005128:	2133      	movs	r1, #51	@ 0x33
 800512a:	f24d 1001 	movw	r0, #53505	@ 0xd101
 800512e:	f7fb fc49 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD102, 0x00);
 8005132:	2100      	movs	r1, #0
 8005134:	f24d 1002 	movw	r0, #53506	@ 0xd102
 8005138:	f7fb fc44 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD103, 0x34);
 800513c:	2134      	movs	r1, #52	@ 0x34
 800513e:	f24d 1003 	movw	r0, #53507	@ 0xd103
 8005142:	f7fb fc3f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD104, 0x00);
 8005146:	2100      	movs	r1, #0
 8005148:	f24d 1004 	movw	r0, #53508	@ 0xd104
 800514c:	f7fb fc3a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD105, 0x3A);
 8005150:	213a      	movs	r1, #58	@ 0x3a
 8005152:	f24d 1005 	movw	r0, #53509	@ 0xd105
 8005156:	f7fb fc35 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD106, 0x00);
 800515a:	2100      	movs	r1, #0
 800515c:	f24d 1006 	movw	r0, #53510	@ 0xd106
 8005160:	f7fb fc30 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD107, 0x4A);
 8005164:	214a      	movs	r1, #74	@ 0x4a
 8005166:	f24d 1007 	movw	r0, #53511	@ 0xd107
 800516a:	f7fb fc2b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD108, 0x00);
 800516e:	2100      	movs	r1, #0
 8005170:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8005174:	f7fb fc26 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD109, 0x5C);
 8005178:	215c      	movs	r1, #92	@ 0x5c
 800517a:	f24d 1009 	movw	r0, #53513	@ 0xd109
 800517e:	f7fb fc21 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD10A, 0x00);
 8005182:	2100      	movs	r1, #0
 8005184:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8005188:	f7fb fc1c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD10B, 0x81);
 800518c:	2181      	movs	r1, #129	@ 0x81
 800518e:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8005192:	f7fb fc17 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD10C, 0x00);
 8005196:	2100      	movs	r1, #0
 8005198:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 800519c:	f7fb fc12 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD10D, 0xA6);
 80051a0:	21a6      	movs	r1, #166	@ 0xa6
 80051a2:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 80051a6:	f7fb fc0d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD10E, 0x00);
 80051aa:	2100      	movs	r1, #0
 80051ac:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 80051b0:	f7fb fc08 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD10F, 0xE5);
 80051b4:	21e5      	movs	r1, #229	@ 0xe5
 80051b6:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 80051ba:	f7fb fc03 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD110, 0x01);
 80051be:	2101      	movs	r1, #1
 80051c0:	f24d 1010 	movw	r0, #53520	@ 0xd110
 80051c4:	f7fb fbfe 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD111, 0x13);
 80051c8:	2113      	movs	r1, #19
 80051ca:	f24d 1011 	movw	r0, #53521	@ 0xd111
 80051ce:	f7fb fbf9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD112, 0x01);
 80051d2:	2101      	movs	r1, #1
 80051d4:	f24d 1012 	movw	r0, #53522	@ 0xd112
 80051d8:	f7fb fbf4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD113, 0x54);
 80051dc:	2154      	movs	r1, #84	@ 0x54
 80051de:	f24d 1013 	movw	r0, #53523	@ 0xd113
 80051e2:	f7fb fbef 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD114, 0x01);
 80051e6:	2101      	movs	r1, #1
 80051e8:	f24d 1014 	movw	r0, #53524	@ 0xd114
 80051ec:	f7fb fbea 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD115, 0x82);
 80051f0:	2182      	movs	r1, #130	@ 0x82
 80051f2:	f24d 1015 	movw	r0, #53525	@ 0xd115
 80051f6:	f7fb fbe5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD116, 0x01);
 80051fa:	2101      	movs	r1, #1
 80051fc:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8005200:	f7fb fbe0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD117, 0xCA);
 8005204:	21ca      	movs	r1, #202	@ 0xca
 8005206:	f24d 1017 	movw	r0, #53527	@ 0xd117
 800520a:	f7fb fbdb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD118, 0x02);
 800520e:	2102      	movs	r1, #2
 8005210:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8005214:	f7fb fbd6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD119, 0x00);
 8005218:	2100      	movs	r1, #0
 800521a:	f24d 1019 	movw	r0, #53529	@ 0xd119
 800521e:	f7fb fbd1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD11A, 0x02);
 8005222:	2102      	movs	r1, #2
 8005224:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 8005228:	f7fb fbcc 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD11B, 0x01);
 800522c:	2101      	movs	r1, #1
 800522e:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 8005232:	f7fb fbc7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD11C, 0x02);
 8005236:	2102      	movs	r1, #2
 8005238:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 800523c:	f7fb fbc2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD11D, 0x34);
 8005240:	2134      	movs	r1, #52	@ 0x34
 8005242:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 8005246:	f7fb fbbd 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD11E, 0x02);
 800524a:	2102      	movs	r1, #2
 800524c:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8005250:	f7fb fbb8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD11F, 0x67);
 8005254:	2167      	movs	r1, #103	@ 0x67
 8005256:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 800525a:	f7fb fbb3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD120, 0x02);
 800525e:	2102      	movs	r1, #2
 8005260:	f24d 1020 	movw	r0, #53536	@ 0xd120
 8005264:	f7fb fbae 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD121, 0x84);
 8005268:	2184      	movs	r1, #132	@ 0x84
 800526a:	f24d 1021 	movw	r0, #53537	@ 0xd121
 800526e:	f7fb fba9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD122, 0x02);
 8005272:	2102      	movs	r1, #2
 8005274:	f24d 1022 	movw	r0, #53538	@ 0xd122
 8005278:	f7fb fba4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD123, 0xA4);
 800527c:	21a4      	movs	r1, #164	@ 0xa4
 800527e:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8005282:	f7fb fb9f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD124, 0x02);
 8005286:	2102      	movs	r1, #2
 8005288:	f24d 1024 	movw	r0, #53540	@ 0xd124
 800528c:	f7fb fb9a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD125, 0xB7);
 8005290:	21b7      	movs	r1, #183	@ 0xb7
 8005292:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8005296:	f7fb fb95 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD126, 0x02);
 800529a:	2102      	movs	r1, #2
 800529c:	f24d 1026 	movw	r0, #53542	@ 0xd126
 80052a0:	f7fb fb90 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD127, 0xCF);
 80052a4:	21cf      	movs	r1, #207	@ 0xcf
 80052a6:	f24d 1027 	movw	r0, #53543	@ 0xd127
 80052aa:	f7fb fb8b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD128, 0x02);
 80052ae:	2102      	movs	r1, #2
 80052b0:	f24d 1028 	movw	r0, #53544	@ 0xd128
 80052b4:	f7fb fb86 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD129, 0xDE);
 80052b8:	21de      	movs	r1, #222	@ 0xde
 80052ba:	f24d 1029 	movw	r0, #53545	@ 0xd129
 80052be:	f7fb fb81 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD12A, 0x02);
 80052c2:	2102      	movs	r1, #2
 80052c4:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 80052c8:	f7fb fb7c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD12B, 0xF2);
 80052cc:	21f2      	movs	r1, #242	@ 0xf2
 80052ce:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 80052d2:	f7fb fb77 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD12C, 0x02);
 80052d6:	2102      	movs	r1, #2
 80052d8:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 80052dc:	f7fb fb72 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD12D, 0xFE);
 80052e0:	21fe      	movs	r1, #254	@ 0xfe
 80052e2:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 80052e6:	f7fb fb6d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD12E, 0x03);
 80052ea:	2103      	movs	r1, #3
 80052ec:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 80052f0:	f7fb fb68 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD12F, 0x10);
 80052f4:	2110      	movs	r1, #16
 80052f6:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 80052fa:	f7fb fb63 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD130, 0x03);
 80052fe:	2103      	movs	r1, #3
 8005300:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8005304:	f7fb fb5e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD131, 0x33);
 8005308:	2133      	movs	r1, #51	@ 0x33
 800530a:	f24d 1031 	movw	r0, #53553	@ 0xd131
 800530e:	f7fb fb59 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD132, 0x03);
 8005312:	2103      	movs	r1, #3
 8005314:	f24d 1032 	movw	r0, #53554	@ 0xd132
 8005318:	f7fb fb54 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD133, 0x6D);
 800531c:	216d      	movs	r1, #109	@ 0x6d
 800531e:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8005322:	f7fb fb4f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD200, 0x00);
 8005326:	2100      	movs	r1, #0
 8005328:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 800532c:	f7fb fb4a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD201, 0x33);
 8005330:	2133      	movs	r1, #51	@ 0x33
 8005332:	f24d 2001 	movw	r0, #53761	@ 0xd201
 8005336:	f7fb fb45 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD202, 0x00);
 800533a:	2100      	movs	r1, #0
 800533c:	f24d 2002 	movw	r0, #53762	@ 0xd202
 8005340:	f7fb fb40 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD203, 0x34);
 8005344:	2134      	movs	r1, #52	@ 0x34
 8005346:	f24d 2003 	movw	r0, #53763	@ 0xd203
 800534a:	f7fb fb3b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD204, 0x00);
 800534e:	2100      	movs	r1, #0
 8005350:	f24d 2004 	movw	r0, #53764	@ 0xd204
 8005354:	f7fb fb36 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD205, 0x3A);
 8005358:	213a      	movs	r1, #58	@ 0x3a
 800535a:	f24d 2005 	movw	r0, #53765	@ 0xd205
 800535e:	f7fb fb31 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD206, 0x00);
 8005362:	2100      	movs	r1, #0
 8005364:	f24d 2006 	movw	r0, #53766	@ 0xd206
 8005368:	f7fb fb2c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD207, 0x4A);
 800536c:	214a      	movs	r1, #74	@ 0x4a
 800536e:	f24d 2007 	movw	r0, #53767	@ 0xd207
 8005372:	f7fb fb27 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD208, 0x00);
 8005376:	2100      	movs	r1, #0
 8005378:	f24d 2008 	movw	r0, #53768	@ 0xd208
 800537c:	f7fb fb22 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD209, 0x5C);
 8005380:	215c      	movs	r1, #92	@ 0x5c
 8005382:	f24d 2009 	movw	r0, #53769	@ 0xd209
 8005386:	f7fb fb1d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD20A, 0x00);
 800538a:	2100      	movs	r1, #0
 800538c:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8005390:	f7fb fb18 	bl	80009c4 <lcd_write_reg>

        lcd_write_reg(0xD20B, 0x81);
 8005394:	2181      	movs	r1, #129	@ 0x81
 8005396:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 800539a:	f7fb fb13 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD20C, 0x00);
 800539e:	2100      	movs	r1, #0
 80053a0:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 80053a4:	f7fb fb0e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD20D, 0xA6);
 80053a8:	21a6      	movs	r1, #166	@ 0xa6
 80053aa:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 80053ae:	f7fb fb09 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD20E, 0x00);
 80053b2:	2100      	movs	r1, #0
 80053b4:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 80053b8:	f7fb fb04 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD20F, 0xE5);
 80053bc:	21e5      	movs	r1, #229	@ 0xe5
 80053be:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 80053c2:	f7fb faff 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD210, 0x01);
 80053c6:	2101      	movs	r1, #1
 80053c8:	f24d 2010 	movw	r0, #53776	@ 0xd210
 80053cc:	f7fb fafa 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD211, 0x13);
 80053d0:	2113      	movs	r1, #19
 80053d2:	f24d 2011 	movw	r0, #53777	@ 0xd211
 80053d6:	f7fb faf5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD212, 0x01);
 80053da:	2101      	movs	r1, #1
 80053dc:	f24d 2012 	movw	r0, #53778	@ 0xd212
 80053e0:	f7fb faf0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD213, 0x54);
 80053e4:	2154      	movs	r1, #84	@ 0x54
 80053e6:	f24d 2013 	movw	r0, #53779	@ 0xd213
 80053ea:	f7fb faeb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD214, 0x01);
 80053ee:	2101      	movs	r1, #1
 80053f0:	f24d 2014 	movw	r0, #53780	@ 0xd214
 80053f4:	f7fb fae6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD215, 0x82);
 80053f8:	2182      	movs	r1, #130	@ 0x82
 80053fa:	f24d 2015 	movw	r0, #53781	@ 0xd215
 80053fe:	f7fb fae1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD216, 0x01);
 8005402:	2101      	movs	r1, #1
 8005404:	f24d 2016 	movw	r0, #53782	@ 0xd216
 8005408:	f7fb fadc 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD217, 0xCA);
 800540c:	21ca      	movs	r1, #202	@ 0xca
 800540e:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8005412:	f7fb fad7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD218, 0x02);
 8005416:	2102      	movs	r1, #2
 8005418:	f24d 2018 	movw	r0, #53784	@ 0xd218
 800541c:	f7fb fad2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD219, 0x00);
 8005420:	2100      	movs	r1, #0
 8005422:	f24d 2019 	movw	r0, #53785	@ 0xd219
 8005426:	f7fb facd 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD21A, 0x02);
 800542a:	2102      	movs	r1, #2
 800542c:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 8005430:	f7fb fac8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD21B, 0x01);
 8005434:	2101      	movs	r1, #1
 8005436:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 800543a:	f7fb fac3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD21C, 0x02);
 800543e:	2102      	movs	r1, #2
 8005440:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 8005444:	f7fb fabe 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD21D, 0x34);
 8005448:	2134      	movs	r1, #52	@ 0x34
 800544a:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 800544e:	f7fb fab9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD21E, 0x02);
 8005452:	2102      	movs	r1, #2
 8005454:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 8005458:	f7fb fab4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD21F, 0x67);
 800545c:	2167      	movs	r1, #103	@ 0x67
 800545e:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 8005462:	f7fb faaf 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD220, 0x02);
 8005466:	2102      	movs	r1, #2
 8005468:	f24d 2020 	movw	r0, #53792	@ 0xd220
 800546c:	f7fb faaa 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD221, 0x84);
 8005470:	2184      	movs	r1, #132	@ 0x84
 8005472:	f24d 2021 	movw	r0, #53793	@ 0xd221
 8005476:	f7fb faa5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD222, 0x02);
 800547a:	2102      	movs	r1, #2
 800547c:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8005480:	f7fb faa0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD223, 0xA4);
 8005484:	21a4      	movs	r1, #164	@ 0xa4
 8005486:	f24d 2023 	movw	r0, #53795	@ 0xd223
 800548a:	f7fb fa9b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD224, 0x02);
 800548e:	2102      	movs	r1, #2
 8005490:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8005494:	f7fb fa96 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD225, 0xB7);
 8005498:	21b7      	movs	r1, #183	@ 0xb7
 800549a:	f24d 2025 	movw	r0, #53797	@ 0xd225
 800549e:	f7fb fa91 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD226, 0x02);
 80054a2:	2102      	movs	r1, #2
 80054a4:	f24d 2026 	movw	r0, #53798	@ 0xd226
 80054a8:	f7fb fa8c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD227, 0xCF);
 80054ac:	21cf      	movs	r1, #207	@ 0xcf
 80054ae:	f24d 2027 	movw	r0, #53799	@ 0xd227
 80054b2:	f7fb fa87 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD228, 0x02);
 80054b6:	2102      	movs	r1, #2
 80054b8:	f24d 2028 	movw	r0, #53800	@ 0xd228
 80054bc:	f7fb fa82 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD229, 0xDE);
 80054c0:	21de      	movs	r1, #222	@ 0xde
 80054c2:	f24d 2029 	movw	r0, #53801	@ 0xd229
 80054c6:	f7fb fa7d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD22A, 0x02);
 80054ca:	2102      	movs	r1, #2
 80054cc:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 80054d0:	f7fb fa78 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD22B, 0xF2);
 80054d4:	21f2      	movs	r1, #242	@ 0xf2
 80054d6:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 80054da:	f7fb fa73 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD22C, 0x02);
 80054de:	2102      	movs	r1, #2
 80054e0:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 80054e4:	f7fb fa6e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD22D, 0xFE);
 80054e8:	21fe      	movs	r1, #254	@ 0xfe
 80054ea:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 80054ee:	f7fb fa69 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD22E, 0x03);
 80054f2:	2103      	movs	r1, #3
 80054f4:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 80054f8:	f7fb fa64 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD22F, 0x10);
 80054fc:	2110      	movs	r1, #16
 80054fe:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8005502:	f7fb fa5f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD230, 0x03);
 8005506:	2103      	movs	r1, #3
 8005508:	f24d 2030 	movw	r0, #53808	@ 0xd230
 800550c:	f7fb fa5a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD231, 0x33);
 8005510:	2133      	movs	r1, #51	@ 0x33
 8005512:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8005516:	f7fb fa55 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD232, 0x03);
 800551a:	2103      	movs	r1, #3
 800551c:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8005520:	f7fb fa50 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD233, 0x6D);
 8005524:	216d      	movs	r1, #109	@ 0x6d
 8005526:	f24d 2033 	movw	r0, #53811	@ 0xd233
 800552a:	f7fb fa4b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD300, 0x00);
 800552e:	2100      	movs	r1, #0
 8005530:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 8005534:	f7fb fa46 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD301, 0x33);
 8005538:	2133      	movs	r1, #51	@ 0x33
 800553a:	f24d 3001 	movw	r0, #54017	@ 0xd301
 800553e:	f7fb fa41 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD302, 0x00);
 8005542:	2100      	movs	r1, #0
 8005544:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8005548:	f7fb fa3c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD303, 0x34);
 800554c:	2134      	movs	r1, #52	@ 0x34
 800554e:	f24d 3003 	movw	r0, #54019	@ 0xd303
 8005552:	f7fb fa37 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD304, 0x00);
 8005556:	2100      	movs	r1, #0
 8005558:	f24d 3004 	movw	r0, #54020	@ 0xd304
 800555c:	f7fb fa32 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD305, 0x3A);
 8005560:	213a      	movs	r1, #58	@ 0x3a
 8005562:	f24d 3005 	movw	r0, #54021	@ 0xd305
 8005566:	f7fb fa2d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD306, 0x00);
 800556a:	2100      	movs	r1, #0
 800556c:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8005570:	f7fb fa28 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD307, 0x4A);
 8005574:	214a      	movs	r1, #74	@ 0x4a
 8005576:	f24d 3007 	movw	r0, #54023	@ 0xd307
 800557a:	f7fb fa23 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD308, 0x00);
 800557e:	2100      	movs	r1, #0
 8005580:	f24d 3008 	movw	r0, #54024	@ 0xd308
 8005584:	f7fb fa1e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD309, 0x5C);
 8005588:	215c      	movs	r1, #92	@ 0x5c
 800558a:	f24d 3009 	movw	r0, #54025	@ 0xd309
 800558e:	f7fb fa19 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD30A, 0x00);
 8005592:	2100      	movs	r1, #0
 8005594:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8005598:	f7fb fa14 	bl	80009c4 <lcd_write_reg>

        lcd_write_reg(0xD30B, 0x81);
 800559c:	2181      	movs	r1, #129	@ 0x81
 800559e:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 80055a2:	f7fb fa0f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD30C, 0x00);
 80055a6:	2100      	movs	r1, #0
 80055a8:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 80055ac:	f7fb fa0a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD30D, 0xA6);
 80055b0:	21a6      	movs	r1, #166	@ 0xa6
 80055b2:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 80055b6:	f7fb fa05 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD30E, 0x00);
 80055ba:	2100      	movs	r1, #0
 80055bc:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 80055c0:	f7fb fa00 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD30F, 0xE5);
 80055c4:	21e5      	movs	r1, #229	@ 0xe5
 80055c6:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 80055ca:	f7fb f9fb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD310, 0x01);
 80055ce:	2101      	movs	r1, #1
 80055d0:	f24d 3010 	movw	r0, #54032	@ 0xd310
 80055d4:	f7fb f9f6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD311, 0x13);
 80055d8:	2113      	movs	r1, #19
 80055da:	f24d 3011 	movw	r0, #54033	@ 0xd311
 80055de:	f7fb f9f1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD312, 0x01);
 80055e2:	2101      	movs	r1, #1
 80055e4:	f24d 3012 	movw	r0, #54034	@ 0xd312
 80055e8:	f7fb f9ec 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD313, 0x54);
 80055ec:	2154      	movs	r1, #84	@ 0x54
 80055ee:	f24d 3013 	movw	r0, #54035	@ 0xd313
 80055f2:	f7fb f9e7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD314, 0x01);
 80055f6:	2101      	movs	r1, #1
 80055f8:	f24d 3014 	movw	r0, #54036	@ 0xd314
 80055fc:	f7fb f9e2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD315, 0x82);
 8005600:	2182      	movs	r1, #130	@ 0x82
 8005602:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8005606:	f7fb f9dd 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD316, 0x01);
 800560a:	2101      	movs	r1, #1
 800560c:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8005610:	f7fb f9d8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD317, 0xCA);
 8005614:	21ca      	movs	r1, #202	@ 0xca
 8005616:	f24d 3017 	movw	r0, #54039	@ 0xd317
 800561a:	f7fb f9d3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD318, 0x02);
 800561e:	2102      	movs	r1, #2
 8005620:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8005624:	f7fb f9ce 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD319, 0x00);
 8005628:	2100      	movs	r1, #0
 800562a:	f24d 3019 	movw	r0, #54041	@ 0xd319
 800562e:	f7fb f9c9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD31A, 0x02);
 8005632:	2102      	movs	r1, #2
 8005634:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8005638:	f7fb f9c4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD31B, 0x01);
 800563c:	2101      	movs	r1, #1
 800563e:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 8005642:	f7fb f9bf 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD31C, 0x02);
 8005646:	2102      	movs	r1, #2
 8005648:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 800564c:	f7fb f9ba 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD31D, 0x34);
 8005650:	2134      	movs	r1, #52	@ 0x34
 8005652:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 8005656:	f7fb f9b5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD31E, 0x02);
 800565a:	2102      	movs	r1, #2
 800565c:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 8005660:	f7fb f9b0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD31F, 0x67);
 8005664:	2167      	movs	r1, #103	@ 0x67
 8005666:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 800566a:	f7fb f9ab 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD320, 0x02);
 800566e:	2102      	movs	r1, #2
 8005670:	f24d 3020 	movw	r0, #54048	@ 0xd320
 8005674:	f7fb f9a6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD321, 0x84);
 8005678:	2184      	movs	r1, #132	@ 0x84
 800567a:	f24d 3021 	movw	r0, #54049	@ 0xd321
 800567e:	f7fb f9a1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD322, 0x02);
 8005682:	2102      	movs	r1, #2
 8005684:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8005688:	f7fb f99c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD323, 0xA4);
 800568c:	21a4      	movs	r1, #164	@ 0xa4
 800568e:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8005692:	f7fb f997 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD324, 0x02);
 8005696:	2102      	movs	r1, #2
 8005698:	f24d 3024 	movw	r0, #54052	@ 0xd324
 800569c:	f7fb f992 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD325, 0xB7);
 80056a0:	21b7      	movs	r1, #183	@ 0xb7
 80056a2:	f24d 3025 	movw	r0, #54053	@ 0xd325
 80056a6:	f7fb f98d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD326, 0x02);
 80056aa:	2102      	movs	r1, #2
 80056ac:	f24d 3026 	movw	r0, #54054	@ 0xd326
 80056b0:	f7fb f988 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD327, 0xCF);
 80056b4:	21cf      	movs	r1, #207	@ 0xcf
 80056b6:	f24d 3027 	movw	r0, #54055	@ 0xd327
 80056ba:	f7fb f983 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD328, 0x02);
 80056be:	2102      	movs	r1, #2
 80056c0:	f24d 3028 	movw	r0, #54056	@ 0xd328
 80056c4:	f7fb f97e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD329, 0xDE);
 80056c8:	21de      	movs	r1, #222	@ 0xde
 80056ca:	f24d 3029 	movw	r0, #54057	@ 0xd329
 80056ce:	f7fb f979 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD32A, 0x02);
 80056d2:	2102      	movs	r1, #2
 80056d4:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 80056d8:	f7fb f974 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD32B, 0xF2);
 80056dc:	21f2      	movs	r1, #242	@ 0xf2
 80056de:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 80056e2:	f7fb f96f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD32C, 0x02);
 80056e6:	2102      	movs	r1, #2
 80056e8:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 80056ec:	f7fb f96a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD32D, 0xFE);
 80056f0:	21fe      	movs	r1, #254	@ 0xfe
 80056f2:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 80056f6:	f7fb f965 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD32E, 0x03);
 80056fa:	2103      	movs	r1, #3
 80056fc:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8005700:	f7fb f960 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD32F, 0x10);
 8005704:	2110      	movs	r1, #16
 8005706:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 800570a:	f7fb f95b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD330, 0x03);
 800570e:	2103      	movs	r1, #3
 8005710:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8005714:	f7fb f956 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD331, 0x33);
 8005718:	2133      	movs	r1, #51	@ 0x33
 800571a:	f24d 3031 	movw	r0, #54065	@ 0xd331
 800571e:	f7fb f951 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD332, 0x03);
 8005722:	2103      	movs	r1, #3
 8005724:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8005728:	f7fb f94c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD333, 0x6D);
 800572c:	216d      	movs	r1, #109	@ 0x6d
 800572e:	f24d 3033 	movw	r0, #54067	@ 0xd333
 8005732:	f7fb f947 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD400, 0x00);
 8005736:	2100      	movs	r1, #0
 8005738:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 800573c:	f7fb f942 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD401, 0x33);
 8005740:	2133      	movs	r1, #51	@ 0x33
 8005742:	f24d 4001 	movw	r0, #54273	@ 0xd401
 8005746:	f7fb f93d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD402, 0x00);
 800574a:	2100      	movs	r1, #0
 800574c:	f24d 4002 	movw	r0, #54274	@ 0xd402
 8005750:	f7fb f938 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD403, 0x34);
 8005754:	2134      	movs	r1, #52	@ 0x34
 8005756:	f24d 4003 	movw	r0, #54275	@ 0xd403
 800575a:	f7fb f933 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD404, 0x00);
 800575e:	2100      	movs	r1, #0
 8005760:	f24d 4004 	movw	r0, #54276	@ 0xd404
 8005764:	f7fb f92e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD405, 0x3A);
 8005768:	213a      	movs	r1, #58	@ 0x3a
 800576a:	f24d 4005 	movw	r0, #54277	@ 0xd405
 800576e:	f7fb f929 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD406, 0x00);
 8005772:	2100      	movs	r1, #0
 8005774:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8005778:	f7fb f924 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD407, 0x4A);
 800577c:	214a      	movs	r1, #74	@ 0x4a
 800577e:	f24d 4007 	movw	r0, #54279	@ 0xd407
 8005782:	f7fb f91f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD408, 0x00);
 8005786:	2100      	movs	r1, #0
 8005788:	f24d 4008 	movw	r0, #54280	@ 0xd408
 800578c:	f7fb f91a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD409, 0x5C);
 8005790:	215c      	movs	r1, #92	@ 0x5c
 8005792:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8005796:	f7fb f915 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD40A, 0x00);
 800579a:	2100      	movs	r1, #0
 800579c:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 80057a0:	f7fb f910 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD40B, 0x81);
 80057a4:	2181      	movs	r1, #129	@ 0x81
 80057a6:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 80057aa:	f7fb f90b 	bl	80009c4 <lcd_write_reg>

        lcd_write_reg(0xD40C, 0x00);
 80057ae:	2100      	movs	r1, #0
 80057b0:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 80057b4:	f7fb f906 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD40D, 0xA6);
 80057b8:	21a6      	movs	r1, #166	@ 0xa6
 80057ba:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 80057be:	f7fb f901 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD40E, 0x00);
 80057c2:	2100      	movs	r1, #0
 80057c4:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 80057c8:	f7fb f8fc 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD40F, 0xE5);
 80057cc:	21e5      	movs	r1, #229	@ 0xe5
 80057ce:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 80057d2:	f7fb f8f7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD410, 0x01);
 80057d6:	2101      	movs	r1, #1
 80057d8:	f24d 4010 	movw	r0, #54288	@ 0xd410
 80057dc:	f7fb f8f2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD411, 0x13);
 80057e0:	2113      	movs	r1, #19
 80057e2:	f24d 4011 	movw	r0, #54289	@ 0xd411
 80057e6:	f7fb f8ed 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD412, 0x01);
 80057ea:	2101      	movs	r1, #1
 80057ec:	f24d 4012 	movw	r0, #54290	@ 0xd412
 80057f0:	f7fb f8e8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD413, 0x54);
 80057f4:	2154      	movs	r1, #84	@ 0x54
 80057f6:	f24d 4013 	movw	r0, #54291	@ 0xd413
 80057fa:	f7fb f8e3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD414, 0x01);
 80057fe:	2101      	movs	r1, #1
 8005800:	f24d 4014 	movw	r0, #54292	@ 0xd414
 8005804:	f7fb f8de 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD415, 0x82);
 8005808:	2182      	movs	r1, #130	@ 0x82
 800580a:	f24d 4015 	movw	r0, #54293	@ 0xd415
 800580e:	f7fb f8d9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD416, 0x01);
 8005812:	2101      	movs	r1, #1
 8005814:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8005818:	f7fb f8d4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD417, 0xCA);
 800581c:	21ca      	movs	r1, #202	@ 0xca
 800581e:	f24d 4017 	movw	r0, #54295	@ 0xd417
 8005822:	f7fb f8cf 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD418, 0x02);
 8005826:	2102      	movs	r1, #2
 8005828:	f24d 4018 	movw	r0, #54296	@ 0xd418
 800582c:	f7fb f8ca 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD419, 0x00);
 8005830:	2100      	movs	r1, #0
 8005832:	f24d 4019 	movw	r0, #54297	@ 0xd419
 8005836:	f7fb f8c5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD41A, 0x02);
 800583a:	2102      	movs	r1, #2
 800583c:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 8005840:	f7fb f8c0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD41B, 0x01);
 8005844:	2101      	movs	r1, #1
 8005846:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 800584a:	f7fb f8bb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD41C, 0x02);
 800584e:	2102      	movs	r1, #2
 8005850:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 8005854:	f7fb f8b6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD41D, 0x34);
 8005858:	2134      	movs	r1, #52	@ 0x34
 800585a:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 800585e:	f7fb f8b1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD41E, 0x02);
 8005862:	2102      	movs	r1, #2
 8005864:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 8005868:	f7fb f8ac 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD41F, 0x67);
 800586c:	2167      	movs	r1, #103	@ 0x67
 800586e:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 8005872:	f7fb f8a7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD420, 0x02);
 8005876:	2102      	movs	r1, #2
 8005878:	f24d 4020 	movw	r0, #54304	@ 0xd420
 800587c:	f7fb f8a2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD421, 0x84);
 8005880:	2184      	movs	r1, #132	@ 0x84
 8005882:	f24d 4021 	movw	r0, #54305	@ 0xd421
 8005886:	f7fb f89d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD422, 0x02);
 800588a:	2102      	movs	r1, #2
 800588c:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8005890:	f7fb f898 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD423, 0xA4);
 8005894:	21a4      	movs	r1, #164	@ 0xa4
 8005896:	f24d 4023 	movw	r0, #54307	@ 0xd423
 800589a:	f7fb f893 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD424, 0x02);
 800589e:	2102      	movs	r1, #2
 80058a0:	f24d 4024 	movw	r0, #54308	@ 0xd424
 80058a4:	f7fb f88e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD425, 0xB7);
 80058a8:	21b7      	movs	r1, #183	@ 0xb7
 80058aa:	f24d 4025 	movw	r0, #54309	@ 0xd425
 80058ae:	f7fb f889 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD426, 0x02);
 80058b2:	2102      	movs	r1, #2
 80058b4:	f24d 4026 	movw	r0, #54310	@ 0xd426
 80058b8:	f7fb f884 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD427, 0xCF);
 80058bc:	21cf      	movs	r1, #207	@ 0xcf
 80058be:	f24d 4027 	movw	r0, #54311	@ 0xd427
 80058c2:	f7fb f87f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD428, 0x02);
 80058c6:	2102      	movs	r1, #2
 80058c8:	f24d 4028 	movw	r0, #54312	@ 0xd428
 80058cc:	f7fb f87a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD429, 0xDE);
 80058d0:	21de      	movs	r1, #222	@ 0xde
 80058d2:	f24d 4029 	movw	r0, #54313	@ 0xd429
 80058d6:	f7fb f875 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD42A, 0x02);
 80058da:	2102      	movs	r1, #2
 80058dc:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 80058e0:	f7fb f870 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD42B, 0xF2);
 80058e4:	21f2      	movs	r1, #242	@ 0xf2
 80058e6:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 80058ea:	f7fb f86b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD42C, 0x02);
 80058ee:	2102      	movs	r1, #2
 80058f0:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 80058f4:	f7fb f866 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD42D, 0xFE);
 80058f8:	21fe      	movs	r1, #254	@ 0xfe
 80058fa:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 80058fe:	f7fb f861 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD42E, 0x03);
 8005902:	2103      	movs	r1, #3
 8005904:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 8005908:	f7fb f85c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD42F, 0x10);
 800590c:	2110      	movs	r1, #16
 800590e:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8005912:	f7fb f857 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD430, 0x03);
 8005916:	2103      	movs	r1, #3
 8005918:	f24d 4030 	movw	r0, #54320	@ 0xd430
 800591c:	f7fb f852 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD431, 0x33);
 8005920:	2133      	movs	r1, #51	@ 0x33
 8005922:	f24d 4031 	movw	r0, #54321	@ 0xd431
 8005926:	f7fb f84d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD432, 0x03);
 800592a:	2103      	movs	r1, #3
 800592c:	f24d 4032 	movw	r0, #54322	@ 0xd432
 8005930:	f7fb f848 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD433, 0x6D);
 8005934:	216d      	movs	r1, #109	@ 0x6d
 8005936:	f24d 4033 	movw	r0, #54323	@ 0xd433
 800593a:	f7fb f843 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD500, 0x00);
 800593e:	2100      	movs	r1, #0
 8005940:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 8005944:	f7fb f83e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD501, 0x33);
 8005948:	2133      	movs	r1, #51	@ 0x33
 800594a:	f24d 5001 	movw	r0, #54529	@ 0xd501
 800594e:	f7fb f839 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD502, 0x00);
 8005952:	2100      	movs	r1, #0
 8005954:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8005958:	f7fb f834 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD503, 0x34);
 800595c:	2134      	movs	r1, #52	@ 0x34
 800595e:	f24d 5003 	movw	r0, #54531	@ 0xd503
 8005962:	f7fb f82f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD504, 0x00);
 8005966:	2100      	movs	r1, #0
 8005968:	f24d 5004 	movw	r0, #54532	@ 0xd504
 800596c:	f7fb f82a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD505, 0x3A);
 8005970:	213a      	movs	r1, #58	@ 0x3a
 8005972:	f24d 5005 	movw	r0, #54533	@ 0xd505
 8005976:	f7fb f825 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD506, 0x00);
 800597a:	2100      	movs	r1, #0
 800597c:	f24d 5006 	movw	r0, #54534	@ 0xd506
 8005980:	f7fb f820 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD507, 0x4A);
 8005984:	214a      	movs	r1, #74	@ 0x4a
 8005986:	f24d 5007 	movw	r0, #54535	@ 0xd507
 800598a:	f7fb f81b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD508, 0x00);
 800598e:	2100      	movs	r1, #0
 8005990:	f24d 5008 	movw	r0, #54536	@ 0xd508
 8005994:	f7fb f816 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD509, 0x5C);
 8005998:	215c      	movs	r1, #92	@ 0x5c
 800599a:	f24d 5009 	movw	r0, #54537	@ 0xd509
 800599e:	f7fb f811 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD50A, 0x00);
 80059a2:	2100      	movs	r1, #0
 80059a4:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 80059a8:	f7fb f80c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD50B, 0x81);
 80059ac:	2181      	movs	r1, #129	@ 0x81
 80059ae:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 80059b2:	f7fb f807 	bl	80009c4 <lcd_write_reg>

        lcd_write_reg(0xD50C, 0x00);
 80059b6:	2100      	movs	r1, #0
 80059b8:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 80059bc:	f7fb f802 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD50D, 0xA6);
 80059c0:	21a6      	movs	r1, #166	@ 0xa6
 80059c2:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 80059c6:	f7fa fffd 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD50E, 0x00);
 80059ca:	2100      	movs	r1, #0
 80059cc:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 80059d0:	f7fa fff8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD50F, 0xE5);
 80059d4:	21e5      	movs	r1, #229	@ 0xe5
 80059d6:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 80059da:	f7fa fff3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD510, 0x01);
 80059de:	2101      	movs	r1, #1
 80059e0:	f24d 5010 	movw	r0, #54544	@ 0xd510
 80059e4:	f7fa ffee 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD511, 0x13);
 80059e8:	2113      	movs	r1, #19
 80059ea:	f24d 5011 	movw	r0, #54545	@ 0xd511
 80059ee:	f7fa ffe9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD512, 0x01);
 80059f2:	2101      	movs	r1, #1
 80059f4:	f24d 5012 	movw	r0, #54546	@ 0xd512
 80059f8:	f7fa ffe4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD513, 0x54);
 80059fc:	2154      	movs	r1, #84	@ 0x54
 80059fe:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8005a02:	f7fa ffdf 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD514, 0x01);
 8005a06:	2101      	movs	r1, #1
 8005a08:	f24d 5014 	movw	r0, #54548	@ 0xd514
 8005a0c:	f7fa ffda 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD515, 0x82);
 8005a10:	2182      	movs	r1, #130	@ 0x82
 8005a12:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8005a16:	f7fa ffd5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD516, 0x01);
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8005a20:	f7fa ffd0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD517, 0xCA);
 8005a24:	21ca      	movs	r1, #202	@ 0xca
 8005a26:	f24d 5017 	movw	r0, #54551	@ 0xd517
 8005a2a:	f7fa ffcb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD518, 0x02);
 8005a2e:	2102      	movs	r1, #2
 8005a30:	f24d 5018 	movw	r0, #54552	@ 0xd518
 8005a34:	f7fa ffc6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD519, 0x00);
 8005a38:	2100      	movs	r1, #0
 8005a3a:	f24d 5019 	movw	r0, #54553	@ 0xd519
 8005a3e:	f7fa ffc1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD51A, 0x02);
 8005a42:	2102      	movs	r1, #2
 8005a44:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8005a48:	f7fa ffbc 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD51B, 0x01);
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 8005a52:	f7fa ffb7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD51C, 0x02);
 8005a56:	2102      	movs	r1, #2
 8005a58:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8005a5c:	f7fa ffb2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD51D, 0x34);
 8005a60:	2134      	movs	r1, #52	@ 0x34
 8005a62:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 8005a66:	f7fa ffad 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD51E, 0x02);
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 8005a70:	f7fa ffa8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD51F, 0x67);
 8005a74:	2167      	movs	r1, #103	@ 0x67
 8005a76:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 8005a7a:	f7fa ffa3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD520, 0x02);
 8005a7e:	2102      	movs	r1, #2
 8005a80:	f24d 5020 	movw	r0, #54560	@ 0xd520
 8005a84:	f7fa ff9e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD521, 0x84);
 8005a88:	2184      	movs	r1, #132	@ 0x84
 8005a8a:	f24d 5021 	movw	r0, #54561	@ 0xd521
 8005a8e:	f7fa ff99 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD522, 0x02);
 8005a92:	2102      	movs	r1, #2
 8005a94:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8005a98:	f7fa ff94 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD523, 0xA4);
 8005a9c:	21a4      	movs	r1, #164	@ 0xa4
 8005a9e:	f24d 5023 	movw	r0, #54563	@ 0xd523
 8005aa2:	f7fa ff8f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD524, 0x02);
 8005aa6:	2102      	movs	r1, #2
 8005aa8:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8005aac:	f7fa ff8a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD525, 0xB7);
 8005ab0:	21b7      	movs	r1, #183	@ 0xb7
 8005ab2:	f24d 5025 	movw	r0, #54565	@ 0xd525
 8005ab6:	f7fa ff85 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD526, 0x02);
 8005aba:	2102      	movs	r1, #2
 8005abc:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8005ac0:	f7fa ff80 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD527, 0xCF);
 8005ac4:	21cf      	movs	r1, #207	@ 0xcf
 8005ac6:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8005aca:	f7fa ff7b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD528, 0x02);
 8005ace:	2102      	movs	r1, #2
 8005ad0:	f24d 5028 	movw	r0, #54568	@ 0xd528
 8005ad4:	f7fa ff76 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD529, 0xDE);
 8005ad8:	21de      	movs	r1, #222	@ 0xde
 8005ada:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8005ade:	f7fa ff71 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD52A, 0x02);
 8005ae2:	2102      	movs	r1, #2
 8005ae4:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 8005ae8:	f7fa ff6c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD52B, 0xF2);
 8005aec:	21f2      	movs	r1, #242	@ 0xf2
 8005aee:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8005af2:	f7fa ff67 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD52C, 0x02);
 8005af6:	2102      	movs	r1, #2
 8005af8:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8005afc:	f7fa ff62 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD52D, 0xFE);
 8005b00:	21fe      	movs	r1, #254	@ 0xfe
 8005b02:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 8005b06:	f7fa ff5d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD52E, 0x03);
 8005b0a:	2103      	movs	r1, #3
 8005b0c:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8005b10:	f7fa ff58 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD52F, 0x10);
 8005b14:	2110      	movs	r1, #16
 8005b16:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8005b1a:	f7fa ff53 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD530, 0x03);
 8005b1e:	2103      	movs	r1, #3
 8005b20:	f24d 5030 	movw	r0, #54576	@ 0xd530
 8005b24:	f7fa ff4e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD531, 0x33);
 8005b28:	2133      	movs	r1, #51	@ 0x33
 8005b2a:	f24d 5031 	movw	r0, #54577	@ 0xd531
 8005b2e:	f7fa ff49 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD532, 0x03);
 8005b32:	2103      	movs	r1, #3
 8005b34:	f24d 5032 	movw	r0, #54578	@ 0xd532
 8005b38:	f7fa ff44 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD533, 0x6D);
 8005b3c:	216d      	movs	r1, #109	@ 0x6d
 8005b3e:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8005b42:	f7fa ff3f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD600, 0x00);
 8005b46:	2100      	movs	r1, #0
 8005b48:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8005b4c:	f7fa ff3a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD601, 0x33);
 8005b50:	2133      	movs	r1, #51	@ 0x33
 8005b52:	f24d 6001 	movw	r0, #54785	@ 0xd601
 8005b56:	f7fa ff35 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD602, 0x00);
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8005b60:	f7fa ff30 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD603, 0x34);
 8005b64:	2134      	movs	r1, #52	@ 0x34
 8005b66:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8005b6a:	f7fa ff2b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD604, 0x00);
 8005b6e:	2100      	movs	r1, #0
 8005b70:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8005b74:	f7fa ff26 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD605, 0x3A);
 8005b78:	213a      	movs	r1, #58	@ 0x3a
 8005b7a:	f24d 6005 	movw	r0, #54789	@ 0xd605
 8005b7e:	f7fa ff21 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD606, 0x00);
 8005b82:	2100      	movs	r1, #0
 8005b84:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8005b88:	f7fa ff1c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD607, 0x4A);
 8005b8c:	214a      	movs	r1, #74	@ 0x4a
 8005b8e:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8005b92:	f7fa ff17 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD608, 0x00);
 8005b96:	2100      	movs	r1, #0
 8005b98:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8005b9c:	f7fa ff12 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD609, 0x5C);
 8005ba0:	215c      	movs	r1, #92	@ 0x5c
 8005ba2:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8005ba6:	f7fa ff0d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD60A, 0x00);
 8005baa:	2100      	movs	r1, #0
 8005bac:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8005bb0:	f7fa ff08 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD60B, 0x81);
 8005bb4:	2181      	movs	r1, #129	@ 0x81
 8005bb6:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8005bba:	f7fa ff03 	bl	80009c4 <lcd_write_reg>

        lcd_write_reg(0xD60C, 0x00);
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 8005bc4:	f7fa fefe 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD60D, 0xA6);
 8005bc8:	21a6      	movs	r1, #166	@ 0xa6
 8005bca:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8005bce:	f7fa fef9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD60E, 0x00);
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 8005bd8:	f7fa fef4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD60F, 0xE5);
 8005bdc:	21e5      	movs	r1, #229	@ 0xe5
 8005bde:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8005be2:	f7fa feef 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD610, 0x01);
 8005be6:	2101      	movs	r1, #1
 8005be8:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8005bec:	f7fa feea 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD611, 0x13);
 8005bf0:	2113      	movs	r1, #19
 8005bf2:	f24d 6011 	movw	r0, #54801	@ 0xd611
 8005bf6:	f7fa fee5 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD612, 0x01);
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	f24d 6012 	movw	r0, #54802	@ 0xd612
 8005c00:	f7fa fee0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD613, 0x54);
 8005c04:	2154      	movs	r1, #84	@ 0x54
 8005c06:	f24d 6013 	movw	r0, #54803	@ 0xd613
 8005c0a:	f7fa fedb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD614, 0x01);
 8005c0e:	2101      	movs	r1, #1
 8005c10:	f24d 6014 	movw	r0, #54804	@ 0xd614
 8005c14:	f7fa fed6 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD615, 0x82);
 8005c18:	2182      	movs	r1, #130	@ 0x82
 8005c1a:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8005c1e:	f7fa fed1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD616, 0x01);
 8005c22:	2101      	movs	r1, #1
 8005c24:	f24d 6016 	movw	r0, #54806	@ 0xd616
 8005c28:	f7fa fecc 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD617, 0xCA);
 8005c2c:	21ca      	movs	r1, #202	@ 0xca
 8005c2e:	f24d 6017 	movw	r0, #54807	@ 0xd617
 8005c32:	f7fa fec7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD618, 0x02);
 8005c36:	2102      	movs	r1, #2
 8005c38:	f24d 6018 	movw	r0, #54808	@ 0xd618
 8005c3c:	f7fa fec2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD619, 0x00);
 8005c40:	2100      	movs	r1, #0
 8005c42:	f24d 6019 	movw	r0, #54809	@ 0xd619
 8005c46:	f7fa febd 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD61A, 0x02);
 8005c4a:	2102      	movs	r1, #2
 8005c4c:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8005c50:	f7fa feb8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD61B, 0x01);
 8005c54:	2101      	movs	r1, #1
 8005c56:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 8005c5a:	f7fa feb3 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD61C, 0x02);
 8005c5e:	2102      	movs	r1, #2
 8005c60:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8005c64:	f7fa feae 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD61D, 0x34);
 8005c68:	2134      	movs	r1, #52	@ 0x34
 8005c6a:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 8005c6e:	f7fa fea9 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD61E, 0x02);
 8005c72:	2102      	movs	r1, #2
 8005c74:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8005c78:	f7fa fea4 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD61F, 0x67);
 8005c7c:	2167      	movs	r1, #103	@ 0x67
 8005c7e:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 8005c82:	f7fa fe9f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD620, 0x02);
 8005c86:	2102      	movs	r1, #2
 8005c88:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8005c8c:	f7fa fe9a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD621, 0x84);
 8005c90:	2184      	movs	r1, #132	@ 0x84
 8005c92:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8005c96:	f7fa fe95 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD622, 0x02);
 8005c9a:	2102      	movs	r1, #2
 8005c9c:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8005ca0:	f7fa fe90 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD623, 0xA4);
 8005ca4:	21a4      	movs	r1, #164	@ 0xa4
 8005ca6:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8005caa:	f7fa fe8b 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD624, 0x02);
 8005cae:	2102      	movs	r1, #2
 8005cb0:	f24d 6024 	movw	r0, #54820	@ 0xd624
 8005cb4:	f7fa fe86 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD625, 0xB7);
 8005cb8:	21b7      	movs	r1, #183	@ 0xb7
 8005cba:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8005cbe:	f7fa fe81 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD626, 0x02);
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	f24d 6026 	movw	r0, #54822	@ 0xd626
 8005cc8:	f7fa fe7c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD627, 0xCF);
 8005ccc:	21cf      	movs	r1, #207	@ 0xcf
 8005cce:	f24d 6027 	movw	r0, #54823	@ 0xd627
 8005cd2:	f7fa fe77 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD628, 0x02);
 8005cd6:	2102      	movs	r1, #2
 8005cd8:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8005cdc:	f7fa fe72 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD629, 0xDE);
 8005ce0:	21de      	movs	r1, #222	@ 0xde
 8005ce2:	f24d 6029 	movw	r0, #54825	@ 0xd629
 8005ce6:	f7fa fe6d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD62A, 0x02);
 8005cea:	2102      	movs	r1, #2
 8005cec:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8005cf0:	f7fa fe68 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD62B, 0xF2);
 8005cf4:	21f2      	movs	r1, #242	@ 0xf2
 8005cf6:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 8005cfa:	f7fa fe63 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD62C, 0x02);
 8005cfe:	2102      	movs	r1, #2
 8005d00:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 8005d04:	f7fa fe5e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD62D, 0xFE);
 8005d08:	21fe      	movs	r1, #254	@ 0xfe
 8005d0a:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8005d0e:	f7fa fe59 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD62E, 0x03);
 8005d12:	2103      	movs	r1, #3
 8005d14:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 8005d18:	f7fa fe54 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD62F, 0x10);
 8005d1c:	2110      	movs	r1, #16
 8005d1e:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8005d22:	f7fa fe4f 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD630, 0x03);
 8005d26:	2103      	movs	r1, #3
 8005d28:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8005d2c:	f7fa fe4a 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD631, 0x33);
 8005d30:	2133      	movs	r1, #51	@ 0x33
 8005d32:	f24d 6031 	movw	r0, #54833	@ 0xd631
 8005d36:	f7fa fe45 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD632, 0x03);
 8005d3a:	2103      	movs	r1, #3
 8005d3c:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8005d40:	f7fa fe40 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xD633, 0x6D);
 8005d44:	216d      	movs	r1, #109	@ 0x6d
 8005d46:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8005d4a:	f7fa fe3b 	bl	80009c4 <lcd_write_reg>
        /* LV2 Page 0 enable */
        lcd_write_reg(0xF000, 0x55);
 8005d4e:	2155      	movs	r1, #85	@ 0x55
 8005d50:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8005d54:	f7fa fe36 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8005d58:	21aa      	movs	r1, #170	@ 0xaa
 8005d5a:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8005d5e:	f7fa fe31 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8005d62:	2152      	movs	r1, #82	@ 0x52
 8005d64:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8005d68:	f7fa fe2c 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8005d6c:	2108      	movs	r1, #8
 8005d6e:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8005d72:	f7fa fe27 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x00);
 8005d76:	2100      	movs	r1, #0
 8005d78:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8005d7c:	f7fa fe22 	bl	80009c4 <lcd_write_reg>
        /* Display control */
        lcd_write_reg(0xB100, 0xCC);
 8005d80:	21cc      	movs	r1, #204	@ 0xcc
 8005d82:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8005d86:	f7fa fe1d 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x00);
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8005d90:	f7fa fe18 	bl	80009c4 <lcd_write_reg>
        /* Source hold time */
        lcd_write_reg(0xB600, 0x05);
 8005d94:	2105      	movs	r1, #5
 8005d96:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8005d9a:	f7fa fe13 	bl	80009c4 <lcd_write_reg>
        /* Gate EQ control */
        lcd_write_reg(0xB700, 0x70);
 8005d9e:	2170      	movs	r1, #112	@ 0x70
 8005da0:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8005da4:	f7fa fe0e 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x70);
 8005da8:	2170      	movs	r1, #112	@ 0x70
 8005daa:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8005dae:	f7fa fe09 	bl	80009c4 <lcd_write_reg>
        /* Source EQ control (Mode 2) */
        lcd_write_reg(0xB800, 0x01);
 8005db2:	2101      	movs	r1, #1
 8005db4:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8005db8:	f7fa fe04 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x03);
 8005dbc:	2103      	movs	r1, #3
 8005dbe:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8005dc2:	f7fa fdff 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x03);
 8005dc6:	2103      	movs	r1, #3
 8005dc8:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8005dcc:	f7fa fdfa 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xB803, 0x03);
 8005dd0:	2103      	movs	r1, #3
 8005dd2:	f64b 0003 	movw	r0, #47107	@ 0xb803
 8005dd6:	f7fa fdf5 	bl	80009c4 <lcd_write_reg>
        /* Inversion mode (2-dot) */
        lcd_write_reg(0xBC00, 0x02);
 8005dda:	2102      	movs	r1, #2
 8005ddc:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8005de0:	f7fa fdf0 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x00);
 8005de4:	2100      	movs	r1, #0
 8005de6:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8005dea:	f7fa fdeb 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8005dee:	2100      	movs	r1, #0
 8005df0:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8005df4:	f7fa fde6 	bl	80009c4 <lcd_write_reg>
        /* Timing control 4H w/ 4-delay */
        lcd_write_reg(0xC900, 0xD0);
 8005df8:	21d0      	movs	r1, #208	@ 0xd0
 8005dfa:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 8005dfe:	f7fa fde1 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xC901, 0x02);
 8005e02:	2102      	movs	r1, #2
 8005e04:	f64c 1001 	movw	r0, #51457	@ 0xc901
 8005e08:	f7fa fddc 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xC902, 0x50);
 8005e0c:	2150      	movs	r1, #80	@ 0x50
 8005e0e:	f64c 1002 	movw	r0, #51458	@ 0xc902
 8005e12:	f7fa fdd7 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xC903, 0x50);
 8005e16:	2150      	movs	r1, #80	@ 0x50
 8005e18:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8005e1c:	f7fa fdd2 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0xC904, 0x50);
 8005e20:	2150      	movs	r1, #80	@ 0x50
 8005e22:	f64c 1004 	movw	r0, #51460	@ 0xc904
 8005e26:	f7fa fdcd 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0x3500, 0x00);
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 8005e30:	f7fa fdc8 	bl	80009c4 <lcd_write_reg>
        lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8005e34:	2155      	movs	r1, #85	@ 0x55
 8005e36:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 8005e3a:	f7fa fdc3 	bl	80009c4 <lcd_write_reg>
 8005e3e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8005e42:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005e46:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb4 <lcd_init+0x422c>)
 8005e48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e4c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005e4e:	4b19      	ldr	r3, [pc, #100]	@ (8005eb4 <lcd_init+0x422c>)
 8005e50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e54:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005e56:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	4b16      	ldr	r3, [pc, #88]	@ (8005eb8 <lcd_init+0x4230>)
 8005e5e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005e60:	4b14      	ldr	r3, [pc, #80]	@ (8005eb4 <lcd_init+0x422c>)
 8005e62:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005e66:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005e68:	4b12      	ldr	r3, [pc, #72]	@ (8005eb4 <lcd_init+0x422c>)
 8005e6a:	2280      	movs	r2, #128	@ 0x80
 8005e6c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005e6e:	4b11      	ldr	r3, [pc, #68]	@ (8005eb4 <lcd_init+0x422c>)
 8005e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e74:	611a      	str	r2, [r3, #16]
}
 8005e76:	bf00      	nop
 8005e78:	f44f 5324 	mov.w	r3, #10496	@ 0x2900
 8005e7c:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005e80:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb4 <lcd_init+0x422c>)
 8005e82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e86:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005e88:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb4 <lcd_init+0x422c>)
 8005e8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e8e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005e90:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	4b08      	ldr	r3, [pc, #32]	@ (8005eb8 <lcd_init+0x4230>)
 8005e98:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005e9a:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <lcd_init+0x422c>)
 8005e9c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005ea0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005ea2:	4b04      	ldr	r3, [pc, #16]	@ (8005eb4 <lcd_init+0x422c>)
 8005ea4:	2280      	movs	r2, #128	@ 0x80
 8005ea6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005ea8:	4b02      	ldr	r3, [pc, #8]	@ (8005eb4 <lcd_init+0x422c>)
 8005eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eae:	611a      	str	r2, [r3, #16]
}
 8005eb0:	f000 be33 	b.w	8006b1a <lcd_init+0x4e92>
 8005eb4:	40011000 	.word	0x40011000
 8005eb8:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x1100);
        //delay_us(120);
        lcd_wr_regno(0x2900);
    }
    else if (lcddev.id == 0x9806)
 8005ebc:	4bc3      	ldr	r3, [pc, #780]	@ (80061cc <lcd_init+0x4544>)
 8005ebe:	889b      	ldrh	r3, [r3, #4]
 8005ec0:	f649 0206 	movw	r2, #38918	@ 0x9806
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	f040 8407 	bne.w	80066d8 <lcd_init+0x4a50>
 8005eca:	23ff      	movs	r3, #255	@ 0xff
 8005ecc:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005ed0:	4bbf      	ldr	r3, [pc, #764]	@ (80061d0 <lcd_init+0x4548>)
 8005ed2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ed6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005ed8:	4bbd      	ldr	r3, [pc, #756]	@ (80061d0 <lcd_init+0x4548>)
 8005eda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005ede:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005ee0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	4bbb      	ldr	r3, [pc, #748]	@ (80061d4 <lcd_init+0x454c>)
 8005ee8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005eea:	4bb9      	ldr	r3, [pc, #740]	@ (80061d0 <lcd_init+0x4548>)
 8005eec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005ef0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005ef2:	4bb7      	ldr	r3, [pc, #732]	@ (80061d0 <lcd_init+0x4548>)
 8005ef4:	2280      	movs	r2, #128	@ 0x80
 8005ef6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005ef8:	4bb5      	ldr	r3, [pc, #724]	@ (80061d0 <lcd_init+0x4548>)
 8005efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005efe:	611a      	str	r2, [r3, #16]
}
 8005f00:	bf00      	nop
    {
       // lcd_ex_ili9806_reginit();   /* ִ��ILI9806��ʼ�� */
        lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
        lcd_wr_xdata(0xFF);
 8005f02:	20ff      	movs	r0, #255	@ 0xff
 8005f04:	f7fa fd3a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x98);
 8005f08:	2098      	movs	r0, #152	@ 0x98
 8005f0a:	f7fa fd37 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8005f0e:	2006      	movs	r0, #6
 8005f10:	f7fa fd34 	bl	800097c <lcd_wr_xdata>
 8005f14:	23bc      	movs	r3, #188	@ 0xbc
 8005f16:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005f1a:	4bad      	ldr	r3, [pc, #692]	@ (80061d0 <lcd_init+0x4548>)
 8005f1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f20:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005f22:	4bab      	ldr	r3, [pc, #684]	@ (80061d0 <lcd_init+0x4548>)
 8005f24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f28:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005f2a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	4ba8      	ldr	r3, [pc, #672]	@ (80061d4 <lcd_init+0x454c>)
 8005f32:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005f34:	4ba6      	ldr	r3, [pc, #664]	@ (80061d0 <lcd_init+0x4548>)
 8005f36:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005f3a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005f3c:	4ba4      	ldr	r3, [pc, #656]	@ (80061d0 <lcd_init+0x4548>)
 8005f3e:	2280      	movs	r2, #128	@ 0x80
 8005f40:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005f42:	4ba3      	ldr	r3, [pc, #652]	@ (80061d0 <lcd_init+0x4548>)
 8005f44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f48:	611a      	str	r2, [r3, #16]
}
 8005f4a:	bf00      	nop

        lcd_wr_regno(0xBC); /* GIP 1 */
        lcd_wr_xdata(0x01);
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	f7fa fd15 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8005f52:	200f      	movs	r0, #15
 8005f54:	f7fa fd12 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8005f58:	2061      	movs	r0, #97	@ 0x61
 8005f5a:	f7fa fd0f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005f5e:	20ff      	movs	r0, #255	@ 0xff
 8005f60:	f7fa fd0c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f64:	2001      	movs	r0, #1
 8005f66:	f7fa fd09 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f6a:	2001      	movs	r0, #1
 8005f6c:	f7fa fd06 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8005f70:	200b      	movs	r0, #11
 8005f72:	f7fa fd03 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8005f76:	2010      	movs	r0, #16
 8005f78:	f7fa fd00 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 8005f7c:	2037      	movs	r0, #55	@ 0x37
 8005f7e:	f7fa fcfd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x63);
 8005f82:	2063      	movs	r0, #99	@ 0x63
 8005f84:	f7fa fcfa 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005f88:	20ff      	movs	r0, #255	@ 0xff
 8005f8a:	f7fa fcf7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005f8e:	20ff      	movs	r0, #255	@ 0xff
 8005f90:	f7fa fcf4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f94:	2001      	movs	r0, #1
 8005f96:	f7fa fcf1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f9a:	2001      	movs	r0, #1
 8005f9c:	f7fa fcee 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f7fa fceb 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	f7fa fce8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005fac:	20ff      	movs	r0, #255	@ 0xff
 8005fae:	f7fa fce5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8005fb2:	2052      	movs	r0, #82	@ 0x52
 8005fb4:	f7fa fce2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005fb8:	2001      	movs	r0, #1
 8005fba:	f7fa fcdf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	f7fa fcdc 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8005fc4:	2040      	movs	r0, #64	@ 0x40
 8005fc6:	f7fa fcd9 	bl	800097c <lcd_wr_xdata>
 8005fca:	23bd      	movs	r3, #189	@ 0xbd
 8005fcc:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005fd0:	4b7f      	ldr	r3, [pc, #508]	@ (80061d0 <lcd_init+0x4548>)
 8005fd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fd6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005fd8:	4b7d      	ldr	r3, [pc, #500]	@ (80061d0 <lcd_init+0x4548>)
 8005fda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005fde:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005fe0:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	4b7b      	ldr	r3, [pc, #492]	@ (80061d4 <lcd_init+0x454c>)
 8005fe8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005fea:	4b79      	ldr	r3, [pc, #484]	@ (80061d0 <lcd_init+0x4548>)
 8005fec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005ff0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005ff2:	4b77      	ldr	r3, [pc, #476]	@ (80061d0 <lcd_init+0x4548>)
 8005ff4:	2280      	movs	r2, #128	@ 0x80
 8005ff6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005ff8:	4b75      	ldr	r3, [pc, #468]	@ (80061d0 <lcd_init+0x4548>)
 8005ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ffe:	611a      	str	r2, [r3, #16]
}
 8006000:	bf00      	nop

        lcd_wr_regno(0xBD); /* GIP 2 */
        lcd_wr_xdata(0x01);
 8006002:	2001      	movs	r0, #1
 8006004:	f7fa fcba 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8006008:	2023      	movs	r0, #35	@ 0x23
 800600a:	f7fa fcb7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 800600e:	2045      	movs	r0, #69	@ 0x45
 8006010:	f7fa fcb4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8006014:	2067      	movs	r0, #103	@ 0x67
 8006016:	f7fa fcb1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800601a:	2001      	movs	r0, #1
 800601c:	f7fa fcae 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8006020:	2023      	movs	r0, #35	@ 0x23
 8006022:	f7fa fcab 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8006026:	2045      	movs	r0, #69	@ 0x45
 8006028:	f7fa fca8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 800602c:	2067      	movs	r0, #103	@ 0x67
 800602e:	f7fa fca5 	bl	800097c <lcd_wr_xdata>
 8006032:	23be      	movs	r3, #190	@ 0xbe
 8006034:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006038:	4b65      	ldr	r3, [pc, #404]	@ (80061d0 <lcd_init+0x4548>)
 800603a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800603e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006040:	4b63      	ldr	r3, [pc, #396]	@ (80061d0 <lcd_init+0x4548>)
 8006042:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006046:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006048:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800604c:	b29a      	uxth	r2, r3
 800604e:	4b61      	ldr	r3, [pc, #388]	@ (80061d4 <lcd_init+0x454c>)
 8006050:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006052:	4b5f      	ldr	r3, [pc, #380]	@ (80061d0 <lcd_init+0x4548>)
 8006054:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006058:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800605a:	4b5d      	ldr	r3, [pc, #372]	@ (80061d0 <lcd_init+0x4548>)
 800605c:	2280      	movs	r2, #128	@ 0x80
 800605e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006060:	4b5b      	ldr	r3, [pc, #364]	@ (80061d0 <lcd_init+0x4548>)
 8006062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006066:	611a      	str	r2, [r3, #16]
}
 8006068:	bf00      	nop

        lcd_wr_regno(0xBE); /* GIP 3 */
        lcd_wr_xdata(0x00);
 800606a:	2000      	movs	r0, #0
 800606c:	f7fa fc86 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006070:	2001      	movs	r0, #1
 8006072:	f7fa fc83 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xAB);
 8006076:	20ab      	movs	r0, #171	@ 0xab
 8006078:	f7fa fc80 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x60);
 800607c:	2060      	movs	r0, #96	@ 0x60
 800607e:	f7fa fc7d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006082:	2022      	movs	r0, #34	@ 0x22
 8006084:	f7fa fc7a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006088:	2022      	movs	r0, #34	@ 0x22
 800608a:	f7fa fc77 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 800608e:	2022      	movs	r0, #34	@ 0x22
 8006090:	f7fa fc74 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006094:	2022      	movs	r0, #34	@ 0x22
 8006096:	f7fa fc71 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 800609a:	2022      	movs	r0, #34	@ 0x22
 800609c:	f7fa fc6e 	bl	800097c <lcd_wr_xdata>
 80060a0:	23c7      	movs	r3, #199	@ 0xc7
 80060a2:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80060a6:	4b4a      	ldr	r3, [pc, #296]	@ (80061d0 <lcd_init+0x4548>)
 80060a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060ac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80060ae:	4b48      	ldr	r3, [pc, #288]	@ (80061d0 <lcd_init+0x4548>)
 80060b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060b4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80060b6:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	4b45      	ldr	r3, [pc, #276]	@ (80061d4 <lcd_init+0x454c>)
 80060be:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80060c0:	4b43      	ldr	r3, [pc, #268]	@ (80061d0 <lcd_init+0x4548>)
 80060c2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80060c6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80060c8:	4b41      	ldr	r3, [pc, #260]	@ (80061d0 <lcd_init+0x4548>)
 80060ca:	2280      	movs	r2, #128	@ 0x80
 80060cc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80060ce:	4b40      	ldr	r3, [pc, #256]	@ (80061d0 <lcd_init+0x4548>)
 80060d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060d4:	611a      	str	r2, [r3, #16]
}
 80060d6:	bf00      	nop

        lcd_wr_regno(0xC7); /* VCOM Control */
        lcd_wr_xdata(0x36);
 80060d8:	2036      	movs	r0, #54	@ 0x36
 80060da:	f7fa fc4f 	bl	800097c <lcd_wr_xdata>
 80060de:	23ed      	movs	r3, #237	@ 0xed
 80060e0:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80060e4:	4b3a      	ldr	r3, [pc, #232]	@ (80061d0 <lcd_init+0x4548>)
 80060e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060ea:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80060ec:	4b38      	ldr	r3, [pc, #224]	@ (80061d0 <lcd_init+0x4548>)
 80060ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060f2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80060f4:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	4b36      	ldr	r3, [pc, #216]	@ (80061d4 <lcd_init+0x454c>)
 80060fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80060fe:	4b34      	ldr	r3, [pc, #208]	@ (80061d0 <lcd_init+0x4548>)
 8006100:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006104:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006106:	4b32      	ldr	r3, [pc, #200]	@ (80061d0 <lcd_init+0x4548>)
 8006108:	2280      	movs	r2, #128	@ 0x80
 800610a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800610c:	4b30      	ldr	r3, [pc, #192]	@ (80061d0 <lcd_init+0x4548>)
 800610e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006112:	611a      	str	r2, [r3, #16]
}
 8006114:	bf00      	nop

        lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
        lcd_wr_xdata(0x7F);
 8006116:	207f      	movs	r0, #127	@ 0x7f
 8006118:	f7fa fc30 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 800611c:	200f      	movs	r0, #15
 800611e:	f7fa fc2d 	bl	800097c <lcd_wr_xdata>
 8006122:	23c0      	movs	r3, #192	@ 0xc0
 8006124:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006128:	4b29      	ldr	r3, [pc, #164]	@ (80061d0 <lcd_init+0x4548>)
 800612a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800612e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006130:	4b27      	ldr	r3, [pc, #156]	@ (80061d0 <lcd_init+0x4548>)
 8006132:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006136:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006138:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 800613c:	b29a      	uxth	r2, r3
 800613e:	4b25      	ldr	r3, [pc, #148]	@ (80061d4 <lcd_init+0x454c>)
 8006140:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006142:	4b23      	ldr	r3, [pc, #140]	@ (80061d0 <lcd_init+0x4548>)
 8006144:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006148:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800614a:	4b21      	ldr	r3, [pc, #132]	@ (80061d0 <lcd_init+0x4548>)
 800614c:	2280      	movs	r2, #128	@ 0x80
 800614e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006150:	4b1f      	ldr	r3, [pc, #124]	@ (80061d0 <lcd_init+0x4548>)
 8006152:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006156:	611a      	str	r2, [r3, #16]
}
 8006158:	bf00      	nop

        lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
        lcd_wr_xdata(0x0F);
 800615a:	200f      	movs	r0, #15
 800615c:	f7fa fc0e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8006160:	200b      	movs	r0, #11
 8006162:	f7fa fc0b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* VGH 15V,VGLO-10V */
 8006166:	200a      	movs	r0, #10
 8006168:	f7fa fc08 	bl	800097c <lcd_wr_xdata>
 800616c:	23fc      	movs	r3, #252	@ 0xfc
 800616e:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006172:	4b17      	ldr	r3, [pc, #92]	@ (80061d0 <lcd_init+0x4548>)
 8006174:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006178:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800617a:	4b15      	ldr	r3, [pc, #84]	@ (80061d0 <lcd_init+0x4548>)
 800617c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006180:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006182:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8006186:	b29a      	uxth	r2, r3
 8006188:	4b12      	ldr	r3, [pc, #72]	@ (80061d4 <lcd_init+0x454c>)
 800618a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800618c:	4b10      	ldr	r3, [pc, #64]	@ (80061d0 <lcd_init+0x4548>)
 800618e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006192:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006194:	4b0e      	ldr	r3, [pc, #56]	@ (80061d0 <lcd_init+0x4548>)
 8006196:	2280      	movs	r2, #128	@ 0x80
 8006198:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800619a:	4b0d      	ldr	r3, [pc, #52]	@ (80061d0 <lcd_init+0x4548>)
 800619c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061a0:	611a      	str	r2, [r3, #16]
}
 80061a2:	bf00      	nop

        lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
        lcd_wr_xdata(0x08);
 80061a4:	2008      	movs	r0, #8
 80061a6:	f7fa fbe9 	bl	800097c <lcd_wr_xdata>
 80061aa:	23df      	movs	r3, #223	@ 0xdf
 80061ac:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80061b0:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <lcd_init+0x4548>)
 80061b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061b6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80061b8:	4b05      	ldr	r3, [pc, #20]	@ (80061d0 <lcd_init+0x4548>)
 80061ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80061be:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80061c0:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	4b03      	ldr	r3, [pc, #12]	@ (80061d4 <lcd_init+0x454c>)
 80061c8:	60da      	str	r2, [r3, #12]
 80061ca:	e005      	b.n	80061d8 <lcd_init+0x4550>
 80061cc:	20000088 	.word	0x20000088
 80061d0:	40011000 	.word	0x40011000
 80061d4:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 80061d8:	4bc7      	ldr	r3, [pc, #796]	@ (80064f8 <lcd_init+0x4870>)
 80061da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80061de:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80061e0:	4bc5      	ldr	r3, [pc, #788]	@ (80064f8 <lcd_init+0x4870>)
 80061e2:	2280      	movs	r2, #128	@ 0x80
 80061e4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80061e6:	4bc4      	ldr	r3, [pc, #784]	@ (80064f8 <lcd_init+0x4870>)
 80061e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061ec:	611a      	str	r2, [r3, #16]
}
 80061ee:	bf00      	nop

        lcd_wr_regno(0XDF);
        lcd_wr_xdata(0x00);
 80061f0:	2000      	movs	r0, #0
 80061f2:	f7fa fbc3 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80061f6:	2000      	movs	r0, #0
 80061f8:	f7fa fbc0 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80061fc:	2000      	movs	r0, #0
 80061fe:	f7fa fbbd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006202:	2000      	movs	r0, #0
 8006204:	f7fa fbba 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006208:	2000      	movs	r0, #0
 800620a:	f7fa fbb7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 800620e:	2020      	movs	r0, #32
 8006210:	f7fa fbb4 	bl	800097c <lcd_wr_xdata>
 8006214:	23f3      	movs	r3, #243	@ 0xf3
 8006216:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800621a:	4bb7      	ldr	r3, [pc, #732]	@ (80064f8 <lcd_init+0x4870>)
 800621c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006220:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006222:	4bb5      	ldr	r3, [pc, #724]	@ (80064f8 <lcd_init+0x4870>)
 8006224:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006228:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800622a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800622e:	b29a      	uxth	r2, r3
 8006230:	4bb2      	ldr	r3, [pc, #712]	@ (80064fc <lcd_init+0x4874>)
 8006232:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006234:	4bb0      	ldr	r3, [pc, #704]	@ (80064f8 <lcd_init+0x4870>)
 8006236:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800623a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800623c:	4bae      	ldr	r3, [pc, #696]	@ (80064f8 <lcd_init+0x4870>)
 800623e:	2280      	movs	r2, #128	@ 0x80
 8006240:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006242:	4bad      	ldr	r3, [pc, #692]	@ (80064f8 <lcd_init+0x4870>)
 8006244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006248:	611a      	str	r2, [r3, #16]
}
 800624a:	bf00      	nop

        lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
        lcd_wr_xdata(0x74);
 800624c:	2074      	movs	r0, #116	@ 0x74
 800624e:	f7fa fb95 	bl	800097c <lcd_wr_xdata>
 8006252:	23b4      	movs	r3, #180	@ 0xb4
 8006254:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006258:	4ba7      	ldr	r3, [pc, #668]	@ (80064f8 <lcd_init+0x4870>)
 800625a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800625e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006260:	4ba5      	ldr	r3, [pc, #660]	@ (80064f8 <lcd_init+0x4870>)
 8006262:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006266:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006268:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 800626c:	b29a      	uxth	r2, r3
 800626e:	4ba3      	ldr	r3, [pc, #652]	@ (80064fc <lcd_init+0x4874>)
 8006270:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006272:	4ba1      	ldr	r3, [pc, #644]	@ (80064f8 <lcd_init+0x4870>)
 8006274:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006278:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800627a:	4b9f      	ldr	r3, [pc, #636]	@ (80064f8 <lcd_init+0x4870>)
 800627c:	2280      	movs	r2, #128	@ 0x80
 800627e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006280:	4b9d      	ldr	r3, [pc, #628]	@ (80064f8 <lcd_init+0x4870>)
 8006282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006286:	611a      	str	r2, [r3, #16]
}
 8006288:	bf00      	nop

        lcd_wr_regno(0xB4); /* Inversion Type */
        lcd_wr_xdata(0x00);  /* 02 */
 800628a:	2000      	movs	r0, #0
 800628c:	f7fa fb76 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006290:	2000      	movs	r0, #0
 8006292:	f7fa fb73 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006296:	2000      	movs	r0, #0
 8006298:	f7fa fb70 	bl	800097c <lcd_wr_xdata>
 800629c:	23f7      	movs	r3, #247	@ 0xf7
 800629e:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80062a2:	4b95      	ldr	r3, [pc, #596]	@ (80064f8 <lcd_init+0x4870>)
 80062a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80062aa:	4b93      	ldr	r3, [pc, #588]	@ (80064f8 <lcd_init+0x4870>)
 80062ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80062b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80062b2:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	4b90      	ldr	r3, [pc, #576]	@ (80064fc <lcd_init+0x4874>)
 80062ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80062bc:	4b8e      	ldr	r3, [pc, #568]	@ (80064f8 <lcd_init+0x4870>)
 80062be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80062c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80062c4:	4b8c      	ldr	r3, [pc, #560]	@ (80064f8 <lcd_init+0x4870>)
 80062c6:	2280      	movs	r2, #128	@ 0x80
 80062c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80062ca:	4b8b      	ldr	r3, [pc, #556]	@ (80064f8 <lcd_init+0x4870>)
 80062cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062d0:	611a      	str	r2, [r3, #16]
}
 80062d2:	bf00      	nop

        lcd_wr_regno(0xF7); /* Resolution Control */
        lcd_wr_xdata(0x82);  /* 480*800 */
 80062d4:	2082      	movs	r0, #130	@ 0x82
 80062d6:	f7fa fb51 	bl	800097c <lcd_wr_xdata>
 80062da:	23b1      	movs	r3, #177	@ 0xb1
 80062dc:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80062e0:	4b85      	ldr	r3, [pc, #532]	@ (80064f8 <lcd_init+0x4870>)
 80062e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80062e8:	4b83      	ldr	r3, [pc, #524]	@ (80064f8 <lcd_init+0x4870>)
 80062ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80062ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80062f0:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	4b81      	ldr	r3, [pc, #516]	@ (80064fc <lcd_init+0x4874>)
 80062f8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80062fa:	4b7f      	ldr	r3, [pc, #508]	@ (80064f8 <lcd_init+0x4870>)
 80062fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006300:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006302:	4b7d      	ldr	r3, [pc, #500]	@ (80064f8 <lcd_init+0x4870>)
 8006304:	2280      	movs	r2, #128	@ 0x80
 8006306:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006308:	4b7b      	ldr	r3, [pc, #492]	@ (80064f8 <lcd_init+0x4870>)
 800630a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800630e:	611a      	str	r2, [r3, #16]
}
 8006310:	bf00      	nop

        lcd_wr_regno(0xB1); /* FRAME RATE Setting */
        lcd_wr_xdata(0x00);
 8006312:	2000      	movs	r0, #0
 8006314:	f7fa fb32 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8006318:	2013      	movs	r0, #19
 800631a:	f7fa fb2f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 800631e:	2013      	movs	r0, #19
 8006320:	f7fa fb2c 	bl	800097c <lcd_wr_xdata>
 8006324:	23f2      	movs	r3, #242	@ 0xf2
 8006326:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800632a:	4b73      	ldr	r3, [pc, #460]	@ (80064f8 <lcd_init+0x4870>)
 800632c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006330:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006332:	4b71      	ldr	r3, [pc, #452]	@ (80064f8 <lcd_init+0x4870>)
 8006334:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006338:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800633a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 800633e:	b29a      	uxth	r2, r3
 8006340:	4b6e      	ldr	r3, [pc, #440]	@ (80064fc <lcd_init+0x4874>)
 8006342:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006344:	4b6c      	ldr	r3, [pc, #432]	@ (80064f8 <lcd_init+0x4870>)
 8006346:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800634a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800634c:	4b6a      	ldr	r3, [pc, #424]	@ (80064f8 <lcd_init+0x4870>)
 800634e:	2280      	movs	r2, #128	@ 0x80
 8006350:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006352:	4b69      	ldr	r3, [pc, #420]	@ (80064f8 <lcd_init+0x4870>)
 8006354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006358:	611a      	str	r2, [r3, #16]
}
 800635a:	bf00      	nop

        lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
        lcd_wr_xdata(0x80);
 800635c:	2080      	movs	r0, #128	@ 0x80
 800635e:	f7fa fb0d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8006362:	2004      	movs	r0, #4
 8006364:	f7fa fb0a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8006368:	2040      	movs	r0, #64	@ 0x40
 800636a:	f7fa fb07 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 800636e:	2028      	movs	r0, #40	@ 0x28
 8006370:	f7fa fb04 	bl	800097c <lcd_wr_xdata>
 8006374:	23c1      	movs	r3, #193	@ 0xc1
 8006376:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800637a:	4b5f      	ldr	r3, [pc, #380]	@ (80064f8 <lcd_init+0x4870>)
 800637c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006380:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006382:	4b5d      	ldr	r3, [pc, #372]	@ (80064f8 <lcd_init+0x4870>)
 8006384:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006388:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800638a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 800638e:	b29a      	uxth	r2, r3
 8006390:	4b5a      	ldr	r3, [pc, #360]	@ (80064fc <lcd_init+0x4874>)
 8006392:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006394:	4b58      	ldr	r3, [pc, #352]	@ (80064f8 <lcd_init+0x4870>)
 8006396:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800639a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800639c:	4b56      	ldr	r3, [pc, #344]	@ (80064f8 <lcd_init+0x4870>)
 800639e:	2280      	movs	r2, #128	@ 0x80
 80063a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80063a2:	4b55      	ldr	r3, [pc, #340]	@ (80064f8 <lcd_init+0x4870>)
 80063a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063a8:	611a      	str	r2, [r3, #16]
}
 80063aa:	bf00      	nop

        lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
        lcd_wr_xdata(0x17);
 80063ac:	2017      	movs	r0, #23
 80063ae:	f7fa fae5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMP */
 80063b2:	2088      	movs	r0, #136	@ 0x88
 80063b4:	f7fa fae2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMN */
 80063b8:	2088      	movs	r0, #136	@ 0x88
 80063ba:	f7fa fadf 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 80063be:	2020      	movs	r0, #32
 80063c0:	f7fa fadc 	bl	800097c <lcd_wr_xdata>
 80063c4:	23e0      	movs	r3, #224	@ 0xe0
 80063c6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80063ca:	4b4b      	ldr	r3, [pc, #300]	@ (80064f8 <lcd_init+0x4870>)
 80063cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063d0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80063d2:	4b49      	ldr	r3, [pc, #292]	@ (80064f8 <lcd_init+0x4870>)
 80063d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80063d8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80063da:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 80063de:	b29a      	uxth	r2, r3
 80063e0:	4b46      	ldr	r3, [pc, #280]	@ (80064fc <lcd_init+0x4874>)
 80063e2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80063e4:	4b44      	ldr	r3, [pc, #272]	@ (80064f8 <lcd_init+0x4870>)
 80063e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80063ea:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80063ec:	4b42      	ldr	r3, [pc, #264]	@ (80064f8 <lcd_init+0x4870>)
 80063ee:	2280      	movs	r2, #128	@ 0x80
 80063f0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80063f2:	4b41      	ldr	r3, [pc, #260]	@ (80064f8 <lcd_init+0x4870>)
 80063f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063f8:	611a      	str	r2, [r3, #16]
}
 80063fa:	bf00      	nop

        lcd_wr_regno(0xE0); /* Positive Gamma Control */
        lcd_wr_xdata(0x00);  /* P1 */
 80063fc:	2000      	movs	r0, #0
 80063fe:	f7fa fabd 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P2 */
 8006402:	200a      	movs	r0, #10
 8006404:	f7fa faba 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x12);  /* P3 */
 8006408:	2012      	movs	r0, #18
 800640a:	f7fa fab7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P4 */
 800640e:	2010      	movs	r0, #16
 8006410:	f7fa fab4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 8006414:	200e      	movs	r0, #14
 8006416:	f7fa fab1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x20);  /* P6 */
 800641a:	2020      	movs	r0, #32
 800641c:	f7fa faae 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xCC);  /* P7 */
 8006420:	20cc      	movs	r0, #204	@ 0xcc
 8006422:	f7fa faab 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x07);  /* P8 */
 8006426:	2007      	movs	r0, #7
 8006428:	f7fa faa8 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 800642c:	2006      	movs	r0, #6
 800642e:	f7fa faa5 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P10 */
 8006432:	200b      	movs	r0, #11
 8006434:	f7fa faa2 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P11 */
 8006438:	200e      	movs	r0, #14
 800643a:	f7fa fa9f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P12 */
 800643e:	200f      	movs	r0, #15
 8006440:	f7fa fa9c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P13 */
 8006444:	200d      	movs	r0, #13
 8006446:	f7fa fa99 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 800644a:	2015      	movs	r0, #21
 800644c:	f7fa fa96 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P15 */
 8006450:	2010      	movs	r0, #16
 8006452:	f7fa fa93 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 8006456:	2000      	movs	r0, #0
 8006458:	f7fa fa90 	bl	800097c <lcd_wr_xdata>
 800645c:	23e1      	movs	r3, #225	@ 0xe1
 800645e:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006462:	4b25      	ldr	r3, [pc, #148]	@ (80064f8 <lcd_init+0x4870>)
 8006464:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006468:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800646a:	4b23      	ldr	r3, [pc, #140]	@ (80064f8 <lcd_init+0x4870>)
 800646c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006470:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006472:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8006476:	b29a      	uxth	r2, r3
 8006478:	4b20      	ldr	r3, [pc, #128]	@ (80064fc <lcd_init+0x4874>)
 800647a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800647c:	4b1e      	ldr	r3, [pc, #120]	@ (80064f8 <lcd_init+0x4870>)
 800647e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006482:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006484:	4b1c      	ldr	r3, [pc, #112]	@ (80064f8 <lcd_init+0x4870>)
 8006486:	2280      	movs	r2, #128	@ 0x80
 8006488:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800648a:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <lcd_init+0x4870>)
 800648c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006490:	611a      	str	r2, [r3, #16]
}
 8006492:	bf00      	nop

        lcd_wr_regno(0xE1); /* Negative Gamma Correction */
        lcd_wr_xdata(0x00);  /* P1 */
 8006494:	2000      	movs	r0, #0
 8006496:	f7fa fa71 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P2 */
 800649a:	200b      	movs	r0, #11
 800649c:	f7fa fa6e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x13);  /* P3 */
 80064a0:	2013      	movs	r0, #19
 80064a2:	f7fa fa6b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P4 */
 80064a6:	200d      	movs	r0, #13
 80064a8:	f7fa fa68 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 80064ac:	200e      	movs	r0, #14
 80064ae:	f7fa fa65 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);  /* P6 */
 80064b2:	201b      	movs	r0, #27
 80064b4:	f7fa fa62 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x71);  /* P7 */
 80064b8:	2071      	movs	r0, #113	@ 0x71
 80064ba:	f7fa fa5f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P8 */
 80064be:	2006      	movs	r0, #6
 80064c0:	f7fa fa5c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 80064c4:	2006      	movs	r0, #6
 80064c6:	f7fa fa59 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P10 */
 80064ca:	200a      	movs	r0, #10
 80064cc:	f7fa fa56 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P11 */
 80064d0:	200f      	movs	r0, #15
 80064d2:	f7fa fa53 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P12 */
 80064d6:	200e      	movs	r0, #14
 80064d8:	f7fa fa50 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P13 */
 80064dc:	200f      	movs	r0, #15
 80064de:	f7fa fa4d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 80064e2:	2015      	movs	r0, #21
 80064e4:	f7fa fa4a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);  /* P15 */
 80064e8:	200c      	movs	r0, #12
 80064ea:	f7fa fa47 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 80064ee:	2000      	movs	r0, #0
 80064f0:	f7fa fa44 	bl	800097c <lcd_wr_xdata>
 80064f4:	e004      	b.n	8006500 <lcd_init+0x4878>
 80064f6:	bf00      	nop
 80064f8:	40011000 	.word	0x40011000
 80064fc:	40010c00 	.word	0x40010c00
 8006500:	232a      	movs	r3, #42	@ 0x2a
 8006502:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006506:	4b72      	ldr	r3, [pc, #456]	@ (80066d0 <lcd_init+0x4a48>)
 8006508:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800650c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800650e:	4b70      	ldr	r3, [pc, #448]	@ (80066d0 <lcd_init+0x4a48>)
 8006510:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006514:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006516:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800651a:	b29a      	uxth	r2, r3
 800651c:	4b6d      	ldr	r3, [pc, #436]	@ (80066d4 <lcd_init+0x4a4c>)
 800651e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006520:	4b6b      	ldr	r3, [pc, #428]	@ (80066d0 <lcd_init+0x4a48>)
 8006522:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006526:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006528:	4b69      	ldr	r3, [pc, #420]	@ (80066d0 <lcd_init+0x4a48>)
 800652a:	2280      	movs	r2, #128	@ 0x80
 800652c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800652e:	4b68      	ldr	r3, [pc, #416]	@ (80066d0 <lcd_init+0x4a48>)
 8006530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006534:	611a      	str	r2, [r3, #16]
}
 8006536:	bf00      	nop

        lcd_wr_regno(0x2a);
        lcd_wr_xdata(0x00);
 8006538:	2000      	movs	r0, #0
 800653a:	f7fa fa1f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800653e:	2000      	movs	r0, #0
 8006540:	f7fa fa1c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006544:	2001      	movs	r0, #1
 8006546:	f7fa fa19 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xdf);
 800654a:	20df      	movs	r0, #223	@ 0xdf
 800654c:	f7fa fa16 	bl	800097c <lcd_wr_xdata>
 8006550:	232b      	movs	r3, #43	@ 0x2b
 8006552:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006556:	4b5e      	ldr	r3, [pc, #376]	@ (80066d0 <lcd_init+0x4a48>)
 8006558:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800655c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800655e:	4b5c      	ldr	r3, [pc, #368]	@ (80066d0 <lcd_init+0x4a48>)
 8006560:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006564:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006566:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 800656a:	b29a      	uxth	r2, r3
 800656c:	4b59      	ldr	r3, [pc, #356]	@ (80066d4 <lcd_init+0x4a4c>)
 800656e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006570:	4b57      	ldr	r3, [pc, #348]	@ (80066d0 <lcd_init+0x4a48>)
 8006572:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006576:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006578:	4b55      	ldr	r3, [pc, #340]	@ (80066d0 <lcd_init+0x4a48>)
 800657a:	2280      	movs	r2, #128	@ 0x80
 800657c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800657e:	4b54      	ldr	r3, [pc, #336]	@ (80066d0 <lcd_init+0x4a48>)
 8006580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006584:	611a      	str	r2, [r3, #16]
}
 8006586:	bf00      	nop

        lcd_wr_regno(0x2b);
        lcd_wr_xdata(0x00);
 8006588:	2000      	movs	r0, #0
 800658a:	f7fa f9f7 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800658e:	2000      	movs	r0, #0
 8006590:	f7fa f9f4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8006594:	2003      	movs	r0, #3
 8006596:	f7fa f9f1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x1f);
 800659a:	201f      	movs	r0, #31
 800659c:	f7fa f9ee 	bl	800097c <lcd_wr_xdata>
 80065a0:	233a      	movs	r3, #58	@ 0x3a
 80065a2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80065a6:	4b4a      	ldr	r3, [pc, #296]	@ (80066d0 <lcd_init+0x4a48>)
 80065a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065ac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80065ae:	4b48      	ldr	r3, [pc, #288]	@ (80066d0 <lcd_init+0x4a48>)
 80065b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065b4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80065b6:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	4b45      	ldr	r3, [pc, #276]	@ (80066d4 <lcd_init+0x4a4c>)
 80065be:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80065c0:	4b43      	ldr	r3, [pc, #268]	@ (80066d0 <lcd_init+0x4a48>)
 80065c2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80065c6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80065c8:	4b41      	ldr	r3, [pc, #260]	@ (80066d0 <lcd_init+0x4a48>)
 80065ca:	2280      	movs	r2, #128	@ 0x80
 80065cc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80065ce:	4b40      	ldr	r3, [pc, #256]	@ (80066d0 <lcd_init+0x4a48>)
 80065d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065d4:	611a      	str	r2, [r3, #16]
}
 80065d6:	bf00      	nop

        lcd_wr_regno(0x3A); /* Pixel Format */
        lcd_wr_xdata(0x55);
 80065d8:	2055      	movs	r0, #85	@ 0x55
 80065da:	f7fa f9cf 	bl	800097c <lcd_wr_xdata>
 80065de:	2336      	movs	r3, #54	@ 0x36
 80065e0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80065e4:	4b3a      	ldr	r3, [pc, #232]	@ (80066d0 <lcd_init+0x4a48>)
 80065e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065ea:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80065ec:	4b38      	ldr	r3, [pc, #224]	@ (80066d0 <lcd_init+0x4a48>)
 80065ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065f2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80065f4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	4b36      	ldr	r3, [pc, #216]	@ (80066d4 <lcd_init+0x4a4c>)
 80065fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80065fe:	4b34      	ldr	r3, [pc, #208]	@ (80066d0 <lcd_init+0x4a48>)
 8006600:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006604:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006606:	4b32      	ldr	r3, [pc, #200]	@ (80066d0 <lcd_init+0x4a48>)
 8006608:	2280      	movs	r2, #128	@ 0x80
 800660a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800660c:	4b30      	ldr	r3, [pc, #192]	@ (80066d0 <lcd_init+0x4a48>)
 800660e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006612:	611a      	str	r2, [r3, #16]
}
 8006614:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Access Control */
        lcd_wr_xdata(0x00);  /* 02-180 */
 8006616:	2000      	movs	r0, #0
 8006618:	f7fa f9b0 	bl	800097c <lcd_wr_xdata>
 800661c:	2311      	movs	r3, #17
 800661e:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006622:	4b2b      	ldr	r3, [pc, #172]	@ (80066d0 <lcd_init+0x4a48>)
 8006624:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006628:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800662a:	4b29      	ldr	r3, [pc, #164]	@ (80066d0 <lcd_init+0x4a48>)
 800662c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006630:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006632:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8006636:	b29a      	uxth	r2, r3
 8006638:	4b26      	ldr	r3, [pc, #152]	@ (80066d4 <lcd_init+0x4a4c>)
 800663a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800663c:	4b24      	ldr	r3, [pc, #144]	@ (80066d0 <lcd_init+0x4a48>)
 800663e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006642:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006644:	4b22      	ldr	r3, [pc, #136]	@ (80066d0 <lcd_init+0x4a48>)
 8006646:	2280      	movs	r2, #128	@ 0x80
 8006648:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800664a:	4b21      	ldr	r3, [pc, #132]	@ (80066d0 <lcd_init+0x4a48>)
 800664c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006650:	611a      	str	r2, [r3, #16]
}
 8006652:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(120);
 8006654:	2078      	movs	r0, #120	@ 0x78
 8006656:	f001 fbd3 	bl	8007e00 <HAL_Delay>
 800665a:	2329      	movs	r3, #41	@ 0x29
 800665c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006660:	4b1b      	ldr	r3, [pc, #108]	@ (80066d0 <lcd_init+0x4a48>)
 8006662:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006666:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006668:	4b19      	ldr	r3, [pc, #100]	@ (80066d0 <lcd_init+0x4a48>)
 800666a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800666e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006670:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8006674:	b29a      	uxth	r2, r3
 8006676:	4b17      	ldr	r3, [pc, #92]	@ (80066d4 <lcd_init+0x4a4c>)
 8006678:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800667a:	4b15      	ldr	r3, [pc, #84]	@ (80066d0 <lcd_init+0x4a48>)
 800667c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006680:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006682:	4b13      	ldr	r3, [pc, #76]	@ (80066d0 <lcd_init+0x4a48>)
 8006684:	2280      	movs	r2, #128	@ 0x80
 8006686:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006688:	4b11      	ldr	r3, [pc, #68]	@ (80066d0 <lcd_init+0x4a48>)
 800668a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800668e:	611a      	str	r2, [r3, #16]
}
 8006690:	bf00      	nop
        lcd_wr_regno(0x29);
        HAL_Delay(20);
 8006692:	2014      	movs	r0, #20
 8006694:	f001 fbb4 	bl	8007e00 <HAL_Delay>
 8006698:	232c      	movs	r3, #44	@ 0x2c
 800669a:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800669e:	4b0c      	ldr	r3, [pc, #48]	@ (80066d0 <lcd_init+0x4a48>)
 80066a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066a4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80066a6:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <lcd_init+0x4a48>)
 80066a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066ac:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066ae:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	4b07      	ldr	r3, [pc, #28]	@ (80066d4 <lcd_init+0x4a4c>)
 80066b6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80066b8:	4b05      	ldr	r3, [pc, #20]	@ (80066d0 <lcd_init+0x4a48>)
 80066ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80066be:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80066c0:	4b03      	ldr	r3, [pc, #12]	@ (80066d0 <lcd_init+0x4a48>)
 80066c2:	2280      	movs	r2, #128	@ 0x80
 80066c4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80066c6:	4b02      	ldr	r3, [pc, #8]	@ (80066d0 <lcd_init+0x4a48>)
 80066c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066cc:	611a      	str	r2, [r3, #16]
}
 80066ce:	e224      	b.n	8006b1a <lcd_init+0x4e92>
 80066d0:	40011000 	.word	0x40011000
 80066d4:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2C);
    }
    else if (lcddev.id == 0x1963)
 80066d8:	4bbe      	ldr	r3, [pc, #760]	@ (80069d4 <lcd_init+0x4d4c>)
 80066da:	889b      	ldrh	r3, [r3, #4]
 80066dc:	f641 1263 	movw	r2, #6499	@ 0x1963
 80066e0:	4293      	cmp	r3, r2
 80066e2:	f040 821a 	bne.w	8006b1a <lcd_init+0x4e92>
 80066e6:	23e2      	movs	r3, #226	@ 0xe2
 80066e8:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80066ec:	4bba      	ldr	r3, [pc, #744]	@ (80069d8 <lcd_init+0x4d50>)
 80066ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066f2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80066f4:	4bb8      	ldr	r3, [pc, #736]	@ (80069d8 <lcd_init+0x4d50>)
 80066f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066fa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066fc:	f8b7 3152 	ldrh.w	r3, [r7, #338]	@ 0x152
 8006700:	b29a      	uxth	r2, r3
 8006702:	4bb6      	ldr	r3, [pc, #728]	@ (80069dc <lcd_init+0x4d54>)
 8006704:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006706:	4bb4      	ldr	r3, [pc, #720]	@ (80069d8 <lcd_init+0x4d50>)
 8006708:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800670c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800670e:	4bb2      	ldr	r3, [pc, #712]	@ (80069d8 <lcd_init+0x4d50>)
 8006710:	2280      	movs	r2, #128	@ 0x80
 8006712:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006714:	4bb0      	ldr	r3, [pc, #704]	@ (80069d8 <lcd_init+0x4d50>)
 8006716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800671a:	611a      	str	r2, [r3, #16]
}
 800671c:	bf00      	nop
    {
        //lcd_ex_ssd1963_reginit();   /* ִ��SSD1963��ʼ�� */
        lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
        lcd_wr_xdata(0x1D); /* ����1 */
 800671e:	201d      	movs	r0, #29
 8006720:	f7fa f92c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x02); /* ����2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 8006724:	2002      	movs	r0, #2
 8006726:	f7fa f929 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x04); /* ����3 Validate M and N values */
 800672a:	2004      	movs	r0, #4
 800672c:	f7fa f926 	bl	800097c <lcd_wr_xdata>
 8006730:	23e0      	movs	r3, #224	@ 0xe0
 8006732:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006736:	4ba8      	ldr	r3, [pc, #672]	@ (80069d8 <lcd_init+0x4d50>)
 8006738:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800673c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800673e:	4ba6      	ldr	r3, [pc, #664]	@ (80069d8 <lcd_init+0x4d50>)
 8006740:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006744:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006746:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 800674a:	b29a      	uxth	r2, r3
 800674c:	4ba3      	ldr	r3, [pc, #652]	@ (80069dc <lcd_init+0x4d54>)
 800674e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006750:	4ba1      	ldr	r3, [pc, #644]	@ (80069d8 <lcd_init+0x4d50>)
 8006752:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006756:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006758:	4b9f      	ldr	r3, [pc, #636]	@ (80069d8 <lcd_init+0x4d50>)
 800675a:	2280      	movs	r2, #128	@ 0x80
 800675c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800675e:	4b9e      	ldr	r3, [pc, #632]	@ (80069d8 <lcd_init+0x4d50>)
 8006760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006764:	611a      	str	r2, [r3, #16]
}
 8006766:	bf00      	nop
        //delay_us(100);
        lcd_wr_regno(0xE0); /*  Start PLL command */
        lcd_wr_xdata(0x01); /*  enable PLL */
 8006768:	2001      	movs	r0, #1
 800676a:	f7fa f907 	bl	800097c <lcd_wr_xdata>
        HAL_Delay(10);
 800676e:	200a      	movs	r0, #10
 8006770:	f001 fb46 	bl	8007e00 <HAL_Delay>
 8006774:	23e0      	movs	r3, #224	@ 0xe0
 8006776:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800677a:	4b97      	ldr	r3, [pc, #604]	@ (80069d8 <lcd_init+0x4d50>)
 800677c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006780:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006782:	4b95      	ldr	r3, [pc, #596]	@ (80069d8 <lcd_init+0x4d50>)
 8006784:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006788:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800678a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 800678e:	b29a      	uxth	r2, r3
 8006790:	4b92      	ldr	r3, [pc, #584]	@ (80069dc <lcd_init+0x4d54>)
 8006792:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006794:	4b90      	ldr	r3, [pc, #576]	@ (80069d8 <lcd_init+0x4d50>)
 8006796:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800679a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800679c:	4b8e      	ldr	r3, [pc, #568]	@ (80069d8 <lcd_init+0x4d50>)
 800679e:	2280      	movs	r2, #128	@ 0x80
 80067a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067a2:	4b8d      	ldr	r3, [pc, #564]	@ (80069d8 <lcd_init+0x4d50>)
 80067a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067a8:	611a      	str	r2, [r3, #16]
}
 80067aa:	bf00      	nop
        lcd_wr_regno(0xE0); /*  Start PLL command again */
        lcd_wr_xdata(0x03); /*  now, use PLL output as system clock */
 80067ac:	2003      	movs	r0, #3
 80067ae:	f7fa f8e5 	bl	800097c <lcd_wr_xdata>
        HAL_Delay(12);
 80067b2:	200c      	movs	r0, #12
 80067b4:	f001 fb24 	bl	8007e00 <HAL_Delay>
 80067b8:	2301      	movs	r3, #1
 80067ba:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80067be:	4b86      	ldr	r3, [pc, #536]	@ (80069d8 <lcd_init+0x4d50>)
 80067c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067c4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80067c6:	4b84      	ldr	r3, [pc, #528]	@ (80069d8 <lcd_init+0x4d50>)
 80067c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067cc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80067ce:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	4b81      	ldr	r3, [pc, #516]	@ (80069dc <lcd_init+0x4d54>)
 80067d6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80067d8:	4b7f      	ldr	r3, [pc, #508]	@ (80069d8 <lcd_init+0x4d50>)
 80067da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80067de:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80067e0:	4b7d      	ldr	r3, [pc, #500]	@ (80069d8 <lcd_init+0x4d50>)
 80067e2:	2280      	movs	r2, #128	@ 0x80
 80067e4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067e6:	4b7c      	ldr	r3, [pc, #496]	@ (80069d8 <lcd_init+0x4d50>)
 80067e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067ec:	611a      	str	r2, [r3, #16]
}
 80067ee:	bf00      	nop
        lcd_wr_regno(0x01); /* ��λ */
        HAL_Delay(10);
 80067f0:	200a      	movs	r0, #10
 80067f2:	f001 fb05 	bl	8007e00 <HAL_Delay>
 80067f6:	23e6      	movs	r3, #230	@ 0xe6
 80067f8:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80067fc:	4b76      	ldr	r3, [pc, #472]	@ (80069d8 <lcd_init+0x4d50>)
 80067fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006802:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006804:	4b74      	ldr	r3, [pc, #464]	@ (80069d8 <lcd_init+0x4d50>)
 8006806:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800680a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800680c:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 8006810:	b29a      	uxth	r2, r3
 8006812:	4b72      	ldr	r3, [pc, #456]	@ (80069dc <lcd_init+0x4d54>)
 8006814:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006816:	4b70      	ldr	r3, [pc, #448]	@ (80069d8 <lcd_init+0x4d50>)
 8006818:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800681c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800681e:	4b6e      	ldr	r3, [pc, #440]	@ (80069d8 <lcd_init+0x4d50>)
 8006820:	2280      	movs	r2, #128	@ 0x80
 8006822:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006824:	4b6c      	ldr	r3, [pc, #432]	@ (80069d8 <lcd_init+0x4d50>)
 8006826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800682a:	611a      	str	r2, [r3, #16]
}
 800682c:	bf00      	nop

        lcd_wr_regno(0xE6); /* ��������Ƶ��,33Mhz */
        lcd_wr_xdata(0x2F);
 800682e:	202f      	movs	r0, #47	@ 0x2f
 8006830:	f7fa f8a4 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006834:	20ff      	movs	r0, #255	@ 0xff
 8006836:	f7fa f8a1 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 800683a:	20ff      	movs	r0, #255	@ 0xff
 800683c:	f7fa f89e 	bl	800097c <lcd_wr_xdata>
 8006840:	23b0      	movs	r3, #176	@ 0xb0
 8006842:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006846:	4b64      	ldr	r3, [pc, #400]	@ (80069d8 <lcd_init+0x4d50>)
 8006848:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800684c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800684e:	4b62      	ldr	r3, [pc, #392]	@ (80069d8 <lcd_init+0x4d50>)
 8006850:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006854:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006856:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 800685a:	b29a      	uxth	r2, r3
 800685c:	4b5f      	ldr	r3, [pc, #380]	@ (80069dc <lcd_init+0x4d54>)
 800685e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006860:	4b5d      	ldr	r3, [pc, #372]	@ (80069d8 <lcd_init+0x4d50>)
 8006862:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006866:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006868:	4b5b      	ldr	r3, [pc, #364]	@ (80069d8 <lcd_init+0x4d50>)
 800686a:	2280      	movs	r2, #128	@ 0x80
 800686c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800686e:	4b5a      	ldr	r3, [pc, #360]	@ (80069d8 <lcd_init+0x4d50>)
 8006870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006874:	611a      	str	r2, [r3, #16]
}
 8006876:	bf00      	nop

        lcd_wr_regno(0xB0); /* ����LCDģʽ */
        lcd_wr_xdata(0x20); /* 24λģʽ */
 8006878:	2020      	movs	r0, #32
 800687a:	f7fa f87f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* TFT ģʽ */
 800687e:	2000      	movs	r0, #0
 8006880:	f7fa f87c 	bl	800097c <lcd_wr_xdata>

        lcd_wr_xdata((SSD_HOR_RESOLUTION - 1) >> 8); /* ����LCDˮƽ���� */
 8006884:	2003      	movs	r0, #3
 8006886:	f7fa f879 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_RESOLUTION - 1);
 800688a:	f240 301f 	movw	r0, #799	@ 0x31f
 800688e:	f7fa f875 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata((SSD_VER_RESOLUTION - 1) >> 8); /* ����LCD��ֱ���� */
 8006892:	2001      	movs	r0, #1
 8006894:	f7fa f872 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_RESOLUTION - 1);
 8006898:	f240 10df 	movw	r0, #479	@ 0x1df
 800689c:	f7fa f86e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* RGB���� */
 80068a0:	2000      	movs	r0, #0
 80068a2:	f7fa f86b 	bl	800097c <lcd_wr_xdata>
 80068a6:	23b4      	movs	r3, #180	@ 0xb4
 80068a8:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80068ac:	4b4a      	ldr	r3, [pc, #296]	@ (80069d8 <lcd_init+0x4d50>)
 80068ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068b2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80068b4:	4b48      	ldr	r3, [pc, #288]	@ (80069d8 <lcd_init+0x4d50>)
 80068b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068ba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80068bc:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	4b46      	ldr	r3, [pc, #280]	@ (80069dc <lcd_init+0x4d54>)
 80068c4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80068c6:	4b44      	ldr	r3, [pc, #272]	@ (80069d8 <lcd_init+0x4d50>)
 80068c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068cc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80068ce:	4b42      	ldr	r3, [pc, #264]	@ (80069d8 <lcd_init+0x4d50>)
 80068d0:	2280      	movs	r2, #128	@ 0x80
 80068d2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068d4:	4b40      	ldr	r3, [pc, #256]	@ (80069d8 <lcd_init+0x4d50>)
 80068d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068da:	611a      	str	r2, [r3, #16]
}
 80068dc:	bf00      	nop

        lcd_wr_regno(0xB4); /* Set horizontal period */
        lcd_wr_xdata((SSD_HT - 1) >> 8);
 80068de:	2004      	movs	r0, #4
 80068e0:	f7fa f84c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HT - 1);
 80068e4:	f240 401f 	movw	r0, #1055	@ 0x41f
 80068e8:	f7fa f848 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS >> 8);
 80068ec:	2000      	movs	r0, #0
 80068ee:	f7fa f845 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS);
 80068f2:	202e      	movs	r0, #46	@ 0x2e
 80068f4:	f7fa f842 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_PULSE_WIDTH - 1);
 80068f8:	2000      	movs	r0, #0
 80068fa:	f7fa f83f 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80068fe:	2000      	movs	r0, #0
 8006900:	f7fa f83c 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006904:	2000      	movs	r0, #0
 8006906:	f7fa f839 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800690a:	2000      	movs	r0, #0
 800690c:	f7fa f836 	bl	800097c <lcd_wr_xdata>
 8006910:	23b6      	movs	r3, #182	@ 0xb6
 8006912:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006916:	4b30      	ldr	r3, [pc, #192]	@ (80069d8 <lcd_init+0x4d50>)
 8006918:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800691c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800691e:	4b2e      	ldr	r3, [pc, #184]	@ (80069d8 <lcd_init+0x4d50>)
 8006920:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006924:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006926:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 800692a:	b29a      	uxth	r2, r3
 800692c:	4b2b      	ldr	r3, [pc, #172]	@ (80069dc <lcd_init+0x4d54>)
 800692e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006930:	4b29      	ldr	r3, [pc, #164]	@ (80069d8 <lcd_init+0x4d50>)
 8006932:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006936:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006938:	4b27      	ldr	r3, [pc, #156]	@ (80069d8 <lcd_init+0x4d50>)
 800693a:	2280      	movs	r2, #128	@ 0x80
 800693c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800693e:	4b26      	ldr	r3, [pc, #152]	@ (80069d8 <lcd_init+0x4d50>)
 8006940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006944:	611a      	str	r2, [r3, #16]
}
 8006946:	bf00      	nop
        lcd_wr_regno(0xB6); /* Set vertical perio */
        lcd_wr_xdata((SSD_VT - 1) >> 8);
 8006948:	2002      	movs	r0, #2
 800694a:	f7fa f817 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VT - 1);
 800694e:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 8006952:	f7fa f813 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS >> 8);
 8006956:	2000      	movs	r0, #0
 8006958:	f7fa f810 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS);
 800695c:	2017      	movs	r0, #23
 800695e:	f7fa f80d 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_FRONT_PORCH - 1);
 8006962:	2015      	movs	r0, #21
 8006964:	f7fa f80a 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006968:	2000      	movs	r0, #0
 800696a:	f7fa f807 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800696e:	2000      	movs	r0, #0
 8006970:	f7fa f804 	bl	800097c <lcd_wr_xdata>
 8006974:	23f0      	movs	r3, #240	@ 0xf0
 8006976:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800697a:	4b17      	ldr	r3, [pc, #92]	@ (80069d8 <lcd_init+0x4d50>)
 800697c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006980:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006982:	4b15      	ldr	r3, [pc, #84]	@ (80069d8 <lcd_init+0x4d50>)
 8006984:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006988:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800698a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 800698e:	b29a      	uxth	r2, r3
 8006990:	4b12      	ldr	r3, [pc, #72]	@ (80069dc <lcd_init+0x4d54>)
 8006992:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006994:	4b10      	ldr	r3, [pc, #64]	@ (80069d8 <lcd_init+0x4d50>)
 8006996:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800699a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800699c:	4b0e      	ldr	r3, [pc, #56]	@ (80069d8 <lcd_init+0x4d50>)
 800699e:	2280      	movs	r2, #128	@ 0x80
 80069a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80069a2:	4b0d      	ldr	r3, [pc, #52]	@ (80069d8 <lcd_init+0x4d50>)
 80069a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069a8:	611a      	str	r2, [r3, #16]
}
 80069aa:	bf00      	nop

        lcd_wr_regno(0xF0); /* ����SSD1963��CPU�ӿ�Ϊ16bit */
        lcd_wr_xdata(0x03); /* 16-bit(565 format) data for 16bpp */
 80069ac:	2003      	movs	r0, #3
 80069ae:	f7f9 ffe5 	bl	800097c <lcd_wr_xdata>
 80069b2:	2329      	movs	r3, #41	@ 0x29
 80069b4:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80069b8:	4b07      	ldr	r3, [pc, #28]	@ (80069d8 <lcd_init+0x4d50>)
 80069ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069be:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80069c0:	4b05      	ldr	r3, [pc, #20]	@ (80069d8 <lcd_init+0x4d50>)
 80069c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069c6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80069c8:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	4b03      	ldr	r3, [pc, #12]	@ (80069dc <lcd_init+0x4d54>)
 80069d0:	60da      	str	r2, [r3, #12]
 80069d2:	e005      	b.n	80069e0 <lcd_init+0x4d58>
 80069d4:	20000088 	.word	0x20000088
 80069d8:	40011000 	.word	0x40011000
 80069dc:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 80069e0:	4b56      	ldr	r3, [pc, #344]	@ (8006b3c <lcd_init+0x4eb4>)
 80069e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80069e6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80069e8:	4b54      	ldr	r3, [pc, #336]	@ (8006b3c <lcd_init+0x4eb4>)
 80069ea:	2280      	movs	r2, #128	@ 0x80
 80069ec:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80069ee:	4b53      	ldr	r3, [pc, #332]	@ (8006b3c <lcd_init+0x4eb4>)
 80069f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069f4:	611a      	str	r2, [r3, #16]
}
 80069f6:	bf00      	nop
 80069f8:	23d0      	movs	r3, #208	@ 0xd0
 80069fa:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80069fe:	4b4f      	ldr	r3, [pc, #316]	@ (8006b3c <lcd_init+0x4eb4>)
 8006a00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a04:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a06:	4b4d      	ldr	r3, [pc, #308]	@ (8006b3c <lcd_init+0x4eb4>)
 8006a08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a0c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a0e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	4b4a      	ldr	r3, [pc, #296]	@ (8006b40 <lcd_init+0x4eb8>)
 8006a16:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a18:	4b48      	ldr	r3, [pc, #288]	@ (8006b3c <lcd_init+0x4eb4>)
 8006a1a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a1e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a20:	4b46      	ldr	r3, [pc, #280]	@ (8006b3c <lcd_init+0x4eb4>)
 8006a22:	2280      	movs	r2, #128	@ 0x80
 8006a24:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a26:	4b45      	ldr	r3, [pc, #276]	@ (8006b3c <lcd_init+0x4eb4>)
 8006a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a2c:	611a      	str	r2, [r3, #16]
}
 8006a2e:	bf00      	nop

        lcd_wr_regno(0x29); /* ������ʾ */
        /* ����PWM���  ����ͨ��ռ�ձȿɵ� */
        lcd_wr_regno(0xD0); /* �����Զ���ƽ��DBC */
        lcd_wr_xdata(0x00); /* disable */
 8006a30:	2000      	movs	r0, #0
 8006a32:	f7f9 ffa3 	bl	800097c <lcd_wr_xdata>
 8006a36:	23be      	movs	r3, #190	@ 0xbe
 8006a38:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8006b3c <lcd_init+0x4eb4>)
 8006a3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a42:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a44:	4b3d      	ldr	r3, [pc, #244]	@ (8006b3c <lcd_init+0x4eb4>)
 8006a46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a4a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a4c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	4b3b      	ldr	r3, [pc, #236]	@ (8006b40 <lcd_init+0x4eb8>)
 8006a54:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a56:	4b39      	ldr	r3, [pc, #228]	@ (8006b3c <lcd_init+0x4eb4>)
 8006a58:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a5c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a5e:	4b37      	ldr	r3, [pc, #220]	@ (8006b3c <lcd_init+0x4eb4>)
 8006a60:	2280      	movs	r2, #128	@ 0x80
 8006a62:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a64:	4b35      	ldr	r3, [pc, #212]	@ (8006b3c <lcd_init+0x4eb4>)
 8006a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a6a:	611a      	str	r2, [r3, #16]
}
 8006a6c:	bf00      	nop

        lcd_wr_regno(0xBE); /* ����PWM��� */
        lcd_wr_xdata(0x05); /* 1����PWMƵ�� */
 8006a6e:	2005      	movs	r0, #5
 8006a70:	f7f9 ff84 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0xFE); /* 2����PWMռ�ձ� */
 8006a74:	20fe      	movs	r0, #254	@ 0xfe
 8006a76:	f7f9 ff81 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* 3����C */
 8006a7a:	2001      	movs	r0, #1
 8006a7c:	f7f9 ff7e 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 4����D */
 8006a80:	2000      	movs	r0, #0
 8006a82:	f7f9 ff7b 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 5����E */
 8006a86:	2000      	movs	r0, #0
 8006a88:	f7f9 ff78 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 6����F */
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f7f9 ff75 	bl	800097c <lcd_wr_xdata>
 8006a92:	23b8      	movs	r3, #184	@ 0xb8
 8006a94:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a98:	4b28      	ldr	r3, [pc, #160]	@ (8006b3c <lcd_init+0x4eb4>)
 8006a9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a9e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006aa0:	4b26      	ldr	r3, [pc, #152]	@ (8006b3c <lcd_init+0x4eb4>)
 8006aa2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006aa6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006aa8:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	4b24      	ldr	r3, [pc, #144]	@ (8006b40 <lcd_init+0x4eb8>)
 8006ab0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006ab2:	4b22      	ldr	r3, [pc, #136]	@ (8006b3c <lcd_init+0x4eb4>)
 8006ab4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006ab8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006aba:	4b20      	ldr	r3, [pc, #128]	@ (8006b3c <lcd_init+0x4eb4>)
 8006abc:	2280      	movs	r2, #128	@ 0x80
 8006abe:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8006b3c <lcd_init+0x4eb4>)
 8006ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ac6:	611a      	str	r2, [r3, #16]
}
 8006ac8:	bf00      	nop

        lcd_wr_regno(0xB8); /* ����GPIO���� */
        lcd_wr_xdata(0x03); /* 2��IO�����ó���� */
 8006aca:	2003      	movs	r0, #3
 8006acc:	f7f9 ff56 	bl	800097c <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* GPIOʹ��������IO���� */
 8006ad0:	2001      	movs	r0, #1
 8006ad2:	f7f9 ff53 	bl	800097c <lcd_wr_xdata>
 8006ad6:	23ba      	movs	r3, #186	@ 0xba
 8006ad8:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006adc:	4b17      	ldr	r3, [pc, #92]	@ (8006b3c <lcd_init+0x4eb4>)
 8006ade:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ae2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ae4:	4b15      	ldr	r3, [pc, #84]	@ (8006b3c <lcd_init+0x4eb4>)
 8006ae6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006aea:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006aec:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	4b13      	ldr	r3, [pc, #76]	@ (8006b40 <lcd_init+0x4eb8>)
 8006af4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006af6:	4b11      	ldr	r3, [pc, #68]	@ (8006b3c <lcd_init+0x4eb4>)
 8006af8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006afc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006afe:	4b0f      	ldr	r3, [pc, #60]	@ (8006b3c <lcd_init+0x4eb4>)
 8006b00:	2280      	movs	r2, #128	@ 0x80
 8006b02:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006b04:	4b0d      	ldr	r3, [pc, #52]	@ (8006b3c <lcd_init+0x4eb4>)
 8006b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b0a:	611a      	str	r2, [r3, #16]
}
 8006b0c:	bf00      	nop
        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0X01); /* GPIO[1:0]=01,����LCD���� */
 8006b0e:	2001      	movs	r0, #1
 8006b10:	f7f9 ff34 	bl	800097c <lcd_wr_xdata>
        lcd_ssd_backlight_set(100); /* ��������Ϊ���� */
 8006b14:	2064      	movs	r0, #100	@ 0x64
 8006b16:	f7fa ff1f 	bl	8001958 <lcd_ssd_backlight_set>
    }

    lcd_display_dir(0); /* Ĭ��Ϊ���� */
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	f7fa ffdc 	bl	8001ad8 <lcd_display_dir>
    LCD_BL(1);          /* �������� */
 8006b20:	4b06      	ldr	r3, [pc, #24]	@ (8006b3c <lcd_init+0x4eb4>)
 8006b22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b26:	611a      	str	r2, [r3, #16]
    lcd_clear(WHITE);
 8006b28:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006b2c:	f000 f80a 	bl	8006b44 <lcd_clear>
}
 8006b30:	bf00      	nop
 8006b32:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	40011000 	.word	0x40011000
 8006b40:	40010c00 	.word	0x40010c00

08006b44 <lcd_clear>:
 * @brief       ��������
 * @param       color: Ҫ��������ɫ
 * @retval      ��
 */
void lcd_clear(uint16_t color)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]
    uint32_t totalpoint = lcddev.width;
 8006b52:	4b27      	ldr	r3, [pc, #156]	@ (8006bf0 <lcd_clear+0xac>)
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	613b      	str	r3, [r7, #16]
    totalpoint *= lcddev.height;    /* �õ��ܵ��� */
 8006b58:	4b25      	ldr	r3, [pc, #148]	@ (8006bf0 <lcd_clear+0xac>)
 8006b5a:	885b      	ldrh	r3, [r3, #2]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	fb02 f303 	mul.w	r3, r2, r3
 8006b64:	613b      	str	r3, [r7, #16]
    lcd_set_cursor(0x00, 0x0000);   /* ���ù��λ�� */
 8006b66:	2100      	movs	r1, #0
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f7fa f80b 	bl	8000b84 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8006b6e:	4b20      	ldr	r3, [pc, #128]	@ (8006bf0 <lcd_clear+0xac>)
 8006b70:	891b      	ldrh	r3, [r3, #8]
 8006b72:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006b74:	4b1f      	ldr	r3, [pc, #124]	@ (8006bf4 <lcd_clear+0xb0>)
 8006b76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b7a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf4 <lcd_clear+0xb0>)
 8006b7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b82:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b84:	89fb      	ldrh	r3, [r7, #14]
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf8 <lcd_clear+0xb4>)
 8006b8a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006b8c:	4b19      	ldr	r3, [pc, #100]	@ (8006bf4 <lcd_clear+0xb0>)
 8006b8e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b92:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006b94:	4b17      	ldr	r3, [pc, #92]	@ (8006bf4 <lcd_clear+0xb0>)
 8006b96:	2280      	movs	r2, #128	@ 0x80
 8006b98:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006b9a:	4b16      	ldr	r3, [pc, #88]	@ (8006bf4 <lcd_clear+0xb0>)
 8006b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ba0:	611a      	str	r2, [r3, #16]
}
 8006ba2:	bf00      	nop
}
 8006ba4:	bf00      	nop
     * RS, CS�Ĳ���, �Ӷ������ٶ�, ��51֡��ߵ�78֡����, ���50%
     * ��������: -O2�Ż�, ��ˢ��
     * �����ٶ�Ҫ���ʱ��, ���Լ����Ż�: lcd_fill, lcd_color_fill, 
     * lcd_set_cursor �� lcd_draw_point �Ⱥ���, ��ҿ��������Ż�
     */
    LCD_RS(1);                      /* RS=1,��ʾд���� */
 8006ba6:	4b13      	ldr	r3, [pc, #76]	@ (8006bf4 <lcd_clear+0xb0>)
 8006ba8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006bae:	4b11      	ldr	r3, [pc, #68]	@ (8006bf4 <lcd_clear+0xb0>)
 8006bb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bb4:	611a      	str	r2, [r3, #16]
    
    for (index = 0; index < totalpoint; index++)
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	e00c      	b.n	8006bd6 <lcd_clear+0x92>
    {
        LCD_DATA_OUT(color);        /* д��Ҫд������ */
 8006bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8006bf8 <lcd_clear+0xb4>)
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	60d3      	str	r3, [r2, #12]
        LCD_WR(0);
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf4 <lcd_clear+0xb0>)
 8006bc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006bc8:	611a      	str	r2, [r3, #16]
        LCD_WR(1);
 8006bca:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf4 <lcd_clear+0xb0>)
 8006bcc:	2280      	movs	r2, #128	@ 0x80
 8006bce:	611a      	str	r2, [r3, #16]
    for (index = 0; index < totalpoint; index++)
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d3ee      	bcc.n	8006bbc <lcd_clear+0x78>
    }
    
    LCD_CS(1);
 8006bde:	4b05      	ldr	r3, [pc, #20]	@ (8006bf4 <lcd_clear+0xb0>)
 8006be0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006be4:	611a      	str	r2, [r3, #16]
}
 8006be6:	bf00      	nop
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000088 	.word	0x20000088
 8006bf4:	40011000 	.word	0x40011000
 8006bf8:	40010c00 	.word	0x40010c00

08006bfc <lcd_fill>:
 * @param       (sx,sy),(ex,ey):�����ζԽ�����,�����СΪ:(ex - sx + 1) * (ey - sy + 1)
 * @param       color: Ҫ������ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint32_t color)
{
 8006bfc:	b590      	push	{r4, r7, lr}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	4604      	mov	r4, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	4611      	mov	r1, r2
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4623      	mov	r3, r4
 8006c0c:	80fb      	strh	r3, [r7, #6]
 8006c0e:	4603      	mov	r3, r0
 8006c10:	80bb      	strh	r3, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	807b      	strh	r3, [r7, #2]
 8006c16:	4613      	mov	r3, r2
 8006c18:	803b      	strh	r3, [r7, #0]
    uint16_t i, j;
    uint16_t xlen = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	817b      	strh	r3, [r7, #10]
    xlen = ex - sx + 1;
 8006c1e:	887a      	ldrh	r2, [r7, #2]
 8006c20:	88fb      	ldrh	r3, [r7, #6]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3301      	adds	r3, #1
 8006c28:	817b      	strh	r3, [r7, #10]

    for (i = sy; i <= ey; i++)
 8006c2a:	88bb      	ldrh	r3, [r7, #4]
 8006c2c:	81fb      	strh	r3, [r7, #14]
 8006c2e:	e044      	b.n	8006cba <lcd_fill+0xbe>
    {
        lcd_set_cursor(sx, i);      /* ���ù��λ�� */
 8006c30:	89fa      	ldrh	r2, [r7, #14]
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	4611      	mov	r1, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7f9 ffa4 	bl	8000b84 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8006c3c:	4b23      	ldr	r3, [pc, #140]	@ (8006ccc <lcd_fill+0xd0>)
 8006c3e:	891b      	ldrh	r3, [r3, #8]
 8006c40:	813b      	strh	r3, [r7, #8]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006c42:	4b23      	ldr	r3, [pc, #140]	@ (8006cd0 <lcd_fill+0xd4>)
 8006c44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c48:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006c4a:	4b21      	ldr	r3, [pc, #132]	@ (8006cd0 <lcd_fill+0xd4>)
 8006c4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c50:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006c52:	893b      	ldrh	r3, [r7, #8]
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd4 <lcd_fill+0xd8>)
 8006c58:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd0 <lcd_fill+0xd4>)
 8006c5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c60:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006c62:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd0 <lcd_fill+0xd4>)
 8006c64:	2280      	movs	r2, #128	@ 0x80
 8006c66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006c68:	4b19      	ldr	r3, [pc, #100]	@ (8006cd0 <lcd_fill+0xd4>)
 8006c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c6e:	611a      	str	r2, [r3, #16]
}
 8006c70:	bf00      	nop
}
 8006c72:	bf00      	nop
        lcd_write_ram_prepare();    /* ��ʼд��GRAM */

        for (j = 0; j < xlen; j++)
 8006c74:	2300      	movs	r3, #0
 8006c76:	81bb      	strh	r3, [r7, #12]
 8006c78:	e018      	b.n	8006cac <lcd_fill+0xb0>
        {
            lcd_wr_data(color);     /* д������ */
 8006c7a:	4b15      	ldr	r3, [pc, #84]	@ (8006cd0 <lcd_fill+0xd4>)
 8006c7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c80:	611a      	str	r2, [r3, #16]
 8006c82:	4b13      	ldr	r3, [pc, #76]	@ (8006cd0 <lcd_fill+0xd4>)
 8006c84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c88:	611a      	str	r2, [r3, #16]
 8006c8a:	4a12      	ldr	r2, [pc, #72]	@ (8006cd4 <lcd_fill+0xd8>)
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	60d3      	str	r3, [r2, #12]
 8006c90:	4b0f      	ldr	r3, [pc, #60]	@ (8006cd0 <lcd_fill+0xd4>)
 8006c92:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c96:	611a      	str	r2, [r3, #16]
 8006c98:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <lcd_fill+0xd4>)
 8006c9a:	2280      	movs	r2, #128	@ 0x80
 8006c9c:	611a      	str	r2, [r3, #16]
 8006c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd0 <lcd_fill+0xd4>)
 8006ca0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ca4:	611a      	str	r2, [r3, #16]
        for (j = 0; j < xlen; j++)
 8006ca6:	89bb      	ldrh	r3, [r7, #12]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	81bb      	strh	r3, [r7, #12]
 8006cac:	89ba      	ldrh	r2, [r7, #12]
 8006cae:	897b      	ldrh	r3, [r7, #10]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d3e2      	bcc.n	8006c7a <lcd_fill+0x7e>
    for (i = sy; i <= ey; i++)
 8006cb4:	89fb      	ldrh	r3, [r7, #14]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	81fb      	strh	r3, [r7, #14]
 8006cba:	89fa      	ldrh	r2, [r7, #14]
 8006cbc:	883b      	ldrh	r3, [r7, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d9b6      	bls.n	8006c30 <lcd_fill+0x34>
        }
    }
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd90      	pop	{r4, r7, pc}
 8006ccc:	20000088 	.word	0x20000088
 8006cd0:	40011000 	.word	0x40011000
 8006cd4:	40010c00 	.word	0x40010c00

08006cd8 <lcd_draw_hline>:
 * @param       len  : �߳���
 * @param       color: ���ε���ɫ
 * @retval      ��
 */
void lcd_draw_hline(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8006cd8:	b590      	push	{r4, r7, lr}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	4604      	mov	r4, r0
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4623      	mov	r3, r4
 8006ce8:	80fb      	strh	r3, [r7, #6]
 8006cea:	4603      	mov	r3, r0
 8006cec:	80bb      	strh	r3, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	807b      	strh	r3, [r7, #2]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	803b      	strh	r3, [r7, #0]
    if ((len == 0) || (x > lcddev.width) || (y > lcddev.height))return;
 8006cf6:	887b      	ldrh	r3, [r7, #2]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d018      	beq.n	8006d2e <lcd_draw_hline+0x56>
 8006cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8006d38 <lcd_draw_hline+0x60>)
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	88fa      	ldrh	r2, [r7, #6]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d813      	bhi.n	8006d2e <lcd_draw_hline+0x56>
 8006d06:	4b0c      	ldr	r3, [pc, #48]	@ (8006d38 <lcd_draw_hline+0x60>)
 8006d08:	885b      	ldrh	r3, [r3, #2]
 8006d0a:	88ba      	ldrh	r2, [r7, #4]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d80e      	bhi.n	8006d2e <lcd_draw_hline+0x56>

    lcd_fill(x, y, x + len - 1, y, color);
 8006d10:	88fa      	ldrh	r2, [r7, #6]
 8006d12:	887b      	ldrh	r3, [r7, #2]
 8006d14:	4413      	add	r3, r2
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	883b      	ldrh	r3, [r7, #0]
 8006d1e:	88bc      	ldrh	r4, [r7, #4]
 8006d20:	88b9      	ldrh	r1, [r7, #4]
 8006d22:	88f8      	ldrh	r0, [r7, #6]
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	4623      	mov	r3, r4
 8006d28:	f7ff ff68 	bl	8006bfc <lcd_fill>
 8006d2c:	e000      	b.n	8006d30 <lcd_draw_hline+0x58>
    if ((len == 0) || (x > lcddev.width) || (y > lcddev.height))return;
 8006d2e:	bf00      	nop
}
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd90      	pop	{r4, r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000088 	.word	0x20000088

08006d3c <lcd_fill_circle>:
 * @param       r    : �뾶
 * @param       color: Բ����ɫ
 * @retval      ��
 */
void lcd_fill_circle(uint16_t x, uint16_t y, uint16_t r, uint16_t color)
{
 8006d3c:	b590      	push	{r4, r7, lr}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4604      	mov	r4, r0
 8006d44:	4608      	mov	r0, r1
 8006d46:	4611      	mov	r1, r2
 8006d48:	461a      	mov	r2, r3
 8006d4a:	4623      	mov	r3, r4
 8006d4c:	80fb      	strh	r3, [r7, #6]
 8006d4e:	4603      	mov	r3, r0
 8006d50:	80bb      	strh	r3, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	807b      	strh	r3, [r7, #2]
 8006d56:	4613      	mov	r3, r2
 8006d58:	803b      	strh	r3, [r7, #0]
    uint32_t i;
    uint32_t imax = ((uint32_t)r * 707) / 1000 + 1;
 8006d5a:	887b      	ldrh	r3, [r7, #2]
 8006d5c:	f240 22c3 	movw	r2, #707	@ 0x2c3
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
 8006d64:	4a42      	ldr	r2, [pc, #264]	@ (8006e70 <lcd_fill_circle+0x134>)
 8006d66:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6a:	099b      	lsrs	r3, r3, #6
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	60fb      	str	r3, [r7, #12]
    uint32_t sqmax = (uint32_t)r * (uint32_t)r + (uint32_t)r / 2;
 8006d70:	887b      	ldrh	r3, [r7, #2]
 8006d72:	887a      	ldrh	r2, [r7, #2]
 8006d74:	fb02 f303 	mul.w	r3, r2, r3
 8006d78:	887a      	ldrh	r2, [r7, #2]
 8006d7a:	0852      	lsrs	r2, r2, #1
 8006d7c:	b292      	uxth	r2, r2
 8006d7e:	4413      	add	r3, r2
 8006d80:	60bb      	str	r3, [r7, #8]
    uint32_t xr = r;
 8006d82:	887b      	ldrh	r3, [r7, #2]
 8006d84:	613b      	str	r3, [r7, #16]

    lcd_draw_hline(x - r, y, 2 * r, color);
 8006d86:	88fa      	ldrh	r2, [r7, #6]
 8006d88:	887b      	ldrh	r3, [r7, #2]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	b298      	uxth	r0, r3
 8006d8e:	887b      	ldrh	r3, [r7, #2]
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	883b      	ldrh	r3, [r7, #0]
 8006d96:	88b9      	ldrh	r1, [r7, #4]
 8006d98:	f7ff ff9e 	bl	8006cd8 <lcd_draw_hline>

    for (i = 1; i <= imax; i++)
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	e05d      	b.n	8006e5e <lcd_fill_circle+0x122>
    {
        if ((i * i + xr * xr) > sqmax)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	fb03 f203 	mul.w	r2, r3, r3
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	fb03 f303 	mul.w	r3, r3, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d22e      	bcs.n	8006e14 <lcd_fill_circle+0xd8>
        {
            /* draw lines from outside */
            if (xr > imax)
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d927      	bls.n	8006e0e <lcd_fill_circle+0xd2>
            {
                lcd_draw_hline (x - i + 1, y + xr, 2 * (i - 1), color);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	88fa      	ldrh	r2, [r7, #6]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3301      	adds	r3, #1
 8006dca:	b298      	uxth	r0, r3
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	88bb      	ldrh	r3, [r7, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	b299      	uxth	r1, r3
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	883b      	ldrh	r3, [r7, #0]
 8006de2:	f7ff ff79 	bl	8006cd8 <lcd_draw_hline>
                lcd_draw_hline (x - i + 1, y - xr, 2 * (i - 1), color);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3301      	adds	r3, #1
 8006df2:	b298      	uxth	r0, r3
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	88ba      	ldrh	r2, [r7, #4]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	b299      	uxth	r1, r3
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	883b      	ldrh	r3, [r7, #0]
 8006e0a:	f7ff ff65 	bl	8006cd8 <lcd_draw_hline>
            }

            xr--;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	613b      	str	r3, [r7, #16]
        }

        /* draw lines from inside (center) */
        lcd_draw_hline(x - xr, y + i, 2 * xr, color);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	88fa      	ldrh	r2, [r7, #6]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	b298      	uxth	r0, r3
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	88bb      	ldrh	r3, [r7, #4]
 8006e24:	4413      	add	r3, r2
 8006e26:	b299      	uxth	r1, r3
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	883b      	ldrh	r3, [r7, #0]
 8006e32:	f7ff ff51 	bl	8006cd8 <lcd_draw_hline>
        lcd_draw_hline(x - xr, y - i, 2 * xr, color);
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	88fa      	ldrh	r2, [r7, #6]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	b298      	uxth	r0, r3
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	88ba      	ldrh	r2, [r7, #4]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	b299      	uxth	r1, r3
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	883b      	ldrh	r3, [r7, #0]
 8006e54:	f7ff ff40 	bl	8006cd8 <lcd_draw_hline>
    for (i = 1; i <= imax; i++)
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d99d      	bls.n	8006da2 <lcd_fill_circle+0x66>
    }
}
 8006e66:	bf00      	nop
 8006e68:	bf00      	nop
 8006e6a:	371c      	adds	r7, #28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd90      	pop	{r4, r7, pc}
 8006e70:	10624dd3 	.word	0x10624dd3

08006e74 <lcd_show_char>:
 * @param       mode : ���ӷ�ʽ(1); �ǵ��ӷ�ʽ(0);
 * @param       color : �ַ�����ɫ;
 * @retval      ��
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8006e74:	b590      	push	{r4, r7, lr}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	4608      	mov	r0, r1
 8006e7e:	4611      	mov	r1, r2
 8006e80:	461a      	mov	r2, r3
 8006e82:	4623      	mov	r3, r4
 8006e84:	80fb      	strh	r3, [r7, #6]
 8006e86:	4603      	mov	r3, r0
 8006e88:	80bb      	strh	r3, [r7, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	70fb      	strb	r3, [r7, #3]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8006e92:	88bb      	ldrh	r3, [r7, #4]
 8006e94:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* �õ�����һ���ַ���Ӧ������ռ���ֽ��� */
 8006e9e:	78bb      	ldrb	r3, [r7, #2]
 8006ea0:	08db      	lsrs	r3, r3, #3
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	78bb      	ldrb	r3, [r7, #2]
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bf14      	ite	ne
 8006eb2:	2301      	movne	r3, #1
 8006eb4:	2300      	moveq	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	4413      	add	r3, r2
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	78ba      	ldrb	r2, [r7, #2]
 8006ebe:	0852      	lsrs	r2, r2, #1
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	fb02 f303 	mul.w	r3, r2, r3
 8006ec6:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* �õ�ƫ�ƺ��ֵ��ASCII�ֿ��Ǵӿո�ʼȡģ������-' '���Ƕ�Ӧ�ַ����ֿ⣩ */
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	3b20      	subs	r3, #32
 8006ecc:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8006ece:	78bb      	ldrb	r3, [r7, #2]
 8006ed0:	3b0c      	subs	r3, #12
 8006ed2:	2b14      	cmp	r3, #20
 8006ed4:	f200 8099 	bhi.w	800700a <lcd_show_char+0x196>
 8006ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee0 <lcd_show_char+0x6c>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006f35 	.word	0x08006f35
 8006ee4:	0800700b 	.word	0x0800700b
 8006ee8:	0800700b 	.word	0x0800700b
 8006eec:	0800700b 	.word	0x0800700b
 8006ef0:	08006f47 	.word	0x08006f47
 8006ef4:	0800700b 	.word	0x0800700b
 8006ef8:	0800700b 	.word	0x0800700b
 8006efc:	0800700b 	.word	0x0800700b
 8006f00:	0800700b 	.word	0x0800700b
 8006f04:	0800700b 	.word	0x0800700b
 8006f08:	0800700b 	.word	0x0800700b
 8006f0c:	0800700b 	.word	0x0800700b
 8006f10:	08006f53 	.word	0x08006f53
 8006f14:	0800700b 	.word	0x0800700b
 8006f18:	0800700b 	.word	0x0800700b
 8006f1c:	0800700b 	.word	0x0800700b
 8006f20:	0800700b 	.word	0x0800700b
 8006f24:	0800700b 	.word	0x0800700b
 8006f28:	0800700b 	.word	0x0800700b
 8006f2c:	0800700b 	.word	0x0800700b
 8006f30:	08006f65 	.word	0x08006f65
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* ����1206���� */
 8006f34:	78fa      	ldrb	r2, [r7, #3]
 8006f36:	4613      	mov	r3, r2
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4a36      	ldr	r2, [pc, #216]	@ (8007018 <lcd_show_char+0x1a4>)
 8006f40:	4413      	add	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
            break;
 8006f44:	e014      	b.n	8006f70 <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* ����1608���� */
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	4a34      	ldr	r2, [pc, #208]	@ (800701c <lcd_show_char+0x1a8>)
 8006f4c:	4413      	add	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
            break;
 8006f50:	e00e      	b.n	8006f70 <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* ����2412���� */
 8006f52:	78fa      	ldrb	r2, [r7, #3]
 8006f54:	4613      	mov	r3, r2
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4a30      	ldr	r2, [pc, #192]	@ (8007020 <lcd_show_char+0x1ac>)
 8006f5e:	4413      	add	r3, r2
 8006f60:	613b      	str	r3, [r7, #16]
            break;
 8006f62:	e005      	b.n	8006f70 <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* ����3216���� */
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	019b      	lsls	r3, r3, #6
 8006f68:	4a2e      	ldr	r2, [pc, #184]	@ (8007024 <lcd_show_char+0x1b0>)
 8006f6a:	4413      	add	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
            break;
 8006f6e:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 8006f70:	2300      	movs	r3, #0
 8006f72:	757b      	strb	r3, [r7, #21]
 8006f74:	e044      	b.n	8007000 <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* ��ȡ�ַ��ĵ������� */
 8006f76:	7d7b      	ldrb	r3, [r7, #21]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8006f80:	2300      	movs	r3, #0
 8006f82:	75bb      	strb	r3, [r7, #22]
 8006f84:	e034      	b.n	8006ff0 <lcd_show_char+0x17c>
        {
            if (temp & 0x80)        /* ��Ч��,��Ҫ��ʾ */
 8006f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	da06      	bge.n	8006f9c <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* �������,Ҫ��ʾ����� */
 8006f8e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006f90:	88b9      	ldrh	r1, [r7, #4]
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fa fc95 	bl	80018c4 <lcd_draw_point>
 8006f9a:	e00a      	b.n	8006fb2 <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* ��Ч��,����ʾ */
 8006f9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d106      	bne.n	8006fb2 <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* ������ɫ,�൱������㲻��ʾ(ע�ⱳ��ɫ��ȫ�ֱ�������) */
 8006fa4:	4b20      	ldr	r3, [pc, #128]	@ (8007028 <lcd_show_char+0x1b4>)
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	88b9      	ldrh	r1, [r7, #4]
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fa fc89 	bl	80018c4 <lcd_draw_point>
            }

            temp <<= 1; /* ��λ, �Ա��ȡ��һ��λ��״̬ */
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	75fb      	strb	r3, [r7, #23]
            y++;
 8006fb8:	88bb      	ldrh	r3, [r7, #4]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* �������� */
 8006fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800702c <lcd_show_char+0x1b8>)
 8006fc0:	885b      	ldrh	r3, [r3, #2]
 8006fc2:	88ba      	ldrh	r2, [r7, #4]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d222      	bcs.n	800700e <lcd_show_char+0x19a>

            if ((y - y0) == size)   /* ��ʾ��һ����? */
 8006fc8:	88ba      	ldrh	r2, [r7, #4]
 8006fca:	89fb      	ldrh	r3, [r7, #14]
 8006fcc:	1ad2      	subs	r2, r2, r3
 8006fce:	78bb      	ldrb	r3, [r7, #2]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d10a      	bne.n	8006fea <lcd_show_char+0x176>
            {
                y = y0; /* y���긴λ */
 8006fd4:	89fb      	ldrh	r3, [r7, #14]
 8006fd6:	80bb      	strh	r3, [r7, #4]
                x++;    /* x������� */
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   /* x���곬������ */
 8006fde:	4b13      	ldr	r3, [pc, #76]	@ (800702c <lcd_show_char+0x1b8>)
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	88fa      	ldrh	r2, [r7, #6]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d307      	bcc.n	8006ff8 <lcd_show_char+0x184>
 8006fe8:	e012      	b.n	8007010 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8006fea:	7dbb      	ldrb	r3, [r7, #22]
 8006fec:	3301      	adds	r3, #1
 8006fee:	75bb      	strb	r3, [r7, #22]
 8006ff0:	7dbb      	ldrb	r3, [r7, #22]
 8006ff2:	2b07      	cmp	r3, #7
 8006ff4:	d9c7      	bls.n	8006f86 <lcd_show_char+0x112>
 8006ff6:	e000      	b.n	8006ffa <lcd_show_char+0x186>

                break;
 8006ff8:	bf00      	nop
    for (t = 0; t < csize; t++)
 8006ffa:	7d7b      	ldrb	r3, [r7, #21]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	757b      	strb	r3, [r7, #21]
 8007000:	7d7a      	ldrb	r2, [r7, #21]
 8007002:	7b7b      	ldrb	r3, [r7, #13]
 8007004:	429a      	cmp	r2, r3
 8007006:	d3b6      	bcc.n	8006f76 <lcd_show_char+0x102>
 8007008:	e002      	b.n	8007010 <lcd_show_char+0x19c>
            return ;
 800700a:	bf00      	nop
 800700c:	e000      	b.n	8007010 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* �������� */
 800700e:	bf00      	nop
            }
        }
    }
}
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	bd90      	pop	{r4, r7, pc}
 8007016:	bf00      	nop
 8007018:	0800ade4 	.word	0x0800ade4
 800701c:	0800b258 	.word	0x0800b258
 8007020:	0800b848 	.word	0x0800b848
 8007024:	0800c5a4 	.word	0x0800c5a4
 8007028:	20000000 	.word	0x20000000
 800702c:	20000088 	.word	0x20000088

08007030 <lcd_show_string>:
 * @param       p           : �ַ����׵�ַ
 * @param       color       : �ַ�������ɫ;
 * @retval      ��
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8007030:	b590      	push	{r4, r7, lr}
 8007032:	b087      	sub	sp, #28
 8007034:	af02      	add	r7, sp, #8
 8007036:	4604      	mov	r4, r0
 8007038:	4608      	mov	r0, r1
 800703a:	4611      	mov	r1, r2
 800703c:	461a      	mov	r2, r3
 800703e:	4623      	mov	r3, r4
 8007040:	80fb      	strh	r3, [r7, #6]
 8007042:	4603      	mov	r3, r0
 8007044:	80bb      	strh	r3, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	807b      	strh	r3, [r7, #2]
 800704a:	4613      	mov	r3, r2
 800704c:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	73fb      	strb	r3, [r7, #15]
    width += x;
 8007052:	887a      	ldrh	r2, [r7, #2]
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	4413      	add	r3, r2
 8007058:	807b      	strh	r3, [r7, #2]
    height += y;
 800705a:	883a      	ldrh	r2, [r7, #0]
 800705c:	88bb      	ldrh	r3, [r7, #4]
 800705e:	4413      	add	r3, r2
 8007060:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 8007062:	e027      	b.n	80070b4 <lcd_show_string+0x84>
    {
        if (x >= width)
 8007064:	88fa      	ldrh	r2, [r7, #6]
 8007066:	887b      	ldrh	r3, [r7, #2]
 8007068:	429a      	cmp	r2, r3
 800706a:	d307      	bcc.n	800707c <lcd_show_string+0x4c>
        {
            x = x0;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	80fb      	strh	r3, [r7, #6]
            y += size;
 8007070:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007074:	b29a      	uxth	r2, r3
 8007076:	88bb      	ldrh	r3, [r7, #4]
 8007078:	4413      	add	r3, r2
 800707a:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* �˳� */
 800707c:	88ba      	ldrh	r2, [r7, #4]
 800707e:	883b      	ldrh	r3, [r7, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d220      	bcs.n	80070c6 <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 8007084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007086:	781a      	ldrb	r2, [r3, #0]
 8007088:	f897 4020 	ldrb.w	r4, [r7, #32]
 800708c:	88b9      	ldrh	r1, [r7, #4]
 800708e:	88f8      	ldrh	r0, [r7, #6]
 8007090:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007092:	9301      	str	r3, [sp, #4]
 8007094:	2300      	movs	r3, #0
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	4623      	mov	r3, r4
 800709a:	f7ff feeb 	bl	8006e74 <lcd_show_char>
        x += size / 2;
 800709e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	88fb      	ldrh	r3, [r7, #6]
 80070aa:	4413      	add	r3, r2
 80070ac:	80fb      	strh	r3, [r7, #6]
        p++;
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	3301      	adds	r3, #1
 80070b2:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80070ba:	d805      	bhi.n	80070c8 <lcd_show_string+0x98>
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	2b1f      	cmp	r3, #31
 80070c2:	d8cf      	bhi.n	8007064 <lcd_show_string+0x34>
    }
}
 80070c4:	e000      	b.n	80070c8 <lcd_show_string+0x98>
        if (y >= height)break;  /* �˳� */
 80070c6:	bf00      	nop
}
 80070c8:	bf00      	nop
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd90      	pop	{r4, r7, pc}

080070d0 <lcd_showpic>:
void lcd_showpic(uint16_t x, uint16_t y, uint16_t column, uint16_t row, unsigned short *pic, uint8_t size)
{
 80070d0:	b590      	push	{r4, r7, lr}
 80070d2:	b089      	sub	sp, #36	@ 0x24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	4611      	mov	r1, r2
 80070dc:	461a      	mov	r2, r3
 80070de:	4623      	mov	r3, r4
 80070e0:	80fb      	strh	r3, [r7, #6]
 80070e2:	4603      	mov	r3, r0
 80070e4:	80bb      	strh	r3, [r7, #4]
 80070e6:	460b      	mov	r3, r1
 80070e8:	807b      	strh	r3, [r7, #2]
 80070ea:	4613      	mov	r3, r2
 80070ec:	803b      	strh	r3, [r7, #0]
    uint16_t i, j;
    uint16_t *data = pic;
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	61bb      	str	r3, [r7, #24]

    for (j = 0; j < row; j++) {
 80070f2:	2300      	movs	r3, #0
 80070f4:	83bb      	strh	r3, [r7, #28]
 80070f6:	e049      	b.n	800718c <lcd_showpic+0xbc>
        for (i = 0; i < column; i++) {
 80070f8:	2300      	movs	r3, #0
 80070fa:	83fb      	strh	r3, [r7, #30]
 80070fc:	e03f      	b.n	800717e <lcd_showpic+0xae>
            uint16_t color = *data++; // 获取当前像素颜色
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	1c9a      	adds	r2, r3, #2
 8007102:	61ba      	str	r2, [r7, #24]
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	827b      	strh	r3, [r7, #18]
            uint16_t m, n;

            // 根据 size 调整显示倍数
            for (m = 0; m < size; m++) {
 8007108:	2300      	movs	r3, #0
 800710a:	82fb      	strh	r3, [r7, #22]
 800710c:	e02e      	b.n	800716c <lcd_showpic+0x9c>
                for (n = 0; n < size; n++) {
 800710e:	2300      	movs	r3, #0
 8007110:	82bb      	strh	r3, [r7, #20]
 8007112:	e022      	b.n	800715a <lcd_showpic+0x8a>
                    uint16_t scaled_x = x + i * size + m; // 放大后的 x 坐标
 8007114:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007118:	b29b      	uxth	r3, r3
 800711a:	8bfa      	ldrh	r2, [r7, #30]
 800711c:	fb02 f303 	mul.w	r3, r2, r3
 8007120:	b29a      	uxth	r2, r3
 8007122:	88fb      	ldrh	r3, [r7, #6]
 8007124:	4413      	add	r3, r2
 8007126:	b29a      	uxth	r2, r3
 8007128:	8afb      	ldrh	r3, [r7, #22]
 800712a:	4413      	add	r3, r2
 800712c:	823b      	strh	r3, [r7, #16]
                    uint16_t scaled_y = y + j * size + n; // 放大后的 y 坐标
 800712e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007132:	b29b      	uxth	r3, r3
 8007134:	8bba      	ldrh	r2, [r7, #28]
 8007136:	fb02 f303 	mul.w	r3, r2, r3
 800713a:	b29a      	uxth	r2, r3
 800713c:	88bb      	ldrh	r3, [r7, #4]
 800713e:	4413      	add	r3, r2
 8007140:	b29a      	uxth	r2, r3
 8007142:	8abb      	ldrh	r3, [r7, #20]
 8007144:	4413      	add	r3, r2
 8007146:	81fb      	strh	r3, [r7, #14]
                    lcd_draw_point(scaled_x, scaled_y, color);
 8007148:	8a7a      	ldrh	r2, [r7, #18]
 800714a:	89f9      	ldrh	r1, [r7, #14]
 800714c:	8a3b      	ldrh	r3, [r7, #16]
 800714e:	4618      	mov	r0, r3
 8007150:	f7fa fbb8 	bl	80018c4 <lcd_draw_point>
                for (n = 0; n < size; n++) {
 8007154:	8abb      	ldrh	r3, [r7, #20]
 8007156:	3301      	adds	r3, #1
 8007158:	82bb      	strh	r3, [r7, #20]
 800715a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800715e:	b29b      	uxth	r3, r3
 8007160:	8aba      	ldrh	r2, [r7, #20]
 8007162:	429a      	cmp	r2, r3
 8007164:	d3d6      	bcc.n	8007114 <lcd_showpic+0x44>
            for (m = 0; m < size; m++) {
 8007166:	8afb      	ldrh	r3, [r7, #22]
 8007168:	3301      	adds	r3, #1
 800716a:	82fb      	strh	r3, [r7, #22]
 800716c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007170:	b29b      	uxth	r3, r3
 8007172:	8afa      	ldrh	r2, [r7, #22]
 8007174:	429a      	cmp	r2, r3
 8007176:	d3ca      	bcc.n	800710e <lcd_showpic+0x3e>
        for (i = 0; i < column; i++) {
 8007178:	8bfb      	ldrh	r3, [r7, #30]
 800717a:	3301      	adds	r3, #1
 800717c:	83fb      	strh	r3, [r7, #30]
 800717e:	8bfa      	ldrh	r2, [r7, #30]
 8007180:	887b      	ldrh	r3, [r7, #2]
 8007182:	429a      	cmp	r2, r3
 8007184:	d3bb      	bcc.n	80070fe <lcd_showpic+0x2e>
    for (j = 0; j < row; j++) {
 8007186:	8bbb      	ldrh	r3, [r7, #28]
 8007188:	3301      	adds	r3, #1
 800718a:	83bb      	strh	r3, [r7, #28]
 800718c:	8bba      	ldrh	r2, [r7, #28]
 800718e:	883b      	ldrh	r3, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d3b1      	bcc.n	80070f8 <lcd_showpic+0x28>
                }
            }
        }
    }
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop
 8007198:	3724      	adds	r7, #36	@ 0x24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd90      	pop	{r4, r7, pc}
	...

080071a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80071a6:	f000 fdc9 	bl	8007d3c <HAL_Init>

  /* USER CODE BEGIN Init */
  lcd_init();
 80071aa:	f7fa fd6d 	bl	8001c88 <lcd_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80071ae:	f000 f84f 	bl	8007250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80071b2:	f7f9 fb3f 	bl	8000834 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80071b6:	f000 fd1d 	bl	8007bf4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80071ba:	f000 fc95 	bl	8007ae8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80071be:	f000 fc47 	bl	8007a50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)rxBuffer,1);
 80071c2:	2201      	movs	r2, #1
 80071c4:	491b      	ldr	r1, [pc, #108]	@ (8007234 <main+0x94>)
 80071c6:	481c      	ldr	r0, [pc, #112]	@ (8007238 <main+0x98>)
 80071c8:	f002 fb93 	bl	80098f2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80071cc:	481b      	ldr	r0, [pc, #108]	@ (800723c <main+0x9c>)
 80071ce:	f001 fedf 	bl	8008f90 <HAL_TIM_Base_Start_IT>
  uint8_t flag = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (stop_flag == 1){
 80071d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007240 <main+0xa0>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d1fb      	bne.n	80071d6 <main+0x36>

		  lcd_fill_circle(lcddev.width/2,lcddev.height/3,50,BLUE);
 80071de:	4b19      	ldr	r3, [pc, #100]	@ (8007244 <main+0xa4>)
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	085b      	lsrs	r3, r3, #1
 80071e4:	b298      	uxth	r0, r3
 80071e6:	4b17      	ldr	r3, [pc, #92]	@ (8007244 <main+0xa4>)
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	4a17      	ldr	r2, [pc, #92]	@ (8007248 <main+0xa8>)
 80071ec:	fba2 2303 	umull	r2, r3, r2, r3
 80071f0:	085b      	lsrs	r3, r3, #1
 80071f2:	b299      	uxth	r1, r3
 80071f4:	231f      	movs	r3, #31
 80071f6:	2232      	movs	r2, #50	@ 0x32
 80071f8:	f7ff fda0 	bl	8006d3c <lcd_fill_circle>
		  lcd_show_string(lcddev.width/2 - 100, lcddev.height/3 + 50, 300,16,16,"THE BEST PLAYER! STOP!",RED);
 80071fc:	4b11      	ldr	r3, [pc, #68]	@ (8007244 <main+0xa4>)
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	085b      	lsrs	r3, r3, #1
 8007202:	b29b      	uxth	r3, r3
 8007204:	3b64      	subs	r3, #100	@ 0x64
 8007206:	b298      	uxth	r0, r3
 8007208:	4b0e      	ldr	r3, [pc, #56]	@ (8007244 <main+0xa4>)
 800720a:	885b      	ldrh	r3, [r3, #2]
 800720c:	4a0e      	ldr	r2, [pc, #56]	@ (8007248 <main+0xa8>)
 800720e:	fba2 2303 	umull	r2, r3, r2, r3
 8007212:	085b      	lsrs	r3, r3, #1
 8007214:	b29b      	uxth	r3, r3
 8007216:	3332      	adds	r3, #50	@ 0x32
 8007218:	b299      	uxth	r1, r3
 800721a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800721e:	9302      	str	r3, [sp, #8]
 8007220:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <main+0xac>)
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	2310      	movs	r3, #16
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	2310      	movs	r3, #16
 800722a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800722e:	f7ff feff 	bl	8007030 <lcd_show_string>
	  if (stop_flag == 1){
 8007232:	e7d0      	b.n	80071d6 <main+0x36>
 8007234:	20000098 	.word	0x20000098
 8007238:	200016e4 	.word	0x200016e4
 800723c:	2000169c 	.word	0x2000169c
 8007240:	2000000f 	.word	0x2000000f
 8007244:	20000088 	.word	0x20000088
 8007248:	aaaaaaab 	.word	0xaaaaaaab
 800724c:	0800ad8c 	.word	0x0800ad8c

08007250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b090      	sub	sp, #64	@ 0x40
 8007254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007256:	f107 0318 	add.w	r3, r7, #24
 800725a:	2228      	movs	r2, #40	@ 0x28
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f003 f8f8 	bl	800a454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007264:	1d3b      	adds	r3, r7, #4
 8007266:	2200      	movs	r2, #0
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	605a      	str	r2, [r3, #4]
 800726c:	609a      	str	r2, [r3, #8]
 800726e:	60da      	str	r2, [r3, #12]
 8007270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007272:	2301      	movs	r3, #1
 8007274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800727a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800727c:	2300      	movs	r3, #0
 800727e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007280:	2301      	movs	r3, #1
 8007282:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007284:	2302      	movs	r3, #2
 8007286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800728c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800728e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8007292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007294:	f107 0318 	add.w	r3, r7, #24
 8007298:	4618      	mov	r0, r3
 800729a:	f001 fa19 	bl	80086d0 <HAL_RCC_OscConfig>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80072a4:	f000 f819 	bl	80072da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072a8:	230f      	movs	r3, #15
 80072aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072ac:	2302      	movs	r3, #2
 80072ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80072b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80072be:	1d3b      	adds	r3, r7, #4
 80072c0:	2102      	movs	r1, #2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fc86 	bl	8008bd4 <HAL_RCC_ClockConfig>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80072ce:	f000 f804 	bl	80072da <Error_Handler>
  }
}
 80072d2:	bf00      	nop
 80072d4:	3740      	adds	r7, #64	@ 0x40
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80072da:	b480      	push	{r7}
 80072dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80072de:	b672      	cpsid	i
}
 80072e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80072e2:	bf00      	nop
 80072e4:	e7fd      	b.n	80072e2 <Error_Handler+0x8>
	...

080072e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80072ee:	4b16      	ldr	r3, [pc, #88]	@ (8007348 <HAL_MspInit+0x60>)
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	4a15      	ldr	r2, [pc, #84]	@ (8007348 <HAL_MspInit+0x60>)
 80072f4:	f043 0301 	orr.w	r3, r3, #1
 80072f8:	6193      	str	r3, [r2, #24]
 80072fa:	4b13      	ldr	r3, [pc, #76]	@ (8007348 <HAL_MspInit+0x60>)
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	60bb      	str	r3, [r7, #8]
 8007304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007306:	4b10      	ldr	r3, [pc, #64]	@ (8007348 <HAL_MspInit+0x60>)
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	4a0f      	ldr	r2, [pc, #60]	@ (8007348 <HAL_MspInit+0x60>)
 800730c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007310:	61d3      	str	r3, [r2, #28]
 8007312:	4b0d      	ldr	r3, [pc, #52]	@ (8007348 <HAL_MspInit+0x60>)
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800731a:	607b      	str	r3, [r7, #4]
 800731c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800731e:	2005      	movs	r0, #5
 8007320:	f000 fe5e 	bl	8007fe0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007324:	4b09      	ldr	r3, [pc, #36]	@ (800734c <HAL_MspInit+0x64>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	4a04      	ldr	r2, [pc, #16]	@ (800734c <HAL_MspInit+0x64>)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007340:	bf00      	nop
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40021000 	.word	0x40021000
 800734c:	40010000 	.word	0x40010000

08007350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007354:	bf00      	nop
 8007356:	e7fd      	b.n	8007354 <NMI_Handler+0x4>

08007358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800735c:	bf00      	nop
 800735e:	e7fd      	b.n	800735c <HardFault_Handler+0x4>

08007360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007364:	bf00      	nop
 8007366:	e7fd      	b.n	8007364 <MemManage_Handler+0x4>

08007368 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800736c:	bf00      	nop
 800736e:	e7fd      	b.n	800736c <BusFault_Handler+0x4>

08007370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007374:	bf00      	nop
 8007376:	e7fd      	b.n	8007374 <UsageFault_Handler+0x4>

08007378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800737c:	bf00      	nop
 800737e:	46bd      	mov	sp, r7
 8007380:	bc80      	pop	{r7}
 8007382:	4770      	bx	lr

08007384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007388:	bf00      	nop
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007394:	bf00      	nop
 8007396:	46bd      	mov	sp, r7
 8007398:	bc80      	pop	{r7}
 800739a:	4770      	bx	lr

0800739c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073a0:	f000 fd12 	bl	8007dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073a4:	bf00      	nop
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
 80073ac:	2001      	movs	r0, #1
 80073ae:	f001 f977 	bl	80086a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80073b2:	bf00      	nop
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 80073ba:	2020      	movs	r0, #32
 80073bc:	f001 f970 	bl	80086a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80073c0:	bf00      	nop
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80073c8:	4802      	ldr	r0, [pc, #8]	@ (80073d4 <TIM3_IRQHandler+0x10>)
 80073ca:	f001 fe41 	bl	8009050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80073ce:	bf00      	nop
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	2000169c 	.word	0x2000169c

080073d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80073dc:	4804      	ldr	r0, [pc, #16]	@ (80073f0 <USART1_IRQHandler+0x18>)
 80073de:	f002 faad 	bl	800993c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)rxBuffer,1);
 80073e2:	2201      	movs	r2, #1
 80073e4:	4903      	ldr	r1, [pc, #12]	@ (80073f4 <USART1_IRQHandler+0x1c>)
 80073e6:	4802      	ldr	r0, [pc, #8]	@ (80073f0 <USART1_IRQHandler+0x18>)
 80073e8:	f002 fa83 	bl	80098f2 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 80073ec:	bf00      	nop
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	200016e4 	.word	0x200016e4
 80073f4:	20000098 	.word	0x20000098

080073f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80073fc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007400:	f001 f94e 	bl	80086a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007404:	bf00      	nop
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af02      	add	r7, sp, #8
 800740e:	6078      	str	r0, [r7, #4]
	static unsigned short data;
	static unsigned int uLength = 0;
	if(huart->Instance==USART1){
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a5f      	ldr	r2, [pc, #380]	@ (8007594 <HAL_UART_RxCpltCallback+0x18c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	f040 80b7 	bne.w	800758a <HAL_UART_RxCpltCallback+0x182>
		static uint32_t start_time = 0;
		switch(state){
 800741c:	4b5e      	ldr	r3, [pc, #376]	@ (8007598 <HAL_UART_RxCpltCallback+0x190>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b03      	cmp	r3, #3
 8007422:	f200 8082 	bhi.w	800752a <HAL_UART_RxCpltCallback+0x122>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <HAL_UART_RxCpltCallback+0x24>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	0800743d 	.word	0x0800743d
 8007430:	08007457 	.word	0x08007457
 8007434:	0800749b 	.word	0x0800749b
 8007438:	080074ad 	.word	0x080074ad
		case 0 :
			data = rxBuffer[0];
 800743c:	4b57      	ldr	r3, [pc, #348]	@ (800759c <HAL_UART_RxCpltCallback+0x194>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	461a      	mov	r2, r3
 8007442:	4b57      	ldr	r3, [pc, #348]	@ (80075a0 <HAL_UART_RxCpltCallback+0x198>)
 8007444:	801a      	strh	r2, [r3, #0]
			if(data == 0x34){
 8007446:	4b56      	ldr	r3, [pc, #344]	@ (80075a0 <HAL_UART_RxCpltCallback+0x198>)
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	2b34      	cmp	r3, #52	@ 0x34
 800744c:	d16c      	bne.n	8007528 <HAL_UART_RxCpltCallback+0x120>
				state = 1;
 800744e:	4b52      	ldr	r3, [pc, #328]	@ (8007598 <HAL_UART_RxCpltCallback+0x190>)
 8007450:	2201      	movs	r2, #1
 8007452:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007454:	e068      	b.n	8007528 <HAL_UART_RxCpltCallback+0x120>
		case 1:
			data |= (rxBuffer[0] << 8);
 8007456:	4b51      	ldr	r3, [pc, #324]	@ (800759c <HAL_UART_RxCpltCallback+0x194>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	b21a      	sxth	r2, r3
 800745e:	4b50      	ldr	r3, [pc, #320]	@ (80075a0 <HAL_UART_RxCpltCallback+0x198>)
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b21b      	sxth	r3, r3
 8007464:	4313      	orrs	r3, r2
 8007466:	b21b      	sxth	r3, r3
 8007468:	b29a      	uxth	r2, r3
 800746a:	4b4d      	ldr	r3, [pc, #308]	@ (80075a0 <HAL_UART_RxCpltCallback+0x198>)
 800746c:	801a      	strh	r2, [r3, #0]
			if (data == 0x1234){
 800746e:	4b4c      	ldr	r3, [pc, #304]	@ (80075a0 <HAL_UART_RxCpltCallback+0x198>)
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	f241 2234 	movw	r2, #4660	@ 0x1234
 8007476:	4293      	cmp	r3, r2
 8007478:	d10b      	bne.n	8007492 <HAL_UART_RxCpltCallback+0x8a>
				state = 2;
 800747a:	4b47      	ldr	r3, [pc, #284]	@ (8007598 <HAL_UART_RxCpltCallback+0x190>)
 800747c:	2202      	movs	r2, #2
 800747e:	701a      	strb	r2, [r3, #0]
				uLength = 0;
 8007480:	4b48      	ldr	r3, [pc, #288]	@ (80075a4 <HAL_UART_RxCpltCallback+0x19c>)
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
			else {
				state = 0;
				break;
			}
//			HAL_UART_Transmit(&huart1,get_signal,1,0xffff);
			start_time = HAL_GetTick();
 8007486:	f000 fcb1 	bl	8007dec <HAL_GetTick>
 800748a:	4603      	mov	r3, r0
 800748c:	4a46      	ldr	r2, [pc, #280]	@ (80075a8 <HAL_UART_RxCpltCallback+0x1a0>)
 800748e:	6013      	str	r3, [r2, #0]
			break;
 8007490:	e04b      	b.n	800752a <HAL_UART_RxCpltCallback+0x122>
				state = 0;
 8007492:	4b41      	ldr	r3, [pc, #260]	@ (8007598 <HAL_UART_RxCpltCallback+0x190>)
 8007494:	2200      	movs	r2, #0
 8007496:	701a      	strb	r2, [r3, #0]
				break;
 8007498:	e047      	b.n	800752a <HAL_UART_RxCpltCallback+0x122>
		case 2:
			data = rxBuffer[0];
 800749a:	4b40      	ldr	r3, [pc, #256]	@ (800759c <HAL_UART_RxCpltCallback+0x194>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	4b3f      	ldr	r3, [pc, #252]	@ (80075a0 <HAL_UART_RxCpltCallback+0x198>)
 80074a2:	801a      	strh	r2, [r3, #0]
			state = 3;
 80074a4:	4b3c      	ldr	r3, [pc, #240]	@ (8007598 <HAL_UART_RxCpltCallback+0x190>)
 80074a6:	2203      	movs	r2, #3
 80074a8:	701a      	strb	r2, [r3, #0]
			break;
 80074aa:	e03e      	b.n	800752a <HAL_UART_RxCpltCallback+0x122>
		case 3:
			data |= (rxBuffer[0] << 8);
 80074ac:	4b3b      	ldr	r3, [pc, #236]	@ (800759c <HAL_UART_RxCpltCallback+0x194>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	021b      	lsls	r3, r3, #8
 80074b2:	b21a      	sxth	r2, r3
 80074b4:	4b3a      	ldr	r3, [pc, #232]	@ (80075a0 <HAL_UART_RxCpltCallback+0x198>)
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	b21b      	sxth	r3, r3
 80074ba:	4313      	orrs	r3, r2
 80074bc:	b21b      	sxth	r3, r3
 80074be:	b29a      	uxth	r2, r3
 80074c0:	4b37      	ldr	r3, [pc, #220]	@ (80075a0 <HAL_UART_RxCpltCallback+0x198>)
 80074c2:	801a      	strh	r2, [r3, #0]
			pic[uLength] = data;
 80074c4:	4b37      	ldr	r3, [pc, #220]	@ (80075a4 <HAL_UART_RxCpltCallback+0x19c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a35      	ldr	r2, [pc, #212]	@ (80075a0 <HAL_UART_RxCpltCallback+0x198>)
 80074ca:	8811      	ldrh	r1, [r2, #0]
 80074cc:	4a37      	ldr	r2, [pc, #220]	@ (80075ac <HAL_UART_RxCpltCallback+0x1a4>)
 80074ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			uLength ++;
 80074d2:	4b34      	ldr	r3, [pc, #208]	@ (80075a4 <HAL_UART_RxCpltCallback+0x19c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3301      	adds	r3, #1
 80074d8:	4a32      	ldr	r2, [pc, #200]	@ (80075a4 <HAL_UART_RxCpltCallback+0x19c>)
 80074da:	6013      	str	r3, [r2, #0]
//			HAL_UART_Transmit(&huart1,get_signal,1,0xffff);
			if (uLength == 2700){
 80074dc:	4b31      	ldr	r3, [pc, #196]	@ (80075a4 <HAL_UART_RxCpltCallback+0x19c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f640 228c 	movw	r2, #2700	@ 0xa8c
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d10e      	bne.n	8007506 <HAL_UART_RxCpltCallback+0xfe>
//				HAL_UART_Transmit(&huart1,get_signal,1,0xffff);
				lcd_showpic(0,0,60,45,pic,size_flag);
 80074e8:	4b31      	ldr	r3, [pc, #196]	@ (80075b0 <HAL_UART_RxCpltCallback+0x1a8>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	4b2f      	ldr	r3, [pc, #188]	@ (80075ac <HAL_UART_RxCpltCallback+0x1a4>)
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	232d      	movs	r3, #45	@ 0x2d
 80074f4:	223c      	movs	r2, #60	@ 0x3c
 80074f6:	2100      	movs	r1, #0
 80074f8:	2000      	movs	r0, #0
 80074fa:	f7ff fde9 	bl	80070d0 <lcd_showpic>
				state = 0;
 80074fe:	4b26      	ldr	r3, [pc, #152]	@ (8007598 <HAL_UART_RxCpltCallback+0x190>)
 8007500:	2200      	movs	r2, #0
 8007502:	701a      	strb	r2, [r3, #0]
				break;
 8007504:	e011      	b.n	800752a <HAL_UART_RxCpltCallback+0x122>
			}
			else if(HAL_GetTick() - start_time < 500){
 8007506:	f000 fc71 	bl	8007dec <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	4b26      	ldr	r3, [pc, #152]	@ (80075a8 <HAL_UART_RxCpltCallback+0x1a0>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007516:	d203      	bcs.n	8007520 <HAL_UART_RxCpltCallback+0x118>
				state = 2;
 8007518:	4b1f      	ldr	r3, [pc, #124]	@ (8007598 <HAL_UART_RxCpltCallback+0x190>)
 800751a:	2202      	movs	r2, #2
 800751c:	701a      	strb	r2, [r3, #0]
			}
			else {state = 0;}
			break;
 800751e:	e004      	b.n	800752a <HAL_UART_RxCpltCallback+0x122>
			else {state = 0;}
 8007520:	4b1d      	ldr	r3, [pc, #116]	@ (8007598 <HAL_UART_RxCpltCallback+0x190>)
 8007522:	2200      	movs	r2, #0
 8007524:	701a      	strb	r2, [r3, #0]
			break;
 8007526:	e000      	b.n	800752a <HAL_UART_RxCpltCallback+0x122>
			break;
 8007528:	bf00      	nop
//			uLength = 0;
//			lcd_clear(WHITE);g_back_color = WHITE;
//			lcd_showpic(0,0,COLUMN,ROW,pic);
//			HAL_UART_Transmit(&huart1,cont_signal,1,0xffff);
//		}
		if (stop_flag == 0 && speed_state == 0){ //慢�?�播�?
 800752a:	4b22      	ldr	r3, [pc, #136]	@ (80075b4 <HAL_UART_RxCpltCallback+0x1ac>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10b      	bne.n	800754a <HAL_UART_RxCpltCallback+0x142>
 8007532:	4b21      	ldr	r3, [pc, #132]	@ (80075b8 <HAL_UART_RxCpltCallback+0x1b0>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d107      	bne.n	800754a <HAL_UART_RxCpltCallback+0x142>
				HAL_UART_Transmit(&huart1,slow_signal,1,0xffff);
 800753a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800753e:	2201      	movs	r2, #1
 8007540:	491e      	ldr	r1, [pc, #120]	@ (80075bc <HAL_UART_RxCpltCallback+0x1b4>)
 8007542:	481f      	ldr	r0, [pc, #124]	@ (80075c0 <HAL_UART_RxCpltCallback+0x1b8>)
 8007544:	f002 f94a 	bl	80097dc <HAL_UART_Transmit>
 8007548:	e01f      	b.n	800758a <HAL_UART_RxCpltCallback+0x182>
		}
		else if(stop_flag == 0 && speed_state == 1){//正常速度
 800754a:	4b1a      	ldr	r3, [pc, #104]	@ (80075b4 <HAL_UART_RxCpltCallback+0x1ac>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10b      	bne.n	800756a <HAL_UART_RxCpltCallback+0x162>
 8007552:	4b19      	ldr	r3, [pc, #100]	@ (80075b8 <HAL_UART_RxCpltCallback+0x1b0>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d107      	bne.n	800756a <HAL_UART_RxCpltCallback+0x162>
			HAL_UART_Transmit(&huart1,cont_signal,1,0xffff);
 800755a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800755e:	2201      	movs	r2, #1
 8007560:	4918      	ldr	r1, [pc, #96]	@ (80075c4 <HAL_UART_RxCpltCallback+0x1bc>)
 8007562:	4817      	ldr	r0, [pc, #92]	@ (80075c0 <HAL_UART_RxCpltCallback+0x1b8>)
 8007564:	f002 f93a 	bl	80097dc <HAL_UART_Transmit>
 8007568:	e00f      	b.n	800758a <HAL_UART_RxCpltCallback+0x182>
		}
		else if(stop_flag == 0 && speed_state == 2){ //快进
 800756a:	4b12      	ldr	r3, [pc, #72]	@ (80075b4 <HAL_UART_RxCpltCallback+0x1ac>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10b      	bne.n	800758a <HAL_UART_RxCpltCallback+0x182>
 8007572:	4b11      	ldr	r3, [pc, #68]	@ (80075b8 <HAL_UART_RxCpltCallback+0x1b0>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b02      	cmp	r3, #2
 8007578:	d107      	bne.n	800758a <HAL_UART_RxCpltCallback+0x182>
			HAL_UART_Transmit(&huart1,fast_signal,1,0xffff);
 800757a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800757e:	2201      	movs	r2, #1
 8007580:	4911      	ldr	r1, [pc, #68]	@ (80075c8 <HAL_UART_RxCpltCallback+0x1c0>)
 8007582:	480f      	ldr	r0, [pc, #60]	@ (80075c0 <HAL_UART_RxCpltCallback+0x1b8>)
 8007584:	f002 f92a 	bl	80097dc <HAL_UART_Transmit>
		}

	}
//	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC); // HAL 库提供的清除方法
}
 8007588:	e7ff      	b.n	800758a <HAL_UART_RxCpltCallback+0x182>
 800758a:	bf00      	nop
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40013800 	.word	0x40013800
 8007598:	20001644 	.word	0x20001644
 800759c:	20000098 	.word	0x20000098
 80075a0:	20001646 	.word	0x20001646
 80075a4:	20001648 	.word	0x20001648
 80075a8:	2000164c 	.word	0x2000164c
 80075ac:	200000ac 	.word	0x200000ac
 80075b0:	2000000e 	.word	0x2000000e
 80075b4:	2000000f 	.word	0x2000000f
 80075b8:	2000000d 	.word	0x2000000d
 80075bc:	20000008 	.word	0x20000008
 80075c0:	200016e4 	.word	0x200016e4
 80075c4:	20000004 	.word	0x20000004
 80075c8:	2000000c 	.word	0x2000000c

080075cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af04      	add	r7, sp, #16
 80075d2:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a1d      	ldr	r2, [pc, #116]	@ (800764c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d12d      	bne.n	8007638 <HAL_TIM_PeriodElapsedCallback+0x6c>
		if (stop_flag == 0){
 80075dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007650 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d104      	bne.n	80075ee <HAL_TIM_PeriodElapsedCallback+0x22>
		cnt++;
 80075e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007654 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3301      	adds	r3, #1
 80075ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007654 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80075ec:	6013      	str	r3, [r2, #0]
		}
		sprintf(msg,"Time Elapsed is %d\r", cnt);
 80075ee:	4b19      	ldr	r3, [pc, #100]	@ (8007654 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	4918      	ldr	r1, [pc, #96]	@ (8007658 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80075f6:	4819      	ldr	r0, [pc, #100]	@ (800765c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80075f8:	f002 ff0c 	bl	800a414 <siprintf>
		lcd_show_string(lcddev.width/10,lcddev.height * 9/10,200,16,16,msg, BLACK);
 80075fc:	4b18      	ldr	r3, [pc, #96]	@ (8007660 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	4a18      	ldr	r2, [pc, #96]	@ (8007664 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	08db      	lsrs	r3, r3, #3
 8007608:	b298      	uxth	r0, r3
 800760a:	4b15      	ldr	r3, [pc, #84]	@ (8007660 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800760c:	885b      	ldrh	r3, [r3, #2]
 800760e:	461a      	mov	r2, r3
 8007610:	4613      	mov	r3, r2
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	4413      	add	r3, r2
 8007616:	4a14      	ldr	r2, [pc, #80]	@ (8007668 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8007618:	fb82 1203 	smull	r1, r2, r2, r3
 800761c:	1092      	asrs	r2, r2, #2
 800761e:	17db      	asrs	r3, r3, #31
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	b299      	uxth	r1, r3
 8007624:	2300      	movs	r3, #0
 8007626:	9302      	str	r3, [sp, #8]
 8007628:	4b0c      	ldr	r3, [pc, #48]	@ (800765c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	2310      	movs	r3, #16
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	2310      	movs	r3, #16
 8007632:	22c8      	movs	r2, #200	@ 0xc8
 8007634:	f7ff fcfc 	bl	8007030 <lcd_show_string>
//		HAL_UART_Transmit(&huart1,cont_signal,1,0xffff); //结束中断，继续UART传输
	}
	__HAL_TIM_CLEAR_IT(htim,TIM_IT_UPDATE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f06f 0201 	mvn.w	r2, #1
 8007640:	611a      	str	r2, [r3, #16]

}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	2000169c 	.word	0x2000169c
 8007650:	2000000f 	.word	0x2000000f
 8007654:	20001640 	.word	0x20001640
 8007658:	0800ada4 	.word	0x0800ada4
 800765c:	200015d8 	.word	0x200015d8
 8007660:	20000088 	.word	0x20000088
 8007664:	cccccccd 	.word	0xcccccccd
 8007668:	66666667 	.word	0x66666667

0800766c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800766c:	b580      	push	{r7, lr}
 800766e:	f5ad 5daa 	sub.w	sp, sp, #5440	@ 0x1540
 8007672:	b082      	sub	sp, #8
 8007674:	af04      	add	r7, sp, #16
 8007676:	4602      	mov	r2, r0
 8007678:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 800767c:	f2a3 5332 	subw	r3, r3, #1330	@ 0x532
 8007680:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == KEY_WK_Pin){
 8007682:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 8007686:	f2a3 5332 	subw	r3, r3, #1330	@ 0x532
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d12e      	bne.n	80076ee <HAL_GPIO_EXTI_Callback+0x82>
		HAL_Delay(10);
 8007690:	200a      	movs	r0, #10
 8007692:	f000 fbb5 	bl	8007e00 <HAL_Delay>
		if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == 1){
 8007696:	2101      	movs	r1, #1
 8007698:	48b4      	ldr	r0, [pc, #720]	@ (800796c <HAL_GPIO_EXTI_Callback+0x300>)
 800769a:	f000 ffb9 	bl	8008610 <HAL_GPIO_ReadPin>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	f040 8152 	bne.w	800794a <HAL_GPIO_EXTI_Callback+0x2de>
			lcd_clear(WHITE); g_back_color = WHITE;
 80076a6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80076aa:	f7ff fa4b 	bl	8006b44 <lcd_clear>
 80076ae:	4bb0      	ldr	r3, [pc, #704]	@ (8007970 <HAL_GPIO_EXTI_Callback+0x304>)
 80076b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076b4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80076b6:	2104      	movs	r1, #4
 80076b8:	48ae      	ldr	r0, [pc, #696]	@ (8007974 <HAL_GPIO_EXTI_Callback+0x308>)
 80076ba:	f000 ffd8 	bl	800866e <HAL_GPIO_TogglePin>
			switch(size_flag){
 80076be:	4bae      	ldr	r3, [pc, #696]	@ (8007978 <HAL_GPIO_EXTI_Callback+0x30c>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d00f      	beq.n	80076e6 <HAL_GPIO_EXTI_Callback+0x7a>
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	f300 813f 	bgt.w	800794a <HAL_GPIO_EXTI_Callback+0x2de>
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d002      	beq.n	80076d6 <HAL_GPIO_EXTI_Callback+0x6a>
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d004      	beq.n	80076de <HAL_GPIO_EXTI_Callback+0x72>
 80076d4:	e139      	b.n	800794a <HAL_GPIO_EXTI_Callback+0x2de>
			case 1:
				size_flag = 2;
 80076d6:	4ba8      	ldr	r3, [pc, #672]	@ (8007978 <HAL_GPIO_EXTI_Callback+0x30c>)
 80076d8:	2202      	movs	r2, #2
 80076da:	701a      	strb	r2, [r3, #0]
				break;
 80076dc:	e135      	b.n	800794a <HAL_GPIO_EXTI_Callback+0x2de>
			case 2:
				size_flag = 3;
 80076de:	4ba6      	ldr	r3, [pc, #664]	@ (8007978 <HAL_GPIO_EXTI_Callback+0x30c>)
 80076e0:	2203      	movs	r2, #3
 80076e2:	701a      	strb	r2, [r3, #0]
				break;
 80076e4:	e131      	b.n	800794a <HAL_GPIO_EXTI_Callback+0x2de>
			case 3:
				size_flag = 1;
 80076e6:	4ba4      	ldr	r3, [pc, #656]	@ (8007978 <HAL_GPIO_EXTI_Callback+0x30c>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	701a      	strb	r2, [r3, #0]
				break;
 80076ec:	e12d      	b.n	800794a <HAL_GPIO_EXTI_Callback+0x2de>
			}
		}
	}
	else if(GPIO_Pin == KEY1_Pin){
 80076ee:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 80076f2:	f2a3 5332 	subw	r3, r3, #1330	@ 0x532
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076fc:	d13e      	bne.n	800777c <HAL_GPIO_EXTI_Callback+0x110>
		HAL_Delay(10);
 80076fe:	200a      	movs	r0, #10
 8007700:	f000 fb7e 	bl	8007e00 <HAL_Delay>
		if(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin) == 0 && size_flag != 3){
 8007704:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007708:	4898      	ldr	r0, [pc, #608]	@ (800796c <HAL_GPIO_EXTI_Callback+0x300>)
 800770a:	f000 ff81 	bl	8008610 <HAL_GPIO_ReadPin>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d122      	bne.n	800775a <HAL_GPIO_EXTI_Callback+0xee>
 8007714:	4b98      	ldr	r3, [pc, #608]	@ (8007978 <HAL_GPIO_EXTI_Callback+0x30c>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d01e      	beq.n	800775a <HAL_GPIO_EXTI_Callback+0xee>
			lcd_clear(WHITE); g_back_color = WHITE;
 800771c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007720:	f7ff fa10 	bl	8006b44 <lcd_clear>
 8007724:	4b92      	ldr	r3, [pc, #584]	@ (8007970 <HAL_GPIO_EXTI_Callback+0x304>)
 8007726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800772a:	601a      	str	r2, [r3, #0]
			stop_flag = !stop_flag;
 800772c:	4b93      	ldr	r3, [pc, #588]	@ (800797c <HAL_GPIO_EXTI_Callback+0x310>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	bf0c      	ite	eq
 8007734:	2301      	moveq	r3, #1
 8007736:	2300      	movne	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	461a      	mov	r2, r3
 800773c:	4b8f      	ldr	r3, [pc, #572]	@ (800797c <HAL_GPIO_EXTI_Callback+0x310>)
 800773e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8007740:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007744:	4889      	ldr	r0, [pc, #548]	@ (800796c <HAL_GPIO_EXTI_Callback+0x300>)
 8007746:	f000 ff92 	bl	800866e <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart1,start_signal,1,0xffff);
 800774a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800774e:	2201      	movs	r2, #1
 8007750:	498b      	ldr	r1, [pc, #556]	@ (8007980 <HAL_GPIO_EXTI_Callback+0x314>)
 8007752:	488c      	ldr	r0, [pc, #560]	@ (8007984 <HAL_GPIO_EXTI_Callback+0x318>)
 8007754:	f002 f842 	bl	80097dc <HAL_UART_Transmit>
 8007758:	e0f7      	b.n	800794a <HAL_GPIO_EXTI_Callback+0x2de>
		}
		else if(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin) == 0 && size_flag == 3){
 800775a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800775e:	4883      	ldr	r0, [pc, #524]	@ (800796c <HAL_GPIO_EXTI_Callback+0x300>)
 8007760:	f000 ff56 	bl	8008610 <HAL_GPIO_ReadPin>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	f040 80ef 	bne.w	800794a <HAL_GPIO_EXTI_Callback+0x2de>
 800776c:	4b82      	ldr	r3, [pc, #520]	@ (8007978 <HAL_GPIO_EXTI_Callback+0x30c>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b03      	cmp	r3, #3
 8007772:	f040 80ea 	bne.w	800794a <HAL_GPIO_EXTI_Callback+0x2de>
			lcd_display_off();
 8007776:	f7f9 f9bb 	bl	8000af0 <lcd_display_off>
 800777a:	e0e6      	b.n	800794a <HAL_GPIO_EXTI_Callback+0x2de>
		}
	}
	else if(GPIO_Pin == KEY0_Pin){
 800777c:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 8007780:	f2a3 5332 	subw	r3, r3, #1330	@ 0x532
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	2b20      	cmp	r3, #32
 8007788:	f040 80df 	bne.w	800794a <HAL_GPIO_EXTI_Callback+0x2de>
		HAL_Delay(10);
 800778c:	200a      	movs	r0, #10
 800778e:	f000 fb37 	bl	8007e00 <HAL_Delay>
		if (HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin) == 0 && size_flag != 3){
 8007792:	2120      	movs	r1, #32
 8007794:	487c      	ldr	r0, [pc, #496]	@ (8007988 <HAL_GPIO_EXTI_Callback+0x31c>)
 8007796:	f000 ff3b 	bl	8008610 <HAL_GPIO_ReadPin>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d138      	bne.n	8007812 <HAL_GPIO_EXTI_Callback+0x1a6>
 80077a0:	4b75      	ldr	r3, [pc, #468]	@ (8007978 <HAL_GPIO_EXTI_Callback+0x30c>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d034      	beq.n	8007812 <HAL_GPIO_EXTI_Callback+0x1a6>
			lcd_clear(WHITE); g_back_color = WHITE;
 80077a8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80077ac:	f7ff f9ca 	bl	8006b44 <lcd_clear>
 80077b0:	4b6f      	ldr	r3, [pc, #444]	@ (8007970 <HAL_GPIO_EXTI_Callback+0x304>)
 80077b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077b6:	601a      	str	r2, [r3, #0]
			unsigned short pic_cp[2710];
			memcpy(pic_cp,pic,sizeof(pic));
 80077b8:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 80077bc:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 80077c0:	4a72      	ldr	r2, [pc, #456]	@ (800798c <HAL_GPIO_EXTI_Callback+0x320>)
 80077c2:	4618      	mov	r0, r3
 80077c4:	4611      	mov	r1, r2
 80077c6:	f241 532c 	movw	r3, #5420	@ 0x152c
 80077ca:	461a      	mov	r2, r3
 80077cc:	f002 fe76 	bl	800a4bc <memcpy>
			lcd_showpic(0,lcddev.height*3/5 - 50,60,45,pic_cp,size_flag);
 80077d0:	4b6f      	ldr	r3, [pc, #444]	@ (8007990 <HAL_GPIO_EXTI_Callback+0x324>)
 80077d2:	885b      	ldrh	r3, [r3, #2]
 80077d4:	461a      	mov	r2, r3
 80077d6:	4613      	mov	r3, r2
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	4413      	add	r3, r2
 80077dc:	4a6d      	ldr	r2, [pc, #436]	@ (8007994 <HAL_GPIO_EXTI_Callback+0x328>)
 80077de:	fb82 1203 	smull	r1, r2, r2, r3
 80077e2:	1052      	asrs	r2, r2, #1
 80077e4:	17db      	asrs	r3, r3, #31
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	3b32      	subs	r3, #50	@ 0x32
 80077ec:	b299      	uxth	r1, r3
 80077ee:	4b62      	ldr	r3, [pc, #392]	@ (8007978 <HAL_GPIO_EXTI_Callback+0x30c>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	9301      	str	r3, [sp, #4]
 80077f4:	f107 0318 	add.w	r3, r7, #24
 80077f8:	3b0c      	subs	r3, #12
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	232d      	movs	r3, #45	@ 0x2d
 80077fe:	223c      	movs	r2, #60	@ 0x3c
 8007800:	2000      	movs	r0, #0
 8007802:	f7ff fc65 	bl	80070d0 <lcd_showpic>
			HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8007806:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800780a:	4858      	ldr	r0, [pc, #352]	@ (800796c <HAL_GPIO_EXTI_Callback+0x300>)
 800780c:	f000 ff2f 	bl	800866e <HAL_GPIO_TogglePin>
		if (HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin) == 0 && size_flag != 3){
 8007810:	e09b      	b.n	800794a <HAL_GPIO_EXTI_Callback+0x2de>
		}
		else if(HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin) == 0 && size_flag == 3){
 8007812:	2120      	movs	r1, #32
 8007814:	485c      	ldr	r0, [pc, #368]	@ (8007988 <HAL_GPIO_EXTI_Callback+0x31c>)
 8007816:	f000 fefb 	bl	8008610 <HAL_GPIO_ReadPin>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	f040 8094 	bne.w	800794a <HAL_GPIO_EXTI_Callback+0x2de>
 8007822:	4b55      	ldr	r3, [pc, #340]	@ (8007978 <HAL_GPIO_EXTI_Callback+0x30c>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b03      	cmp	r3, #3
 8007828:	f040 808f 	bne.w	800794a <HAL_GPIO_EXTI_Callback+0x2de>
			HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 800782c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007830:	484e      	ldr	r0, [pc, #312]	@ (800796c <HAL_GPIO_EXTI_Callback+0x300>)
 8007832:	f000 ff1c 	bl	800866e <HAL_GPIO_TogglePin>
			switch(speed_state){
 8007836:	4b58      	ldr	r3, [pc, #352]	@ (8007998 <HAL_GPIO_EXTI_Callback+0x32c>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b02      	cmp	r3, #2
 800783c:	d05b      	beq.n	80078f6 <HAL_GPIO_EXTI_Callback+0x28a>
 800783e:	2b02      	cmp	r3, #2
 8007840:	f300 8083 	bgt.w	800794a <HAL_GPIO_EXTI_Callback+0x2de>
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <HAL_GPIO_EXTI_Callback+0x1e2>
 8007848:	2b01      	cmp	r3, #1
 800784a:	d02a      	beq.n	80078a2 <HAL_GPIO_EXTI_Callback+0x236>
 800784c:	e07d      	b.n	800794a <HAL_GPIO_EXTI_Callback+0x2de>
			case 0:
				lcd_clear(WHITE); g_back_color = WHITE;
 800784e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007852:	f7ff f977 	bl	8006b44 <lcd_clear>
 8007856:	4b46      	ldr	r3, [pc, #280]	@ (8007970 <HAL_GPIO_EXTI_Callback+0x304>)
 8007858:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800785c:	601a      	str	r2, [r3, #0]
				speed_state = 1;
 800785e:	4b4e      	ldr	r3, [pc, #312]	@ (8007998 <HAL_GPIO_EXTI_Callback+0x32c>)
 8007860:	2201      	movs	r2, #1
 8007862:	701a      	strb	r2, [r3, #0]
				lcd_show_string(lcddev.width/10,lcddev.height * 7/10,200,24,24,"Normal Speed!", BLACK);
 8007864:	4b4a      	ldr	r3, [pc, #296]	@ (8007990 <HAL_GPIO_EXTI_Callback+0x324>)
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	4a4c      	ldr	r2, [pc, #304]	@ (800799c <HAL_GPIO_EXTI_Callback+0x330>)
 800786a:	fba2 2303 	umull	r2, r3, r2, r3
 800786e:	08db      	lsrs	r3, r3, #3
 8007870:	b298      	uxth	r0, r3
 8007872:	4b47      	ldr	r3, [pc, #284]	@ (8007990 <HAL_GPIO_EXTI_Callback+0x324>)
 8007874:	885b      	ldrh	r3, [r3, #2]
 8007876:	461a      	mov	r2, r3
 8007878:	4613      	mov	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	1a9b      	subs	r3, r3, r2
 800787e:	4a45      	ldr	r2, [pc, #276]	@ (8007994 <HAL_GPIO_EXTI_Callback+0x328>)
 8007880:	fb82 1203 	smull	r1, r2, r2, r3
 8007884:	1092      	asrs	r2, r2, #2
 8007886:	17db      	asrs	r3, r3, #31
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	b299      	uxth	r1, r3
 800788c:	2300      	movs	r3, #0
 800788e:	9302      	str	r3, [sp, #8]
 8007890:	4b43      	ldr	r3, [pc, #268]	@ (80079a0 <HAL_GPIO_EXTI_Callback+0x334>)
 8007892:	9301      	str	r3, [sp, #4]
 8007894:	2318      	movs	r3, #24
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	2318      	movs	r3, #24
 800789a:	22c8      	movs	r2, #200	@ 0xc8
 800789c:	f7ff fbc8 	bl	8007030 <lcd_show_string>
				break;
 80078a0:	e053      	b.n	800794a <HAL_GPIO_EXTI_Callback+0x2de>
			case 1:
				lcd_clear(WHITE); g_back_color = WHITE;
 80078a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80078a6:	f7ff f94d 	bl	8006b44 <lcd_clear>
 80078aa:	4b31      	ldr	r3, [pc, #196]	@ (8007970 <HAL_GPIO_EXTI_Callback+0x304>)
 80078ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80078b0:	601a      	str	r2, [r3, #0]
				speed_state = 2;
 80078b2:	4b39      	ldr	r3, [pc, #228]	@ (8007998 <HAL_GPIO_EXTI_Callback+0x32c>)
 80078b4:	2202      	movs	r2, #2
 80078b6:	701a      	strb	r2, [r3, #0]
				lcd_show_string(lcddev.width/10,lcddev.height * 7/10,200,24,24,"2 x Faster!", BLACK);
 80078b8:	4b35      	ldr	r3, [pc, #212]	@ (8007990 <HAL_GPIO_EXTI_Callback+0x324>)
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	4a37      	ldr	r2, [pc, #220]	@ (800799c <HAL_GPIO_EXTI_Callback+0x330>)
 80078be:	fba2 2303 	umull	r2, r3, r2, r3
 80078c2:	08db      	lsrs	r3, r3, #3
 80078c4:	b298      	uxth	r0, r3
 80078c6:	4b32      	ldr	r3, [pc, #200]	@ (8007990 <HAL_GPIO_EXTI_Callback+0x324>)
 80078c8:	885b      	ldrh	r3, [r3, #2]
 80078ca:	461a      	mov	r2, r3
 80078cc:	4613      	mov	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	1a9b      	subs	r3, r3, r2
 80078d2:	4a30      	ldr	r2, [pc, #192]	@ (8007994 <HAL_GPIO_EXTI_Callback+0x328>)
 80078d4:	fb82 1203 	smull	r1, r2, r2, r3
 80078d8:	1092      	asrs	r2, r2, #2
 80078da:	17db      	asrs	r3, r3, #31
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	b299      	uxth	r1, r3
 80078e0:	2300      	movs	r3, #0
 80078e2:	9302      	str	r3, [sp, #8]
 80078e4:	4b2f      	ldr	r3, [pc, #188]	@ (80079a4 <HAL_GPIO_EXTI_Callback+0x338>)
 80078e6:	9301      	str	r3, [sp, #4]
 80078e8:	2318      	movs	r3, #24
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	2318      	movs	r3, #24
 80078ee:	22c8      	movs	r2, #200	@ 0xc8
 80078f0:	f7ff fb9e 	bl	8007030 <lcd_show_string>
				break;
 80078f4:	e029      	b.n	800794a <HAL_GPIO_EXTI_Callback+0x2de>
			case 2:
				lcd_clear(WHITE); g_back_color = WHITE;
 80078f6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80078fa:	f7ff f923 	bl	8006b44 <lcd_clear>
 80078fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007970 <HAL_GPIO_EXTI_Callback+0x304>)
 8007900:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007904:	601a      	str	r2, [r3, #0]
				speed_state = 0;
 8007906:	4b24      	ldr	r3, [pc, #144]	@ (8007998 <HAL_GPIO_EXTI_Callback+0x32c>)
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
				lcd_show_string(lcddev.width/10,lcddev.height * 7/10,200,24,24,"0.5 x Slower!", BLACK);
 800790c:	4b20      	ldr	r3, [pc, #128]	@ (8007990 <HAL_GPIO_EXTI_Callback+0x324>)
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	4a22      	ldr	r2, [pc, #136]	@ (800799c <HAL_GPIO_EXTI_Callback+0x330>)
 8007912:	fba2 2303 	umull	r2, r3, r2, r3
 8007916:	08db      	lsrs	r3, r3, #3
 8007918:	b298      	uxth	r0, r3
 800791a:	4b1d      	ldr	r3, [pc, #116]	@ (8007990 <HAL_GPIO_EXTI_Callback+0x324>)
 800791c:	885b      	ldrh	r3, [r3, #2]
 800791e:	461a      	mov	r2, r3
 8007920:	4613      	mov	r3, r2
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	1a9b      	subs	r3, r3, r2
 8007926:	4a1b      	ldr	r2, [pc, #108]	@ (8007994 <HAL_GPIO_EXTI_Callback+0x328>)
 8007928:	fb82 1203 	smull	r1, r2, r2, r3
 800792c:	1092      	asrs	r2, r2, #2
 800792e:	17db      	asrs	r3, r3, #31
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	b299      	uxth	r1, r3
 8007934:	2300      	movs	r3, #0
 8007936:	9302      	str	r3, [sp, #8]
 8007938:	4b1b      	ldr	r3, [pc, #108]	@ (80079a8 <HAL_GPIO_EXTI_Callback+0x33c>)
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	2318      	movs	r3, #24
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	2318      	movs	r3, #24
 8007942:	22c8      	movs	r2, #200	@ 0xc8
 8007944:	f7ff fb74 	bl	8007030 <lcd_show_string>
				break;
 8007948:	bf00      	nop
			}
		}
	}
	HAL_Delay(100);
 800794a:	2064      	movs	r0, #100	@ 0x64
 800794c:	f000 fa58 	bl	8007e00 <HAL_Delay>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007950:	4a16      	ldr	r2, [pc, #88]	@ (80079ac <HAL_GPIO_EXTI_Callback+0x340>)
 8007952:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 8007956:	f2a3 5332 	subw	r3, r3, #1330	@ 0x532
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	6153      	str	r3, [r2, #20]
}
 800795e:	bf00      	nop
 8007960:	f507 57a9 	add.w	r7, r7, #5408	@ 0x1520
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	40010800 	.word	0x40010800
 8007970:	20000000 	.word	0x20000000
 8007974:	40011400 	.word	0x40011400
 8007978:	2000000e 	.word	0x2000000e
 800797c:	2000000f 	.word	0x2000000f
 8007980:	2000163c 	.word	0x2000163c
 8007984:	200016e4 	.word	0x200016e4
 8007988:	40011000 	.word	0x40011000
 800798c:	200000ac 	.word	0x200000ac
 8007990:	20000088 	.word	0x20000088
 8007994:	66666667 	.word	0x66666667
 8007998:	2000000d 	.word	0x2000000d
 800799c:	cccccccd 	.word	0xcccccccd
 80079a0:	0800adb8 	.word	0x0800adb8
 80079a4:	0800adc8 	.word	0x0800adc8
 80079a8:	0800add4 	.word	0x0800add4
 80079ac:	40010400 	.word	0x40010400

080079b0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
    {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
      if (HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f002 fa65 	bl	8009e88 <HAL_UART_GetError>
 80079be:	4603      	mov	r3, r0
 80079c0:	f003 0308 	and.w	r3, r3, #8
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <HAL_UART_ErrorCallback+0x1e>
        __HAL_UART_FLUSH_DRREGISTER(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
    }
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80079e0:	4a14      	ldr	r2, [pc, #80]	@ (8007a34 <_sbrk+0x5c>)
 80079e2:	4b15      	ldr	r3, [pc, #84]	@ (8007a38 <_sbrk+0x60>)
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80079ec:	4b13      	ldr	r3, [pc, #76]	@ (8007a3c <_sbrk+0x64>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d102      	bne.n	80079fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80079f4:	4b11      	ldr	r3, [pc, #68]	@ (8007a3c <_sbrk+0x64>)
 80079f6:	4a12      	ldr	r2, [pc, #72]	@ (8007a40 <_sbrk+0x68>)
 80079f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80079fa:	4b10      	ldr	r3, [pc, #64]	@ (8007a3c <_sbrk+0x64>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d207      	bcs.n	8007a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a08:	f002 fd2c 	bl	800a464 <__errno>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	220c      	movs	r2, #12
 8007a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a12:	f04f 33ff 	mov.w	r3, #4294967295
 8007a16:	e009      	b.n	8007a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a18:	4b08      	ldr	r3, [pc, #32]	@ (8007a3c <_sbrk+0x64>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a1e:	4b07      	ldr	r3, [pc, #28]	@ (8007a3c <_sbrk+0x64>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4413      	add	r3, r2
 8007a26:	4a05      	ldr	r2, [pc, #20]	@ (8007a3c <_sbrk+0x64>)
 8007a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	2000c000 	.word	0x2000c000
 8007a38:	00000400 	.word	0x00000400
 8007a3c:	20001650 	.word	0x20001650
 8007a40:	20001878 	.word	0x20001878

08007a44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007a44:	b480      	push	{r7}
 8007a46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007a48:	bf00      	nop
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bc80      	pop	{r7}
 8007a4e:	4770      	bx	lr

08007a50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a56:	f107 0308 	add.w	r3, r7, #8
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	605a      	str	r2, [r3, #4]
 8007a60:	609a      	str	r2, [r3, #8]
 8007a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a64:	463b      	mov	r3, r7
 8007a66:	2200      	movs	r2, #0
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae4 <MX_TIM2_Init+0x94>)
 8007a6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007a72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8007a74:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae4 <MX_TIM2_Init+0x94>)
 8007a76:	2247      	movs	r2, #71	@ 0x47
 8007a78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae4 <MX_TIM2_Init+0x94>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8007a80:	4b18      	ldr	r3, [pc, #96]	@ (8007ae4 <MX_TIM2_Init+0x94>)
 8007a82:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007a86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a88:	4b16      	ldr	r3, [pc, #88]	@ (8007ae4 <MX_TIM2_Init+0x94>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a8e:	4b15      	ldr	r3, [pc, #84]	@ (8007ae4 <MX_TIM2_Init+0x94>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007a94:	4813      	ldr	r0, [pc, #76]	@ (8007ae4 <MX_TIM2_Init+0x94>)
 8007a96:	f001 fa2b 	bl	8008ef0 <HAL_TIM_Base_Init>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007aa0:	f7ff fc1b 	bl	80072da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007aa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007aaa:	f107 0308 	add.w	r3, r7, #8
 8007aae:	4619      	mov	r1, r3
 8007ab0:	480c      	ldr	r0, [pc, #48]	@ (8007ae4 <MX_TIM2_Init+0x94>)
 8007ab2:	f001 fbbd 	bl	8009230 <HAL_TIM_ConfigClockSource>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007abc:	f7ff fc0d 	bl	80072da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007ac8:	463b      	mov	r3, r7
 8007aca:	4619      	mov	r1, r3
 8007acc:	4805      	ldr	r0, [pc, #20]	@ (8007ae4 <MX_TIM2_Init+0x94>)
 8007ace:	f001 fdb7 	bl	8009640 <HAL_TIMEx_MasterConfigSynchronization>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007ad8:	f7ff fbff 	bl	80072da <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007adc:	bf00      	nop
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20001654 	.word	0x20001654

08007ae8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007aee:	f107 0308 	add.w	r3, r7, #8
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	605a      	str	r2, [r3, #4]
 8007af8:	609a      	str	r2, [r3, #8]
 8007afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007afc:	463b      	mov	r3, r7
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007b04:	4b1d      	ldr	r3, [pc, #116]	@ (8007b7c <MX_TIM3_Init+0x94>)
 8007b06:	4a1e      	ldr	r2, [pc, #120]	@ (8007b80 <MX_TIM3_Init+0x98>)
 8007b08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8007b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8007b7c <MX_TIM3_Init+0x94>)
 8007b0c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8007b10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b12:	4b1a      	ldr	r3, [pc, #104]	@ (8007b7c <MX_TIM3_Init+0x94>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8007b18:	4b18      	ldr	r3, [pc, #96]	@ (8007b7c <MX_TIM3_Init+0x94>)
 8007b1a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007b1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b20:	4b16      	ldr	r3, [pc, #88]	@ (8007b7c <MX_TIM3_Init+0x94>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b26:	4b15      	ldr	r3, [pc, #84]	@ (8007b7c <MX_TIM3_Init+0x94>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007b2c:	4813      	ldr	r0, [pc, #76]	@ (8007b7c <MX_TIM3_Init+0x94>)
 8007b2e:	f001 f9df 	bl	8008ef0 <HAL_TIM_Base_Init>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007b38:	f7ff fbcf 	bl	80072da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007b42:	f107 0308 	add.w	r3, r7, #8
 8007b46:	4619      	mov	r1, r3
 8007b48:	480c      	ldr	r0, [pc, #48]	@ (8007b7c <MX_TIM3_Init+0x94>)
 8007b4a:	f001 fb71 	bl	8009230 <HAL_TIM_ConfigClockSource>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007b54:	f7ff fbc1 	bl	80072da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007b60:	463b      	mov	r3, r7
 8007b62:	4619      	mov	r1, r3
 8007b64:	4805      	ldr	r0, [pc, #20]	@ (8007b7c <MX_TIM3_Init+0x94>)
 8007b66:	f001 fd6b 	bl	8009640 <HAL_TIMEx_MasterConfigSynchronization>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007b70:	f7ff fbb3 	bl	80072da <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007b74:	bf00      	nop
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	2000169c 	.word	0x2000169c
 8007b80:	40000400 	.word	0x40000400

08007b84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b94:	d10c      	bne.n	8007bb0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007b96:	4b15      	ldr	r3, [pc, #84]	@ (8007bec <HAL_TIM_Base_MspInit+0x68>)
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	4a14      	ldr	r2, [pc, #80]	@ (8007bec <HAL_TIM_Base_MspInit+0x68>)
 8007b9c:	f043 0301 	orr.w	r3, r3, #1
 8007ba0:	61d3      	str	r3, [r2, #28]
 8007ba2:	4b12      	ldr	r3, [pc, #72]	@ (8007bec <HAL_TIM_Base_MspInit+0x68>)
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007bae:	e018      	b.n	8007be2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8007bf0 <HAL_TIM_Base_MspInit+0x6c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d113      	bne.n	8007be2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007bba:	4b0c      	ldr	r3, [pc, #48]	@ (8007bec <HAL_TIM_Base_MspInit+0x68>)
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	4a0b      	ldr	r2, [pc, #44]	@ (8007bec <HAL_TIM_Base_MspInit+0x68>)
 8007bc0:	f043 0302 	orr.w	r3, r3, #2
 8007bc4:	61d3      	str	r3, [r2, #28]
 8007bc6:	4b09      	ldr	r3, [pc, #36]	@ (8007bec <HAL_TIM_Base_MspInit+0x68>)
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	60bb      	str	r3, [r7, #8]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 2);
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	2103      	movs	r1, #3
 8007bd6:	201d      	movs	r0, #29
 8007bd8:	f000 fa0d 	bl	8007ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007bdc:	201d      	movs	r0, #29
 8007bde:	f000 fa26 	bl	800802e <HAL_NVIC_EnableIRQ>
}
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	40021000 	.word	0x40021000
 8007bf0:	40000400 	.word	0x40000400

08007bf4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007bf8:	4b10      	ldr	r3, [pc, #64]	@ (8007c3c <MX_USART1_UART_Init+0x48>)
 8007bfa:	4a11      	ldr	r2, [pc, #68]	@ (8007c40 <MX_USART1_UART_Init+0x4c>)
 8007bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8007bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8007c3c <MX_USART1_UART_Init+0x48>)
 8007c00:	4a10      	ldr	r2, [pc, #64]	@ (8007c44 <MX_USART1_UART_Init+0x50>)
 8007c02:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007c04:	4b0d      	ldr	r3, [pc, #52]	@ (8007c3c <MX_USART1_UART_Init+0x48>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c3c <MX_USART1_UART_Init+0x48>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007c10:	4b0a      	ldr	r3, [pc, #40]	@ (8007c3c <MX_USART1_UART_Init+0x48>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007c16:	4b09      	ldr	r3, [pc, #36]	@ (8007c3c <MX_USART1_UART_Init+0x48>)
 8007c18:	220c      	movs	r2, #12
 8007c1a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c1c:	4b07      	ldr	r3, [pc, #28]	@ (8007c3c <MX_USART1_UART_Init+0x48>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c22:	4b06      	ldr	r3, [pc, #24]	@ (8007c3c <MX_USART1_UART_Init+0x48>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007c28:	4804      	ldr	r0, [pc, #16]	@ (8007c3c <MX_USART1_UART_Init+0x48>)
 8007c2a:	f001 fd87 	bl	800973c <HAL_UART_Init>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8007c34:	f7ff fb51 	bl	80072da <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007c38:	bf00      	nop
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200016e4 	.word	0x200016e4
 8007c40:	40013800 	.word	0x40013800
 8007c44:	001e8480 	.word	0x001e8480

08007c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b088      	sub	sp, #32
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c50:	f107 0310 	add.w	r3, r7, #16
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	605a      	str	r2, [r3, #4]
 8007c5a:	609a      	str	r2, [r3, #8]
 8007c5c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a20      	ldr	r2, [pc, #128]	@ (8007ce4 <HAL_UART_MspInit+0x9c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d139      	bne.n	8007cdc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007c68:	4b1f      	ldr	r3, [pc, #124]	@ (8007ce8 <HAL_UART_MspInit+0xa0>)
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ce8 <HAL_UART_MspInit+0xa0>)
 8007c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c72:	6193      	str	r3, [r2, #24]
 8007c74:	4b1c      	ldr	r3, [pc, #112]	@ (8007ce8 <HAL_UART_MspInit+0xa0>)
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c80:	4b19      	ldr	r3, [pc, #100]	@ (8007ce8 <HAL_UART_MspInit+0xa0>)
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	4a18      	ldr	r2, [pc, #96]	@ (8007ce8 <HAL_UART_MspInit+0xa0>)
 8007c86:	f043 0304 	orr.w	r3, r3, #4
 8007c8a:	6193      	str	r3, [r2, #24]
 8007c8c:	4b16      	ldr	r3, [pc, #88]	@ (8007ce8 <HAL_UART_MspInit+0xa0>)
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	60bb      	str	r3, [r7, #8]
 8007c96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007c98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ca6:	f107 0310 	add.w	r3, r7, #16
 8007caa:	4619      	mov	r1, r3
 8007cac:	480f      	ldr	r0, [pc, #60]	@ (8007cec <HAL_UART_MspInit+0xa4>)
 8007cae:	f000 fb1b 	bl	80082e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007cb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cc0:	f107 0310 	add.w	r3, r7, #16
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4809      	ldr	r0, [pc, #36]	@ (8007cec <HAL_UART_MspInit+0xa4>)
 8007cc8:	f000 fb0e 	bl	80082e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2101      	movs	r1, #1
 8007cd0:	2025      	movs	r0, #37	@ 0x25
 8007cd2:	f000 f990 	bl	8007ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007cd6:	2025      	movs	r0, #37	@ 0x25
 8007cd8:	f000 f9a9 	bl	800802e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007cdc:	bf00      	nop
 8007cde:	3720      	adds	r7, #32
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	40013800 	.word	0x40013800
 8007ce8:	40021000 	.word	0x40021000
 8007cec:	40010800 	.word	0x40010800

08007cf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007cf0:	f7ff fea8 	bl	8007a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007cf4:	480b      	ldr	r0, [pc, #44]	@ (8007d24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007cf6:	490c      	ldr	r1, [pc, #48]	@ (8007d28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8007d2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8007cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007cfc:	e002      	b.n	8007d04 <LoopCopyDataInit>

08007cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007d02:	3304      	adds	r3, #4

08007d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007d08:	d3f9      	bcc.n	8007cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007d0a:	4a09      	ldr	r2, [pc, #36]	@ (8007d30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007d0c:	4c09      	ldr	r4, [pc, #36]	@ (8007d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d10:	e001      	b.n	8007d16 <LoopFillZerobss>

08007d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d14:	3204      	adds	r2, #4

08007d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d18:	d3fb      	bcc.n	8007d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007d1a:	f002 fba9 	bl	800a470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007d1e:	f7ff fa3f 	bl	80071a0 <main>
  bx lr
 8007d22:	4770      	bx	lr
  ldr r0, =_sdata
 8007d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d28:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8007d2c:	0800ddcc 	.word	0x0800ddcc
  ldr r2, =_sbss
 8007d30:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8007d34:	20001878 	.word	0x20001878

08007d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007d38:	e7fe      	b.n	8007d38 <ADC1_2_IRQHandler>
	...

08007d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d40:	4b08      	ldr	r3, [pc, #32]	@ (8007d64 <HAL_Init+0x28>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a07      	ldr	r2, [pc, #28]	@ (8007d64 <HAL_Init+0x28>)
 8007d46:	f043 0310 	orr.w	r3, r3, #16
 8007d4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d4c:	2003      	movs	r0, #3
 8007d4e:	f000 f947 	bl	8007fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007d52:	2000      	movs	r0, #0
 8007d54:	f000 f808 	bl	8007d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007d58:	f7ff fac6 	bl	80072e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	40022000 	.word	0x40022000

08007d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007d70:	4b12      	ldr	r3, [pc, #72]	@ (8007dbc <HAL_InitTick+0x54>)
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	4b12      	ldr	r3, [pc, #72]	@ (8007dc0 <HAL_InitTick+0x58>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f95f 	bl	800804a <HAL_SYSTICK_Config>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e00e      	b.n	8007db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b0f      	cmp	r3, #15
 8007d9a:	d80a      	bhi.n	8007db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
 8007da4:	f000 f927 	bl	8007ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007da8:	4a06      	ldr	r2, [pc, #24]	@ (8007dc4 <HAL_InitTick+0x5c>)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	e000      	b.n	8007db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20000010 	.word	0x20000010
 8007dc0:	20000018 	.word	0x20000018
 8007dc4:	20000014 	.word	0x20000014

08007dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007dcc:	4b05      	ldr	r3, [pc, #20]	@ (8007de4 <HAL_IncTick+0x1c>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	4b05      	ldr	r3, [pc, #20]	@ (8007de8 <HAL_IncTick+0x20>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	4a03      	ldr	r2, [pc, #12]	@ (8007de8 <HAL_IncTick+0x20>)
 8007dda:	6013      	str	r3, [r2, #0]
}
 8007ddc:	bf00      	nop
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bc80      	pop	{r7}
 8007de2:	4770      	bx	lr
 8007de4:	20000018 	.word	0x20000018
 8007de8:	2000172c 	.word	0x2000172c

08007dec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
  return uwTick;
 8007df0:	4b02      	ldr	r3, [pc, #8]	@ (8007dfc <HAL_GetTick+0x10>)
 8007df2:	681b      	ldr	r3, [r3, #0]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr
 8007dfc:	2000172c 	.word	0x2000172c

08007e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e08:	f7ff fff0 	bl	8007dec <HAL_GetTick>
 8007e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e18:	d005      	beq.n	8007e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e44 <HAL_Delay+0x44>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4413      	add	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007e26:	bf00      	nop
 8007e28:	f7ff ffe0 	bl	8007dec <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d8f7      	bhi.n	8007e28 <HAL_Delay+0x28>
  {
  }
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20000018 	.word	0x20000018

08007e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e58:	4b0c      	ldr	r3, [pc, #48]	@ (8007e8c <__NVIC_SetPriorityGrouping+0x44>)
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007e64:	4013      	ands	r3, r2
 8007e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e7a:	4a04      	ldr	r2, [pc, #16]	@ (8007e8c <__NVIC_SetPriorityGrouping+0x44>)
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	60d3      	str	r3, [r2, #12]
}
 8007e80:	bf00      	nop
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bc80      	pop	{r7}
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e94:	4b04      	ldr	r3, [pc, #16]	@ (8007ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	0a1b      	lsrs	r3, r3, #8
 8007e9a:	f003 0307 	and.w	r3, r3, #7
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bc80      	pop	{r7}
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	e000ed00 	.word	0xe000ed00

08007eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	db0b      	blt.n	8007ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ebe:	79fb      	ldrb	r3, [r7, #7]
 8007ec0:	f003 021f 	and.w	r2, r3, #31
 8007ec4:	4906      	ldr	r1, [pc, #24]	@ (8007ee0 <__NVIC_EnableIRQ+0x34>)
 8007ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eca:	095b      	lsrs	r3, r3, #5
 8007ecc:	2001      	movs	r0, #1
 8007ece:	fa00 f202 	lsl.w	r2, r0, r2
 8007ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bc80      	pop	{r7}
 8007ede:	4770      	bx	lr
 8007ee0:	e000e100 	.word	0xe000e100

08007ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	4603      	mov	r3, r0
 8007eec:	6039      	str	r1, [r7, #0]
 8007eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	db0a      	blt.n	8007f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	490c      	ldr	r1, [pc, #48]	@ (8007f30 <__NVIC_SetPriority+0x4c>)
 8007efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f02:	0112      	lsls	r2, r2, #4
 8007f04:	b2d2      	uxtb	r2, r2
 8007f06:	440b      	add	r3, r1
 8007f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f0c:	e00a      	b.n	8007f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	4908      	ldr	r1, [pc, #32]	@ (8007f34 <__NVIC_SetPriority+0x50>)
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	3b04      	subs	r3, #4
 8007f1c:	0112      	lsls	r2, r2, #4
 8007f1e:	b2d2      	uxtb	r2, r2
 8007f20:	440b      	add	r3, r1
 8007f22:	761a      	strb	r2, [r3, #24]
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bc80      	pop	{r7}
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	e000e100 	.word	0xe000e100
 8007f34:	e000ed00 	.word	0xe000ed00

08007f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b089      	sub	sp, #36	@ 0x24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f1c3 0307 	rsb	r3, r3, #7
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	bf28      	it	cs
 8007f56:	2304      	movcs	r3, #4
 8007f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	2b06      	cmp	r3, #6
 8007f60:	d902      	bls.n	8007f68 <NVIC_EncodePriority+0x30>
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	3b03      	subs	r3, #3
 8007f66:	e000      	b.n	8007f6a <NVIC_EncodePriority+0x32>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	fa02 f303 	lsl.w	r3, r2, r3
 8007f76:	43da      	mvns	r2, r3
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	401a      	ands	r2, r3
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f80:	f04f 31ff 	mov.w	r1, #4294967295
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8a:	43d9      	mvns	r1, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f90:	4313      	orrs	r3, r2
         );
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3724      	adds	r7, #36	@ 0x24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bc80      	pop	{r7}
 8007f9a:	4770      	bx	lr

08007f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fac:	d301      	bcc.n	8007fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e00f      	b.n	8007fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8007fdc <SysTick_Config+0x40>)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fba:	210f      	movs	r1, #15
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	f7ff ff90 	bl	8007ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fc4:	4b05      	ldr	r3, [pc, #20]	@ (8007fdc <SysTick_Config+0x40>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fca:	4b04      	ldr	r3, [pc, #16]	@ (8007fdc <SysTick_Config+0x40>)
 8007fcc:	2207      	movs	r2, #7
 8007fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	e000e010 	.word	0xe000e010

08007fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff ff2d 	bl	8007e48 <__NVIC_SetPriorityGrouping>
}
 8007fee:	bf00      	nop
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b086      	sub	sp, #24
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008004:	2300      	movs	r3, #0
 8008006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008008:	f7ff ff42 	bl	8007e90 <__NVIC_GetPriorityGrouping>
 800800c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	68b9      	ldr	r1, [r7, #8]
 8008012:	6978      	ldr	r0, [r7, #20]
 8008014:	f7ff ff90 	bl	8007f38 <NVIC_EncodePriority>
 8008018:	4602      	mov	r2, r0
 800801a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801e:	4611      	mov	r1, r2
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff ff5f 	bl	8007ee4 <__NVIC_SetPriority>
}
 8008026:	bf00      	nop
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	4603      	mov	r3, r0
 8008036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff ff35 	bl	8007eac <__NVIC_EnableIRQ>
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff ffa2 	bl	8007f9c <SysTick_Config>
 8008058:	4603      	mov	r3, r0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b02      	cmp	r3, #2
 8008078:	d008      	beq.n	800808c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2204      	movs	r2, #4
 800807e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e020      	b.n	80080ce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 020e 	bic.w	r2, r2, #14
 800809a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0201 	bic.w	r2, r2, #1
 80080aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080b4:	2101      	movs	r1, #1
 80080b6:	fa01 f202 	lsl.w	r2, r1, r2
 80080ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bc80      	pop	{r7}
 80080d6:	4770      	bx	lr

080080d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d005      	beq.n	80080fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2204      	movs	r2, #4
 80080f4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	73fb      	strb	r3, [r7, #15]
 80080fa:	e0d6      	b.n	80082aa <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 020e 	bic.w	r2, r2, #14
 800810a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0201 	bic.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	4b64      	ldr	r3, [pc, #400]	@ (80082b4 <HAL_DMA_Abort_IT+0x1dc>)
 8008124:	429a      	cmp	r2, r3
 8008126:	d958      	bls.n	80081da <HAL_DMA_Abort_IT+0x102>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a62      	ldr	r2, [pc, #392]	@ (80082b8 <HAL_DMA_Abort_IT+0x1e0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d04f      	beq.n	80081d2 <HAL_DMA_Abort_IT+0xfa>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a61      	ldr	r2, [pc, #388]	@ (80082bc <HAL_DMA_Abort_IT+0x1e4>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d048      	beq.n	80081ce <HAL_DMA_Abort_IT+0xf6>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a5f      	ldr	r2, [pc, #380]	@ (80082c0 <HAL_DMA_Abort_IT+0x1e8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d040      	beq.n	80081c8 <HAL_DMA_Abort_IT+0xf0>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a5e      	ldr	r2, [pc, #376]	@ (80082c4 <HAL_DMA_Abort_IT+0x1ec>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d038      	beq.n	80081c2 <HAL_DMA_Abort_IT+0xea>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a5c      	ldr	r2, [pc, #368]	@ (80082c8 <HAL_DMA_Abort_IT+0x1f0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d030      	beq.n	80081bc <HAL_DMA_Abort_IT+0xe4>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a5b      	ldr	r2, [pc, #364]	@ (80082cc <HAL_DMA_Abort_IT+0x1f4>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d028      	beq.n	80081b6 <HAL_DMA_Abort_IT+0xde>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a52      	ldr	r2, [pc, #328]	@ (80082b4 <HAL_DMA_Abort_IT+0x1dc>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d020      	beq.n	80081b0 <HAL_DMA_Abort_IT+0xd8>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a57      	ldr	r2, [pc, #348]	@ (80082d0 <HAL_DMA_Abort_IT+0x1f8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d019      	beq.n	80081ac <HAL_DMA_Abort_IT+0xd4>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a55      	ldr	r2, [pc, #340]	@ (80082d4 <HAL_DMA_Abort_IT+0x1fc>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d012      	beq.n	80081a8 <HAL_DMA_Abort_IT+0xd0>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a54      	ldr	r2, [pc, #336]	@ (80082d8 <HAL_DMA_Abort_IT+0x200>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d00a      	beq.n	80081a2 <HAL_DMA_Abort_IT+0xca>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a52      	ldr	r2, [pc, #328]	@ (80082dc <HAL_DMA_Abort_IT+0x204>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d102      	bne.n	800819c <HAL_DMA_Abort_IT+0xc4>
 8008196:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800819a:	e01b      	b.n	80081d4 <HAL_DMA_Abort_IT+0xfc>
 800819c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80081a0:	e018      	b.n	80081d4 <HAL_DMA_Abort_IT+0xfc>
 80081a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80081a6:	e015      	b.n	80081d4 <HAL_DMA_Abort_IT+0xfc>
 80081a8:	2310      	movs	r3, #16
 80081aa:	e013      	b.n	80081d4 <HAL_DMA_Abort_IT+0xfc>
 80081ac:	2301      	movs	r3, #1
 80081ae:	e011      	b.n	80081d4 <HAL_DMA_Abort_IT+0xfc>
 80081b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80081b4:	e00e      	b.n	80081d4 <HAL_DMA_Abort_IT+0xfc>
 80081b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80081ba:	e00b      	b.n	80081d4 <HAL_DMA_Abort_IT+0xfc>
 80081bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80081c0:	e008      	b.n	80081d4 <HAL_DMA_Abort_IT+0xfc>
 80081c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80081c6:	e005      	b.n	80081d4 <HAL_DMA_Abort_IT+0xfc>
 80081c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80081cc:	e002      	b.n	80081d4 <HAL_DMA_Abort_IT+0xfc>
 80081ce:	2310      	movs	r3, #16
 80081d0:	e000      	b.n	80081d4 <HAL_DMA_Abort_IT+0xfc>
 80081d2:	2301      	movs	r3, #1
 80081d4:	4a42      	ldr	r2, [pc, #264]	@ (80082e0 <HAL_DMA_Abort_IT+0x208>)
 80081d6:	6053      	str	r3, [r2, #4]
 80081d8:	e057      	b.n	800828a <HAL_DMA_Abort_IT+0x1b2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a36      	ldr	r2, [pc, #216]	@ (80082b8 <HAL_DMA_Abort_IT+0x1e0>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d04f      	beq.n	8008284 <HAL_DMA_Abort_IT+0x1ac>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a34      	ldr	r2, [pc, #208]	@ (80082bc <HAL_DMA_Abort_IT+0x1e4>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d048      	beq.n	8008280 <HAL_DMA_Abort_IT+0x1a8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a33      	ldr	r2, [pc, #204]	@ (80082c0 <HAL_DMA_Abort_IT+0x1e8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d040      	beq.n	800827a <HAL_DMA_Abort_IT+0x1a2>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a31      	ldr	r2, [pc, #196]	@ (80082c4 <HAL_DMA_Abort_IT+0x1ec>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d038      	beq.n	8008274 <HAL_DMA_Abort_IT+0x19c>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a30      	ldr	r2, [pc, #192]	@ (80082c8 <HAL_DMA_Abort_IT+0x1f0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d030      	beq.n	800826e <HAL_DMA_Abort_IT+0x196>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a2e      	ldr	r2, [pc, #184]	@ (80082cc <HAL_DMA_Abort_IT+0x1f4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d028      	beq.n	8008268 <HAL_DMA_Abort_IT+0x190>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a26      	ldr	r2, [pc, #152]	@ (80082b4 <HAL_DMA_Abort_IT+0x1dc>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d020      	beq.n	8008262 <HAL_DMA_Abort_IT+0x18a>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a2a      	ldr	r2, [pc, #168]	@ (80082d0 <HAL_DMA_Abort_IT+0x1f8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d019      	beq.n	800825e <HAL_DMA_Abort_IT+0x186>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a29      	ldr	r2, [pc, #164]	@ (80082d4 <HAL_DMA_Abort_IT+0x1fc>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d012      	beq.n	800825a <HAL_DMA_Abort_IT+0x182>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a27      	ldr	r2, [pc, #156]	@ (80082d8 <HAL_DMA_Abort_IT+0x200>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00a      	beq.n	8008254 <HAL_DMA_Abort_IT+0x17c>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a26      	ldr	r2, [pc, #152]	@ (80082dc <HAL_DMA_Abort_IT+0x204>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d102      	bne.n	800824e <HAL_DMA_Abort_IT+0x176>
 8008248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800824c:	e01b      	b.n	8008286 <HAL_DMA_Abort_IT+0x1ae>
 800824e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008252:	e018      	b.n	8008286 <HAL_DMA_Abort_IT+0x1ae>
 8008254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008258:	e015      	b.n	8008286 <HAL_DMA_Abort_IT+0x1ae>
 800825a:	2310      	movs	r3, #16
 800825c:	e013      	b.n	8008286 <HAL_DMA_Abort_IT+0x1ae>
 800825e:	2301      	movs	r3, #1
 8008260:	e011      	b.n	8008286 <HAL_DMA_Abort_IT+0x1ae>
 8008262:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008266:	e00e      	b.n	8008286 <HAL_DMA_Abort_IT+0x1ae>
 8008268:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800826c:	e00b      	b.n	8008286 <HAL_DMA_Abort_IT+0x1ae>
 800826e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008272:	e008      	b.n	8008286 <HAL_DMA_Abort_IT+0x1ae>
 8008274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008278:	e005      	b.n	8008286 <HAL_DMA_Abort_IT+0x1ae>
 800827a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800827e:	e002      	b.n	8008286 <HAL_DMA_Abort_IT+0x1ae>
 8008280:	2310      	movs	r3, #16
 8008282:	e000      	b.n	8008286 <HAL_DMA_Abort_IT+0x1ae>
 8008284:	2301      	movs	r3, #1
 8008286:	4a17      	ldr	r2, [pc, #92]	@ (80082e4 <HAL_DMA_Abort_IT+0x20c>)
 8008288:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	4798      	blx	r3
    } 
  }
  return status;
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	40020080 	.word	0x40020080
 80082b8:	40020008 	.word	0x40020008
 80082bc:	4002001c 	.word	0x4002001c
 80082c0:	40020030 	.word	0x40020030
 80082c4:	40020044 	.word	0x40020044
 80082c8:	40020058 	.word	0x40020058
 80082cc:	4002006c 	.word	0x4002006c
 80082d0:	40020408 	.word	0x40020408
 80082d4:	4002041c 	.word	0x4002041c
 80082d8:	40020430 	.word	0x40020430
 80082dc:	40020444 	.word	0x40020444
 80082e0:	40020400 	.word	0x40020400
 80082e4:	40020000 	.word	0x40020000

080082e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b08b      	sub	sp, #44	@ 0x2c
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80082f2:	2300      	movs	r3, #0
 80082f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80082f6:	2300      	movs	r3, #0
 80082f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082fa:	e179      	b.n	80085f0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80082fc:	2201      	movs	r2, #1
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	fa02 f303 	lsl.w	r3, r2, r3
 8008304:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	4013      	ands	r3, r2
 800830e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	429a      	cmp	r2, r3
 8008316:	f040 8168 	bne.w	80085ea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	4a96      	ldr	r2, [pc, #600]	@ (8008578 <HAL_GPIO_Init+0x290>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d05e      	beq.n	80083e2 <HAL_GPIO_Init+0xfa>
 8008324:	4a94      	ldr	r2, [pc, #592]	@ (8008578 <HAL_GPIO_Init+0x290>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d875      	bhi.n	8008416 <HAL_GPIO_Init+0x12e>
 800832a:	4a94      	ldr	r2, [pc, #592]	@ (800857c <HAL_GPIO_Init+0x294>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d058      	beq.n	80083e2 <HAL_GPIO_Init+0xfa>
 8008330:	4a92      	ldr	r2, [pc, #584]	@ (800857c <HAL_GPIO_Init+0x294>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d86f      	bhi.n	8008416 <HAL_GPIO_Init+0x12e>
 8008336:	4a92      	ldr	r2, [pc, #584]	@ (8008580 <HAL_GPIO_Init+0x298>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d052      	beq.n	80083e2 <HAL_GPIO_Init+0xfa>
 800833c:	4a90      	ldr	r2, [pc, #576]	@ (8008580 <HAL_GPIO_Init+0x298>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d869      	bhi.n	8008416 <HAL_GPIO_Init+0x12e>
 8008342:	4a90      	ldr	r2, [pc, #576]	@ (8008584 <HAL_GPIO_Init+0x29c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d04c      	beq.n	80083e2 <HAL_GPIO_Init+0xfa>
 8008348:	4a8e      	ldr	r2, [pc, #568]	@ (8008584 <HAL_GPIO_Init+0x29c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d863      	bhi.n	8008416 <HAL_GPIO_Init+0x12e>
 800834e:	4a8e      	ldr	r2, [pc, #568]	@ (8008588 <HAL_GPIO_Init+0x2a0>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d046      	beq.n	80083e2 <HAL_GPIO_Init+0xfa>
 8008354:	4a8c      	ldr	r2, [pc, #560]	@ (8008588 <HAL_GPIO_Init+0x2a0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d85d      	bhi.n	8008416 <HAL_GPIO_Init+0x12e>
 800835a:	2b12      	cmp	r3, #18
 800835c:	d82a      	bhi.n	80083b4 <HAL_GPIO_Init+0xcc>
 800835e:	2b12      	cmp	r3, #18
 8008360:	d859      	bhi.n	8008416 <HAL_GPIO_Init+0x12e>
 8008362:	a201      	add	r2, pc, #4	@ (adr r2, 8008368 <HAL_GPIO_Init+0x80>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	080083e3 	.word	0x080083e3
 800836c:	080083bd 	.word	0x080083bd
 8008370:	080083cf 	.word	0x080083cf
 8008374:	08008411 	.word	0x08008411
 8008378:	08008417 	.word	0x08008417
 800837c:	08008417 	.word	0x08008417
 8008380:	08008417 	.word	0x08008417
 8008384:	08008417 	.word	0x08008417
 8008388:	08008417 	.word	0x08008417
 800838c:	08008417 	.word	0x08008417
 8008390:	08008417 	.word	0x08008417
 8008394:	08008417 	.word	0x08008417
 8008398:	08008417 	.word	0x08008417
 800839c:	08008417 	.word	0x08008417
 80083a0:	08008417 	.word	0x08008417
 80083a4:	08008417 	.word	0x08008417
 80083a8:	08008417 	.word	0x08008417
 80083ac:	080083c5 	.word	0x080083c5
 80083b0:	080083d9 	.word	0x080083d9
 80083b4:	4a75      	ldr	r2, [pc, #468]	@ (800858c <HAL_GPIO_Init+0x2a4>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d013      	beq.n	80083e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80083ba:	e02c      	b.n	8008416 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	623b      	str	r3, [r7, #32]
          break;
 80083c2:	e029      	b.n	8008418 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	3304      	adds	r3, #4
 80083ca:	623b      	str	r3, [r7, #32]
          break;
 80083cc:	e024      	b.n	8008418 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	3308      	adds	r3, #8
 80083d4:	623b      	str	r3, [r7, #32]
          break;
 80083d6:	e01f      	b.n	8008418 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	330c      	adds	r3, #12
 80083de:	623b      	str	r3, [r7, #32]
          break;
 80083e0:	e01a      	b.n	8008418 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80083ea:	2304      	movs	r3, #4
 80083ec:	623b      	str	r3, [r7, #32]
          break;
 80083ee:	e013      	b.n	8008418 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d105      	bne.n	8008404 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80083f8:	2308      	movs	r3, #8
 80083fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	611a      	str	r2, [r3, #16]
          break;
 8008402:	e009      	b.n	8008418 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008404:	2308      	movs	r3, #8
 8008406:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	615a      	str	r2, [r3, #20]
          break;
 800840e:	e003      	b.n	8008418 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008410:	2300      	movs	r3, #0
 8008412:	623b      	str	r3, [r7, #32]
          break;
 8008414:	e000      	b.n	8008418 <HAL_GPIO_Init+0x130>
          break;
 8008416:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	2bff      	cmp	r3, #255	@ 0xff
 800841c:	d801      	bhi.n	8008422 <HAL_GPIO_Init+0x13a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	e001      	b.n	8008426 <HAL_GPIO_Init+0x13e>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3304      	adds	r3, #4
 8008426:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	2bff      	cmp	r3, #255	@ 0xff
 800842c:	d802      	bhi.n	8008434 <HAL_GPIO_Init+0x14c>
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	e002      	b.n	800843a <HAL_GPIO_Init+0x152>
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	3b08      	subs	r3, #8
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	210f      	movs	r1, #15
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	fa01 f303 	lsl.w	r3, r1, r3
 8008448:	43db      	mvns	r3, r3
 800844a:	401a      	ands	r2, r3
 800844c:	6a39      	ldr	r1, [r7, #32]
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	fa01 f303 	lsl.w	r3, r1, r3
 8008454:	431a      	orrs	r2, r3
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 80c1 	beq.w	80085ea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008468:	4b49      	ldr	r3, [pc, #292]	@ (8008590 <HAL_GPIO_Init+0x2a8>)
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	4a48      	ldr	r2, [pc, #288]	@ (8008590 <HAL_GPIO_Init+0x2a8>)
 800846e:	f043 0301 	orr.w	r3, r3, #1
 8008472:	6193      	str	r3, [r2, #24]
 8008474:	4b46      	ldr	r3, [pc, #280]	@ (8008590 <HAL_GPIO_Init+0x2a8>)
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	60bb      	str	r3, [r7, #8]
 800847e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008480:	4a44      	ldr	r2, [pc, #272]	@ (8008594 <HAL_GPIO_Init+0x2ac>)
 8008482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008484:	089b      	lsrs	r3, r3, #2
 8008486:	3302      	adds	r3, #2
 8008488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800848c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	f003 0303 	and.w	r3, r3, #3
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	220f      	movs	r2, #15
 8008498:	fa02 f303 	lsl.w	r3, r2, r3
 800849c:	43db      	mvns	r3, r3
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4013      	ands	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a3c      	ldr	r2, [pc, #240]	@ (8008598 <HAL_GPIO_Init+0x2b0>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d01f      	beq.n	80084ec <HAL_GPIO_Init+0x204>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a3b      	ldr	r2, [pc, #236]	@ (800859c <HAL_GPIO_Init+0x2b4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d019      	beq.n	80084e8 <HAL_GPIO_Init+0x200>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a3a      	ldr	r2, [pc, #232]	@ (80085a0 <HAL_GPIO_Init+0x2b8>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d013      	beq.n	80084e4 <HAL_GPIO_Init+0x1fc>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a39      	ldr	r2, [pc, #228]	@ (80085a4 <HAL_GPIO_Init+0x2bc>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d00d      	beq.n	80084e0 <HAL_GPIO_Init+0x1f8>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a38      	ldr	r2, [pc, #224]	@ (80085a8 <HAL_GPIO_Init+0x2c0>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d007      	beq.n	80084dc <HAL_GPIO_Init+0x1f4>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a37      	ldr	r2, [pc, #220]	@ (80085ac <HAL_GPIO_Init+0x2c4>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d101      	bne.n	80084d8 <HAL_GPIO_Init+0x1f0>
 80084d4:	2305      	movs	r3, #5
 80084d6:	e00a      	b.n	80084ee <HAL_GPIO_Init+0x206>
 80084d8:	2306      	movs	r3, #6
 80084da:	e008      	b.n	80084ee <HAL_GPIO_Init+0x206>
 80084dc:	2304      	movs	r3, #4
 80084de:	e006      	b.n	80084ee <HAL_GPIO_Init+0x206>
 80084e0:	2303      	movs	r3, #3
 80084e2:	e004      	b.n	80084ee <HAL_GPIO_Init+0x206>
 80084e4:	2302      	movs	r3, #2
 80084e6:	e002      	b.n	80084ee <HAL_GPIO_Init+0x206>
 80084e8:	2301      	movs	r3, #1
 80084ea:	e000      	b.n	80084ee <HAL_GPIO_Init+0x206>
 80084ec:	2300      	movs	r3, #0
 80084ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084f0:	f002 0203 	and.w	r2, r2, #3
 80084f4:	0092      	lsls	r2, r2, #2
 80084f6:	4093      	lsls	r3, r2
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80084fe:	4925      	ldr	r1, [pc, #148]	@ (8008594 <HAL_GPIO_Init+0x2ac>)
 8008500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008502:	089b      	lsrs	r3, r3, #2
 8008504:	3302      	adds	r3, #2
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d006      	beq.n	8008526 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008518:	4b25      	ldr	r3, [pc, #148]	@ (80085b0 <HAL_GPIO_Init+0x2c8>)
 800851a:	689a      	ldr	r2, [r3, #8]
 800851c:	4924      	ldr	r1, [pc, #144]	@ (80085b0 <HAL_GPIO_Init+0x2c8>)
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	4313      	orrs	r3, r2
 8008522:	608b      	str	r3, [r1, #8]
 8008524:	e006      	b.n	8008534 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008526:	4b22      	ldr	r3, [pc, #136]	@ (80085b0 <HAL_GPIO_Init+0x2c8>)
 8008528:	689a      	ldr	r2, [r3, #8]
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	43db      	mvns	r3, r3
 800852e:	4920      	ldr	r1, [pc, #128]	@ (80085b0 <HAL_GPIO_Init+0x2c8>)
 8008530:	4013      	ands	r3, r2
 8008532:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d006      	beq.n	800854e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008540:	4b1b      	ldr	r3, [pc, #108]	@ (80085b0 <HAL_GPIO_Init+0x2c8>)
 8008542:	68da      	ldr	r2, [r3, #12]
 8008544:	491a      	ldr	r1, [pc, #104]	@ (80085b0 <HAL_GPIO_Init+0x2c8>)
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	4313      	orrs	r3, r2
 800854a:	60cb      	str	r3, [r1, #12]
 800854c:	e006      	b.n	800855c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800854e:	4b18      	ldr	r3, [pc, #96]	@ (80085b0 <HAL_GPIO_Init+0x2c8>)
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	43db      	mvns	r3, r3
 8008556:	4916      	ldr	r1, [pc, #88]	@ (80085b0 <HAL_GPIO_Init+0x2c8>)
 8008558:	4013      	ands	r3, r2
 800855a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d025      	beq.n	80085b4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008568:	4b11      	ldr	r3, [pc, #68]	@ (80085b0 <HAL_GPIO_Init+0x2c8>)
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	4910      	ldr	r1, [pc, #64]	@ (80085b0 <HAL_GPIO_Init+0x2c8>)
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	4313      	orrs	r3, r2
 8008572:	604b      	str	r3, [r1, #4]
 8008574:	e025      	b.n	80085c2 <HAL_GPIO_Init+0x2da>
 8008576:	bf00      	nop
 8008578:	10320000 	.word	0x10320000
 800857c:	10310000 	.word	0x10310000
 8008580:	10220000 	.word	0x10220000
 8008584:	10210000 	.word	0x10210000
 8008588:	10120000 	.word	0x10120000
 800858c:	10110000 	.word	0x10110000
 8008590:	40021000 	.word	0x40021000
 8008594:	40010000 	.word	0x40010000
 8008598:	40010800 	.word	0x40010800
 800859c:	40010c00 	.word	0x40010c00
 80085a0:	40011000 	.word	0x40011000
 80085a4:	40011400 	.word	0x40011400
 80085a8:	40011800 	.word	0x40011800
 80085ac:	40011c00 	.word	0x40011c00
 80085b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80085b4:	4b15      	ldr	r3, [pc, #84]	@ (800860c <HAL_GPIO_Init+0x324>)
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	43db      	mvns	r3, r3
 80085bc:	4913      	ldr	r1, [pc, #76]	@ (800860c <HAL_GPIO_Init+0x324>)
 80085be:	4013      	ands	r3, r2
 80085c0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d006      	beq.n	80085dc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80085ce:	4b0f      	ldr	r3, [pc, #60]	@ (800860c <HAL_GPIO_Init+0x324>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	490e      	ldr	r1, [pc, #56]	@ (800860c <HAL_GPIO_Init+0x324>)
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	600b      	str	r3, [r1, #0]
 80085da:	e006      	b.n	80085ea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80085dc:	4b0b      	ldr	r3, [pc, #44]	@ (800860c <HAL_GPIO_Init+0x324>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	43db      	mvns	r3, r3
 80085e4:	4909      	ldr	r1, [pc, #36]	@ (800860c <HAL_GPIO_Init+0x324>)
 80085e6:	4013      	ands	r3, r2
 80085e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80085ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ec:	3301      	adds	r3, #1
 80085ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f6:	fa22 f303 	lsr.w	r3, r2, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f47f ae7e 	bne.w	80082fc <HAL_GPIO_Init+0x14>
  }
}
 8008600:	bf00      	nop
 8008602:	bf00      	nop
 8008604:	372c      	adds	r7, #44	@ 0x2c
 8008606:	46bd      	mov	sp, r7
 8008608:	bc80      	pop	{r7}
 800860a:	4770      	bx	lr
 800860c:	40010400 	.word	0x40010400

08008610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	887b      	ldrh	r3, [r7, #2]
 8008622:	4013      	ands	r3, r2
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008628:	2301      	movs	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]
 800862c:	e001      	b.n	8008632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	bc80      	pop	{r7}
 800863c:	4770      	bx	lr

0800863e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	807b      	strh	r3, [r7, #2]
 800864a:	4613      	mov	r3, r2
 800864c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800864e:	787b      	ldrb	r3, [r7, #1]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d003      	beq.n	800865c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008654:	887a      	ldrh	r2, [r7, #2]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800865a:	e003      	b.n	8008664 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800865c:	887b      	ldrh	r3, [r7, #2]
 800865e:	041a      	lsls	r2, r3, #16
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	611a      	str	r2, [r3, #16]
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	bc80      	pop	{r7}
 800866c:	4770      	bx	lr

0800866e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800866e:	b480      	push	{r7}
 8008670:	b085      	sub	sp, #20
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008680:	887a      	ldrh	r2, [r7, #2]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4013      	ands	r3, r2
 8008686:	041a      	lsls	r2, r3, #16
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	43d9      	mvns	r1, r3
 800868c:	887b      	ldrh	r3, [r7, #2]
 800868e:	400b      	ands	r3, r1
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	611a      	str	r2, [r3, #16]
}
 8008696:	bf00      	nop
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	bc80      	pop	{r7}
 800869e:	4770      	bx	lr

080086a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80086aa:	4b08      	ldr	r3, [pc, #32]	@ (80086cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086ac:	695a      	ldr	r2, [r3, #20]
 80086ae:	88fb      	ldrh	r3, [r7, #6]
 80086b0:	4013      	ands	r3, r2
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d006      	beq.n	80086c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80086b6:	4a05      	ldr	r2, [pc, #20]	@ (80086cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086b8:	88fb      	ldrh	r3, [r7, #6]
 80086ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80086bc:	88fb      	ldrh	r3, [r7, #6]
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe ffd4 	bl	800766c <HAL_GPIO_EXTI_Callback>
  }
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	40010400 	.word	0x40010400

080086d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e272      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 8087 	beq.w	80087fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80086f0:	4b92      	ldr	r3, [pc, #584]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f003 030c 	and.w	r3, r3, #12
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d00c      	beq.n	8008716 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80086fc:	4b8f      	ldr	r3, [pc, #572]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f003 030c 	and.w	r3, r3, #12
 8008704:	2b08      	cmp	r3, #8
 8008706:	d112      	bne.n	800872e <HAL_RCC_OscConfig+0x5e>
 8008708:	4b8c      	ldr	r3, [pc, #560]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008714:	d10b      	bne.n	800872e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008716:	4b89      	ldr	r3, [pc, #548]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d06c      	beq.n	80087fc <HAL_RCC_OscConfig+0x12c>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d168      	bne.n	80087fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e24c      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008736:	d106      	bne.n	8008746 <HAL_RCC_OscConfig+0x76>
 8008738:	4b80      	ldr	r3, [pc, #512]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a7f      	ldr	r2, [pc, #508]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 800873e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	e02e      	b.n	80087a4 <HAL_RCC_OscConfig+0xd4>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10c      	bne.n	8008768 <HAL_RCC_OscConfig+0x98>
 800874e:	4b7b      	ldr	r3, [pc, #492]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a7a      	ldr	r2, [pc, #488]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	4b78      	ldr	r3, [pc, #480]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a77      	ldr	r2, [pc, #476]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008760:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	e01d      	b.n	80087a4 <HAL_RCC_OscConfig+0xd4>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008770:	d10c      	bne.n	800878c <HAL_RCC_OscConfig+0xbc>
 8008772:	4b72      	ldr	r3, [pc, #456]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a71      	ldr	r2, [pc, #452]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	4b6f      	ldr	r3, [pc, #444]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a6e      	ldr	r2, [pc, #440]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	e00b      	b.n	80087a4 <HAL_RCC_OscConfig+0xd4>
 800878c:	4b6b      	ldr	r3, [pc, #428]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a6a      	ldr	r2, [pc, #424]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	4b68      	ldr	r3, [pc, #416]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a67      	ldr	r2, [pc, #412]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 800879e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d013      	beq.n	80087d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087ac:	f7ff fb1e 	bl	8007dec <HAL_GetTick>
 80087b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087b2:	e008      	b.n	80087c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087b4:	f7ff fb1a 	bl	8007dec <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b64      	cmp	r3, #100	@ 0x64
 80087c0:	d901      	bls.n	80087c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e200      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087c6:	4b5d      	ldr	r3, [pc, #372]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0f0      	beq.n	80087b4 <HAL_RCC_OscConfig+0xe4>
 80087d2:	e014      	b.n	80087fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087d4:	f7ff fb0a 	bl	8007dec <HAL_GetTick>
 80087d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087da:	e008      	b.n	80087ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087dc:	f7ff fb06 	bl	8007dec <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2b64      	cmp	r3, #100	@ 0x64
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e1ec      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087ee:	4b53      	ldr	r3, [pc, #332]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1f0      	bne.n	80087dc <HAL_RCC_OscConfig+0x10c>
 80087fa:	e000      	b.n	80087fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d063      	beq.n	80088d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800880a:	4b4c      	ldr	r3, [pc, #304]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f003 030c 	and.w	r3, r3, #12
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00b      	beq.n	800882e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008816:	4b49      	ldr	r3, [pc, #292]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f003 030c 	and.w	r3, r3, #12
 800881e:	2b08      	cmp	r3, #8
 8008820:	d11c      	bne.n	800885c <HAL_RCC_OscConfig+0x18c>
 8008822:	4b46      	ldr	r3, [pc, #280]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d116      	bne.n	800885c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800882e:	4b43      	ldr	r3, [pc, #268]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <HAL_RCC_OscConfig+0x176>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d001      	beq.n	8008846 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e1c0      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008846:	4b3d      	ldr	r3, [pc, #244]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	4939      	ldr	r1, [pc, #228]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008856:	4313      	orrs	r3, r2
 8008858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800885a:	e03a      	b.n	80088d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d020      	beq.n	80088a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008864:	4b36      	ldr	r3, [pc, #216]	@ (8008940 <HAL_RCC_OscConfig+0x270>)
 8008866:	2201      	movs	r2, #1
 8008868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800886a:	f7ff fabf 	bl	8007dec <HAL_GetTick>
 800886e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008870:	e008      	b.n	8008884 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008872:	f7ff fabb 	bl	8007dec <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	2b02      	cmp	r3, #2
 800887e:	d901      	bls.n	8008884 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e1a1      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008884:	4b2d      	ldr	r3, [pc, #180]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0f0      	beq.n	8008872 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008890:	4b2a      	ldr	r3, [pc, #168]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	00db      	lsls	r3, r3, #3
 800889e:	4927      	ldr	r1, [pc, #156]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 80088a0:	4313      	orrs	r3, r2
 80088a2:	600b      	str	r3, [r1, #0]
 80088a4:	e015      	b.n	80088d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088a6:	4b26      	ldr	r3, [pc, #152]	@ (8008940 <HAL_RCC_OscConfig+0x270>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088ac:	f7ff fa9e 	bl	8007dec <HAL_GetTick>
 80088b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088b2:	e008      	b.n	80088c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088b4:	f7ff fa9a 	bl	8007dec <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e180      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088c6:	4b1d      	ldr	r3, [pc, #116]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1f0      	bne.n	80088b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0308 	and.w	r3, r3, #8
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d03a      	beq.n	8008954 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d019      	beq.n	800891a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088e6:	4b17      	ldr	r3, [pc, #92]	@ (8008944 <HAL_RCC_OscConfig+0x274>)
 80088e8:	2201      	movs	r2, #1
 80088ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088ec:	f7ff fa7e 	bl	8007dec <HAL_GetTick>
 80088f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088f2:	e008      	b.n	8008906 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088f4:	f7ff fa7a 	bl	8007dec <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e160      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008906:	4b0d      	ldr	r3, [pc, #52]	@ (800893c <HAL_RCC_OscConfig+0x26c>)
 8008908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0f0      	beq.n	80088f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008912:	2001      	movs	r0, #1
 8008914:	f000 face 	bl	8008eb4 <RCC_Delay>
 8008918:	e01c      	b.n	8008954 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800891a:	4b0a      	ldr	r3, [pc, #40]	@ (8008944 <HAL_RCC_OscConfig+0x274>)
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008920:	f7ff fa64 	bl	8007dec <HAL_GetTick>
 8008924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008926:	e00f      	b.n	8008948 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008928:	f7ff fa60 	bl	8007dec <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	2b02      	cmp	r3, #2
 8008934:	d908      	bls.n	8008948 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e146      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
 800893a:	bf00      	nop
 800893c:	40021000 	.word	0x40021000
 8008940:	42420000 	.word	0x42420000
 8008944:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008948:	4b92      	ldr	r3, [pc, #584]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 800894a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e9      	bne.n	8008928 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 80a6 	beq.w	8008aae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008962:	2300      	movs	r3, #0
 8008964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008966:	4b8b      	ldr	r3, [pc, #556]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10d      	bne.n	800898e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008972:	4b88      	ldr	r3, [pc, #544]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	4a87      	ldr	r2, [pc, #540]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800897c:	61d3      	str	r3, [r2, #28]
 800897e:	4b85      	ldr	r3, [pc, #532]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008986:	60bb      	str	r3, [r7, #8]
 8008988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800898a:	2301      	movs	r3, #1
 800898c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800898e:	4b82      	ldr	r3, [pc, #520]	@ (8008b98 <HAL_RCC_OscConfig+0x4c8>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008996:	2b00      	cmp	r3, #0
 8008998:	d118      	bne.n	80089cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800899a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b98 <HAL_RCC_OscConfig+0x4c8>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b98 <HAL_RCC_OscConfig+0x4c8>)
 80089a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089a6:	f7ff fa21 	bl	8007dec <HAL_GetTick>
 80089aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ac:	e008      	b.n	80089c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089ae:	f7ff fa1d 	bl	8007dec <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	2b64      	cmp	r3, #100	@ 0x64
 80089ba:	d901      	bls.n	80089c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e103      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089c0:	4b75      	ldr	r3, [pc, #468]	@ (8008b98 <HAL_RCC_OscConfig+0x4c8>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d0f0      	beq.n	80089ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d106      	bne.n	80089e2 <HAL_RCC_OscConfig+0x312>
 80089d4:	4b6f      	ldr	r3, [pc, #444]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 80089d6:	6a1b      	ldr	r3, [r3, #32]
 80089d8:	4a6e      	ldr	r2, [pc, #440]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 80089da:	f043 0301 	orr.w	r3, r3, #1
 80089de:	6213      	str	r3, [r2, #32]
 80089e0:	e02d      	b.n	8008a3e <HAL_RCC_OscConfig+0x36e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10c      	bne.n	8008a04 <HAL_RCC_OscConfig+0x334>
 80089ea:	4b6a      	ldr	r3, [pc, #424]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	4a69      	ldr	r2, [pc, #420]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 80089f0:	f023 0301 	bic.w	r3, r3, #1
 80089f4:	6213      	str	r3, [r2, #32]
 80089f6:	4b67      	ldr	r3, [pc, #412]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	4a66      	ldr	r2, [pc, #408]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 80089fc:	f023 0304 	bic.w	r3, r3, #4
 8008a00:	6213      	str	r3, [r2, #32]
 8008a02:	e01c      	b.n	8008a3e <HAL_RCC_OscConfig+0x36e>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	2b05      	cmp	r3, #5
 8008a0a:	d10c      	bne.n	8008a26 <HAL_RCC_OscConfig+0x356>
 8008a0c:	4b61      	ldr	r3, [pc, #388]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	4a60      	ldr	r2, [pc, #384]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008a12:	f043 0304 	orr.w	r3, r3, #4
 8008a16:	6213      	str	r3, [r2, #32]
 8008a18:	4b5e      	ldr	r3, [pc, #376]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	4a5d      	ldr	r2, [pc, #372]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	6213      	str	r3, [r2, #32]
 8008a24:	e00b      	b.n	8008a3e <HAL_RCC_OscConfig+0x36e>
 8008a26:	4b5b      	ldr	r3, [pc, #364]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	4a5a      	ldr	r2, [pc, #360]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008a2c:	f023 0301 	bic.w	r3, r3, #1
 8008a30:	6213      	str	r3, [r2, #32]
 8008a32:	4b58      	ldr	r3, [pc, #352]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	4a57      	ldr	r2, [pc, #348]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008a38:	f023 0304 	bic.w	r3, r3, #4
 8008a3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d015      	beq.n	8008a72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a46:	f7ff f9d1 	bl	8007dec <HAL_GetTick>
 8008a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a4c:	e00a      	b.n	8008a64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a4e:	f7ff f9cd 	bl	8007dec <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e0b1      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a64:	4b4b      	ldr	r3, [pc, #300]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0ee      	beq.n	8008a4e <HAL_RCC_OscConfig+0x37e>
 8008a70:	e014      	b.n	8008a9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a72:	f7ff f9bb 	bl	8007dec <HAL_GetTick>
 8008a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a78:	e00a      	b.n	8008a90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a7a:	f7ff f9b7 	bl	8007dec <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d901      	bls.n	8008a90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e09b      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a90:	4b40      	ldr	r3, [pc, #256]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1ee      	bne.n	8008a7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d105      	bne.n	8008aae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	4a3b      	ldr	r2, [pc, #236]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008aac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 8087 	beq.w	8008bc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ab8:	4b36      	ldr	r3, [pc, #216]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f003 030c 	and.w	r3, r3, #12
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d061      	beq.n	8008b88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d146      	bne.n	8008b5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008acc:	4b33      	ldr	r3, [pc, #204]	@ (8008b9c <HAL_RCC_OscConfig+0x4cc>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ad2:	f7ff f98b 	bl	8007dec <HAL_GetTick>
 8008ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ad8:	e008      	b.n	8008aec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ada:	f7ff f987 	bl	8007dec <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d901      	bls.n	8008aec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e06d      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008aec:	4b29      	ldr	r3, [pc, #164]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1f0      	bne.n	8008ada <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b00:	d108      	bne.n	8008b14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008b02:	4b24      	ldr	r3, [pc, #144]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	4921      	ldr	r1, [pc, #132]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b14:	4b1f      	ldr	r3, [pc, #124]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a19      	ldr	r1, [r3, #32]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b24:	430b      	orrs	r3, r1
 8008b26:	491b      	ldr	r1, [pc, #108]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8008b9c <HAL_RCC_OscConfig+0x4cc>)
 8008b2e:	2201      	movs	r2, #1
 8008b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b32:	f7ff f95b 	bl	8007dec <HAL_GetTick>
 8008b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008b38:	e008      	b.n	8008b4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b3a:	f7ff f957 	bl	8007dec <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d901      	bls.n	8008b4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e03d      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008b4c:	4b11      	ldr	r3, [pc, #68]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0f0      	beq.n	8008b3a <HAL_RCC_OscConfig+0x46a>
 8008b58:	e035      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b5a:	4b10      	ldr	r3, [pc, #64]	@ (8008b9c <HAL_RCC_OscConfig+0x4cc>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b60:	f7ff f944 	bl	8007dec <HAL_GetTick>
 8008b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b68:	f7ff f940 	bl	8007dec <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e026      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b7a:	4b06      	ldr	r3, [pc, #24]	@ (8008b94 <HAL_RCC_OscConfig+0x4c4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1f0      	bne.n	8008b68 <HAL_RCC_OscConfig+0x498>
 8008b86:	e01e      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d107      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e019      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
 8008b94:	40021000 	.word	0x40021000
 8008b98:	40007000 	.word	0x40007000
 8008b9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8008bd0 <HAL_RCC_OscConfig+0x500>)
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d106      	bne.n	8008bc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d001      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e000      	b.n	8008bc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	40021000 	.word	0x40021000

08008bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e0d0      	b.n	8008d8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008be8:	4b6a      	ldr	r3, [pc, #424]	@ (8008d94 <HAL_RCC_ClockConfig+0x1c0>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0307 	and.w	r3, r3, #7
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d910      	bls.n	8008c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf6:	4b67      	ldr	r3, [pc, #412]	@ (8008d94 <HAL_RCC_ClockConfig+0x1c0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f023 0207 	bic.w	r2, r3, #7
 8008bfe:	4965      	ldr	r1, [pc, #404]	@ (8008d94 <HAL_RCC_ClockConfig+0x1c0>)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c06:	4b63      	ldr	r3, [pc, #396]	@ (8008d94 <HAL_RCC_ClockConfig+0x1c0>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0307 	and.w	r3, r3, #7
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d001      	beq.n	8008c18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e0b8      	b.n	8008d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0302 	and.w	r3, r3, #2
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d020      	beq.n	8008c66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d005      	beq.n	8008c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c30:	4b59      	ldr	r3, [pc, #356]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	4a58      	ldr	r2, [pc, #352]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008c36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008c3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0308 	and.w	r3, r3, #8
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d005      	beq.n	8008c54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c48:	4b53      	ldr	r3, [pc, #332]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	4a52      	ldr	r2, [pc, #328]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008c4e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008c52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c54:	4b50      	ldr	r3, [pc, #320]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	494d      	ldr	r1, [pc, #308]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d040      	beq.n	8008cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d107      	bne.n	8008c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c7a:	4b47      	ldr	r3, [pc, #284]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d115      	bne.n	8008cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e07f      	b.n	8008d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d107      	bne.n	8008ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c92:	4b41      	ldr	r3, [pc, #260]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d109      	bne.n	8008cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e073      	b.n	8008d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e06b      	b.n	8008d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cb2:	4b39      	ldr	r3, [pc, #228]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f023 0203 	bic.w	r2, r3, #3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	4936      	ldr	r1, [pc, #216]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cc4:	f7ff f892 	bl	8007dec <HAL_GetTick>
 8008cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cca:	e00a      	b.n	8008ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ccc:	f7ff f88e 	bl	8007dec <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e053      	b.n	8008d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f003 020c 	and.w	r2, r3, #12
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d1eb      	bne.n	8008ccc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cf4:	4b27      	ldr	r3, [pc, #156]	@ (8008d94 <HAL_RCC_ClockConfig+0x1c0>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d210      	bcs.n	8008d24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d02:	4b24      	ldr	r3, [pc, #144]	@ (8008d94 <HAL_RCC_ClockConfig+0x1c0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f023 0207 	bic.w	r2, r3, #7
 8008d0a:	4922      	ldr	r1, [pc, #136]	@ (8008d94 <HAL_RCC_ClockConfig+0x1c0>)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d12:	4b20      	ldr	r3, [pc, #128]	@ (8008d94 <HAL_RCC_ClockConfig+0x1c0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0307 	and.w	r3, r3, #7
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d001      	beq.n	8008d24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e032      	b.n	8008d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0304 	and.w	r3, r3, #4
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d008      	beq.n	8008d42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d30:	4b19      	ldr	r3, [pc, #100]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	4916      	ldr	r1, [pc, #88]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0308 	and.w	r3, r3, #8
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d009      	beq.n	8008d62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008d4e:	4b12      	ldr	r3, [pc, #72]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	00db      	lsls	r3, r3, #3
 8008d5c:	490e      	ldr	r1, [pc, #56]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d62:	f000 f821 	bl	8008da8 <HAL_RCC_GetSysClockFreq>
 8008d66:	4602      	mov	r2, r0
 8008d68:	4b0b      	ldr	r3, [pc, #44]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	091b      	lsrs	r3, r3, #4
 8008d6e:	f003 030f 	and.w	r3, r3, #15
 8008d72:	490a      	ldr	r1, [pc, #40]	@ (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008d74:	5ccb      	ldrb	r3, [r1, r3]
 8008d76:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7a:	4a09      	ldr	r2, [pc, #36]	@ (8008da0 <HAL_RCC_ClockConfig+0x1cc>)
 8008d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008d7e:	4b09      	ldr	r3, [pc, #36]	@ (8008da4 <HAL_RCC_ClockConfig+0x1d0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fff0 	bl	8007d68 <HAL_InitTick>

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	40022000 	.word	0x40022000
 8008d98:	40021000 	.word	0x40021000
 8008d9c:	0800dd64 	.word	0x0800dd64
 8008da0:	20000010 	.word	0x20000010
 8008da4:	20000014 	.word	0x20000014

08008da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60fb      	str	r3, [r7, #12]
 8008db2:	2300      	movs	r3, #0
 8008db4:	60bb      	str	r3, [r7, #8]
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	2300      	movs	r3, #0
 8008dbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8008e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f003 030c 	and.w	r3, r3, #12
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d002      	beq.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x30>
 8008dd2:	2b08      	cmp	r3, #8
 8008dd4:	d003      	beq.n	8008dde <HAL_RCC_GetSysClockFreq+0x36>
 8008dd6:	e027      	b.n	8008e28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008dd8:	4b19      	ldr	r3, [pc, #100]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8008dda:	613b      	str	r3, [r7, #16]
      break;
 8008ddc:	e027      	b.n	8008e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	0c9b      	lsrs	r3, r3, #18
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	4a17      	ldr	r2, [pc, #92]	@ (8008e44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008de8:	5cd3      	ldrb	r3, [r2, r3]
 8008dea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d010      	beq.n	8008e18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008df6:	4b11      	ldr	r3, [pc, #68]	@ (8008e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	0c5b      	lsrs	r3, r3, #17
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	4a11      	ldr	r2, [pc, #68]	@ (8008e48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008e02:	5cd3      	ldrb	r3, [r2, r3]
 8008e04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a0d      	ldr	r2, [pc, #52]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8008e0a:	fb03 f202 	mul.w	r2, r3, r2
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	e004      	b.n	8008e22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8008e1c:	fb02 f303 	mul.w	r3, r2, r3
 8008e20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	613b      	str	r3, [r7, #16]
      break;
 8008e26:	e002      	b.n	8008e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008e28:	4b05      	ldr	r3, [pc, #20]	@ (8008e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8008e2a:	613b      	str	r3, [r7, #16]
      break;
 8008e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e2e:	693b      	ldr	r3, [r7, #16]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	371c      	adds	r7, #28
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	40021000 	.word	0x40021000
 8008e40:	007a1200 	.word	0x007a1200
 8008e44:	0800dd7c 	.word	0x0800dd7c
 8008e48:	0800dd8c 	.word	0x0800dd8c
 8008e4c:	003d0900 	.word	0x003d0900

08008e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e50:	b480      	push	{r7}
 8008e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e54:	4b02      	ldr	r3, [pc, #8]	@ (8008e60 <HAL_RCC_GetHCLKFreq+0x10>)
 8008e56:	681b      	ldr	r3, [r3, #0]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bc80      	pop	{r7}
 8008e5e:	4770      	bx	lr
 8008e60:	20000010 	.word	0x20000010

08008e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e68:	f7ff fff2 	bl	8008e50 <HAL_RCC_GetHCLKFreq>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	4b05      	ldr	r3, [pc, #20]	@ (8008e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	0a1b      	lsrs	r3, r3, #8
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	4903      	ldr	r1, [pc, #12]	@ (8008e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e7a:	5ccb      	ldrb	r3, [r1, r3]
 8008e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	40021000 	.word	0x40021000
 8008e88:	0800dd74 	.word	0x0800dd74

08008e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e90:	f7ff ffde 	bl	8008e50 <HAL_RCC_GetHCLKFreq>
 8008e94:	4602      	mov	r2, r0
 8008e96:	4b05      	ldr	r3, [pc, #20]	@ (8008eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	0adb      	lsrs	r3, r3, #11
 8008e9c:	f003 0307 	and.w	r3, r3, #7
 8008ea0:	4903      	ldr	r1, [pc, #12]	@ (8008eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ea2:	5ccb      	ldrb	r3, [r1, r3]
 8008ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	40021000 	.word	0x40021000
 8008eb0:	0800dd74 	.word	0x0800dd74

08008eb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee8 <RCC_Delay+0x34>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8008eec <RCC_Delay+0x38>)
 8008ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec6:	0a5b      	lsrs	r3, r3, #9
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	fb02 f303 	mul.w	r3, r2, r3
 8008ece:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008ed0:	bf00      	nop
  }
  while (Delay --);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	1e5a      	subs	r2, r3, #1
 8008ed6:	60fa      	str	r2, [r7, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1f9      	bne.n	8008ed0 <RCC_Delay+0x1c>
}
 8008edc:	bf00      	nop
 8008ede:	bf00      	nop
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bc80      	pop	{r7}
 8008ee6:	4770      	bx	lr
 8008ee8:	20000010 	.word	0x20000010
 8008eec:	10624dd3 	.word	0x10624dd3

08008ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e041      	b.n	8008f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d106      	bne.n	8008f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7fe fe34 	bl	8007b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	f000 fa6a 	bl	8009408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d001      	beq.n	8008fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e044      	b.n	8009032 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 0201 	orr.w	r2, r2, #1
 8008fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800903c <HAL_TIM_Base_Start_IT+0xac>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d018      	beq.n	8008ffc <HAL_TIM_Base_Start_IT+0x6c>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a1c      	ldr	r2, [pc, #112]	@ (8009040 <HAL_TIM_Base_Start_IT+0xb0>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d013      	beq.n	8008ffc <HAL_TIM_Base_Start_IT+0x6c>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fdc:	d00e      	beq.n	8008ffc <HAL_TIM_Base_Start_IT+0x6c>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a18      	ldr	r2, [pc, #96]	@ (8009044 <HAL_TIM_Base_Start_IT+0xb4>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d009      	beq.n	8008ffc <HAL_TIM_Base_Start_IT+0x6c>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a16      	ldr	r2, [pc, #88]	@ (8009048 <HAL_TIM_Base_Start_IT+0xb8>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d004      	beq.n	8008ffc <HAL_TIM_Base_Start_IT+0x6c>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a15      	ldr	r2, [pc, #84]	@ (800904c <HAL_TIM_Base_Start_IT+0xbc>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d111      	bne.n	8009020 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b06      	cmp	r3, #6
 800900c:	d010      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f042 0201 	orr.w	r2, r2, #1
 800901c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800901e:	e007      	b.n	8009030 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f042 0201 	orr.w	r2, r2, #1
 800902e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	bc80      	pop	{r7}
 800903a:	4770      	bx	lr
 800903c:	40012c00 	.word	0x40012c00
 8009040:	40013400 	.word	0x40013400
 8009044:	40000400 	.word	0x40000400
 8009048:	40000800 	.word	0x40000800
 800904c:	40000c00 	.word	0x40000c00

08009050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	2b00      	cmp	r3, #0
 8009070:	d020      	beq.n	80090b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d01b      	beq.n	80090b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f06f 0202 	mvn.w	r2, #2
 8009084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f998 	bl	80093d0 <HAL_TIM_IC_CaptureCallback>
 80090a0:	e005      	b.n	80090ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f98b 	bl	80093be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f99a 	bl	80093e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f003 0304 	and.w	r3, r3, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d020      	beq.n	8009100 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f003 0304 	and.w	r3, r3, #4
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01b      	beq.n	8009100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f06f 0204 	mvn.w	r2, #4
 80090d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2202      	movs	r2, #2
 80090d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f972 	bl	80093d0 <HAL_TIM_IC_CaptureCallback>
 80090ec:	e005      	b.n	80090fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f965 	bl	80093be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f974 	bl	80093e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	f003 0308 	and.w	r3, r3, #8
 8009106:	2b00      	cmp	r3, #0
 8009108:	d020      	beq.n	800914c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f003 0308 	and.w	r3, r3, #8
 8009110:	2b00      	cmp	r3, #0
 8009112:	d01b      	beq.n	800914c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f06f 0208 	mvn.w	r2, #8
 800911c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2204      	movs	r2, #4
 8009122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	f003 0303 	and.w	r3, r3, #3
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f94c 	bl	80093d0 <HAL_TIM_IC_CaptureCallback>
 8009138:	e005      	b.n	8009146 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f93f 	bl	80093be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f94e 	bl	80093e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f003 0310 	and.w	r3, r3, #16
 8009152:	2b00      	cmp	r3, #0
 8009154:	d020      	beq.n	8009198 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f003 0310 	and.w	r3, r3, #16
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01b      	beq.n	8009198 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f06f 0210 	mvn.w	r2, #16
 8009168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2208      	movs	r2, #8
 800916e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f926 	bl	80093d0 <HAL_TIM_IC_CaptureCallback>
 8009184:	e005      	b.n	8009192 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f919 	bl	80093be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f928 	bl	80093e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00c      	beq.n	80091bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d007      	beq.n	80091bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f06f 0201 	mvn.w	r2, #1
 80091b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7fe fa08 	bl	80075cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00c      	beq.n	80091e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d007      	beq.n	80091e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80091d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 faa5 	bl	800972a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00c      	beq.n	8009204 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d007      	beq.n	8009204 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80091fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f8f8 	bl	80093f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00c      	beq.n	8009228 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f003 0320 	and.w	r3, r3, #32
 8009214:	2b00      	cmp	r3, #0
 8009216:	d007      	beq.n	8009228 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f06f 0220 	mvn.w	r2, #32
 8009220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa78 	bl	8009718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009244:	2b01      	cmp	r3, #1
 8009246:	d101      	bne.n	800924c <HAL_TIM_ConfigClockSource+0x1c>
 8009248:	2302      	movs	r3, #2
 800924a:	e0b4      	b.n	80093b6 <HAL_TIM_ConfigClockSource+0x186>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2202      	movs	r2, #2
 8009258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800926a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009284:	d03e      	beq.n	8009304 <HAL_TIM_ConfigClockSource+0xd4>
 8009286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800928a:	f200 8087 	bhi.w	800939c <HAL_TIM_ConfigClockSource+0x16c>
 800928e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009292:	f000 8086 	beq.w	80093a2 <HAL_TIM_ConfigClockSource+0x172>
 8009296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800929a:	d87f      	bhi.n	800939c <HAL_TIM_ConfigClockSource+0x16c>
 800929c:	2b70      	cmp	r3, #112	@ 0x70
 800929e:	d01a      	beq.n	80092d6 <HAL_TIM_ConfigClockSource+0xa6>
 80092a0:	2b70      	cmp	r3, #112	@ 0x70
 80092a2:	d87b      	bhi.n	800939c <HAL_TIM_ConfigClockSource+0x16c>
 80092a4:	2b60      	cmp	r3, #96	@ 0x60
 80092a6:	d050      	beq.n	800934a <HAL_TIM_ConfigClockSource+0x11a>
 80092a8:	2b60      	cmp	r3, #96	@ 0x60
 80092aa:	d877      	bhi.n	800939c <HAL_TIM_ConfigClockSource+0x16c>
 80092ac:	2b50      	cmp	r3, #80	@ 0x50
 80092ae:	d03c      	beq.n	800932a <HAL_TIM_ConfigClockSource+0xfa>
 80092b0:	2b50      	cmp	r3, #80	@ 0x50
 80092b2:	d873      	bhi.n	800939c <HAL_TIM_ConfigClockSource+0x16c>
 80092b4:	2b40      	cmp	r3, #64	@ 0x40
 80092b6:	d058      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x13a>
 80092b8:	2b40      	cmp	r3, #64	@ 0x40
 80092ba:	d86f      	bhi.n	800939c <HAL_TIM_ConfigClockSource+0x16c>
 80092bc:	2b30      	cmp	r3, #48	@ 0x30
 80092be:	d064      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x15a>
 80092c0:	2b30      	cmp	r3, #48	@ 0x30
 80092c2:	d86b      	bhi.n	800939c <HAL_TIM_ConfigClockSource+0x16c>
 80092c4:	2b20      	cmp	r3, #32
 80092c6:	d060      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x15a>
 80092c8:	2b20      	cmp	r3, #32
 80092ca:	d867      	bhi.n	800939c <HAL_TIM_ConfigClockSource+0x16c>
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d05c      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x15a>
 80092d0:	2b10      	cmp	r3, #16
 80092d2:	d05a      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x15a>
 80092d4:	e062      	b.n	800939c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092e6:	f000 f98c 	bl	8009602 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80092f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	609a      	str	r2, [r3, #8]
      break;
 8009302:	e04f      	b.n	80093a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009314:	f000 f975 	bl	8009602 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	689a      	ldr	r2, [r3, #8]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009326:	609a      	str	r2, [r3, #8]
      break;
 8009328:	e03c      	b.n	80093a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009336:	461a      	mov	r2, r3
 8009338:	f000 f8ec 	bl	8009514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2150      	movs	r1, #80	@ 0x50
 8009342:	4618      	mov	r0, r3
 8009344:	f000 f943 	bl	80095ce <TIM_ITRx_SetConfig>
      break;
 8009348:	e02c      	b.n	80093a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009356:	461a      	mov	r2, r3
 8009358:	f000 f90a 	bl	8009570 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2160      	movs	r1, #96	@ 0x60
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f933 	bl	80095ce <TIM_ITRx_SetConfig>
      break;
 8009368:	e01c      	b.n	80093a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009376:	461a      	mov	r2, r3
 8009378:	f000 f8cc 	bl	8009514 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2140      	movs	r1, #64	@ 0x40
 8009382:	4618      	mov	r0, r3
 8009384:	f000 f923 	bl	80095ce <TIM_ITRx_SetConfig>
      break;
 8009388:	e00c      	b.n	80093a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4619      	mov	r1, r3
 8009394:	4610      	mov	r0, r2
 8009396:	f000 f91a 	bl	80095ce <TIM_ITRx_SetConfig>
      break;
 800939a:	e003      	b.n	80093a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
      break;
 80093a0:	e000      	b.n	80093a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80093a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bc80      	pop	{r7}
 80093ce:	4770      	bx	lr

080093d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc80      	pop	{r7}
 80093e0:	4770      	bx	lr

080093e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093ea:	bf00      	nop
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bc80      	pop	{r7}
 80093f2:	4770      	bx	lr

080093f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	bc80      	pop	{r7}
 8009404:	4770      	bx	lr
	...

08009408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a39      	ldr	r2, [pc, #228]	@ (8009500 <TIM_Base_SetConfig+0xf8>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d013      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a38      	ldr	r2, [pc, #224]	@ (8009504 <TIM_Base_SetConfig+0xfc>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d00f      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800942e:	d00b      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a35      	ldr	r2, [pc, #212]	@ (8009508 <TIM_Base_SetConfig+0x100>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d007      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a34      	ldr	r2, [pc, #208]	@ (800950c <TIM_Base_SetConfig+0x104>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d003      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a33      	ldr	r2, [pc, #204]	@ (8009510 <TIM_Base_SetConfig+0x108>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d108      	bne.n	800945a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800944e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4313      	orrs	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a28      	ldr	r2, [pc, #160]	@ (8009500 <TIM_Base_SetConfig+0xf8>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d013      	beq.n	800948a <TIM_Base_SetConfig+0x82>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a27      	ldr	r2, [pc, #156]	@ (8009504 <TIM_Base_SetConfig+0xfc>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d00f      	beq.n	800948a <TIM_Base_SetConfig+0x82>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009470:	d00b      	beq.n	800948a <TIM_Base_SetConfig+0x82>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a24      	ldr	r2, [pc, #144]	@ (8009508 <TIM_Base_SetConfig+0x100>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d007      	beq.n	800948a <TIM_Base_SetConfig+0x82>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a23      	ldr	r2, [pc, #140]	@ (800950c <TIM_Base_SetConfig+0x104>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d003      	beq.n	800948a <TIM_Base_SetConfig+0x82>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a22      	ldr	r2, [pc, #136]	@ (8009510 <TIM_Base_SetConfig+0x108>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d108      	bne.n	800949c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	4313      	orrs	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a0f      	ldr	r2, [pc, #60]	@ (8009500 <TIM_Base_SetConfig+0xf8>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d003      	beq.n	80094d0 <TIM_Base_SetConfig+0xc8>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a0e      	ldr	r2, [pc, #56]	@ (8009504 <TIM_Base_SetConfig+0xfc>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d103      	bne.n	80094d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	691a      	ldr	r2, [r3, #16]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d005      	beq.n	80094f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f023 0201 	bic.w	r2, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	611a      	str	r2, [r3, #16]
  }
}
 80094f6:	bf00      	nop
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bc80      	pop	{r7}
 80094fe:	4770      	bx	lr
 8009500:	40012c00 	.word	0x40012c00
 8009504:	40013400 	.word	0x40013400
 8009508:	40000400 	.word	0x40000400
 800950c:	40000800 	.word	0x40000800
 8009510:	40000c00 	.word	0x40000c00

08009514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	f023 0201 	bic.w	r2, r3, #1
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800953e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	4313      	orrs	r3, r2
 8009548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f023 030a 	bic.w	r3, r3, #10
 8009550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	4313      	orrs	r3, r2
 8009558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	621a      	str	r2, [r3, #32]
}
 8009566:	bf00      	nop
 8009568:	371c      	adds	r7, #28
 800956a:	46bd      	mov	sp, r7
 800956c:	bc80      	pop	{r7}
 800956e:	4770      	bx	lr

08009570 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009570:	b480      	push	{r7}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	f023 0210 	bic.w	r2, r3, #16
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800959a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	031b      	lsls	r3, r3, #12
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80095ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	011b      	lsls	r3, r3, #4
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	621a      	str	r2, [r3, #32]
}
 80095c4:	bf00      	nop
 80095c6:	371c      	adds	r7, #28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bc80      	pop	{r7}
 80095cc:	4770      	bx	lr

080095ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b085      	sub	sp, #20
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f043 0307 	orr.w	r3, r3, #7
 80095f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	609a      	str	r2, [r3, #8]
}
 80095f8:	bf00      	nop
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bc80      	pop	{r7}
 8009600:	4770      	bx	lr

08009602 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009602:	b480      	push	{r7}
 8009604:	b087      	sub	sp, #28
 8009606:	af00      	add	r7, sp, #0
 8009608:	60f8      	str	r0, [r7, #12]
 800960a:	60b9      	str	r1, [r7, #8]
 800960c:	607a      	str	r2, [r7, #4]
 800960e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800961c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	021a      	lsls	r2, r3, #8
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	431a      	orrs	r2, r3
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	4313      	orrs	r3, r2
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	4313      	orrs	r3, r2
 800962e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	609a      	str	r2, [r3, #8]
}
 8009636:	bf00      	nop
 8009638:	371c      	adds	r7, #28
 800963a:	46bd      	mov	sp, r7
 800963c:	bc80      	pop	{r7}
 800963e:	4770      	bx	lr

08009640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009650:	2b01      	cmp	r3, #1
 8009652:	d101      	bne.n	8009658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009654:	2302      	movs	r3, #2
 8009656:	e050      	b.n	80096fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2202      	movs	r2, #2
 8009664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800967e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a1b      	ldr	r2, [pc, #108]	@ (8009704 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d018      	beq.n	80096ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a19      	ldr	r2, [pc, #100]	@ (8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d013      	beq.n	80096ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ae:	d00e      	beq.n	80096ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a15      	ldr	r2, [pc, #84]	@ (800970c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d009      	beq.n	80096ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a14      	ldr	r2, [pc, #80]	@ (8009710 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d004      	beq.n	80096ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a12      	ldr	r2, [pc, #72]	@ (8009714 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d10c      	bne.n	80096e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	4313      	orrs	r3, r2
 80096de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	bc80      	pop	{r7}
 8009702:	4770      	bx	lr
 8009704:	40012c00 	.word	0x40012c00
 8009708:	40013400 	.word	0x40013400
 800970c:	40000400 	.word	0x40000400
 8009710:	40000800 	.word	0x40000800
 8009714:	40000c00 	.word	0x40000c00

08009718 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	bc80      	pop	{r7}
 8009728:	4770      	bx	lr

0800972a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800972a:	b480      	push	{r7}
 800972c:	b083      	sub	sp, #12
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009732:	bf00      	nop
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	bc80      	pop	{r7}
 800973a:	4770      	bx	lr

0800973c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e042      	b.n	80097d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7fe fa70 	bl	8007c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2224      	movs	r2, #36	@ 0x24
 800976c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800977e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fdb9 	bl	800a2f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	695a      	ldr	r2, [r3, #20]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68da      	ldr	r2, [r3, #12]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2220      	movs	r2, #32
 80097c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08a      	sub	sp, #40	@ 0x28
 80097e0:	af02      	add	r7, sp, #8
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	4613      	mov	r3, r2
 80097ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	d175      	bne.n	80098e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <HAL_UART_Transmit+0x2c>
 8009802:	88fb      	ldrh	r3, [r7, #6]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e06e      	b.n	80098ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2221      	movs	r2, #33	@ 0x21
 8009816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800981a:	f7fe fae7 	bl	8007dec <HAL_GetTick>
 800981e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	88fa      	ldrh	r2, [r7, #6]
 8009824:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009834:	d108      	bne.n	8009848 <HAL_UART_Transmit+0x6c>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d104      	bne.n	8009848 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	61bb      	str	r3, [r7, #24]
 8009846:	e003      	b.n	8009850 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800984c:	2300      	movs	r3, #0
 800984e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009850:	e02e      	b.n	80098b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2200      	movs	r2, #0
 800985a:	2180      	movs	r1, #128	@ 0x80
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 fb1e 	bl	8009e9e <UART_WaitOnFlagUntilTimeout>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d005      	beq.n	8009874 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2220      	movs	r2, #32
 800986c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e03a      	b.n	80098ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10b      	bne.n	8009892 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	3302      	adds	r3, #2
 800988e:	61bb      	str	r3, [r7, #24]
 8009890:	e007      	b.n	80098a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	781a      	ldrb	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	3301      	adds	r3, #1
 80098a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1cb      	bne.n	8009852 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2200      	movs	r2, #0
 80098c2:	2140      	movs	r1, #64	@ 0x40
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 faea 	bl	8009e9e <UART_WaitOnFlagUntilTimeout>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e006      	b.n	80098ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2220      	movs	r2, #32
 80098e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	e000      	b.n	80098ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80098e8:	2302      	movs	r3, #2
  }
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3720      	adds	r7, #32
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	4613      	mov	r3, r2
 80098fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b20      	cmp	r3, #32
 800990a:	d112      	bne.n	8009932 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <HAL_UART_Receive_IT+0x26>
 8009912:	88fb      	ldrh	r3, [r7, #6]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e00b      	b.n	8009934 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009922:	88fb      	ldrh	r3, [r7, #6]
 8009924:	461a      	mov	r2, r3
 8009926:	68b9      	ldr	r1, [r7, #8]
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 fb11 	bl	8009f50 <UART_Start_Receive_IT>
 800992e:	4603      	mov	r3, r0
 8009930:	e000      	b.n	8009934 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009932:	2302      	movs	r3, #2
  }
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b0ba      	sub	sp, #232	@ 0xe8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009962:	2300      	movs	r3, #0
 8009964:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009968:	2300      	movs	r3, #0
 800996a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800996e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009972:	f003 030f 	and.w	r3, r3, #15
 8009976:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800997a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10f      	bne.n	80099a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009986:	f003 0320 	and.w	r3, r3, #32
 800998a:	2b00      	cmp	r3, #0
 800998c:	d009      	beq.n	80099a2 <HAL_UART_IRQHandler+0x66>
 800998e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009992:	f003 0320 	and.w	r3, r3, #32
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fbee 	bl	800a17c <UART_Receive_IT>
      return;
 80099a0:	e25b      	b.n	8009e5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80099a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 80de 	beq.w	8009b68 <HAL_UART_IRQHandler+0x22c>
 80099ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d106      	bne.n	80099c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80099b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f000 80d1 	beq.w	8009b68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80099c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00b      	beq.n	80099ea <HAL_UART_IRQHandler+0xae>
 80099d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d005      	beq.n	80099ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099e2:	f043 0201 	orr.w	r2, r3, #1
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ee:	f003 0304 	and.w	r3, r3, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <HAL_UART_IRQHandler+0xd2>
 80099f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d005      	beq.n	8009a0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a06:	f043 0202 	orr.w	r2, r3, #2
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00b      	beq.n	8009a32 <HAL_UART_IRQHandler+0xf6>
 8009a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a2a:	f043 0204 	orr.w	r2, r3, #4
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a36:	f003 0308 	and.w	r3, r3, #8
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d011      	beq.n	8009a62 <HAL_UART_IRQHandler+0x126>
 8009a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a42:	f003 0320 	and.w	r3, r3, #32
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d105      	bne.n	8009a56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d005      	beq.n	8009a62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a5a:	f043 0208 	orr.w	r2, r3, #8
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 81f2 	beq.w	8009e50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a70:	f003 0320 	and.w	r3, r3, #32
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d008      	beq.n	8009a8a <HAL_UART_IRQHandler+0x14e>
 8009a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a7c:	f003 0320 	and.w	r3, r3, #32
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fb79 	bl	800a17c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	695b      	ldr	r3, [r3, #20]
 8009a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	bf14      	ite	ne
 8009a98:	2301      	movne	r3, #1
 8009a9a:	2300      	moveq	r3, #0
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aa6:	f003 0308 	and.w	r3, r3, #8
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d103      	bne.n	8009ab6 <HAL_UART_IRQHandler+0x17a>
 8009aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d04f      	beq.n	8009b56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fa83 	bl	8009fc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d041      	beq.n	8009b4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3314      	adds	r3, #20
 8009ad0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3314      	adds	r3, #20
 8009af2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009af6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009afa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009b02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009b06:	e841 2300 	strex	r3, r2, [r1]
 8009b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1d9      	bne.n	8009aca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d013      	beq.n	8009b46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b22:	4a7e      	ldr	r2, [pc, #504]	@ (8009d1c <HAL_UART_IRQHandler+0x3e0>)
 8009b24:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe fad4 	bl	80080d8 <HAL_DMA_Abort_IT>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d016      	beq.n	8009b64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009b40:	4610      	mov	r0, r2
 8009b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b44:	e00e      	b.n	8009b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7fd ff32 	bl	80079b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b4c:	e00a      	b.n	8009b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7fd ff2e 	bl	80079b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b54:	e006      	b.n	8009b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7fd ff2a 	bl	80079b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009b62:	e175      	b.n	8009e50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b64:	bf00      	nop
    return;
 8009b66:	e173      	b.n	8009e50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	f040 814f 	bne.w	8009e10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b76:	f003 0310 	and.w	r3, r3, #16
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 8148 	beq.w	8009e10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b84:	f003 0310 	and.w	r3, r3, #16
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 8141 	beq.w	8009e10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60bb      	str	r3, [r7, #8]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	60bb      	str	r3, [r7, #8]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	60bb      	str	r3, [r7, #8]
 8009ba2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 80b6 	beq.w	8009d20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009bc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 8145 	beq.w	8009e54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	f080 813e 	bcs.w	8009e54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bde:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	2b20      	cmp	r3, #32
 8009be8:	f000 8088 	beq.w	8009cfc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	330c      	adds	r3, #12
 8009bf2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009bfa:	e853 3f00 	ldrex	r3, [r3]
 8009bfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	330c      	adds	r3, #12
 8009c14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009c18:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009c1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c20:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009c24:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009c28:	e841 2300 	strex	r3, r2, [r1]
 8009c2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1d9      	bne.n	8009bec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3314      	adds	r3, #20
 8009c3e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c42:	e853 3f00 	ldrex	r3, [r3]
 8009c46:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009c48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c4a:	f023 0301 	bic.w	r3, r3, #1
 8009c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3314      	adds	r3, #20
 8009c58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c5c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c62:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c64:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c68:	e841 2300 	strex	r3, r2, [r1]
 8009c6c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e1      	bne.n	8009c38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3314      	adds	r3, #20
 8009c7a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c7e:	e853 3f00 	ldrex	r3, [r3]
 8009c82:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3314      	adds	r3, #20
 8009c94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009c98:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c9e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009ca0:	e841 2300 	strex	r3, r2, [r1]
 8009ca4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ca6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e3      	bne.n	8009c74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	330c      	adds	r3, #12
 8009cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cc4:	e853 3f00 	ldrex	r3, [r3]
 8009cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ccc:	f023 0310 	bic.w	r3, r3, #16
 8009cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	330c      	adds	r3, #12
 8009cda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009cde:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009ce0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ce4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e3      	bne.n	8009cba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe f9b3 	bl	8008062 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f8ad 	bl	8009e72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d18:	e09c      	b.n	8009e54 <HAL_UART_IRQHandler+0x518>
 8009d1a:	bf00      	nop
 8009d1c:	0800a087 	.word	0x0800a087
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f000 808e 	beq.w	8009e58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009d3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 8089 	beq.w	8009e58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	330c      	adds	r3, #12
 8009d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d50:	e853 3f00 	ldrex	r3, [r3]
 8009d54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	330c      	adds	r3, #12
 8009d66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009d6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d72:	e841 2300 	strex	r3, r2, [r1]
 8009d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1e3      	bne.n	8009d46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	3314      	adds	r3, #20
 8009d84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d88:	e853 3f00 	ldrex	r3, [r3]
 8009d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	f023 0301 	bic.w	r3, r3, #1
 8009d94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	3314      	adds	r3, #20
 8009d9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009da2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e3      	bne.n	8009d7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2220      	movs	r2, #32
 8009dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	330c      	adds	r3, #12
 8009dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	e853 3f00 	ldrex	r3, [r3]
 8009dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f023 0310 	bic.w	r3, r3, #16
 8009dda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	330c      	adds	r3, #12
 8009de4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009de8:	61fa      	str	r2, [r7, #28]
 8009dea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dec:	69b9      	ldr	r1, [r7, #24]
 8009dee:	69fa      	ldr	r2, [r7, #28]
 8009df0:	e841 2300 	strex	r3, r2, [r1]
 8009df4:	617b      	str	r3, [r7, #20]
   return(result);
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1e3      	bne.n	8009dc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2202      	movs	r2, #2
 8009e00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f832 	bl	8009e72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e0e:	e023      	b.n	8009e58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d009      	beq.n	8009e30 <HAL_UART_IRQHandler+0x4f4>
 8009e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f940 	bl	800a0ae <UART_Transmit_IT>
    return;
 8009e2e:	e014      	b.n	8009e5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00e      	beq.n	8009e5a <HAL_UART_IRQHandler+0x51e>
 8009e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d008      	beq.n	8009e5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f97f 	bl	800a14c <UART_EndTransmit_IT>
    return;
 8009e4e:	e004      	b.n	8009e5a <HAL_UART_IRQHandler+0x51e>
    return;
 8009e50:	bf00      	nop
 8009e52:	e002      	b.n	8009e5a <HAL_UART_IRQHandler+0x51e>
      return;
 8009e54:	bf00      	nop
 8009e56:	e000      	b.n	8009e5a <HAL_UART_IRQHandler+0x51e>
      return;
 8009e58:	bf00      	nop
  }
}
 8009e5a:	37e8      	adds	r7, #232	@ 0xe8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bc80      	pop	{r7}
 8009e70:	4770      	bx	lr

08009e72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b083      	sub	sp, #12
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e7e:	bf00      	nop
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bc80      	pop	{r7}
 8009e86:	4770      	bx	lr

08009e88 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr

08009e9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b086      	sub	sp, #24
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	603b      	str	r3, [r7, #0]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eae:	e03b      	b.n	8009f28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb6:	d037      	beq.n	8009f28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eb8:	f7fd ff98 	bl	8007dec <HAL_GetTick>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	6a3a      	ldr	r2, [r7, #32]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d302      	bcc.n	8009ece <UART_WaitOnFlagUntilTimeout+0x30>
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e03a      	b.n	8009f48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	f003 0304 	and.w	r3, r3, #4
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d023      	beq.n	8009f28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b80      	cmp	r3, #128	@ 0x80
 8009ee4:	d020      	beq.n	8009f28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2b40      	cmp	r3, #64	@ 0x40
 8009eea:	d01d      	beq.n	8009f28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0308 	and.w	r3, r3, #8
 8009ef6:	2b08      	cmp	r3, #8
 8009ef8:	d116      	bne.n	8009f28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009efa:	2300      	movs	r3, #0
 8009efc:	617b      	str	r3, [r7, #20]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	617b      	str	r3, [r7, #20]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 f856 	bl	8009fc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2208      	movs	r2, #8
 8009f1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e00f      	b.n	8009f48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	4013      	ands	r3, r2
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	bf0c      	ite	eq
 8009f38:	2301      	moveq	r3, #1
 8009f3a:	2300      	movne	r3, #0
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	461a      	mov	r2, r3
 8009f40:	79fb      	ldrb	r3, [r7, #7]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d0b4      	beq.n	8009eb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	88fa      	ldrh	r2, [r7, #6]
 8009f68:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	88fa      	ldrh	r2, [r7, #6]
 8009f6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2222      	movs	r2, #34	@ 0x22
 8009f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d007      	beq.n	8009f96 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68da      	ldr	r2, [r3, #12]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	695a      	ldr	r2, [r3, #20]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f042 0201 	orr.w	r2, r2, #1
 8009fa4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68da      	ldr	r2, [r3, #12]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f042 0220 	orr.w	r2, r2, #32
 8009fb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bc80      	pop	{r7}
 8009fc0:	4770      	bx	lr

08009fc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b095      	sub	sp, #84	@ 0x54
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	330c      	adds	r3, #12
 8009fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	330c      	adds	r3, #12
 8009fe8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009fea:	643a      	str	r2, [r7, #64]	@ 0x40
 8009fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ff0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e5      	bne.n	8009fca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3314      	adds	r3, #20
 800a004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	e853 3f00 	ldrex	r3, [r3]
 800a00c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	f023 0301 	bic.w	r3, r3, #1
 800a014:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3314      	adds	r3, #20
 800a01c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a01e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a020:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e5      	bne.n	8009ffe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a036:	2b01      	cmp	r3, #1
 800a038:	d119      	bne.n	800a06e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	330c      	adds	r3, #12
 800a040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	e853 3f00 	ldrex	r3, [r3]
 800a048:	60bb      	str	r3, [r7, #8]
   return(result);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	f023 0310 	bic.w	r3, r3, #16
 800a050:	647b      	str	r3, [r7, #68]	@ 0x44
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	330c      	adds	r3, #12
 800a058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a05a:	61ba      	str	r2, [r7, #24]
 800a05c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05e:	6979      	ldr	r1, [r7, #20]
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	e841 2300 	strex	r3, r2, [r1]
 800a066:	613b      	str	r3, [r7, #16]
   return(result);
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1e5      	bne.n	800a03a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2220      	movs	r2, #32
 800a072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a07c:	bf00      	nop
 800a07e:	3754      	adds	r7, #84	@ 0x54
 800a080:	46bd      	mov	sp, r7
 800a082:	bc80      	pop	{r7}
 800a084:	4770      	bx	lr

0800a086 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f7fd fc85 	bl	80079b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0a6:	bf00      	nop
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b085      	sub	sp, #20
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b21      	cmp	r3, #33	@ 0x21
 800a0c0:	d13e      	bne.n	800a140 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0ca:	d114      	bne.n	800a0f6 <UART_Transmit_IT+0x48>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d110      	bne.n	800a0f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a1b      	ldr	r3, [r3, #32]
 800a0d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	1c9a      	adds	r2, r3, #2
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	621a      	str	r2, [r3, #32]
 800a0f4:	e008      	b.n	800a108 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	1c59      	adds	r1, r3, #1
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	6211      	str	r1, [r2, #32]
 800a100:	781a      	ldrb	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	3b01      	subs	r3, #1
 800a110:	b29b      	uxth	r3, r3
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	4619      	mov	r1, r3
 800a116:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10f      	bne.n	800a13c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68da      	ldr	r2, [r3, #12]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a12a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68da      	ldr	r2, [r3, #12]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a13a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	e000      	b.n	800a142 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a140:	2302      	movs	r3, #2
  }
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	bc80      	pop	{r7}
 800a14a:	4770      	bx	lr

0800a14c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68da      	ldr	r2, [r3, #12]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a162:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2220      	movs	r2, #32
 800a168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff fe77 	bl	8009e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08c      	sub	sp, #48	@ 0x30
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b22      	cmp	r3, #34	@ 0x22
 800a18e:	f040 80ae 	bne.w	800a2ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a19a:	d117      	bne.n	800a1cc <UART_Receive_IT+0x50>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d113      	bne.n	800a1cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c4:	1c9a      	adds	r2, r3, #2
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	629a      	str	r2, [r3, #40]	@ 0x28
 800a1ca:	e026      	b.n	800a21a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1de:	d007      	beq.n	800a1f0 <UART_Receive_IT+0x74>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10a      	bne.n	800a1fe <UART_Receive_IT+0x82>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d106      	bne.n	800a1fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fa:	701a      	strb	r2, [r3, #0]
 800a1fc:	e008      	b.n	800a210 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	b2db      	uxtb	r3, r3
 800a206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a20a:	b2da      	uxtb	r2, r3
 800a20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a20e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a21e:	b29b      	uxth	r3, r3
 800a220:	3b01      	subs	r3, #1
 800a222:	b29b      	uxth	r3, r3
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	4619      	mov	r1, r3
 800a228:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d15d      	bne.n	800a2ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68da      	ldr	r2, [r3, #12]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0220 	bic.w	r2, r2, #32
 800a23c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68da      	ldr	r2, [r3, #12]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a24c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	695a      	ldr	r2, [r3, #20]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f022 0201 	bic.w	r2, r2, #1
 800a25c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2220      	movs	r2, #32
 800a262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a270:	2b01      	cmp	r3, #1
 800a272:	d135      	bne.n	800a2e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	330c      	adds	r3, #12
 800a280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	e853 3f00 	ldrex	r3, [r3]
 800a288:	613b      	str	r3, [r7, #16]
   return(result);
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	f023 0310 	bic.w	r3, r3, #16
 800a290:	627b      	str	r3, [r7, #36]	@ 0x24
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	330c      	adds	r3, #12
 800a298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a29a:	623a      	str	r2, [r7, #32]
 800a29c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29e:	69f9      	ldr	r1, [r7, #28]
 800a2a0:	6a3a      	ldr	r2, [r7, #32]
 800a2a2:	e841 2300 	strex	r3, r2, [r1]
 800a2a6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1e5      	bne.n	800a27a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0310 	and.w	r3, r3, #16
 800a2b8:	2b10      	cmp	r3, #16
 800a2ba:	d10a      	bne.n	800a2d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f7ff fdca 	bl	8009e72 <HAL_UARTEx_RxEventCallback>
 800a2de:	e002      	b.n	800a2e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7fd f891 	bl	8007408 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e002      	b.n	800a2f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e000      	b.n	800a2f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a2ee:	2302      	movs	r3, #2
  }
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3730      	adds	r7, #48	@ 0x30
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68da      	ldr	r2, [r3, #12]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	430a      	orrs	r2, r1
 800a314:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	689a      	ldr	r2, [r3, #8]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	431a      	orrs	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	695b      	ldr	r3, [r3, #20]
 800a324:	4313      	orrs	r3, r2
 800a326:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a332:	f023 030c 	bic.w	r3, r3, #12
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	6812      	ldr	r2, [r2, #0]
 800a33a:	68b9      	ldr	r1, [r7, #8]
 800a33c:	430b      	orrs	r3, r1
 800a33e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	699a      	ldr	r2, [r3, #24]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a2c      	ldr	r2, [pc, #176]	@ (800a40c <UART_SetConfig+0x114>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d103      	bne.n	800a368 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a360:	f7fe fd94 	bl	8008e8c <HAL_RCC_GetPCLK2Freq>
 800a364:	60f8      	str	r0, [r7, #12]
 800a366:	e002      	b.n	800a36e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a368:	f7fe fd7c 	bl	8008e64 <HAL_RCC_GetPCLK1Freq>
 800a36c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	4613      	mov	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	009a      	lsls	r2, r3, #2
 800a378:	441a      	add	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	fbb2 f3f3 	udiv	r3, r2, r3
 800a384:	4a22      	ldr	r2, [pc, #136]	@ (800a410 <UART_SetConfig+0x118>)
 800a386:	fba2 2303 	umull	r2, r3, r2, r3
 800a38a:	095b      	lsrs	r3, r3, #5
 800a38c:	0119      	lsls	r1, r3, #4
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	4613      	mov	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	009a      	lsls	r2, r3, #2
 800a398:	441a      	add	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a410 <UART_SetConfig+0x118>)
 800a3a6:	fba3 0302 	umull	r0, r3, r3, r2
 800a3aa:	095b      	lsrs	r3, r3, #5
 800a3ac:	2064      	movs	r0, #100	@ 0x64
 800a3ae:	fb00 f303 	mul.w	r3, r0, r3
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	3332      	adds	r3, #50	@ 0x32
 800a3b8:	4a15      	ldr	r2, [pc, #84]	@ (800a410 <UART_SetConfig+0x118>)
 800a3ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a3be:	095b      	lsrs	r3, r3, #5
 800a3c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3c4:	4419      	add	r1, r3
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009a      	lsls	r2, r3, #2
 800a3d0:	441a      	add	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a410 <UART_SetConfig+0x118>)
 800a3de:	fba3 0302 	umull	r0, r3, r3, r2
 800a3e2:	095b      	lsrs	r3, r3, #5
 800a3e4:	2064      	movs	r0, #100	@ 0x64
 800a3e6:	fb00 f303 	mul.w	r3, r0, r3
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	011b      	lsls	r3, r3, #4
 800a3ee:	3332      	adds	r3, #50	@ 0x32
 800a3f0:	4a07      	ldr	r2, [pc, #28]	@ (800a410 <UART_SetConfig+0x118>)
 800a3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3f6:	095b      	lsrs	r3, r3, #5
 800a3f8:	f003 020f 	and.w	r2, r3, #15
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	440a      	add	r2, r1
 800a402:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a404:	bf00      	nop
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	40013800 	.word	0x40013800
 800a410:	51eb851f 	.word	0x51eb851f

0800a414 <siprintf>:
 800a414:	b40e      	push	{r1, r2, r3}
 800a416:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a41a:	b500      	push	{lr}
 800a41c:	b09c      	sub	sp, #112	@ 0x70
 800a41e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a420:	9002      	str	r0, [sp, #8]
 800a422:	9006      	str	r0, [sp, #24]
 800a424:	9107      	str	r1, [sp, #28]
 800a426:	9104      	str	r1, [sp, #16]
 800a428:	4808      	ldr	r0, [pc, #32]	@ (800a44c <siprintf+0x38>)
 800a42a:	4909      	ldr	r1, [pc, #36]	@ (800a450 <siprintf+0x3c>)
 800a42c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a430:	9105      	str	r1, [sp, #20]
 800a432:	6800      	ldr	r0, [r0, #0]
 800a434:	a902      	add	r1, sp, #8
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	f000 f9a0 	bl	800a77c <_svfiprintf_r>
 800a43c:	2200      	movs	r2, #0
 800a43e:	9b02      	ldr	r3, [sp, #8]
 800a440:	701a      	strb	r2, [r3, #0]
 800a442:	b01c      	add	sp, #112	@ 0x70
 800a444:	f85d eb04 	ldr.w	lr, [sp], #4
 800a448:	b003      	add	sp, #12
 800a44a:	4770      	bx	lr
 800a44c:	2000001c 	.word	0x2000001c
 800a450:	ffff0208 	.word	0xffff0208

0800a454 <memset>:
 800a454:	4603      	mov	r3, r0
 800a456:	4402      	add	r2, r0
 800a458:	4293      	cmp	r3, r2
 800a45a:	d100      	bne.n	800a45e <memset+0xa>
 800a45c:	4770      	bx	lr
 800a45e:	f803 1b01 	strb.w	r1, [r3], #1
 800a462:	e7f9      	b.n	800a458 <memset+0x4>

0800a464 <__errno>:
 800a464:	4b01      	ldr	r3, [pc, #4]	@ (800a46c <__errno+0x8>)
 800a466:	6818      	ldr	r0, [r3, #0]
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	2000001c 	.word	0x2000001c

0800a470 <__libc_init_array>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	2600      	movs	r6, #0
 800a474:	4d0c      	ldr	r5, [pc, #48]	@ (800a4a8 <__libc_init_array+0x38>)
 800a476:	4c0d      	ldr	r4, [pc, #52]	@ (800a4ac <__libc_init_array+0x3c>)
 800a478:	1b64      	subs	r4, r4, r5
 800a47a:	10a4      	asrs	r4, r4, #2
 800a47c:	42a6      	cmp	r6, r4
 800a47e:	d109      	bne.n	800a494 <__libc_init_array+0x24>
 800a480:	f000 fc78 	bl	800ad74 <_init>
 800a484:	2600      	movs	r6, #0
 800a486:	4d0a      	ldr	r5, [pc, #40]	@ (800a4b0 <__libc_init_array+0x40>)
 800a488:	4c0a      	ldr	r4, [pc, #40]	@ (800a4b4 <__libc_init_array+0x44>)
 800a48a:	1b64      	subs	r4, r4, r5
 800a48c:	10a4      	asrs	r4, r4, #2
 800a48e:	42a6      	cmp	r6, r4
 800a490:	d105      	bne.n	800a49e <__libc_init_array+0x2e>
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	f855 3b04 	ldr.w	r3, [r5], #4
 800a498:	4798      	blx	r3
 800a49a:	3601      	adds	r6, #1
 800a49c:	e7ee      	b.n	800a47c <__libc_init_array+0xc>
 800a49e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4a2:	4798      	blx	r3
 800a4a4:	3601      	adds	r6, #1
 800a4a6:	e7f2      	b.n	800a48e <__libc_init_array+0x1e>
 800a4a8:	0800ddc4 	.word	0x0800ddc4
 800a4ac:	0800ddc4 	.word	0x0800ddc4
 800a4b0:	0800ddc4 	.word	0x0800ddc4
 800a4b4:	0800ddc8 	.word	0x0800ddc8

0800a4b8 <__retarget_lock_acquire_recursive>:
 800a4b8:	4770      	bx	lr

0800a4ba <__retarget_lock_release_recursive>:
 800a4ba:	4770      	bx	lr

0800a4bc <memcpy>:
 800a4bc:	440a      	add	r2, r1
 800a4be:	4291      	cmp	r1, r2
 800a4c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4c4:	d100      	bne.n	800a4c8 <memcpy+0xc>
 800a4c6:	4770      	bx	lr
 800a4c8:	b510      	push	{r4, lr}
 800a4ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ce:	4291      	cmp	r1, r2
 800a4d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4d4:	d1f9      	bne.n	800a4ca <memcpy+0xe>
 800a4d6:	bd10      	pop	{r4, pc}

0800a4d8 <_free_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4605      	mov	r5, r0
 800a4dc:	2900      	cmp	r1, #0
 800a4de:	d040      	beq.n	800a562 <_free_r+0x8a>
 800a4e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4e4:	1f0c      	subs	r4, r1, #4
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	bfb8      	it	lt
 800a4ea:	18e4      	addlt	r4, r4, r3
 800a4ec:	f000 f8de 	bl	800a6ac <__malloc_lock>
 800a4f0:	4a1c      	ldr	r2, [pc, #112]	@ (800a564 <_free_r+0x8c>)
 800a4f2:	6813      	ldr	r3, [r2, #0]
 800a4f4:	b933      	cbnz	r3, 800a504 <_free_r+0x2c>
 800a4f6:	6063      	str	r3, [r4, #4]
 800a4f8:	6014      	str	r4, [r2, #0]
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a500:	f000 b8da 	b.w	800a6b8 <__malloc_unlock>
 800a504:	42a3      	cmp	r3, r4
 800a506:	d908      	bls.n	800a51a <_free_r+0x42>
 800a508:	6820      	ldr	r0, [r4, #0]
 800a50a:	1821      	adds	r1, r4, r0
 800a50c:	428b      	cmp	r3, r1
 800a50e:	bf01      	itttt	eq
 800a510:	6819      	ldreq	r1, [r3, #0]
 800a512:	685b      	ldreq	r3, [r3, #4]
 800a514:	1809      	addeq	r1, r1, r0
 800a516:	6021      	streq	r1, [r4, #0]
 800a518:	e7ed      	b.n	800a4f6 <_free_r+0x1e>
 800a51a:	461a      	mov	r2, r3
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	b10b      	cbz	r3, 800a524 <_free_r+0x4c>
 800a520:	42a3      	cmp	r3, r4
 800a522:	d9fa      	bls.n	800a51a <_free_r+0x42>
 800a524:	6811      	ldr	r1, [r2, #0]
 800a526:	1850      	adds	r0, r2, r1
 800a528:	42a0      	cmp	r0, r4
 800a52a:	d10b      	bne.n	800a544 <_free_r+0x6c>
 800a52c:	6820      	ldr	r0, [r4, #0]
 800a52e:	4401      	add	r1, r0
 800a530:	1850      	adds	r0, r2, r1
 800a532:	4283      	cmp	r3, r0
 800a534:	6011      	str	r1, [r2, #0]
 800a536:	d1e0      	bne.n	800a4fa <_free_r+0x22>
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	4408      	add	r0, r1
 800a53e:	6010      	str	r0, [r2, #0]
 800a540:	6053      	str	r3, [r2, #4]
 800a542:	e7da      	b.n	800a4fa <_free_r+0x22>
 800a544:	d902      	bls.n	800a54c <_free_r+0x74>
 800a546:	230c      	movs	r3, #12
 800a548:	602b      	str	r3, [r5, #0]
 800a54a:	e7d6      	b.n	800a4fa <_free_r+0x22>
 800a54c:	6820      	ldr	r0, [r4, #0]
 800a54e:	1821      	adds	r1, r4, r0
 800a550:	428b      	cmp	r3, r1
 800a552:	bf01      	itttt	eq
 800a554:	6819      	ldreq	r1, [r3, #0]
 800a556:	685b      	ldreq	r3, [r3, #4]
 800a558:	1809      	addeq	r1, r1, r0
 800a55a:	6021      	streq	r1, [r4, #0]
 800a55c:	6063      	str	r3, [r4, #4]
 800a55e:	6054      	str	r4, [r2, #4]
 800a560:	e7cb      	b.n	800a4fa <_free_r+0x22>
 800a562:	bd38      	pop	{r3, r4, r5, pc}
 800a564:	20001874 	.word	0x20001874

0800a568 <sbrk_aligned>:
 800a568:	b570      	push	{r4, r5, r6, lr}
 800a56a:	4e0f      	ldr	r6, [pc, #60]	@ (800a5a8 <sbrk_aligned+0x40>)
 800a56c:	460c      	mov	r4, r1
 800a56e:	6831      	ldr	r1, [r6, #0]
 800a570:	4605      	mov	r5, r0
 800a572:	b911      	cbnz	r1, 800a57a <sbrk_aligned+0x12>
 800a574:	f000 fbaa 	bl	800accc <_sbrk_r>
 800a578:	6030      	str	r0, [r6, #0]
 800a57a:	4621      	mov	r1, r4
 800a57c:	4628      	mov	r0, r5
 800a57e:	f000 fba5 	bl	800accc <_sbrk_r>
 800a582:	1c43      	adds	r3, r0, #1
 800a584:	d103      	bne.n	800a58e <sbrk_aligned+0x26>
 800a586:	f04f 34ff 	mov.w	r4, #4294967295
 800a58a:	4620      	mov	r0, r4
 800a58c:	bd70      	pop	{r4, r5, r6, pc}
 800a58e:	1cc4      	adds	r4, r0, #3
 800a590:	f024 0403 	bic.w	r4, r4, #3
 800a594:	42a0      	cmp	r0, r4
 800a596:	d0f8      	beq.n	800a58a <sbrk_aligned+0x22>
 800a598:	1a21      	subs	r1, r4, r0
 800a59a:	4628      	mov	r0, r5
 800a59c:	f000 fb96 	bl	800accc <_sbrk_r>
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d1f2      	bne.n	800a58a <sbrk_aligned+0x22>
 800a5a4:	e7ef      	b.n	800a586 <sbrk_aligned+0x1e>
 800a5a6:	bf00      	nop
 800a5a8:	20001870 	.word	0x20001870

0800a5ac <_malloc_r>:
 800a5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b0:	1ccd      	adds	r5, r1, #3
 800a5b2:	f025 0503 	bic.w	r5, r5, #3
 800a5b6:	3508      	adds	r5, #8
 800a5b8:	2d0c      	cmp	r5, #12
 800a5ba:	bf38      	it	cc
 800a5bc:	250c      	movcc	r5, #12
 800a5be:	2d00      	cmp	r5, #0
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	db01      	blt.n	800a5c8 <_malloc_r+0x1c>
 800a5c4:	42a9      	cmp	r1, r5
 800a5c6:	d904      	bls.n	800a5d2 <_malloc_r+0x26>
 800a5c8:	230c      	movs	r3, #12
 800a5ca:	6033      	str	r3, [r6, #0]
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6a8 <_malloc_r+0xfc>
 800a5d6:	f000 f869 	bl	800a6ac <__malloc_lock>
 800a5da:	f8d8 3000 	ldr.w	r3, [r8]
 800a5de:	461c      	mov	r4, r3
 800a5e0:	bb44      	cbnz	r4, 800a634 <_malloc_r+0x88>
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	f7ff ffbf 	bl	800a568 <sbrk_aligned>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	d158      	bne.n	800a6a2 <_malloc_r+0xf6>
 800a5f0:	f8d8 4000 	ldr.w	r4, [r8]
 800a5f4:	4627      	mov	r7, r4
 800a5f6:	2f00      	cmp	r7, #0
 800a5f8:	d143      	bne.n	800a682 <_malloc_r+0xd6>
 800a5fa:	2c00      	cmp	r4, #0
 800a5fc:	d04b      	beq.n	800a696 <_malloc_r+0xea>
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	4639      	mov	r1, r7
 800a602:	4630      	mov	r0, r6
 800a604:	eb04 0903 	add.w	r9, r4, r3
 800a608:	f000 fb60 	bl	800accc <_sbrk_r>
 800a60c:	4581      	cmp	r9, r0
 800a60e:	d142      	bne.n	800a696 <_malloc_r+0xea>
 800a610:	6821      	ldr	r1, [r4, #0]
 800a612:	4630      	mov	r0, r6
 800a614:	1a6d      	subs	r5, r5, r1
 800a616:	4629      	mov	r1, r5
 800a618:	f7ff ffa6 	bl	800a568 <sbrk_aligned>
 800a61c:	3001      	adds	r0, #1
 800a61e:	d03a      	beq.n	800a696 <_malloc_r+0xea>
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	442b      	add	r3, r5
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	f8d8 3000 	ldr.w	r3, [r8]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	bb62      	cbnz	r2, 800a688 <_malloc_r+0xdc>
 800a62e:	f8c8 7000 	str.w	r7, [r8]
 800a632:	e00f      	b.n	800a654 <_malloc_r+0xa8>
 800a634:	6822      	ldr	r2, [r4, #0]
 800a636:	1b52      	subs	r2, r2, r5
 800a638:	d420      	bmi.n	800a67c <_malloc_r+0xd0>
 800a63a:	2a0b      	cmp	r2, #11
 800a63c:	d917      	bls.n	800a66e <_malloc_r+0xc2>
 800a63e:	1961      	adds	r1, r4, r5
 800a640:	42a3      	cmp	r3, r4
 800a642:	6025      	str	r5, [r4, #0]
 800a644:	bf18      	it	ne
 800a646:	6059      	strne	r1, [r3, #4]
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	bf08      	it	eq
 800a64c:	f8c8 1000 	streq.w	r1, [r8]
 800a650:	5162      	str	r2, [r4, r5]
 800a652:	604b      	str	r3, [r1, #4]
 800a654:	4630      	mov	r0, r6
 800a656:	f000 f82f 	bl	800a6b8 <__malloc_unlock>
 800a65a:	f104 000b 	add.w	r0, r4, #11
 800a65e:	1d23      	adds	r3, r4, #4
 800a660:	f020 0007 	bic.w	r0, r0, #7
 800a664:	1ac2      	subs	r2, r0, r3
 800a666:	bf1c      	itt	ne
 800a668:	1a1b      	subne	r3, r3, r0
 800a66a:	50a3      	strne	r3, [r4, r2]
 800a66c:	e7af      	b.n	800a5ce <_malloc_r+0x22>
 800a66e:	6862      	ldr	r2, [r4, #4]
 800a670:	42a3      	cmp	r3, r4
 800a672:	bf0c      	ite	eq
 800a674:	f8c8 2000 	streq.w	r2, [r8]
 800a678:	605a      	strne	r2, [r3, #4]
 800a67a:	e7eb      	b.n	800a654 <_malloc_r+0xa8>
 800a67c:	4623      	mov	r3, r4
 800a67e:	6864      	ldr	r4, [r4, #4]
 800a680:	e7ae      	b.n	800a5e0 <_malloc_r+0x34>
 800a682:	463c      	mov	r4, r7
 800a684:	687f      	ldr	r7, [r7, #4]
 800a686:	e7b6      	b.n	800a5f6 <_malloc_r+0x4a>
 800a688:	461a      	mov	r2, r3
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	42a3      	cmp	r3, r4
 800a68e:	d1fb      	bne.n	800a688 <_malloc_r+0xdc>
 800a690:	2300      	movs	r3, #0
 800a692:	6053      	str	r3, [r2, #4]
 800a694:	e7de      	b.n	800a654 <_malloc_r+0xa8>
 800a696:	230c      	movs	r3, #12
 800a698:	4630      	mov	r0, r6
 800a69a:	6033      	str	r3, [r6, #0]
 800a69c:	f000 f80c 	bl	800a6b8 <__malloc_unlock>
 800a6a0:	e794      	b.n	800a5cc <_malloc_r+0x20>
 800a6a2:	6005      	str	r5, [r0, #0]
 800a6a4:	e7d6      	b.n	800a654 <_malloc_r+0xa8>
 800a6a6:	bf00      	nop
 800a6a8:	20001874 	.word	0x20001874

0800a6ac <__malloc_lock>:
 800a6ac:	4801      	ldr	r0, [pc, #4]	@ (800a6b4 <__malloc_lock+0x8>)
 800a6ae:	f7ff bf03 	b.w	800a4b8 <__retarget_lock_acquire_recursive>
 800a6b2:	bf00      	nop
 800a6b4:	2000186c 	.word	0x2000186c

0800a6b8 <__malloc_unlock>:
 800a6b8:	4801      	ldr	r0, [pc, #4]	@ (800a6c0 <__malloc_unlock+0x8>)
 800a6ba:	f7ff befe 	b.w	800a4ba <__retarget_lock_release_recursive>
 800a6be:	bf00      	nop
 800a6c0:	2000186c 	.word	0x2000186c

0800a6c4 <__ssputs_r>:
 800a6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c8:	461f      	mov	r7, r3
 800a6ca:	688e      	ldr	r6, [r1, #8]
 800a6cc:	4682      	mov	sl, r0
 800a6ce:	42be      	cmp	r6, r7
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	4690      	mov	r8, r2
 800a6d4:	680b      	ldr	r3, [r1, #0]
 800a6d6:	d82d      	bhi.n	800a734 <__ssputs_r+0x70>
 800a6d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6e0:	d026      	beq.n	800a730 <__ssputs_r+0x6c>
 800a6e2:	6965      	ldr	r5, [r4, #20]
 800a6e4:	6909      	ldr	r1, [r1, #16]
 800a6e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6ea:	eba3 0901 	sub.w	r9, r3, r1
 800a6ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6f2:	1c7b      	adds	r3, r7, #1
 800a6f4:	444b      	add	r3, r9
 800a6f6:	106d      	asrs	r5, r5, #1
 800a6f8:	429d      	cmp	r5, r3
 800a6fa:	bf38      	it	cc
 800a6fc:	461d      	movcc	r5, r3
 800a6fe:	0553      	lsls	r3, r2, #21
 800a700:	d527      	bpl.n	800a752 <__ssputs_r+0x8e>
 800a702:	4629      	mov	r1, r5
 800a704:	f7ff ff52 	bl	800a5ac <_malloc_r>
 800a708:	4606      	mov	r6, r0
 800a70a:	b360      	cbz	r0, 800a766 <__ssputs_r+0xa2>
 800a70c:	464a      	mov	r2, r9
 800a70e:	6921      	ldr	r1, [r4, #16]
 800a710:	f7ff fed4 	bl	800a4bc <memcpy>
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a71a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a71e:	81a3      	strh	r3, [r4, #12]
 800a720:	6126      	str	r6, [r4, #16]
 800a722:	444e      	add	r6, r9
 800a724:	6026      	str	r6, [r4, #0]
 800a726:	463e      	mov	r6, r7
 800a728:	6165      	str	r5, [r4, #20]
 800a72a:	eba5 0509 	sub.w	r5, r5, r9
 800a72e:	60a5      	str	r5, [r4, #8]
 800a730:	42be      	cmp	r6, r7
 800a732:	d900      	bls.n	800a736 <__ssputs_r+0x72>
 800a734:	463e      	mov	r6, r7
 800a736:	4632      	mov	r2, r6
 800a738:	4641      	mov	r1, r8
 800a73a:	6820      	ldr	r0, [r4, #0]
 800a73c:	f000 faac 	bl	800ac98 <memmove>
 800a740:	2000      	movs	r0, #0
 800a742:	68a3      	ldr	r3, [r4, #8]
 800a744:	1b9b      	subs	r3, r3, r6
 800a746:	60a3      	str	r3, [r4, #8]
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	4433      	add	r3, r6
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a752:	462a      	mov	r2, r5
 800a754:	f000 fad8 	bl	800ad08 <_realloc_r>
 800a758:	4606      	mov	r6, r0
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d1e0      	bne.n	800a720 <__ssputs_r+0x5c>
 800a75e:	4650      	mov	r0, sl
 800a760:	6921      	ldr	r1, [r4, #16]
 800a762:	f7ff feb9 	bl	800a4d8 <_free_r>
 800a766:	230c      	movs	r3, #12
 800a768:	f8ca 3000 	str.w	r3, [sl]
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	f04f 30ff 	mov.w	r0, #4294967295
 800a772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a776:	81a3      	strh	r3, [r4, #12]
 800a778:	e7e9      	b.n	800a74e <__ssputs_r+0x8a>
	...

0800a77c <_svfiprintf_r>:
 800a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	4698      	mov	r8, r3
 800a782:	898b      	ldrh	r3, [r1, #12]
 800a784:	4607      	mov	r7, r0
 800a786:	061b      	lsls	r3, r3, #24
 800a788:	460d      	mov	r5, r1
 800a78a:	4614      	mov	r4, r2
 800a78c:	b09d      	sub	sp, #116	@ 0x74
 800a78e:	d510      	bpl.n	800a7b2 <_svfiprintf_r+0x36>
 800a790:	690b      	ldr	r3, [r1, #16]
 800a792:	b973      	cbnz	r3, 800a7b2 <_svfiprintf_r+0x36>
 800a794:	2140      	movs	r1, #64	@ 0x40
 800a796:	f7ff ff09 	bl	800a5ac <_malloc_r>
 800a79a:	6028      	str	r0, [r5, #0]
 800a79c:	6128      	str	r0, [r5, #16]
 800a79e:	b930      	cbnz	r0, 800a7ae <_svfiprintf_r+0x32>
 800a7a0:	230c      	movs	r3, #12
 800a7a2:	603b      	str	r3, [r7, #0]
 800a7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a8:	b01d      	add	sp, #116	@ 0x74
 800a7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ae:	2340      	movs	r3, #64	@ 0x40
 800a7b0:	616b      	str	r3, [r5, #20]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7b6:	2320      	movs	r3, #32
 800a7b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7bc:	2330      	movs	r3, #48	@ 0x30
 800a7be:	f04f 0901 	mov.w	r9, #1
 800a7c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7c6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a960 <_svfiprintf_r+0x1e4>
 800a7ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7ce:	4623      	mov	r3, r4
 800a7d0:	469a      	mov	sl, r3
 800a7d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7d6:	b10a      	cbz	r2, 800a7dc <_svfiprintf_r+0x60>
 800a7d8:	2a25      	cmp	r2, #37	@ 0x25
 800a7da:	d1f9      	bne.n	800a7d0 <_svfiprintf_r+0x54>
 800a7dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7e0:	d00b      	beq.n	800a7fa <_svfiprintf_r+0x7e>
 800a7e2:	465b      	mov	r3, fp
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4629      	mov	r1, r5
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f7ff ff6b 	bl	800a6c4 <__ssputs_r>
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	f000 80a7 	beq.w	800a942 <_svfiprintf_r+0x1c6>
 800a7f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7f6:	445a      	add	r2, fp
 800a7f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 809f 	beq.w	800a942 <_svfiprintf_r+0x1c6>
 800a804:	2300      	movs	r3, #0
 800a806:	f04f 32ff 	mov.w	r2, #4294967295
 800a80a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a80e:	f10a 0a01 	add.w	sl, sl, #1
 800a812:	9304      	str	r3, [sp, #16]
 800a814:	9307      	str	r3, [sp, #28]
 800a816:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a81a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a81c:	4654      	mov	r4, sl
 800a81e:	2205      	movs	r2, #5
 800a820:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a824:	484e      	ldr	r0, [pc, #312]	@ (800a960 <_svfiprintf_r+0x1e4>)
 800a826:	f000 fa61 	bl	800acec <memchr>
 800a82a:	9a04      	ldr	r2, [sp, #16]
 800a82c:	b9d8      	cbnz	r0, 800a866 <_svfiprintf_r+0xea>
 800a82e:	06d0      	lsls	r0, r2, #27
 800a830:	bf44      	itt	mi
 800a832:	2320      	movmi	r3, #32
 800a834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a838:	0711      	lsls	r1, r2, #28
 800a83a:	bf44      	itt	mi
 800a83c:	232b      	movmi	r3, #43	@ 0x2b
 800a83e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a842:	f89a 3000 	ldrb.w	r3, [sl]
 800a846:	2b2a      	cmp	r3, #42	@ 0x2a
 800a848:	d015      	beq.n	800a876 <_svfiprintf_r+0xfa>
 800a84a:	4654      	mov	r4, sl
 800a84c:	2000      	movs	r0, #0
 800a84e:	f04f 0c0a 	mov.w	ip, #10
 800a852:	9a07      	ldr	r2, [sp, #28]
 800a854:	4621      	mov	r1, r4
 800a856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a85a:	3b30      	subs	r3, #48	@ 0x30
 800a85c:	2b09      	cmp	r3, #9
 800a85e:	d94b      	bls.n	800a8f8 <_svfiprintf_r+0x17c>
 800a860:	b1b0      	cbz	r0, 800a890 <_svfiprintf_r+0x114>
 800a862:	9207      	str	r2, [sp, #28]
 800a864:	e014      	b.n	800a890 <_svfiprintf_r+0x114>
 800a866:	eba0 0308 	sub.w	r3, r0, r8
 800a86a:	fa09 f303 	lsl.w	r3, r9, r3
 800a86e:	4313      	orrs	r3, r2
 800a870:	46a2      	mov	sl, r4
 800a872:	9304      	str	r3, [sp, #16]
 800a874:	e7d2      	b.n	800a81c <_svfiprintf_r+0xa0>
 800a876:	9b03      	ldr	r3, [sp, #12]
 800a878:	1d19      	adds	r1, r3, #4
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	9103      	str	r1, [sp, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bfbb      	ittet	lt
 800a882:	425b      	neglt	r3, r3
 800a884:	f042 0202 	orrlt.w	r2, r2, #2
 800a888:	9307      	strge	r3, [sp, #28]
 800a88a:	9307      	strlt	r3, [sp, #28]
 800a88c:	bfb8      	it	lt
 800a88e:	9204      	strlt	r2, [sp, #16]
 800a890:	7823      	ldrb	r3, [r4, #0]
 800a892:	2b2e      	cmp	r3, #46	@ 0x2e
 800a894:	d10a      	bne.n	800a8ac <_svfiprintf_r+0x130>
 800a896:	7863      	ldrb	r3, [r4, #1]
 800a898:	2b2a      	cmp	r3, #42	@ 0x2a
 800a89a:	d132      	bne.n	800a902 <_svfiprintf_r+0x186>
 800a89c:	9b03      	ldr	r3, [sp, #12]
 800a89e:	3402      	adds	r4, #2
 800a8a0:	1d1a      	adds	r2, r3, #4
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	9203      	str	r2, [sp, #12]
 800a8a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8aa:	9305      	str	r3, [sp, #20]
 800a8ac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a964 <_svfiprintf_r+0x1e8>
 800a8b0:	2203      	movs	r2, #3
 800a8b2:	4650      	mov	r0, sl
 800a8b4:	7821      	ldrb	r1, [r4, #0]
 800a8b6:	f000 fa19 	bl	800acec <memchr>
 800a8ba:	b138      	cbz	r0, 800a8cc <_svfiprintf_r+0x150>
 800a8bc:	2240      	movs	r2, #64	@ 0x40
 800a8be:	9b04      	ldr	r3, [sp, #16]
 800a8c0:	eba0 000a 	sub.w	r0, r0, sl
 800a8c4:	4082      	lsls	r2, r0
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	3401      	adds	r4, #1
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d0:	2206      	movs	r2, #6
 800a8d2:	4825      	ldr	r0, [pc, #148]	@ (800a968 <_svfiprintf_r+0x1ec>)
 800a8d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8d8:	f000 fa08 	bl	800acec <memchr>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d036      	beq.n	800a94e <_svfiprintf_r+0x1d2>
 800a8e0:	4b22      	ldr	r3, [pc, #136]	@ (800a96c <_svfiprintf_r+0x1f0>)
 800a8e2:	bb1b      	cbnz	r3, 800a92c <_svfiprintf_r+0x1b0>
 800a8e4:	9b03      	ldr	r3, [sp, #12]
 800a8e6:	3307      	adds	r3, #7
 800a8e8:	f023 0307 	bic.w	r3, r3, #7
 800a8ec:	3308      	adds	r3, #8
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8f2:	4433      	add	r3, r6
 800a8f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8f6:	e76a      	b.n	800a7ce <_svfiprintf_r+0x52>
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a900:	e7a8      	b.n	800a854 <_svfiprintf_r+0xd8>
 800a902:	2300      	movs	r3, #0
 800a904:	f04f 0c0a 	mov.w	ip, #10
 800a908:	4619      	mov	r1, r3
 800a90a:	3401      	adds	r4, #1
 800a90c:	9305      	str	r3, [sp, #20]
 800a90e:	4620      	mov	r0, r4
 800a910:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a914:	3a30      	subs	r2, #48	@ 0x30
 800a916:	2a09      	cmp	r2, #9
 800a918:	d903      	bls.n	800a922 <_svfiprintf_r+0x1a6>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d0c6      	beq.n	800a8ac <_svfiprintf_r+0x130>
 800a91e:	9105      	str	r1, [sp, #20]
 800a920:	e7c4      	b.n	800a8ac <_svfiprintf_r+0x130>
 800a922:	4604      	mov	r4, r0
 800a924:	2301      	movs	r3, #1
 800a926:	fb0c 2101 	mla	r1, ip, r1, r2
 800a92a:	e7f0      	b.n	800a90e <_svfiprintf_r+0x192>
 800a92c:	ab03      	add	r3, sp, #12
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	462a      	mov	r2, r5
 800a932:	4638      	mov	r0, r7
 800a934:	4b0e      	ldr	r3, [pc, #56]	@ (800a970 <_svfiprintf_r+0x1f4>)
 800a936:	a904      	add	r1, sp, #16
 800a938:	f3af 8000 	nop.w
 800a93c:	1c42      	adds	r2, r0, #1
 800a93e:	4606      	mov	r6, r0
 800a940:	d1d6      	bne.n	800a8f0 <_svfiprintf_r+0x174>
 800a942:	89ab      	ldrh	r3, [r5, #12]
 800a944:	065b      	lsls	r3, r3, #25
 800a946:	f53f af2d 	bmi.w	800a7a4 <_svfiprintf_r+0x28>
 800a94a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a94c:	e72c      	b.n	800a7a8 <_svfiprintf_r+0x2c>
 800a94e:	ab03      	add	r3, sp, #12
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	462a      	mov	r2, r5
 800a954:	4638      	mov	r0, r7
 800a956:	4b06      	ldr	r3, [pc, #24]	@ (800a970 <_svfiprintf_r+0x1f4>)
 800a958:	a904      	add	r1, sp, #16
 800a95a:	f000 f87d 	bl	800aa58 <_printf_i>
 800a95e:	e7ed      	b.n	800a93c <_svfiprintf_r+0x1c0>
 800a960:	0800dd8e 	.word	0x0800dd8e
 800a964:	0800dd94 	.word	0x0800dd94
 800a968:	0800dd98 	.word	0x0800dd98
 800a96c:	00000000 	.word	0x00000000
 800a970:	0800a6c5 	.word	0x0800a6c5

0800a974 <_printf_common>:
 800a974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a978:	4616      	mov	r6, r2
 800a97a:	4698      	mov	r8, r3
 800a97c:	688a      	ldr	r2, [r1, #8]
 800a97e:	690b      	ldr	r3, [r1, #16]
 800a980:	4607      	mov	r7, r0
 800a982:	4293      	cmp	r3, r2
 800a984:	bfb8      	it	lt
 800a986:	4613      	movlt	r3, r2
 800a988:	6033      	str	r3, [r6, #0]
 800a98a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a98e:	460c      	mov	r4, r1
 800a990:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a994:	b10a      	cbz	r2, 800a99a <_printf_common+0x26>
 800a996:	3301      	adds	r3, #1
 800a998:	6033      	str	r3, [r6, #0]
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	0699      	lsls	r1, r3, #26
 800a99e:	bf42      	ittt	mi
 800a9a0:	6833      	ldrmi	r3, [r6, #0]
 800a9a2:	3302      	addmi	r3, #2
 800a9a4:	6033      	strmi	r3, [r6, #0]
 800a9a6:	6825      	ldr	r5, [r4, #0]
 800a9a8:	f015 0506 	ands.w	r5, r5, #6
 800a9ac:	d106      	bne.n	800a9bc <_printf_common+0x48>
 800a9ae:	f104 0a19 	add.w	sl, r4, #25
 800a9b2:	68e3      	ldr	r3, [r4, #12]
 800a9b4:	6832      	ldr	r2, [r6, #0]
 800a9b6:	1a9b      	subs	r3, r3, r2
 800a9b8:	42ab      	cmp	r3, r5
 800a9ba:	dc2b      	bgt.n	800aa14 <_printf_common+0xa0>
 800a9bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9c0:	6822      	ldr	r2, [r4, #0]
 800a9c2:	3b00      	subs	r3, #0
 800a9c4:	bf18      	it	ne
 800a9c6:	2301      	movne	r3, #1
 800a9c8:	0692      	lsls	r2, r2, #26
 800a9ca:	d430      	bmi.n	800aa2e <_printf_common+0xba>
 800a9cc:	4641      	mov	r1, r8
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a9d4:	47c8      	blx	r9
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	d023      	beq.n	800aa22 <_printf_common+0xae>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	6922      	ldr	r2, [r4, #16]
 800a9de:	f003 0306 	and.w	r3, r3, #6
 800a9e2:	2b04      	cmp	r3, #4
 800a9e4:	bf14      	ite	ne
 800a9e6:	2500      	movne	r5, #0
 800a9e8:	6833      	ldreq	r3, [r6, #0]
 800a9ea:	f04f 0600 	mov.w	r6, #0
 800a9ee:	bf08      	it	eq
 800a9f0:	68e5      	ldreq	r5, [r4, #12]
 800a9f2:	f104 041a 	add.w	r4, r4, #26
 800a9f6:	bf08      	it	eq
 800a9f8:	1aed      	subeq	r5, r5, r3
 800a9fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a9fe:	bf08      	it	eq
 800aa00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa04:	4293      	cmp	r3, r2
 800aa06:	bfc4      	itt	gt
 800aa08:	1a9b      	subgt	r3, r3, r2
 800aa0a:	18ed      	addgt	r5, r5, r3
 800aa0c:	42b5      	cmp	r5, r6
 800aa0e:	d11a      	bne.n	800aa46 <_printf_common+0xd2>
 800aa10:	2000      	movs	r0, #0
 800aa12:	e008      	b.n	800aa26 <_printf_common+0xb2>
 800aa14:	2301      	movs	r3, #1
 800aa16:	4652      	mov	r2, sl
 800aa18:	4641      	mov	r1, r8
 800aa1a:	4638      	mov	r0, r7
 800aa1c:	47c8      	blx	r9
 800aa1e:	3001      	adds	r0, #1
 800aa20:	d103      	bne.n	800aa2a <_printf_common+0xb6>
 800aa22:	f04f 30ff 	mov.w	r0, #4294967295
 800aa26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa2a:	3501      	adds	r5, #1
 800aa2c:	e7c1      	b.n	800a9b2 <_printf_common+0x3e>
 800aa2e:	2030      	movs	r0, #48	@ 0x30
 800aa30:	18e1      	adds	r1, r4, r3
 800aa32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa3c:	4422      	add	r2, r4
 800aa3e:	3302      	adds	r3, #2
 800aa40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa44:	e7c2      	b.n	800a9cc <_printf_common+0x58>
 800aa46:	2301      	movs	r3, #1
 800aa48:	4622      	mov	r2, r4
 800aa4a:	4641      	mov	r1, r8
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	47c8      	blx	r9
 800aa50:	3001      	adds	r0, #1
 800aa52:	d0e6      	beq.n	800aa22 <_printf_common+0xae>
 800aa54:	3601      	adds	r6, #1
 800aa56:	e7d9      	b.n	800aa0c <_printf_common+0x98>

0800aa58 <_printf_i>:
 800aa58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa5c:	7e0f      	ldrb	r7, [r1, #24]
 800aa5e:	4691      	mov	r9, r2
 800aa60:	2f78      	cmp	r7, #120	@ 0x78
 800aa62:	4680      	mov	r8, r0
 800aa64:	460c      	mov	r4, r1
 800aa66:	469a      	mov	sl, r3
 800aa68:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa6e:	d807      	bhi.n	800aa80 <_printf_i+0x28>
 800aa70:	2f62      	cmp	r7, #98	@ 0x62
 800aa72:	d80a      	bhi.n	800aa8a <_printf_i+0x32>
 800aa74:	2f00      	cmp	r7, #0
 800aa76:	f000 80d3 	beq.w	800ac20 <_printf_i+0x1c8>
 800aa7a:	2f58      	cmp	r7, #88	@ 0x58
 800aa7c:	f000 80ba 	beq.w	800abf4 <_printf_i+0x19c>
 800aa80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa88:	e03a      	b.n	800ab00 <_printf_i+0xa8>
 800aa8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa8e:	2b15      	cmp	r3, #21
 800aa90:	d8f6      	bhi.n	800aa80 <_printf_i+0x28>
 800aa92:	a101      	add	r1, pc, #4	@ (adr r1, 800aa98 <_printf_i+0x40>)
 800aa94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa98:	0800aaf1 	.word	0x0800aaf1
 800aa9c:	0800ab05 	.word	0x0800ab05
 800aaa0:	0800aa81 	.word	0x0800aa81
 800aaa4:	0800aa81 	.word	0x0800aa81
 800aaa8:	0800aa81 	.word	0x0800aa81
 800aaac:	0800aa81 	.word	0x0800aa81
 800aab0:	0800ab05 	.word	0x0800ab05
 800aab4:	0800aa81 	.word	0x0800aa81
 800aab8:	0800aa81 	.word	0x0800aa81
 800aabc:	0800aa81 	.word	0x0800aa81
 800aac0:	0800aa81 	.word	0x0800aa81
 800aac4:	0800ac07 	.word	0x0800ac07
 800aac8:	0800ab2f 	.word	0x0800ab2f
 800aacc:	0800abc1 	.word	0x0800abc1
 800aad0:	0800aa81 	.word	0x0800aa81
 800aad4:	0800aa81 	.word	0x0800aa81
 800aad8:	0800ac29 	.word	0x0800ac29
 800aadc:	0800aa81 	.word	0x0800aa81
 800aae0:	0800ab2f 	.word	0x0800ab2f
 800aae4:	0800aa81 	.word	0x0800aa81
 800aae8:	0800aa81 	.word	0x0800aa81
 800aaec:	0800abc9 	.word	0x0800abc9
 800aaf0:	6833      	ldr	r3, [r6, #0]
 800aaf2:	1d1a      	adds	r2, r3, #4
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	6032      	str	r2, [r6, #0]
 800aaf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aafc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab00:	2301      	movs	r3, #1
 800ab02:	e09e      	b.n	800ac42 <_printf_i+0x1ea>
 800ab04:	6833      	ldr	r3, [r6, #0]
 800ab06:	6820      	ldr	r0, [r4, #0]
 800ab08:	1d19      	adds	r1, r3, #4
 800ab0a:	6031      	str	r1, [r6, #0]
 800ab0c:	0606      	lsls	r6, r0, #24
 800ab0e:	d501      	bpl.n	800ab14 <_printf_i+0xbc>
 800ab10:	681d      	ldr	r5, [r3, #0]
 800ab12:	e003      	b.n	800ab1c <_printf_i+0xc4>
 800ab14:	0645      	lsls	r5, r0, #25
 800ab16:	d5fb      	bpl.n	800ab10 <_printf_i+0xb8>
 800ab18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab1c:	2d00      	cmp	r5, #0
 800ab1e:	da03      	bge.n	800ab28 <_printf_i+0xd0>
 800ab20:	232d      	movs	r3, #45	@ 0x2d
 800ab22:	426d      	negs	r5, r5
 800ab24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab28:	230a      	movs	r3, #10
 800ab2a:	4859      	ldr	r0, [pc, #356]	@ (800ac90 <_printf_i+0x238>)
 800ab2c:	e011      	b.n	800ab52 <_printf_i+0xfa>
 800ab2e:	6821      	ldr	r1, [r4, #0]
 800ab30:	6833      	ldr	r3, [r6, #0]
 800ab32:	0608      	lsls	r0, r1, #24
 800ab34:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab38:	d402      	bmi.n	800ab40 <_printf_i+0xe8>
 800ab3a:	0649      	lsls	r1, r1, #25
 800ab3c:	bf48      	it	mi
 800ab3e:	b2ad      	uxthmi	r5, r5
 800ab40:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab42:	6033      	str	r3, [r6, #0]
 800ab44:	bf14      	ite	ne
 800ab46:	230a      	movne	r3, #10
 800ab48:	2308      	moveq	r3, #8
 800ab4a:	4851      	ldr	r0, [pc, #324]	@ (800ac90 <_printf_i+0x238>)
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab52:	6866      	ldr	r6, [r4, #4]
 800ab54:	2e00      	cmp	r6, #0
 800ab56:	bfa8      	it	ge
 800ab58:	6821      	ldrge	r1, [r4, #0]
 800ab5a:	60a6      	str	r6, [r4, #8]
 800ab5c:	bfa4      	itt	ge
 800ab5e:	f021 0104 	bicge.w	r1, r1, #4
 800ab62:	6021      	strge	r1, [r4, #0]
 800ab64:	b90d      	cbnz	r5, 800ab6a <_printf_i+0x112>
 800ab66:	2e00      	cmp	r6, #0
 800ab68:	d04b      	beq.n	800ac02 <_printf_i+0x1aa>
 800ab6a:	4616      	mov	r6, r2
 800ab6c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab70:	fb03 5711 	mls	r7, r3, r1, r5
 800ab74:	5dc7      	ldrb	r7, [r0, r7]
 800ab76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab7a:	462f      	mov	r7, r5
 800ab7c:	42bb      	cmp	r3, r7
 800ab7e:	460d      	mov	r5, r1
 800ab80:	d9f4      	bls.n	800ab6c <_printf_i+0x114>
 800ab82:	2b08      	cmp	r3, #8
 800ab84:	d10b      	bne.n	800ab9e <_printf_i+0x146>
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	07df      	lsls	r7, r3, #31
 800ab8a:	d508      	bpl.n	800ab9e <_printf_i+0x146>
 800ab8c:	6923      	ldr	r3, [r4, #16]
 800ab8e:	6861      	ldr	r1, [r4, #4]
 800ab90:	4299      	cmp	r1, r3
 800ab92:	bfde      	ittt	le
 800ab94:	2330      	movle	r3, #48	@ 0x30
 800ab96:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab9e:	1b92      	subs	r2, r2, r6
 800aba0:	6122      	str	r2, [r4, #16]
 800aba2:	464b      	mov	r3, r9
 800aba4:	4621      	mov	r1, r4
 800aba6:	4640      	mov	r0, r8
 800aba8:	f8cd a000 	str.w	sl, [sp]
 800abac:	aa03      	add	r2, sp, #12
 800abae:	f7ff fee1 	bl	800a974 <_printf_common>
 800abb2:	3001      	adds	r0, #1
 800abb4:	d14a      	bne.n	800ac4c <_printf_i+0x1f4>
 800abb6:	f04f 30ff 	mov.w	r0, #4294967295
 800abba:	b004      	add	sp, #16
 800abbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	f043 0320 	orr.w	r3, r3, #32
 800abc6:	6023      	str	r3, [r4, #0]
 800abc8:	2778      	movs	r7, #120	@ 0x78
 800abca:	4832      	ldr	r0, [pc, #200]	@ (800ac94 <_printf_i+0x23c>)
 800abcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	6831      	ldr	r1, [r6, #0]
 800abd4:	061f      	lsls	r7, r3, #24
 800abd6:	f851 5b04 	ldr.w	r5, [r1], #4
 800abda:	d402      	bmi.n	800abe2 <_printf_i+0x18a>
 800abdc:	065f      	lsls	r7, r3, #25
 800abde:	bf48      	it	mi
 800abe0:	b2ad      	uxthmi	r5, r5
 800abe2:	6031      	str	r1, [r6, #0]
 800abe4:	07d9      	lsls	r1, r3, #31
 800abe6:	bf44      	itt	mi
 800abe8:	f043 0320 	orrmi.w	r3, r3, #32
 800abec:	6023      	strmi	r3, [r4, #0]
 800abee:	b11d      	cbz	r5, 800abf8 <_printf_i+0x1a0>
 800abf0:	2310      	movs	r3, #16
 800abf2:	e7ab      	b.n	800ab4c <_printf_i+0xf4>
 800abf4:	4826      	ldr	r0, [pc, #152]	@ (800ac90 <_printf_i+0x238>)
 800abf6:	e7e9      	b.n	800abcc <_printf_i+0x174>
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	f023 0320 	bic.w	r3, r3, #32
 800abfe:	6023      	str	r3, [r4, #0]
 800ac00:	e7f6      	b.n	800abf0 <_printf_i+0x198>
 800ac02:	4616      	mov	r6, r2
 800ac04:	e7bd      	b.n	800ab82 <_printf_i+0x12a>
 800ac06:	6833      	ldr	r3, [r6, #0]
 800ac08:	6825      	ldr	r5, [r4, #0]
 800ac0a:	1d18      	adds	r0, r3, #4
 800ac0c:	6961      	ldr	r1, [r4, #20]
 800ac0e:	6030      	str	r0, [r6, #0]
 800ac10:	062e      	lsls	r6, r5, #24
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	d501      	bpl.n	800ac1a <_printf_i+0x1c2>
 800ac16:	6019      	str	r1, [r3, #0]
 800ac18:	e002      	b.n	800ac20 <_printf_i+0x1c8>
 800ac1a:	0668      	lsls	r0, r5, #25
 800ac1c:	d5fb      	bpl.n	800ac16 <_printf_i+0x1be>
 800ac1e:	8019      	strh	r1, [r3, #0]
 800ac20:	2300      	movs	r3, #0
 800ac22:	4616      	mov	r6, r2
 800ac24:	6123      	str	r3, [r4, #16]
 800ac26:	e7bc      	b.n	800aba2 <_printf_i+0x14a>
 800ac28:	6833      	ldr	r3, [r6, #0]
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	1d1a      	adds	r2, r3, #4
 800ac2e:	6032      	str	r2, [r6, #0]
 800ac30:	681e      	ldr	r6, [r3, #0]
 800ac32:	6862      	ldr	r2, [r4, #4]
 800ac34:	4630      	mov	r0, r6
 800ac36:	f000 f859 	bl	800acec <memchr>
 800ac3a:	b108      	cbz	r0, 800ac40 <_printf_i+0x1e8>
 800ac3c:	1b80      	subs	r0, r0, r6
 800ac3e:	6060      	str	r0, [r4, #4]
 800ac40:	6863      	ldr	r3, [r4, #4]
 800ac42:	6123      	str	r3, [r4, #16]
 800ac44:	2300      	movs	r3, #0
 800ac46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac4a:	e7aa      	b.n	800aba2 <_printf_i+0x14a>
 800ac4c:	4632      	mov	r2, r6
 800ac4e:	4649      	mov	r1, r9
 800ac50:	4640      	mov	r0, r8
 800ac52:	6923      	ldr	r3, [r4, #16]
 800ac54:	47d0      	blx	sl
 800ac56:	3001      	adds	r0, #1
 800ac58:	d0ad      	beq.n	800abb6 <_printf_i+0x15e>
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	079b      	lsls	r3, r3, #30
 800ac5e:	d413      	bmi.n	800ac88 <_printf_i+0x230>
 800ac60:	68e0      	ldr	r0, [r4, #12]
 800ac62:	9b03      	ldr	r3, [sp, #12]
 800ac64:	4298      	cmp	r0, r3
 800ac66:	bfb8      	it	lt
 800ac68:	4618      	movlt	r0, r3
 800ac6a:	e7a6      	b.n	800abba <_printf_i+0x162>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	4632      	mov	r2, r6
 800ac70:	4649      	mov	r1, r9
 800ac72:	4640      	mov	r0, r8
 800ac74:	47d0      	blx	sl
 800ac76:	3001      	adds	r0, #1
 800ac78:	d09d      	beq.n	800abb6 <_printf_i+0x15e>
 800ac7a:	3501      	adds	r5, #1
 800ac7c:	68e3      	ldr	r3, [r4, #12]
 800ac7e:	9903      	ldr	r1, [sp, #12]
 800ac80:	1a5b      	subs	r3, r3, r1
 800ac82:	42ab      	cmp	r3, r5
 800ac84:	dcf2      	bgt.n	800ac6c <_printf_i+0x214>
 800ac86:	e7eb      	b.n	800ac60 <_printf_i+0x208>
 800ac88:	2500      	movs	r5, #0
 800ac8a:	f104 0619 	add.w	r6, r4, #25
 800ac8e:	e7f5      	b.n	800ac7c <_printf_i+0x224>
 800ac90:	0800dd9f 	.word	0x0800dd9f
 800ac94:	0800ddb0 	.word	0x0800ddb0

0800ac98 <memmove>:
 800ac98:	4288      	cmp	r0, r1
 800ac9a:	b510      	push	{r4, lr}
 800ac9c:	eb01 0402 	add.w	r4, r1, r2
 800aca0:	d902      	bls.n	800aca8 <memmove+0x10>
 800aca2:	4284      	cmp	r4, r0
 800aca4:	4623      	mov	r3, r4
 800aca6:	d807      	bhi.n	800acb8 <memmove+0x20>
 800aca8:	1e43      	subs	r3, r0, #1
 800acaa:	42a1      	cmp	r1, r4
 800acac:	d008      	beq.n	800acc0 <memmove+0x28>
 800acae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acb6:	e7f8      	b.n	800acaa <memmove+0x12>
 800acb8:	4601      	mov	r1, r0
 800acba:	4402      	add	r2, r0
 800acbc:	428a      	cmp	r2, r1
 800acbe:	d100      	bne.n	800acc2 <memmove+0x2a>
 800acc0:	bd10      	pop	{r4, pc}
 800acc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acca:	e7f7      	b.n	800acbc <memmove+0x24>

0800accc <_sbrk_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	2300      	movs	r3, #0
 800acd0:	4d05      	ldr	r5, [pc, #20]	@ (800ace8 <_sbrk_r+0x1c>)
 800acd2:	4604      	mov	r4, r0
 800acd4:	4608      	mov	r0, r1
 800acd6:	602b      	str	r3, [r5, #0]
 800acd8:	f7fc fe7e 	bl	80079d8 <_sbrk>
 800acdc:	1c43      	adds	r3, r0, #1
 800acde:	d102      	bne.n	800ace6 <_sbrk_r+0x1a>
 800ace0:	682b      	ldr	r3, [r5, #0]
 800ace2:	b103      	cbz	r3, 800ace6 <_sbrk_r+0x1a>
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	20001868 	.word	0x20001868

0800acec <memchr>:
 800acec:	4603      	mov	r3, r0
 800acee:	b510      	push	{r4, lr}
 800acf0:	b2c9      	uxtb	r1, r1
 800acf2:	4402      	add	r2, r0
 800acf4:	4293      	cmp	r3, r2
 800acf6:	4618      	mov	r0, r3
 800acf8:	d101      	bne.n	800acfe <memchr+0x12>
 800acfa:	2000      	movs	r0, #0
 800acfc:	e003      	b.n	800ad06 <memchr+0x1a>
 800acfe:	7804      	ldrb	r4, [r0, #0]
 800ad00:	3301      	adds	r3, #1
 800ad02:	428c      	cmp	r4, r1
 800ad04:	d1f6      	bne.n	800acf4 <memchr+0x8>
 800ad06:	bd10      	pop	{r4, pc}

0800ad08 <_realloc_r>:
 800ad08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0c:	4680      	mov	r8, r0
 800ad0e:	4615      	mov	r5, r2
 800ad10:	460c      	mov	r4, r1
 800ad12:	b921      	cbnz	r1, 800ad1e <_realloc_r+0x16>
 800ad14:	4611      	mov	r1, r2
 800ad16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1a:	f7ff bc47 	b.w	800a5ac <_malloc_r>
 800ad1e:	b92a      	cbnz	r2, 800ad2c <_realloc_r+0x24>
 800ad20:	f7ff fbda 	bl	800a4d8 <_free_r>
 800ad24:	2400      	movs	r4, #0
 800ad26:	4620      	mov	r0, r4
 800ad28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad2c:	f000 f81a 	bl	800ad64 <_malloc_usable_size_r>
 800ad30:	4285      	cmp	r5, r0
 800ad32:	4606      	mov	r6, r0
 800ad34:	d802      	bhi.n	800ad3c <_realloc_r+0x34>
 800ad36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad3a:	d8f4      	bhi.n	800ad26 <_realloc_r+0x1e>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	4640      	mov	r0, r8
 800ad40:	f7ff fc34 	bl	800a5ac <_malloc_r>
 800ad44:	4607      	mov	r7, r0
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d0ec      	beq.n	800ad24 <_realloc_r+0x1c>
 800ad4a:	42b5      	cmp	r5, r6
 800ad4c:	462a      	mov	r2, r5
 800ad4e:	4621      	mov	r1, r4
 800ad50:	bf28      	it	cs
 800ad52:	4632      	movcs	r2, r6
 800ad54:	f7ff fbb2 	bl	800a4bc <memcpy>
 800ad58:	4621      	mov	r1, r4
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	f7ff fbbc 	bl	800a4d8 <_free_r>
 800ad60:	463c      	mov	r4, r7
 800ad62:	e7e0      	b.n	800ad26 <_realloc_r+0x1e>

0800ad64 <_malloc_usable_size_r>:
 800ad64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad68:	1f18      	subs	r0, r3, #4
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	bfbc      	itt	lt
 800ad6e:	580b      	ldrlt	r3, [r1, r0]
 800ad70:	18c0      	addlt	r0, r0, r3
 800ad72:	4770      	bx	lr

0800ad74 <_init>:
 800ad74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad76:	bf00      	nop
 800ad78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7a:	bc08      	pop	{r3}
 800ad7c:	469e      	mov	lr, r3
 800ad7e:	4770      	bx	lr

0800ad80 <_fini>:
 800ad80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad82:	bf00      	nop
 800ad84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad86:	bc08      	pop	{r3}
 800ad88:	469e      	mov	lr, r3
 800ad8a:	4770      	bx	lr
