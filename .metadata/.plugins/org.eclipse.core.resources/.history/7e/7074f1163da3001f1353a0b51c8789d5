/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    stm32f1xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lcd_v4.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */
#define DEBOUNCE_DELAY 100
/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
uint8_t rxBuffer[20];
unsigned short img[2700];
unsigned short shot[2700];
uint8_t state = 0;
uint16_t cnt = 0;
uint8_t size = 9;
uint8_t stop = 1;
uint8_t sent = 0;
uint8_t get_signal[1] = {0x00}; // 成功接收
uint8_t start_signal[1] = {0x11}; // 继续
uint8_t stop_signal[1] = {0x22}; // 暂停
uint16_t time_cnt = 0;
char time_message[25] = "Playing lasting 0\0\0\0\0";//  ???????????16
uint32_t last_interrupt_time = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart1;
/* USER CODE BEGIN EV */
/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32F1xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles EXTI line0 interrupt.
  */
//void EXTI0_IRQHandler(void)
//{
//  /* USER CODE BEGIN EXTI0_IRQn 0 */
//
//  /* USER CODE END EXTI0_IRQn 0 */
//  HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
//  /* USER CODE BEGIN EXTI0_IRQn 1 */
//  HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
//  for (int i=0; i<2700; i++) {
//	  shot[i] = img[i];
//  }
//  lcd_fill(30, 156, 210, 291, WHITE);
//  switch (size) {
//  case 1:
//	  lcd_show_picture1(90, 200, 60, 45, shot);
//	  break;
//  case 4:
//	  lcd_show_picture4(30, 89, 60, 45, shot);
//	  break;
//  case 9:
//	  lcd_show_picture9(10, 52, 60, 45, shot);
//	  break;
//  }
//  HAL_UART_Transmit(&huart1, start_signal, 1, 0xffff);
//  /* USER CODE END EXTI0_IRQn 1 */
//}

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
//void EXTI9_5_IRQHandler(void)
//{
//  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
//
//  /* USER CODE END EXTI9_5_IRQn 0 */
//  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
//  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
//  lcd_fill(30, 9, 210, 144, WHITE);
//  switch (size) {
//  case 1:
//	  size = 4;
//	  break;
//  case 4:
//	  size = 9;
//	  break;
//  case 9:
//	  size = 1;
//	  break;
//  }
//  HAL_UART_Transmit(&huart1, start_signal, 1, 0xffff);
//  /* USER CODE END EXTI9_5_IRQn 1 */
//}

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */
  // 计时 ?????????????
  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
  time_cnt += 1;
  if (time_cnt < 10) {
	  time_message[16] = 48 + time_cnt;
  } else if (time_cnt < 100){
	  time_message[16] = 48 + time_cnt / 10;
	  time_message[17] = 48 + time_cnt % 10;
  } else {
	  time_message[16] = 48 + time_cnt / 100;
	  time_message[17] = 48 + (time_cnt % 100) / 10;
	  time_message[18] = 48 + time_cnt % 10;
  }
  lcd_show_string(2, 294, 238, 24, 24, time_message, BLACK);
  HAL_UART_Transmit(&huart1, start_signal, 1, 0xffff);
  /* USER CODE END TIM3_IRQn 1 */
}

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
  /* USER CODE END USART1_IRQn 1 */
}

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
//void EXTI15_10_IRQHandler(void)
//{
//  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//
//  /* USER CODE END EXTI15_10_IRQn 0 */
//  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
//  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
//  if (HAL_GetTick() - last_interrupt_time > DEBOUNCE_DELAY)
//  {
//	  last_interrupt_time = HAL_GetTick(); // 更新上次中断时间
//	  stop = !stop; // 切换按键状 ??
//	  if (!stop) {
//		  HAL_UART_Transmit(&huart1, get_signal, 1, 0xffff);
//	  } else {
//		  HAL_UART_Transmit(&huart1, stop_signal, 1, 0xffff);
//	  }
//  }
//  /* USER CODE END EXTI15_10_IRQn 1 */
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	static unsigned short data;
	static uint32_t start_time = 0;
    if(huart->Instance == USART1)
    {
    	switch(state){
    	case 0:
    		data = rxBuffer[0];
    		if (data == 0x34) {
    		    state = 1;
    		}
    		break;
    	case 1:
    		data |= (rxBuffer[0] << 8);
    		if (data == 0x1234) {
    		    state = 2;
    		    cnt = 0;
    		} else {
    			state = 0;
    			break;
    		}
			if (!stop) {
				HAL_UART_Transmit(huart, get_signal, 1, 0xffff);
				start_time = HAL_GetTick();
			} else {
				state = 0;
			}
    		break;
    	case 2:
    		data = rxBuffer[0];
    		state = 3;
    		break;
    	case 3:
    		data |= (rxBuffer[0] << 8);
    		img[cnt] = data;
    		cnt++;
    		if (cnt == 2700) {
//    			switch (size) {
//    			case 1:
//    				lcd_show_picture1(90, 55, 60, 45, img);
//    				break;
//    			case 4:
//    				lcd_show_picture4(30, 16, 60, 45, img);
//    				break;
//    			case 9:
//    				lcd_show_picture9(10, 3, 60, 45, img);
//    				break;
//    			}
    			lcd_showpic(90,55,60,45,img);
    			state = 0;
    		} else if (HAL_GetTick() - start_time < 500){
    			state = 2;
    		} else {
    			state = 0;
    		}
    		break;
    	}
    }
}
/* USER CODE END 1 */
