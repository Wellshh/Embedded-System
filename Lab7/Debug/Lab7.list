
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fdc  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ff4  080091c4  080091c4  0000a1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1b8  0800c1b8  0000e060  2**0
                  CONTENTS
  4 .ARM          00000000  0800c1b8  0800c1b8  0000e060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c1b8  0800c1b8  0000e060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1b8  0800c1b8  0000d1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1bc  0800c1bc  0000d1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800c1c0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000060  0800c220  0000e060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  0800c220  0000e224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a78d  00000000  00000000  0000e089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3a  00000000  00000000  00018816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0001a450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000817  00000000  00000000  0001aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f3e  00000000  00000000  0001b6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d848  00000000  00000000  00035625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096caf  00000000  00000000  00042e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9b1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003108  00000000  00000000  000d9b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  000dcc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000060 	.word	0x20000060
 8000204:	00000000 	.word	0x00000000
 8000208:	080091ac 	.word	0x080091ac

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000064 	.word	0x20000064
 8000224:	080091ac 	.word	0x080091ac

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000848:	4b2a      	ldr	r3, [pc, #168]	@ (80008f4 <MX_GPIO_Init+0xc0>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a29      	ldr	r2, [pc, #164]	@ (80008f4 <MX_GPIO_Init+0xc0>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b27      	ldr	r3, [pc, #156]	@ (80008f4 <MX_GPIO_Init+0xc0>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <MX_GPIO_Init+0xc0>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a23      	ldr	r2, [pc, #140]	@ (80008f4 <MX_GPIO_Init+0xc0>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_GPIO_Init+0xc0>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000878:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_GPIO_Init+0xc0>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a1d      	ldr	r2, [pc, #116]	@ (80008f4 <MX_GPIO_Init+0xc0>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_GPIO_Init+0xc0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0310 	and.w	r3, r3, #16
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000896:	4818      	ldr	r0, [pc, #96]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 8000898:	f006 ffa3 	bl	80077e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	4812      	ldr	r0, [pc, #72]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008b0:	f006 fdec 	bl	800748c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008b4:	2320      	movs	r3, #32
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	@ (80008fc <MX_GPIO_Init+0xc8>)
 80008c8:	f006 fde0 	bl	800748c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2302      	movs	r3, #2
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	4619      	mov	r1, r3
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_GPIO_Init+0xc4>)
 80008e6:	f006 fdd1 	bl	800748c <HAL_GPIO_Init>

}
 80008ea:	bf00      	nop
 80008ec:	3720      	adds	r7, #32
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010800 	.word	0x40010800
 80008fc:	40011000 	.word	0x40011000

08000900 <lcd_wr_xdata>:
 *              ʡ����ռ�.
 * @param       data : Ҫд�������
 * @retval      ��
 */
void lcd_wr_xdata(uint16_t data)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
    LCD_RS(1);
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <lcd_wr_xdata+0x40>)
 800090c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000910:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <lcd_wr_xdata+0x40>)
 8000914:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000918:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(data);
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <lcd_wr_xdata+0x44>)
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	60d3      	str	r3, [r2, #12]
    LCD_WR(0);
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <lcd_wr_xdata+0x40>)
 8000922:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000926:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <lcd_wr_xdata+0x40>)
 800092a:	2280      	movs	r2, #128	@ 0x80
 800092c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800092e:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <lcd_wr_xdata+0x40>)
 8000930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000934:	611a      	str	r2, [r3, #16]
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	40011000 	.word	0x40011000
 8000944:	40010c00 	.word	0x40010c00

08000948 <lcd_write_reg>:
 * @param       regno:�Ĵ������/��ַ
 * @param       data:Ҫд�������
 * @retval      ��
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	460a      	mov	r2, r1
 8000952:	80fb      	strh	r3, [r7, #6]
 8000954:	4613      	mov	r3, r2
 8000956:	80bb      	strh	r3, [r7, #4]
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800095c:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <lcd_write_reg+0x7c>)
 800095e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000962:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000964:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <lcd_write_reg+0x7c>)
 8000966:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800096a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800096c:	89fb      	ldrh	r3, [r7, #14]
 800096e:	b29a      	uxth	r2, r3
 8000970:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <lcd_write_reg+0x80>)
 8000972:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000974:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <lcd_write_reg+0x7c>)
 8000976:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800097a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <lcd_write_reg+0x7c>)
 800097e:	2280      	movs	r2, #128	@ 0x80
 8000980:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <lcd_write_reg+0x7c>)
 8000984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000988:	611a      	str	r2, [r3, #16]
}
 800098a:	bf00      	nop
    lcd_wr_regno(regno);    /* д��Ҫд�ļĴ������ */
    lcd_wr_data(data);      /* д������ */
 800098c:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <lcd_write_reg+0x7c>)
 800098e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000992:	611a      	str	r2, [r3, #16]
 8000994:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <lcd_write_reg+0x7c>)
 8000996:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <lcd_write_reg+0x80>)
 800099e:	88bb      	ldrh	r3, [r7, #4]
 80009a0:	60d3      	str	r3, [r2, #12]
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <lcd_write_reg+0x7c>)
 80009a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009a8:	611a      	str	r2, [r3, #16]
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <lcd_write_reg+0x7c>)
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	611a      	str	r2, [r3, #16]
 80009b0:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <lcd_write_reg+0x7c>)
 80009b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009b6:	611a      	str	r2, [r3, #16]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40011000 	.word	0x40011000
 80009c8:	40010c00 	.word	0x40010c00

080009cc <lcd_opt_delay>:
 * @brief       LCD��ʱ����,�����ڲ�����mdk -O1ʱ���Ż�ʱ��Ҫ���õĵط�
 * @param       t:��ʱ����ֵ
 * @retval      ��
 */
static void lcd_opt_delay(uint32_t i)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
    while (i--);
 80009d4:	bf00      	nop
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	1e5a      	subs	r2, r3, #1
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1fa      	bne.n	80009d6 <lcd_opt_delay+0xa>
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <lcd_rd_data>:
 * @brief       LCD������
 * @param       ��
 * @retval      ��ȡ��������
 */
static uint16_t lcd_rd_data(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* ��ֹ���Ż� */
    
    GPIO_InitTypeDef gpio_init_struct;
    /* LCD_DATA ����ģʽ����, ��������, ׼���������� */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 80009f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009f6:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct); 
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4818      	ldr	r0, [pc, #96]	@ (8000a6c <lcd_rd_data+0x80>)
 8000a0a:	f006 fd3f 	bl	800748c <HAL_GPIO_Init>

    LCD_RS(1);              /* RS=1,��ʾ�������� */
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <lcd_rd_data+0x84>)
 8000a10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a14:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <lcd_rd_data+0x84>)
 8000a18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a1c:	611a      	str	r2, [r3, #16]
    LCD_RD(0);
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <lcd_rd_data+0x84>)
 8000a20:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a24:	611a      	str	r2, [r3, #16]
    lcd_opt_delay(2);
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff ffd0 	bl	80009cc <lcd_opt_delay>
    ram = LCD_DATA_IN;      /* ��ȡ���� */
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <lcd_rd_data+0x80>)
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	82fb      	strh	r3, [r7, #22]
    LCD_RD(1);
 8000a34:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <lcd_rd_data+0x84>)
 8000a36:	2240      	movs	r2, #64	@ 0x40
 8000a38:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <lcd_rd_data+0x84>)
 8000a3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a40:	611a      	str	r2, [r3, #16]
    
    /* LCD_DATA ����ģʽ����, �������, �ָ����״̬ */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000a42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a46:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <lcd_rd_data+0x80>)
 8000a5a:	f006 fd17 	bl	800748c <HAL_GPIO_Init>

    return ram;
 8000a5e:	8afb      	ldrh	r3, [r7, #22]
 8000a60:	b29b      	uxth	r3, r3
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40010c00 	.word	0x40010c00
 8000a70:	40011000 	.word	0x40011000

08000a74 <lcd_set_cursor>:
 * @brief       ���ù��λ��(��RGB����Ч)
 * @param       x,y: ����
 * @retval      ��
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	@ 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	80fb      	strh	r3, [r7, #6]
 8000a80:	4613      	mov	r3, r2
 8000a82:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8000a84:	4b44      	ldr	r3, [pc, #272]	@ (8000b98 <lcd_set_cursor+0x124>)
 8000a86:	889b      	ldrh	r3, [r3, #4]
 8000a88:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	f040 8189 	bne.w	8000da4 <lcd_set_cursor+0x330>
    {
        if (lcddev.dir == 0)    /* ����ģʽ, x������Ҫ�任 */
 8000a92:	4b41      	ldr	r3, [pc, #260]	@ (8000b98 <lcd_set_cursor+0x124>)
 8000a94:	799b      	ldrb	r3, [r3, #6]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8084 	bne.w	8000ba4 <lcd_set_cursor+0x130>
        {
            x = lcddev.width - 1 - x;
 8000a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b98 <lcd_set_cursor+0x124>)
 8000a9e:	881a      	ldrh	r2, [r3, #0]
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000b98 <lcd_set_cursor+0x124>)
 8000aac:	895b      	ldrh	r3, [r3, #10]
 8000aae:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000ab2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ab6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000ab8:	4b38      	ldr	r3, [pc, #224]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000aba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000abe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000ac0:	89fb      	ldrh	r3, [r7, #14]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b36      	ldr	r3, [pc, #216]	@ (8000ba0 <lcd_set_cursor+0x12c>)
 8000ac6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000ac8:	4b34      	ldr	r3, [pc, #208]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000aca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ace:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000ad0:	4b32      	ldr	r3, [pc, #200]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000ad2:	2280      	movs	r2, #128	@ 0x80
 8000ad4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000ad6:	4b31      	ldr	r3, [pc, #196]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000adc:	611a      	str	r2, [r3, #16]
}
 8000ade:	bf00      	nop
            lcd_wr_data(0);
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000ae2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000aea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba0 <lcd_set_cursor+0x12c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000af8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000afc:	611a      	str	r2, [r3, #16]
 8000afe:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b00:	2280      	movs	r2, #128	@ 0x80
 8000b02:	611a      	str	r2, [r3, #16]
 8000b04:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b0a:	611a      	str	r2, [r3, #16]
            lcd_wr_data(0);
 8000b0c:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b12:	611a      	str	r2, [r3, #16]
 8000b14:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <lcd_set_cursor+0x12c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b2c:	2280      	movs	r2, #128	@ 0x80
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b36:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x >> 8);
 8000b38:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b46:	611a      	str	r2, [r3, #16]
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <lcd_set_cursor+0x12c>)
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b58:	611a      	str	r2, [r3, #16]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b5c:	2280      	movs	r2, #128	@ 0x80
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b66:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ba0 <lcd_set_cursor+0x12c>)
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	60d3      	str	r3, [r2, #12]
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b82:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b8a:	2280      	movs	r2, #128	@ 0x80
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <lcd_set_cursor+0x128>)
 8000b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b94:	611a      	str	r2, [r3, #16]
 8000b96:	e081      	b.n	8000c9c <lcd_set_cursor+0x228>
 8000b98:	2000007c 	.word	0x2000007c
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40010c00 	.word	0x40010c00
        }
        else                    /* ����ģʽ */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8000ba4:	4b7c      	ldr	r3, [pc, #496]	@ (8000d98 <lcd_set_cursor+0x324>)
 8000ba6:	895b      	ldrh	r3, [r3, #10]
 8000ba8:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000baa:	4b7c      	ldr	r3, [pc, #496]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000bac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000bb0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000bb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bb8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000bba:	8a3b      	ldrh	r3, [r7, #16]
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	4b78      	ldr	r3, [pc, #480]	@ (8000da0 <lcd_set_cursor+0x32c>)
 8000bc0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000bc2:	4b76      	ldr	r3, [pc, #472]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000bc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bc8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000bca:	4b74      	ldr	r3, [pc, #464]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000bcc:	2280      	movs	r2, #128	@ 0x80
 8000bce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000bd0:	4b72      	ldr	r3, [pc, #456]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000bd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bd6:	611a      	str	r2, [r3, #16]
}
 8000bd8:	bf00      	nop
            lcd_wr_data(x >> 8);
 8000bda:	4b70      	ldr	r3, [pc, #448]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000bdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000be0:	611a      	str	r2, [r3, #16]
 8000be2:	4b6e      	ldr	r3, [pc, #440]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000be4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000be8:	611a      	str	r2, [r3, #16]
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	4b6b      	ldr	r3, [pc, #428]	@ (8000da0 <lcd_set_cursor+0x32c>)
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	4b69      	ldr	r3, [pc, #420]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000bf6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	4b67      	ldr	r3, [pc, #412]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000bfe:	2280      	movs	r2, #128	@ 0x80
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	4b66      	ldr	r3, [pc, #408]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c08:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8000c0a:	4b64      	ldr	r3, [pc, #400]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c10:	611a      	str	r2, [r3, #16]
 8000c12:	4b62      	ldr	r3, [pc, #392]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c18:	611a      	str	r2, [r3, #16]
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4a60      	ldr	r2, [pc, #384]	@ (8000da0 <lcd_set_cursor+0x32c>)
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	60d3      	str	r3, [r2, #12]
 8000c22:	4b5e      	ldr	r3, [pc, #376]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c28:	611a      	str	r2, [r3, #16]
 8000c2a:	4b5c      	ldr	r3, [pc, #368]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c2c:	2280      	movs	r2, #128	@ 0x80
 8000c2e:	611a      	str	r2, [r3, #16]
 8000c30:	4b5a      	ldr	r3, [pc, #360]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c36:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) >> 8);
 8000c38:	4b58      	ldr	r3, [pc, #352]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c3e:	611a      	str	r2, [r3, #16]
 8000c40:	4b56      	ldr	r3, [pc, #344]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	4b53      	ldr	r3, [pc, #332]	@ (8000d98 <lcd_set_cursor+0x324>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	121a      	asrs	r2, r3, #8
 8000c50:	4b53      	ldr	r3, [pc, #332]	@ (8000da0 <lcd_set_cursor+0x32c>)
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	4b51      	ldr	r3, [pc, #324]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c5e:	2280      	movs	r2, #128	@ 0x80
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	4b4e      	ldr	r3, [pc, #312]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c68:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8000c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	4b4a      	ldr	r3, [pc, #296]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c78:	611a      	str	r2, [r3, #16]
 8000c7a:	4b47      	ldr	r3, [pc, #284]	@ (8000d98 <lcd_set_cursor+0x324>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	4a47      	ldr	r2, [pc, #284]	@ (8000da0 <lcd_set_cursor+0x32c>)
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	60d3      	str	r3, [r2, #12]
 8000c86:	4b45      	ldr	r3, [pc, #276]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c8c:	611a      	str	r2, [r3, #16]
 8000c8e:	4b43      	ldr	r3, [pc, #268]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c90:	2280      	movs	r2, #128	@ 0x80
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	4b41      	ldr	r3, [pc, #260]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000c96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c9a:	611a      	str	r2, [r3, #16]
        }

        lcd_wr_regno(lcddev.setycmd);
 8000c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d98 <lcd_set_cursor+0x324>)
 8000c9e:	899b      	ldrh	r3, [r3, #12]
 8000ca0:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000ca4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ca8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000caa:	4b3c      	ldr	r3, [pc, #240]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000cac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cb0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000cb2:	8a7b      	ldrh	r3, [r7, #18]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8000da0 <lcd_set_cursor+0x32c>)
 8000cb8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000cba:	4b38      	ldr	r3, [pc, #224]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000cbc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000cc0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000cc2:	4b36      	ldr	r3, [pc, #216]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000cc4:	2280      	movs	r2, #128	@ 0x80
 8000cc6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000cc8:	4b34      	ldr	r3, [pc, #208]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cce:	611a      	str	r2, [r3, #16]
}
 8000cd0:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000cd2:	4b32      	ldr	r3, [pc, #200]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000cd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cd8:	611a      	str	r2, [r3, #16]
 8000cda:	4b30      	ldr	r3, [pc, #192]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000cdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ce0:	611a      	str	r2, [r3, #16]
 8000ce2:	88bb      	ldrh	r3, [r7, #4]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <lcd_set_cursor+0x32c>)
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	4b2b      	ldr	r3, [pc, #172]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000cee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000cf2:	611a      	str	r2, [r3, #16]
 8000cf4:	4b29      	ldr	r3, [pc, #164]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000cf6:	2280      	movs	r2, #128	@ 0x80
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	4b28      	ldr	r3, [pc, #160]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d00:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8000d02:	4b26      	ldr	r3, [pc, #152]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d08:	611a      	str	r2, [r3, #16]
 8000d0a:	4b24      	ldr	r3, [pc, #144]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d10:	611a      	str	r2, [r3, #16]
 8000d12:	88bb      	ldrh	r3, [r7, #4]
 8000d14:	4a22      	ldr	r2, [pc, #136]	@ (8000da0 <lcd_set_cursor+0x32c>)
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	60d3      	str	r3, [r2, #12]
 8000d1a:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d1c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	4b1e      	ldr	r3, [pc, #120]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d24:	2280      	movs	r2, #128	@ 0x80
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d2e:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 8000d30:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d36:	611a      	str	r2, [r3, #16]
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <lcd_set_cursor+0x324>)
 8000d42:	885b      	ldrh	r3, [r3, #2]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	121a      	asrs	r2, r3, #8
 8000d48:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <lcd_set_cursor+0x32c>)
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	611a      	str	r2, [r3, #16]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d60:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d68:	611a      	str	r2, [r3, #16]
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <lcd_set_cursor+0x324>)
 8000d74:	885b      	ldrh	r3, [r3, #2]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	4a09      	ldr	r2, [pc, #36]	@ (8000da0 <lcd_set_cursor+0x32c>)
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	60d3      	str	r3, [r2, #12]
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d80:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d84:	611a      	str	r2, [r3, #16]
 8000d86:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d88:	2280      	movs	r2, #128	@ 0x80
 8000d8a:	611a      	str	r2, [r3, #16]
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <lcd_set_cursor+0x328>)
 8000d8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d92:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 8000d94:	e176      	b.n	8001084 <lcd_set_cursor+0x610>
 8000d96:	bf00      	nop
 8000d98:	2000007c 	.word	0x2000007c
 8000d9c:	40011000 	.word	0x40011000
 8000da0:	40010c00 	.word	0x40010c00
    else if (lcddev.id == 0X5510)
 8000da4:	4b6a      	ldr	r3, [pc, #424]	@ (8000f50 <lcd_set_cursor+0x4dc>)
 8000da6:	889b      	ldrh	r3, [r3, #4]
 8000da8:	f245 5210 	movw	r2, #21776	@ 0x5510
 8000dac:	4293      	cmp	r3, r2
 8000dae:	f040 80d5 	bne.w	8000f5c <lcd_set_cursor+0x4e8>
        lcd_wr_regno(lcddev.setxcmd);
 8000db2:	4b67      	ldr	r3, [pc, #412]	@ (8000f50 <lcd_set_cursor+0x4dc>)
 8000db4:	895b      	ldrh	r3, [r3, #10]
 8000db6:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000db8:	4b66      	ldr	r3, [pc, #408]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000dba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000dbe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000dc0:	4b64      	ldr	r3, [pc, #400]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000dc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000dc6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000dc8:	8b7b      	ldrh	r3, [r7, #26]
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b62      	ldr	r3, [pc, #392]	@ (8000f58 <lcd_set_cursor+0x4e4>)
 8000dce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000dd0:	4b60      	ldr	r3, [pc, #384]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000dd2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dd6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000dda:	2280      	movs	r2, #128	@ 0x80
 8000ddc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000dde:	4b5d      	ldr	r3, [pc, #372]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000de0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000de4:	611a      	str	r2, [r3, #16]
}
 8000de6:	bf00      	nop
        lcd_wr_data(x >> 8);
 8000de8:	4b5a      	ldr	r3, [pc, #360]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000dea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	4b58      	ldr	r3, [pc, #352]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000df2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b56      	ldr	r3, [pc, #344]	@ (8000f58 <lcd_set_cursor+0x4e4>)
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	4b54      	ldr	r3, [pc, #336]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e04:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e08:	611a      	str	r2, [r3, #16]
 8000e0a:	4b52      	ldr	r3, [pc, #328]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e0c:	2280      	movs	r2, #128	@ 0x80
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	4b50      	ldr	r3, [pc, #320]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e16:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 8000e18:	4b4d      	ldr	r3, [pc, #308]	@ (8000f50 <lcd_set_cursor+0x4dc>)
 8000e1a:	895b      	ldrh	r3, [r3, #10]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000e22:	4b4c      	ldr	r3, [pc, #304]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e28:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e30:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000e32:	8b3b      	ldrh	r3, [r7, #24]
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	4b48      	ldr	r3, [pc, #288]	@ (8000f58 <lcd_set_cursor+0x4e4>)
 8000e38:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000e3a:	4b46      	ldr	r3, [pc, #280]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e40:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000e42:	4b44      	ldr	r3, [pc, #272]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e44:	2280      	movs	r2, #128	@ 0x80
 8000e46:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000e48:	4b42      	ldr	r3, [pc, #264]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e4e:	611a      	str	r2, [r3, #16]
}
 8000e50:	bf00      	nop
        lcd_wr_data(x & 0XFF);
 8000e52:	4b40      	ldr	r3, [pc, #256]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e60:	611a      	str	r2, [r3, #16]
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	4a3c      	ldr	r2, [pc, #240]	@ (8000f58 <lcd_set_cursor+0x4e4>)
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	60d3      	str	r3, [r2, #12]
 8000e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e6c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e70:	611a      	str	r2, [r3, #16]
 8000e72:	4b38      	ldr	r3, [pc, #224]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e74:	2280      	movs	r2, #128	@ 0x80
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	4b36      	ldr	r3, [pc, #216]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e7e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8000e80:	4b33      	ldr	r3, [pc, #204]	@ (8000f50 <lcd_set_cursor+0x4dc>)
 8000e82:	899b      	ldrh	r3, [r3, #12]
 8000e84:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000e86:	4b33      	ldr	r3, [pc, #204]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e8c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000e8e:	4b31      	ldr	r3, [pc, #196]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000e90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e94:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000e96:	8afb      	ldrh	r3, [r7, #22]
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <lcd_set_cursor+0x4e4>)
 8000e9c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000ea0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ea4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000ea8:	2280      	movs	r2, #128	@ 0x80
 8000eaa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000eac:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000eae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb2:	611a      	str	r2, [r3, #16]
}
 8000eb4:	bf00      	nop
        lcd_wr_data(y >> 8);
 8000eb6:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000eb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	4b25      	ldr	r3, [pc, #148]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000ec0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <lcd_set_cursor+0x4e4>)
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	4b20      	ldr	r3, [pc, #128]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000ed2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000eda:	2280      	movs	r2, #128	@ 0x80
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee4:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <lcd_set_cursor+0x4dc>)
 8000ee8:	899b      	ldrh	r3, [r3, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000ef0:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000ef2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ef6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000ef8:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000efa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000efe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000f00:	8abb      	ldrh	r3, [r7, #20]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <lcd_set_cursor+0x4e4>)
 8000f06:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000f0a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f0e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000f10:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000f12:	2280      	movs	r2, #128	@ 0x80
 8000f14:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f1c:	611a      	str	r2, [r3, #16]
}
 8000f1e:	bf00      	nop
        lcd_wr_data(y & 0XFF);
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000f22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000f2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f2e:	611a      	str	r2, [r3, #16]
 8000f30:	88bb      	ldrh	r3, [r7, #4]
 8000f32:	4a09      	ldr	r2, [pc, #36]	@ (8000f58 <lcd_set_cursor+0x4e4>)
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	60d3      	str	r3, [r2, #12]
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000f3a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f3e:	611a      	str	r2, [r3, #16]
 8000f40:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000f42:	2280      	movs	r2, #128	@ 0x80
 8000f44:	611a      	str	r2, [r3, #16]
 8000f46:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <lcd_set_cursor+0x4e0>)
 8000f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f4c:	611a      	str	r2, [r3, #16]
}
 8000f4e:	e099      	b.n	8001084 <lcd_set_cursor+0x610>
 8000f50:	2000007c 	.word	0x2000007c
 8000f54:	40011000 	.word	0x40011000
 8000f58:	40010c00 	.word	0x40010c00
        lcd_wr_regno(lcddev.setxcmd);
 8000f5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001090 <lcd_set_cursor+0x61c>)
 8000f5e:	895b      	ldrh	r3, [r3, #10]
 8000f60:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000f62:	4b4c      	ldr	r3, [pc, #304]	@ (8001094 <lcd_set_cursor+0x620>)
 8000f64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f68:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001094 <lcd_set_cursor+0x620>)
 8000f6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f70:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000f72:	8bfb      	ldrh	r3, [r7, #30]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	4b48      	ldr	r3, [pc, #288]	@ (8001098 <lcd_set_cursor+0x624>)
 8000f78:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000f7a:	4b46      	ldr	r3, [pc, #280]	@ (8001094 <lcd_set_cursor+0x620>)
 8000f7c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f80:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000f82:	4b44      	ldr	r3, [pc, #272]	@ (8001094 <lcd_set_cursor+0x620>)
 8000f84:	2280      	movs	r2, #128	@ 0x80
 8000f86:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000f88:	4b42      	ldr	r3, [pc, #264]	@ (8001094 <lcd_set_cursor+0x620>)
 8000f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f8e:	611a      	str	r2, [r3, #16]
}
 8000f90:	bf00      	nop
        lcd_wr_data(x >> 8);
 8000f92:	4b40      	ldr	r3, [pc, #256]	@ (8001094 <lcd_set_cursor+0x620>)
 8000f94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f98:	611a      	str	r2, [r3, #16]
 8000f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001094 <lcd_set_cursor+0x620>)
 8000f9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8001098 <lcd_set_cursor+0x624>)
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	4b39      	ldr	r3, [pc, #228]	@ (8001094 <lcd_set_cursor+0x620>)
 8000fae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	4b37      	ldr	r3, [pc, #220]	@ (8001094 <lcd_set_cursor+0x620>)
 8000fb6:	2280      	movs	r2, #128	@ 0x80
 8000fb8:	611a      	str	r2, [r3, #16]
 8000fba:	4b36      	ldr	r3, [pc, #216]	@ (8001094 <lcd_set_cursor+0x620>)
 8000fbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc0:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
 8000fc2:	4b34      	ldr	r3, [pc, #208]	@ (8001094 <lcd_set_cursor+0x620>)
 8000fc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	4b32      	ldr	r3, [pc, #200]	@ (8001094 <lcd_set_cursor+0x620>)
 8000fcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fd0:	611a      	str	r2, [r3, #16]
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	4a30      	ldr	r2, [pc, #192]	@ (8001098 <lcd_set_cursor+0x624>)
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	60d3      	str	r3, [r2, #12]
 8000fda:	4b2e      	ldr	r3, [pc, #184]	@ (8001094 <lcd_set_cursor+0x620>)
 8000fdc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000fe0:	611a      	str	r2, [r3, #16]
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8001094 <lcd_set_cursor+0x620>)
 8000fe4:	2280      	movs	r2, #128	@ 0x80
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8001094 <lcd_set_cursor+0x620>)
 8000fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fee:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8000ff0:	4b27      	ldr	r3, [pc, #156]	@ (8001090 <lcd_set_cursor+0x61c>)
 8000ff2:	899b      	ldrh	r3, [r3, #12]
 8000ff4:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000ff6:	4b27      	ldr	r3, [pc, #156]	@ (8001094 <lcd_set_cursor+0x620>)
 8000ff8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ffc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000ffe:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <lcd_set_cursor+0x620>)
 8001000:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001004:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001006:	8bbb      	ldrh	r3, [r7, #28]
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <lcd_set_cursor+0x624>)
 800100c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800100e:	4b21      	ldr	r3, [pc, #132]	@ (8001094 <lcd_set_cursor+0x620>)
 8001010:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001014:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <lcd_set_cursor+0x620>)
 8001018:	2280      	movs	r2, #128	@ 0x80
 800101a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800101c:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <lcd_set_cursor+0x620>)
 800101e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001022:	611a      	str	r2, [r3, #16]
}
 8001024:	bf00      	nop
        lcd_wr_data(y >> 8);
 8001026:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <lcd_set_cursor+0x620>)
 8001028:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <lcd_set_cursor+0x620>)
 8001030:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	88bb      	ldrh	r3, [r7, #4]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <lcd_set_cursor+0x624>)
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <lcd_set_cursor+0x620>)
 8001042:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <lcd_set_cursor+0x620>)
 800104a:	2280      	movs	r2, #128	@ 0x80
 800104c:	611a      	str	r2, [r3, #16]
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <lcd_set_cursor+0x620>)
 8001050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001054:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8001056:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <lcd_set_cursor+0x620>)
 8001058:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <lcd_set_cursor+0x620>)
 8001060:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <lcd_set_cursor+0x624>)
 800106a:	b2db      	uxtb	r3, r3
 800106c:	60d3      	str	r3, [r2, #12]
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <lcd_set_cursor+0x620>)
 8001070:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001074:	611a      	str	r2, [r3, #16]
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <lcd_set_cursor+0x620>)
 8001078:	2280      	movs	r2, #128	@ 0x80
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <lcd_set_cursor+0x620>)
 800107e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001082:	611a      	str	r2, [r3, #16]
}
 8001084:	bf00      	nop
 8001086:	3724      	adds	r7, #36	@ 0x24
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000007c 	.word	0x2000007c
 8001094:	40011000 	.word	0x40011000
 8001098:	40010c00 	.word	0x40010c00

0800109c <lcd_scan_dir>:
 *
 * @param       dir:0~7,����8������(���嶨���lcd.h)
 * @retval      ��
 */
void lcd_scan_dir(uint8_t dir)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t dirreg = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t temp;

    /* ����ʱ����1963���ı�ɨ�跽��, ����IC�ı�ɨ�跽������ʱ1963�ı䷽��, ����IC���ı�ɨ�跽�� */
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 80010ae:	4b5f      	ldr	r3, [pc, #380]	@ (800122c <lcd_scan_dir+0x190>)
 80010b0:	799b      	ldrb	r3, [r3, #6]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d105      	bne.n	80010c2 <lcd_scan_dir+0x26>
 80010b6:	4b5d      	ldr	r3, [pc, #372]	@ (800122c <lcd_scan_dir+0x190>)
 80010b8:	889b      	ldrh	r3, [r3, #4]
 80010ba:	f641 1263 	movw	r2, #6499	@ 0x1963
 80010be:	4293      	cmp	r3, r2
 80010c0:	d109      	bne.n	80010d6 <lcd_scan_dir+0x3a>
 80010c2:	4b5a      	ldr	r3, [pc, #360]	@ (800122c <lcd_scan_dir+0x190>)
 80010c4:	799b      	ldrb	r3, [r3, #6]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d134      	bne.n	8001134 <lcd_scan_dir+0x98>
 80010ca:	4b58      	ldr	r3, [pc, #352]	@ (800122c <lcd_scan_dir+0x190>)
 80010cc:	889b      	ldrh	r3, [r3, #4]
 80010ce:	f641 1263 	movw	r2, #6499	@ 0x1963
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d12e      	bne.n	8001134 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* ����ת�� */
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d82b      	bhi.n	8001134 <lcd_scan_dir+0x98>
 80010dc:	a201      	add	r2, pc, #4	@ (adr r2, 80010e4 <lcd_scan_dir+0x48>)
 80010de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e2:	bf00      	nop
 80010e4:	08001105 	.word	0x08001105
 80010e8:	0800110b 	.word	0x0800110b
 80010ec:	08001111 	.word	0x08001111
 80010f0:	08001117 	.word	0x08001117
 80010f4:	0800111d 	.word	0x0800111d
 80010f8:	08001123 	.word	0x08001123
 80010fc:	08001129 	.word	0x08001129
 8001100:	0800112f 	.word	0x0800112f
        {
            case 0:
                dir = 6;
 8001104:	2306      	movs	r3, #6
 8001106:	71fb      	strb	r3, [r7, #7]
                break;
 8001108:	e014      	b.n	8001134 <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 800110a:	2307      	movs	r3, #7
 800110c:	71fb      	strb	r3, [r7, #7]
                break;
 800110e:	e011      	b.n	8001134 <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 8001110:	2304      	movs	r3, #4
 8001112:	71fb      	strb	r3, [r7, #7]
                break;
 8001114:	e00e      	b.n	8001134 <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 8001116:	2305      	movs	r3, #5
 8001118:	71fb      	strb	r3, [r7, #7]
                break;
 800111a:	e00b      	b.n	8001134 <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 800111c:	2301      	movs	r3, #1
 800111e:	71fb      	strb	r3, [r7, #7]
                break;
 8001120:	e008      	b.n	8001134 <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	71fb      	strb	r3, [r7, #7]
                break;
 8001126:	e005      	b.n	8001134 <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 8001128:	2303      	movs	r3, #3
 800112a:	71fb      	strb	r3, [r7, #7]
                break;
 800112c:	e002      	b.n	8001134 <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 800112e:	2302      	movs	r3, #2
 8001130:	71fb      	strb	r3, [r7, #7]
                break;
 8001132:	bf00      	nop
        }
    }

    /* ����ɨ�跽ʽ ���� 0X36/0X3600 �Ĵ��� bit 5,6,7 λ��ֵ */
    switch (dir)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b07      	cmp	r3, #7
 8001138:	d835      	bhi.n	80011a6 <lcd_scan_dir+0x10a>
 800113a:	a201      	add	r2, pc, #4	@ (adr r2, 8001140 <lcd_scan_dir+0xa4>)
 800113c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001140:	080011a7 	.word	0x080011a7
 8001144:	08001161 	.word	0x08001161
 8001148:	0800116b 	.word	0x0800116b
 800114c:	08001175 	.word	0x08001175
 8001150:	0800117f 	.word	0x0800117f
 8001154:	08001189 	.word	0x08001189
 8001158:	08001193 	.word	0x08001193
 800115c:	0800119d 	.word	0x0800119d
        case L2R_U2D:/* ������,���ϵ��� */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* ������,���µ��� */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001160:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001166:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001168:	e01d      	b.n	80011a6 <lcd_scan_dir+0x10a>

        case R2L_U2D:/* ���ҵ���,���ϵ��� */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800116a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800116c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001170:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001172:	e018      	b.n	80011a6 <lcd_scan_dir+0x10a>

        case R2L_D2U:/* ���ҵ���,���µ��� */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001174:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001176:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800117a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 800117c:	e013      	b.n	80011a6 <lcd_scan_dir+0x10a>

        case U2D_L2R:/* ���ϵ���,������ */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800117e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001180:	f043 0320 	orr.w	r3, r3, #32
 8001184:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001186:	e00e      	b.n	80011a6 <lcd_scan_dir+0x10a>

        case U2D_R2L:/* ���ϵ���,���ҵ��� */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001188:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800118a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800118e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001190:	e009      	b.n	80011a6 <lcd_scan_dir+0x10a>

        case D2U_L2R:/* ���µ���,������ */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001192:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001194:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001198:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 800119a:	e004      	b.n	80011a6 <lcd_scan_dir+0x10a>

        case D2U_R2L:/* ���µ���,���ҵ��� */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 800119c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800119e:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80011a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 80011a4:	bf00      	nop
    }

    dirreg = 0X36;  /* �Ծ��󲿷�����IC, ��0X36�Ĵ������� */
 80011a6:	2336      	movs	r3, #54	@ 0x36
 80011a8:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (lcddev.id == 0X5510)
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <lcd_scan_dir+0x190>)
 80011ac:	889b      	ldrh	r3, [r3, #4]
 80011ae:	f245 5210 	movw	r2, #21776	@ 0x5510
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d102      	bne.n	80011bc <lcd_scan_dir+0x120>
    {
        dirreg = 0X3600;    /* ����5510, ����������ic�ļĴ����в��� */
 80011b6:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 80011ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* 9341 & 7789 & 7796 Ҫ����BGRλ */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <lcd_scan_dir+0x190>)
 80011be:	889b      	ldrh	r3, [r3, #4]
 80011c0:	f249 3241 	movw	r2, #37697	@ 0x9341
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00b      	beq.n	80011e0 <lcd_scan_dir+0x144>
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <lcd_scan_dir+0x190>)
 80011ca:	889b      	ldrh	r3, [r3, #4]
 80011cc:	f247 7289 	movw	r2, #30601	@ 0x7789
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d005      	beq.n	80011e0 <lcd_scan_dir+0x144>
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <lcd_scan_dir+0x190>)
 80011d6:	889b      	ldrh	r3, [r3, #4]
 80011d8:	f247 7296 	movw	r2, #30614	@ 0x7796
 80011dc:	4293      	cmp	r3, r2
 80011de:	d103      	bne.n	80011e8 <lcd_scan_dir+0x14c>
    {
        regval |= 0X08;
 80011e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    lcd_write_reg(dirreg, regval);
 80011e8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80011ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fbaa 	bl	8000948 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963�������괦�� */
 80011f4:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <lcd_scan_dir+0x190>)
 80011f6:	889b      	ldrh	r3, [r3, #4]
 80011f8:	f641 1263 	movw	r2, #6499	@ 0x1963
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d027      	beq.n	8001250 <lcd_scan_dir+0x1b4>
    {
        if (regval & 0X20)
 8001200:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	2b00      	cmp	r3, #0
 8001208:	d012      	beq.n	8001230 <lcd_scan_dir+0x194>
        {
            if (lcddev.width < lcddev.height)   /* ����X,Y */
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <lcd_scan_dir+0x190>)
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <lcd_scan_dir+0x190>)
 8001210:	885b      	ldrh	r3, [r3, #2]
 8001212:	429a      	cmp	r2, r3
 8001214:	d21c      	bcs.n	8001250 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 8001216:	4b05      	ldr	r3, [pc, #20]	@ (800122c <lcd_scan_dir+0x190>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <lcd_scan_dir+0x190>)
 800121e:	885a      	ldrh	r2, [r3, #2]
 8001220:	4b02      	ldr	r3, [pc, #8]	@ (800122c <lcd_scan_dir+0x190>)
 8001222:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8001224:	4a01      	ldr	r2, [pc, #4]	@ (800122c <lcd_scan_dir+0x190>)
 8001226:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001228:	8053      	strh	r3, [r2, #2]
 800122a:	e011      	b.n	8001250 <lcd_scan_dir+0x1b4>
 800122c:	2000007c 	.word	0x2000007c
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* ����X,Y */
 8001230:	4b9c      	ldr	r3, [pc, #624]	@ (80014a4 <lcd_scan_dir+0x408>)
 8001232:	881a      	ldrh	r2, [r3, #0]
 8001234:	4b9b      	ldr	r3, [pc, #620]	@ (80014a4 <lcd_scan_dir+0x408>)
 8001236:	885b      	ldrh	r3, [r3, #2]
 8001238:	429a      	cmp	r2, r3
 800123a:	d909      	bls.n	8001250 <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 800123c:	4b99      	ldr	r3, [pc, #612]	@ (80014a4 <lcd_scan_dir+0x408>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 8001242:	4b98      	ldr	r3, [pc, #608]	@ (80014a4 <lcd_scan_dir+0x408>)
 8001244:	885a      	ldrh	r2, [r3, #2]
 8001246:	4b97      	ldr	r3, [pc, #604]	@ (80014a4 <lcd_scan_dir+0x408>)
 8001248:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 800124a:	4a96      	ldr	r2, [pc, #600]	@ (80014a4 <lcd_scan_dir+0x408>)
 800124c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800124e:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* ������ʾ����(����)��С */
    if (lcddev.id == 0X5510)
 8001250:	4b94      	ldr	r3, [pc, #592]	@ (80014a4 <lcd_scan_dir+0x408>)
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001258:	4293      	cmp	r3, r2
 800125a:	f040 81af 	bne.w	80015bc <lcd_scan_dir+0x520>
    {
        lcd_wr_regno(lcddev.setxcmd);
 800125e:	4b91      	ldr	r3, [pc, #580]	@ (80014a4 <lcd_scan_dir+0x408>)
 8001260:	895b      	ldrh	r3, [r3, #10]
 8001262:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001264:	4b90      	ldr	r3, [pc, #576]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001266:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800126a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800126c:	4b8e      	ldr	r3, [pc, #568]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800126e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001272:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001274:	8bbb      	ldrh	r3, [r7, #28]
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b8c      	ldr	r3, [pc, #560]	@ (80014ac <lcd_scan_dir+0x410>)
 800127a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800127c:	4b8a      	ldr	r3, [pc, #552]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800127e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001282:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001284:	4b88      	ldr	r3, [pc, #544]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001286:	2280      	movs	r2, #128	@ 0x80
 8001288:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800128a:	4b87      	ldr	r3, [pc, #540]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800128c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001290:	611a      	str	r2, [r3, #16]
}
 8001292:	bf00      	nop
        lcd_wr_data(0);
 8001294:	4b84      	ldr	r3, [pc, #528]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001296:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	4b82      	ldr	r3, [pc, #520]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800129e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	4b81      	ldr	r3, [pc, #516]	@ (80014ac <lcd_scan_dir+0x410>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	4b7f      	ldr	r3, [pc, #508]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80012ac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	4b7d      	ldr	r3, [pc, #500]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	4b7b      	ldr	r3, [pc, #492]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80012ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012be:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 80012c0:	4b78      	ldr	r3, [pc, #480]	@ (80014a4 <lcd_scan_dir+0x408>)
 80012c2:	895b      	ldrh	r3, [r3, #10]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80012ca:	4b77      	ldr	r3, [pc, #476]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80012cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012d0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80012d2:	4b75      	ldr	r3, [pc, #468]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80012d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012d8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80012da:	8b7b      	ldrh	r3, [r7, #26]
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b73      	ldr	r3, [pc, #460]	@ (80014ac <lcd_scan_dir+0x410>)
 80012e0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80012e2:	4b71      	ldr	r3, [pc, #452]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80012e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012e8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80012ea:	4b6f      	ldr	r3, [pc, #444]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80012ec:	2280      	movs	r2, #128	@ 0x80
 80012ee:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80012f0:	4b6d      	ldr	r3, [pc, #436]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80012f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f6:	611a      	str	r2, [r3, #16]
}
 80012f8:	bf00      	nop
        lcd_wr_data(0);
 80012fa:	4b6b      	ldr	r3, [pc, #428]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80012fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	4b69      	ldr	r3, [pc, #420]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001304:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001308:	611a      	str	r2, [r3, #16]
 800130a:	4b68      	ldr	r3, [pc, #416]	@ (80014ac <lcd_scan_dir+0x410>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	4b65      	ldr	r3, [pc, #404]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001312:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	4b63      	ldr	r3, [pc, #396]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800131a:	2280      	movs	r2, #128	@ 0x80
 800131c:	611a      	str	r2, [r3, #16]
 800131e:	4b62      	ldr	r3, [pc, #392]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001324:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 2);
 8001326:	4b5f      	ldr	r3, [pc, #380]	@ (80014a4 <lcd_scan_dir+0x408>)
 8001328:	895b      	ldrh	r3, [r3, #10]
 800132a:	3302      	adds	r3, #2
 800132c:	b29b      	uxth	r3, r3
 800132e:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001330:	4b5d      	ldr	r3, [pc, #372]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001332:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001336:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001338:	4b5b      	ldr	r3, [pc, #364]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800133a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800133e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001340:	8b3b      	ldrh	r3, [r7, #24]
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b59      	ldr	r3, [pc, #356]	@ (80014ac <lcd_scan_dir+0x410>)
 8001346:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001348:	4b57      	ldr	r3, [pc, #348]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800134a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800134e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001350:	4b55      	ldr	r3, [pc, #340]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001352:	2280      	movs	r2, #128	@ 0x80
 8001354:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001356:	4b54      	ldr	r3, [pc, #336]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001358:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800135c:	611a      	str	r2, [r3, #16]
}
 800135e:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) >> 8);
 8001360:	4b51      	ldr	r3, [pc, #324]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001362:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001366:	611a      	str	r2, [r3, #16]
 8001368:	4b4f      	ldr	r3, [pc, #316]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800136a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	4b4c      	ldr	r3, [pc, #304]	@ (80014a4 <lcd_scan_dir+0x408>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	121a      	asrs	r2, r3, #8
 8001378:	4b4c      	ldr	r3, [pc, #304]	@ (80014ac <lcd_scan_dir+0x410>)
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	4b4a      	ldr	r3, [pc, #296]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800137e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	4b48      	ldr	r3, [pc, #288]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	4b47      	ldr	r3, [pc, #284]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800138c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001390:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 3);
 8001392:	4b44      	ldr	r3, [pc, #272]	@ (80014a4 <lcd_scan_dir+0x408>)
 8001394:	895b      	ldrh	r3, [r3, #10]
 8001396:	3303      	adds	r3, #3
 8001398:	b29b      	uxth	r3, r3
 800139a:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800139c:	4b42      	ldr	r3, [pc, #264]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800139e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013a2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80013a4:	4b40      	ldr	r3, [pc, #256]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80013a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013aa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80013ac:	8afb      	ldrh	r3, [r7, #22]
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b3e      	ldr	r3, [pc, #248]	@ (80014ac <lcd_scan_dir+0x410>)
 80013b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80013b4:	4b3c      	ldr	r3, [pc, #240]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80013b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80013bc:	4b3a      	ldr	r3, [pc, #232]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80013be:	2280      	movs	r2, #128	@ 0x80
 80013c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80013c2:	4b39      	ldr	r3, [pc, #228]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80013c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013c8:	611a      	str	r2, [r3, #16]
}
 80013ca:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 80013cc:	4b36      	ldr	r3, [pc, #216]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80013ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013d2:	611a      	str	r2, [r3, #16]
 80013d4:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80013d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	4b31      	ldr	r3, [pc, #196]	@ (80014a4 <lcd_scan_dir+0x408>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	4a32      	ldr	r2, [pc, #200]	@ (80014ac <lcd_scan_dir+0x410>)
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	60d3      	str	r3, [r2, #12]
 80013e8:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80013ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013ee:	611a      	str	r2, [r3, #16]
 80013f0:	4b2d      	ldr	r3, [pc, #180]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80013f2:	2280      	movs	r2, #128	@ 0x80
 80013f4:	611a      	str	r2, [r3, #16]
 80013f6:	4b2c      	ldr	r3, [pc, #176]	@ (80014a8 <lcd_scan_dir+0x40c>)
 80013f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013fc:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 80013fe:	4b29      	ldr	r3, [pc, #164]	@ (80014a4 <lcd_scan_dir+0x408>)
 8001400:	899b      	ldrh	r3, [r3, #12]
 8001402:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001404:	4b28      	ldr	r3, [pc, #160]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001406:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800140a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800140c:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800140e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001412:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001414:	8abb      	ldrh	r3, [r7, #20]
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <lcd_scan_dir+0x410>)
 800141a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800141c:	4b22      	ldr	r3, [pc, #136]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800141e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001422:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001424:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800142a:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800142c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001430:	611a      	str	r2, [r3, #16]
}
 8001432:	bf00      	nop
        lcd_wr_data(0);
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001436:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800143e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001442:	611a      	str	r2, [r3, #16]
 8001444:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <lcd_scan_dir+0x410>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800144c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001450:	611a      	str	r2, [r3, #16]
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	611a      	str	r2, [r3, #16]
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800145a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800145e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <lcd_scan_dir+0x408>)
 8001462:	899b      	ldrh	r3, [r3, #12]
 8001464:	3301      	adds	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800146a:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800146c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001470:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001474:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001478:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800147a:	8a7b      	ldrh	r3, [r7, #18]
 800147c:	b29a      	uxth	r2, r3
 800147e:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <lcd_scan_dir+0x410>)
 8001480:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001484:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001488:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800148c:	2280      	movs	r2, #128	@ 0x80
 800148e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <lcd_scan_dir+0x40c>)
 8001492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001496:	611a      	str	r2, [r3, #16]
}
 8001498:	bf00      	nop
        lcd_wr_data(0);
 800149a:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <lcd_scan_dir+0x40c>)
 800149c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	e005      	b.n	80014b0 <lcd_scan_dir+0x414>
 80014a4:	2000007c 	.word	0x2000007c
 80014a8:	40011000 	.word	0x40011000
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	4b3f      	ldr	r3, [pc, #252]	@ (80015b0 <lcd_scan_dir+0x514>)
 80014b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	4b3e      	ldr	r3, [pc, #248]	@ (80015b4 <lcd_scan_dir+0x518>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	4b3c      	ldr	r3, [pc, #240]	@ (80015b0 <lcd_scan_dir+0x514>)
 80014c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	4b3a      	ldr	r3, [pc, #232]	@ (80015b0 <lcd_scan_dir+0x514>)
 80014c8:	2280      	movs	r2, #128	@ 0x80
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	4b38      	ldr	r3, [pc, #224]	@ (80015b0 <lcd_scan_dir+0x514>)
 80014ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d2:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 2);
 80014d4:	4b38      	ldr	r3, [pc, #224]	@ (80015b8 <lcd_scan_dir+0x51c>)
 80014d6:	899b      	ldrh	r3, [r3, #12]
 80014d8:	3302      	adds	r3, #2
 80014da:	b29b      	uxth	r3, r3
 80014dc:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80014de:	4b34      	ldr	r3, [pc, #208]	@ (80015b0 <lcd_scan_dir+0x514>)
 80014e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014e4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80014e6:	4b32      	ldr	r3, [pc, #200]	@ (80015b0 <lcd_scan_dir+0x514>)
 80014e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014ec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80014ee:	8a3b      	ldrh	r3, [r7, #16]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b30      	ldr	r3, [pc, #192]	@ (80015b4 <lcd_scan_dir+0x518>)
 80014f4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80014f6:	4b2e      	ldr	r3, [pc, #184]	@ (80015b0 <lcd_scan_dir+0x514>)
 80014f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014fc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80014fe:	4b2c      	ldr	r3, [pc, #176]	@ (80015b0 <lcd_scan_dir+0x514>)
 8001500:	2280      	movs	r2, #128	@ 0x80
 8001502:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001504:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <lcd_scan_dir+0x514>)
 8001506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800150a:	611a      	str	r2, [r3, #16]
}
 800150c:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) >> 8);
 800150e:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <lcd_scan_dir+0x514>)
 8001510:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	4b26      	ldr	r3, [pc, #152]	@ (80015b0 <lcd_scan_dir+0x514>)
 8001518:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <lcd_scan_dir+0x51c>)
 8001520:	885b      	ldrh	r3, [r3, #2]
 8001522:	3b01      	subs	r3, #1
 8001524:	121a      	asrs	r2, r3, #8
 8001526:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <lcd_scan_dir+0x518>)
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <lcd_scan_dir+0x514>)
 800152c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <lcd_scan_dir+0x514>)
 8001534:	2280      	movs	r2, #128	@ 0x80
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <lcd_scan_dir+0x514>)
 800153a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800153e:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 3);
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <lcd_scan_dir+0x51c>)
 8001542:	899b      	ldrh	r3, [r3, #12]
 8001544:	3303      	adds	r3, #3
 8001546:	b29b      	uxth	r3, r3
 8001548:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <lcd_scan_dir+0x514>)
 800154c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001550:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <lcd_scan_dir+0x514>)
 8001554:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001558:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <lcd_scan_dir+0x518>)
 8001560:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <lcd_scan_dir+0x514>)
 8001564:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001568:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <lcd_scan_dir+0x514>)
 800156c:	2280      	movs	r2, #128	@ 0x80
 800156e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <lcd_scan_dir+0x514>)
 8001572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001576:	611a      	str	r2, [r3, #16]
}
 8001578:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <lcd_scan_dir+0x514>)
 800157c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001580:	611a      	str	r2, [r3, #16]
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <lcd_scan_dir+0x514>)
 8001584:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001588:	611a      	str	r2, [r3, #16]
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <lcd_scan_dir+0x51c>)
 800158c:	885b      	ldrh	r3, [r3, #2]
 800158e:	3b01      	subs	r3, #1
 8001590:	4a08      	ldr	r2, [pc, #32]	@ (80015b4 <lcd_scan_dir+0x518>)
 8001592:	b2db      	uxtb	r3, r3
 8001594:	60d3      	str	r3, [r2, #12]
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <lcd_scan_dir+0x514>)
 8001598:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <lcd_scan_dir+0x514>)
 80015a0:	2280      	movs	r2, #128	@ 0x80
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	4b02      	ldr	r3, [pc, #8]	@ (80015b0 <lcd_scan_dir+0x514>)
 80015a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015aa:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 80015ac:	e0f8      	b.n	80017a0 <lcd_scan_dir+0x704>
 80015ae:	bf00      	nop
 80015b0:	40011000 	.word	0x40011000
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	2000007c 	.word	0x2000007c
        lcd_wr_regno(lcddev.setxcmd);
 80015bc:	4b7a      	ldr	r3, [pc, #488]	@ (80017a8 <lcd_scan_dir+0x70c>)
 80015be:	895b      	ldrh	r3, [r3, #10]
 80015c0:	843b      	strh	r3, [r7, #32]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80015c2:	4b7a      	ldr	r3, [pc, #488]	@ (80017ac <lcd_scan_dir+0x710>)
 80015c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015c8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80015ca:	4b78      	ldr	r3, [pc, #480]	@ (80017ac <lcd_scan_dir+0x710>)
 80015cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015d0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80015d2:	8c3b      	ldrh	r3, [r7, #32]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	4b76      	ldr	r3, [pc, #472]	@ (80017b0 <lcd_scan_dir+0x714>)
 80015d8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80015da:	4b74      	ldr	r3, [pc, #464]	@ (80017ac <lcd_scan_dir+0x710>)
 80015dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015e0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80015e2:	4b72      	ldr	r3, [pc, #456]	@ (80017ac <lcd_scan_dir+0x710>)
 80015e4:	2280      	movs	r2, #128	@ 0x80
 80015e6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80015e8:	4b70      	ldr	r3, [pc, #448]	@ (80017ac <lcd_scan_dir+0x710>)
 80015ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ee:	611a      	str	r2, [r3, #16]
}
 80015f0:	bf00      	nop
        lcd_wr_data(0);
 80015f2:	4b6e      	ldr	r3, [pc, #440]	@ (80017ac <lcd_scan_dir+0x710>)
 80015f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	4b6c      	ldr	r3, [pc, #432]	@ (80017ac <lcd_scan_dir+0x710>)
 80015fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	4b6b      	ldr	r3, [pc, #428]	@ (80017b0 <lcd_scan_dir+0x714>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	4b68      	ldr	r3, [pc, #416]	@ (80017ac <lcd_scan_dir+0x710>)
 800160a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	4b66      	ldr	r3, [pc, #408]	@ (80017ac <lcd_scan_dir+0x710>)
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	4b65      	ldr	r3, [pc, #404]	@ (80017ac <lcd_scan_dir+0x710>)
 8001618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800161c:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 800161e:	4b63      	ldr	r3, [pc, #396]	@ (80017ac <lcd_scan_dir+0x710>)
 8001620:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	4b61      	ldr	r3, [pc, #388]	@ (80017ac <lcd_scan_dir+0x710>)
 8001628:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800162c:	611a      	str	r2, [r3, #16]
 800162e:	4b60      	ldr	r3, [pc, #384]	@ (80017b0 <lcd_scan_dir+0x714>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	4b5d      	ldr	r3, [pc, #372]	@ (80017ac <lcd_scan_dir+0x710>)
 8001636:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800163a:	611a      	str	r2, [r3, #16]
 800163c:	4b5b      	ldr	r3, [pc, #364]	@ (80017ac <lcd_scan_dir+0x710>)
 800163e:	2280      	movs	r2, #128	@ 0x80
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	4b5a      	ldr	r3, [pc, #360]	@ (80017ac <lcd_scan_dir+0x710>)
 8001644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001648:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) >> 8);
 800164a:	4b58      	ldr	r3, [pc, #352]	@ (80017ac <lcd_scan_dir+0x710>)
 800164c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001650:	611a      	str	r2, [r3, #16]
 8001652:	4b56      	ldr	r3, [pc, #344]	@ (80017ac <lcd_scan_dir+0x710>)
 8001654:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	4b53      	ldr	r3, [pc, #332]	@ (80017a8 <lcd_scan_dir+0x70c>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	3b01      	subs	r3, #1
 8001660:	121a      	asrs	r2, r3, #8
 8001662:	4b53      	ldr	r3, [pc, #332]	@ (80017b0 <lcd_scan_dir+0x714>)
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	4b51      	ldr	r3, [pc, #324]	@ (80017ac <lcd_scan_dir+0x710>)
 8001668:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	4b4f      	ldr	r3, [pc, #316]	@ (80017ac <lcd_scan_dir+0x710>)
 8001670:	2280      	movs	r2, #128	@ 0x80
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	4b4d      	ldr	r3, [pc, #308]	@ (80017ac <lcd_scan_dir+0x710>)
 8001676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800167a:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 800167c:	4b4b      	ldr	r3, [pc, #300]	@ (80017ac <lcd_scan_dir+0x710>)
 800167e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	4b49      	ldr	r3, [pc, #292]	@ (80017ac <lcd_scan_dir+0x710>)
 8001686:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	4b46      	ldr	r3, [pc, #280]	@ (80017a8 <lcd_scan_dir+0x70c>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	4a47      	ldr	r2, [pc, #284]	@ (80017b0 <lcd_scan_dir+0x714>)
 8001694:	b2db      	uxtb	r3, r3
 8001696:	60d3      	str	r3, [r2, #12]
 8001698:	4b44      	ldr	r3, [pc, #272]	@ (80017ac <lcd_scan_dir+0x710>)
 800169a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800169e:	611a      	str	r2, [r3, #16]
 80016a0:	4b42      	ldr	r3, [pc, #264]	@ (80017ac <lcd_scan_dir+0x710>)
 80016a2:	2280      	movs	r2, #128	@ 0x80
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	4b41      	ldr	r3, [pc, #260]	@ (80017ac <lcd_scan_dir+0x710>)
 80016a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ac:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 80016ae:	4b3e      	ldr	r3, [pc, #248]	@ (80017a8 <lcd_scan_dir+0x70c>)
 80016b0:	899b      	ldrh	r3, [r3, #12]
 80016b2:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80016b4:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <lcd_scan_dir+0x710>)
 80016b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016ba:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80016bc:	4b3b      	ldr	r3, [pc, #236]	@ (80017ac <lcd_scan_dir+0x710>)
 80016be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016c2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80016c4:	8bfb      	ldrh	r3, [r7, #30]
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b39      	ldr	r3, [pc, #228]	@ (80017b0 <lcd_scan_dir+0x714>)
 80016ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80016cc:	4b37      	ldr	r3, [pc, #220]	@ (80017ac <lcd_scan_dir+0x710>)
 80016ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80016d4:	4b35      	ldr	r3, [pc, #212]	@ (80017ac <lcd_scan_dir+0x710>)
 80016d6:	2280      	movs	r2, #128	@ 0x80
 80016d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80016da:	4b34      	ldr	r3, [pc, #208]	@ (80017ac <lcd_scan_dir+0x710>)
 80016dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016e0:	611a      	str	r2, [r3, #16]
}
 80016e2:	bf00      	nop
        lcd_wr_data(0);
 80016e4:	4b31      	ldr	r3, [pc, #196]	@ (80017ac <lcd_scan_dir+0x710>)
 80016e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ea:	611a      	str	r2, [r3, #16]
 80016ec:	4b2f      	ldr	r3, [pc, #188]	@ (80017ac <lcd_scan_dir+0x710>)
 80016ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	4b2e      	ldr	r3, [pc, #184]	@ (80017b0 <lcd_scan_dir+0x714>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	4b2c      	ldr	r3, [pc, #176]	@ (80017ac <lcd_scan_dir+0x710>)
 80016fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	4b2a      	ldr	r3, [pc, #168]	@ (80017ac <lcd_scan_dir+0x710>)
 8001704:	2280      	movs	r2, #128	@ 0x80
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	4b28      	ldr	r3, [pc, #160]	@ (80017ac <lcd_scan_dir+0x710>)
 800170a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800170e:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 8001710:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <lcd_scan_dir+0x710>)
 8001712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <lcd_scan_dir+0x710>)
 800171a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800171e:	611a      	str	r2, [r3, #16]
 8001720:	4b23      	ldr	r3, [pc, #140]	@ (80017b0 <lcd_scan_dir+0x714>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <lcd_scan_dir+0x710>)
 8001728:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800172c:	611a      	str	r2, [r3, #16]
 800172e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <lcd_scan_dir+0x710>)
 8001730:	2280      	movs	r2, #128	@ 0x80
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <lcd_scan_dir+0x710>)
 8001736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800173a:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <lcd_scan_dir+0x710>)
 800173e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001742:	611a      	str	r2, [r3, #16]
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <lcd_scan_dir+0x710>)
 8001746:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800174a:	611a      	str	r2, [r3, #16]
 800174c:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <lcd_scan_dir+0x70c>)
 800174e:	885b      	ldrh	r3, [r3, #2]
 8001750:	3b01      	subs	r3, #1
 8001752:	121a      	asrs	r2, r3, #8
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <lcd_scan_dir+0x714>)
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <lcd_scan_dir+0x710>)
 800175a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800175e:	611a      	str	r2, [r3, #16]
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <lcd_scan_dir+0x710>)
 8001762:	2280      	movs	r2, #128	@ 0x80
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <lcd_scan_dir+0x710>)
 8001768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176c:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <lcd_scan_dir+0x710>)
 8001770:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001774:	611a      	str	r2, [r3, #16]
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <lcd_scan_dir+0x710>)
 8001778:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800177c:	611a      	str	r2, [r3, #16]
 800177e:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <lcd_scan_dir+0x70c>)
 8001780:	885b      	ldrh	r3, [r3, #2]
 8001782:	3b01      	subs	r3, #1
 8001784:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <lcd_scan_dir+0x714>)
 8001786:	b2db      	uxtb	r3, r3
 8001788:	60d3      	str	r3, [r2, #12]
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <lcd_scan_dir+0x710>)
 800178c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001790:	611a      	str	r2, [r3, #16]
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <lcd_scan_dir+0x710>)
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	4b04      	ldr	r3, [pc, #16]	@ (80017ac <lcd_scan_dir+0x710>)
 800179a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800179e:	611a      	str	r2, [r3, #16]
}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	@ 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000007c 	.word	0x2000007c
 80017ac:	40011000 	.word	0x40011000
 80017b0:	40010c00 	.word	0x40010c00

080017b4 <lcd_draw_point>:
 * @param       x,y: ����
 * @param       color: �����ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	603a      	str	r2, [r7, #0]
 80017be:	80fb      	strh	r3, [r7, #6]
 80017c0:	460b      	mov	r3, r1
 80017c2:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* ���ù��λ�� */
 80017c4:	88ba      	ldrh	r2, [r7, #4]
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f952 	bl	8000a74 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 80017d0:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <lcd_draw_point+0x88>)
 80017d2:	891b      	ldrh	r3, [r3, #8]
 80017d4:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <lcd_draw_point+0x8c>)
 80017d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017dc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80017de:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <lcd_draw_point+0x8c>)
 80017e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017e4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80017e6:	89fb      	ldrh	r3, [r7, #14]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <lcd_draw_point+0x90>)
 80017ec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <lcd_draw_point+0x8c>)
 80017f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017f4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <lcd_draw_point+0x8c>)
 80017f8:	2280      	movs	r2, #128	@ 0x80
 80017fa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <lcd_draw_point+0x8c>)
 80017fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001802:	611a      	str	r2, [r3, #16]
}
 8001804:	bf00      	nop
}
 8001806:	bf00      	nop
    lcd_write_ram_prepare();    /* ��ʼд��GRAM */
    lcd_wr_data(color);
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <lcd_draw_point+0x8c>)
 800180a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <lcd_draw_point+0x8c>)
 8001812:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <lcd_draw_point+0x90>)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	60d3      	str	r3, [r2, #12]
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <lcd_draw_point+0x8c>)
 8001820:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <lcd_draw_point+0x8c>)
 8001828:	2280      	movs	r2, #128	@ 0x80
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <lcd_draw_point+0x8c>)
 800182e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001832:	611a      	str	r2, [r3, #16]
}
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000007c 	.word	0x2000007c
 8001840:	40011000 	.word	0x40011000
 8001844:	40010c00 	.word	0x40010c00

08001848 <lcd_ssd_backlight_set>:
 * @brief       SSD1963�����������ú���
 * @param       pwm: ����ȼ�,0~100.Խ��Խ��.
 * @retval      ��
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
 8001852:	23be      	movs	r3, #190	@ 0xbe
 8001854:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001856:	4b5a      	ldr	r3, [pc, #360]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001858:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800185c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800185e:	4b58      	ldr	r3, [pc, #352]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001860:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001864:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001866:	89fb      	ldrh	r3, [r7, #14]
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b56      	ldr	r3, [pc, #344]	@ (80019c4 <lcd_ssd_backlight_set+0x17c>)
 800186c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800186e:	4b54      	ldr	r3, [pc, #336]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001870:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001874:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001876:	4b52      	ldr	r3, [pc, #328]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001878:	2280      	movs	r2, #128	@ 0x80
 800187a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800187c:	4b50      	ldr	r3, [pc, #320]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 800187e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001882:	611a      	str	r2, [r3, #16]
}
 8001884:	bf00      	nop
    lcd_wr_regno(0xBE);         /* ����PWM��� */
    lcd_wr_data(0x05);          /* 1����PWMƵ�� */
 8001886:	4b4e      	ldr	r3, [pc, #312]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001888:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	4b4c      	ldr	r3, [pc, #304]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001890:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001894:	611a      	str	r2, [r3, #16]
 8001896:	4b4b      	ldr	r3, [pc, #300]	@ (80019c4 <lcd_ssd_backlight_set+0x17c>)
 8001898:	2205      	movs	r2, #5
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	4b48      	ldr	r3, [pc, #288]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 800189e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	4b46      	ldr	r3, [pc, #280]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 80018a6:	2280      	movs	r2, #128	@ 0x80
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	4b45      	ldr	r3, [pc, #276]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 80018ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018b0:	611a      	str	r2, [r3, #16]
    lcd_wr_data(pwm * 2.55);    /* 2����PWMռ�ձ� */
 80018b2:	4b43      	ldr	r3, [pc, #268]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 80018b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018b8:	611a      	str	r2, [r3, #16]
 80018ba:	4b41      	ldr	r3, [pc, #260]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 80018bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018c0:	611a      	str	r2, [r3, #16]
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe ff2b 	bl	8000720 <__aeabi_i2d>
 80018ca:	a33b      	add	r3, pc, #236	@ (adr r3, 80019b8 <lcd_ssd_backlight_set+0x170>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe fcaa 	bl	8000228 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4c3a      	ldr	r4, [pc, #232]	@ (80019c4 <lcd_ssd_backlight_set+0x17c>)
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f7fe ff89 	bl	80007f4 <__aeabi_d2uiz>
 80018e2:	4603      	mov	r3, r0
 80018e4:	60e3      	str	r3, [r4, #12]
 80018e6:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 80018e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	4b34      	ldr	r3, [pc, #208]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 80018f0:	2280      	movs	r2, #128	@ 0x80
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	4b32      	ldr	r3, [pc, #200]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 80018f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018fa:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x01);          /* 3����C */
 80018fc:	4b30      	ldr	r3, [pc, #192]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 80018fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	4b2e      	ldr	r3, [pc, #184]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001906:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800190a:	611a      	str	r2, [r3, #16]
 800190c:	4b2d      	ldr	r3, [pc, #180]	@ (80019c4 <lcd_ssd_backlight_set+0x17c>)
 800190e:	2201      	movs	r2, #1
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	4b2b      	ldr	r3, [pc, #172]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001914:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	4b29      	ldr	r3, [pc, #164]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 800191c:	2280      	movs	r2, #128	@ 0x80
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	4b27      	ldr	r3, [pc, #156]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001926:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0xFF);          /* 4����D */
 8001928:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 800192a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800192e:	611a      	str	r2, [r3, #16]
 8001930:	4b23      	ldr	r3, [pc, #140]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001932:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001936:	611a      	str	r2, [r3, #16]
 8001938:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <lcd_ssd_backlight_set+0x17c>)
 800193a:	22ff      	movs	r2, #255	@ 0xff
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001940:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001948:	2280      	movs	r2, #128	@ 0x80
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	4b1c      	ldr	r3, [pc, #112]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 800194e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001952:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 5����E */
 8001954:	4b1a      	ldr	r3, [pc, #104]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001956:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 800195e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001962:	611a      	str	r2, [r3, #16]
 8001964:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <lcd_ssd_backlight_set+0x17c>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 800196c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001974:	2280      	movs	r2, #128	@ 0x80
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 800197a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800197e:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 6����F */
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001982:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001986:	611a      	str	r2, [r3, #16]
 8001988:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 800198a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <lcd_ssd_backlight_set+0x17c>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 8001998:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 80019a0:	2280      	movs	r2, #128	@ 0x80
 80019a2:	611a      	str	r2, [r3, #16]
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <lcd_ssd_backlight_set+0x178>)
 80019a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019aa:	611a      	str	r2, [r3, #16]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	f3af 8000 	nop.w
 80019b8:	66666666 	.word	0x66666666
 80019bc:	40046666 	.word	0x40046666
 80019c0:	40011000 	.word	0x40011000
 80019c4:	40010c00 	.word	0x40010c00

080019c8 <lcd_display_dir>:
 * @brief       ����LCD��ʾ����
 * @param       dir:0,����; 1,����
 * @retval      ��
 */
void lcd_display_dir(uint8_t dir)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* ����/���� */
 80019d2:	4a68      	ldr	r2, [pc, #416]	@ (8001b74 <lcd_display_dir+0x1ac>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* ���� */
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d165      	bne.n	8001aaa <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 80019de:	4b65      	ldr	r3, [pc, #404]	@ (8001b74 <lcd_display_dir+0x1ac>)
 80019e0:	22f0      	movs	r2, #240	@ 0xf0
 80019e2:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 80019e4:	4b63      	ldr	r3, [pc, #396]	@ (8001b74 <lcd_display_dir+0x1ac>)
 80019e6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019ea:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 80019ec:	4b61      	ldr	r3, [pc, #388]	@ (8001b74 <lcd_display_dir+0x1ac>)
 80019ee:	889b      	ldrh	r3, [r3, #4]
 80019f0:	f245 5210 	movw	r2, #21776	@ 0x5510
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d114      	bne.n	8001a22 <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 80019f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b74 <lcd_display_dir+0x1ac>)
 80019fa:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80019fe:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001a00:	4b5c      	ldr	r3, [pc, #368]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a02:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001a06:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001a08:	4b5a      	ldr	r3, [pc, #360]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a0a:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001a0e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8001a10:	4b58      	ldr	r3, [pc, #352]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a12:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001a16:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001a18:	4b56      	ldr	r3, [pc, #344]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a1a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001a1e:	805a      	strh	r2, [r3, #2]
 8001a20:	e020      	b.n	8001a64 <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 8001a22:	4b54      	ldr	r3, [pc, #336]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a24:	889b      	ldrh	r3, [r3, #4]
 8001a26:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d111      	bne.n	8001a52 <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001a2e:	4b51      	ldr	r3, [pc, #324]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a30:	222c      	movs	r2, #44	@ 0x2c
 8001a32:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* ����дX����ָ�� */
 8001a34:	4b4f      	ldr	r3, [pc, #316]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a36:	222b      	movs	r2, #43	@ 0x2b
 8001a38:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* ����дY����ָ�� */
 8001a3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a3c:	222a      	movs	r2, #42	@ 0x2a
 8001a3e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* ���ÿ��480 */
 8001a40:	4b4c      	ldr	r3, [pc, #304]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a42:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001a46:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* ���ø߶�800 */
 8001a48:	4b4a      	ldr	r3, [pc, #296]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a4a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001a4e:	805a      	strh	r2, [r3, #2]
 8001a50:	e008      	b.n	8001a64 <lcd_display_dir+0x9c>
        }
        else   /* ����IC, ����: 9341 / 5310 / 7789 / 7796 / 9806 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001a52:	4b48      	ldr	r3, [pc, #288]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a54:	222c      	movs	r2, #44	@ 0x2c
 8001a56:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001a58:	4b46      	ldr	r3, [pc, #280]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a5a:	222a      	movs	r2, #42	@ 0x2a
 8001a5c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001a5e:	4b45      	ldr	r3, [pc, #276]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a60:	222b      	movs	r2, #43	@ 0x2b
 8001a62:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001a64:	4b43      	ldr	r3, [pc, #268]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a66:	889b      	ldrh	r3, [r3, #4]
 8001a68:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d005      	beq.n	8001a7c <lcd_display_dir+0xb4>
 8001a70:	4b40      	ldr	r3, [pc, #256]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a72:	889b      	ldrh	r3, [r3, #4]
 8001a74:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d107      	bne.n	8001a8c <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a7e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001a82:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001a84:	4b3b      	ldr	r3, [pc, #236]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a86:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001a8a:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* �����9806 ���ʾ�� 480*800 �ֱ��� */
 8001a8c:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a8e:	889b      	ldrh	r3, [r3, #4]
 8001a90:	f649 0206 	movw	r2, #38918	@ 0x9806
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d165      	bne.n	8001b64 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001a98:	4b36      	ldr	r3, [pc, #216]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001a9a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001a9e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001aa0:	4b34      	ldr	r3, [pc, #208]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001aa2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001aa6:	805a      	strh	r2, [r3, #2]
 8001aa8:	e05c      	b.n	8001b64 <lcd_display_dir+0x19c>
        }
    }
    else                /* ���� */
    {
        lcddev.width = 320;         /* Ĭ�Ͽ�� */
 8001aaa:	4b32      	ldr	r3, [pc, #200]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001aac:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ab0:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Ĭ�ϸ߶� */
 8001ab2:	4b30      	ldr	r3, [pc, #192]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001ab4:	22f0      	movs	r2, #240	@ 0xf0
 8001ab6:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001aba:	889b      	ldrh	r3, [r3, #4]
 8001abc:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d114      	bne.n	8001aee <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001ac6:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001aca:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001acc:	4b29      	ldr	r3, [pc, #164]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001ace:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001ad2:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001ad4:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001ad6:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001ada:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8001adc:	4b25      	ldr	r3, [pc, #148]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001ade:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001ae2:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001ae4:	4b23      	ldr	r3, [pc, #140]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001ae6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001aea:	805a      	strh	r2, [r3, #2]
 8001aec:	e026      	b.n	8001b3c <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8001aee:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001af0:	889b      	ldrh	r3, [r3, #4]
 8001af2:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d005      	beq.n	8001b06 <lcd_display_dir+0x13e>
 8001afa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001afc:	889b      	ldrh	r3, [r3, #4]
 8001afe:	f649 0206 	movw	r2, #38918	@ 0x9806
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d111      	bne.n	8001b2a <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001b08:	222c      	movs	r2, #44	@ 0x2c
 8001b0a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* ����дX����ָ�� */
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001b0e:	222a      	movs	r2, #42	@ 0x2a
 8001b10:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* ����дY����ָ�� */
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001b14:	222b      	movs	r2, #43	@ 0x2b
 8001b16:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* ���ÿ��800 */
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001b1a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b1e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* ���ø߶�480 */
 8001b20:	4b14      	ldr	r3, [pc, #80]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001b22:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b26:	805a      	strh	r2, [r3, #2]
 8001b28:	e008      	b.n	8001b3c <lcd_display_dir+0x174>
        }
        else     /* ����IC, ����: 9341 / 5310 / 7789 / 7796 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001b2c:	222c      	movs	r2, #44	@ 0x2c
 8001b2e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001b30:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001b32:	222a      	movs	r2, #42	@ 0x2a
 8001b34:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001b36:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001b38:	222b      	movs	r2, #43	@ 0x2b
 8001b3a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001b3e:	889b      	ldrh	r3, [r3, #4]
 8001b40:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d005      	beq.n	8001b54 <lcd_display_dir+0x18c>
 8001b48:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001b4a:	889b      	ldrh	r3, [r3, #4]
 8001b4c:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d107      	bne.n	8001b64 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001b54:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001b56:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b5a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <lcd_display_dir+0x1ac>)
 8001b5e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b62:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Ĭ��ɨ�跽�� */
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff fa99 	bl	800109c <lcd_scan_dir>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000007c 	.word	0x2000007c

08001b78 <lcd_init>:
 *
 * @param       ��
 * @retval      ��
 */
void lcd_init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0da      	sub	sp, #360	@ 0x168
 8001b7c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_struct;
    
    LCD_BL_GPIO_CLK_ENABLE();   /* LCD_BL��ʱ��ʹ�� */
 8001b7e:	4bbe      	ldr	r3, [pc, #760]	@ (8001e78 <lcd_init+0x300>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	4abd      	ldr	r2, [pc, #756]	@ (8001e78 <lcd_init+0x300>)
 8001b84:	f043 0310 	orr.w	r3, r3, #16
 8001b88:	6193      	str	r3, [r2, #24]
 8001b8a:	4bbb      	ldr	r3, [pc, #748]	@ (8001e78 <lcd_init+0x300>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0210 	and.w	r2, r3, #16
 8001b92:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001b96:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ba0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001ba4:	681b      	ldr	r3, [r3, #0]
    LCD_CS_GPIO_CLK_ENABLE();   /* LCD_CS��ʱ��ʹ�� */
 8001ba6:	4bb4      	ldr	r3, [pc, #720]	@ (8001e78 <lcd_init+0x300>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	4ab3      	ldr	r2, [pc, #716]	@ (8001e78 <lcd_init+0x300>)
 8001bac:	f043 0310 	orr.w	r3, r3, #16
 8001bb0:	6193      	str	r3, [r2, #24]
 8001bb2:	4bb1      	ldr	r3, [pc, #708]	@ (8001e78 <lcd_init+0x300>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 0210 	and.w	r2, r3, #16
 8001bba:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001bbe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001bc8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001bcc:	681b      	ldr	r3, [r3, #0]
    LCD_WR_GPIO_CLK_ENABLE();   /* LCD_WR��ʱ��ʹ�� */
 8001bce:	4baa      	ldr	r3, [pc, #680]	@ (8001e78 <lcd_init+0x300>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	4aa9      	ldr	r2, [pc, #676]	@ (8001e78 <lcd_init+0x300>)
 8001bd4:	f043 0310 	orr.w	r3, r3, #16
 8001bd8:	6193      	str	r3, [r2, #24]
 8001bda:	4ba7      	ldr	r3, [pc, #668]	@ (8001e78 <lcd_init+0x300>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f003 0210 	and.w	r2, r3, #16
 8001be2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001be6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001bf0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001bf4:	681b      	ldr	r3, [r3, #0]
    LCD_RD_GPIO_CLK_ENABLE();   /* LCD_RD��ʱ��ʹ�� */
 8001bf6:	4ba0      	ldr	r3, [pc, #640]	@ (8001e78 <lcd_init+0x300>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	4a9f      	ldr	r2, [pc, #636]	@ (8001e78 <lcd_init+0x300>)
 8001bfc:	f043 0310 	orr.w	r3, r3, #16
 8001c00:	6193      	str	r3, [r2, #24]
 8001c02:	4b9d      	ldr	r3, [pc, #628]	@ (8001e78 <lcd_init+0x300>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 0210 	and.w	r2, r3, #16
 8001c0a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c0e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c18:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001c1c:	681b      	ldr	r3, [r3, #0]
    LCD_RS_GPIO_CLK_ENABLE();   /* LCD_RS��ʱ��ʹ�� */
 8001c1e:	4b96      	ldr	r3, [pc, #600]	@ (8001e78 <lcd_init+0x300>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	4a95      	ldr	r2, [pc, #596]	@ (8001e78 <lcd_init+0x300>)
 8001c24:	f043 0310 	orr.w	r3, r3, #16
 8001c28:	6193      	str	r3, [r2, #24]
 8001c2a:	4b93      	ldr	r3, [pc, #588]	@ (8001e78 <lcd_init+0x300>)
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f003 0210 	and.w	r2, r3, #16
 8001c32:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c36:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c40:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c44:	681b      	ldr	r3, [r3, #0]
    LCD_DATA_GPIO_CLK_ENABLE(); /* LCD_DATA��ʱ��ʹ�� */
 8001c46:	4b8c      	ldr	r3, [pc, #560]	@ (8001e78 <lcd_init+0x300>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	4a8b      	ldr	r2, [pc, #556]	@ (8001e78 <lcd_init+0x300>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6193      	str	r3, [r2, #24]
 8001c52:	4b89      	ldr	r3, [pc, #548]	@ (8001e78 <lcd_init+0x300>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f003 0208 	and.w	r2, r3, #8
 8001c5a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c5e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c68:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c6c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_AFIO_CLK_ENABLE();
 8001c6e:	4b82      	ldr	r3, [pc, #520]	@ (8001e78 <lcd_init+0x300>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	4a81      	ldr	r2, [pc, #516]	@ (8001e78 <lcd_init+0x300>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6193      	str	r3, [r2, #24]
 8001c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e78 <lcd_init+0x300>)
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f003 0201 	and.w	r2, r3, #1
 8001c82:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c86:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001c90:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c94:	681b      	ldr	r3, [r3, #0]
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); /* ��ֹJTAG, ʹ��SWD, �ͷ�PB3,PB4������������ͨIO�� */
 8001c96:	4b79      	ldr	r3, [pc, #484]	@ (8001e7c <lcd_init+0x304>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c9e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001ca2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ca6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001caa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001cae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001cb6:	4a71      	ldr	r2, [pc, #452]	@ (8001e7c <lcd_init+0x304>)
 8001cb8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001cbc:	6053      	str	r3, [r2, #4]
    
    gpio_init_struct.Pin = LCD_BL_GPIO_PIN;
 8001cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cc2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;               
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &gpio_init_struct);     /* LCD_BL����ģʽ����(�������) */
 8001cd8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4868      	ldr	r0, [pc, #416]	@ (8001e80 <lcd_init+0x308>)
 8001ce0:	f005 fbd4 	bl	800748c <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_CS_GPIO_PIN;
 8001ce4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ce8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ���츴�� */
 8001cec:	2301      	movs	r3, #1
 8001cee:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    /* ���� */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          /* ���� */
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_CS���� */
 8001cfe:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d02:	4619      	mov	r1, r3
 8001d04:	485e      	ldr	r0, [pc, #376]	@ (8001e80 <lcd_init+0x308>)
 8001d06:	f005 fbc1 	bl	800748c <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_WR_GPIO_PIN;
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_WR���� */
 8001d10:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d14:	4619      	mov	r1, r3
 8001d16:	485a      	ldr	r0, [pc, #360]	@ (8001e80 <lcd_init+0x308>)
 8001d18:	f005 fbb8 	bl	800748c <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RD_GPIO_PIN;
 8001d1c:	2340      	movs	r3, #64	@ 0x40
 8001d1e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RD���� */
 8001d22:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d26:	4619      	mov	r1, r3
 8001d28:	4855      	ldr	r0, [pc, #340]	@ (8001e80 <lcd_init+0x308>)
 8001d2a:	f005 fbaf 	bl	800748c <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RS_GPIO_PIN;
 8001d2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d32:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RS���� */
 8001d36:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4850      	ldr	r0, [pc, #320]	@ (8001e80 <lcd_init+0x308>)
 8001d3e:	f005 fba5 	bl	800748c <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8001d42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d46:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ������� */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);   /* LCD_DATA����ģʽ���� */
 8001d50:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001d54:	4619      	mov	r1, r3
 8001d56:	484b      	ldr	r0, [pc, #300]	@ (8001e84 <lcd_init+0x30c>)
 8001d58:	f005 fb98 	bl	800748c <HAL_GPIO_Init>
    LCD_WR(1);                  /* WR Ĭ�ϸߵ�ƽ */
 8001d5c:	4b48      	ldr	r3, [pc, #288]	@ (8001e80 <lcd_init+0x308>)
 8001d5e:	2280      	movs	r2, #128	@ 0x80
 8001d60:	611a      	str	r2, [r3, #16]
    LCD_RD(1);                  /* RD Ĭ�ϸߵ�ƽ */
 8001d62:	4b47      	ldr	r3, [pc, #284]	@ (8001e80 <lcd_init+0x308>)
 8001d64:	2240      	movs	r2, #64	@ 0x40
 8001d66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);                  /* CS Ĭ�ϸߵ�ƽ */
 8001d68:	4b45      	ldr	r3, [pc, #276]	@ (8001e80 <lcd_init+0x308>)
 8001d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d6e:	611a      	str	r2, [r3, #16]
    LCD_RS(1);                  /* RS Ĭ�ϸߵ�ƽ */
 8001d70:	4b43      	ldr	r3, [pc, #268]	@ (8001e80 <lcd_init+0x308>)
 8001d72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d76:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(0XFFFF);       /* DATA Ĭ�ϸߵ�ƽ */
 8001d78:	4b42      	ldr	r3, [pc, #264]	@ (8001e84 <lcd_init+0x30c>)
 8001d7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d7e:	60da      	str	r2, [r3, #12]

    lcd_opt_delay(0X1FFFF);
 8001d80:	4841      	ldr	r0, [pc, #260]	@ (8001e88 <lcd_init+0x310>)
 8001d82:	f7fe fe23 	bl	80009cc <lcd_opt_delay>
 8001d86:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001d8a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d8e:	22d3      	movs	r2, #211	@ 0xd3
 8001d90:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001d92:	4b3b      	ldr	r3, [pc, #236]	@ (8001e80 <lcd_init+0x308>)
 8001d94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d98:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001d9a:	4b39      	ldr	r3, [pc, #228]	@ (8001e80 <lcd_init+0x308>)
 8001d9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001da0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001da2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001da6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	4b35      	ldr	r3, [pc, #212]	@ (8001e84 <lcd_init+0x30c>)
 8001db0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001db2:	4b33      	ldr	r3, [pc, #204]	@ (8001e80 <lcd_init+0x308>)
 8001db4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001db8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001dba:	4b31      	ldr	r3, [pc, #196]	@ (8001e80 <lcd_init+0x308>)
 8001dbc:	2280      	movs	r2, #128	@ 0x80
 8001dbe:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001e80 <lcd_init+0x308>)
 8001dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc6:	611a      	str	r2, [r3, #16]
}
 8001dc8:	bf00      	nop

    /* ����9341 ID�Ķ�ȡ */
    lcd_wr_regno(0XD3);
    lcddev.id = lcd_rd_data();  /* dummy read */
 8001dca:	f7fe fe0f 	bl	80009ec <lcd_rd_data>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e8c <lcd_init+0x314>)
 8001dd4:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ����0X00 */
 8001dd6:	f7fe fe09 	bl	80009ec <lcd_rd_data>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <lcd_init+0x314>)
 8001de0:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ��ȡ0X93 */
 8001de2:	f7fe fe03 	bl	80009ec <lcd_rd_data>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <lcd_init+0x314>)
 8001dec:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 8001dee:	4b27      	ldr	r3, [pc, #156]	@ (8001e8c <lcd_init+0x314>)
 8001df0:	889b      	ldrh	r3, [r3, #4]
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <lcd_init+0x314>)
 8001df8:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* ��ȡ0X41 */
 8001dfa:	f7fe fdf7 	bl	80009ec <lcd_rd_data>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <lcd_init+0x314>)
 8001e04:	889b      	ldrh	r3, [r3, #4]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <lcd_init+0x314>)
 8001e0c:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* ���� 9341 , ���Կ����ǲ��� ST7789 */
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <lcd_init+0x314>)
 8001e10:	889b      	ldrh	r3, [r3, #4]
 8001e12:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001e16:	4293      	cmp	r3, r2
 8001e18:	f000 820e 	beq.w	8002238 <lcd_init+0x6c0>
 8001e1c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e20:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8001e24:	2204      	movs	r2, #4
 8001e26:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001e28:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <lcd_init+0x308>)
 8001e2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e2e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001e30:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <lcd_init+0x308>)
 8001e32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e36:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001e38:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001e3c:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <lcd_init+0x30c>)
 8001e46:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <lcd_init+0x308>)
 8001e4a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e4e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <lcd_init+0x308>)
 8001e52:	2280      	movs	r2, #128	@ 0x80
 8001e54:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <lcd_init+0x308>)
 8001e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e5c:	611a      	str	r2, [r3, #16]
}
 8001e5e:	bf00      	nop
    {
        lcd_wr_regno(0X04);
        lcddev.id = lcd_rd_data();      /* dummy read */
 8001e60:	f7fe fdc4 	bl	80009ec <lcd_rd_data>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <lcd_init+0x314>)
 8001e6a:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ����0X85 */
 8001e6c:	f7fe fdbe 	bl	80009ec <lcd_rd_data>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	e00c      	b.n	8001e90 <lcd_init+0x318>
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40011000 	.word	0x40011000
 8001e84:	40010c00 	.word	0x40010c00
 8001e88:	0001ffff 	.word	0x0001ffff
 8001e8c:	2000007c 	.word	0x2000007c
 8001e90:	4bb1      	ldr	r3, [pc, #708]	@ (8002158 <lcd_init+0x5e0>)
 8001e92:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ��ȡ0X85 */
 8001e94:	f7fe fdaa 	bl	80009ec <lcd_rd_data>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4bae      	ldr	r3, [pc, #696]	@ (8002158 <lcd_init+0x5e0>)
 8001e9e:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8001ea0:	4bad      	ldr	r3, [pc, #692]	@ (8002158 <lcd_init+0x5e0>)
 8001ea2:	889b      	ldrh	r3, [r3, #4]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	4bab      	ldr	r3, [pc, #684]	@ (8002158 <lcd_init+0x5e0>)
 8001eaa:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* ��ȡ0X52 */
 8001eac:	f7fe fd9e 	bl	80009ec <lcd_rd_data>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4ba8      	ldr	r3, [pc, #672]	@ (8002158 <lcd_init+0x5e0>)
 8001eb6:	889b      	ldrh	r3, [r3, #4]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	4ba6      	ldr	r3, [pc, #664]	@ (8002158 <lcd_init+0x5e0>)
 8001ebe:	809a      	strh	r2, [r3, #4]
        
        if (lcddev.id == 0X8552)        /* ��8552��IDת����7789 */
 8001ec0:	4ba5      	ldr	r3, [pc, #660]	@ (8002158 <lcd_init+0x5e0>)
 8001ec2:	889b      	ldrh	r3, [r3, #4]
 8001ec4:	f248 5252 	movw	r2, #34130	@ 0x8552
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d103      	bne.n	8001ed4 <lcd_init+0x35c>
        {
            lcddev.id = 0x7789;
 8001ecc:	4ba2      	ldr	r3, [pc, #648]	@ (8002158 <lcd_init+0x5e0>)
 8001ece:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001ed2:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Ҳ����ST7789, �����ǲ��� NT35310 */
 8001ed4:	4ba0      	ldr	r3, [pc, #640]	@ (8002158 <lcd_init+0x5e0>)
 8001ed6:	889b      	ldrh	r3, [r3, #4]
 8001ed8:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001edc:	4293      	cmp	r3, r2
 8001ede:	f000 81ab 	beq.w	8002238 <lcd_init+0x6c0>
 8001ee2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001ee6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001eea:	22d4      	movs	r2, #212	@ 0xd4
 8001eec:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001eee:	4b9b      	ldr	r3, [pc, #620]	@ (800215c <lcd_init+0x5e4>)
 8001ef0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ef4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001ef6:	4b99      	ldr	r3, [pc, #612]	@ (800215c <lcd_init+0x5e4>)
 8001ef8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001efc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001efe:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f02:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	4b95      	ldr	r3, [pc, #596]	@ (8002160 <lcd_init+0x5e8>)
 8001f0c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001f0e:	4b93      	ldr	r3, [pc, #588]	@ (800215c <lcd_init+0x5e4>)
 8001f10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f14:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001f16:	4b91      	ldr	r3, [pc, #580]	@ (800215c <lcd_init+0x5e4>)
 8001f18:	2280      	movs	r2, #128	@ 0x80
 8001f1a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001f1c:	4b8f      	ldr	r3, [pc, #572]	@ (800215c <lcd_init+0x5e4>)
 8001f1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f22:	611a      	str	r2, [r3, #16]
}
 8001f24:	bf00      	nop
        {
            lcd_wr_regno(0xD4);
            lcddev.id = lcd_rd_data();  /* dummy read */
 8001f26:	f7fe fd61 	bl	80009ec <lcd_rd_data>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b8a      	ldr	r3, [pc, #552]	@ (8002158 <lcd_init+0x5e0>)
 8001f30:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x01 */
 8001f32:	f7fe fd5b 	bl	80009ec <lcd_rd_data>
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b87      	ldr	r3, [pc, #540]	@ (8002158 <lcd_init+0x5e0>)
 8001f3c:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x53 */
 8001f3e:	f7fe fd55 	bl	80009ec <lcd_rd_data>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b84      	ldr	r3, [pc, #528]	@ (8002158 <lcd_init+0x5e0>)
 8001f48:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8001f4a:	4b83      	ldr	r3, [pc, #524]	@ (8002158 <lcd_init+0x5e0>)
 8001f4c:	889b      	ldrh	r3, [r3, #4]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b81      	ldr	r3, [pc, #516]	@ (8002158 <lcd_init+0x5e0>)
 8001f54:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* �������0x10 */
 8001f56:	f7fe fd49 	bl	80009ec <lcd_rd_data>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b7e      	ldr	r3, [pc, #504]	@ (8002158 <lcd_init+0x5e0>)
 8001f60:	889b      	ldrh	r3, [r3, #4]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	4b7c      	ldr	r3, [pc, #496]	@ (8002158 <lcd_init+0x5e0>)
 8001f68:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Ҳ����NT35310,���Կ����ǲ���ST7796 */
 8001f6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002158 <lcd_init+0x5e0>)
 8001f6c:	889b      	ldrh	r3, [r3, #4]
 8001f6e:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001f72:	4293      	cmp	r3, r2
 8001f74:	f000 8160 	beq.w	8002238 <lcd_init+0x6c0>
 8001f78:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f7c:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8001f80:	22d3      	movs	r2, #211	@ 0xd3
 8001f82:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001f84:	4b75      	ldr	r3, [pc, #468]	@ (800215c <lcd_init+0x5e4>)
 8001f86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f8a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001f8c:	4b73      	ldr	r3, [pc, #460]	@ (800215c <lcd_init+0x5e4>)
 8001f8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f92:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001f94:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001f98:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8002160 <lcd_init+0x5e8>)
 8001fa2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001fa4:	4b6d      	ldr	r3, [pc, #436]	@ (800215c <lcd_init+0x5e4>)
 8001fa6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001faa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001fac:	4b6b      	ldr	r3, [pc, #428]	@ (800215c <lcd_init+0x5e4>)
 8001fae:	2280      	movs	r2, #128	@ 0x80
 8001fb0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800215c <lcd_init+0x5e4>)
 8001fb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb8:	611a      	str	r2, [r3, #16]
}
 8001fba:	bf00      	nop
            {
                lcd_wr_regno(0XD3);
                lcddev.id = lcd_rd_data();  /* dummy read */
 8001fbc:	f7fe fd16 	bl	80009ec <lcd_rd_data>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b64      	ldr	r3, [pc, #400]	@ (8002158 <lcd_init+0x5e0>)
 8001fc6:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ����0X00 */
 8001fc8:	f7fe fd10 	bl	80009ec <lcd_rd_data>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b61      	ldr	r3, [pc, #388]	@ (8002158 <lcd_init+0x5e0>)
 8001fd2:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ��ȡ0X77 */
 8001fd4:	f7fe fd0a 	bl	80009ec <lcd_rd_data>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8002158 <lcd_init+0x5e0>)
 8001fde:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8001fe0:	4b5d      	ldr	r3, [pc, #372]	@ (8002158 <lcd_init+0x5e0>)
 8001fe2:	889b      	ldrh	r3, [r3, #4]
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	4b5b      	ldr	r3, [pc, #364]	@ (8002158 <lcd_init+0x5e0>)
 8001fea:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* ��ȡ0X96 */
 8001fec:	f7fe fcfe 	bl	80009ec <lcd_rd_data>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b58      	ldr	r3, [pc, #352]	@ (8002158 <lcd_init+0x5e0>)
 8001ff6:	889b      	ldrh	r3, [r3, #4]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	4b56      	ldr	r3, [pc, #344]	@ (8002158 <lcd_init+0x5e0>)
 8001ffe:	809a      	strh	r2, [r3, #4]
                
                if (lcddev.id != 0x7796)    /* Ҳ����ST7796,���Կ����ǲ���NT35510 */
 8002000:	4b55      	ldr	r3, [pc, #340]	@ (8002158 <lcd_init+0x5e0>)
 8002002:	889b      	ldrh	r3, [r3, #4]
 8002004:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002008:	4293      	cmp	r3, r2
 800200a:	f000 8115 	beq.w	8002238 <lcd_init+0x6c0>
                {
                    /* ������Կ�������ṩ�� */
                    lcd_write_reg(0xF000, 0x0055);
 800200e:	2155      	movs	r1, #85	@ 0x55
 8002010:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8002014:	f7fe fc98 	bl	8000948 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8002018:	21aa      	movs	r1, #170	@ 0xaa
 800201a:	f24f 0001 	movw	r0, #61441	@ 0xf001
 800201e:	f7fe fc93 	bl	8000948 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 8002022:	2152      	movs	r1, #82	@ 0x52
 8002024:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8002028:	f7fe fc8e 	bl	8000948 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 800202c:	2108      	movs	r1, #8
 800202e:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8002032:	f7fe fc89 	bl	8000948 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 8002036:	2101      	movs	r1, #1
 8002038:	f24f 0004 	movw	r0, #61444	@ 0xf004
 800203c:	f7fe fc84 	bl	8000948 <lcd_write_reg>
 8002040:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002044:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8002048:	f44f 4245 	mov.w	r2, #50432	@ 0xc500
 800204c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800204e:	4b43      	ldr	r3, [pc, #268]	@ (800215c <lcd_init+0x5e4>)
 8002050:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002054:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002056:	4b41      	ldr	r3, [pc, #260]	@ (800215c <lcd_init+0x5e4>)
 8002058:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800205c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800205e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002062:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29a      	uxth	r2, r3
 800206a:	4b3d      	ldr	r3, [pc, #244]	@ (8002160 <lcd_init+0x5e8>)
 800206c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800206e:	4b3b      	ldr	r3, [pc, #236]	@ (800215c <lcd_init+0x5e4>)
 8002070:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002074:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002076:	4b39      	ldr	r3, [pc, #228]	@ (800215c <lcd_init+0x5e4>)
 8002078:	2280      	movs	r2, #128	@ 0x80
 800207a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800207c:	4b37      	ldr	r3, [pc, #220]	@ (800215c <lcd_init+0x5e4>)
 800207e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002082:	611a      	str	r2, [r3, #16]
}
 8002084:	bf00      	nop

                    lcd_wr_regno(0xC500);       /* ��ȡID�Ͱ�λ */
                    lcddev.id = lcd_rd_data();  /* ����0x55 */
 8002086:	f7fe fcb1 	bl	80009ec <lcd_rd_data>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	4b32      	ldr	r3, [pc, #200]	@ (8002158 <lcd_init+0x5e0>)
 8002090:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8002092:	4b31      	ldr	r3, [pc, #196]	@ (8002158 <lcd_init+0x5e0>)
 8002094:	889b      	ldrh	r3, [r3, #4]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <lcd_init+0x5e0>)
 800209c:	809a      	strh	r2, [r3, #4]
 800209e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80020a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020a6:	f24c 5201 	movw	r2, #50433	@ 0xc501
 80020aa:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80020ac:	4b2b      	ldr	r3, [pc, #172]	@ (800215c <lcd_init+0x5e4>)
 80020ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020b2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80020b4:	4b29      	ldr	r3, [pc, #164]	@ (800215c <lcd_init+0x5e4>)
 80020b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020ba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80020bc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80020c0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b25      	ldr	r3, [pc, #148]	@ (8002160 <lcd_init+0x5e8>)
 80020ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80020cc:	4b23      	ldr	r3, [pc, #140]	@ (800215c <lcd_init+0x5e4>)
 80020ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80020d4:	4b21      	ldr	r3, [pc, #132]	@ (800215c <lcd_init+0x5e4>)
 80020d6:	2280      	movs	r2, #128	@ 0x80
 80020d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80020da:	4b20      	ldr	r3, [pc, #128]	@ (800215c <lcd_init+0x5e4>)
 80020dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020e0:	611a      	str	r2, [r3, #16]
}
 80020e2:	bf00      	nop

                    lcd_wr_regno(0xC501);       /* ��ȡID�߰�λ */
                    lcddev.id |= lcd_rd_data(); /* ����0x10 */
 80020e4:	f7fe fc82 	bl	80009ec <lcd_rd_data>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <lcd_init+0x5e0>)
 80020ee:	889b      	ldrh	r3, [r3, #4]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <lcd_init+0x5e0>)
 80020f6:	809a      	strh	r2, [r3, #4]
                    
                    //delay_ms(5);                /* �ȴ�5ms, ��Ϊ0XC501ָ���1963��˵���������λָ��, �ȴ�5ms��1963��λ����ٲ��� */

                    if (lcddev.id != 0x5510)    /* Ҳ����NT5510,���Կ����ǲ���ILI9806 */
 80020f8:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <lcd_init+0x5e0>)
 80020fa:	889b      	ldrh	r3, [r3, #4]
 80020fc:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002100:	4293      	cmp	r3, r2
 8002102:	f000 8099 	beq.w	8002238 <lcd_init+0x6c0>
 8002106:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800210a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800210e:	22d3      	movs	r2, #211	@ 0xd3
 8002110:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002112:	4b12      	ldr	r3, [pc, #72]	@ (800215c <lcd_init+0x5e4>)
 8002114:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002118:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <lcd_init+0x5e4>)
 800211c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002120:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002122:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002126:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b29a      	uxth	r2, r3
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <lcd_init+0x5e8>)
 8002130:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <lcd_init+0x5e4>)
 8002134:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002138:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800213a:	4b08      	ldr	r3, [pc, #32]	@ (800215c <lcd_init+0x5e4>)
 800213c:	2280      	movs	r2, #128	@ 0x80
 800213e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <lcd_init+0x5e4>)
 8002142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002146:	611a      	str	r2, [r3, #16]
}
 8002148:	bf00      	nop
                    {
                        lcd_wr_regno(0XD3);
                        lcddev.id = lcd_rd_data();  /* dummy read */
 800214a:	f7fe fc4f 	bl	80009ec <lcd_rd_data>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	4b01      	ldr	r3, [pc, #4]	@ (8002158 <lcd_init+0x5e0>)
 8002154:	809a      	strh	r2, [r3, #4]
 8002156:	e005      	b.n	8002164 <lcd_init+0x5ec>
 8002158:	2000007c 	.word	0x2000007c
 800215c:	40011000 	.word	0x40011000
 8002160:	40010c00 	.word	0x40010c00
                        lcddev.id = lcd_rd_data();  /* ����0X00 */
 8002164:	f7fe fc42 	bl	80009ec <lcd_rd_data>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	4bb2      	ldr	r3, [pc, #712]	@ (8002438 <lcd_init+0x8c0>)
 800216e:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* ����0X98 */
 8002170:	f7fe fc3c 	bl	80009ec <lcd_rd_data>
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	4baf      	ldr	r3, [pc, #700]	@ (8002438 <lcd_init+0x8c0>)
 800217a:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 800217c:	4bae      	ldr	r3, [pc, #696]	@ (8002438 <lcd_init+0x8c0>)
 800217e:	889b      	ldrh	r3, [r3, #4]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b29a      	uxth	r2, r3
 8002184:	4bac      	ldr	r3, [pc, #688]	@ (8002438 <lcd_init+0x8c0>)
 8002186:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* ����0X06 */
 8002188:	f7fe fc30 	bl	80009ec <lcd_rd_data>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	4ba9      	ldr	r3, [pc, #676]	@ (8002438 <lcd_init+0x8c0>)
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	4313      	orrs	r3, r2
 8002196:	b29a      	uxth	r2, r3
 8002198:	4ba7      	ldr	r3, [pc, #668]	@ (8002438 <lcd_init+0x8c0>)
 800219a:	809a      	strh	r2, [r3, #4]
                        
                        if (lcddev.id != 0x9806)    /* Ҳ����ILI9806,���Կ����ǲ���SSD1963 */
 800219c:	4ba6      	ldr	r3, [pc, #664]	@ (8002438 <lcd_init+0x8c0>)
 800219e:	889b      	ldrh	r3, [r3, #4]
 80021a0:	f649 0206 	movw	r2, #38918	@ 0x9806
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d047      	beq.n	8002238 <lcd_init+0x6c0>
 80021a8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021ac:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80021b0:	22a1      	movs	r2, #161	@ 0xa1
 80021b2:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80021b4:	4ba1      	ldr	r3, [pc, #644]	@ (800243c <lcd_init+0x8c4>)
 80021b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021ba:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80021bc:	4b9f      	ldr	r3, [pc, #636]	@ (800243c <lcd_init+0x8c4>)
 80021be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021c2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80021c4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021c8:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b9b      	ldr	r3, [pc, #620]	@ (8002440 <lcd_init+0x8c8>)
 80021d2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80021d4:	4b99      	ldr	r3, [pc, #612]	@ (800243c <lcd_init+0x8c4>)
 80021d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021da:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80021dc:	4b97      	ldr	r3, [pc, #604]	@ (800243c <lcd_init+0x8c4>)
 80021de:	2280      	movs	r2, #128	@ 0x80
 80021e0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80021e2:	4b96      	ldr	r3, [pc, #600]	@ (800243c <lcd_init+0x8c4>)
 80021e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021e8:	611a      	str	r2, [r3, #16]
}
 80021ea:	bf00      	nop
                        {
                            lcd_wr_regno(0xA1);
                            lcddev.id = lcd_rd_data();
 80021ec:	f7fe fbfe 	bl	80009ec <lcd_rd_data>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b90      	ldr	r3, [pc, #576]	@ (8002438 <lcd_init+0x8c0>)
 80021f6:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* ����0x57 */
 80021f8:	f7fe fbf8 	bl	80009ec <lcd_rd_data>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461a      	mov	r2, r3
 8002200:	4b8d      	ldr	r3, [pc, #564]	@ (8002438 <lcd_init+0x8c0>)
 8002202:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 8002204:	4b8c      	ldr	r3, [pc, #560]	@ (8002438 <lcd_init+0x8c0>)
 8002206:	889b      	ldrh	r3, [r3, #4]
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b8a      	ldr	r3, [pc, #552]	@ (8002438 <lcd_init+0x8c0>)
 800220e:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* ����0x61 */
 8002210:	f7fe fbec 	bl	80009ec <lcd_rd_data>
 8002214:	4603      	mov	r3, r0
 8002216:	461a      	mov	r2, r3
 8002218:	4b87      	ldr	r3, [pc, #540]	@ (8002438 <lcd_init+0x8c0>)
 800221a:	889b      	ldrh	r3, [r3, #4]
 800221c:	4313      	orrs	r3, r2
 800221e:	b29a      	uxth	r2, r3
 8002220:	4b85      	ldr	r3, [pc, #532]	@ (8002438 <lcd_init+0x8c0>)
 8002222:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* SSD1963���ص�ID��5761H,Ϊ��������,����ǿ������Ϊ1963 */
 8002224:	4b84      	ldr	r3, [pc, #528]	@ (8002438 <lcd_init+0x8c0>)
 8002226:	889b      	ldrh	r3, [r3, #4]
 8002228:	f245 7261 	movw	r2, #22369	@ 0x5761
 800222c:	4293      	cmp	r3, r2
 800222e:	d103      	bne.n	8002238 <lcd_init+0x6c0>
 8002230:	4b81      	ldr	r3, [pc, #516]	@ (8002438 <lcd_init+0x8c0>)
 8002232:	f641 1263 	movw	r2, #6499	@ 0x1963
 8002236:	809a      	strh	r2, [r3, #4]
     * ����(������f_putc����), ����, �����ʼ������1, �������ε�����
     * ���� printf ��� !!!!!!!
     */
    //printf("LCD ID:%x\r\n", lcddev.id); /* ��ӡLCD ID */

    if (lcddev.id == 0X7789)
 8002238:	4b7f      	ldr	r3, [pc, #508]	@ (8002438 <lcd_init+0x8c0>)
 800223a:	889b      	ldrh	r3, [r3, #4]
 800223c:	f247 7289 	movw	r2, #30601	@ 0x7789
 8002240:	4293      	cmp	r3, r2
 8002242:	f040 82f3 	bne.w	800282c <lcd_init+0xcb4>
 8002246:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800224a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800224e:	2211      	movs	r2, #17
 8002250:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002252:	4b7a      	ldr	r3, [pc, #488]	@ (800243c <lcd_init+0x8c4>)
 8002254:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002258:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800225a:	4b78      	ldr	r3, [pc, #480]	@ (800243c <lcd_init+0x8c4>)
 800225c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002260:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002262:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002266:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b29a      	uxth	r2, r3
 800226e:	4b74      	ldr	r3, [pc, #464]	@ (8002440 <lcd_init+0x8c8>)
 8002270:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002272:	4b72      	ldr	r3, [pc, #456]	@ (800243c <lcd_init+0x8c4>)
 8002274:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002278:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800227a:	4b70      	ldr	r3, [pc, #448]	@ (800243c <lcd_init+0x8c4>)
 800227c:	2280      	movs	r2, #128	@ 0x80
 800227e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002280:	4b6e      	ldr	r3, [pc, #440]	@ (800243c <lcd_init+0x8c4>)
 8002282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002286:	611a      	str	r2, [r3, #16]
}
 8002288:	bf00      	nop
    {
        //lcd_ex_st7789_reginit();    /* ִ��ST7789��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 800228a:	2078      	movs	r0, #120	@ 0x78
 800228c:	f004 ffcc 	bl	8007228 <HAL_Delay>
 8002290:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002294:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002298:	2236      	movs	r2, #54	@ 0x36
 800229a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800229c:	4b67      	ldr	r3, [pc, #412]	@ (800243c <lcd_init+0x8c4>)
 800229e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022a2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80022a4:	4b65      	ldr	r3, [pc, #404]	@ (800243c <lcd_init+0x8c4>)
 80022a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022aa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80022ac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80022b0:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4b61      	ldr	r3, [pc, #388]	@ (8002440 <lcd_init+0x8c8>)
 80022ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80022bc:	4b5f      	ldr	r3, [pc, #380]	@ (800243c <lcd_init+0x8c4>)
 80022be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80022c4:	4b5d      	ldr	r3, [pc, #372]	@ (800243c <lcd_init+0x8c4>)
 80022c6:	2280      	movs	r2, #128	@ 0x80
 80022c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80022ca:	4b5c      	ldr	r3, [pc, #368]	@ (800243c <lcd_init+0x8c4>)
 80022cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022d0:	611a      	str	r2, [r3, #16]
}
 80022d2:	bf00      	nop

        lcd_wr_regno(0x36);
        lcd_wr_xdata(0x00);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7fe fb13 	bl	8000900 <lcd_wr_xdata>
 80022da:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80022de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022e2:	223a      	movs	r2, #58	@ 0x3a
 80022e4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80022e6:	4b55      	ldr	r3, [pc, #340]	@ (800243c <lcd_init+0x8c4>)
 80022e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80022ee:	4b53      	ldr	r3, [pc, #332]	@ (800243c <lcd_init+0x8c4>)
 80022f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022f4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80022f6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80022fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29a      	uxth	r2, r3
 8002302:	4b4f      	ldr	r3, [pc, #316]	@ (8002440 <lcd_init+0x8c8>)
 8002304:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002306:	4b4d      	ldr	r3, [pc, #308]	@ (800243c <lcd_init+0x8c4>)
 8002308:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800230c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800230e:	4b4b      	ldr	r3, [pc, #300]	@ (800243c <lcd_init+0x8c4>)
 8002310:	2280      	movs	r2, #128	@ 0x80
 8002312:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002314:	4b49      	ldr	r3, [pc, #292]	@ (800243c <lcd_init+0x8c4>)
 8002316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800231a:	611a      	str	r2, [r3, #16]
}
 800231c:	bf00      	nop


        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0X05);
 800231e:	2005      	movs	r0, #5
 8002320:	f7fe faee 	bl	8000900 <lcd_wr_xdata>
 8002324:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002328:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 800232c:	22b2      	movs	r2, #178	@ 0xb2
 800232e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002330:	4b42      	ldr	r3, [pc, #264]	@ (800243c <lcd_init+0x8c4>)
 8002332:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002336:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002338:	4b40      	ldr	r3, [pc, #256]	@ (800243c <lcd_init+0x8c4>)
 800233a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800233e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002340:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002344:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29a      	uxth	r2, r3
 800234c:	4b3c      	ldr	r3, [pc, #240]	@ (8002440 <lcd_init+0x8c8>)
 800234e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002350:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <lcd_init+0x8c4>)
 8002352:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002356:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002358:	4b38      	ldr	r3, [pc, #224]	@ (800243c <lcd_init+0x8c4>)
 800235a:	2280      	movs	r2, #128	@ 0x80
 800235c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800235e:	4b37      	ldr	r3, [pc, #220]	@ (800243c <lcd_init+0x8c4>)
 8002360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002364:	611a      	str	r2, [r3, #16]
}
 8002366:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x0C);
 8002368:	200c      	movs	r0, #12
 800236a:	f7fe fac9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 800236e:	200c      	movs	r0, #12
 8002370:	f7fe fac6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002374:	2000      	movs	r0, #0
 8002376:	f7fe fac3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 800237a:	2033      	movs	r0, #51	@ 0x33
 800237c:	f7fe fac0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002380:	2033      	movs	r0, #51	@ 0x33
 8002382:	f7fe fabd 	bl	8000900 <lcd_wr_xdata>
 8002386:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800238a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800238e:	22b7      	movs	r2, #183	@ 0xb7
 8002390:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002392:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <lcd_init+0x8c4>)
 8002394:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002398:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800239a:	4b28      	ldr	r3, [pc, #160]	@ (800243c <lcd_init+0x8c4>)
 800239c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023a0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80023a2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023a6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	4b24      	ldr	r3, [pc, #144]	@ (8002440 <lcd_init+0x8c8>)
 80023b0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80023b2:	4b22      	ldr	r3, [pc, #136]	@ (800243c <lcd_init+0x8c4>)
 80023b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023b8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80023ba:	4b20      	ldr	r3, [pc, #128]	@ (800243c <lcd_init+0x8c4>)
 80023bc:	2280      	movs	r2, #128	@ 0x80
 80023be:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80023c0:	4b1e      	ldr	r3, [pc, #120]	@ (800243c <lcd_init+0x8c4>)
 80023c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023c6:	611a      	str	r2, [r3, #16]
}
 80023c8:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x35);
 80023ca:	2035      	movs	r0, #53	@ 0x35
 80023cc:	f7fe fa98 	bl	8000900 <lcd_wr_xdata>
 80023d0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023d4:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 80023d8:	22bb      	movs	r2, #187	@ 0xbb
 80023da:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80023dc:	4b17      	ldr	r3, [pc, #92]	@ (800243c <lcd_init+0x8c4>)
 80023de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023e2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80023e4:	4b15      	ldr	r3, [pc, #84]	@ (800243c <lcd_init+0x8c4>)
 80023e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023ea:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80023ec:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80023f0:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <lcd_init+0x8c8>)
 80023fa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80023fc:	4b0f      	ldr	r3, [pc, #60]	@ (800243c <lcd_init+0x8c4>)
 80023fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002402:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002404:	4b0d      	ldr	r3, [pc, #52]	@ (800243c <lcd_init+0x8c4>)
 8002406:	2280      	movs	r2, #128	@ 0x80
 8002408:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800240a:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <lcd_init+0x8c4>)
 800240c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002410:	611a      	str	r2, [r3, #16]
}
 8002412:	bf00      	nop

        lcd_wr_regno(0xBB); /* vcom */
        lcd_wr_xdata(0x32); /* 30 */
 8002414:	2032      	movs	r0, #50	@ 0x32
 8002416:	f7fe fa73 	bl	8000900 <lcd_wr_xdata>
 800241a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800241e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002422:	22c0      	movs	r2, #192	@ 0xc0
 8002424:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002426:	4b05      	ldr	r3, [pc, #20]	@ (800243c <lcd_init+0x8c4>)
 8002428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800242c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800242e:	4b03      	ldr	r3, [pc, #12]	@ (800243c <lcd_init+0x8c4>)
 8002430:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002434:	611a      	str	r2, [r3, #16]
 8002436:	e005      	b.n	8002444 <lcd_init+0x8cc>
 8002438:	2000007c 	.word	0x2000007c
 800243c:	40011000 	.word	0x40011000
 8002440:	40010c00 	.word	0x40010c00
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002444:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002448:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29a      	uxth	r2, r3
 8002450:	4bbf      	ldr	r3, [pc, #764]	@ (8002750 <lcd_init+0xbd8>)
 8002452:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002454:	4bbf      	ldr	r3, [pc, #764]	@ (8002754 <lcd_init+0xbdc>)
 8002456:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800245a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800245c:	4bbd      	ldr	r3, [pc, #756]	@ (8002754 <lcd_init+0xbdc>)
 800245e:	2280      	movs	r2, #128	@ 0x80
 8002460:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002462:	4bbc      	ldr	r3, [pc, #752]	@ (8002754 <lcd_init+0xbdc>)
 8002464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002468:	611a      	str	r2, [r3, #16]
}
 800246a:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x0C);
 800246c:	200c      	movs	r0, #12
 800246e:	f7fe fa47 	bl	8000900 <lcd_wr_xdata>
 8002472:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002476:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800247a:	22c2      	movs	r2, #194	@ 0xc2
 800247c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800247e:	4bb5      	ldr	r3, [pc, #724]	@ (8002754 <lcd_init+0xbdc>)
 8002480:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002484:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002486:	4bb3      	ldr	r3, [pc, #716]	@ (8002754 <lcd_init+0xbdc>)
 8002488:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800248c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800248e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002492:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	b29a      	uxth	r2, r3
 800249a:	4bad      	ldr	r3, [pc, #692]	@ (8002750 <lcd_init+0xbd8>)
 800249c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800249e:	4bad      	ldr	r3, [pc, #692]	@ (8002754 <lcd_init+0xbdc>)
 80024a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80024a4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80024a6:	4bab      	ldr	r3, [pc, #684]	@ (8002754 <lcd_init+0xbdc>)
 80024a8:	2280      	movs	r2, #128	@ 0x80
 80024aa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80024ac:	4ba9      	ldr	r3, [pc, #676]	@ (8002754 <lcd_init+0xbdc>)
 80024ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b2:	611a      	str	r2, [r3, #16]
}
 80024b4:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x01);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f7fe fa22 	bl	8000900 <lcd_wr_xdata>
 80024bc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80024c4:	22c3      	movs	r2, #195	@ 0xc3
 80024c6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80024c8:	4ba2      	ldr	r3, [pc, #648]	@ (8002754 <lcd_init+0xbdc>)
 80024ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024ce:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80024d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002754 <lcd_init+0xbdc>)
 80024d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024d6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80024d8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b9a      	ldr	r3, [pc, #616]	@ (8002750 <lcd_init+0xbd8>)
 80024e6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80024e8:	4b9a      	ldr	r3, [pc, #616]	@ (8002754 <lcd_init+0xbdc>)
 80024ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80024ee:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80024f0:	4b98      	ldr	r3, [pc, #608]	@ (8002754 <lcd_init+0xbdc>)
 80024f2:	2280      	movs	r2, #128	@ 0x80
 80024f4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80024f6:	4b97      	ldr	r3, [pc, #604]	@ (8002754 <lcd_init+0xbdc>)
 80024f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024fc:	611a      	str	r2, [r3, #16]
}
 80024fe:	bf00      	nop

        lcd_wr_regno(0xC3); /* vrh */
        lcd_wr_xdata(0x10); /* 17 0D */
 8002500:	2010      	movs	r0, #16
 8002502:	f7fe f9fd 	bl	8000900 <lcd_wr_xdata>
 8002506:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800250a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800250e:	22c4      	movs	r2, #196	@ 0xc4
 8002510:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002512:	4b90      	ldr	r3, [pc, #576]	@ (8002754 <lcd_init+0xbdc>)
 8002514:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002518:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800251a:	4b8e      	ldr	r3, [pc, #568]	@ (8002754 <lcd_init+0xbdc>)
 800251c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002520:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002522:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002526:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29a      	uxth	r2, r3
 800252e:	4b88      	ldr	r3, [pc, #544]	@ (8002750 <lcd_init+0xbd8>)
 8002530:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002532:	4b88      	ldr	r3, [pc, #544]	@ (8002754 <lcd_init+0xbdc>)
 8002534:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002538:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800253a:	4b86      	ldr	r3, [pc, #536]	@ (8002754 <lcd_init+0xbdc>)
 800253c:	2280      	movs	r2, #128	@ 0x80
 800253e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002540:	4b84      	ldr	r3, [pc, #528]	@ (8002754 <lcd_init+0xbdc>)
 8002542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002546:	611a      	str	r2, [r3, #16]
}
 8002548:	bf00      	nop

        lcd_wr_regno(0xC4); /* vdv */
        lcd_wr_xdata(0x20); /* 20 */
 800254a:	2020      	movs	r0, #32
 800254c:	f7fe f9d8 	bl	8000900 <lcd_wr_xdata>
 8002550:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002554:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002558:	22c6      	movs	r2, #198	@ 0xc6
 800255a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800255c:	4b7d      	ldr	r3, [pc, #500]	@ (8002754 <lcd_init+0xbdc>)
 800255e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002562:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002564:	4b7b      	ldr	r3, [pc, #492]	@ (8002754 <lcd_init+0xbdc>)
 8002566:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800256a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800256c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002570:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b75      	ldr	r3, [pc, #468]	@ (8002750 <lcd_init+0xbd8>)
 800257a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800257c:	4b75      	ldr	r3, [pc, #468]	@ (8002754 <lcd_init+0xbdc>)
 800257e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002582:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002584:	4b73      	ldr	r3, [pc, #460]	@ (8002754 <lcd_init+0xbdc>)
 8002586:	2280      	movs	r2, #128	@ 0x80
 8002588:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800258a:	4b72      	ldr	r3, [pc, #456]	@ (8002754 <lcd_init+0xbdc>)
 800258c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002590:	611a      	str	r2, [r3, #16]
}
 8002592:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x0f);
 8002594:	200f      	movs	r0, #15
 8002596:	f7fe f9b3 	bl	8000900 <lcd_wr_xdata>
 800259a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800259e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80025a2:	22d0      	movs	r2, #208	@ 0xd0
 80025a4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80025a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002754 <lcd_init+0xbdc>)
 80025a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025ac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80025ae:	4b69      	ldr	r3, [pc, #420]	@ (8002754 <lcd_init+0xbdc>)
 80025b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025b4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80025b6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025ba:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	4b63      	ldr	r3, [pc, #396]	@ (8002750 <lcd_init+0xbd8>)
 80025c4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80025c6:	4b63      	ldr	r3, [pc, #396]	@ (8002754 <lcd_init+0xbdc>)
 80025c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025cc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80025ce:	4b61      	ldr	r3, [pc, #388]	@ (8002754 <lcd_init+0xbdc>)
 80025d0:	2280      	movs	r2, #128	@ 0x80
 80025d2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80025d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002754 <lcd_init+0xbdc>)
 80025d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025da:	611a      	str	r2, [r3, #16]
}
 80025dc:	bf00      	nop

        lcd_wr_regno(0xD0);
        lcd_wr_xdata(0xA4);
 80025de:	20a4      	movs	r0, #164	@ 0xa4
 80025e0:	f7fe f98e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 80025e4:	20a1      	movs	r0, #161	@ 0xa1
 80025e6:	f7fe f98b 	bl	8000900 <lcd_wr_xdata>
 80025ea:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80025ee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025f2:	22e0      	movs	r2, #224	@ 0xe0
 80025f4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80025f6:	4b57      	ldr	r3, [pc, #348]	@ (8002754 <lcd_init+0xbdc>)
 80025f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025fc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80025fe:	4b55      	ldr	r3, [pc, #340]	@ (8002754 <lcd_init+0xbdc>)
 8002600:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002604:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002606:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800260a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b4f      	ldr	r3, [pc, #316]	@ (8002750 <lcd_init+0xbd8>)
 8002614:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002616:	4b4f      	ldr	r3, [pc, #316]	@ (8002754 <lcd_init+0xbdc>)
 8002618:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800261c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800261e:	4b4d      	ldr	r3, [pc, #308]	@ (8002754 <lcd_init+0xbdc>)
 8002620:	2280      	movs	r2, #128	@ 0x80
 8002622:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002624:	4b4b      	ldr	r3, [pc, #300]	@ (8002754 <lcd_init+0xbdc>)
 8002626:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800262a:	611a      	str	r2, [r3, #16]
}
 800262c:	bf00      	nop

        lcd_wr_regno(0xE0); /* Set Gamma  */
        lcd_wr_xdata(0xd0);
 800262e:	20d0      	movs	r0, #208	@ 0xd0
 8002630:	f7fe f966 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002634:	2000      	movs	r0, #0
 8002636:	f7fe f963 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800263a:	2002      	movs	r0, #2
 800263c:	f7fe f960 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002640:	2007      	movs	r0, #7
 8002642:	f7fe f95d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 8002646:	200a      	movs	r0, #10
 8002648:	f7fe f95a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 800264c:	2028      	movs	r0, #40	@ 0x28
 800264e:	f7fe f957 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8002652:	2032      	movs	r0, #50	@ 0x32
 8002654:	f7fe f954 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0X44);
 8002658:	2044      	movs	r0, #68	@ 0x44
 800265a:	f7fe f951 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x42);
 800265e:	2042      	movs	r0, #66	@ 0x42
 8002660:	f7fe f94e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8002664:	2006      	movs	r0, #6
 8002666:	f7fe f94b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 800266a:	200e      	movs	r0, #14
 800266c:	f7fe f948 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8002670:	2012      	movs	r0, #18
 8002672:	f7fe f945 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8002676:	2014      	movs	r0, #20
 8002678:	f7fe f942 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 800267c:	2017      	movs	r0, #23
 800267e:	f7fe f93f 	bl	8000900 <lcd_wr_xdata>
 8002682:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002686:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800268a:	22e1      	movs	r2, #225	@ 0xe1
 800268c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800268e:	4b31      	ldr	r3, [pc, #196]	@ (8002754 <lcd_init+0xbdc>)
 8002690:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002694:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002696:	4b2f      	ldr	r3, [pc, #188]	@ (8002754 <lcd_init+0xbdc>)
 8002698:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800269c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800269e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026a2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b29      	ldr	r3, [pc, #164]	@ (8002750 <lcd_init+0xbd8>)
 80026ac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80026ae:	4b29      	ldr	r3, [pc, #164]	@ (8002754 <lcd_init+0xbdc>)
 80026b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026b4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80026b6:	4b27      	ldr	r3, [pc, #156]	@ (8002754 <lcd_init+0xbdc>)
 80026b8:	2280      	movs	r2, #128	@ 0x80
 80026ba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80026bc:	4b25      	ldr	r3, [pc, #148]	@ (8002754 <lcd_init+0xbdc>)
 80026be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c2:	611a      	str	r2, [r3, #16]
}
 80026c4:	bf00      	nop


        lcd_wr_regno(0XE1);  /* Set Gamma */
        lcd_wr_xdata(0xd0);
 80026c6:	20d0      	movs	r0, #208	@ 0xd0
 80026c8:	f7fe f91a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe f917 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80026d2:	2002      	movs	r0, #2
 80026d4:	f7fe f914 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 80026d8:	2007      	movs	r0, #7
 80026da:	f7fe f911 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 80026de:	200a      	movs	r0, #10
 80026e0:	f7fe f90e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 80026e4:	2028      	movs	r0, #40	@ 0x28
 80026e6:	f7fe f90b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x31);
 80026ea:	2031      	movs	r0, #49	@ 0x31
 80026ec:	f7fe f908 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 80026f0:	2054      	movs	r0, #84	@ 0x54
 80026f2:	f7fe f905 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x47);
 80026f6:	2047      	movs	r0, #71	@ 0x47
 80026f8:	f7fe f902 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 80026fc:	200e      	movs	r0, #14
 80026fe:	f7fe f8ff 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x1c);
 8002702:	201c      	movs	r0, #28
 8002704:	f7fe f8fc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002708:	2017      	movs	r0, #23
 800270a:	f7fe f8f9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x1b);
 800270e:	201b      	movs	r0, #27
 8002710:	f7fe f8f6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x1e);
 8002714:	201e      	movs	r0, #30
 8002716:	f7fe f8f3 	bl	8000900 <lcd_wr_xdata>
 800271a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800271e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002722:	222a      	movs	r2, #42	@ 0x2a
 8002724:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002726:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <lcd_init+0xbdc>)
 8002728:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800272c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800272e:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <lcd_init+0xbdc>)
 8002730:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002734:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002736:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800273a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29a      	uxth	r2, r3
 8002742:	4b03      	ldr	r3, [pc, #12]	@ (8002750 <lcd_init+0xbd8>)
 8002744:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002746:	4b03      	ldr	r3, [pc, #12]	@ (8002754 <lcd_init+0xbdc>)
 8002748:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	e003      	b.n	8002758 <lcd_init+0xbe0>
 8002750:	40010c00 	.word	0x40010c00
 8002754:	40011000 	.word	0x40011000
    LCD_WR(1);
 8002758:	4b32      	ldr	r3, [pc, #200]	@ (8002824 <lcd_init+0xcac>)
 800275a:	2280      	movs	r2, #128	@ 0x80
 800275c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800275e:	4b31      	ldr	r3, [pc, #196]	@ (8002824 <lcd_init+0xcac>)
 8002760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002764:	611a      	str	r2, [r3, #16]
}
 8002766:	bf00      	nop


        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe f8c9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800276e:	2000      	movs	r0, #0
 8002770:	f7fe f8c6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe f8c3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 800277a:	20ef      	movs	r0, #239	@ 0xef
 800277c:	f7fe f8c0 	bl	8000900 <lcd_wr_xdata>
 8002780:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002784:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8002788:	222b      	movs	r2, #43	@ 0x2b
 800278a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800278c:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <lcd_init+0xcac>)
 800278e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002792:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002794:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <lcd_init+0xcac>)
 8002796:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800279a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800279c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027a0:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002828 <lcd_init+0xcb0>)
 80027aa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80027ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002824 <lcd_init+0xcac>)
 80027ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80027b2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80027b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <lcd_init+0xcac>)
 80027b6:	2280      	movs	r2, #128	@ 0x80
 80027b8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80027ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002824 <lcd_init+0xcac>)
 80027bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c0:	611a      	str	r2, [r3, #16]
}
 80027c2:	bf00      	nop

        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7fe f89b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fe f898 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80027d0:	2001      	movs	r0, #1
 80027d2:	f7fe f895 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 80027d6:	203f      	movs	r0, #63	@ 0x3f
 80027d8:	f7fe f892 	bl	8000900 <lcd_wr_xdata>
 80027dc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027e4:	2229      	movs	r2, #41	@ 0x29
 80027e6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80027e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <lcd_init+0xcac>)
 80027ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027ee:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <lcd_init+0xcac>)
 80027f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027f6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80027f8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29a      	uxth	r2, r3
 8002804:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <lcd_init+0xcb0>)
 8002806:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <lcd_init+0xcac>)
 800280a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800280e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002810:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <lcd_init+0xcac>)
 8002812:	2280      	movs	r2, #128	@ 0x80
 8002814:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002816:	4b03      	ldr	r3, [pc, #12]	@ (8002824 <lcd_init+0xcac>)
 8002818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800281c:	611a      	str	r2, [r3, #16]
}
 800281e:	f004 b8f4 	b.w	8006a0a <lcd_init+0x4e92>
 8002822:	bf00      	nop
 8002824:	40011000 	.word	0x40011000
 8002828:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0X9341)
 800282c:	4bb9      	ldr	r3, [pc, #740]	@ (8002b14 <lcd_init+0xf9c>)
 800282e:	889b      	ldrh	r3, [r3, #4]
 8002830:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002834:	4293      	cmp	r3, r2
 8002836:	f040 83a1 	bne.w	8002f7c <lcd_init+0x1404>
 800283a:	23cf      	movs	r3, #207	@ 0xcf
 800283c:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002840:	4bb5      	ldr	r3, [pc, #724]	@ (8002b18 <lcd_init+0xfa0>)
 8002842:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002846:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002848:	4bb3      	ldr	r3, [pc, #716]	@ (8002b18 <lcd_init+0xfa0>)
 800284a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800284e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002850:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002854:	b29a      	uxth	r2, r3
 8002856:	4bb1      	ldr	r3, [pc, #708]	@ (8002b1c <lcd_init+0xfa4>)
 8002858:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800285a:	4baf      	ldr	r3, [pc, #700]	@ (8002b18 <lcd_init+0xfa0>)
 800285c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002860:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002862:	4bad      	ldr	r3, [pc, #692]	@ (8002b18 <lcd_init+0xfa0>)
 8002864:	2280      	movs	r2, #128	@ 0x80
 8002866:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002868:	4bab      	ldr	r3, [pc, #684]	@ (8002b18 <lcd_init+0xfa0>)
 800286a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800286e:	611a      	str	r2, [r3, #16]
}
 8002870:	bf00      	nop
    {
        //lcd_ex_ili9341_reginit();   /* ִ��ILI9341��ʼ�� */
        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 8002872:	2000      	movs	r0, #0
 8002874:	f7fe f844 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xC1);
 8002878:	20c1      	movs	r0, #193	@ 0xc1
 800287a:	f7fe f841 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0X30);
 800287e:	2030      	movs	r0, #48	@ 0x30
 8002880:	f7fe f83e 	bl	8000900 <lcd_wr_xdata>
 8002884:	23ed      	movs	r3, #237	@ 0xed
 8002886:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800288a:	4ba3      	ldr	r3, [pc, #652]	@ (8002b18 <lcd_init+0xfa0>)
 800288c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002890:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002892:	4ba1      	ldr	r3, [pc, #644]	@ (8002b18 <lcd_init+0xfa0>)
 8002894:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002898:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800289a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800289e:	b29a      	uxth	r2, r3
 80028a0:	4b9e      	ldr	r3, [pc, #632]	@ (8002b1c <lcd_init+0xfa4>)
 80028a2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80028a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002b18 <lcd_init+0xfa0>)
 80028a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028aa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80028ac:	4b9a      	ldr	r3, [pc, #616]	@ (8002b18 <lcd_init+0xfa0>)
 80028ae:	2280      	movs	r2, #128	@ 0x80
 80028b0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80028b2:	4b99      	ldr	r3, [pc, #612]	@ (8002b18 <lcd_init+0xfa0>)
 80028b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b8:	611a      	str	r2, [r3, #16]
}
 80028ba:	bf00      	nop
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x64);
 80028bc:	2064      	movs	r0, #100	@ 0x64
 80028be:	f7fe f81f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 80028c2:	2003      	movs	r0, #3
 80028c4:	f7fe f81c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0X12);
 80028c8:	2012      	movs	r0, #18
 80028ca:	f7fe f819 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0X81);
 80028ce:	2081      	movs	r0, #129	@ 0x81
 80028d0:	f7fe f816 	bl	8000900 <lcd_wr_xdata>
 80028d4:	23e8      	movs	r3, #232	@ 0xe8
 80028d6:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80028da:	4b8f      	ldr	r3, [pc, #572]	@ (8002b18 <lcd_init+0xfa0>)
 80028dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028e0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80028e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002b18 <lcd_init+0xfa0>)
 80028e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028e8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80028ea:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b8a      	ldr	r3, [pc, #552]	@ (8002b1c <lcd_init+0xfa4>)
 80028f2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80028f4:	4b88      	ldr	r3, [pc, #544]	@ (8002b18 <lcd_init+0xfa0>)
 80028f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028fa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80028fc:	4b86      	ldr	r3, [pc, #536]	@ (8002b18 <lcd_init+0xfa0>)
 80028fe:	2280      	movs	r2, #128	@ 0x80
 8002900:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002902:	4b85      	ldr	r3, [pc, #532]	@ (8002b18 <lcd_init+0xfa0>)
 8002904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002908:	611a      	str	r2, [r3, #16]
}
 800290a:	bf00      	nop
        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x85);
 800290c:	2085      	movs	r0, #133	@ 0x85
 800290e:	f7fd fff7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8002912:	2010      	movs	r0, #16
 8002914:	f7fd fff4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8002918:	207a      	movs	r0, #122	@ 0x7a
 800291a:	f7fd fff1 	bl	8000900 <lcd_wr_xdata>
 800291e:	23cb      	movs	r3, #203	@ 0xcb
 8002920:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002924:	4b7c      	ldr	r3, [pc, #496]	@ (8002b18 <lcd_init+0xfa0>)
 8002926:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800292a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800292c:	4b7a      	ldr	r3, [pc, #488]	@ (8002b18 <lcd_init+0xfa0>)
 800292e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002932:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002934:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8002938:	b29a      	uxth	r2, r3
 800293a:	4b78      	ldr	r3, [pc, #480]	@ (8002b1c <lcd_init+0xfa4>)
 800293c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800293e:	4b76      	ldr	r3, [pc, #472]	@ (8002b18 <lcd_init+0xfa0>)
 8002940:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002944:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002946:	4b74      	ldr	r3, [pc, #464]	@ (8002b18 <lcd_init+0xfa0>)
 8002948:	2280      	movs	r2, #128	@ 0x80
 800294a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800294c:	4b72      	ldr	r3, [pc, #456]	@ (8002b18 <lcd_init+0xfa0>)
 800294e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002952:	611a      	str	r2, [r3, #16]
}
 8002954:	bf00      	nop
        lcd_wr_regno(0xCB);
        lcd_wr_xdata(0x39);
 8002956:	2039      	movs	r0, #57	@ 0x39
 8002958:	f7fd ffd2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 800295c:	202c      	movs	r0, #44	@ 0x2c
 800295e:	f7fd ffcf 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002962:	2000      	movs	r0, #0
 8002964:	f7fd ffcc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8002968:	2034      	movs	r0, #52	@ 0x34
 800296a:	f7fd ffc9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800296e:	2002      	movs	r0, #2
 8002970:	f7fd ffc6 	bl	8000900 <lcd_wr_xdata>
 8002974:	23f7      	movs	r3, #247	@ 0xf7
 8002976:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800297a:	4b67      	ldr	r3, [pc, #412]	@ (8002b18 <lcd_init+0xfa0>)
 800297c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002980:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002982:	4b65      	ldr	r3, [pc, #404]	@ (8002b18 <lcd_init+0xfa0>)
 8002984:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002988:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800298a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 800298e:	b29a      	uxth	r2, r3
 8002990:	4b62      	ldr	r3, [pc, #392]	@ (8002b1c <lcd_init+0xfa4>)
 8002992:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002994:	4b60      	ldr	r3, [pc, #384]	@ (8002b18 <lcd_init+0xfa0>)
 8002996:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800299a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800299c:	4b5e      	ldr	r3, [pc, #376]	@ (8002b18 <lcd_init+0xfa0>)
 800299e:	2280      	movs	r2, #128	@ 0x80
 80029a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80029a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b18 <lcd_init+0xfa0>)
 80029a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029a8:	611a      	str	r2, [r3, #16]
}
 80029aa:	bf00      	nop
        lcd_wr_regno(0xF7);
        lcd_wr_xdata(0x20);
 80029ac:	2020      	movs	r0, #32
 80029ae:	f7fd ffa7 	bl	8000900 <lcd_wr_xdata>
 80029b2:	23ea      	movs	r3, #234	@ 0xea
 80029b4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80029b8:	4b57      	ldr	r3, [pc, #348]	@ (8002b18 <lcd_init+0xfa0>)
 80029ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029be:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80029c0:	4b55      	ldr	r3, [pc, #340]	@ (8002b18 <lcd_init+0xfa0>)
 80029c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029c6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80029c8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	4b53      	ldr	r3, [pc, #332]	@ (8002b1c <lcd_init+0xfa4>)
 80029d0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80029d2:	4b51      	ldr	r3, [pc, #324]	@ (8002b18 <lcd_init+0xfa0>)
 80029d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029d8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80029da:	4b4f      	ldr	r3, [pc, #316]	@ (8002b18 <lcd_init+0xfa0>)
 80029dc:	2280      	movs	r2, #128	@ 0x80
 80029de:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80029e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002b18 <lcd_init+0xfa0>)
 80029e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029e6:	611a      	str	r2, [r3, #16]
}
 80029e8:	bf00      	nop
        lcd_wr_regno(0xEA);
        lcd_wr_xdata(0x00);
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7fd ff88 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fd ff85 	bl	8000900 <lcd_wr_xdata>
 80029f6:	23c0      	movs	r3, #192	@ 0xc0
 80029f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80029fc:	4b46      	ldr	r3, [pc, #280]	@ (8002b18 <lcd_init+0xfa0>)
 80029fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a02:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a04:	4b44      	ldr	r3, [pc, #272]	@ (8002b18 <lcd_init+0xfa0>)
 8002a06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a0a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	4b42      	ldr	r3, [pc, #264]	@ (8002b1c <lcd_init+0xfa4>)
 8002a14:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a16:	4b40      	ldr	r3, [pc, #256]	@ (8002b18 <lcd_init+0xfa0>)
 8002a18:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a1c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b18 <lcd_init+0xfa0>)
 8002a20:	2280      	movs	r2, #128	@ 0x80
 8002a22:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a24:	4b3c      	ldr	r3, [pc, #240]	@ (8002b18 <lcd_init+0xfa0>)
 8002a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a2a:	611a      	str	r2, [r3, #16]
}
 8002a2c:	bf00      	nop
        lcd_wr_regno(0xC0); /* Power control */
        lcd_wr_xdata(0x1B); /* VRH[5:0] */
 8002a2e:	201b      	movs	r0, #27
 8002a30:	f7fd ff66 	bl	8000900 <lcd_wr_xdata>
 8002a34:	23c1      	movs	r3, #193	@ 0xc1
 8002a36:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a3a:	4b37      	ldr	r3, [pc, #220]	@ (8002b18 <lcd_init+0xfa0>)
 8002a3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a40:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a42:	4b35      	ldr	r3, [pc, #212]	@ (8002b18 <lcd_init+0xfa0>)
 8002a44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a48:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a4a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <lcd_init+0xfa4>)
 8002a52:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a54:	4b30      	ldr	r3, [pc, #192]	@ (8002b18 <lcd_init+0xfa0>)
 8002a56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a5a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b18 <lcd_init+0xfa0>)
 8002a5e:	2280      	movs	r2, #128	@ 0x80
 8002a60:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a62:	4b2d      	ldr	r3, [pc, #180]	@ (8002b18 <lcd_init+0xfa0>)
 8002a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a68:	611a      	str	r2, [r3, #16]
}
 8002a6a:	bf00      	nop
        lcd_wr_regno(0xC1); /* Power control */
        lcd_wr_xdata(0x01); /* SAP[2:0];BT[3:0] */
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f7fd ff47 	bl	8000900 <lcd_wr_xdata>
 8002a72:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a76:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a7a:	22c5      	movs	r2, #197	@ 0xc5
 8002a7c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a7e:	4b26      	ldr	r3, [pc, #152]	@ (8002b18 <lcd_init+0xfa0>)
 8002a80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a84:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a86:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <lcd_init+0xfa0>)
 8002a88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a8c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a8e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a92:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <lcd_init+0xfa4>)
 8002a9c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b18 <lcd_init+0xfa0>)
 8002aa0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002aa4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b18 <lcd_init+0xfa0>)
 8002aa8:	2280      	movs	r2, #128	@ 0x80
 8002aaa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002aac:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <lcd_init+0xfa0>)
 8002aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab2:	611a      	str	r2, [r3, #16]
}
 8002ab4:	bf00      	nop
        lcd_wr_regno(0xC5); /* VCM control */
        lcd_wr_xdata(0x30); /* 3F */
 8002ab6:	2030      	movs	r0, #48	@ 0x30
 8002ab8:	f7fd ff22 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x30); /* 3C */
 8002abc:	2030      	movs	r0, #48	@ 0x30
 8002abe:	f7fd ff1f 	bl	8000900 <lcd_wr_xdata>
 8002ac2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ac6:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002aca:	22c7      	movs	r2, #199	@ 0xc7
 8002acc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ace:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <lcd_init+0xfa0>)
 8002ad0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ad4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ad6:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <lcd_init+0xfa0>)
 8002ad8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002adc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ade:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ae2:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <lcd_init+0xfa4>)
 8002aec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <lcd_init+0xfa0>)
 8002af0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002af4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002af6:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <lcd_init+0xfa0>)
 8002af8:	2280      	movs	r2, #128	@ 0x80
 8002afa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <lcd_init+0xfa0>)
 8002afe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b02:	611a      	str	r2, [r3, #16]
}
 8002b04:	bf00      	nop
        lcd_wr_regno(0xC7); /* VCM control2 */
        lcd_wr_xdata(0XB7);
 8002b06:	20b7      	movs	r0, #183	@ 0xb7
 8002b08:	f7fd fefa 	bl	8000900 <lcd_wr_xdata>
 8002b0c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b10:	e006      	b.n	8002b20 <lcd_init+0xfa8>
 8002b12:	bf00      	nop
 8002b14:	2000007c 	.word	0x2000007c
 8002b18:	40011000 	.word	0x40011000
 8002b1c:	40010c00 	.word	0x40010c00
 8002b20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b24:	2236      	movs	r2, #54	@ 0x36
 8002b26:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b28:	4bc1      	ldr	r3, [pc, #772]	@ (8002e30 <lcd_init+0x12b8>)
 8002b2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b2e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b30:	4bbf      	ldr	r3, [pc, #764]	@ (8002e30 <lcd_init+0x12b8>)
 8002b32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b36:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b38:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	4bbb      	ldr	r3, [pc, #748]	@ (8002e34 <lcd_init+0x12bc>)
 8002b46:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b48:	4bb9      	ldr	r3, [pc, #740]	@ (8002e30 <lcd_init+0x12b8>)
 8002b4a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b4e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b50:	4bb7      	ldr	r3, [pc, #732]	@ (8002e30 <lcd_init+0x12b8>)
 8002b52:	2280      	movs	r2, #128	@ 0x80
 8002b54:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b56:	4bb6      	ldr	r3, [pc, #728]	@ (8002e30 <lcd_init+0x12b8>)
 8002b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b5c:	611a      	str	r2, [r3, #16]
}
 8002b5e:	bf00      	nop
        lcd_wr_regno(0x36); /*  Memory Access Control */
        lcd_wr_xdata(0x48);
 8002b60:	2048      	movs	r0, #72	@ 0x48
 8002b62:	f7fd fecd 	bl	8000900 <lcd_wr_xdata>
 8002b66:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b6a:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8002b6e:	223a      	movs	r2, #58	@ 0x3a
 8002b70:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b72:	4baf      	ldr	r3, [pc, #700]	@ (8002e30 <lcd_init+0x12b8>)
 8002b74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b78:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b7a:	4bad      	ldr	r3, [pc, #692]	@ (8002e30 <lcd_init+0x12b8>)
 8002b7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b80:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b82:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b86:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	4ba9      	ldr	r3, [pc, #676]	@ (8002e34 <lcd_init+0x12bc>)
 8002b90:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b92:	4ba7      	ldr	r3, [pc, #668]	@ (8002e30 <lcd_init+0x12b8>)
 8002b94:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b98:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b9a:	4ba5      	ldr	r3, [pc, #660]	@ (8002e30 <lcd_init+0x12b8>)
 8002b9c:	2280      	movs	r2, #128	@ 0x80
 8002b9e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ba0:	4ba3      	ldr	r3, [pc, #652]	@ (8002e30 <lcd_init+0x12b8>)
 8002ba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ba6:	611a      	str	r2, [r3, #16]
}
 8002ba8:	bf00      	nop
        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8002baa:	2055      	movs	r0, #85	@ 0x55
 8002bac:	f7fd fea8 	bl	8000900 <lcd_wr_xdata>
 8002bb0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bb8:	22b1      	movs	r2, #177	@ 0xb1
 8002bba:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002bbc:	4b9c      	ldr	r3, [pc, #624]	@ (8002e30 <lcd_init+0x12b8>)
 8002bbe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bc2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002bc4:	4b9a      	ldr	r3, [pc, #616]	@ (8002e30 <lcd_init+0x12b8>)
 8002bc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bca:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002bcc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b96      	ldr	r3, [pc, #600]	@ (8002e34 <lcd_init+0x12bc>)
 8002bda:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002bdc:	4b94      	ldr	r3, [pc, #592]	@ (8002e30 <lcd_init+0x12b8>)
 8002bde:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002be2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002be4:	4b92      	ldr	r3, [pc, #584]	@ (8002e30 <lcd_init+0x12b8>)
 8002be6:	2280      	movs	r2, #128	@ 0x80
 8002be8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002bea:	4b91      	ldr	r3, [pc, #580]	@ (8002e30 <lcd_init+0x12b8>)
 8002bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bf0:	611a      	str	r2, [r3, #16]
}
 8002bf2:	bf00      	nop
        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x00);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7fd fe83 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x1A);
 8002bfa:	201a      	movs	r0, #26
 8002bfc:	f7fd fe80 	bl	8000900 <lcd_wr_xdata>
 8002c00:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c04:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002c08:	22b6      	movs	r2, #182	@ 0xb6
 8002c0a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c0c:	4b88      	ldr	r3, [pc, #544]	@ (8002e30 <lcd_init+0x12b8>)
 8002c0e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c12:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c14:	4b86      	ldr	r3, [pc, #536]	@ (8002e30 <lcd_init+0x12b8>)
 8002c16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c1a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c1c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c20:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	4b82      	ldr	r3, [pc, #520]	@ (8002e34 <lcd_init+0x12bc>)
 8002c2a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c2c:	4b80      	ldr	r3, [pc, #512]	@ (8002e30 <lcd_init+0x12b8>)
 8002c2e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c32:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c34:	4b7e      	ldr	r3, [pc, #504]	@ (8002e30 <lcd_init+0x12b8>)
 8002c36:	2280      	movs	r2, #128	@ 0x80
 8002c38:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c3a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e30 <lcd_init+0x12b8>)
 8002c3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c40:	611a      	str	r2, [r3, #16]
}
 8002c42:	bf00      	nop
        lcd_wr_regno(0xB6); /*  Display Function Control */
        lcd_wr_xdata(0x0A);
 8002c44:	200a      	movs	r0, #10
 8002c46:	f7fd fe5b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8002c4a:	20a2      	movs	r0, #162	@ 0xa2
 8002c4c:	f7fd fe58 	bl	8000900 <lcd_wr_xdata>
 8002c50:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c54:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c58:	22f2      	movs	r2, #242	@ 0xf2
 8002c5a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c5c:	4b74      	ldr	r3, [pc, #464]	@ (8002e30 <lcd_init+0x12b8>)
 8002c5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c62:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c64:	4b72      	ldr	r3, [pc, #456]	@ (8002e30 <lcd_init+0x12b8>)
 8002c66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c6a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c6c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c70:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	4b6e      	ldr	r3, [pc, #440]	@ (8002e34 <lcd_init+0x12bc>)
 8002c7a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8002e30 <lcd_init+0x12b8>)
 8002c7e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c82:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c84:	4b6a      	ldr	r3, [pc, #424]	@ (8002e30 <lcd_init+0x12b8>)
 8002c86:	2280      	movs	r2, #128	@ 0x80
 8002c88:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c8a:	4b69      	ldr	r3, [pc, #420]	@ (8002e30 <lcd_init+0x12b8>)
 8002c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c90:	611a      	str	r2, [r3, #16]
}
 8002c92:	bf00      	nop
        lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
        lcd_wr_xdata(0x00);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fd fe33 	bl	8000900 <lcd_wr_xdata>
 8002c9a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c9e:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002ca2:	2226      	movs	r2, #38	@ 0x26
 8002ca4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ca6:	4b62      	ldr	r3, [pc, #392]	@ (8002e30 <lcd_init+0x12b8>)
 8002ca8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002cae:	4b60      	ldr	r3, [pc, #384]	@ (8002e30 <lcd_init+0x12b8>)
 8002cb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cb4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002cb6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002cba:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e34 <lcd_init+0x12bc>)
 8002cc4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002cc6:	4b5a      	ldr	r3, [pc, #360]	@ (8002e30 <lcd_init+0x12b8>)
 8002cc8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ccc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002cce:	4b58      	ldr	r3, [pc, #352]	@ (8002e30 <lcd_init+0x12b8>)
 8002cd0:	2280      	movs	r2, #128	@ 0x80
 8002cd2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002cd4:	4b56      	ldr	r3, [pc, #344]	@ (8002e30 <lcd_init+0x12b8>)
 8002cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cda:	611a      	str	r2, [r3, #16]
}
 8002cdc:	bf00      	nop
        lcd_wr_regno(0x26); /* Gamma curve selected */
        lcd_wr_xdata(0x01);
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f7fd fe0e 	bl	8000900 <lcd_wr_xdata>
 8002ce4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ce8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cec:	22e0      	movs	r2, #224	@ 0xe0
 8002cee:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002cf0:	4b4f      	ldr	r3, [pc, #316]	@ (8002e30 <lcd_init+0x12b8>)
 8002cf2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cf6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e30 <lcd_init+0x12b8>)
 8002cfa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cfe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d00:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d04:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	4b49      	ldr	r3, [pc, #292]	@ (8002e34 <lcd_init+0x12bc>)
 8002d0e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d10:	4b47      	ldr	r3, [pc, #284]	@ (8002e30 <lcd_init+0x12b8>)
 8002d12:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d16:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002d18:	4b45      	ldr	r3, [pc, #276]	@ (8002e30 <lcd_init+0x12b8>)
 8002d1a:	2280      	movs	r2, #128	@ 0x80
 8002d1c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d1e:	4b44      	ldr	r3, [pc, #272]	@ (8002e30 <lcd_init+0x12b8>)
 8002d20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d24:	611a      	str	r2, [r3, #16]
}
 8002d26:	bf00      	nop
        lcd_wr_regno(0xE0); /* Set Gamma */
        lcd_wr_xdata(0x0F);
 8002d28:	200f      	movs	r0, #15
 8002d2a:	f7fd fde9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8002d2e:	202a      	movs	r0, #42	@ 0x2a
 8002d30:	f7fd fde6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002d34:	2028      	movs	r0, #40	@ 0x28
 8002d36:	f7fd fde3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002d3a:	2008      	movs	r0, #8
 8002d3c:	f7fd fde0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8002d40:	200e      	movs	r0, #14
 8002d42:	f7fd fddd 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8002d46:	2008      	movs	r0, #8
 8002d48:	f7fd fdda 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002d4c:	2054      	movs	r0, #84	@ 0x54
 8002d4e:	f7fd fdd7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0XA9);
 8002d52:	20a9      	movs	r0, #169	@ 0xa9
 8002d54:	f7fd fdd4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8002d58:	2043      	movs	r0, #67	@ 0x43
 8002d5a:	f7fd fdd1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);
 8002d5e:	200a      	movs	r0, #10
 8002d60:	f7fd fdce 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002d64:	200f      	movs	r0, #15
 8002d66:	f7fd fdcb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	f7fd fdc8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fd fdc5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7fd fdc2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fd fdbf 	bl	8000900 <lcd_wr_xdata>
 8002d82:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d86:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002d8a:	22e1      	movs	r2, #225	@ 0xe1
 8002d8c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d8e:	4b28      	ldr	r3, [pc, #160]	@ (8002e30 <lcd_init+0x12b8>)
 8002d90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d94:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d96:	4b26      	ldr	r3, [pc, #152]	@ (8002e30 <lcd_init+0x12b8>)
 8002d98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d9c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d9e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002da2:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	4b22      	ldr	r3, [pc, #136]	@ (8002e34 <lcd_init+0x12bc>)
 8002dac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002dae:	4b20      	ldr	r3, [pc, #128]	@ (8002e30 <lcd_init+0x12b8>)
 8002db0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002db4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002db6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e30 <lcd_init+0x12b8>)
 8002db8:	2280      	movs	r2, #128	@ 0x80
 8002dba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e30 <lcd_init+0x12b8>)
 8002dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dc2:	611a      	str	r2, [r3, #16]
}
 8002dc4:	bf00      	nop
        lcd_wr_regno(0XE1); /* Set Gamma */
        lcd_wr_xdata(0x00);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f7fd fd9a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);
 8002dcc:	2015      	movs	r0, #21
 8002dce:	f7fd fd97 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002dd2:	2017      	movs	r0, #23
 8002dd4:	f7fd fd94 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002dd8:	2007      	movs	r0, #7
 8002dda:	f7fd fd91 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 8002dde:	2011      	movs	r0, #17
 8002de0:	f7fd fd8e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8002de4:	2006      	movs	r0, #6
 8002de6:	f7fd fd8b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x2B);
 8002dea:	202b      	movs	r0, #43	@ 0x2b
 8002dec:	f7fd fd88 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8002df0:	2056      	movs	r0, #86	@ 0x56
 8002df2:	f7fd fd85 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8002df6:	203c      	movs	r0, #60	@ 0x3c
 8002df8:	f7fd fd82 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8002dfc:	2005      	movs	r0, #5
 8002dfe:	f7fd fd7f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8002e02:	2010      	movs	r0, #16
 8002e04:	f7fd fd7c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002e08:	200f      	movs	r0, #15
 8002e0a:	f7fd fd79 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8002e0e:	203f      	movs	r0, #63	@ 0x3f
 8002e10:	f7fd fd76 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8002e14:	203f      	movs	r0, #63	@ 0x3f
 8002e16:	f7fd fd73 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8002e1a:	200f      	movs	r0, #15
 8002e1c:	f7fd fd70 	bl	8000900 <lcd_wr_xdata>
 8002e20:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e24:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e28:	222b      	movs	r2, #43	@ 0x2b
 8002e2a:	801a      	strh	r2, [r3, #0]
 8002e2c:	e004      	b.n	8002e38 <lcd_init+0x12c0>
 8002e2e:	bf00      	nop
 8002e30:	40011000 	.word	0x40011000
 8002e34:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e38:	4b4e      	ldr	r3, [pc, #312]	@ (8002f74 <lcd_init+0x13fc>)
 8002e3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e3e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e40:	4b4c      	ldr	r3, [pc, #304]	@ (8002f74 <lcd_init+0x13fc>)
 8002e42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e46:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e48:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e4c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	4b48      	ldr	r3, [pc, #288]	@ (8002f78 <lcd_init+0x1400>)
 8002e56:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e58:	4b46      	ldr	r3, [pc, #280]	@ (8002f74 <lcd_init+0x13fc>)
 8002e5a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e5e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e60:	4b44      	ldr	r3, [pc, #272]	@ (8002f74 <lcd_init+0x13fc>)
 8002e62:	2280      	movs	r2, #128	@ 0x80
 8002e64:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e66:	4b43      	ldr	r3, [pc, #268]	@ (8002f74 <lcd_init+0x13fc>)
 8002e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6c:	611a      	str	r2, [r3, #16]
}
 8002e6e:	bf00      	nop
        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fd45 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fd fd42 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f7fd fd3f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8002e82:	203f      	movs	r0, #63	@ 0x3f
 8002e84:	f7fd fd3c 	bl	8000900 <lcd_wr_xdata>
 8002e88:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002e8c:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8002e90:	222a      	movs	r2, #42	@ 0x2a
 8002e92:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e94:	4b37      	ldr	r3, [pc, #220]	@ (8002f74 <lcd_init+0x13fc>)
 8002e96:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e9a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e9c:	4b35      	ldr	r3, [pc, #212]	@ (8002f74 <lcd_init+0x13fc>)
 8002e9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ea2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ea4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ea8:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b31      	ldr	r3, [pc, #196]	@ (8002f78 <lcd_init+0x1400>)
 8002eb2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8002f74 <lcd_init+0x13fc>)
 8002eb6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002eba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8002f74 <lcd_init+0x13fc>)
 8002ebe:	2280      	movs	r2, #128	@ 0x80
 8002ec0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8002f74 <lcd_init+0x13fc>)
 8002ec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ec8:	611a      	str	r2, [r3, #16]
}
 8002eca:	bf00      	nop
        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f7fd fd17 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fd fd14 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7fd fd11 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 8002ede:	20ef      	movs	r0, #239	@ 0xef
 8002ee0:	f7fd fd0e 	bl	8000900 <lcd_wr_xdata>
 8002ee4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ee8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002eec:	2211      	movs	r2, #17
 8002eee:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ef0:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <lcd_init+0x13fc>)
 8002ef2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ef6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f74 <lcd_init+0x13fc>)
 8002efa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002efe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f00:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f04:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <lcd_init+0x1400>)
 8002f0e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f10:	4b18      	ldr	r3, [pc, #96]	@ (8002f74 <lcd_init+0x13fc>)
 8002f12:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f16:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f18:	4b16      	ldr	r3, [pc, #88]	@ (8002f74 <lcd_init+0x13fc>)
 8002f1a:	2280      	movs	r2, #128	@ 0x80
 8002f1c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f1e:	4b15      	ldr	r3, [pc, #84]	@ (8002f74 <lcd_init+0x13fc>)
 8002f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f24:	611a      	str	r2, [r3, #16]
}
 8002f26:	bf00      	nop
        lcd_wr_regno(0x11); /* Exit Sleep */
        HAL_Delay(120);
 8002f28:	2078      	movs	r0, #120	@ 0x78
 8002f2a:	f004 f97d 	bl	8007228 <HAL_Delay>
 8002f2e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f32:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8002f36:	2229      	movs	r2, #41	@ 0x29
 8002f38:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f74 <lcd_init+0x13fc>)
 8002f3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f40:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f42:	4b0c      	ldr	r3, [pc, #48]	@ (8002f74 <lcd_init+0x13fc>)
 8002f44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f48:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f4a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002f4e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	4b08      	ldr	r3, [pc, #32]	@ (8002f78 <lcd_init+0x1400>)
 8002f58:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f5a:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <lcd_init+0x13fc>)
 8002f5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f60:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f62:	4b04      	ldr	r3, [pc, #16]	@ (8002f74 <lcd_init+0x13fc>)
 8002f64:	2280      	movs	r2, #128	@ 0x80
 8002f66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f68:	4b02      	ldr	r3, [pc, #8]	@ (8002f74 <lcd_init+0x13fc>)
 8002f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f6e:	611a      	str	r2, [r3, #16]
}
 8002f70:	f003 bd4b 	b.w	8006a0a <lcd_init+0x4e92>
 8002f74:	40011000 	.word	0x40011000
 8002f78:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0x5310)
 8002f7c:	4bbe      	ldr	r3, [pc, #760]	@ (8003278 <lcd_init+0x1700>)
 8002f7e:	889b      	ldrh	r3, [r3, #4]
 8002f80:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002f84:	4293      	cmp	r3, r2
 8002f86:	f041 846d 	bne.w	8004864 <lcd_init+0x2cec>
 8002f8a:	23ed      	movs	r3, #237	@ 0xed
 8002f8c:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f90:	4bba      	ldr	r3, [pc, #744]	@ (800327c <lcd_init+0x1704>)
 8002f92:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f96:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f98:	4bb8      	ldr	r3, [pc, #736]	@ (800327c <lcd_init+0x1704>)
 8002f9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f9e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002fa0:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	4bb6      	ldr	r3, [pc, #728]	@ (8003280 <lcd_init+0x1708>)
 8002fa8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002faa:	4bb4      	ldr	r3, [pc, #720]	@ (800327c <lcd_init+0x1704>)
 8002fac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002fb0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002fb2:	4bb2      	ldr	r3, [pc, #712]	@ (800327c <lcd_init+0x1704>)
 8002fb4:	2280      	movs	r2, #128	@ 0x80
 8002fb6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002fb8:	4bb0      	ldr	r3, [pc, #704]	@ (800327c <lcd_init+0x1704>)
 8002fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fbe:	611a      	str	r2, [r3, #16]
}
 8002fc0:	bf00      	nop
    {
        //lcd_ex_nt35310_reginit();   /* ִ��NT35310��ʼ�� */
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x01);
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f7fd fc9c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE);
 8002fc8:	20fe      	movs	r0, #254	@ 0xfe
 8002fca:	f7fd fc99 	bl	8000900 <lcd_wr_xdata>
 8002fce:	23ee      	movs	r3, #238	@ 0xee
 8002fd0:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002fd4:	4ba9      	ldr	r3, [pc, #676]	@ (800327c <lcd_init+0x1704>)
 8002fd6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fda:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002fdc:	4ba7      	ldr	r3, [pc, #668]	@ (800327c <lcd_init+0x1704>)
 8002fde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fe2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002fe4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	4ba5      	ldr	r3, [pc, #660]	@ (8003280 <lcd_init+0x1708>)
 8002fec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002fee:	4ba3      	ldr	r3, [pc, #652]	@ (800327c <lcd_init+0x1704>)
 8002ff0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ff4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ff6:	4ba1      	ldr	r3, [pc, #644]	@ (800327c <lcd_init+0x1704>)
 8002ff8:	2280      	movs	r2, #128	@ 0x80
 8002ffa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ffc:	4b9f      	ldr	r3, [pc, #636]	@ (800327c <lcd_init+0x1704>)
 8002ffe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003002:	611a      	str	r2, [r3, #16]
}
 8003004:	bf00      	nop

        lcd_wr_regno(0xEE);
        lcd_wr_xdata(0xDE);
 8003006:	20de      	movs	r0, #222	@ 0xde
 8003008:	f7fd fc7a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 800300c:	2021      	movs	r0, #33	@ 0x21
 800300e:	f7fd fc77 	bl	8000900 <lcd_wr_xdata>
 8003012:	23f1      	movs	r3, #241	@ 0xf1
 8003014:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003018:	4b98      	ldr	r3, [pc, #608]	@ (800327c <lcd_init+0x1704>)
 800301a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800301e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003020:	4b96      	ldr	r3, [pc, #600]	@ (800327c <lcd_init+0x1704>)
 8003022:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003026:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003028:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 800302c:	b29a      	uxth	r2, r3
 800302e:	4b94      	ldr	r3, [pc, #592]	@ (8003280 <lcd_init+0x1708>)
 8003030:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003032:	4b92      	ldr	r3, [pc, #584]	@ (800327c <lcd_init+0x1704>)
 8003034:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003038:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800303a:	4b90      	ldr	r3, [pc, #576]	@ (800327c <lcd_init+0x1704>)
 800303c:	2280      	movs	r2, #128	@ 0x80
 800303e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003040:	4b8e      	ldr	r3, [pc, #568]	@ (800327c <lcd_init+0x1704>)
 8003042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003046:	611a      	str	r2, [r3, #16]
}
 8003048:	bf00      	nop

        lcd_wr_regno(0xF1);
        lcd_wr_xdata(0x01);
 800304a:	2001      	movs	r0, #1
 800304c:	f7fd fc58 	bl	8000900 <lcd_wr_xdata>
 8003050:	23df      	movs	r3, #223	@ 0xdf
 8003052:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003056:	4b89      	ldr	r3, [pc, #548]	@ (800327c <lcd_init+0x1704>)
 8003058:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800305c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800305e:	4b87      	ldr	r3, [pc, #540]	@ (800327c <lcd_init+0x1704>)
 8003060:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003064:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003066:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 800306a:	b29a      	uxth	r2, r3
 800306c:	4b84      	ldr	r3, [pc, #528]	@ (8003280 <lcd_init+0x1708>)
 800306e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003070:	4b82      	ldr	r3, [pc, #520]	@ (800327c <lcd_init+0x1704>)
 8003072:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003076:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003078:	4b80      	ldr	r3, [pc, #512]	@ (800327c <lcd_init+0x1704>)
 800307a:	2280      	movs	r2, #128	@ 0x80
 800307c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800307e:	4b7f      	ldr	r3, [pc, #508]	@ (800327c <lcd_init+0x1704>)
 8003080:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003084:	611a      	str	r2, [r3, #16]
}
 8003086:	bf00      	nop
        lcd_wr_regno(0xDF);
        lcd_wr_xdata(0x10);
 8003088:	2010      	movs	r0, #16
 800308a:	f7fd fc39 	bl	8000900 <lcd_wr_xdata>
 800308e:	23c4      	movs	r3, #196	@ 0xc4
 8003090:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003094:	4b79      	ldr	r3, [pc, #484]	@ (800327c <lcd_init+0x1704>)
 8003096:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800309a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800309c:	4b77      	ldr	r3, [pc, #476]	@ (800327c <lcd_init+0x1704>)
 800309e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030a2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030a4:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	4b75      	ldr	r3, [pc, #468]	@ (8003280 <lcd_init+0x1708>)
 80030ac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80030ae:	4b73      	ldr	r3, [pc, #460]	@ (800327c <lcd_init+0x1704>)
 80030b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030b4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80030b6:	4b71      	ldr	r3, [pc, #452]	@ (800327c <lcd_init+0x1704>)
 80030b8:	2280      	movs	r2, #128	@ 0x80
 80030ba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80030bc:	4b6f      	ldr	r3, [pc, #444]	@ (800327c <lcd_init+0x1704>)
 80030be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030c2:	611a      	str	r2, [r3, #16]
}
 80030c4:	bf00      	nop

        /* VCOMvoltage */
        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x8F);  /* 5f */
 80030c6:	208f      	movs	r0, #143	@ 0x8f
 80030c8:	f7fd fc1a 	bl	8000900 <lcd_wr_xdata>
 80030cc:	23c6      	movs	r3, #198	@ 0xc6
 80030ce:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030d2:	4b6a      	ldr	r3, [pc, #424]	@ (800327c <lcd_init+0x1704>)
 80030d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030d8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030da:	4b68      	ldr	r3, [pc, #416]	@ (800327c <lcd_init+0x1704>)
 80030dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030e0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030e2:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	4b65      	ldr	r3, [pc, #404]	@ (8003280 <lcd_init+0x1708>)
 80030ea:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80030ec:	4b63      	ldr	r3, [pc, #396]	@ (800327c <lcd_init+0x1704>)
 80030ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030f2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80030f4:	4b61      	ldr	r3, [pc, #388]	@ (800327c <lcd_init+0x1704>)
 80030f6:	2280      	movs	r2, #128	@ 0x80
 80030f8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80030fa:	4b60      	ldr	r3, [pc, #384]	@ (800327c <lcd_init+0x1704>)
 80030fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003100:	611a      	str	r2, [r3, #16]
}
 8003102:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x00);
 8003104:	2000      	movs	r0, #0
 8003106:	f7fd fbfb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 800310a:	20e2      	movs	r0, #226	@ 0xe2
 800310c:	f7fd fbf8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003110:	20e2      	movs	r0, #226	@ 0xe2
 8003112:	f7fd fbf5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003116:	20e2      	movs	r0, #226	@ 0xe2
 8003118:	f7fd fbf2 	bl	8000900 <lcd_wr_xdata>
 800311c:	23bf      	movs	r3, #191	@ 0xbf
 800311e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003122:	4b56      	ldr	r3, [pc, #344]	@ (800327c <lcd_init+0x1704>)
 8003124:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003128:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800312a:	4b54      	ldr	r3, [pc, #336]	@ (800327c <lcd_init+0x1704>)
 800312c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003130:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003132:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003136:	b29a      	uxth	r2, r3
 8003138:	4b51      	ldr	r3, [pc, #324]	@ (8003280 <lcd_init+0x1708>)
 800313a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800313c:	4b4f      	ldr	r3, [pc, #316]	@ (800327c <lcd_init+0x1704>)
 800313e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003142:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003144:	4b4d      	ldr	r3, [pc, #308]	@ (800327c <lcd_init+0x1704>)
 8003146:	2280      	movs	r2, #128	@ 0x80
 8003148:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800314a:	4b4c      	ldr	r3, [pc, #304]	@ (800327c <lcd_init+0x1704>)
 800314c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003150:	611a      	str	r2, [r3, #16]
}
 8003152:	bf00      	nop
        lcd_wr_regno(0xBF);
        lcd_wr_xdata(0xAA);
 8003154:	20aa      	movs	r0, #170	@ 0xaa
 8003156:	f7fd fbd3 	bl	8000900 <lcd_wr_xdata>
 800315a:	23b0      	movs	r3, #176	@ 0xb0
 800315c:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003160:	4b46      	ldr	r3, [pc, #280]	@ (800327c <lcd_init+0x1704>)
 8003162:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003166:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003168:	4b44      	ldr	r3, [pc, #272]	@ (800327c <lcd_init+0x1704>)
 800316a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800316e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003170:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8003174:	b29a      	uxth	r2, r3
 8003176:	4b42      	ldr	r3, [pc, #264]	@ (8003280 <lcd_init+0x1708>)
 8003178:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800317a:	4b40      	ldr	r3, [pc, #256]	@ (800327c <lcd_init+0x1704>)
 800317c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003180:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003182:	4b3e      	ldr	r3, [pc, #248]	@ (800327c <lcd_init+0x1704>)
 8003184:	2280      	movs	r2, #128	@ 0x80
 8003186:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003188:	4b3c      	ldr	r3, [pc, #240]	@ (800327c <lcd_init+0x1704>)
 800318a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800318e:	611a      	str	r2, [r3, #16]
}
 8003190:	bf00      	nop

        lcd_wr_regno(0xB0);
        lcd_wr_xdata(0x0D);
 8003192:	200d      	movs	r0, #13
 8003194:	f7fd fbb4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003198:	2000      	movs	r0, #0
 800319a:	f7fd fbb1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 800319e:	200d      	movs	r0, #13
 80031a0:	f7fd fbae 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fd fbab 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 80031aa:	2011      	movs	r0, #17
 80031ac:	f7fd fba8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fd fba5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 80031b6:	2019      	movs	r0, #25
 80031b8:	f7fd fba2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fd fb9f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 80031c2:	2021      	movs	r0, #33	@ 0x21
 80031c4:	f7fd fb9c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fd fb99 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x2D);
 80031ce:	202d      	movs	r0, #45	@ 0x2d
 80031d0:	f7fd fb96 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fb93 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x3D);
 80031da:	203d      	movs	r0, #61	@ 0x3d
 80031dc:	f7fd fb90 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fd fb8d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80031e6:	205d      	movs	r0, #93	@ 0x5d
 80031e8:	f7fd fb8a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fd fb87 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80031f2:	205d      	movs	r0, #93	@ 0x5d
 80031f4:	f7fd fb84 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7fd fb81 	bl	8000900 <lcd_wr_xdata>
 80031fe:	23b1      	movs	r3, #177	@ 0xb1
 8003200:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003204:	4b1d      	ldr	r3, [pc, #116]	@ (800327c <lcd_init+0x1704>)
 8003206:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800320a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800320c:	4b1b      	ldr	r3, [pc, #108]	@ (800327c <lcd_init+0x1704>)
 800320e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003212:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003214:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8003218:	b29a      	uxth	r2, r3
 800321a:	4b19      	ldr	r3, [pc, #100]	@ (8003280 <lcd_init+0x1708>)
 800321c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800321e:	4b17      	ldr	r3, [pc, #92]	@ (800327c <lcd_init+0x1704>)
 8003220:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003224:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003226:	4b15      	ldr	r3, [pc, #84]	@ (800327c <lcd_init+0x1704>)
 8003228:	2280      	movs	r2, #128	@ 0x80
 800322a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800322c:	4b13      	ldr	r3, [pc, #76]	@ (800327c <lcd_init+0x1704>)
 800322e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003232:	611a      	str	r2, [r3, #16]
}
 8003234:	bf00      	nop

        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x80);
 8003236:	2080      	movs	r0, #128	@ 0x80
 8003238:	f7fd fb62 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800323c:	2000      	movs	r0, #0
 800323e:	f7fd fb5f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003242:	208b      	movs	r0, #139	@ 0x8b
 8003244:	f7fd fb5c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003248:	2000      	movs	r0, #0
 800324a:	f7fd fb59 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 800324e:	2096      	movs	r0, #150	@ 0x96
 8003250:	f7fd fb56 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003254:	2000      	movs	r0, #0
 8003256:	f7fd fb53 	bl	8000900 <lcd_wr_xdata>
 800325a:	23b2      	movs	r3, #178	@ 0xb2
 800325c:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003260:	4b06      	ldr	r3, [pc, #24]	@ (800327c <lcd_init+0x1704>)
 8003262:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003266:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <lcd_init+0x1704>)
 800326a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800326e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003270:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8003274:	b29a      	uxth	r2, r3
 8003276:	e005      	b.n	8003284 <lcd_init+0x170c>
 8003278:	2000007c 	.word	0x2000007c
 800327c:	40011000 	.word	0x40011000
 8003280:	40010c00 	.word	0x40010c00
 8003284:	4bd0      	ldr	r3, [pc, #832]	@ (80035c8 <lcd_init+0x1a50>)
 8003286:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003288:	4bd0      	ldr	r3, [pc, #832]	@ (80035cc <lcd_init+0x1a54>)
 800328a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800328e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003290:	4bce      	ldr	r3, [pc, #824]	@ (80035cc <lcd_init+0x1a54>)
 8003292:	2280      	movs	r2, #128	@ 0x80
 8003294:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003296:	4bcd      	ldr	r3, [pc, #820]	@ (80035cc <lcd_init+0x1a54>)
 8003298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800329c:	611a      	str	r2, [r3, #16]
}
 800329e:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x00);
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7fd fb2d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fd fb2a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 80032ac:	2002      	movs	r0, #2
 80032ae:	f7fd fb27 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7fd fb24 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 80032b8:	2003      	movs	r0, #3
 80032ba:	f7fd fb21 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fd fb1e 	bl	8000900 <lcd_wr_xdata>
 80032c4:	23b3      	movs	r3, #179	@ 0xb3
 80032c6:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80032ca:	4bc0      	ldr	r3, [pc, #768]	@ (80035cc <lcd_init+0x1a54>)
 80032cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032d0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80032d2:	4bbe      	ldr	r3, [pc, #760]	@ (80035cc <lcd_init+0x1a54>)
 80032d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032d8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80032da:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 80032de:	b29a      	uxth	r2, r3
 80032e0:	4bb9      	ldr	r3, [pc, #740]	@ (80035c8 <lcd_init+0x1a50>)
 80032e2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80032e4:	4bb9      	ldr	r3, [pc, #740]	@ (80035cc <lcd_init+0x1a54>)
 80032e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032ea:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80032ec:	4bb7      	ldr	r3, [pc, #732]	@ (80035cc <lcd_init+0x1a54>)
 80032ee:	2280      	movs	r2, #128	@ 0x80
 80032f0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80032f2:	4bb6      	ldr	r3, [pc, #728]	@ (80035cc <lcd_init+0x1a54>)
 80032f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f8:	611a      	str	r2, [r3, #16]
}
 80032fa:	bf00      	nop

        lcd_wr_regno(0xB3);
        lcd_wr_xdata(0x00);
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7fd faff 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003302:	2000      	movs	r0, #0
 8003304:	f7fd fafc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003308:	2000      	movs	r0, #0
 800330a:	f7fd faf9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800330e:	2000      	movs	r0, #0
 8003310:	f7fd faf6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003314:	2000      	movs	r0, #0
 8003316:	f7fd faf3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800331a:	2000      	movs	r0, #0
 800331c:	f7fd faf0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003320:	2000      	movs	r0, #0
 8003322:	f7fd faed 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003326:	2000      	movs	r0, #0
 8003328:	f7fd faea 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800332c:	2000      	movs	r0, #0
 800332e:	f7fd fae7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003332:	2000      	movs	r0, #0
 8003334:	f7fd fae4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003338:	2000      	movs	r0, #0
 800333a:	f7fd fae1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800333e:	2000      	movs	r0, #0
 8003340:	f7fd fade 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003344:	2000      	movs	r0, #0
 8003346:	f7fd fadb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800334a:	2000      	movs	r0, #0
 800334c:	f7fd fad8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003350:	2000      	movs	r0, #0
 8003352:	f7fd fad5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003356:	2000      	movs	r0, #0
 8003358:	f7fd fad2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800335c:	2000      	movs	r0, #0
 800335e:	f7fd facf 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003362:	2000      	movs	r0, #0
 8003364:	f7fd facc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003368:	2000      	movs	r0, #0
 800336a:	f7fd fac9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800336e:	2000      	movs	r0, #0
 8003370:	f7fd fac6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003374:	2000      	movs	r0, #0
 8003376:	f7fd fac3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800337a:	2000      	movs	r0, #0
 800337c:	f7fd fac0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003380:	2000      	movs	r0, #0
 8003382:	f7fd fabd 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003386:	2000      	movs	r0, #0
 8003388:	f7fd faba 	bl	8000900 <lcd_wr_xdata>
 800338c:	23b4      	movs	r3, #180	@ 0xb4
 800338e:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003392:	4b8e      	ldr	r3, [pc, #568]	@ (80035cc <lcd_init+0x1a54>)
 8003394:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003398:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800339a:	4b8c      	ldr	r3, [pc, #560]	@ (80035cc <lcd_init+0x1a54>)
 800339c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033a0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80033a2:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	4b87      	ldr	r3, [pc, #540]	@ (80035c8 <lcd_init+0x1a50>)
 80033aa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80033ac:	4b87      	ldr	r3, [pc, #540]	@ (80035cc <lcd_init+0x1a54>)
 80033ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80033b2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80033b4:	4b85      	ldr	r3, [pc, #532]	@ (80035cc <lcd_init+0x1a54>)
 80033b6:	2280      	movs	r2, #128	@ 0x80
 80033b8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80033ba:	4b84      	ldr	r3, [pc, #528]	@ (80035cc <lcd_init+0x1a54>)
 80033bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033c0:	611a      	str	r2, [r3, #16]
}
 80033c2:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x8B);
 80033c4:	208b      	movs	r0, #139	@ 0x8b
 80033c6:	f7fd fa9b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fd fa98 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 80033d0:	2096      	movs	r0, #150	@ 0x96
 80033d2:	f7fd fa95 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fd fa92 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 80033dc:	20a1      	movs	r0, #161	@ 0xa1
 80033de:	f7fd fa8f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fd fa8c 	bl	8000900 <lcd_wr_xdata>
 80033e8:	23b5      	movs	r3, #181	@ 0xb5
 80033ea:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80033ee:	4b77      	ldr	r3, [pc, #476]	@ (80035cc <lcd_init+0x1a54>)
 80033f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033f4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80033f6:	4b75      	ldr	r3, [pc, #468]	@ (80035cc <lcd_init+0x1a54>)
 80033f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033fc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80033fe:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8003402:	b29a      	uxth	r2, r3
 8003404:	4b70      	ldr	r3, [pc, #448]	@ (80035c8 <lcd_init+0x1a50>)
 8003406:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003408:	4b70      	ldr	r3, [pc, #448]	@ (80035cc <lcd_init+0x1a54>)
 800340a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800340e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003410:	4b6e      	ldr	r3, [pc, #440]	@ (80035cc <lcd_init+0x1a54>)
 8003412:	2280      	movs	r2, #128	@ 0x80
 8003414:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003416:	4b6d      	ldr	r3, [pc, #436]	@ (80035cc <lcd_init+0x1a54>)
 8003418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800341c:	611a      	str	r2, [r3, #16]
}
 800341e:	bf00      	nop

        lcd_wr_regno(0xB5);
        lcd_wr_xdata(0x02);
 8003420:	2002      	movs	r0, #2
 8003422:	f7fd fa6d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003426:	2000      	movs	r0, #0
 8003428:	f7fd fa6a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 800342c:	2003      	movs	r0, #3
 800342e:	f7fd fa67 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003432:	2000      	movs	r0, #0
 8003434:	f7fd fa64 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8003438:	2004      	movs	r0, #4
 800343a:	f7fd fa61 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800343e:	2000      	movs	r0, #0
 8003440:	f7fd fa5e 	bl	8000900 <lcd_wr_xdata>
 8003444:	23b6      	movs	r3, #182	@ 0xb6
 8003446:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800344a:	4b60      	ldr	r3, [pc, #384]	@ (80035cc <lcd_init+0x1a54>)
 800344c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003450:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003452:	4b5e      	ldr	r3, [pc, #376]	@ (80035cc <lcd_init+0x1a54>)
 8003454:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003458:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800345a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 800345e:	b29a      	uxth	r2, r3
 8003460:	4b59      	ldr	r3, [pc, #356]	@ (80035c8 <lcd_init+0x1a50>)
 8003462:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003464:	4b59      	ldr	r3, [pc, #356]	@ (80035cc <lcd_init+0x1a54>)
 8003466:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800346a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800346c:	4b57      	ldr	r3, [pc, #348]	@ (80035cc <lcd_init+0x1a54>)
 800346e:	2280      	movs	r2, #128	@ 0x80
 8003470:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003472:	4b56      	ldr	r3, [pc, #344]	@ (80035cc <lcd_init+0x1a54>)
 8003474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003478:	611a      	str	r2, [r3, #16]
}
 800347a:	bf00      	nop

        lcd_wr_regno(0xB6);
        lcd_wr_xdata(0x00);
 800347c:	2000      	movs	r0, #0
 800347e:	f7fd fa3f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003482:	2000      	movs	r0, #0
 8003484:	f7fd fa3c 	bl	8000900 <lcd_wr_xdata>
 8003488:	23b7      	movs	r3, #183	@ 0xb7
 800348a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800348e:	4b4f      	ldr	r3, [pc, #316]	@ (80035cc <lcd_init+0x1a54>)
 8003490:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003494:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003496:	4b4d      	ldr	r3, [pc, #308]	@ (80035cc <lcd_init+0x1a54>)
 8003498:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800349c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800349e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	4b48      	ldr	r3, [pc, #288]	@ (80035c8 <lcd_init+0x1a50>)
 80034a6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80034a8:	4b48      	ldr	r3, [pc, #288]	@ (80035cc <lcd_init+0x1a54>)
 80034aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034ae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80034b0:	4b46      	ldr	r3, [pc, #280]	@ (80035cc <lcd_init+0x1a54>)
 80034b2:	2280      	movs	r2, #128	@ 0x80
 80034b4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80034b6:	4b45      	ldr	r3, [pc, #276]	@ (80035cc <lcd_init+0x1a54>)
 80034b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034bc:	611a      	str	r2, [r3, #16]
}
 80034be:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x00);
 80034c0:	2000      	movs	r0, #0
 80034c2:	f7fd fa1d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7fd fa1a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 80034cc:	203f      	movs	r0, #63	@ 0x3f
 80034ce:	f7fd fa17 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034d2:	2000      	movs	r0, #0
 80034d4:	f7fd fa14 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x5E);
 80034d8:	205e      	movs	r0, #94	@ 0x5e
 80034da:	f7fd fa11 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fd fa0e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 80034e4:	2064      	movs	r0, #100	@ 0x64
 80034e6:	f7fd fa0b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7fd fa08 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x8C);
 80034f0:	208c      	movs	r0, #140	@ 0x8c
 80034f2:	f7fd fa05 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fd fa02 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xAC);
 80034fc:	20ac      	movs	r0, #172	@ 0xac
 80034fe:	f7fd f9ff 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003502:	2000      	movs	r0, #0
 8003504:	f7fd f9fc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003508:	20dc      	movs	r0, #220	@ 0xdc
 800350a:	f7fd f9f9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800350e:	2000      	movs	r0, #0
 8003510:	f7fd f9f6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x70);
 8003514:	2070      	movs	r0, #112	@ 0x70
 8003516:	f7fd f9f3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800351a:	2000      	movs	r0, #0
 800351c:	f7fd f9f0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x90);
 8003520:	2090      	movs	r0, #144	@ 0x90
 8003522:	f7fd f9ed 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003526:	2000      	movs	r0, #0
 8003528:	f7fd f9ea 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xEB);
 800352c:	20eb      	movs	r0, #235	@ 0xeb
 800352e:	f7fd f9e7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003532:	2000      	movs	r0, #0
 8003534:	f7fd f9e4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003538:	20dc      	movs	r0, #220	@ 0xdc
 800353a:	f7fd f9e1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800353e:	2000      	movs	r0, #0
 8003540:	f7fd f9de 	bl	8000900 <lcd_wr_xdata>
 8003544:	23b8      	movs	r3, #184	@ 0xb8
 8003546:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800354a:	4b20      	ldr	r3, [pc, #128]	@ (80035cc <lcd_init+0x1a54>)
 800354c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003550:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003552:	4b1e      	ldr	r3, [pc, #120]	@ (80035cc <lcd_init+0x1a54>)
 8003554:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003558:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800355a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 800355e:	b29a      	uxth	r2, r3
 8003560:	4b19      	ldr	r3, [pc, #100]	@ (80035c8 <lcd_init+0x1a50>)
 8003562:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003564:	4b19      	ldr	r3, [pc, #100]	@ (80035cc <lcd_init+0x1a54>)
 8003566:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800356a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800356c:	4b17      	ldr	r3, [pc, #92]	@ (80035cc <lcd_init+0x1a54>)
 800356e:	2280      	movs	r2, #128	@ 0x80
 8003570:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003572:	4b16      	ldr	r3, [pc, #88]	@ (80035cc <lcd_init+0x1a54>)
 8003574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003578:	611a      	str	r2, [r3, #16]
}
 800357a:	bf00      	nop

        lcd_wr_regno(0xB8);
        lcd_wr_xdata(0x00);
 800357c:	2000      	movs	r0, #0
 800357e:	f7fd f9bf 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003582:	2000      	movs	r0, #0
 8003584:	f7fd f9bc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003588:	2000      	movs	r0, #0
 800358a:	f7fd f9b9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800358e:	2000      	movs	r0, #0
 8003590:	f7fd f9b6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003594:	2000      	movs	r0, #0
 8003596:	f7fd f9b3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800359a:	2000      	movs	r0, #0
 800359c:	f7fd f9b0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035a0:	2000      	movs	r0, #0
 80035a2:	f7fd f9ad 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035a6:	2000      	movs	r0, #0
 80035a8:	f7fd f9aa 	bl	8000900 <lcd_wr_xdata>
 80035ac:	23ba      	movs	r3, #186	@ 0xba
 80035ae:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <lcd_init+0x1a54>)
 80035b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80035ba:	4b04      	ldr	r3, [pc, #16]	@ (80035cc <lcd_init+0x1a54>)
 80035bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80035c2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 80035c6:	e003      	b.n	80035d0 <lcd_init+0x1a58>
 80035c8:	40010c00 	.word	0x40010c00
 80035cc:	40011000 	.word	0x40011000
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	4bd9      	ldr	r3, [pc, #868]	@ (8003938 <lcd_init+0x1dc0>)
 80035d4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80035d6:	4bd9      	ldr	r3, [pc, #868]	@ (800393c <lcd_init+0x1dc4>)
 80035d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80035dc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80035de:	4bd7      	ldr	r3, [pc, #860]	@ (800393c <lcd_init+0x1dc4>)
 80035e0:	2280      	movs	r2, #128	@ 0x80
 80035e2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80035e4:	4bd5      	ldr	r3, [pc, #852]	@ (800393c <lcd_init+0x1dc4>)
 80035e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ea:	611a      	str	r2, [r3, #16]
}
 80035ec:	bf00      	nop

        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0x24);
 80035ee:	2024      	movs	r0, #36	@ 0x24
 80035f0:	f7fd f986 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035f4:	2000      	movs	r0, #0
 80035f6:	f7fd f983 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7fd f980 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003600:	2000      	movs	r0, #0
 8003602:	f7fd f97d 	bl	8000900 <lcd_wr_xdata>
 8003606:	23c1      	movs	r3, #193	@ 0xc1
 8003608:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800360c:	4bcb      	ldr	r3, [pc, #812]	@ (800393c <lcd_init+0x1dc4>)
 800360e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003612:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003614:	4bc9      	ldr	r3, [pc, #804]	@ (800393c <lcd_init+0x1dc4>)
 8003616:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800361a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800361c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003620:	b29a      	uxth	r2, r3
 8003622:	4bc5      	ldr	r3, [pc, #788]	@ (8003938 <lcd_init+0x1dc0>)
 8003624:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003626:	4bc5      	ldr	r3, [pc, #788]	@ (800393c <lcd_init+0x1dc4>)
 8003628:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800362c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800362e:	4bc3      	ldr	r3, [pc, #780]	@ (800393c <lcd_init+0x1dc4>)
 8003630:	2280      	movs	r2, #128	@ 0x80
 8003632:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003634:	4bc1      	ldr	r3, [pc, #772]	@ (800393c <lcd_init+0x1dc4>)
 8003636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800363a:	611a      	str	r2, [r3, #16]
}
 800363c:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x20);
 800363e:	2020      	movs	r0, #32
 8003640:	f7fd f95e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003644:	2000      	movs	r0, #0
 8003646:	f7fd f95b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 800364a:	2054      	movs	r0, #84	@ 0x54
 800364c:	f7fd f958 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003650:	2000      	movs	r0, #0
 8003652:	f7fd f955 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8003656:	20ff      	movs	r0, #255	@ 0xff
 8003658:	f7fd f952 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800365c:	2000      	movs	r0, #0
 800365e:	f7fd f94f 	bl	8000900 <lcd_wr_xdata>
 8003662:	23c2      	movs	r3, #194	@ 0xc2
 8003664:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003668:	4bb4      	ldr	r3, [pc, #720]	@ (800393c <lcd_init+0x1dc4>)
 800366a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800366e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003670:	4bb2      	ldr	r3, [pc, #712]	@ (800393c <lcd_init+0x1dc4>)
 8003672:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003676:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003678:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800367c:	b29a      	uxth	r2, r3
 800367e:	4bae      	ldr	r3, [pc, #696]	@ (8003938 <lcd_init+0x1dc0>)
 8003680:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003682:	4bae      	ldr	r3, [pc, #696]	@ (800393c <lcd_init+0x1dc4>)
 8003684:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003688:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800368a:	4bac      	ldr	r3, [pc, #688]	@ (800393c <lcd_init+0x1dc4>)
 800368c:	2280      	movs	r2, #128	@ 0x80
 800368e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003690:	4baa      	ldr	r3, [pc, #680]	@ (800393c <lcd_init+0x1dc4>)
 8003692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003696:	611a      	str	r2, [r3, #16]
}
 8003698:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x0A);
 800369a:	200a      	movs	r0, #10
 800369c:	f7fd f930 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036a0:	2000      	movs	r0, #0
 80036a2:	f7fd f92d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 80036a6:	2004      	movs	r0, #4
 80036a8:	f7fd f92a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036ac:	2000      	movs	r0, #0
 80036ae:	f7fd f927 	bl	8000900 <lcd_wr_xdata>
 80036b2:	23c3      	movs	r3, #195	@ 0xc3
 80036b4:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80036b8:	4ba0      	ldr	r3, [pc, #640]	@ (800393c <lcd_init+0x1dc4>)
 80036ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036be:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80036c0:	4b9e      	ldr	r3, [pc, #632]	@ (800393c <lcd_init+0x1dc4>)
 80036c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036c6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80036c8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	4b9a      	ldr	r3, [pc, #616]	@ (8003938 <lcd_init+0x1dc0>)
 80036d0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80036d2:	4b9a      	ldr	r3, [pc, #616]	@ (800393c <lcd_init+0x1dc4>)
 80036d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036d8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80036da:	4b98      	ldr	r3, [pc, #608]	@ (800393c <lcd_init+0x1dc4>)
 80036dc:	2280      	movs	r2, #128	@ 0x80
 80036de:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80036e0:	4b96      	ldr	r3, [pc, #600]	@ (800393c <lcd_init+0x1dc4>)
 80036e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036e6:	611a      	str	r2, [r3, #16]
}
 80036e8:	bf00      	nop

        lcd_wr_regno(0xC3);
        lcd_wr_xdata(0x3C);
 80036ea:	203c      	movs	r0, #60	@ 0x3c
 80036ec:	f7fd f908 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036f0:	2000      	movs	r0, #0
 80036f2:	f7fd f905 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x3A);
 80036f6:	203a      	movs	r0, #58	@ 0x3a
 80036f8:	f7fd f902 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80036fc:	2000      	movs	r0, #0
 80036fe:	f7fd f8ff 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x39);
 8003702:	2039      	movs	r0, #57	@ 0x39
 8003704:	f7fd f8fc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003708:	2000      	movs	r0, #0
 800370a:	f7fd f8f9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 800370e:	2037      	movs	r0, #55	@ 0x37
 8003710:	f7fd f8f6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003714:	2000      	movs	r0, #0
 8003716:	f7fd f8f3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 800371a:	203c      	movs	r0, #60	@ 0x3c
 800371c:	f7fd f8f0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003720:	2000      	movs	r0, #0
 8003722:	f7fd f8ed 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003726:	2036      	movs	r0, #54	@ 0x36
 8003728:	f7fd f8ea 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800372c:	2000      	movs	r0, #0
 800372e:	f7fd f8e7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8003732:	2032      	movs	r0, #50	@ 0x32
 8003734:	f7fd f8e4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003738:	2000      	movs	r0, #0
 800373a:	f7fd f8e1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 800373e:	202f      	movs	r0, #47	@ 0x2f
 8003740:	f7fd f8de 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003744:	2000      	movs	r0, #0
 8003746:	f7fd f8db 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 800374a:	202c      	movs	r0, #44	@ 0x2c
 800374c:	f7fd f8d8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003750:	2000      	movs	r0, #0
 8003752:	f7fd f8d5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8003756:	2029      	movs	r0, #41	@ 0x29
 8003758:	f7fd f8d2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800375c:	2000      	movs	r0, #0
 800375e:	f7fd f8cf 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8003762:	2026      	movs	r0, #38	@ 0x26
 8003764:	f7fd f8cc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003768:	2000      	movs	r0, #0
 800376a:	f7fd f8c9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 800376e:	2024      	movs	r0, #36	@ 0x24
 8003770:	f7fd f8c6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003774:	2000      	movs	r0, #0
 8003776:	f7fd f8c3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 800377a:	2024      	movs	r0, #36	@ 0x24
 800377c:	f7fd f8c0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003780:	2000      	movs	r0, #0
 8003782:	f7fd f8bd 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8003786:	2023      	movs	r0, #35	@ 0x23
 8003788:	f7fd f8ba 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800378c:	2000      	movs	r0, #0
 800378e:	f7fd f8b7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8003792:	203c      	movs	r0, #60	@ 0x3c
 8003794:	f7fd f8b4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003798:	2000      	movs	r0, #0
 800379a:	f7fd f8b1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 800379e:	2036      	movs	r0, #54	@ 0x36
 80037a0:	f7fd f8ae 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037a4:	2000      	movs	r0, #0
 80037a6:	f7fd f8ab 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 80037aa:	2032      	movs	r0, #50	@ 0x32
 80037ac:	f7fd f8a8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037b0:	2000      	movs	r0, #0
 80037b2:	f7fd f8a5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 80037b6:	202f      	movs	r0, #47	@ 0x2f
 80037b8:	f7fd f8a2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037bc:	2000      	movs	r0, #0
 80037be:	f7fd f89f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 80037c2:	202c      	movs	r0, #44	@ 0x2c
 80037c4:	f7fd f89c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037c8:	2000      	movs	r0, #0
 80037ca:	f7fd f899 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80037ce:	2029      	movs	r0, #41	@ 0x29
 80037d0:	f7fd f896 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037d4:	2000      	movs	r0, #0
 80037d6:	f7fd f893 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 80037da:	2026      	movs	r0, #38	@ 0x26
 80037dc:	f7fd f890 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037e0:	2000      	movs	r0, #0
 80037e2:	f7fd f88d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80037e6:	2024      	movs	r0, #36	@ 0x24
 80037e8:	f7fd f88a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f7fd f887 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 80037f2:	2024      	movs	r0, #36	@ 0x24
 80037f4:	f7fd f884 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037f8:	2000      	movs	r0, #0
 80037fa:	f7fd f881 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80037fe:	2023      	movs	r0, #35	@ 0x23
 8003800:	f7fd f87e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003804:	2000      	movs	r0, #0
 8003806:	f7fd f87b 	bl	8000900 <lcd_wr_xdata>
 800380a:	23c4      	movs	r3, #196	@ 0xc4
 800380c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003810:	4b4a      	ldr	r3, [pc, #296]	@ (800393c <lcd_init+0x1dc4>)
 8003812:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003816:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003818:	4b48      	ldr	r3, [pc, #288]	@ (800393c <lcd_init+0x1dc4>)
 800381a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800381e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003820:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b44      	ldr	r3, [pc, #272]	@ (8003938 <lcd_init+0x1dc0>)
 8003828:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800382a:	4b44      	ldr	r3, [pc, #272]	@ (800393c <lcd_init+0x1dc4>)
 800382c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003830:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003832:	4b42      	ldr	r3, [pc, #264]	@ (800393c <lcd_init+0x1dc4>)
 8003834:	2280      	movs	r2, #128	@ 0x80
 8003836:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003838:	4b40      	ldr	r3, [pc, #256]	@ (800393c <lcd_init+0x1dc4>)
 800383a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800383e:	611a      	str	r2, [r3, #16]
}
 8003840:	bf00      	nop

        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x62);
 8003842:	2062      	movs	r0, #98	@ 0x62
 8003844:	f7fd f85c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003848:	2000      	movs	r0, #0
 800384a:	f7fd f859 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 800384e:	2005      	movs	r0, #5
 8003850:	f7fd f856 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003854:	2000      	movs	r0, #0
 8003856:	f7fd f853 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 800385a:	2084      	movs	r0, #132	@ 0x84
 800385c:	f7fd f850 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003860:	2000      	movs	r0, #0
 8003862:	f7fd f84d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xF0);
 8003866:	20f0      	movs	r0, #240	@ 0xf0
 8003868:	f7fd f84a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800386c:	2000      	movs	r0, #0
 800386e:	f7fd f847 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 8003872:	2018      	movs	r0, #24
 8003874:	f7fd f844 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003878:	2000      	movs	r0, #0
 800387a:	f7fd f841 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA4);
 800387e:	20a4      	movs	r0, #164	@ 0xa4
 8003880:	f7fd f83e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003884:	2000      	movs	r0, #0
 8003886:	f7fd f83b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 800388a:	2018      	movs	r0, #24
 800388c:	f7fd f838 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003890:	2000      	movs	r0, #0
 8003892:	f7fd f835 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8003896:	2050      	movs	r0, #80	@ 0x50
 8003898:	f7fd f832 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800389c:	2000      	movs	r0, #0
 800389e:	f7fd f82f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 80038a2:	200c      	movs	r0, #12
 80038a4:	f7fd f82c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7fd f829 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 80038ae:	2017      	movs	r0, #23
 80038b0:	f7fd f826 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038b4:	2000      	movs	r0, #0
 80038b6:	f7fd f823 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x95);
 80038ba:	2095      	movs	r0, #149	@ 0x95
 80038bc:	f7fd f820 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038c0:	2000      	movs	r0, #0
 80038c2:	f7fd f81d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80038c6:	20f3      	movs	r0, #243	@ 0xf3
 80038c8:	f7fd f81a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038cc:	2000      	movs	r0, #0
 80038ce:	f7fd f817 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xE6);
 80038d2:	20e6      	movs	r0, #230	@ 0xe6
 80038d4:	f7fd f814 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038d8:	2000      	movs	r0, #0
 80038da:	f7fd f811 	bl	8000900 <lcd_wr_xdata>
 80038de:	23c5      	movs	r3, #197	@ 0xc5
 80038e0:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80038e4:	4b15      	ldr	r3, [pc, #84]	@ (800393c <lcd_init+0x1dc4>)
 80038e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038ea:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80038ec:	4b13      	ldr	r3, [pc, #76]	@ (800393c <lcd_init+0x1dc4>)
 80038ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038f2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80038f4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003938 <lcd_init+0x1dc0>)
 80038fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80038fe:	4b0f      	ldr	r3, [pc, #60]	@ (800393c <lcd_init+0x1dc4>)
 8003900:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003904:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003906:	4b0d      	ldr	r3, [pc, #52]	@ (800393c <lcd_init+0x1dc4>)
 8003908:	2280      	movs	r2, #128	@ 0x80
 800390a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <lcd_init+0x1dc4>)
 800390e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003912:	611a      	str	r2, [r3, #16]
}
 8003914:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x32);
 8003916:	2032      	movs	r0, #50	@ 0x32
 8003918:	f7fc fff2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800391c:	2000      	movs	r0, #0
 800391e:	f7fc ffef 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003922:	2044      	movs	r0, #68	@ 0x44
 8003924:	f7fc ffec 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003928:	2000      	movs	r0, #0
 800392a:	f7fc ffe9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x65);
 800392e:	2065      	movs	r0, #101	@ 0x65
 8003930:	f7fc ffe6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003934:	2000      	movs	r0, #0
 8003936:	e003      	b.n	8003940 <lcd_init+0x1dc8>
 8003938:	40010c00 	.word	0x40010c00
 800393c:	40011000 	.word	0x40011000
 8003940:	f7fc ffde 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8003944:	2076      	movs	r0, #118	@ 0x76
 8003946:	f7fc ffdb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800394a:	2000      	movs	r0, #0
 800394c:	f7fc ffd8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003950:	2088      	movs	r0, #136	@ 0x88
 8003952:	f7fc ffd5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003956:	2000      	movs	r0, #0
 8003958:	f7fc ffd2 	bl	8000900 <lcd_wr_xdata>
 800395c:	23c6      	movs	r3, #198	@ 0xc6
 800395e:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003962:	4bd7      	ldr	r3, [pc, #860]	@ (8003cc0 <lcd_init+0x2148>)
 8003964:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003968:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800396a:	4bd5      	ldr	r3, [pc, #852]	@ (8003cc0 <lcd_init+0x2148>)
 800396c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003970:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003972:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8003976:	b29a      	uxth	r2, r3
 8003978:	4bd2      	ldr	r3, [pc, #840]	@ (8003cc4 <lcd_init+0x214c>)
 800397a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800397c:	4bd0      	ldr	r3, [pc, #832]	@ (8003cc0 <lcd_init+0x2148>)
 800397e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003982:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003984:	4bce      	ldr	r3, [pc, #824]	@ (8003cc0 <lcd_init+0x2148>)
 8003986:	2280      	movs	r2, #128	@ 0x80
 8003988:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800398a:	4bcd      	ldr	r3, [pc, #820]	@ (8003cc0 <lcd_init+0x2148>)
 800398c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003990:	611a      	str	r2, [r3, #16]
}
 8003992:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x20);
 8003994:	2020      	movs	r0, #32
 8003996:	f7fc ffb3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800399a:	2000      	movs	r0, #0
 800399c:	f7fc ffb0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 80039a0:	2017      	movs	r0, #23
 80039a2:	f7fc ffad 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039a6:	2000      	movs	r0, #0
 80039a8:	f7fc ffaa 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80039ac:	2001      	movs	r0, #1
 80039ae:	f7fc ffa7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039b2:	2000      	movs	r0, #0
 80039b4:	f7fc ffa4 	bl	8000900 <lcd_wr_xdata>
 80039b8:	23c7      	movs	r3, #199	@ 0xc7
 80039ba:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80039be:	4bc0      	ldr	r3, [pc, #768]	@ (8003cc0 <lcd_init+0x2148>)
 80039c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039c4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80039c6:	4bbe      	ldr	r3, [pc, #760]	@ (8003cc0 <lcd_init+0x2148>)
 80039c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039cc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80039ce:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	4bbb      	ldr	r3, [pc, #748]	@ (8003cc4 <lcd_init+0x214c>)
 80039d6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80039d8:	4bb9      	ldr	r3, [pc, #740]	@ (8003cc0 <lcd_init+0x2148>)
 80039da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80039de:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80039e0:	4bb7      	ldr	r3, [pc, #732]	@ (8003cc0 <lcd_init+0x2148>)
 80039e2:	2280      	movs	r2, #128	@ 0x80
 80039e4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80039e6:	4bb6      	ldr	r3, [pc, #728]	@ (8003cc0 <lcd_init+0x2148>)
 80039e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ec:	611a      	str	r2, [r3, #16]
}
 80039ee:	bf00      	nop

        lcd_wr_regno(0xC7);
        lcd_wr_xdata(0x00);
 80039f0:	2000      	movs	r0, #0
 80039f2:	f7fc ff85 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039f6:	2000      	movs	r0, #0
 80039f8:	f7fc ff82 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039fc:	2000      	movs	r0, #0
 80039fe:	f7fc ff7f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a02:	2000      	movs	r0, #0
 8003a04:	f7fc ff7c 	bl	8000900 <lcd_wr_xdata>
 8003a08:	23c8      	movs	r3, #200	@ 0xc8
 8003a0a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a0e:	4bac      	ldr	r3, [pc, #688]	@ (8003cc0 <lcd_init+0x2148>)
 8003a10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a14:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a16:	4baa      	ldr	r3, [pc, #680]	@ (8003cc0 <lcd_init+0x2148>)
 8003a18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a1c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a1e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	4ba7      	ldr	r3, [pc, #668]	@ (8003cc4 <lcd_init+0x214c>)
 8003a26:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a28:	4ba5      	ldr	r3, [pc, #660]	@ (8003cc0 <lcd_init+0x2148>)
 8003a2a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a2e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a30:	4ba3      	ldr	r3, [pc, #652]	@ (8003cc0 <lcd_init+0x2148>)
 8003a32:	2280      	movs	r2, #128	@ 0x80
 8003a34:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a36:	4ba2      	ldr	r3, [pc, #648]	@ (8003cc0 <lcd_init+0x2148>)
 8003a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a3c:	611a      	str	r2, [r3, #16]
}
 8003a3e:	bf00      	nop

        lcd_wr_regno(0xC8);
        lcd_wr_xdata(0x00);
 8003a40:	2000      	movs	r0, #0
 8003a42:	f7fc ff5d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a46:	2000      	movs	r0, #0
 8003a48:	f7fc ff5a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7fc ff57 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a52:	2000      	movs	r0, #0
 8003a54:	f7fc ff54 	bl	8000900 <lcd_wr_xdata>
 8003a58:	23c9      	movs	r3, #201	@ 0xc9
 8003a5a:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a5e:	4b98      	ldr	r3, [pc, #608]	@ (8003cc0 <lcd_init+0x2148>)
 8003a60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a64:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a66:	4b96      	ldr	r3, [pc, #600]	@ (8003cc0 <lcd_init+0x2148>)
 8003a68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a6c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a6e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	4b93      	ldr	r3, [pc, #588]	@ (8003cc4 <lcd_init+0x214c>)
 8003a76:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a78:	4b91      	ldr	r3, [pc, #580]	@ (8003cc0 <lcd_init+0x2148>)
 8003a7a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a7e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a80:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc0 <lcd_init+0x2148>)
 8003a82:	2280      	movs	r2, #128	@ 0x80
 8003a84:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a86:	4b8e      	ldr	r3, [pc, #568]	@ (8003cc0 <lcd_init+0x2148>)
 8003a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a8c:	611a      	str	r2, [r3, #16]
}
 8003a8e:	bf00      	nop

        lcd_wr_regno(0xC9);
        lcd_wr_xdata(0x00);
 8003a90:	2000      	movs	r0, #0
 8003a92:	f7fc ff35 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a96:	2000      	movs	r0, #0
 8003a98:	f7fc ff32 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f7fc ff2f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f7fc ff2c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f7fc ff29 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f7fc ff26 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f7fc ff23 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aba:	2000      	movs	r0, #0
 8003abc:	f7fc ff20 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f7fc ff1d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f7fc ff1a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7fc ff17 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f7fc ff14 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f7fc ff11 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ade:	2000      	movs	r0, #0
 8003ae0:	f7fc ff0e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f7fc ff0b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003aea:	2000      	movs	r0, #0
 8003aec:	f7fc ff08 	bl	8000900 <lcd_wr_xdata>
 8003af0:	23e0      	movs	r3, #224	@ 0xe0
 8003af2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003af6:	4b72      	ldr	r3, [pc, #456]	@ (8003cc0 <lcd_init+0x2148>)
 8003af8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003afc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003afe:	4b70      	ldr	r3, [pc, #448]	@ (8003cc0 <lcd_init+0x2148>)
 8003b00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b04:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003b06:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	4b6d      	ldr	r3, [pc, #436]	@ (8003cc4 <lcd_init+0x214c>)
 8003b0e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003b10:	4b6b      	ldr	r3, [pc, #428]	@ (8003cc0 <lcd_init+0x2148>)
 8003b12:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b16:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b18:	4b69      	ldr	r3, [pc, #420]	@ (8003cc0 <lcd_init+0x2148>)
 8003b1a:	2280      	movs	r2, #128	@ 0x80
 8003b1c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b1e:	4b68      	ldr	r3, [pc, #416]	@ (8003cc0 <lcd_init+0x2148>)
 8003b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b24:	611a      	str	r2, [r3, #16]
}
 8003b26:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0x16);
 8003b28:	2016      	movs	r0, #22
 8003b2a:	f7fc fee9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f7fc fee6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003b34:	201c      	movs	r0, #28
 8003b36:	f7fc fee3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7fc fee0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8003b40:	2021      	movs	r0, #33	@ 0x21
 8003b42:	f7fc fedd 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b46:	2000      	movs	r0, #0
 8003b48:	f7fc feda 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003b4c:	2036      	movs	r0, #54	@ 0x36
 8003b4e:	f7fc fed7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b52:	2000      	movs	r0, #0
 8003b54:	f7fc fed4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x46);
 8003b58:	2046      	movs	r0, #70	@ 0x46
 8003b5a:	f7fc fed1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f7fc fece 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003b64:	2052      	movs	r0, #82	@ 0x52
 8003b66:	f7fc fecb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7fc fec8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003b70:	2064      	movs	r0, #100	@ 0x64
 8003b72:	f7fc fec5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b76:	2000      	movs	r0, #0
 8003b78:	f7fc fec2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003b7c:	207a      	movs	r0, #122	@ 0x7a
 8003b7e:	f7fc febf 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b82:	2000      	movs	r0, #0
 8003b84:	f7fc febc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003b88:	208b      	movs	r0, #139	@ 0x8b
 8003b8a:	f7fc feb9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b8e:	2000      	movs	r0, #0
 8003b90:	f7fc feb6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003b94:	2099      	movs	r0, #153	@ 0x99
 8003b96:	f7fc feb3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	f7fc feb0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003ba0:	20a8      	movs	r0, #168	@ 0xa8
 8003ba2:	f7fc fead 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	f7fc feaa 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003bac:	20b9      	movs	r0, #185	@ 0xb9
 8003bae:	f7fc fea7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	f7fc fea4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003bb8:	20c4      	movs	r0, #196	@ 0xc4
 8003bba:	f7fc fea1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f7fc fe9e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003bc4:	20ca      	movs	r0, #202	@ 0xca
 8003bc6:	f7fc fe9b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f7fc fe98 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003bd0:	20d2      	movs	r0, #210	@ 0xd2
 8003bd2:	f7fc fe95 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f7fc fe92 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xD9);
 8003bdc:	20d9      	movs	r0, #217	@ 0xd9
 8003bde:	f7fc fe8f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003be2:	2000      	movs	r0, #0
 8003be4:	f7fc fe8c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003be8:	20e0      	movs	r0, #224	@ 0xe0
 8003bea:	f7fc fe89 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bee:	2000      	movs	r0, #0
 8003bf0:	f7fc fe86 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003bf4:	20f3      	movs	r0, #243	@ 0xf3
 8003bf6:	f7fc fe83 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	f7fc fe80 	bl	8000900 <lcd_wr_xdata>
 8003c00:	23e1      	movs	r3, #225	@ 0xe1
 8003c02:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003c06:	4b2e      	ldr	r3, [pc, #184]	@ (8003cc0 <lcd_init+0x2148>)
 8003c08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c0c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc0 <lcd_init+0x2148>)
 8003c10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c14:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003c16:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	4b29      	ldr	r3, [pc, #164]	@ (8003cc4 <lcd_init+0x214c>)
 8003c1e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003c20:	4b27      	ldr	r3, [pc, #156]	@ (8003cc0 <lcd_init+0x2148>)
 8003c22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c26:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003c28:	4b25      	ldr	r3, [pc, #148]	@ (8003cc0 <lcd_init+0x2148>)
 8003c2a:	2280      	movs	r2, #128	@ 0x80
 8003c2c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003c2e:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <lcd_init+0x2148>)
 8003c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c34:	611a      	str	r2, [r3, #16]
}
 8003c36:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0x16);
 8003c38:	2016      	movs	r0, #22
 8003c3a:	f7fc fe61 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f7fc fe5e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003c44:	201c      	movs	r0, #28
 8003c46:	f7fc fe5b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7fc fe58 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8003c50:	2022      	movs	r0, #34	@ 0x22
 8003c52:	f7fc fe55 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c56:	2000      	movs	r0, #0
 8003c58:	f7fc fe52 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003c5c:	2036      	movs	r0, #54	@ 0x36
 8003c5e:	f7fc fe4f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c62:	2000      	movs	r0, #0
 8003c64:	f7fc fe4c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8003c68:	2045      	movs	r0, #69	@ 0x45
 8003c6a:	f7fc fe49 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f7fc fe46 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8003c74:	2052      	movs	r0, #82	@ 0x52
 8003c76:	f7fc fe43 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7fc fe40 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003c80:	2064      	movs	r0, #100	@ 0x64
 8003c82:	f7fc fe3d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c86:	2000      	movs	r0, #0
 8003c88:	f7fc fe3a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8003c8c:	207a      	movs	r0, #122	@ 0x7a
 8003c8e:	f7fc fe37 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c92:	2000      	movs	r0, #0
 8003c94:	f7fc fe34 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003c98:	208b      	movs	r0, #139	@ 0x8b
 8003c9a:	f7fc fe31 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f7fc fe2e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8003ca4:	2099      	movs	r0, #153	@ 0x99
 8003ca6:	f7fc fe2b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003caa:	2000      	movs	r0, #0
 8003cac:	f7fc fe28 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8003cb0:	20a8      	movs	r0, #168	@ 0xa8
 8003cb2:	f7fc fe25 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	f7fc fe22 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 8003cbc:	20b9      	movs	r0, #185	@ 0xb9
 8003cbe:	e003      	b.n	8003cc8 <lcd_init+0x2150>
 8003cc0:	40011000 	.word	0x40011000
 8003cc4:	40010c00 	.word	0x40010c00
 8003cc8:	f7fc fe1a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ccc:	2000      	movs	r0, #0
 8003cce:	f7fc fe17 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8003cd2:	20c4      	movs	r0, #196	@ 0xc4
 8003cd4:	f7fc fe14 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cd8:	2000      	movs	r0, #0
 8003cda:	f7fc fe11 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 8003cde:	20ca      	movs	r0, #202	@ 0xca
 8003ce0:	f7fc fe0e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f7fc fe0b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 8003cea:	20d2      	movs	r0, #210	@ 0xd2
 8003cec:	f7fc fe08 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f7fc fe05 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xD8);
 8003cf6:	20d8      	movs	r0, #216	@ 0xd8
 8003cf8:	f7fc fe02 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f7fc fdff 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8003d02:	20e0      	movs	r0, #224	@ 0xe0
 8003d04:	f7fc fdfc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f7fc fdf9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003d0e:	20f3      	movs	r0, #243	@ 0xf3
 8003d10:	f7fc fdf6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d14:	2000      	movs	r0, #0
 8003d16:	f7fc fdf3 	bl	8000900 <lcd_wr_xdata>
 8003d1a:	23e2      	movs	r3, #226	@ 0xe2
 8003d1c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003d20:	4be3      	ldr	r3, [pc, #908]	@ (80040b0 <lcd_init+0x2538>)
 8003d22:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d26:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003d28:	4be1      	ldr	r3, [pc, #900]	@ (80040b0 <lcd_init+0x2538>)
 8003d2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d2e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003d30:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	4bdf      	ldr	r3, [pc, #892]	@ (80040b4 <lcd_init+0x253c>)
 8003d38:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003d3a:	4bdd      	ldr	r3, [pc, #884]	@ (80040b0 <lcd_init+0x2538>)
 8003d3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d40:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003d42:	4bdb      	ldr	r3, [pc, #876]	@ (80040b0 <lcd_init+0x2538>)
 8003d44:	2280      	movs	r2, #128	@ 0x80
 8003d46:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003d48:	4bd9      	ldr	r3, [pc, #868]	@ (80040b0 <lcd_init+0x2538>)
 8003d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d4e:	611a      	str	r2, [r3, #16]
}
 8003d50:	bf00      	nop

        lcd_wr_regno(0xE2);
        lcd_wr_xdata(0x05);
 8003d52:	2005      	movs	r0, #5
 8003d54:	f7fc fdd4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f7fc fdd1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8003d5e:	200b      	movs	r0, #11
 8003d60:	f7fc fdce 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d64:	2000      	movs	r0, #0
 8003d66:	f7fc fdcb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);
 8003d6a:	201b      	movs	r0, #27
 8003d6c:	f7fc fdc8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d70:	2000      	movs	r0, #0
 8003d72:	f7fc fdc5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8003d76:	2034      	movs	r0, #52	@ 0x34
 8003d78:	f7fc fdc2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f7fc fdbf 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003d82:	2044      	movs	r0, #68	@ 0x44
 8003d84:	f7fc fdbc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f7fc fdb9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x4F);
 8003d8e:	204f      	movs	r0, #79	@ 0x4f
 8003d90:	f7fc fdb6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d94:	2000      	movs	r0, #0
 8003d96:	f7fc fdb3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8003d9a:	2061      	movs	r0, #97	@ 0x61
 8003d9c:	f7fc fdb0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003da0:	2000      	movs	r0, #0
 8003da2:	f7fc fdad 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x79);
 8003da6:	2079      	movs	r0, #121	@ 0x79
 8003da8:	f7fc fdaa 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dac:	2000      	movs	r0, #0
 8003dae:	f7fc fda7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003db2:	2088      	movs	r0, #136	@ 0x88
 8003db4:	f7fc fda4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003db8:	2000      	movs	r0, #0
 8003dba:	f7fc fda1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8003dbe:	2097      	movs	r0, #151	@ 0x97
 8003dc0:	f7fc fd9e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f7fc fd9b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8003dca:	20a6      	movs	r0, #166	@ 0xa6
 8003dcc:	f7fc fd98 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	f7fc fd95 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8003dd6:	20b7      	movs	r0, #183	@ 0xb7
 8003dd8:	f7fc fd92 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7fc fd8f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8003de2:	20c2      	movs	r0, #194	@ 0xc2
 8003de4:	f7fc fd8c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7fc fd89 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 8003dee:	20c7      	movs	r0, #199	@ 0xc7
 8003df0:	f7fc fd86 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003df4:	2000      	movs	r0, #0
 8003df6:	f7fc fd83 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 8003dfa:	20d1      	movs	r0, #209	@ 0xd1
 8003dfc:	f7fc fd80 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7fc fd7d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xD6);
 8003e06:	20d6      	movs	r0, #214	@ 0xd6
 8003e08:	f7fc fd7a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f7fc fd77 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8003e12:	20dd      	movs	r0, #221	@ 0xdd
 8003e14:	f7fc fd74 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7fc fd71 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003e1e:	20f3      	movs	r0, #243	@ 0xf3
 8003e20:	f7fc fd6e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fc fd6b 	bl	8000900 <lcd_wr_xdata>
 8003e2a:	23e3      	movs	r3, #227	@ 0xe3
 8003e2c:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003e30:	4b9f      	ldr	r3, [pc, #636]	@ (80040b0 <lcd_init+0x2538>)
 8003e32:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e36:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003e38:	4b9d      	ldr	r3, [pc, #628]	@ (80040b0 <lcd_init+0x2538>)
 8003e3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e3e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003e40:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	4b9b      	ldr	r3, [pc, #620]	@ (80040b4 <lcd_init+0x253c>)
 8003e48:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003e4a:	4b99      	ldr	r3, [pc, #612]	@ (80040b0 <lcd_init+0x2538>)
 8003e4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e50:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003e52:	4b97      	ldr	r3, [pc, #604]	@ (80040b0 <lcd_init+0x2538>)
 8003e54:	2280      	movs	r2, #128	@ 0x80
 8003e56:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003e58:	4b95      	ldr	r3, [pc, #596]	@ (80040b0 <lcd_init+0x2538>)
 8003e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e5e:	611a      	str	r2, [r3, #16]
}
 8003e60:	bf00      	nop
        lcd_wr_regno(0xE3);
        lcd_wr_xdata(0x05);
 8003e62:	2005      	movs	r0, #5
 8003e64:	f7fc fd4c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7fc fd49 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA);
 8003e6e:	200a      	movs	r0, #10
 8003e70:	f7fc fd46 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7fc fd43 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8003e7a:	201c      	movs	r0, #28
 8003e7c:	f7fc fd40 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e80:	2000      	movs	r0, #0
 8003e82:	f7fc fd3d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8003e86:	2033      	movs	r0, #51	@ 0x33
 8003e88:	f7fc fd3a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7fc fd37 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003e92:	2044      	movs	r0, #68	@ 0x44
 8003e94:	f7fc fd34 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f7fc fd31 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8003e9e:	2050      	movs	r0, #80	@ 0x50
 8003ea0:	f7fc fd2e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7fc fd2b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x62);
 8003eaa:	2062      	movs	r0, #98	@ 0x62
 8003eac:	f7fc fd28 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7fc fd25 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x78);
 8003eb6:	2078      	movs	r0, #120	@ 0x78
 8003eb8:	f7fc fd22 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7fc fd1f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003ec2:	2088      	movs	r0, #136	@ 0x88
 8003ec4:	f7fc fd1c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f7fc fd19 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 8003ece:	2097      	movs	r0, #151	@ 0x97
 8003ed0:	f7fc fd16 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f7fc fd13 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 8003eda:	20a6      	movs	r0, #166	@ 0xa6
 8003edc:	f7fc fd10 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f7fc fd0d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 8003ee6:	20b7      	movs	r0, #183	@ 0xb7
 8003ee8:	f7fc fd0a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eec:	2000      	movs	r0, #0
 8003eee:	f7fc fd07 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 8003ef2:	20c2      	movs	r0, #194	@ 0xc2
 8003ef4:	f7fc fd04 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f7fc fd01 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 8003efe:	20c7      	movs	r0, #199	@ 0xc7
 8003f00:	f7fc fcfe 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f7fc fcfb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 8003f0a:	20d1      	movs	r0, #209	@ 0xd1
 8003f0c:	f7fc fcf8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f10:	2000      	movs	r0, #0
 8003f12:	f7fc fcf5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xD5);
 8003f16:	20d5      	movs	r0, #213	@ 0xd5
 8003f18:	f7fc fcf2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7fc fcef 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8003f22:	20dd      	movs	r0, #221	@ 0xdd
 8003f24:	f7fc fcec 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f7fc fce9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003f2e:	20f3      	movs	r0, #243	@ 0xf3
 8003f30:	f7fc fce6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f34:	2000      	movs	r0, #0
 8003f36:	f7fc fce3 	bl	8000900 <lcd_wr_xdata>
 8003f3a:	23e4      	movs	r3, #228	@ 0xe4
 8003f3c:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003f40:	4b5b      	ldr	r3, [pc, #364]	@ (80040b0 <lcd_init+0x2538>)
 8003f42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f46:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003f48:	4b59      	ldr	r3, [pc, #356]	@ (80040b0 <lcd_init+0x2538>)
 8003f4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f4e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003f50:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	4b57      	ldr	r3, [pc, #348]	@ (80040b4 <lcd_init+0x253c>)
 8003f58:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003f5a:	4b55      	ldr	r3, [pc, #340]	@ (80040b0 <lcd_init+0x2538>)
 8003f5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003f60:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003f62:	4b53      	ldr	r3, [pc, #332]	@ (80040b0 <lcd_init+0x2538>)
 8003f64:	2280      	movs	r2, #128	@ 0x80
 8003f66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003f68:	4b51      	ldr	r3, [pc, #324]	@ (80040b0 <lcd_init+0x2538>)
 8003f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f6e:	611a      	str	r2, [r3, #16]
}
 8003f70:	bf00      	nop

        lcd_wr_regno(0xE4);
        lcd_wr_xdata(0x01);
 8003f72:	2001      	movs	r0, #1
 8003f74:	f7fc fcc4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7fc fcc1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003f7e:	2001      	movs	r0, #1
 8003f80:	f7fc fcbe 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f84:	2000      	movs	r0, #0
 8003f86:	f7fc fcbb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8003f8a:	2002      	movs	r0, #2
 8003f8c:	f7fc fcb8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f90:	2000      	movs	r0, #0
 8003f92:	f7fc fcb5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8003f96:	202a      	movs	r0, #42	@ 0x2a
 8003f98:	f7fc fcb2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f7fc fcaf 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8003fa2:	203c      	movs	r0, #60	@ 0x3c
 8003fa4:	f7fc fcac 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f7fc fca9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 8003fae:	204b      	movs	r0, #75	@ 0x4b
 8003fb0:	f7fc fca6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f7fc fca3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 8003fba:	205d      	movs	r0, #93	@ 0x5d
 8003fbc:	f7fc fca0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	f7fc fc9d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 8003fc6:	2074      	movs	r0, #116	@ 0x74
 8003fc8:	f7fc fc9a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f7fc fc97 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8003fd2:	2084      	movs	r0, #132	@ 0x84
 8003fd4:	f7fc fc94 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f7fc fc91 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 8003fde:	2093      	movs	r0, #147	@ 0x93
 8003fe0:	f7fc fc8e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	f7fc fc8b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8003fea:	20a2      	movs	r0, #162	@ 0xa2
 8003fec:	f7fc fc88 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f7fc fc85 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8003ff6:	20b3      	movs	r0, #179	@ 0xb3
 8003ff8:	f7fc fc82 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f7fc fc7f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 8004002:	20be      	movs	r0, #190	@ 0xbe
 8004004:	f7fc fc7c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004008:	2000      	movs	r0, #0
 800400a:	f7fc fc79 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 800400e:	20c4      	movs	r0, #196	@ 0xc4
 8004010:	f7fc fc76 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004014:	2000      	movs	r0, #0
 8004016:	f7fc fc73 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 800401a:	20cd      	movs	r0, #205	@ 0xcd
 800401c:	f7fc fc70 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004020:	2000      	movs	r0, #0
 8004022:	f7fc fc6d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 8004026:	20d3      	movs	r0, #211	@ 0xd3
 8004028:	f7fc fc6a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800402c:	2000      	movs	r0, #0
 800402e:	f7fc fc67 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8004032:	20dd      	movs	r0, #221	@ 0xdd
 8004034:	f7fc fc64 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004038:	2000      	movs	r0, #0
 800403a:	f7fc fc61 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 800403e:	20f3      	movs	r0, #243	@ 0xf3
 8004040:	f7fc fc5e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004044:	2000      	movs	r0, #0
 8004046:	f7fc fc5b 	bl	8000900 <lcd_wr_xdata>
 800404a:	23e5      	movs	r3, #229	@ 0xe5
 800404c:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004050:	4b17      	ldr	r3, [pc, #92]	@ (80040b0 <lcd_init+0x2538>)
 8004052:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004056:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004058:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <lcd_init+0x2538>)
 800405a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800405e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004060:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004064:	b29a      	uxth	r2, r3
 8004066:	4b13      	ldr	r3, [pc, #76]	@ (80040b4 <lcd_init+0x253c>)
 8004068:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800406a:	4b11      	ldr	r3, [pc, #68]	@ (80040b0 <lcd_init+0x2538>)
 800406c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004070:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004072:	4b0f      	ldr	r3, [pc, #60]	@ (80040b0 <lcd_init+0x2538>)
 8004074:	2280      	movs	r2, #128	@ 0x80
 8004076:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004078:	4b0d      	ldr	r3, [pc, #52]	@ (80040b0 <lcd_init+0x2538>)
 800407a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800407e:	611a      	str	r2, [r3, #16]
}
 8004080:	bf00      	nop
        lcd_wr_regno(0xE5);
        lcd_wr_xdata(0x00);
 8004082:	2000      	movs	r0, #0
 8004084:	f7fc fc3c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004088:	2000      	movs	r0, #0
 800408a:	f7fc fc39 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800408e:	2000      	movs	r0, #0
 8004090:	f7fc fc36 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004094:	2000      	movs	r0, #0
 8004096:	f7fc fc33 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800409a:	2002      	movs	r0, #2
 800409c:	f7fc fc30 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7fc fc2d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80040a6:	2029      	movs	r0, #41	@ 0x29
 80040a8:	f7fc fc2a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040ac:	2000      	movs	r0, #0
 80040ae:	e003      	b.n	80040b8 <lcd_init+0x2540>
 80040b0:	40011000 	.word	0x40011000
 80040b4:	40010c00 	.word	0x40010c00
 80040b8:	f7fc fc22 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80040bc:	203c      	movs	r0, #60	@ 0x3c
 80040be:	f7fc fc1f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040c2:	2000      	movs	r0, #0
 80040c4:	f7fc fc1c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 80040c8:	204b      	movs	r0, #75	@ 0x4b
 80040ca:	f7fc fc19 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040ce:	2000      	movs	r0, #0
 80040d0:	f7fc fc16 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80040d4:	205d      	movs	r0, #93	@ 0x5d
 80040d6:	f7fc fc13 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040da:	2000      	movs	r0, #0
 80040dc:	f7fc fc10 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 80040e0:	2074      	movs	r0, #116	@ 0x74
 80040e2:	f7fc fc0d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040e6:	2000      	movs	r0, #0
 80040e8:	f7fc fc0a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 80040ec:	2084      	movs	r0, #132	@ 0x84
 80040ee:	f7fc fc07 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040f2:	2000      	movs	r0, #0
 80040f4:	f7fc fc04 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 80040f8:	2093      	movs	r0, #147	@ 0x93
 80040fa:	f7fc fc01 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040fe:	2000      	movs	r0, #0
 8004100:	f7fc fbfe 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004104:	20a2      	movs	r0, #162	@ 0xa2
 8004106:	f7fc fbfb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800410a:	2000      	movs	r0, #0
 800410c:	f7fc fbf8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8004110:	20b3      	movs	r0, #179	@ 0xb3
 8004112:	f7fc fbf5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004116:	2000      	movs	r0, #0
 8004118:	f7fc fbf2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 800411c:	20be      	movs	r0, #190	@ 0xbe
 800411e:	f7fc fbef 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004122:	2000      	movs	r0, #0
 8004124:	f7fc fbec 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8004128:	20c4      	movs	r0, #196	@ 0xc4
 800412a:	f7fc fbe9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800412e:	2000      	movs	r0, #0
 8004130:	f7fc fbe6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 8004134:	20cd      	movs	r0, #205	@ 0xcd
 8004136:	f7fc fbe3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800413a:	2000      	movs	r0, #0
 800413c:	f7fc fbe0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 8004140:	20d3      	movs	r0, #211	@ 0xd3
 8004142:	f7fc fbdd 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004146:	2000      	movs	r0, #0
 8004148:	f7fc fbda 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 800414c:	20dc      	movs	r0, #220	@ 0xdc
 800414e:	f7fc fbd7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004152:	2000      	movs	r0, #0
 8004154:	f7fc fbd4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8004158:	20f3      	movs	r0, #243	@ 0xf3
 800415a:	f7fc fbd1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800415e:	2000      	movs	r0, #0
 8004160:	f7fc fbce 	bl	8000900 <lcd_wr_xdata>
 8004164:	23e6      	movs	r3, #230	@ 0xe6
 8004166:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800416a:	4bde      	ldr	r3, [pc, #888]	@ (80044e4 <lcd_init+0x296c>)
 800416c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004170:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004172:	4bdc      	ldr	r3, [pc, #880]	@ (80044e4 <lcd_init+0x296c>)
 8004174:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004178:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800417a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800417e:	b29a      	uxth	r2, r3
 8004180:	4bd9      	ldr	r3, [pc, #868]	@ (80044e8 <lcd_init+0x2970>)
 8004182:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004184:	4bd7      	ldr	r3, [pc, #860]	@ (80044e4 <lcd_init+0x296c>)
 8004186:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800418a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800418c:	4bd5      	ldr	r3, [pc, #852]	@ (80044e4 <lcd_init+0x296c>)
 800418e:	2280      	movs	r2, #128	@ 0x80
 8004190:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004192:	4bd4      	ldr	r3, [pc, #848]	@ (80044e4 <lcd_init+0x296c>)
 8004194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004198:	611a      	str	r2, [r3, #16]
}
 800419a:	bf00      	nop

        lcd_wr_regno(0xE6);
        lcd_wr_xdata(0x11);
 800419c:	2011      	movs	r0, #17
 800419e:	f7fc fbaf 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041a2:	2000      	movs	r0, #0
 80041a4:	f7fc fbac 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 80041a8:	2034      	movs	r0, #52	@ 0x34
 80041aa:	f7fc fba9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f7fc fba6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 80041b4:	2056      	movs	r0, #86	@ 0x56
 80041b6:	f7fc fba3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ba:	2000      	movs	r0, #0
 80041bc:	f7fc fba0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 80041c0:	2076      	movs	r0, #118	@ 0x76
 80041c2:	f7fc fb9d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041c6:	2000      	movs	r0, #0
 80041c8:	f7fc fb9a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 80041cc:	2077      	movs	r0, #119	@ 0x77
 80041ce:	f7fc fb97 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7fc fb94 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80041d8:	2066      	movs	r0, #102	@ 0x66
 80041da:	f7fc fb91 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041de:	2000      	movs	r0, #0
 80041e0:	f7fc fb8e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80041e4:	2088      	movs	r0, #136	@ 0x88
 80041e6:	f7fc fb8b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7fc fb88 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80041f0:	2099      	movs	r0, #153	@ 0x99
 80041f2:	f7fc fb85 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041f6:	2000      	movs	r0, #0
 80041f8:	f7fc fb82 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 80041fc:	20bb      	movs	r0, #187	@ 0xbb
 80041fe:	f7fc fb7f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004202:	2000      	movs	r0, #0
 8004204:	f7fc fb7c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004208:	2099      	movs	r0, #153	@ 0x99
 800420a:	f7fc fb79 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800420e:	2000      	movs	r0, #0
 8004210:	f7fc fb76 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004214:	2066      	movs	r0, #102	@ 0x66
 8004216:	f7fc fb73 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800421a:	2000      	movs	r0, #0
 800421c:	f7fc fb70 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004220:	2055      	movs	r0, #85	@ 0x55
 8004222:	f7fc fb6d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004226:	2000      	movs	r0, #0
 8004228:	f7fc fb6a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 800422c:	2055      	movs	r0, #85	@ 0x55
 800422e:	f7fc fb67 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004232:	2000      	movs	r0, #0
 8004234:	f7fc fb64 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004238:	2045      	movs	r0, #69	@ 0x45
 800423a:	f7fc fb61 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800423e:	2000      	movs	r0, #0
 8004240:	f7fc fb5e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8004244:	2043      	movs	r0, #67	@ 0x43
 8004246:	f7fc fb5b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800424a:	2000      	movs	r0, #0
 800424c:	f7fc fb58 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004250:	2044      	movs	r0, #68	@ 0x44
 8004252:	f7fc fb55 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004256:	2000      	movs	r0, #0
 8004258:	f7fc fb52 	bl	8000900 <lcd_wr_xdata>
 800425c:	23e7      	movs	r3, #231	@ 0xe7
 800425e:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004262:	4ba0      	ldr	r3, [pc, #640]	@ (80044e4 <lcd_init+0x296c>)
 8004264:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004268:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800426a:	4b9e      	ldr	r3, [pc, #632]	@ (80044e4 <lcd_init+0x296c>)
 800426c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004270:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004272:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8004276:	b29a      	uxth	r2, r3
 8004278:	4b9b      	ldr	r3, [pc, #620]	@ (80044e8 <lcd_init+0x2970>)
 800427a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800427c:	4b99      	ldr	r3, [pc, #612]	@ (80044e4 <lcd_init+0x296c>)
 800427e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004282:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004284:	4b97      	ldr	r3, [pc, #604]	@ (80044e4 <lcd_init+0x296c>)
 8004286:	2280      	movs	r2, #128	@ 0x80
 8004288:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800428a:	4b96      	ldr	r3, [pc, #600]	@ (80044e4 <lcd_init+0x296c>)
 800428c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004290:	611a      	str	r2, [r3, #16]
}
 8004292:	bf00      	nop

        lcd_wr_regno(0xE7);
        lcd_wr_xdata(0x32);
 8004294:	2032      	movs	r0, #50	@ 0x32
 8004296:	f7fc fb33 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800429a:	2000      	movs	r0, #0
 800429c:	f7fc fb30 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 80042a0:	2055      	movs	r0, #85	@ 0x55
 80042a2:	f7fc fb2d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042a6:	2000      	movs	r0, #0
 80042a8:	f7fc fb2a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 80042ac:	2076      	movs	r0, #118	@ 0x76
 80042ae:	f7fc fb27 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042b2:	2000      	movs	r0, #0
 80042b4:	f7fc fb24 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80042b8:	2066      	movs	r0, #102	@ 0x66
 80042ba:	f7fc fb21 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042be:	2000      	movs	r0, #0
 80042c0:	f7fc fb1e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80042c4:	2067      	movs	r0, #103	@ 0x67
 80042c6:	f7fc fb1b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042ca:	2000      	movs	r0, #0
 80042cc:	f7fc fb18 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80042d0:	2067      	movs	r0, #103	@ 0x67
 80042d2:	f7fc fb15 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f7fc fb12 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 80042dc:	2087      	movs	r0, #135	@ 0x87
 80042de:	f7fc fb0f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042e2:	2000      	movs	r0, #0
 80042e4:	f7fc fb0c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80042e8:	2099      	movs	r0, #153	@ 0x99
 80042ea:	f7fc fb09 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042ee:	2000      	movs	r0, #0
 80042f0:	f7fc fb06 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 80042f4:	20bb      	movs	r0, #187	@ 0xbb
 80042f6:	f7fc fb03 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042fa:	2000      	movs	r0, #0
 80042fc:	f7fc fb00 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004300:	2099      	movs	r0, #153	@ 0x99
 8004302:	f7fc fafd 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004306:	2000      	movs	r0, #0
 8004308:	f7fc fafa 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 800430c:	2077      	movs	r0, #119	@ 0x77
 800430e:	f7fc faf7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004312:	2000      	movs	r0, #0
 8004314:	f7fc faf4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004318:	2044      	movs	r0, #68	@ 0x44
 800431a:	f7fc faf1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800431e:	2000      	movs	r0, #0
 8004320:	f7fc faee 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8004324:	2056      	movs	r0, #86	@ 0x56
 8004326:	f7fc faeb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800432a:	2000      	movs	r0, #0
 800432c:	f7fc fae8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8004330:	2023      	movs	r0, #35	@ 0x23
 8004332:	f7fc fae5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004336:	2000      	movs	r0, #0
 8004338:	f7fc fae2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 800433c:	2033      	movs	r0, #51	@ 0x33
 800433e:	f7fc fadf 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004342:	2000      	movs	r0, #0
 8004344:	f7fc fadc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004348:	2045      	movs	r0, #69	@ 0x45
 800434a:	f7fc fad9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800434e:	2000      	movs	r0, #0
 8004350:	f7fc fad6 	bl	8000900 <lcd_wr_xdata>
 8004354:	23e8      	movs	r3, #232	@ 0xe8
 8004356:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800435a:	4b62      	ldr	r3, [pc, #392]	@ (80044e4 <lcd_init+0x296c>)
 800435c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004360:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004362:	4b60      	ldr	r3, [pc, #384]	@ (80044e4 <lcd_init+0x296c>)
 8004364:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004368:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800436a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800436e:	b29a      	uxth	r2, r3
 8004370:	4b5d      	ldr	r3, [pc, #372]	@ (80044e8 <lcd_init+0x2970>)
 8004372:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004374:	4b5b      	ldr	r3, [pc, #364]	@ (80044e4 <lcd_init+0x296c>)
 8004376:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800437a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800437c:	4b59      	ldr	r3, [pc, #356]	@ (80044e4 <lcd_init+0x296c>)
 800437e:	2280      	movs	r2, #128	@ 0x80
 8004380:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004382:	4b58      	ldr	r3, [pc, #352]	@ (80044e4 <lcd_init+0x296c>)
 8004384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004388:	611a      	str	r2, [r3, #16]
}
 800438a:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x00);
 800438c:	2000      	movs	r0, #0
 800438e:	f7fc fab7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004392:	2000      	movs	r0, #0
 8004394:	f7fc fab4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004398:	2099      	movs	r0, #153	@ 0x99
 800439a:	f7fc fab1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800439e:	2000      	movs	r0, #0
 80043a0:	f7fc faae 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 80043a4:	2087      	movs	r0, #135	@ 0x87
 80043a6:	f7fc faab 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043aa:	2000      	movs	r0, #0
 80043ac:	f7fc faa8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80043b0:	2088      	movs	r0, #136	@ 0x88
 80043b2:	f7fc faa5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043b6:	2000      	movs	r0, #0
 80043b8:	f7fc faa2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 80043bc:	2077      	movs	r0, #119	@ 0x77
 80043be:	f7fc fa9f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043c2:	2000      	movs	r0, #0
 80043c4:	f7fc fa9c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80043c8:	2066      	movs	r0, #102	@ 0x66
 80043ca:	f7fc fa99 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043ce:	2000      	movs	r0, #0
 80043d0:	f7fc fa96 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80043d4:	2088      	movs	r0, #136	@ 0x88
 80043d6:	f7fc fa93 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043da:	2000      	movs	r0, #0
 80043dc:	f7fc fa90 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xAA);
 80043e0:	20aa      	movs	r0, #170	@ 0xaa
 80043e2:	f7fc fa8d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043e6:	2000      	movs	r0, #0
 80043e8:	f7fc fa8a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 80043ec:	20bb      	movs	r0, #187	@ 0xbb
 80043ee:	f7fc fa87 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043f2:	2000      	movs	r0, #0
 80043f4:	f7fc fa84 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80043f8:	2099      	movs	r0, #153	@ 0x99
 80043fa:	f7fc fa81 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043fe:	2000      	movs	r0, #0
 8004400:	f7fc fa7e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004404:	2066      	movs	r0, #102	@ 0x66
 8004406:	f7fc fa7b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800440a:	2000      	movs	r0, #0
 800440c:	f7fc fa78 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004410:	2055      	movs	r0, #85	@ 0x55
 8004412:	f7fc fa75 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004416:	2000      	movs	r0, #0
 8004418:	f7fc fa72 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 800441c:	2055      	movs	r0, #85	@ 0x55
 800441e:	f7fc fa6f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004422:	2000      	movs	r0, #0
 8004424:	f7fc fa6c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004428:	2044      	movs	r0, #68	@ 0x44
 800442a:	f7fc fa69 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800442e:	2000      	movs	r0, #0
 8004430:	f7fc fa66 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004434:	2044      	movs	r0, #68	@ 0x44
 8004436:	f7fc fa63 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800443a:	2000      	movs	r0, #0
 800443c:	f7fc fa60 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004440:	2055      	movs	r0, #85	@ 0x55
 8004442:	f7fc fa5d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004446:	2000      	movs	r0, #0
 8004448:	f7fc fa5a 	bl	8000900 <lcd_wr_xdata>
 800444c:	23e9      	movs	r3, #233	@ 0xe9
 800444e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004452:	4b24      	ldr	r3, [pc, #144]	@ (80044e4 <lcd_init+0x296c>)
 8004454:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004458:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800445a:	4b22      	ldr	r3, [pc, #136]	@ (80044e4 <lcd_init+0x296c>)
 800445c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004460:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004462:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004466:	b29a      	uxth	r2, r3
 8004468:	4b1f      	ldr	r3, [pc, #124]	@ (80044e8 <lcd_init+0x2970>)
 800446a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800446c:	4b1d      	ldr	r3, [pc, #116]	@ (80044e4 <lcd_init+0x296c>)
 800446e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004472:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004474:	4b1b      	ldr	r3, [pc, #108]	@ (80044e4 <lcd_init+0x296c>)
 8004476:	2280      	movs	r2, #128	@ 0x80
 8004478:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800447a:	4b1a      	ldr	r3, [pc, #104]	@ (80044e4 <lcd_init+0x296c>)
 800447c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004480:	611a      	str	r2, [r3, #16]
}
 8004482:	bf00      	nop

        lcd_wr_regno(0xE9);
        lcd_wr_xdata(0xAA);
 8004484:	20aa      	movs	r0, #170	@ 0xaa
 8004486:	f7fc fa3b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800448a:	2000      	movs	r0, #0
 800448c:	f7fc fa38 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004490:	2000      	movs	r0, #0
 8004492:	f7fc fa35 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004496:	2000      	movs	r0, #0
 8004498:	f7fc fa32 	bl	8000900 <lcd_wr_xdata>
 800449c:	2300      	movs	r3, #0
 800449e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80044a2:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <lcd_init+0x296c>)
 80044a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80044aa:	4b0e      	ldr	r3, [pc, #56]	@ (80044e4 <lcd_init+0x296c>)
 80044ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80044b2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <lcd_init+0x2970>)
 80044ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80044bc:	4b09      	ldr	r3, [pc, #36]	@ (80044e4 <lcd_init+0x296c>)
 80044be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80044c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80044c4:	4b07      	ldr	r3, [pc, #28]	@ (80044e4 <lcd_init+0x296c>)
 80044c6:	2280      	movs	r2, #128	@ 0x80
 80044c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80044ca:	4b06      	ldr	r3, [pc, #24]	@ (80044e4 <lcd_init+0x296c>)
 80044cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044d0:	611a      	str	r2, [r3, #16]
}
 80044d2:	bf00      	nop

        lcd_wr_regno(0x00);
        lcd_wr_xdata(0xAA);
 80044d4:	20aa      	movs	r0, #170	@ 0xaa
 80044d6:	f7fc fa13 	bl	8000900 <lcd_wr_xdata>
 80044da:	23cf      	movs	r3, #207	@ 0xcf
 80044dc:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80044e0:	e004      	b.n	80044ec <lcd_init+0x2974>
 80044e2:	bf00      	nop
 80044e4:	40011000 	.word	0x40011000
 80044e8:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80044ec:	4bbc      	ldr	r3, [pc, #752]	@ (80047e0 <lcd_init+0x2c68>)
 80044ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044f2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80044f4:	4bba      	ldr	r3, [pc, #744]	@ (80047e0 <lcd_init+0x2c68>)
 80044f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044fa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80044fc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8004500:	b29a      	uxth	r2, r3
 8004502:	4bb8      	ldr	r3, [pc, #736]	@ (80047e4 <lcd_init+0x2c6c>)
 8004504:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004506:	4bb6      	ldr	r3, [pc, #728]	@ (80047e0 <lcd_init+0x2c68>)
 8004508:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800450c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800450e:	4bb4      	ldr	r3, [pc, #720]	@ (80047e0 <lcd_init+0x2c68>)
 8004510:	2280      	movs	r2, #128	@ 0x80
 8004512:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004514:	4bb2      	ldr	r3, [pc, #712]	@ (80047e0 <lcd_init+0x2c68>)
 8004516:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800451a:	611a      	str	r2, [r3, #16]
}
 800451c:	bf00      	nop

        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 800451e:	2000      	movs	r0, #0
 8004520:	f7fc f9ee 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004524:	2000      	movs	r0, #0
 8004526:	f7fc f9eb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800452a:	2000      	movs	r0, #0
 800452c:	f7fc f9e8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004530:	2000      	movs	r0, #0
 8004532:	f7fc f9e5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004536:	2000      	movs	r0, #0
 8004538:	f7fc f9e2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800453c:	2000      	movs	r0, #0
 800453e:	f7fc f9df 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004542:	2000      	movs	r0, #0
 8004544:	f7fc f9dc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004548:	2000      	movs	r0, #0
 800454a:	f7fc f9d9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800454e:	2000      	movs	r0, #0
 8004550:	f7fc f9d6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004554:	2000      	movs	r0, #0
 8004556:	f7fc f9d3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800455a:	2000      	movs	r0, #0
 800455c:	f7fc f9d0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004560:	2000      	movs	r0, #0
 8004562:	f7fc f9cd 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004566:	2000      	movs	r0, #0
 8004568:	f7fc f9ca 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800456c:	2000      	movs	r0, #0
 800456e:	f7fc f9c7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004572:	2000      	movs	r0, #0
 8004574:	f7fc f9c4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004578:	2000      	movs	r0, #0
 800457a:	f7fc f9c1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800457e:	2000      	movs	r0, #0
 8004580:	f7fc f9be 	bl	8000900 <lcd_wr_xdata>
 8004584:	23f0      	movs	r3, #240	@ 0xf0
 8004586:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800458a:	4b95      	ldr	r3, [pc, #596]	@ (80047e0 <lcd_init+0x2c68>)
 800458c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004590:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004592:	4b93      	ldr	r3, [pc, #588]	@ (80047e0 <lcd_init+0x2c68>)
 8004594:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004598:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800459a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800459e:	b29a      	uxth	r2, r3
 80045a0:	4b90      	ldr	r3, [pc, #576]	@ (80047e4 <lcd_init+0x2c6c>)
 80045a2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80045a4:	4b8e      	ldr	r3, [pc, #568]	@ (80047e0 <lcd_init+0x2c68>)
 80045a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80045aa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80045ac:	4b8c      	ldr	r3, [pc, #560]	@ (80047e0 <lcd_init+0x2c68>)
 80045ae:	2280      	movs	r2, #128	@ 0x80
 80045b0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80045b2:	4b8b      	ldr	r3, [pc, #556]	@ (80047e0 <lcd_init+0x2c68>)
 80045b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045b8:	611a      	str	r2, [r3, #16]
}
 80045ba:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x00);
 80045bc:	2000      	movs	r0, #0
 80045be:	f7fc f99f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 80045c2:	2050      	movs	r0, #80	@ 0x50
 80045c4:	f7fc f99c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045c8:	2000      	movs	r0, #0
 80045ca:	f7fc f999 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045ce:	2000      	movs	r0, #0
 80045d0:	f7fc f996 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045d4:	2000      	movs	r0, #0
 80045d6:	f7fc f993 	bl	8000900 <lcd_wr_xdata>
 80045da:	23f3      	movs	r3, #243	@ 0xf3
 80045dc:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80045e0:	4b7f      	ldr	r3, [pc, #508]	@ (80047e0 <lcd_init+0x2c68>)
 80045e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80045e8:	4b7d      	ldr	r3, [pc, #500]	@ (80047e0 <lcd_init+0x2c68>)
 80045ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80045f0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	4b7b      	ldr	r3, [pc, #492]	@ (80047e4 <lcd_init+0x2c6c>)
 80045f8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80045fa:	4b79      	ldr	r3, [pc, #484]	@ (80047e0 <lcd_init+0x2c68>)
 80045fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004600:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004602:	4b77      	ldr	r3, [pc, #476]	@ (80047e0 <lcd_init+0x2c68>)
 8004604:	2280      	movs	r2, #128	@ 0x80
 8004606:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004608:	4b75      	ldr	r3, [pc, #468]	@ (80047e0 <lcd_init+0x2c68>)
 800460a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800460e:	611a      	str	r2, [r3, #16]
}
 8004610:	bf00      	nop

        lcd_wr_regno(0xF3);
        lcd_wr_xdata(0x00);
 8004612:	2000      	movs	r0, #0
 8004614:	f7fc f974 	bl	8000900 <lcd_wr_xdata>
 8004618:	23f9      	movs	r3, #249	@ 0xf9
 800461a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800461e:	4b70      	ldr	r3, [pc, #448]	@ (80047e0 <lcd_init+0x2c68>)
 8004620:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004624:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004626:	4b6e      	ldr	r3, [pc, #440]	@ (80047e0 <lcd_init+0x2c68>)
 8004628:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800462c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800462e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004632:	b29a      	uxth	r2, r3
 8004634:	4b6b      	ldr	r3, [pc, #428]	@ (80047e4 <lcd_init+0x2c6c>)
 8004636:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004638:	4b69      	ldr	r3, [pc, #420]	@ (80047e0 <lcd_init+0x2c68>)
 800463a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800463e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004640:	4b67      	ldr	r3, [pc, #412]	@ (80047e0 <lcd_init+0x2c68>)
 8004642:	2280      	movs	r2, #128	@ 0x80
 8004644:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004646:	4b66      	ldr	r3, [pc, #408]	@ (80047e0 <lcd_init+0x2c68>)
 8004648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800464c:	611a      	str	r2, [r3, #16]
}
 800464e:	bf00      	nop

        lcd_wr_regno(0xF9);
        lcd_wr_xdata(0x06);
 8004650:	2006      	movs	r0, #6
 8004652:	f7fc f955 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004656:	2010      	movs	r0, #16
 8004658:	f7fc f952 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 800465c:	2029      	movs	r0, #41	@ 0x29
 800465e:	f7fc f94f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004662:	2000      	movs	r0, #0
 8004664:	f7fc f94c 	bl	8000900 <lcd_wr_xdata>
 8004668:	233a      	movs	r3, #58	@ 0x3a
 800466a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800466e:	4b5c      	ldr	r3, [pc, #368]	@ (80047e0 <lcd_init+0x2c68>)
 8004670:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004674:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004676:	4b5a      	ldr	r3, [pc, #360]	@ (80047e0 <lcd_init+0x2c68>)
 8004678:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800467c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800467e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004682:	b29a      	uxth	r2, r3
 8004684:	4b57      	ldr	r3, [pc, #348]	@ (80047e4 <lcd_init+0x2c6c>)
 8004686:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004688:	4b55      	ldr	r3, [pc, #340]	@ (80047e0 <lcd_init+0x2c68>)
 800468a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800468e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004690:	4b53      	ldr	r3, [pc, #332]	@ (80047e0 <lcd_init+0x2c68>)
 8004692:	2280      	movs	r2, #128	@ 0x80
 8004694:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004696:	4b52      	ldr	r3, [pc, #328]	@ (80047e0 <lcd_init+0x2c68>)
 8004698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800469c:	611a      	str	r2, [r3, #16]
}
 800469e:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);  /* 66 */
 80046a0:	2055      	movs	r0, #85	@ 0x55
 80046a2:	f7fc f92d 	bl	8000900 <lcd_wr_xdata>
 80046a6:	2311      	movs	r3, #17
 80046a8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80046ac:	4b4c      	ldr	r3, [pc, #304]	@ (80047e0 <lcd_init+0x2c68>)
 80046ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046b2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046b4:	4b4a      	ldr	r3, [pc, #296]	@ (80047e0 <lcd_init+0x2c68>)
 80046b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046ba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80046bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	4b48      	ldr	r3, [pc, #288]	@ (80047e4 <lcd_init+0x2c6c>)
 80046c4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80046c6:	4b46      	ldr	r3, [pc, #280]	@ (80047e0 <lcd_init+0x2c68>)
 80046c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80046cc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80046ce:	4b44      	ldr	r3, [pc, #272]	@ (80047e0 <lcd_init+0x2c68>)
 80046d0:	2280      	movs	r2, #128	@ 0x80
 80046d2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80046d4:	4b42      	ldr	r3, [pc, #264]	@ (80047e0 <lcd_init+0x2c68>)
 80046d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046da:	611a      	str	r2, [r3, #16]
}
 80046dc:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(100);
 80046de:	2064      	movs	r0, #100	@ 0x64
 80046e0:	f002 fda2 	bl	8007228 <HAL_Delay>
 80046e4:	2329      	movs	r3, #41	@ 0x29
 80046e6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80046ea:	4b3d      	ldr	r3, [pc, #244]	@ (80047e0 <lcd_init+0x2c68>)
 80046ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80046f2:	4b3b      	ldr	r3, [pc, #236]	@ (80047e0 <lcd_init+0x2c68>)
 80046f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80046fa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80046fe:	b29a      	uxth	r2, r3
 8004700:	4b38      	ldr	r3, [pc, #224]	@ (80047e4 <lcd_init+0x2c6c>)
 8004702:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004704:	4b36      	ldr	r3, [pc, #216]	@ (80047e0 <lcd_init+0x2c68>)
 8004706:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800470a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800470c:	4b34      	ldr	r3, [pc, #208]	@ (80047e0 <lcd_init+0x2c68>)
 800470e:	2280      	movs	r2, #128	@ 0x80
 8004710:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004712:	4b33      	ldr	r3, [pc, #204]	@ (80047e0 <lcd_init+0x2c68>)
 8004714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004718:	611a      	str	r2, [r3, #16]
}
 800471a:	bf00      	nop
 800471c:	2335      	movs	r3, #53	@ 0x35
 800471e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004722:	4b2f      	ldr	r3, [pc, #188]	@ (80047e0 <lcd_init+0x2c68>)
 8004724:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004728:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800472a:	4b2d      	ldr	r3, [pc, #180]	@ (80047e0 <lcd_init+0x2c68>)
 800472c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004730:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004732:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004736:	b29a      	uxth	r2, r3
 8004738:	4b2a      	ldr	r3, [pc, #168]	@ (80047e4 <lcd_init+0x2c6c>)
 800473a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800473c:	4b28      	ldr	r3, [pc, #160]	@ (80047e0 <lcd_init+0x2c68>)
 800473e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004742:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004744:	4b26      	ldr	r3, [pc, #152]	@ (80047e0 <lcd_init+0x2c68>)
 8004746:	2280      	movs	r2, #128	@ 0x80
 8004748:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800474a:	4b25      	ldr	r3, [pc, #148]	@ (80047e0 <lcd_init+0x2c68>)
 800474c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004750:	611a      	str	r2, [r3, #16]
}
 8004752:	bf00      	nop
        lcd_wr_regno(0x29);
        lcd_wr_regno(0x35);
        lcd_wr_xdata(0x00);
 8004754:	2000      	movs	r0, #0
 8004756:	f7fc f8d3 	bl	8000900 <lcd_wr_xdata>
 800475a:	2351      	movs	r3, #81	@ 0x51
 800475c:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004760:	4b1f      	ldr	r3, [pc, #124]	@ (80047e0 <lcd_init+0x2c68>)
 8004762:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004766:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004768:	4b1d      	ldr	r3, [pc, #116]	@ (80047e0 <lcd_init+0x2c68>)
 800476a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800476e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004770:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8004774:	b29a      	uxth	r2, r3
 8004776:	4b1b      	ldr	r3, [pc, #108]	@ (80047e4 <lcd_init+0x2c6c>)
 8004778:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800477a:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <lcd_init+0x2c68>)
 800477c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004780:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004782:	4b17      	ldr	r3, [pc, #92]	@ (80047e0 <lcd_init+0x2c68>)
 8004784:	2280      	movs	r2, #128	@ 0x80
 8004786:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004788:	4b15      	ldr	r3, [pc, #84]	@ (80047e0 <lcd_init+0x2c68>)
 800478a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800478e:	611a      	str	r2, [r3, #16]
}
 8004790:	bf00      	nop

        lcd_wr_regno(0x51);
        lcd_wr_xdata(0xFF);
 8004792:	20ff      	movs	r0, #255	@ 0xff
 8004794:	f7fc f8b4 	bl	8000900 <lcd_wr_xdata>
 8004798:	2353      	movs	r3, #83	@ 0x53
 800479a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800479e:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <lcd_init+0x2c68>)
 80047a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047a4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80047a6:	4b0e      	ldr	r3, [pc, #56]	@ (80047e0 <lcd_init+0x2c68>)
 80047a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047ac:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80047ae:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <lcd_init+0x2c6c>)
 80047b6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80047b8:	4b09      	ldr	r3, [pc, #36]	@ (80047e0 <lcd_init+0x2c68>)
 80047ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80047be:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80047c0:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <lcd_init+0x2c68>)
 80047c2:	2280      	movs	r2, #128	@ 0x80
 80047c4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80047c6:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <lcd_init+0x2c68>)
 80047c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047cc:	611a      	str	r2, [r3, #16]
}
 80047ce:	bf00      	nop
        lcd_wr_regno(0x53);
        lcd_wr_xdata(0x2C);
 80047d0:	202c      	movs	r0, #44	@ 0x2c
 80047d2:	f7fc f895 	bl	8000900 <lcd_wr_xdata>
 80047d6:	2355      	movs	r3, #85	@ 0x55
 80047d8:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 80047dc:	e004      	b.n	80047e8 <lcd_init+0x2c70>
 80047de:	bf00      	nop
 80047e0:	40011000 	.word	0x40011000
 80047e4:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80047e8:	4b1c      	ldr	r3, [pc, #112]	@ (800485c <lcd_init+0x2ce4>)
 80047ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047ee:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80047f0:	4b1a      	ldr	r3, [pc, #104]	@ (800485c <lcd_init+0x2ce4>)
 80047f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047f6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80047f8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	4b18      	ldr	r3, [pc, #96]	@ (8004860 <lcd_init+0x2ce8>)
 8004800:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004802:	4b16      	ldr	r3, [pc, #88]	@ (800485c <lcd_init+0x2ce4>)
 8004804:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004808:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800480a:	4b14      	ldr	r3, [pc, #80]	@ (800485c <lcd_init+0x2ce4>)
 800480c:	2280      	movs	r2, #128	@ 0x80
 800480e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004810:	4b12      	ldr	r3, [pc, #72]	@ (800485c <lcd_init+0x2ce4>)
 8004812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004816:	611a      	str	r2, [r3, #16]
}
 8004818:	bf00      	nop
        lcd_wr_regno(0x55);
        lcd_wr_xdata(0x82);
 800481a:	2082      	movs	r0, #130	@ 0x82
 800481c:	f7fc f870 	bl	8000900 <lcd_wr_xdata>
 8004820:	232c      	movs	r3, #44	@ 0x2c
 8004822:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004826:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <lcd_init+0x2ce4>)
 8004828:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800482c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800482e:	4b0b      	ldr	r3, [pc, #44]	@ (800485c <lcd_init+0x2ce4>)
 8004830:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004834:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004836:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800483a:	b29a      	uxth	r2, r3
 800483c:	4b08      	ldr	r3, [pc, #32]	@ (8004860 <lcd_init+0x2ce8>)
 800483e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004840:	4b06      	ldr	r3, [pc, #24]	@ (800485c <lcd_init+0x2ce4>)
 8004842:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004846:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004848:	4b04      	ldr	r3, [pc, #16]	@ (800485c <lcd_init+0x2ce4>)
 800484a:	2280      	movs	r2, #128	@ 0x80
 800484c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800484e:	4b03      	ldr	r3, [pc, #12]	@ (800485c <lcd_init+0x2ce4>)
 8004850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004854:	611a      	str	r2, [r3, #16]
}
 8004856:	f002 b8d8 	b.w	8006a0a <lcd_init+0x4e92>
 800485a:	bf00      	nop
 800485c:	40011000 	.word	0x40011000
 8004860:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2c);
    }
    else if (lcddev.id == 0x7796)
 8004864:	4bb4      	ldr	r3, [pc, #720]	@ (8004b38 <lcd_init+0x2fc0>)
 8004866:	889b      	ldrh	r3, [r3, #4]
 8004868:	f247 7296 	movw	r2, #30614	@ 0x7796
 800486c:	4293      	cmp	r3, r2
 800486e:	f040 82e3 	bne.w	8004e38 <lcd_init+0x32c0>
 8004872:	2311      	movs	r3, #17
 8004874:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004878:	4bb0      	ldr	r3, [pc, #704]	@ (8004b3c <lcd_init+0x2fc4>)
 800487a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800487e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004880:	4bae      	ldr	r3, [pc, #696]	@ (8004b3c <lcd_init+0x2fc4>)
 8004882:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004886:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004888:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 800488c:	b29a      	uxth	r2, r3
 800488e:	4bac      	ldr	r3, [pc, #688]	@ (8004b40 <lcd_init+0x2fc8>)
 8004890:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004892:	4baa      	ldr	r3, [pc, #680]	@ (8004b3c <lcd_init+0x2fc4>)
 8004894:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004898:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800489a:	4ba8      	ldr	r3, [pc, #672]	@ (8004b3c <lcd_init+0x2fc4>)
 800489c:	2280      	movs	r2, #128	@ 0x80
 800489e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80048a0:	4ba6      	ldr	r3, [pc, #664]	@ (8004b3c <lcd_init+0x2fc4>)
 80048a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a6:	611a      	str	r2, [r3, #16]
}
 80048a8:	bf00      	nop
    {
       // lcd_ex_st7796_reginit();    /* ִ��ST7796��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 80048aa:	2078      	movs	r0, #120	@ 0x78
 80048ac:	f002 fcbc 	bl	8007228 <HAL_Delay>
 80048b0:	2336      	movs	r3, #54	@ 0x36
 80048b2:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80048b6:	4ba1      	ldr	r3, [pc, #644]	@ (8004b3c <lcd_init+0x2fc4>)
 80048b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80048be:	4b9f      	ldr	r3, [pc, #636]	@ (8004b3c <lcd_init+0x2fc4>)
 80048c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048c4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80048c6:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	4b9c      	ldr	r3, [pc, #624]	@ (8004b40 <lcd_init+0x2fc8>)
 80048ce:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80048d0:	4b9a      	ldr	r3, [pc, #616]	@ (8004b3c <lcd_init+0x2fc4>)
 80048d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048d6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80048d8:	4b98      	ldr	r3, [pc, #608]	@ (8004b3c <lcd_init+0x2fc4>)
 80048da:	2280      	movs	r2, #128	@ 0x80
 80048dc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80048de:	4b97      	ldr	r3, [pc, #604]	@ (8004b3c <lcd_init+0x2fc4>)
 80048e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e4:	611a      	str	r2, [r3, #16]
}
 80048e6:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
        lcd_wr_xdata(0x48);
 80048e8:	2048      	movs	r0, #72	@ 0x48
 80048ea:	f7fc f809 	bl	8000900 <lcd_wr_xdata>
 80048ee:	233a      	movs	r3, #58	@ 0x3a
 80048f0:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80048f4:	4b91      	ldr	r3, [pc, #580]	@ (8004b3c <lcd_init+0x2fc4>)
 80048f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048fa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80048fc:	4b8f      	ldr	r3, [pc, #572]	@ (8004b3c <lcd_init+0x2fc4>)
 80048fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004902:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004904:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8004908:	b29a      	uxth	r2, r3
 800490a:	4b8d      	ldr	r3, [pc, #564]	@ (8004b40 <lcd_init+0x2fc8>)
 800490c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800490e:	4b8b      	ldr	r3, [pc, #556]	@ (8004b3c <lcd_init+0x2fc4>)
 8004910:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004914:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004916:	4b89      	ldr	r3, [pc, #548]	@ (8004b3c <lcd_init+0x2fc4>)
 8004918:	2280      	movs	r2, #128	@ 0x80
 800491a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800491c:	4b87      	ldr	r3, [pc, #540]	@ (8004b3c <lcd_init+0x2fc4>)
 800491e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004922:	611a      	str	r2, [r3, #16]
}
 8004924:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8004926:	2055      	movs	r0, #85	@ 0x55
 8004928:	f7fb ffea 	bl	8000900 <lcd_wr_xdata>
 800492c:	23f0      	movs	r3, #240	@ 0xf0
 800492e:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004932:	4b82      	ldr	r3, [pc, #520]	@ (8004b3c <lcd_init+0x2fc4>)
 8004934:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004938:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800493a:	4b80      	ldr	r3, [pc, #512]	@ (8004b3c <lcd_init+0x2fc4>)
 800493c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004940:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004942:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8004946:	b29a      	uxth	r2, r3
 8004948:	4b7d      	ldr	r3, [pc, #500]	@ (8004b40 <lcd_init+0x2fc8>)
 800494a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800494c:	4b7b      	ldr	r3, [pc, #492]	@ (8004b3c <lcd_init+0x2fc4>)
 800494e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004952:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004954:	4b79      	ldr	r3, [pc, #484]	@ (8004b3c <lcd_init+0x2fc4>)
 8004956:	2280      	movs	r2, #128	@ 0x80
 8004958:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800495a:	4b78      	ldr	r3, [pc, #480]	@ (8004b3c <lcd_init+0x2fc4>)
 800495c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004960:	611a      	str	r2, [r3, #16]
}
 8004962:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0xC3);
 8004964:	20c3      	movs	r0, #195	@ 0xc3
 8004966:	f7fb ffcb 	bl	8000900 <lcd_wr_xdata>
 800496a:	23f0      	movs	r3, #240	@ 0xf0
 800496c:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004970:	4b72      	ldr	r3, [pc, #456]	@ (8004b3c <lcd_init+0x2fc4>)
 8004972:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004976:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004978:	4b70      	ldr	r3, [pc, #448]	@ (8004b3c <lcd_init+0x2fc4>)
 800497a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800497e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004980:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8004984:	b29a      	uxth	r2, r3
 8004986:	4b6e      	ldr	r3, [pc, #440]	@ (8004b40 <lcd_init+0x2fc8>)
 8004988:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800498a:	4b6c      	ldr	r3, [pc, #432]	@ (8004b3c <lcd_init+0x2fc4>)
 800498c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004990:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004992:	4b6a      	ldr	r3, [pc, #424]	@ (8004b3c <lcd_init+0x2fc4>)
 8004994:	2280      	movs	r2, #128	@ 0x80
 8004996:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004998:	4b68      	ldr	r3, [pc, #416]	@ (8004b3c <lcd_init+0x2fc4>)
 800499a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800499e:	611a      	str	r2, [r3, #16]
}
 80049a0:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x96);
 80049a2:	2096      	movs	r0, #150	@ 0x96
 80049a4:	f7fb ffac 	bl	8000900 <lcd_wr_xdata>
 80049a8:	23b4      	movs	r3, #180	@ 0xb4
 80049aa:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80049ae:	4b63      	ldr	r3, [pc, #396]	@ (8004b3c <lcd_init+0x2fc4>)
 80049b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049b4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80049b6:	4b61      	ldr	r3, [pc, #388]	@ (8004b3c <lcd_init+0x2fc4>)
 80049b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049bc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80049be:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004b40 <lcd_init+0x2fc8>)
 80049c6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80049c8:	4b5c      	ldr	r3, [pc, #368]	@ (8004b3c <lcd_init+0x2fc4>)
 80049ca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80049ce:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80049d0:	4b5a      	ldr	r3, [pc, #360]	@ (8004b3c <lcd_init+0x2fc4>)
 80049d2:	2280      	movs	r2, #128	@ 0x80
 80049d4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80049d6:	4b59      	ldr	r3, [pc, #356]	@ (8004b3c <lcd_init+0x2fc4>)
 80049d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049dc:	611a      	str	r2, [r3, #16]
}
 80049de:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x01);
 80049e0:	2001      	movs	r0, #1
 80049e2:	f7fb ff8d 	bl	8000900 <lcd_wr_xdata>
 80049e6:	23b6      	movs	r3, #182	@ 0xb6
 80049e8:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80049ec:	4b53      	ldr	r3, [pc, #332]	@ (8004b3c <lcd_init+0x2fc4>)
 80049ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049f2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80049f4:	4b51      	ldr	r3, [pc, #324]	@ (8004b3c <lcd_init+0x2fc4>)
 80049f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049fa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80049fc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	4b4f      	ldr	r3, [pc, #316]	@ (8004b40 <lcd_init+0x2fc8>)
 8004a04:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a06:	4b4d      	ldr	r3, [pc, #308]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a08:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a0c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a10:	2280      	movs	r2, #128	@ 0x80
 8004a12:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a14:	4b49      	ldr	r3, [pc, #292]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a1a:	611a      	str	r2, [r3, #16]
}
 8004a1c:	bf00      	nop

        lcd_wr_regno(0xB6); /* Display Function Control */
        lcd_wr_xdata(0x0A);
 8004a1e:	200a      	movs	r0, #10
 8004a20:	f7fb ff6e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8004a24:	20a2      	movs	r0, #162	@ 0xa2
 8004a26:	f7fb ff6b 	bl	8000900 <lcd_wr_xdata>
 8004a2a:	23b7      	movs	r3, #183	@ 0xb7
 8004a2c:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a30:	4b42      	ldr	r3, [pc, #264]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a32:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a36:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a38:	4b40      	ldr	r3, [pc, #256]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a3e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a40:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	4b3e      	ldr	r3, [pc, #248]	@ (8004b40 <lcd_init+0x2fc8>)
 8004a48:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a4a:	4b3c      	ldr	r3, [pc, #240]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a50:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a52:	4b3a      	ldr	r3, [pc, #232]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a54:	2280      	movs	r2, #128	@ 0x80
 8004a56:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a58:	4b38      	ldr	r3, [pc, #224]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a5e:	611a      	str	r2, [r3, #16]
}
 8004a60:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0xC6);
 8004a62:	20c6      	movs	r0, #198	@ 0xc6
 8004a64:	f7fb ff4c 	bl	8000900 <lcd_wr_xdata>
 8004a68:	23b9      	movs	r3, #185	@ 0xb9
 8004a6a:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a6e:	4b33      	ldr	r3, [pc, #204]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a74:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a76:	4b31      	ldr	r3, [pc, #196]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a7c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a7e:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	4b2e      	ldr	r3, [pc, #184]	@ (8004b40 <lcd_init+0x2fc8>)
 8004a86:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a88:	4b2c      	ldr	r3, [pc, #176]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a8a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a8e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a90:	4b2a      	ldr	r3, [pc, #168]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a92:	2280      	movs	r2, #128	@ 0x80
 8004a94:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a96:	4b29      	ldr	r3, [pc, #164]	@ (8004b3c <lcd_init+0x2fc4>)
 8004a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a9c:	611a      	str	r2, [r3, #16]
}
 8004a9e:	bf00      	nop

        lcd_wr_regno(0xB9);
        lcd_wr_xdata(0x02);
 8004aa0:	2002      	movs	r0, #2
 8004aa2:	f7fb ff2d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8004aa6:	20e0      	movs	r0, #224	@ 0xe0
 8004aa8:	f7fb ff2a 	bl	8000900 <lcd_wr_xdata>
 8004aac:	23c0      	movs	r3, #192	@ 0xc0
 8004aae:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004ab2:	4b22      	ldr	r3, [pc, #136]	@ (8004b3c <lcd_init+0x2fc4>)
 8004ab4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ab8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004aba:	4b20      	ldr	r3, [pc, #128]	@ (8004b3c <lcd_init+0x2fc4>)
 8004abc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ac0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ac2:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b40 <lcd_init+0x2fc8>)
 8004aca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004acc:	4b1b      	ldr	r3, [pc, #108]	@ (8004b3c <lcd_init+0x2fc4>)
 8004ace:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ad2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ad4:	4b19      	ldr	r3, [pc, #100]	@ (8004b3c <lcd_init+0x2fc4>)
 8004ad6:	2280      	movs	r2, #128	@ 0x80
 8004ad8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004ada:	4b18      	ldr	r3, [pc, #96]	@ (8004b3c <lcd_init+0x2fc4>)
 8004adc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ae0:	611a      	str	r2, [r3, #16]
}
 8004ae2:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x80);
 8004ae4:	2080      	movs	r0, #128	@ 0x80
 8004ae6:	f7fb ff0b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x16);
 8004aea:	2016      	movs	r0, #22
 8004aec:	f7fb ff08 	bl	8000900 <lcd_wr_xdata>
 8004af0:	23c1      	movs	r3, #193	@ 0xc1
 8004af2:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004af6:	4b11      	ldr	r3, [pc, #68]	@ (8004b3c <lcd_init+0x2fc4>)
 8004af8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004afc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004afe:	4b0f      	ldr	r3, [pc, #60]	@ (8004b3c <lcd_init+0x2fc4>)
 8004b00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b04:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b06:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <lcd_init+0x2fc8>)
 8004b0e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b10:	4b0a      	ldr	r3, [pc, #40]	@ (8004b3c <lcd_init+0x2fc4>)
 8004b12:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b16:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b18:	4b08      	ldr	r3, [pc, #32]	@ (8004b3c <lcd_init+0x2fc4>)
 8004b1a:	2280      	movs	r2, #128	@ 0x80
 8004b1c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b1e:	4b07      	ldr	r3, [pc, #28]	@ (8004b3c <lcd_init+0x2fc4>)
 8004b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b24:	611a      	str	r2, [r3, #16]
}
 8004b26:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x19);
 8004b28:	2019      	movs	r0, #25
 8004b2a:	f7fb fee9 	bl	8000900 <lcd_wr_xdata>
 8004b2e:	23c2      	movs	r3, #194	@ 0xc2
 8004b30:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
 8004b34:	e006      	b.n	8004b44 <lcd_init+0x2fcc>
 8004b36:	bf00      	nop
 8004b38:	2000007c 	.word	0x2000007c
 8004b3c:	40011000 	.word	0x40011000
 8004b40:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b44:	4bba      	ldr	r3, [pc, #744]	@ (8004e30 <lcd_init+0x32b8>)
 8004b46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b4a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b4c:	4bb8      	ldr	r3, [pc, #736]	@ (8004e30 <lcd_init+0x32b8>)
 8004b4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b52:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b54:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	4bb6      	ldr	r3, [pc, #728]	@ (8004e34 <lcd_init+0x32bc>)
 8004b5c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b5e:	4bb4      	ldr	r3, [pc, #720]	@ (8004e30 <lcd_init+0x32b8>)
 8004b60:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b64:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b66:	4bb2      	ldr	r3, [pc, #712]	@ (8004e30 <lcd_init+0x32b8>)
 8004b68:	2280      	movs	r2, #128	@ 0x80
 8004b6a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b6c:	4bb0      	ldr	r3, [pc, #704]	@ (8004e30 <lcd_init+0x32b8>)
 8004b6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b72:	611a      	str	r2, [r3, #16]
}
 8004b74:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0xA7);
 8004b76:	20a7      	movs	r0, #167	@ 0xa7
 8004b78:	f7fb fec2 	bl	8000900 <lcd_wr_xdata>
 8004b7c:	23c5      	movs	r3, #197	@ 0xc5
 8004b7e:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b82:	4bab      	ldr	r3, [pc, #684]	@ (8004e30 <lcd_init+0x32b8>)
 8004b84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b88:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b8a:	4ba9      	ldr	r3, [pc, #676]	@ (8004e30 <lcd_init+0x32b8>)
 8004b8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b90:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b92:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	4ba6      	ldr	r3, [pc, #664]	@ (8004e34 <lcd_init+0x32bc>)
 8004b9a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b9c:	4ba4      	ldr	r3, [pc, #656]	@ (8004e30 <lcd_init+0x32b8>)
 8004b9e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ba2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ba4:	4ba2      	ldr	r3, [pc, #648]	@ (8004e30 <lcd_init+0x32b8>)
 8004ba6:	2280      	movs	r2, #128	@ 0x80
 8004ba8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004baa:	4ba1      	ldr	r3, [pc, #644]	@ (8004e30 <lcd_init+0x32b8>)
 8004bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bb0:	611a      	str	r2, [r3, #16]
}
 8004bb2:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x16);
 8004bb4:	2016      	movs	r0, #22
 8004bb6:	f7fb fea3 	bl	8000900 <lcd_wr_xdata>
 8004bba:	23e8      	movs	r3, #232	@ 0xe8
 8004bbc:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004bc0:	4b9b      	ldr	r3, [pc, #620]	@ (8004e30 <lcd_init+0x32b8>)
 8004bc2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bc6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004bc8:	4b99      	ldr	r3, [pc, #612]	@ (8004e30 <lcd_init+0x32b8>)
 8004bca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004bd0:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	4b97      	ldr	r3, [pc, #604]	@ (8004e34 <lcd_init+0x32bc>)
 8004bd8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004bda:	4b95      	ldr	r3, [pc, #596]	@ (8004e30 <lcd_init+0x32b8>)
 8004bdc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004be0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004be2:	4b93      	ldr	r3, [pc, #588]	@ (8004e30 <lcd_init+0x32b8>)
 8004be4:	2280      	movs	r2, #128	@ 0x80
 8004be6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004be8:	4b91      	ldr	r3, [pc, #580]	@ (8004e30 <lcd_init+0x32b8>)
 8004bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bee:	611a      	str	r2, [r3, #16]
}
 8004bf0:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x40);
 8004bf2:	2040      	movs	r0, #64	@ 0x40
 8004bf4:	f7fb fe84 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x8A);
 8004bf8:	208a      	movs	r0, #138	@ 0x8a
 8004bfa:	f7fb fe81 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f7fb fe7e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c04:	2000      	movs	r0, #0
 8004c06:	f7fb fe7b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004c0a:	2029      	movs	r0, #41	@ 0x29
 8004c0c:	f7fb fe78 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8004c10:	2019      	movs	r0, #25
 8004c12:	f7fb fe75 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xA5);
 8004c16:	20a5      	movs	r0, #165	@ 0xa5
 8004c18:	f7fb fe72 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8004c1c:	2033      	movs	r0, #51	@ 0x33
 8004c1e:	f7fb fe6f 	bl	8000900 <lcd_wr_xdata>
 8004c22:	23e0      	movs	r3, #224	@ 0xe0
 8004c24:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c28:	4b81      	ldr	r3, [pc, #516]	@ (8004e30 <lcd_init+0x32b8>)
 8004c2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c2e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c30:	4b7f      	ldr	r3, [pc, #508]	@ (8004e30 <lcd_init+0x32b8>)
 8004c32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c36:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c38:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e34 <lcd_init+0x32bc>)
 8004c40:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c42:	4b7b      	ldr	r3, [pc, #492]	@ (8004e30 <lcd_init+0x32b8>)
 8004c44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c48:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c4a:	4b79      	ldr	r3, [pc, #484]	@ (8004e30 <lcd_init+0x32b8>)
 8004c4c:	2280      	movs	r2, #128	@ 0x80
 8004c4e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c50:	4b77      	ldr	r3, [pc, #476]	@ (8004e30 <lcd_init+0x32b8>)
 8004c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c56:	611a      	str	r2, [r3, #16]
}
 8004c58:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0xF0);
 8004c5a:	20f0      	movs	r0, #240	@ 0xf0
 8004c5c:	f7fb fe50 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8004c60:	2007      	movs	r0, #7
 8004c62:	f7fb fe4d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 8004c66:	200d      	movs	r0, #13
 8004c68:	f7fb fe4a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8004c6c:	2004      	movs	r0, #4
 8004c6e:	f7fb fe47 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8004c72:	2005      	movs	r0, #5
 8004c74:	f7fb fe44 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004c78:	2014      	movs	r0, #20
 8004c7a:	f7fb fe41 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8004c7e:	2036      	movs	r0, #54	@ 0x36
 8004c80:	f7fb fe3e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8004c84:	2054      	movs	r0, #84	@ 0x54
 8004c86:	f7fb fe3b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004c8a:	204c      	movs	r0, #76	@ 0x4c
 8004c8c:	f7fb fe38 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x38);
 8004c90:	2038      	movs	r0, #56	@ 0x38
 8004c92:	f7fb fe35 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8004c96:	2013      	movs	r0, #19
 8004c98:	f7fb fe32 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004c9c:	2014      	movs	r0, #20
 8004c9e:	f7fb fe2f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x2E);
 8004ca2:	202e      	movs	r0, #46	@ 0x2e
 8004ca4:	f7fb fe2c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004ca8:	2034      	movs	r0, #52	@ 0x34
 8004caa:	f7fb fe29 	bl	8000900 <lcd_wr_xdata>
 8004cae:	23e1      	movs	r3, #225	@ 0xe1
 8004cb0:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004cb4:	4b5e      	ldr	r3, [pc, #376]	@ (8004e30 <lcd_init+0x32b8>)
 8004cb6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cba:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8004e30 <lcd_init+0x32b8>)
 8004cbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cc2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004cc4:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	4b5a      	ldr	r3, [pc, #360]	@ (8004e34 <lcd_init+0x32bc>)
 8004ccc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004cce:	4b58      	ldr	r3, [pc, #352]	@ (8004e30 <lcd_init+0x32b8>)
 8004cd0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cd4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004cd6:	4b56      	ldr	r3, [pc, #344]	@ (8004e30 <lcd_init+0x32b8>)
 8004cd8:	2280      	movs	r2, #128	@ 0x80
 8004cda:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004cdc:	4b54      	ldr	r3, [pc, #336]	@ (8004e30 <lcd_init+0x32b8>)
 8004cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ce2:	611a      	str	r2, [r3, #16]
}
 8004ce4:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0xF0);
 8004ce6:	20f0      	movs	r0, #240	@ 0xf0
 8004ce8:	f7fb fe0a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004cec:	2010      	movs	r0, #16
 8004cee:	f7fb fe07 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8004cf2:	2014      	movs	r0, #20
 8004cf4:	f7fb fe04 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8004cf8:	200e      	movs	r0, #14
 8004cfa:	f7fb fe01 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8004cfe:	200c      	movs	r0, #12
 8004d00:	f7fb fdfe 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8004d04:	2008      	movs	r0, #8
 8004d06:	f7fb fdfb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x35);
 8004d0a:	2035      	movs	r0, #53	@ 0x35
 8004d0c:	f7fb fdf8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004d10:	2044      	movs	r0, #68	@ 0x44
 8004d12:	f7fb fdf5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8004d16:	204c      	movs	r0, #76	@ 0x4c
 8004d18:	f7fb fdf2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8004d1c:	2026      	movs	r0, #38	@ 0x26
 8004d1e:	f7fb fdef 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004d22:	2010      	movs	r0, #16
 8004d24:	f7fb fdec 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8004d28:	2012      	movs	r0, #18
 8004d2a:	f7fb fde9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8004d2e:	202c      	movs	r0, #44	@ 0x2c
 8004d30:	f7fb fde6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8004d34:	2032      	movs	r0, #50	@ 0x32
 8004d36:	f7fb fde3 	bl	8000900 <lcd_wr_xdata>
 8004d3a:	23f0      	movs	r3, #240	@ 0xf0
 8004d3c:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d40:	4b3b      	ldr	r3, [pc, #236]	@ (8004e30 <lcd_init+0x32b8>)
 8004d42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d46:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d48:	4b39      	ldr	r3, [pc, #228]	@ (8004e30 <lcd_init+0x32b8>)
 8004d4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d4e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d50:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	4b37      	ldr	r3, [pc, #220]	@ (8004e34 <lcd_init+0x32bc>)
 8004d58:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d5a:	4b35      	ldr	r3, [pc, #212]	@ (8004e30 <lcd_init+0x32b8>)
 8004d5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d60:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d62:	4b33      	ldr	r3, [pc, #204]	@ (8004e30 <lcd_init+0x32b8>)
 8004d64:	2280      	movs	r2, #128	@ 0x80
 8004d66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d68:	4b31      	ldr	r3, [pc, #196]	@ (8004e30 <lcd_init+0x32b8>)
 8004d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d6e:	611a      	str	r2, [r3, #16]
}
 8004d70:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x3C);
 8004d72:	203c      	movs	r0, #60	@ 0x3c
 8004d74:	f7fb fdc4 	bl	8000900 <lcd_wr_xdata>
 8004d78:	23f0      	movs	r3, #240	@ 0xf0
 8004d7a:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8004e30 <lcd_init+0x32b8>)
 8004d80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d84:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d86:	4b2a      	ldr	r3, [pc, #168]	@ (8004e30 <lcd_init+0x32b8>)
 8004d88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d8c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d8e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	4b27      	ldr	r3, [pc, #156]	@ (8004e34 <lcd_init+0x32bc>)
 8004d96:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d98:	4b25      	ldr	r3, [pc, #148]	@ (8004e30 <lcd_init+0x32b8>)
 8004d9a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d9e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004da0:	4b23      	ldr	r3, [pc, #140]	@ (8004e30 <lcd_init+0x32b8>)
 8004da2:	2280      	movs	r2, #128	@ 0x80
 8004da4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004da6:	4b22      	ldr	r3, [pc, #136]	@ (8004e30 <lcd_init+0x32b8>)
 8004da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dac:	611a      	str	r2, [r3, #16]
}
 8004dae:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x69);
 8004db0:	2069      	movs	r0, #105	@ 0x69
 8004db2:	f7fb fda5 	bl	8000900 <lcd_wr_xdata>

        HAL_Delay(120);
 8004db6:	2078      	movs	r0, #120	@ 0x78
 8004db8:	f002 fa36 	bl	8007228 <HAL_Delay>
 8004dbc:	2321      	movs	r3, #33	@ 0x21
 8004dbe:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e30 <lcd_init+0x32b8>)
 8004dc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004dc8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004dca:	4b19      	ldr	r3, [pc, #100]	@ (8004e30 <lcd_init+0x32b8>)
 8004dcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dd0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004dd2:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	4b16      	ldr	r3, [pc, #88]	@ (8004e34 <lcd_init+0x32bc>)
 8004dda:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ddc:	4b14      	ldr	r3, [pc, #80]	@ (8004e30 <lcd_init+0x32b8>)
 8004dde:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004de2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004de4:	4b12      	ldr	r3, [pc, #72]	@ (8004e30 <lcd_init+0x32b8>)
 8004de6:	2280      	movs	r2, #128	@ 0x80
 8004de8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004dea:	4b11      	ldr	r3, [pc, #68]	@ (8004e30 <lcd_init+0x32b8>)
 8004dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004df0:	611a      	str	r2, [r3, #16]
}
 8004df2:	bf00      	nop
 8004df4:	2329      	movs	r3, #41	@ 0x29
 8004df6:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <lcd_init+0x32b8>)
 8004dfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e00:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e02:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <lcd_init+0x32b8>)
 8004e04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e08:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e0a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	4b08      	ldr	r3, [pc, #32]	@ (8004e34 <lcd_init+0x32bc>)
 8004e12:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e14:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <lcd_init+0x32b8>)
 8004e16:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e1a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e1c:	4b04      	ldr	r3, [pc, #16]	@ (8004e30 <lcd_init+0x32b8>)
 8004e1e:	2280      	movs	r2, #128	@ 0x80
 8004e20:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e22:	4b03      	ldr	r3, [pc, #12]	@ (8004e30 <lcd_init+0x32b8>)
 8004e24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e28:	611a      	str	r2, [r3, #16]
}
 8004e2a:	f001 bdee 	b.w	8006a0a <lcd_init+0x4e92>
 8004e2e:	bf00      	nop
 8004e30:	40011000 	.word	0x40011000
 8004e34:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x21);
        lcd_wr_regno(0x29);
    }
    else if (lcddev.id == 0x5510)
 8004e38:	4b03      	ldr	r3, [pc, #12]	@ (8004e48 <lcd_init+0x32d0>)
 8004e3a:	889b      	ldrh	r3, [r3, #4]
 8004e3c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8004e40:	4293      	cmp	r3, r2
 8004e42:	f040 87b3 	bne.w	8005dac <lcd_init+0x4234>
 8004e46:	e001      	b.n	8004e4c <lcd_init+0x32d4>
 8004e48:	2000007c 	.word	0x2000007c
    {
        //lcd_ex_nt35510_reginit();   /* ִ��NT35510��ʼ�� */

        lcd_write_reg(0xF000, 0x55);
 8004e4c:	2155      	movs	r1, #85	@ 0x55
 8004e4e:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8004e52:	f7fb fd79 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8004e56:	21aa      	movs	r1, #170	@ 0xaa
 8004e58:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8004e5c:	f7fb fd74 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8004e60:	2152      	movs	r1, #82	@ 0x52
 8004e62:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8004e66:	f7fb fd6f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8004e6a:	2108      	movs	r1, #8
 8004e6c:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8004e70:	f7fb fd6a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x01);
 8004e74:	2101      	movs	r1, #1
 8004e76:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8004e7a:	f7fb fd65 	bl	8000948 <lcd_write_reg>
        /* AVDD Set AVDD 5.2V */
        lcd_write_reg(0xB000, 0x0D);
 8004e7e:	210d      	movs	r1, #13
 8004e80:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8004e84:	f7fb fd60 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB001, 0x0D);
 8004e88:	210d      	movs	r1, #13
 8004e8a:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8004e8e:	f7fb fd5b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB002, 0x0D);
 8004e92:	210d      	movs	r1, #13
 8004e94:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8004e98:	f7fb fd56 	bl	8000948 <lcd_write_reg>
        /* AVDD ratio */
        lcd_write_reg(0xB600, 0x34);
 8004e9c:	2134      	movs	r1, #52	@ 0x34
 8004e9e:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8004ea2:	f7fb fd51 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB601, 0x34);
 8004ea6:	2134      	movs	r1, #52	@ 0x34
 8004ea8:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8004eac:	f7fb fd4c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB602, 0x34);
 8004eb0:	2134      	movs	r1, #52	@ 0x34
 8004eb2:	f24b 6002 	movw	r0, #46594	@ 0xb602
 8004eb6:	f7fb fd47 	bl	8000948 <lcd_write_reg>
        /* AVEE -5.2V */
        lcd_write_reg(0xB100, 0x0D);
 8004eba:	210d      	movs	r1, #13
 8004ebc:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8004ec0:	f7fb fd42 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x0D);
 8004ec4:	210d      	movs	r1, #13
 8004ec6:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8004eca:	f7fb fd3d 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB102, 0x0D);
 8004ece:	210d      	movs	r1, #13
 8004ed0:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8004ed4:	f7fb fd38 	bl	8000948 <lcd_write_reg>
        /* AVEE ratio */
        lcd_write_reg(0xB700, 0x34);
 8004ed8:	2134      	movs	r1, #52	@ 0x34
 8004eda:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8004ede:	f7fb fd33 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x34);
 8004ee2:	2134      	movs	r1, #52	@ 0x34
 8004ee4:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8004ee8:	f7fb fd2e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB702, 0x34);
 8004eec:	2134      	movs	r1, #52	@ 0x34
 8004eee:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8004ef2:	f7fb fd29 	bl	8000948 <lcd_write_reg>
        /* VCL -2.5V */
        lcd_write_reg(0xB200, 0x00);
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 8004efc:	f7fb fd24 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB201, 0x00);
 8004f00:	2100      	movs	r1, #0
 8004f02:	f24b 2001 	movw	r0, #45569	@ 0xb201
 8004f06:	f7fb fd1f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB202, 0x00);
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	f24b 2002 	movw	r0, #45570	@ 0xb202
 8004f10:	f7fb fd1a 	bl	8000948 <lcd_write_reg>
        /* VCL ratio */
        lcd_write_reg(0xB800, 0x24);
 8004f14:	2124      	movs	r1, #36	@ 0x24
 8004f16:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8004f1a:	f7fb fd15 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x24);
 8004f1e:	2124      	movs	r1, #36	@ 0x24
 8004f20:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8004f24:	f7fb fd10 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x24);
 8004f28:	2124      	movs	r1, #36	@ 0x24
 8004f2a:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8004f2e:	f7fb fd0b 	bl	8000948 <lcd_write_reg>
        /* VGH 15V (Free pump) */
        lcd_write_reg(0xBF00, 0x01);
 8004f32:	2101      	movs	r1, #1
 8004f34:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 8004f38:	f7fb fd06 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB300, 0x0F);
 8004f3c:	210f      	movs	r1, #15
 8004f3e:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8004f42:	f7fb fd01 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB301, 0x0F);
 8004f46:	210f      	movs	r1, #15
 8004f48:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8004f4c:	f7fb fcfc 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB302, 0x0F);
 8004f50:	210f      	movs	r1, #15
 8004f52:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8004f56:	f7fb fcf7 	bl	8000948 <lcd_write_reg>
        /* VGH ratio */
        lcd_write_reg(0xB900, 0x34);
 8004f5a:	2134      	movs	r1, #52	@ 0x34
 8004f5c:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8004f60:	f7fb fcf2 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB901, 0x34);
 8004f64:	2134      	movs	r1, #52	@ 0x34
 8004f66:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8004f6a:	f7fb fced 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB902, 0x34);
 8004f6e:	2134      	movs	r1, #52	@ 0x34
 8004f70:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8004f74:	f7fb fce8 	bl	8000948 <lcd_write_reg>
        /* VGL_REG -10V */
        lcd_write_reg(0xB500, 0x08);
 8004f78:	2108      	movs	r1, #8
 8004f7a:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8004f7e:	f7fb fce3 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB501, 0x08);
 8004f82:	2108      	movs	r1, #8
 8004f84:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8004f88:	f7fb fcde 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB502, 0x08);
 8004f8c:	2108      	movs	r1, #8
 8004f8e:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8004f92:	f7fb fcd9 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xC200, 0x03);
 8004f96:	2103      	movs	r1, #3
 8004f98:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 8004f9c:	f7fb fcd4 	bl	8000948 <lcd_write_reg>
        /* VGLX ratio */
        lcd_write_reg(0xBA00, 0x24);
 8004fa0:	2124      	movs	r1, #36	@ 0x24
 8004fa2:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8004fa6:	f7fb fccf 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xBA01, 0x24);
 8004faa:	2124      	movs	r1, #36	@ 0x24
 8004fac:	f64b 2001 	movw	r0, #47617	@ 0xba01
 8004fb0:	f7fb fcca 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xBA02, 0x24);
 8004fb4:	2124      	movs	r1, #36	@ 0x24
 8004fb6:	f64b 2002 	movw	r0, #47618	@ 0xba02
 8004fba:	f7fb fcc5 	bl	8000948 <lcd_write_reg>
        /* VGMP/VGSP 4.5V/0V */
        lcd_write_reg(0xBC00, 0x00);
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8004fc4:	f7fb fcc0 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x78);
 8004fc8:	2178      	movs	r1, #120	@ 0x78
 8004fca:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8004fce:	f7fb fcbb 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8004fd8:	f7fb fcb6 	bl	8000948 <lcd_write_reg>
        /* VGMN/VGSN -4.5V/0V */
        lcd_write_reg(0xBD00, 0x00);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8004fe2:	f7fb fcb1 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xBD01, 0x78);
 8004fe6:	2178      	movs	r1, #120	@ 0x78
 8004fe8:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 8004fec:	f7fb fcac 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xBD02, 0x00);
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8004ff6:	f7fb fca7 	bl	8000948 <lcd_write_reg>
        /* VCOM */
        lcd_write_reg(0xBE00, 0x00);
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8005000:	f7fb fca2 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xBE01, 0x64);
 8005004:	2164      	movs	r1, #100	@ 0x64
 8005006:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 800500a:	f7fb fc9d 	bl	8000948 <lcd_write_reg>
        /* Gamma Setting */
        lcd_write_reg(0xD100, 0x00);
 800500e:	2100      	movs	r1, #0
 8005010:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8005014:	f7fb fc98 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD101, 0x33);
 8005018:	2133      	movs	r1, #51	@ 0x33
 800501a:	f24d 1001 	movw	r0, #53505	@ 0xd101
 800501e:	f7fb fc93 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD102, 0x00);
 8005022:	2100      	movs	r1, #0
 8005024:	f24d 1002 	movw	r0, #53506	@ 0xd102
 8005028:	f7fb fc8e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD103, 0x34);
 800502c:	2134      	movs	r1, #52	@ 0x34
 800502e:	f24d 1003 	movw	r0, #53507	@ 0xd103
 8005032:	f7fb fc89 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD104, 0x00);
 8005036:	2100      	movs	r1, #0
 8005038:	f24d 1004 	movw	r0, #53508	@ 0xd104
 800503c:	f7fb fc84 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD105, 0x3A);
 8005040:	213a      	movs	r1, #58	@ 0x3a
 8005042:	f24d 1005 	movw	r0, #53509	@ 0xd105
 8005046:	f7fb fc7f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD106, 0x00);
 800504a:	2100      	movs	r1, #0
 800504c:	f24d 1006 	movw	r0, #53510	@ 0xd106
 8005050:	f7fb fc7a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD107, 0x4A);
 8005054:	214a      	movs	r1, #74	@ 0x4a
 8005056:	f24d 1007 	movw	r0, #53511	@ 0xd107
 800505a:	f7fb fc75 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD108, 0x00);
 800505e:	2100      	movs	r1, #0
 8005060:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8005064:	f7fb fc70 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD109, 0x5C);
 8005068:	215c      	movs	r1, #92	@ 0x5c
 800506a:	f24d 1009 	movw	r0, #53513	@ 0xd109
 800506e:	f7fb fc6b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD10A, 0x00);
 8005072:	2100      	movs	r1, #0
 8005074:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8005078:	f7fb fc66 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD10B, 0x81);
 800507c:	2181      	movs	r1, #129	@ 0x81
 800507e:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8005082:	f7fb fc61 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD10C, 0x00);
 8005086:	2100      	movs	r1, #0
 8005088:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 800508c:	f7fb fc5c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD10D, 0xA6);
 8005090:	21a6      	movs	r1, #166	@ 0xa6
 8005092:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8005096:	f7fb fc57 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD10E, 0x00);
 800509a:	2100      	movs	r1, #0
 800509c:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 80050a0:	f7fb fc52 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD10F, 0xE5);
 80050a4:	21e5      	movs	r1, #229	@ 0xe5
 80050a6:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 80050aa:	f7fb fc4d 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD110, 0x01);
 80050ae:	2101      	movs	r1, #1
 80050b0:	f24d 1010 	movw	r0, #53520	@ 0xd110
 80050b4:	f7fb fc48 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD111, 0x13);
 80050b8:	2113      	movs	r1, #19
 80050ba:	f24d 1011 	movw	r0, #53521	@ 0xd111
 80050be:	f7fb fc43 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD112, 0x01);
 80050c2:	2101      	movs	r1, #1
 80050c4:	f24d 1012 	movw	r0, #53522	@ 0xd112
 80050c8:	f7fb fc3e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD113, 0x54);
 80050cc:	2154      	movs	r1, #84	@ 0x54
 80050ce:	f24d 1013 	movw	r0, #53523	@ 0xd113
 80050d2:	f7fb fc39 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD114, 0x01);
 80050d6:	2101      	movs	r1, #1
 80050d8:	f24d 1014 	movw	r0, #53524	@ 0xd114
 80050dc:	f7fb fc34 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD115, 0x82);
 80050e0:	2182      	movs	r1, #130	@ 0x82
 80050e2:	f24d 1015 	movw	r0, #53525	@ 0xd115
 80050e6:	f7fb fc2f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD116, 0x01);
 80050ea:	2101      	movs	r1, #1
 80050ec:	f24d 1016 	movw	r0, #53526	@ 0xd116
 80050f0:	f7fb fc2a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD117, 0xCA);
 80050f4:	21ca      	movs	r1, #202	@ 0xca
 80050f6:	f24d 1017 	movw	r0, #53527	@ 0xd117
 80050fa:	f7fb fc25 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD118, 0x02);
 80050fe:	2102      	movs	r1, #2
 8005100:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8005104:	f7fb fc20 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD119, 0x00);
 8005108:	2100      	movs	r1, #0
 800510a:	f24d 1019 	movw	r0, #53529	@ 0xd119
 800510e:	f7fb fc1b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD11A, 0x02);
 8005112:	2102      	movs	r1, #2
 8005114:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 8005118:	f7fb fc16 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD11B, 0x01);
 800511c:	2101      	movs	r1, #1
 800511e:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 8005122:	f7fb fc11 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD11C, 0x02);
 8005126:	2102      	movs	r1, #2
 8005128:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 800512c:	f7fb fc0c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD11D, 0x34);
 8005130:	2134      	movs	r1, #52	@ 0x34
 8005132:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 8005136:	f7fb fc07 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD11E, 0x02);
 800513a:	2102      	movs	r1, #2
 800513c:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8005140:	f7fb fc02 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD11F, 0x67);
 8005144:	2167      	movs	r1, #103	@ 0x67
 8005146:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 800514a:	f7fb fbfd 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD120, 0x02);
 800514e:	2102      	movs	r1, #2
 8005150:	f24d 1020 	movw	r0, #53536	@ 0xd120
 8005154:	f7fb fbf8 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD121, 0x84);
 8005158:	2184      	movs	r1, #132	@ 0x84
 800515a:	f24d 1021 	movw	r0, #53537	@ 0xd121
 800515e:	f7fb fbf3 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD122, 0x02);
 8005162:	2102      	movs	r1, #2
 8005164:	f24d 1022 	movw	r0, #53538	@ 0xd122
 8005168:	f7fb fbee 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD123, 0xA4);
 800516c:	21a4      	movs	r1, #164	@ 0xa4
 800516e:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8005172:	f7fb fbe9 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD124, 0x02);
 8005176:	2102      	movs	r1, #2
 8005178:	f24d 1024 	movw	r0, #53540	@ 0xd124
 800517c:	f7fb fbe4 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD125, 0xB7);
 8005180:	21b7      	movs	r1, #183	@ 0xb7
 8005182:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8005186:	f7fb fbdf 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD126, 0x02);
 800518a:	2102      	movs	r1, #2
 800518c:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8005190:	f7fb fbda 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD127, 0xCF);
 8005194:	21cf      	movs	r1, #207	@ 0xcf
 8005196:	f24d 1027 	movw	r0, #53543	@ 0xd127
 800519a:	f7fb fbd5 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD128, 0x02);
 800519e:	2102      	movs	r1, #2
 80051a0:	f24d 1028 	movw	r0, #53544	@ 0xd128
 80051a4:	f7fb fbd0 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD129, 0xDE);
 80051a8:	21de      	movs	r1, #222	@ 0xde
 80051aa:	f24d 1029 	movw	r0, #53545	@ 0xd129
 80051ae:	f7fb fbcb 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD12A, 0x02);
 80051b2:	2102      	movs	r1, #2
 80051b4:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 80051b8:	f7fb fbc6 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD12B, 0xF2);
 80051bc:	21f2      	movs	r1, #242	@ 0xf2
 80051be:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 80051c2:	f7fb fbc1 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD12C, 0x02);
 80051c6:	2102      	movs	r1, #2
 80051c8:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 80051cc:	f7fb fbbc 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD12D, 0xFE);
 80051d0:	21fe      	movs	r1, #254	@ 0xfe
 80051d2:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 80051d6:	f7fb fbb7 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD12E, 0x03);
 80051da:	2103      	movs	r1, #3
 80051dc:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 80051e0:	f7fb fbb2 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD12F, 0x10);
 80051e4:	2110      	movs	r1, #16
 80051e6:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 80051ea:	f7fb fbad 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD130, 0x03);
 80051ee:	2103      	movs	r1, #3
 80051f0:	f24d 1030 	movw	r0, #53552	@ 0xd130
 80051f4:	f7fb fba8 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD131, 0x33);
 80051f8:	2133      	movs	r1, #51	@ 0x33
 80051fa:	f24d 1031 	movw	r0, #53553	@ 0xd131
 80051fe:	f7fb fba3 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD132, 0x03);
 8005202:	2103      	movs	r1, #3
 8005204:	f24d 1032 	movw	r0, #53554	@ 0xd132
 8005208:	f7fb fb9e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD133, 0x6D);
 800520c:	216d      	movs	r1, #109	@ 0x6d
 800520e:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8005212:	f7fb fb99 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD200, 0x00);
 8005216:	2100      	movs	r1, #0
 8005218:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 800521c:	f7fb fb94 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD201, 0x33);
 8005220:	2133      	movs	r1, #51	@ 0x33
 8005222:	f24d 2001 	movw	r0, #53761	@ 0xd201
 8005226:	f7fb fb8f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD202, 0x00);
 800522a:	2100      	movs	r1, #0
 800522c:	f24d 2002 	movw	r0, #53762	@ 0xd202
 8005230:	f7fb fb8a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD203, 0x34);
 8005234:	2134      	movs	r1, #52	@ 0x34
 8005236:	f24d 2003 	movw	r0, #53763	@ 0xd203
 800523a:	f7fb fb85 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD204, 0x00);
 800523e:	2100      	movs	r1, #0
 8005240:	f24d 2004 	movw	r0, #53764	@ 0xd204
 8005244:	f7fb fb80 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD205, 0x3A);
 8005248:	213a      	movs	r1, #58	@ 0x3a
 800524a:	f24d 2005 	movw	r0, #53765	@ 0xd205
 800524e:	f7fb fb7b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD206, 0x00);
 8005252:	2100      	movs	r1, #0
 8005254:	f24d 2006 	movw	r0, #53766	@ 0xd206
 8005258:	f7fb fb76 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD207, 0x4A);
 800525c:	214a      	movs	r1, #74	@ 0x4a
 800525e:	f24d 2007 	movw	r0, #53767	@ 0xd207
 8005262:	f7fb fb71 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD208, 0x00);
 8005266:	2100      	movs	r1, #0
 8005268:	f24d 2008 	movw	r0, #53768	@ 0xd208
 800526c:	f7fb fb6c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD209, 0x5C);
 8005270:	215c      	movs	r1, #92	@ 0x5c
 8005272:	f24d 2009 	movw	r0, #53769	@ 0xd209
 8005276:	f7fb fb67 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD20A, 0x00);
 800527a:	2100      	movs	r1, #0
 800527c:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8005280:	f7fb fb62 	bl	8000948 <lcd_write_reg>

        lcd_write_reg(0xD20B, 0x81);
 8005284:	2181      	movs	r1, #129	@ 0x81
 8005286:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 800528a:	f7fb fb5d 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD20C, 0x00);
 800528e:	2100      	movs	r1, #0
 8005290:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8005294:	f7fb fb58 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD20D, 0xA6);
 8005298:	21a6      	movs	r1, #166	@ 0xa6
 800529a:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 800529e:	f7fb fb53 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD20E, 0x00);
 80052a2:	2100      	movs	r1, #0
 80052a4:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 80052a8:	f7fb fb4e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD20F, 0xE5);
 80052ac:	21e5      	movs	r1, #229	@ 0xe5
 80052ae:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 80052b2:	f7fb fb49 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD210, 0x01);
 80052b6:	2101      	movs	r1, #1
 80052b8:	f24d 2010 	movw	r0, #53776	@ 0xd210
 80052bc:	f7fb fb44 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD211, 0x13);
 80052c0:	2113      	movs	r1, #19
 80052c2:	f24d 2011 	movw	r0, #53777	@ 0xd211
 80052c6:	f7fb fb3f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD212, 0x01);
 80052ca:	2101      	movs	r1, #1
 80052cc:	f24d 2012 	movw	r0, #53778	@ 0xd212
 80052d0:	f7fb fb3a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD213, 0x54);
 80052d4:	2154      	movs	r1, #84	@ 0x54
 80052d6:	f24d 2013 	movw	r0, #53779	@ 0xd213
 80052da:	f7fb fb35 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD214, 0x01);
 80052de:	2101      	movs	r1, #1
 80052e0:	f24d 2014 	movw	r0, #53780	@ 0xd214
 80052e4:	f7fb fb30 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD215, 0x82);
 80052e8:	2182      	movs	r1, #130	@ 0x82
 80052ea:	f24d 2015 	movw	r0, #53781	@ 0xd215
 80052ee:	f7fb fb2b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD216, 0x01);
 80052f2:	2101      	movs	r1, #1
 80052f4:	f24d 2016 	movw	r0, #53782	@ 0xd216
 80052f8:	f7fb fb26 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD217, 0xCA);
 80052fc:	21ca      	movs	r1, #202	@ 0xca
 80052fe:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8005302:	f7fb fb21 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD218, 0x02);
 8005306:	2102      	movs	r1, #2
 8005308:	f24d 2018 	movw	r0, #53784	@ 0xd218
 800530c:	f7fb fb1c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD219, 0x00);
 8005310:	2100      	movs	r1, #0
 8005312:	f24d 2019 	movw	r0, #53785	@ 0xd219
 8005316:	f7fb fb17 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD21A, 0x02);
 800531a:	2102      	movs	r1, #2
 800531c:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 8005320:	f7fb fb12 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD21B, 0x01);
 8005324:	2101      	movs	r1, #1
 8005326:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 800532a:	f7fb fb0d 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD21C, 0x02);
 800532e:	2102      	movs	r1, #2
 8005330:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 8005334:	f7fb fb08 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD21D, 0x34);
 8005338:	2134      	movs	r1, #52	@ 0x34
 800533a:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 800533e:	f7fb fb03 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD21E, 0x02);
 8005342:	2102      	movs	r1, #2
 8005344:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 8005348:	f7fb fafe 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD21F, 0x67);
 800534c:	2167      	movs	r1, #103	@ 0x67
 800534e:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 8005352:	f7fb faf9 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD220, 0x02);
 8005356:	2102      	movs	r1, #2
 8005358:	f24d 2020 	movw	r0, #53792	@ 0xd220
 800535c:	f7fb faf4 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD221, 0x84);
 8005360:	2184      	movs	r1, #132	@ 0x84
 8005362:	f24d 2021 	movw	r0, #53793	@ 0xd221
 8005366:	f7fb faef 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD222, 0x02);
 800536a:	2102      	movs	r1, #2
 800536c:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8005370:	f7fb faea 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD223, 0xA4);
 8005374:	21a4      	movs	r1, #164	@ 0xa4
 8005376:	f24d 2023 	movw	r0, #53795	@ 0xd223
 800537a:	f7fb fae5 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD224, 0x02);
 800537e:	2102      	movs	r1, #2
 8005380:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8005384:	f7fb fae0 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD225, 0xB7);
 8005388:	21b7      	movs	r1, #183	@ 0xb7
 800538a:	f24d 2025 	movw	r0, #53797	@ 0xd225
 800538e:	f7fb fadb 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD226, 0x02);
 8005392:	2102      	movs	r1, #2
 8005394:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8005398:	f7fb fad6 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD227, 0xCF);
 800539c:	21cf      	movs	r1, #207	@ 0xcf
 800539e:	f24d 2027 	movw	r0, #53799	@ 0xd227
 80053a2:	f7fb fad1 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD228, 0x02);
 80053a6:	2102      	movs	r1, #2
 80053a8:	f24d 2028 	movw	r0, #53800	@ 0xd228
 80053ac:	f7fb facc 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD229, 0xDE);
 80053b0:	21de      	movs	r1, #222	@ 0xde
 80053b2:	f24d 2029 	movw	r0, #53801	@ 0xd229
 80053b6:	f7fb fac7 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD22A, 0x02);
 80053ba:	2102      	movs	r1, #2
 80053bc:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 80053c0:	f7fb fac2 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD22B, 0xF2);
 80053c4:	21f2      	movs	r1, #242	@ 0xf2
 80053c6:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 80053ca:	f7fb fabd 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD22C, 0x02);
 80053ce:	2102      	movs	r1, #2
 80053d0:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 80053d4:	f7fb fab8 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD22D, 0xFE);
 80053d8:	21fe      	movs	r1, #254	@ 0xfe
 80053da:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 80053de:	f7fb fab3 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD22E, 0x03);
 80053e2:	2103      	movs	r1, #3
 80053e4:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 80053e8:	f7fb faae 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD22F, 0x10);
 80053ec:	2110      	movs	r1, #16
 80053ee:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 80053f2:	f7fb faa9 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD230, 0x03);
 80053f6:	2103      	movs	r1, #3
 80053f8:	f24d 2030 	movw	r0, #53808	@ 0xd230
 80053fc:	f7fb faa4 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD231, 0x33);
 8005400:	2133      	movs	r1, #51	@ 0x33
 8005402:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8005406:	f7fb fa9f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD232, 0x03);
 800540a:	2103      	movs	r1, #3
 800540c:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8005410:	f7fb fa9a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD233, 0x6D);
 8005414:	216d      	movs	r1, #109	@ 0x6d
 8005416:	f24d 2033 	movw	r0, #53811	@ 0xd233
 800541a:	f7fb fa95 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD300, 0x00);
 800541e:	2100      	movs	r1, #0
 8005420:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 8005424:	f7fb fa90 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD301, 0x33);
 8005428:	2133      	movs	r1, #51	@ 0x33
 800542a:	f24d 3001 	movw	r0, #54017	@ 0xd301
 800542e:	f7fb fa8b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD302, 0x00);
 8005432:	2100      	movs	r1, #0
 8005434:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8005438:	f7fb fa86 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD303, 0x34);
 800543c:	2134      	movs	r1, #52	@ 0x34
 800543e:	f24d 3003 	movw	r0, #54019	@ 0xd303
 8005442:	f7fb fa81 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD304, 0x00);
 8005446:	2100      	movs	r1, #0
 8005448:	f24d 3004 	movw	r0, #54020	@ 0xd304
 800544c:	f7fb fa7c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD305, 0x3A);
 8005450:	213a      	movs	r1, #58	@ 0x3a
 8005452:	f24d 3005 	movw	r0, #54021	@ 0xd305
 8005456:	f7fb fa77 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD306, 0x00);
 800545a:	2100      	movs	r1, #0
 800545c:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8005460:	f7fb fa72 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD307, 0x4A);
 8005464:	214a      	movs	r1, #74	@ 0x4a
 8005466:	f24d 3007 	movw	r0, #54023	@ 0xd307
 800546a:	f7fb fa6d 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD308, 0x00);
 800546e:	2100      	movs	r1, #0
 8005470:	f24d 3008 	movw	r0, #54024	@ 0xd308
 8005474:	f7fb fa68 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD309, 0x5C);
 8005478:	215c      	movs	r1, #92	@ 0x5c
 800547a:	f24d 3009 	movw	r0, #54025	@ 0xd309
 800547e:	f7fb fa63 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD30A, 0x00);
 8005482:	2100      	movs	r1, #0
 8005484:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8005488:	f7fb fa5e 	bl	8000948 <lcd_write_reg>

        lcd_write_reg(0xD30B, 0x81);
 800548c:	2181      	movs	r1, #129	@ 0x81
 800548e:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8005492:	f7fb fa59 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD30C, 0x00);
 8005496:	2100      	movs	r1, #0
 8005498:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 800549c:	f7fb fa54 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD30D, 0xA6);
 80054a0:	21a6      	movs	r1, #166	@ 0xa6
 80054a2:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 80054a6:	f7fb fa4f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD30E, 0x00);
 80054aa:	2100      	movs	r1, #0
 80054ac:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 80054b0:	f7fb fa4a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD30F, 0xE5);
 80054b4:	21e5      	movs	r1, #229	@ 0xe5
 80054b6:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 80054ba:	f7fb fa45 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD310, 0x01);
 80054be:	2101      	movs	r1, #1
 80054c0:	f24d 3010 	movw	r0, #54032	@ 0xd310
 80054c4:	f7fb fa40 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD311, 0x13);
 80054c8:	2113      	movs	r1, #19
 80054ca:	f24d 3011 	movw	r0, #54033	@ 0xd311
 80054ce:	f7fb fa3b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD312, 0x01);
 80054d2:	2101      	movs	r1, #1
 80054d4:	f24d 3012 	movw	r0, #54034	@ 0xd312
 80054d8:	f7fb fa36 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD313, 0x54);
 80054dc:	2154      	movs	r1, #84	@ 0x54
 80054de:	f24d 3013 	movw	r0, #54035	@ 0xd313
 80054e2:	f7fb fa31 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD314, 0x01);
 80054e6:	2101      	movs	r1, #1
 80054e8:	f24d 3014 	movw	r0, #54036	@ 0xd314
 80054ec:	f7fb fa2c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD315, 0x82);
 80054f0:	2182      	movs	r1, #130	@ 0x82
 80054f2:	f24d 3015 	movw	r0, #54037	@ 0xd315
 80054f6:	f7fb fa27 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD316, 0x01);
 80054fa:	2101      	movs	r1, #1
 80054fc:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8005500:	f7fb fa22 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD317, 0xCA);
 8005504:	21ca      	movs	r1, #202	@ 0xca
 8005506:	f24d 3017 	movw	r0, #54039	@ 0xd317
 800550a:	f7fb fa1d 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD318, 0x02);
 800550e:	2102      	movs	r1, #2
 8005510:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8005514:	f7fb fa18 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD319, 0x00);
 8005518:	2100      	movs	r1, #0
 800551a:	f24d 3019 	movw	r0, #54041	@ 0xd319
 800551e:	f7fb fa13 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD31A, 0x02);
 8005522:	2102      	movs	r1, #2
 8005524:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8005528:	f7fb fa0e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD31B, 0x01);
 800552c:	2101      	movs	r1, #1
 800552e:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 8005532:	f7fb fa09 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD31C, 0x02);
 8005536:	2102      	movs	r1, #2
 8005538:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 800553c:	f7fb fa04 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD31D, 0x34);
 8005540:	2134      	movs	r1, #52	@ 0x34
 8005542:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 8005546:	f7fb f9ff 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD31E, 0x02);
 800554a:	2102      	movs	r1, #2
 800554c:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 8005550:	f7fb f9fa 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD31F, 0x67);
 8005554:	2167      	movs	r1, #103	@ 0x67
 8005556:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 800555a:	f7fb f9f5 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD320, 0x02);
 800555e:	2102      	movs	r1, #2
 8005560:	f24d 3020 	movw	r0, #54048	@ 0xd320
 8005564:	f7fb f9f0 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD321, 0x84);
 8005568:	2184      	movs	r1, #132	@ 0x84
 800556a:	f24d 3021 	movw	r0, #54049	@ 0xd321
 800556e:	f7fb f9eb 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD322, 0x02);
 8005572:	2102      	movs	r1, #2
 8005574:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8005578:	f7fb f9e6 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD323, 0xA4);
 800557c:	21a4      	movs	r1, #164	@ 0xa4
 800557e:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8005582:	f7fb f9e1 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD324, 0x02);
 8005586:	2102      	movs	r1, #2
 8005588:	f24d 3024 	movw	r0, #54052	@ 0xd324
 800558c:	f7fb f9dc 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD325, 0xB7);
 8005590:	21b7      	movs	r1, #183	@ 0xb7
 8005592:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8005596:	f7fb f9d7 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD326, 0x02);
 800559a:	2102      	movs	r1, #2
 800559c:	f24d 3026 	movw	r0, #54054	@ 0xd326
 80055a0:	f7fb f9d2 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD327, 0xCF);
 80055a4:	21cf      	movs	r1, #207	@ 0xcf
 80055a6:	f24d 3027 	movw	r0, #54055	@ 0xd327
 80055aa:	f7fb f9cd 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD328, 0x02);
 80055ae:	2102      	movs	r1, #2
 80055b0:	f24d 3028 	movw	r0, #54056	@ 0xd328
 80055b4:	f7fb f9c8 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD329, 0xDE);
 80055b8:	21de      	movs	r1, #222	@ 0xde
 80055ba:	f24d 3029 	movw	r0, #54057	@ 0xd329
 80055be:	f7fb f9c3 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD32A, 0x02);
 80055c2:	2102      	movs	r1, #2
 80055c4:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 80055c8:	f7fb f9be 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD32B, 0xF2);
 80055cc:	21f2      	movs	r1, #242	@ 0xf2
 80055ce:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 80055d2:	f7fb f9b9 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD32C, 0x02);
 80055d6:	2102      	movs	r1, #2
 80055d8:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 80055dc:	f7fb f9b4 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD32D, 0xFE);
 80055e0:	21fe      	movs	r1, #254	@ 0xfe
 80055e2:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 80055e6:	f7fb f9af 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD32E, 0x03);
 80055ea:	2103      	movs	r1, #3
 80055ec:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 80055f0:	f7fb f9aa 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD32F, 0x10);
 80055f4:	2110      	movs	r1, #16
 80055f6:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 80055fa:	f7fb f9a5 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD330, 0x03);
 80055fe:	2103      	movs	r1, #3
 8005600:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8005604:	f7fb f9a0 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD331, 0x33);
 8005608:	2133      	movs	r1, #51	@ 0x33
 800560a:	f24d 3031 	movw	r0, #54065	@ 0xd331
 800560e:	f7fb f99b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD332, 0x03);
 8005612:	2103      	movs	r1, #3
 8005614:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8005618:	f7fb f996 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD333, 0x6D);
 800561c:	216d      	movs	r1, #109	@ 0x6d
 800561e:	f24d 3033 	movw	r0, #54067	@ 0xd333
 8005622:	f7fb f991 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD400, 0x00);
 8005626:	2100      	movs	r1, #0
 8005628:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 800562c:	f7fb f98c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD401, 0x33);
 8005630:	2133      	movs	r1, #51	@ 0x33
 8005632:	f24d 4001 	movw	r0, #54273	@ 0xd401
 8005636:	f7fb f987 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD402, 0x00);
 800563a:	2100      	movs	r1, #0
 800563c:	f24d 4002 	movw	r0, #54274	@ 0xd402
 8005640:	f7fb f982 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD403, 0x34);
 8005644:	2134      	movs	r1, #52	@ 0x34
 8005646:	f24d 4003 	movw	r0, #54275	@ 0xd403
 800564a:	f7fb f97d 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD404, 0x00);
 800564e:	2100      	movs	r1, #0
 8005650:	f24d 4004 	movw	r0, #54276	@ 0xd404
 8005654:	f7fb f978 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD405, 0x3A);
 8005658:	213a      	movs	r1, #58	@ 0x3a
 800565a:	f24d 4005 	movw	r0, #54277	@ 0xd405
 800565e:	f7fb f973 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD406, 0x00);
 8005662:	2100      	movs	r1, #0
 8005664:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8005668:	f7fb f96e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD407, 0x4A);
 800566c:	214a      	movs	r1, #74	@ 0x4a
 800566e:	f24d 4007 	movw	r0, #54279	@ 0xd407
 8005672:	f7fb f969 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD408, 0x00);
 8005676:	2100      	movs	r1, #0
 8005678:	f24d 4008 	movw	r0, #54280	@ 0xd408
 800567c:	f7fb f964 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD409, 0x5C);
 8005680:	215c      	movs	r1, #92	@ 0x5c
 8005682:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8005686:	f7fb f95f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD40A, 0x00);
 800568a:	2100      	movs	r1, #0
 800568c:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8005690:	f7fb f95a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD40B, 0x81);
 8005694:	2181      	movs	r1, #129	@ 0x81
 8005696:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 800569a:	f7fb f955 	bl	8000948 <lcd_write_reg>

        lcd_write_reg(0xD40C, 0x00);
 800569e:	2100      	movs	r1, #0
 80056a0:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 80056a4:	f7fb f950 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD40D, 0xA6);
 80056a8:	21a6      	movs	r1, #166	@ 0xa6
 80056aa:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 80056ae:	f7fb f94b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD40E, 0x00);
 80056b2:	2100      	movs	r1, #0
 80056b4:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 80056b8:	f7fb f946 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD40F, 0xE5);
 80056bc:	21e5      	movs	r1, #229	@ 0xe5
 80056be:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 80056c2:	f7fb f941 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD410, 0x01);
 80056c6:	2101      	movs	r1, #1
 80056c8:	f24d 4010 	movw	r0, #54288	@ 0xd410
 80056cc:	f7fb f93c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD411, 0x13);
 80056d0:	2113      	movs	r1, #19
 80056d2:	f24d 4011 	movw	r0, #54289	@ 0xd411
 80056d6:	f7fb f937 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD412, 0x01);
 80056da:	2101      	movs	r1, #1
 80056dc:	f24d 4012 	movw	r0, #54290	@ 0xd412
 80056e0:	f7fb f932 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD413, 0x54);
 80056e4:	2154      	movs	r1, #84	@ 0x54
 80056e6:	f24d 4013 	movw	r0, #54291	@ 0xd413
 80056ea:	f7fb f92d 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD414, 0x01);
 80056ee:	2101      	movs	r1, #1
 80056f0:	f24d 4014 	movw	r0, #54292	@ 0xd414
 80056f4:	f7fb f928 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD415, 0x82);
 80056f8:	2182      	movs	r1, #130	@ 0x82
 80056fa:	f24d 4015 	movw	r0, #54293	@ 0xd415
 80056fe:	f7fb f923 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD416, 0x01);
 8005702:	2101      	movs	r1, #1
 8005704:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8005708:	f7fb f91e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD417, 0xCA);
 800570c:	21ca      	movs	r1, #202	@ 0xca
 800570e:	f24d 4017 	movw	r0, #54295	@ 0xd417
 8005712:	f7fb f919 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD418, 0x02);
 8005716:	2102      	movs	r1, #2
 8005718:	f24d 4018 	movw	r0, #54296	@ 0xd418
 800571c:	f7fb f914 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD419, 0x00);
 8005720:	2100      	movs	r1, #0
 8005722:	f24d 4019 	movw	r0, #54297	@ 0xd419
 8005726:	f7fb f90f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD41A, 0x02);
 800572a:	2102      	movs	r1, #2
 800572c:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 8005730:	f7fb f90a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD41B, 0x01);
 8005734:	2101      	movs	r1, #1
 8005736:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 800573a:	f7fb f905 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD41C, 0x02);
 800573e:	2102      	movs	r1, #2
 8005740:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 8005744:	f7fb f900 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD41D, 0x34);
 8005748:	2134      	movs	r1, #52	@ 0x34
 800574a:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 800574e:	f7fb f8fb 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD41E, 0x02);
 8005752:	2102      	movs	r1, #2
 8005754:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 8005758:	f7fb f8f6 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD41F, 0x67);
 800575c:	2167      	movs	r1, #103	@ 0x67
 800575e:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 8005762:	f7fb f8f1 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD420, 0x02);
 8005766:	2102      	movs	r1, #2
 8005768:	f24d 4020 	movw	r0, #54304	@ 0xd420
 800576c:	f7fb f8ec 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD421, 0x84);
 8005770:	2184      	movs	r1, #132	@ 0x84
 8005772:	f24d 4021 	movw	r0, #54305	@ 0xd421
 8005776:	f7fb f8e7 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD422, 0x02);
 800577a:	2102      	movs	r1, #2
 800577c:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8005780:	f7fb f8e2 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD423, 0xA4);
 8005784:	21a4      	movs	r1, #164	@ 0xa4
 8005786:	f24d 4023 	movw	r0, #54307	@ 0xd423
 800578a:	f7fb f8dd 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD424, 0x02);
 800578e:	2102      	movs	r1, #2
 8005790:	f24d 4024 	movw	r0, #54308	@ 0xd424
 8005794:	f7fb f8d8 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD425, 0xB7);
 8005798:	21b7      	movs	r1, #183	@ 0xb7
 800579a:	f24d 4025 	movw	r0, #54309	@ 0xd425
 800579e:	f7fb f8d3 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD426, 0x02);
 80057a2:	2102      	movs	r1, #2
 80057a4:	f24d 4026 	movw	r0, #54310	@ 0xd426
 80057a8:	f7fb f8ce 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD427, 0xCF);
 80057ac:	21cf      	movs	r1, #207	@ 0xcf
 80057ae:	f24d 4027 	movw	r0, #54311	@ 0xd427
 80057b2:	f7fb f8c9 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD428, 0x02);
 80057b6:	2102      	movs	r1, #2
 80057b8:	f24d 4028 	movw	r0, #54312	@ 0xd428
 80057bc:	f7fb f8c4 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD429, 0xDE);
 80057c0:	21de      	movs	r1, #222	@ 0xde
 80057c2:	f24d 4029 	movw	r0, #54313	@ 0xd429
 80057c6:	f7fb f8bf 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD42A, 0x02);
 80057ca:	2102      	movs	r1, #2
 80057cc:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 80057d0:	f7fb f8ba 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD42B, 0xF2);
 80057d4:	21f2      	movs	r1, #242	@ 0xf2
 80057d6:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 80057da:	f7fb f8b5 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD42C, 0x02);
 80057de:	2102      	movs	r1, #2
 80057e0:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 80057e4:	f7fb f8b0 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD42D, 0xFE);
 80057e8:	21fe      	movs	r1, #254	@ 0xfe
 80057ea:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 80057ee:	f7fb f8ab 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD42E, 0x03);
 80057f2:	2103      	movs	r1, #3
 80057f4:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 80057f8:	f7fb f8a6 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD42F, 0x10);
 80057fc:	2110      	movs	r1, #16
 80057fe:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8005802:	f7fb f8a1 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD430, 0x03);
 8005806:	2103      	movs	r1, #3
 8005808:	f24d 4030 	movw	r0, #54320	@ 0xd430
 800580c:	f7fb f89c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD431, 0x33);
 8005810:	2133      	movs	r1, #51	@ 0x33
 8005812:	f24d 4031 	movw	r0, #54321	@ 0xd431
 8005816:	f7fb f897 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD432, 0x03);
 800581a:	2103      	movs	r1, #3
 800581c:	f24d 4032 	movw	r0, #54322	@ 0xd432
 8005820:	f7fb f892 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD433, 0x6D);
 8005824:	216d      	movs	r1, #109	@ 0x6d
 8005826:	f24d 4033 	movw	r0, #54323	@ 0xd433
 800582a:	f7fb f88d 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD500, 0x00);
 800582e:	2100      	movs	r1, #0
 8005830:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 8005834:	f7fb f888 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD501, 0x33);
 8005838:	2133      	movs	r1, #51	@ 0x33
 800583a:	f24d 5001 	movw	r0, #54529	@ 0xd501
 800583e:	f7fb f883 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD502, 0x00);
 8005842:	2100      	movs	r1, #0
 8005844:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8005848:	f7fb f87e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD503, 0x34);
 800584c:	2134      	movs	r1, #52	@ 0x34
 800584e:	f24d 5003 	movw	r0, #54531	@ 0xd503
 8005852:	f7fb f879 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD504, 0x00);
 8005856:	2100      	movs	r1, #0
 8005858:	f24d 5004 	movw	r0, #54532	@ 0xd504
 800585c:	f7fb f874 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD505, 0x3A);
 8005860:	213a      	movs	r1, #58	@ 0x3a
 8005862:	f24d 5005 	movw	r0, #54533	@ 0xd505
 8005866:	f7fb f86f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD506, 0x00);
 800586a:	2100      	movs	r1, #0
 800586c:	f24d 5006 	movw	r0, #54534	@ 0xd506
 8005870:	f7fb f86a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD507, 0x4A);
 8005874:	214a      	movs	r1, #74	@ 0x4a
 8005876:	f24d 5007 	movw	r0, #54535	@ 0xd507
 800587a:	f7fb f865 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD508, 0x00);
 800587e:	2100      	movs	r1, #0
 8005880:	f24d 5008 	movw	r0, #54536	@ 0xd508
 8005884:	f7fb f860 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD509, 0x5C);
 8005888:	215c      	movs	r1, #92	@ 0x5c
 800588a:	f24d 5009 	movw	r0, #54537	@ 0xd509
 800588e:	f7fb f85b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD50A, 0x00);
 8005892:	2100      	movs	r1, #0
 8005894:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8005898:	f7fb f856 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD50B, 0x81);
 800589c:	2181      	movs	r1, #129	@ 0x81
 800589e:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 80058a2:	f7fb f851 	bl	8000948 <lcd_write_reg>

        lcd_write_reg(0xD50C, 0x00);
 80058a6:	2100      	movs	r1, #0
 80058a8:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 80058ac:	f7fb f84c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD50D, 0xA6);
 80058b0:	21a6      	movs	r1, #166	@ 0xa6
 80058b2:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 80058b6:	f7fb f847 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD50E, 0x00);
 80058ba:	2100      	movs	r1, #0
 80058bc:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 80058c0:	f7fb f842 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD50F, 0xE5);
 80058c4:	21e5      	movs	r1, #229	@ 0xe5
 80058c6:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 80058ca:	f7fb f83d 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD510, 0x01);
 80058ce:	2101      	movs	r1, #1
 80058d0:	f24d 5010 	movw	r0, #54544	@ 0xd510
 80058d4:	f7fb f838 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD511, 0x13);
 80058d8:	2113      	movs	r1, #19
 80058da:	f24d 5011 	movw	r0, #54545	@ 0xd511
 80058de:	f7fb f833 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD512, 0x01);
 80058e2:	2101      	movs	r1, #1
 80058e4:	f24d 5012 	movw	r0, #54546	@ 0xd512
 80058e8:	f7fb f82e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD513, 0x54);
 80058ec:	2154      	movs	r1, #84	@ 0x54
 80058ee:	f24d 5013 	movw	r0, #54547	@ 0xd513
 80058f2:	f7fb f829 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD514, 0x01);
 80058f6:	2101      	movs	r1, #1
 80058f8:	f24d 5014 	movw	r0, #54548	@ 0xd514
 80058fc:	f7fb f824 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD515, 0x82);
 8005900:	2182      	movs	r1, #130	@ 0x82
 8005902:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8005906:	f7fb f81f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD516, 0x01);
 800590a:	2101      	movs	r1, #1
 800590c:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8005910:	f7fb f81a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD517, 0xCA);
 8005914:	21ca      	movs	r1, #202	@ 0xca
 8005916:	f24d 5017 	movw	r0, #54551	@ 0xd517
 800591a:	f7fb f815 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD518, 0x02);
 800591e:	2102      	movs	r1, #2
 8005920:	f24d 5018 	movw	r0, #54552	@ 0xd518
 8005924:	f7fb f810 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD519, 0x00);
 8005928:	2100      	movs	r1, #0
 800592a:	f24d 5019 	movw	r0, #54553	@ 0xd519
 800592e:	f7fb f80b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD51A, 0x02);
 8005932:	2102      	movs	r1, #2
 8005934:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8005938:	f7fb f806 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD51B, 0x01);
 800593c:	2101      	movs	r1, #1
 800593e:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 8005942:	f7fb f801 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD51C, 0x02);
 8005946:	2102      	movs	r1, #2
 8005948:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 800594c:	f7fa fffc 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD51D, 0x34);
 8005950:	2134      	movs	r1, #52	@ 0x34
 8005952:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 8005956:	f7fa fff7 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD51E, 0x02);
 800595a:	2102      	movs	r1, #2
 800595c:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 8005960:	f7fa fff2 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD51F, 0x67);
 8005964:	2167      	movs	r1, #103	@ 0x67
 8005966:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 800596a:	f7fa ffed 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD520, 0x02);
 800596e:	2102      	movs	r1, #2
 8005970:	f24d 5020 	movw	r0, #54560	@ 0xd520
 8005974:	f7fa ffe8 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD521, 0x84);
 8005978:	2184      	movs	r1, #132	@ 0x84
 800597a:	f24d 5021 	movw	r0, #54561	@ 0xd521
 800597e:	f7fa ffe3 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD522, 0x02);
 8005982:	2102      	movs	r1, #2
 8005984:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8005988:	f7fa ffde 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD523, 0xA4);
 800598c:	21a4      	movs	r1, #164	@ 0xa4
 800598e:	f24d 5023 	movw	r0, #54563	@ 0xd523
 8005992:	f7fa ffd9 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD524, 0x02);
 8005996:	2102      	movs	r1, #2
 8005998:	f24d 5024 	movw	r0, #54564	@ 0xd524
 800599c:	f7fa ffd4 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD525, 0xB7);
 80059a0:	21b7      	movs	r1, #183	@ 0xb7
 80059a2:	f24d 5025 	movw	r0, #54565	@ 0xd525
 80059a6:	f7fa ffcf 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD526, 0x02);
 80059aa:	2102      	movs	r1, #2
 80059ac:	f24d 5026 	movw	r0, #54566	@ 0xd526
 80059b0:	f7fa ffca 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD527, 0xCF);
 80059b4:	21cf      	movs	r1, #207	@ 0xcf
 80059b6:	f24d 5027 	movw	r0, #54567	@ 0xd527
 80059ba:	f7fa ffc5 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD528, 0x02);
 80059be:	2102      	movs	r1, #2
 80059c0:	f24d 5028 	movw	r0, #54568	@ 0xd528
 80059c4:	f7fa ffc0 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD529, 0xDE);
 80059c8:	21de      	movs	r1, #222	@ 0xde
 80059ca:	f24d 5029 	movw	r0, #54569	@ 0xd529
 80059ce:	f7fa ffbb 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD52A, 0x02);
 80059d2:	2102      	movs	r1, #2
 80059d4:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 80059d8:	f7fa ffb6 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD52B, 0xF2);
 80059dc:	21f2      	movs	r1, #242	@ 0xf2
 80059de:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 80059e2:	f7fa ffb1 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD52C, 0x02);
 80059e6:	2102      	movs	r1, #2
 80059e8:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 80059ec:	f7fa ffac 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD52D, 0xFE);
 80059f0:	21fe      	movs	r1, #254	@ 0xfe
 80059f2:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 80059f6:	f7fa ffa7 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD52E, 0x03);
 80059fa:	2103      	movs	r1, #3
 80059fc:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8005a00:	f7fa ffa2 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD52F, 0x10);
 8005a04:	2110      	movs	r1, #16
 8005a06:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8005a0a:	f7fa ff9d 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD530, 0x03);
 8005a0e:	2103      	movs	r1, #3
 8005a10:	f24d 5030 	movw	r0, #54576	@ 0xd530
 8005a14:	f7fa ff98 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD531, 0x33);
 8005a18:	2133      	movs	r1, #51	@ 0x33
 8005a1a:	f24d 5031 	movw	r0, #54577	@ 0xd531
 8005a1e:	f7fa ff93 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD532, 0x03);
 8005a22:	2103      	movs	r1, #3
 8005a24:	f24d 5032 	movw	r0, #54578	@ 0xd532
 8005a28:	f7fa ff8e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD533, 0x6D);
 8005a2c:	216d      	movs	r1, #109	@ 0x6d
 8005a2e:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8005a32:	f7fa ff89 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD600, 0x00);
 8005a36:	2100      	movs	r1, #0
 8005a38:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8005a3c:	f7fa ff84 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD601, 0x33);
 8005a40:	2133      	movs	r1, #51	@ 0x33
 8005a42:	f24d 6001 	movw	r0, #54785	@ 0xd601
 8005a46:	f7fa ff7f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD602, 0x00);
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8005a50:	f7fa ff7a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD603, 0x34);
 8005a54:	2134      	movs	r1, #52	@ 0x34
 8005a56:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8005a5a:	f7fa ff75 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD604, 0x00);
 8005a5e:	2100      	movs	r1, #0
 8005a60:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8005a64:	f7fa ff70 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD605, 0x3A);
 8005a68:	213a      	movs	r1, #58	@ 0x3a
 8005a6a:	f24d 6005 	movw	r0, #54789	@ 0xd605
 8005a6e:	f7fa ff6b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD606, 0x00);
 8005a72:	2100      	movs	r1, #0
 8005a74:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8005a78:	f7fa ff66 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD607, 0x4A);
 8005a7c:	214a      	movs	r1, #74	@ 0x4a
 8005a7e:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8005a82:	f7fa ff61 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD608, 0x00);
 8005a86:	2100      	movs	r1, #0
 8005a88:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8005a8c:	f7fa ff5c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD609, 0x5C);
 8005a90:	215c      	movs	r1, #92	@ 0x5c
 8005a92:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8005a96:	f7fa ff57 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD60A, 0x00);
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8005aa0:	f7fa ff52 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD60B, 0x81);
 8005aa4:	2181      	movs	r1, #129	@ 0x81
 8005aa6:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8005aaa:	f7fa ff4d 	bl	8000948 <lcd_write_reg>

        lcd_write_reg(0xD60C, 0x00);
 8005aae:	2100      	movs	r1, #0
 8005ab0:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 8005ab4:	f7fa ff48 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD60D, 0xA6);
 8005ab8:	21a6      	movs	r1, #166	@ 0xa6
 8005aba:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8005abe:	f7fa ff43 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD60E, 0x00);
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 8005ac8:	f7fa ff3e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD60F, 0xE5);
 8005acc:	21e5      	movs	r1, #229	@ 0xe5
 8005ace:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8005ad2:	f7fa ff39 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD610, 0x01);
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8005adc:	f7fa ff34 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD611, 0x13);
 8005ae0:	2113      	movs	r1, #19
 8005ae2:	f24d 6011 	movw	r0, #54801	@ 0xd611
 8005ae6:	f7fa ff2f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD612, 0x01);
 8005aea:	2101      	movs	r1, #1
 8005aec:	f24d 6012 	movw	r0, #54802	@ 0xd612
 8005af0:	f7fa ff2a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD613, 0x54);
 8005af4:	2154      	movs	r1, #84	@ 0x54
 8005af6:	f24d 6013 	movw	r0, #54803	@ 0xd613
 8005afa:	f7fa ff25 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD614, 0x01);
 8005afe:	2101      	movs	r1, #1
 8005b00:	f24d 6014 	movw	r0, #54804	@ 0xd614
 8005b04:	f7fa ff20 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD615, 0x82);
 8005b08:	2182      	movs	r1, #130	@ 0x82
 8005b0a:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8005b0e:	f7fa ff1b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD616, 0x01);
 8005b12:	2101      	movs	r1, #1
 8005b14:	f24d 6016 	movw	r0, #54806	@ 0xd616
 8005b18:	f7fa ff16 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD617, 0xCA);
 8005b1c:	21ca      	movs	r1, #202	@ 0xca
 8005b1e:	f24d 6017 	movw	r0, #54807	@ 0xd617
 8005b22:	f7fa ff11 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD618, 0x02);
 8005b26:	2102      	movs	r1, #2
 8005b28:	f24d 6018 	movw	r0, #54808	@ 0xd618
 8005b2c:	f7fa ff0c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD619, 0x00);
 8005b30:	2100      	movs	r1, #0
 8005b32:	f24d 6019 	movw	r0, #54809	@ 0xd619
 8005b36:	f7fa ff07 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD61A, 0x02);
 8005b3a:	2102      	movs	r1, #2
 8005b3c:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8005b40:	f7fa ff02 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD61B, 0x01);
 8005b44:	2101      	movs	r1, #1
 8005b46:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 8005b4a:	f7fa fefd 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD61C, 0x02);
 8005b4e:	2102      	movs	r1, #2
 8005b50:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8005b54:	f7fa fef8 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD61D, 0x34);
 8005b58:	2134      	movs	r1, #52	@ 0x34
 8005b5a:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 8005b5e:	f7fa fef3 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD61E, 0x02);
 8005b62:	2102      	movs	r1, #2
 8005b64:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8005b68:	f7fa feee 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD61F, 0x67);
 8005b6c:	2167      	movs	r1, #103	@ 0x67
 8005b6e:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 8005b72:	f7fa fee9 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD620, 0x02);
 8005b76:	2102      	movs	r1, #2
 8005b78:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8005b7c:	f7fa fee4 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD621, 0x84);
 8005b80:	2184      	movs	r1, #132	@ 0x84
 8005b82:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8005b86:	f7fa fedf 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD622, 0x02);
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8005b90:	f7fa feda 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD623, 0xA4);
 8005b94:	21a4      	movs	r1, #164	@ 0xa4
 8005b96:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8005b9a:	f7fa fed5 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD624, 0x02);
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	f24d 6024 	movw	r0, #54820	@ 0xd624
 8005ba4:	f7fa fed0 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD625, 0xB7);
 8005ba8:	21b7      	movs	r1, #183	@ 0xb7
 8005baa:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8005bae:	f7fa fecb 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD626, 0x02);
 8005bb2:	2102      	movs	r1, #2
 8005bb4:	f24d 6026 	movw	r0, #54822	@ 0xd626
 8005bb8:	f7fa fec6 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD627, 0xCF);
 8005bbc:	21cf      	movs	r1, #207	@ 0xcf
 8005bbe:	f24d 6027 	movw	r0, #54823	@ 0xd627
 8005bc2:	f7fa fec1 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD628, 0x02);
 8005bc6:	2102      	movs	r1, #2
 8005bc8:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8005bcc:	f7fa febc 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD629, 0xDE);
 8005bd0:	21de      	movs	r1, #222	@ 0xde
 8005bd2:	f24d 6029 	movw	r0, #54825	@ 0xd629
 8005bd6:	f7fa feb7 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD62A, 0x02);
 8005bda:	2102      	movs	r1, #2
 8005bdc:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8005be0:	f7fa feb2 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD62B, 0xF2);
 8005be4:	21f2      	movs	r1, #242	@ 0xf2
 8005be6:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 8005bea:	f7fa fead 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD62C, 0x02);
 8005bee:	2102      	movs	r1, #2
 8005bf0:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 8005bf4:	f7fa fea8 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD62D, 0xFE);
 8005bf8:	21fe      	movs	r1, #254	@ 0xfe
 8005bfa:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8005bfe:	f7fa fea3 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD62E, 0x03);
 8005c02:	2103      	movs	r1, #3
 8005c04:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 8005c08:	f7fa fe9e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD62F, 0x10);
 8005c0c:	2110      	movs	r1, #16
 8005c0e:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8005c12:	f7fa fe99 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD630, 0x03);
 8005c16:	2103      	movs	r1, #3
 8005c18:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8005c1c:	f7fa fe94 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD631, 0x33);
 8005c20:	2133      	movs	r1, #51	@ 0x33
 8005c22:	f24d 6031 	movw	r0, #54833	@ 0xd631
 8005c26:	f7fa fe8f 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD632, 0x03);
 8005c2a:	2103      	movs	r1, #3
 8005c2c:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8005c30:	f7fa fe8a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xD633, 0x6D);
 8005c34:	216d      	movs	r1, #109	@ 0x6d
 8005c36:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8005c3a:	f7fa fe85 	bl	8000948 <lcd_write_reg>
        /* LV2 Page 0 enable */
        lcd_write_reg(0xF000, 0x55);
 8005c3e:	2155      	movs	r1, #85	@ 0x55
 8005c40:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8005c44:	f7fa fe80 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8005c48:	21aa      	movs	r1, #170	@ 0xaa
 8005c4a:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8005c4e:	f7fa fe7b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8005c52:	2152      	movs	r1, #82	@ 0x52
 8005c54:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8005c58:	f7fa fe76 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 8005c5c:	2108      	movs	r1, #8
 8005c5e:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8005c62:	f7fa fe71 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x00);
 8005c66:	2100      	movs	r1, #0
 8005c68:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8005c6c:	f7fa fe6c 	bl	8000948 <lcd_write_reg>
        /* Display control */
        lcd_write_reg(0xB100, 0xCC);
 8005c70:	21cc      	movs	r1, #204	@ 0xcc
 8005c72:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8005c76:	f7fa fe67 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x00);
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8005c80:	f7fa fe62 	bl	8000948 <lcd_write_reg>
        /* Source hold time */
        lcd_write_reg(0xB600, 0x05);
 8005c84:	2105      	movs	r1, #5
 8005c86:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8005c8a:	f7fa fe5d 	bl	8000948 <lcd_write_reg>
        /* Gate EQ control */
        lcd_write_reg(0xB700, 0x70);
 8005c8e:	2170      	movs	r1, #112	@ 0x70
 8005c90:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8005c94:	f7fa fe58 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x70);
 8005c98:	2170      	movs	r1, #112	@ 0x70
 8005c9a:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8005c9e:	f7fa fe53 	bl	8000948 <lcd_write_reg>
        /* Source EQ control (Mode 2) */
        lcd_write_reg(0xB800, 0x01);
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8005ca8:	f7fa fe4e 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x03);
 8005cac:	2103      	movs	r1, #3
 8005cae:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8005cb2:	f7fa fe49 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x03);
 8005cb6:	2103      	movs	r1, #3
 8005cb8:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8005cbc:	f7fa fe44 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xB803, 0x03);
 8005cc0:	2103      	movs	r1, #3
 8005cc2:	f64b 0003 	movw	r0, #47107	@ 0xb803
 8005cc6:	f7fa fe3f 	bl	8000948 <lcd_write_reg>
        /* Inversion mode (2-dot) */
        lcd_write_reg(0xBC00, 0x02);
 8005cca:	2102      	movs	r1, #2
 8005ccc:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8005cd0:	f7fa fe3a 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x00);
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8005cda:	f7fa fe35 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 8005cde:	2100      	movs	r1, #0
 8005ce0:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8005ce4:	f7fa fe30 	bl	8000948 <lcd_write_reg>
        /* Timing control 4H w/ 4-delay */
        lcd_write_reg(0xC900, 0xD0);
 8005ce8:	21d0      	movs	r1, #208	@ 0xd0
 8005cea:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 8005cee:	f7fa fe2b 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xC901, 0x02);
 8005cf2:	2102      	movs	r1, #2
 8005cf4:	f64c 1001 	movw	r0, #51457	@ 0xc901
 8005cf8:	f7fa fe26 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xC902, 0x50);
 8005cfc:	2150      	movs	r1, #80	@ 0x50
 8005cfe:	f64c 1002 	movw	r0, #51458	@ 0xc902
 8005d02:	f7fa fe21 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xC903, 0x50);
 8005d06:	2150      	movs	r1, #80	@ 0x50
 8005d08:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8005d0c:	f7fa fe1c 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0xC904, 0x50);
 8005d10:	2150      	movs	r1, #80	@ 0x50
 8005d12:	f64c 1004 	movw	r0, #51460	@ 0xc904
 8005d16:	f7fa fe17 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0x3500, 0x00);
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 8005d20:	f7fa fe12 	bl	8000948 <lcd_write_reg>
        lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8005d24:	2155      	movs	r1, #85	@ 0x55
 8005d26:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 8005d2a:	f7fa fe0d 	bl	8000948 <lcd_write_reg>
 8005d2e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8005d32:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005d36:	4b1b      	ldr	r3, [pc, #108]	@ (8005da4 <lcd_init+0x422c>)
 8005d38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d3c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005d3e:	4b19      	ldr	r3, [pc, #100]	@ (8005da4 <lcd_init+0x422c>)
 8005d40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005d44:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005d46:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	4b16      	ldr	r3, [pc, #88]	@ (8005da8 <lcd_init+0x4230>)
 8005d4e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005d50:	4b14      	ldr	r3, [pc, #80]	@ (8005da4 <lcd_init+0x422c>)
 8005d52:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005d56:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005d58:	4b12      	ldr	r3, [pc, #72]	@ (8005da4 <lcd_init+0x422c>)
 8005d5a:	2280      	movs	r2, #128	@ 0x80
 8005d5c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005d5e:	4b11      	ldr	r3, [pc, #68]	@ (8005da4 <lcd_init+0x422c>)
 8005d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d64:	611a      	str	r2, [r3, #16]
}
 8005d66:	bf00      	nop
 8005d68:	f44f 5324 	mov.w	r3, #10496	@ 0x2900
 8005d6c:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005d70:	4b0c      	ldr	r3, [pc, #48]	@ (8005da4 <lcd_init+0x422c>)
 8005d72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d76:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005d78:	4b0a      	ldr	r3, [pc, #40]	@ (8005da4 <lcd_init+0x422c>)
 8005d7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005d7e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005d80:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	4b08      	ldr	r3, [pc, #32]	@ (8005da8 <lcd_init+0x4230>)
 8005d88:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005d8a:	4b06      	ldr	r3, [pc, #24]	@ (8005da4 <lcd_init+0x422c>)
 8005d8c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005d90:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005d92:	4b04      	ldr	r3, [pc, #16]	@ (8005da4 <lcd_init+0x422c>)
 8005d94:	2280      	movs	r2, #128	@ 0x80
 8005d96:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005d98:	4b02      	ldr	r3, [pc, #8]	@ (8005da4 <lcd_init+0x422c>)
 8005d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d9e:	611a      	str	r2, [r3, #16]
}
 8005da0:	f000 be33 	b.w	8006a0a <lcd_init+0x4e92>
 8005da4:	40011000 	.word	0x40011000
 8005da8:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x1100);
        //delay_us(120);
        lcd_wr_regno(0x2900);
    }
    else if (lcddev.id == 0x9806)
 8005dac:	4bc3      	ldr	r3, [pc, #780]	@ (80060bc <lcd_init+0x4544>)
 8005dae:	889b      	ldrh	r3, [r3, #4]
 8005db0:	f649 0206 	movw	r2, #38918	@ 0x9806
 8005db4:	4293      	cmp	r3, r2
 8005db6:	f040 8407 	bne.w	80065c8 <lcd_init+0x4a50>
 8005dba:	23ff      	movs	r3, #255	@ 0xff
 8005dbc:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005dc0:	4bbf      	ldr	r3, [pc, #764]	@ (80060c0 <lcd_init+0x4548>)
 8005dc2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005dc6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005dc8:	4bbd      	ldr	r3, [pc, #756]	@ (80060c0 <lcd_init+0x4548>)
 8005dca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005dce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005dd0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	4bbb      	ldr	r3, [pc, #748]	@ (80060c4 <lcd_init+0x454c>)
 8005dd8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005dda:	4bb9      	ldr	r3, [pc, #740]	@ (80060c0 <lcd_init+0x4548>)
 8005ddc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005de0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005de2:	4bb7      	ldr	r3, [pc, #732]	@ (80060c0 <lcd_init+0x4548>)
 8005de4:	2280      	movs	r2, #128	@ 0x80
 8005de6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005de8:	4bb5      	ldr	r3, [pc, #724]	@ (80060c0 <lcd_init+0x4548>)
 8005dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dee:	611a      	str	r2, [r3, #16]
}
 8005df0:	bf00      	nop
    {
       // lcd_ex_ili9806_reginit();   /* ִ��ILI9806��ʼ�� */
        lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
        lcd_wr_xdata(0xFF);
 8005df2:	20ff      	movs	r0, #255	@ 0xff
 8005df4:	f7fa fd84 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x98);
 8005df8:	2098      	movs	r0, #152	@ 0x98
 8005dfa:	f7fa fd81 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8005dfe:	2006      	movs	r0, #6
 8005e00:	f7fa fd7e 	bl	8000900 <lcd_wr_xdata>
 8005e04:	23bc      	movs	r3, #188	@ 0xbc
 8005e06:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005e0a:	4bad      	ldr	r3, [pc, #692]	@ (80060c0 <lcd_init+0x4548>)
 8005e0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e10:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005e12:	4bab      	ldr	r3, [pc, #684]	@ (80060c0 <lcd_init+0x4548>)
 8005e14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e18:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005e1a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	4ba8      	ldr	r3, [pc, #672]	@ (80060c4 <lcd_init+0x454c>)
 8005e22:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005e24:	4ba6      	ldr	r3, [pc, #664]	@ (80060c0 <lcd_init+0x4548>)
 8005e26:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005e2a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005e2c:	4ba4      	ldr	r3, [pc, #656]	@ (80060c0 <lcd_init+0x4548>)
 8005e2e:	2280      	movs	r2, #128	@ 0x80
 8005e30:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005e32:	4ba3      	ldr	r3, [pc, #652]	@ (80060c0 <lcd_init+0x4548>)
 8005e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e38:	611a      	str	r2, [r3, #16]
}
 8005e3a:	bf00      	nop

        lcd_wr_regno(0xBC); /* GIP 1 */
        lcd_wr_xdata(0x01);
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f7fa fd5f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8005e42:	200f      	movs	r0, #15
 8005e44:	f7fa fd5c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8005e48:	2061      	movs	r0, #97	@ 0x61
 8005e4a:	f7fa fd59 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005e4e:	20ff      	movs	r0, #255	@ 0xff
 8005e50:	f7fa fd56 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e54:	2001      	movs	r0, #1
 8005e56:	f7fa fd53 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e5a:	2001      	movs	r0, #1
 8005e5c:	f7fa fd50 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8005e60:	200b      	movs	r0, #11
 8005e62:	f7fa fd4d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8005e66:	2010      	movs	r0, #16
 8005e68:	f7fa fd4a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 8005e6c:	2037      	movs	r0, #55	@ 0x37
 8005e6e:	f7fa fd47 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x63);
 8005e72:	2063      	movs	r0, #99	@ 0x63
 8005e74:	f7fa fd44 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005e78:	20ff      	movs	r0, #255	@ 0xff
 8005e7a:	f7fa fd41 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005e7e:	20ff      	movs	r0, #255	@ 0xff
 8005e80:	f7fa fd3e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e84:	2001      	movs	r0, #1
 8005e86:	f7fa fd3b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005e8a:	2001      	movs	r0, #1
 8005e8c:	f7fa fd38 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005e90:	2000      	movs	r0, #0
 8005e92:	f7fa fd35 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005e96:	2000      	movs	r0, #0
 8005e98:	f7fa fd32 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8005e9c:	20ff      	movs	r0, #255	@ 0xff
 8005e9e:	f7fa fd2f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8005ea2:	2052      	movs	r0, #82	@ 0x52
 8005ea4:	f7fa fd2c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	f7fa fd29 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8005eae:	2000      	movs	r0, #0
 8005eb0:	f7fa fd26 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8005eb4:	2040      	movs	r0, #64	@ 0x40
 8005eb6:	f7fa fd23 	bl	8000900 <lcd_wr_xdata>
 8005eba:	23bd      	movs	r3, #189	@ 0xbd
 8005ebc:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005ec0:	4b7f      	ldr	r3, [pc, #508]	@ (80060c0 <lcd_init+0x4548>)
 8005ec2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ec6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005ec8:	4b7d      	ldr	r3, [pc, #500]	@ (80060c0 <lcd_init+0x4548>)
 8005eca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005ece:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005ed0:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	4b7b      	ldr	r3, [pc, #492]	@ (80060c4 <lcd_init+0x454c>)
 8005ed8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005eda:	4b79      	ldr	r3, [pc, #484]	@ (80060c0 <lcd_init+0x4548>)
 8005edc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005ee0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005ee2:	4b77      	ldr	r3, [pc, #476]	@ (80060c0 <lcd_init+0x4548>)
 8005ee4:	2280      	movs	r2, #128	@ 0x80
 8005ee6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005ee8:	4b75      	ldr	r3, [pc, #468]	@ (80060c0 <lcd_init+0x4548>)
 8005eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eee:	611a      	str	r2, [r3, #16]
}
 8005ef0:	bf00      	nop

        lcd_wr_regno(0xBD); /* GIP 2 */
        lcd_wr_xdata(0x01);
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	f7fa fd04 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8005ef8:	2023      	movs	r0, #35	@ 0x23
 8005efa:	f7fa fd01 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8005efe:	2045      	movs	r0, #69	@ 0x45
 8005f00:	f7fa fcfe 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8005f04:	2067      	movs	r0, #103	@ 0x67
 8005f06:	f7fa fcfb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f0a:	2001      	movs	r0, #1
 8005f0c:	f7fa fcf8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8005f10:	2023      	movs	r0, #35	@ 0x23
 8005f12:	f7fa fcf5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8005f16:	2045      	movs	r0, #69	@ 0x45
 8005f18:	f7fa fcf2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 8005f1c:	2067      	movs	r0, #103	@ 0x67
 8005f1e:	f7fa fcef 	bl	8000900 <lcd_wr_xdata>
 8005f22:	23be      	movs	r3, #190	@ 0xbe
 8005f24:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005f28:	4b65      	ldr	r3, [pc, #404]	@ (80060c0 <lcd_init+0x4548>)
 8005f2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f2e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005f30:	4b63      	ldr	r3, [pc, #396]	@ (80060c0 <lcd_init+0x4548>)
 8005f32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f36:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005f38:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	4b61      	ldr	r3, [pc, #388]	@ (80060c4 <lcd_init+0x454c>)
 8005f40:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005f42:	4b5f      	ldr	r3, [pc, #380]	@ (80060c0 <lcd_init+0x4548>)
 8005f44:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005f48:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80060c0 <lcd_init+0x4548>)
 8005f4c:	2280      	movs	r2, #128	@ 0x80
 8005f4e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005f50:	4b5b      	ldr	r3, [pc, #364]	@ (80060c0 <lcd_init+0x4548>)
 8005f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f56:	611a      	str	r2, [r3, #16]
}
 8005f58:	bf00      	nop

        lcd_wr_regno(0xBE); /* GIP 3 */
        lcd_wr_xdata(0x00);
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	f7fa fcd0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8005f60:	2001      	movs	r0, #1
 8005f62:	f7fa fccd 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xAB);
 8005f66:	20ab      	movs	r0, #171	@ 0xab
 8005f68:	f7fa fcca 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x60);
 8005f6c:	2060      	movs	r0, #96	@ 0x60
 8005f6e:	f7fa fcc7 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f72:	2022      	movs	r0, #34	@ 0x22
 8005f74:	f7fa fcc4 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f78:	2022      	movs	r0, #34	@ 0x22
 8005f7a:	f7fa fcc1 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f7e:	2022      	movs	r0, #34	@ 0x22
 8005f80:	f7fa fcbe 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f84:	2022      	movs	r0, #34	@ 0x22
 8005f86:	f7fa fcbb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8005f8a:	2022      	movs	r0, #34	@ 0x22
 8005f8c:	f7fa fcb8 	bl	8000900 <lcd_wr_xdata>
 8005f90:	23c7      	movs	r3, #199	@ 0xc7
 8005f92:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005f96:	4b4a      	ldr	r3, [pc, #296]	@ (80060c0 <lcd_init+0x4548>)
 8005f98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005f9c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005f9e:	4b48      	ldr	r3, [pc, #288]	@ (80060c0 <lcd_init+0x4548>)
 8005fa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005fa4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005fa6:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	4b45      	ldr	r3, [pc, #276]	@ (80060c4 <lcd_init+0x454c>)
 8005fae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005fb0:	4b43      	ldr	r3, [pc, #268]	@ (80060c0 <lcd_init+0x4548>)
 8005fb2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005fb6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005fb8:	4b41      	ldr	r3, [pc, #260]	@ (80060c0 <lcd_init+0x4548>)
 8005fba:	2280      	movs	r2, #128	@ 0x80
 8005fbc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005fbe:	4b40      	ldr	r3, [pc, #256]	@ (80060c0 <lcd_init+0x4548>)
 8005fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fc4:	611a      	str	r2, [r3, #16]
}
 8005fc6:	bf00      	nop

        lcd_wr_regno(0xC7); /* VCOM Control */
        lcd_wr_xdata(0x36);
 8005fc8:	2036      	movs	r0, #54	@ 0x36
 8005fca:	f7fa fc99 	bl	8000900 <lcd_wr_xdata>
 8005fce:	23ed      	movs	r3, #237	@ 0xed
 8005fd0:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80060c0 <lcd_init+0x4548>)
 8005fd6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fda:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005fdc:	4b38      	ldr	r3, [pc, #224]	@ (80060c0 <lcd_init+0x4548>)
 8005fde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005fe2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005fe4:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	4b36      	ldr	r3, [pc, #216]	@ (80060c4 <lcd_init+0x454c>)
 8005fec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005fee:	4b34      	ldr	r3, [pc, #208]	@ (80060c0 <lcd_init+0x4548>)
 8005ff0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005ff4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005ff6:	4b32      	ldr	r3, [pc, #200]	@ (80060c0 <lcd_init+0x4548>)
 8005ff8:	2280      	movs	r2, #128	@ 0x80
 8005ffa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005ffc:	4b30      	ldr	r3, [pc, #192]	@ (80060c0 <lcd_init+0x4548>)
 8005ffe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006002:	611a      	str	r2, [r3, #16]
}
 8006004:	bf00      	nop

        lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
        lcd_wr_xdata(0x7F);
 8006006:	207f      	movs	r0, #127	@ 0x7f
 8006008:	f7fa fc7a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 800600c:	200f      	movs	r0, #15
 800600e:	f7fa fc77 	bl	8000900 <lcd_wr_xdata>
 8006012:	23c0      	movs	r3, #192	@ 0xc0
 8006014:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006018:	4b29      	ldr	r3, [pc, #164]	@ (80060c0 <lcd_init+0x4548>)
 800601a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800601e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006020:	4b27      	ldr	r3, [pc, #156]	@ (80060c0 <lcd_init+0x4548>)
 8006022:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006026:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006028:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 800602c:	b29a      	uxth	r2, r3
 800602e:	4b25      	ldr	r3, [pc, #148]	@ (80060c4 <lcd_init+0x454c>)
 8006030:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006032:	4b23      	ldr	r3, [pc, #140]	@ (80060c0 <lcd_init+0x4548>)
 8006034:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006038:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800603a:	4b21      	ldr	r3, [pc, #132]	@ (80060c0 <lcd_init+0x4548>)
 800603c:	2280      	movs	r2, #128	@ 0x80
 800603e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006040:	4b1f      	ldr	r3, [pc, #124]	@ (80060c0 <lcd_init+0x4548>)
 8006042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006046:	611a      	str	r2, [r3, #16]
}
 8006048:	bf00      	nop

        lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
        lcd_wr_xdata(0x0F);
 800604a:	200f      	movs	r0, #15
 800604c:	f7fa fc58 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8006050:	200b      	movs	r0, #11
 8006052:	f7fa fc55 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* VGH 15V,VGLO-10V */
 8006056:	200a      	movs	r0, #10
 8006058:	f7fa fc52 	bl	8000900 <lcd_wr_xdata>
 800605c:	23fc      	movs	r3, #252	@ 0xfc
 800605e:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006062:	4b17      	ldr	r3, [pc, #92]	@ (80060c0 <lcd_init+0x4548>)
 8006064:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006068:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800606a:	4b15      	ldr	r3, [pc, #84]	@ (80060c0 <lcd_init+0x4548>)
 800606c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006070:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006072:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8006076:	b29a      	uxth	r2, r3
 8006078:	4b12      	ldr	r3, [pc, #72]	@ (80060c4 <lcd_init+0x454c>)
 800607a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800607c:	4b10      	ldr	r3, [pc, #64]	@ (80060c0 <lcd_init+0x4548>)
 800607e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006082:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006084:	4b0e      	ldr	r3, [pc, #56]	@ (80060c0 <lcd_init+0x4548>)
 8006086:	2280      	movs	r2, #128	@ 0x80
 8006088:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800608a:	4b0d      	ldr	r3, [pc, #52]	@ (80060c0 <lcd_init+0x4548>)
 800608c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006090:	611a      	str	r2, [r3, #16]
}
 8006092:	bf00      	nop

        lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
        lcd_wr_xdata(0x08);
 8006094:	2008      	movs	r0, #8
 8006096:	f7fa fc33 	bl	8000900 <lcd_wr_xdata>
 800609a:	23df      	movs	r3, #223	@ 0xdf
 800609c:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80060a0:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <lcd_init+0x4548>)
 80060a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060a6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80060a8:	4b05      	ldr	r3, [pc, #20]	@ (80060c0 <lcd_init+0x4548>)
 80060aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060ae:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80060b0:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	4b03      	ldr	r3, [pc, #12]	@ (80060c4 <lcd_init+0x454c>)
 80060b8:	60da      	str	r2, [r3, #12]
 80060ba:	e005      	b.n	80060c8 <lcd_init+0x4550>
 80060bc:	2000007c 	.word	0x2000007c
 80060c0:	40011000 	.word	0x40011000
 80060c4:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 80060c8:	4bc7      	ldr	r3, [pc, #796]	@ (80063e8 <lcd_init+0x4870>)
 80060ca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80060ce:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80060d0:	4bc5      	ldr	r3, [pc, #788]	@ (80063e8 <lcd_init+0x4870>)
 80060d2:	2280      	movs	r2, #128	@ 0x80
 80060d4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80060d6:	4bc4      	ldr	r3, [pc, #784]	@ (80063e8 <lcd_init+0x4870>)
 80060d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060dc:	611a      	str	r2, [r3, #16]
}
 80060de:	bf00      	nop

        lcd_wr_regno(0XDF);
        lcd_wr_xdata(0x00);
 80060e0:	2000      	movs	r0, #0
 80060e2:	f7fa fc0d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80060e6:	2000      	movs	r0, #0
 80060e8:	f7fa fc0a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80060ec:	2000      	movs	r0, #0
 80060ee:	f7fa fc07 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80060f2:	2000      	movs	r0, #0
 80060f4:	f7fa fc04 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80060f8:	2000      	movs	r0, #0
 80060fa:	f7fa fc01 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 80060fe:	2020      	movs	r0, #32
 8006100:	f7fa fbfe 	bl	8000900 <lcd_wr_xdata>
 8006104:	23f3      	movs	r3, #243	@ 0xf3
 8006106:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800610a:	4bb7      	ldr	r3, [pc, #732]	@ (80063e8 <lcd_init+0x4870>)
 800610c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006110:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006112:	4bb5      	ldr	r3, [pc, #724]	@ (80063e8 <lcd_init+0x4870>)
 8006114:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006118:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800611a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800611e:	b29a      	uxth	r2, r3
 8006120:	4bb2      	ldr	r3, [pc, #712]	@ (80063ec <lcd_init+0x4874>)
 8006122:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006124:	4bb0      	ldr	r3, [pc, #704]	@ (80063e8 <lcd_init+0x4870>)
 8006126:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800612a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800612c:	4bae      	ldr	r3, [pc, #696]	@ (80063e8 <lcd_init+0x4870>)
 800612e:	2280      	movs	r2, #128	@ 0x80
 8006130:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006132:	4bad      	ldr	r3, [pc, #692]	@ (80063e8 <lcd_init+0x4870>)
 8006134:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006138:	611a      	str	r2, [r3, #16]
}
 800613a:	bf00      	nop

        lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
        lcd_wr_xdata(0x74);
 800613c:	2074      	movs	r0, #116	@ 0x74
 800613e:	f7fa fbdf 	bl	8000900 <lcd_wr_xdata>
 8006142:	23b4      	movs	r3, #180	@ 0xb4
 8006144:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006148:	4ba7      	ldr	r3, [pc, #668]	@ (80063e8 <lcd_init+0x4870>)
 800614a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800614e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006150:	4ba5      	ldr	r3, [pc, #660]	@ (80063e8 <lcd_init+0x4870>)
 8006152:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006156:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006158:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 800615c:	b29a      	uxth	r2, r3
 800615e:	4ba3      	ldr	r3, [pc, #652]	@ (80063ec <lcd_init+0x4874>)
 8006160:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006162:	4ba1      	ldr	r3, [pc, #644]	@ (80063e8 <lcd_init+0x4870>)
 8006164:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006168:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800616a:	4b9f      	ldr	r3, [pc, #636]	@ (80063e8 <lcd_init+0x4870>)
 800616c:	2280      	movs	r2, #128	@ 0x80
 800616e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006170:	4b9d      	ldr	r3, [pc, #628]	@ (80063e8 <lcd_init+0x4870>)
 8006172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006176:	611a      	str	r2, [r3, #16]
}
 8006178:	bf00      	nop

        lcd_wr_regno(0xB4); /* Inversion Type */
        lcd_wr_xdata(0x00);  /* 02 */
 800617a:	2000      	movs	r0, #0
 800617c:	f7fa fbc0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006180:	2000      	movs	r0, #0
 8006182:	f7fa fbbd 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006186:	2000      	movs	r0, #0
 8006188:	f7fa fbba 	bl	8000900 <lcd_wr_xdata>
 800618c:	23f7      	movs	r3, #247	@ 0xf7
 800618e:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006192:	4b95      	ldr	r3, [pc, #596]	@ (80063e8 <lcd_init+0x4870>)
 8006194:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006198:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800619a:	4b93      	ldr	r3, [pc, #588]	@ (80063e8 <lcd_init+0x4870>)
 800619c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80061a0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80061a2:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	4b90      	ldr	r3, [pc, #576]	@ (80063ec <lcd_init+0x4874>)
 80061aa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80061ac:	4b8e      	ldr	r3, [pc, #568]	@ (80063e8 <lcd_init+0x4870>)
 80061ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80061b2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80061b4:	4b8c      	ldr	r3, [pc, #560]	@ (80063e8 <lcd_init+0x4870>)
 80061b6:	2280      	movs	r2, #128	@ 0x80
 80061b8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80061ba:	4b8b      	ldr	r3, [pc, #556]	@ (80063e8 <lcd_init+0x4870>)
 80061bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061c0:	611a      	str	r2, [r3, #16]
}
 80061c2:	bf00      	nop

        lcd_wr_regno(0xF7); /* Resolution Control */
        lcd_wr_xdata(0x82);  /* 480*800 */
 80061c4:	2082      	movs	r0, #130	@ 0x82
 80061c6:	f7fa fb9b 	bl	8000900 <lcd_wr_xdata>
 80061ca:	23b1      	movs	r3, #177	@ 0xb1
 80061cc:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80061d0:	4b85      	ldr	r3, [pc, #532]	@ (80063e8 <lcd_init+0x4870>)
 80061d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061d6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80061d8:	4b83      	ldr	r3, [pc, #524]	@ (80063e8 <lcd_init+0x4870>)
 80061da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80061de:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80061e0:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	4b81      	ldr	r3, [pc, #516]	@ (80063ec <lcd_init+0x4874>)
 80061e8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80061ea:	4b7f      	ldr	r3, [pc, #508]	@ (80063e8 <lcd_init+0x4870>)
 80061ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80061f0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80061f2:	4b7d      	ldr	r3, [pc, #500]	@ (80063e8 <lcd_init+0x4870>)
 80061f4:	2280      	movs	r2, #128	@ 0x80
 80061f6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80061f8:	4b7b      	ldr	r3, [pc, #492]	@ (80063e8 <lcd_init+0x4870>)
 80061fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061fe:	611a      	str	r2, [r3, #16]
}
 8006200:	bf00      	nop

        lcd_wr_regno(0xB1); /* FRAME RATE Setting */
        lcd_wr_xdata(0x00);
 8006202:	2000      	movs	r0, #0
 8006204:	f7fa fb7c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8006208:	2013      	movs	r0, #19
 800620a:	f7fa fb79 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 800620e:	2013      	movs	r0, #19
 8006210:	f7fa fb76 	bl	8000900 <lcd_wr_xdata>
 8006214:	23f2      	movs	r3, #242	@ 0xf2
 8006216:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800621a:	4b73      	ldr	r3, [pc, #460]	@ (80063e8 <lcd_init+0x4870>)
 800621c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006220:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006222:	4b71      	ldr	r3, [pc, #452]	@ (80063e8 <lcd_init+0x4870>)
 8006224:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006228:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800622a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 800622e:	b29a      	uxth	r2, r3
 8006230:	4b6e      	ldr	r3, [pc, #440]	@ (80063ec <lcd_init+0x4874>)
 8006232:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006234:	4b6c      	ldr	r3, [pc, #432]	@ (80063e8 <lcd_init+0x4870>)
 8006236:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800623a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800623c:	4b6a      	ldr	r3, [pc, #424]	@ (80063e8 <lcd_init+0x4870>)
 800623e:	2280      	movs	r2, #128	@ 0x80
 8006240:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006242:	4b69      	ldr	r3, [pc, #420]	@ (80063e8 <lcd_init+0x4870>)
 8006244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006248:	611a      	str	r2, [r3, #16]
}
 800624a:	bf00      	nop

        lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
        lcd_wr_xdata(0x80);
 800624c:	2080      	movs	r0, #128	@ 0x80
 800624e:	f7fa fb57 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8006252:	2004      	movs	r0, #4
 8006254:	f7fa fb54 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8006258:	2040      	movs	r0, #64	@ 0x40
 800625a:	f7fa fb51 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 800625e:	2028      	movs	r0, #40	@ 0x28
 8006260:	f7fa fb4e 	bl	8000900 <lcd_wr_xdata>
 8006264:	23c1      	movs	r3, #193	@ 0xc1
 8006266:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800626a:	4b5f      	ldr	r3, [pc, #380]	@ (80063e8 <lcd_init+0x4870>)
 800626c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006270:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006272:	4b5d      	ldr	r3, [pc, #372]	@ (80063e8 <lcd_init+0x4870>)
 8006274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006278:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800627a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 800627e:	b29a      	uxth	r2, r3
 8006280:	4b5a      	ldr	r3, [pc, #360]	@ (80063ec <lcd_init+0x4874>)
 8006282:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006284:	4b58      	ldr	r3, [pc, #352]	@ (80063e8 <lcd_init+0x4870>)
 8006286:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800628a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800628c:	4b56      	ldr	r3, [pc, #344]	@ (80063e8 <lcd_init+0x4870>)
 800628e:	2280      	movs	r2, #128	@ 0x80
 8006290:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006292:	4b55      	ldr	r3, [pc, #340]	@ (80063e8 <lcd_init+0x4870>)
 8006294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006298:	611a      	str	r2, [r3, #16]
}
 800629a:	bf00      	nop

        lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
        lcd_wr_xdata(0x17);
 800629c:	2017      	movs	r0, #23
 800629e:	f7fa fb2f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMP */
 80062a2:	2088      	movs	r0, #136	@ 0x88
 80062a4:	f7fa fb2c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMN */
 80062a8:	2088      	movs	r0, #136	@ 0x88
 80062aa:	f7fa fb29 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 80062ae:	2020      	movs	r0, #32
 80062b0:	f7fa fb26 	bl	8000900 <lcd_wr_xdata>
 80062b4:	23e0      	movs	r3, #224	@ 0xe0
 80062b6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80062ba:	4b4b      	ldr	r3, [pc, #300]	@ (80063e8 <lcd_init+0x4870>)
 80062bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062c0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80062c2:	4b49      	ldr	r3, [pc, #292]	@ (80063e8 <lcd_init+0x4870>)
 80062c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80062c8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80062ca:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	4b46      	ldr	r3, [pc, #280]	@ (80063ec <lcd_init+0x4874>)
 80062d2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80062d4:	4b44      	ldr	r3, [pc, #272]	@ (80063e8 <lcd_init+0x4870>)
 80062d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80062da:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80062dc:	4b42      	ldr	r3, [pc, #264]	@ (80063e8 <lcd_init+0x4870>)
 80062de:	2280      	movs	r2, #128	@ 0x80
 80062e0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80062e2:	4b41      	ldr	r3, [pc, #260]	@ (80063e8 <lcd_init+0x4870>)
 80062e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062e8:	611a      	str	r2, [r3, #16]
}
 80062ea:	bf00      	nop

        lcd_wr_regno(0xE0); /* Positive Gamma Control */
        lcd_wr_xdata(0x00);  /* P1 */
 80062ec:	2000      	movs	r0, #0
 80062ee:	f7fa fb07 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P2 */
 80062f2:	200a      	movs	r0, #10
 80062f4:	f7fa fb04 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);  /* P3 */
 80062f8:	2012      	movs	r0, #18
 80062fa:	f7fa fb01 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P4 */
 80062fe:	2010      	movs	r0, #16
 8006300:	f7fa fafe 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 8006304:	200e      	movs	r0, #14
 8006306:	f7fa fafb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);  /* P6 */
 800630a:	2020      	movs	r0, #32
 800630c:	f7fa faf8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xCC);  /* P7 */
 8006310:	20cc      	movs	r0, #204	@ 0xcc
 8006312:	f7fa faf5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);  /* P8 */
 8006316:	2007      	movs	r0, #7
 8006318:	f7fa faf2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 800631c:	2006      	movs	r0, #6
 800631e:	f7fa faef 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P10 */
 8006322:	200b      	movs	r0, #11
 8006324:	f7fa faec 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P11 */
 8006328:	200e      	movs	r0, #14
 800632a:	f7fa fae9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P12 */
 800632e:	200f      	movs	r0, #15
 8006330:	f7fa fae6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P13 */
 8006334:	200d      	movs	r0, #13
 8006336:	f7fa fae3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 800633a:	2015      	movs	r0, #21
 800633c:	f7fa fae0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P15 */
 8006340:	2010      	movs	r0, #16
 8006342:	f7fa fadd 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 8006346:	2000      	movs	r0, #0
 8006348:	f7fa fada 	bl	8000900 <lcd_wr_xdata>
 800634c:	23e1      	movs	r3, #225	@ 0xe1
 800634e:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006352:	4b25      	ldr	r3, [pc, #148]	@ (80063e8 <lcd_init+0x4870>)
 8006354:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006358:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800635a:	4b23      	ldr	r3, [pc, #140]	@ (80063e8 <lcd_init+0x4870>)
 800635c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006360:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006362:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8006366:	b29a      	uxth	r2, r3
 8006368:	4b20      	ldr	r3, [pc, #128]	@ (80063ec <lcd_init+0x4874>)
 800636a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800636c:	4b1e      	ldr	r3, [pc, #120]	@ (80063e8 <lcd_init+0x4870>)
 800636e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006372:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006374:	4b1c      	ldr	r3, [pc, #112]	@ (80063e8 <lcd_init+0x4870>)
 8006376:	2280      	movs	r2, #128	@ 0x80
 8006378:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800637a:	4b1b      	ldr	r3, [pc, #108]	@ (80063e8 <lcd_init+0x4870>)
 800637c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006380:	611a      	str	r2, [r3, #16]
}
 8006382:	bf00      	nop

        lcd_wr_regno(0xE1); /* Negative Gamma Correction */
        lcd_wr_xdata(0x00);  /* P1 */
 8006384:	2000      	movs	r0, #0
 8006386:	f7fa fabb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P2 */
 800638a:	200b      	movs	r0, #11
 800638c:	f7fa fab8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);  /* P3 */
 8006390:	2013      	movs	r0, #19
 8006392:	f7fa fab5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P4 */
 8006396:	200d      	movs	r0, #13
 8006398:	f7fa fab2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 800639c:	200e      	movs	r0, #14
 800639e:	f7fa faaf 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);  /* P6 */
 80063a2:	201b      	movs	r0, #27
 80063a4:	f7fa faac 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x71);  /* P7 */
 80063a8:	2071      	movs	r0, #113	@ 0x71
 80063aa:	f7fa faa9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P8 */
 80063ae:	2006      	movs	r0, #6
 80063b0:	f7fa faa6 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 80063b4:	2006      	movs	r0, #6
 80063b6:	f7fa faa3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P10 */
 80063ba:	200a      	movs	r0, #10
 80063bc:	f7fa faa0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P11 */
 80063c0:	200f      	movs	r0, #15
 80063c2:	f7fa fa9d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P12 */
 80063c6:	200e      	movs	r0, #14
 80063c8:	f7fa fa9a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P13 */
 80063cc:	200f      	movs	r0, #15
 80063ce:	f7fa fa97 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 80063d2:	2015      	movs	r0, #21
 80063d4:	f7fa fa94 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);  /* P15 */
 80063d8:	200c      	movs	r0, #12
 80063da:	f7fa fa91 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 80063de:	2000      	movs	r0, #0
 80063e0:	f7fa fa8e 	bl	8000900 <lcd_wr_xdata>
 80063e4:	e004      	b.n	80063f0 <lcd_init+0x4878>
 80063e6:	bf00      	nop
 80063e8:	40011000 	.word	0x40011000
 80063ec:	40010c00 	.word	0x40010c00
 80063f0:	232a      	movs	r3, #42	@ 0x2a
 80063f2:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80063f6:	4b72      	ldr	r3, [pc, #456]	@ (80065c0 <lcd_init+0x4a48>)
 80063f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063fc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80063fe:	4b70      	ldr	r3, [pc, #448]	@ (80065c0 <lcd_init+0x4a48>)
 8006400:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006404:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006406:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800640a:	b29a      	uxth	r2, r3
 800640c:	4b6d      	ldr	r3, [pc, #436]	@ (80065c4 <lcd_init+0x4a4c>)
 800640e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006410:	4b6b      	ldr	r3, [pc, #428]	@ (80065c0 <lcd_init+0x4a48>)
 8006412:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006416:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006418:	4b69      	ldr	r3, [pc, #420]	@ (80065c0 <lcd_init+0x4a48>)
 800641a:	2280      	movs	r2, #128	@ 0x80
 800641c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800641e:	4b68      	ldr	r3, [pc, #416]	@ (80065c0 <lcd_init+0x4a48>)
 8006420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006424:	611a      	str	r2, [r3, #16]
}
 8006426:	bf00      	nop

        lcd_wr_regno(0x2a);
        lcd_wr_xdata(0x00);
 8006428:	2000      	movs	r0, #0
 800642a:	f7fa fa69 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800642e:	2000      	movs	r0, #0
 8006430:	f7fa fa66 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006434:	2001      	movs	r0, #1
 8006436:	f7fa fa63 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xdf);
 800643a:	20df      	movs	r0, #223	@ 0xdf
 800643c:	f7fa fa60 	bl	8000900 <lcd_wr_xdata>
 8006440:	232b      	movs	r3, #43	@ 0x2b
 8006442:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006446:	4b5e      	ldr	r3, [pc, #376]	@ (80065c0 <lcd_init+0x4a48>)
 8006448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800644c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800644e:	4b5c      	ldr	r3, [pc, #368]	@ (80065c0 <lcd_init+0x4a48>)
 8006450:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006454:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006456:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 800645a:	b29a      	uxth	r2, r3
 800645c:	4b59      	ldr	r3, [pc, #356]	@ (80065c4 <lcd_init+0x4a4c>)
 800645e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006460:	4b57      	ldr	r3, [pc, #348]	@ (80065c0 <lcd_init+0x4a48>)
 8006462:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006466:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006468:	4b55      	ldr	r3, [pc, #340]	@ (80065c0 <lcd_init+0x4a48>)
 800646a:	2280      	movs	r2, #128	@ 0x80
 800646c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800646e:	4b54      	ldr	r3, [pc, #336]	@ (80065c0 <lcd_init+0x4a48>)
 8006470:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006474:	611a      	str	r2, [r3, #16]
}
 8006476:	bf00      	nop

        lcd_wr_regno(0x2b);
        lcd_wr_xdata(0x00);
 8006478:	2000      	movs	r0, #0
 800647a:	f7fa fa41 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800647e:	2000      	movs	r0, #0
 8006480:	f7fa fa3e 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8006484:	2003      	movs	r0, #3
 8006486:	f7fa fa3b 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x1f);
 800648a:	201f      	movs	r0, #31
 800648c:	f7fa fa38 	bl	8000900 <lcd_wr_xdata>
 8006490:	233a      	movs	r3, #58	@ 0x3a
 8006492:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006496:	4b4a      	ldr	r3, [pc, #296]	@ (80065c0 <lcd_init+0x4a48>)
 8006498:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800649c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800649e:	4b48      	ldr	r3, [pc, #288]	@ (80065c0 <lcd_init+0x4a48>)
 80064a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80064a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80064a6:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	4b45      	ldr	r3, [pc, #276]	@ (80065c4 <lcd_init+0x4a4c>)
 80064ae:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80064b0:	4b43      	ldr	r3, [pc, #268]	@ (80065c0 <lcd_init+0x4a48>)
 80064b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80064b6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80064b8:	4b41      	ldr	r3, [pc, #260]	@ (80065c0 <lcd_init+0x4a48>)
 80064ba:	2280      	movs	r2, #128	@ 0x80
 80064bc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80064be:	4b40      	ldr	r3, [pc, #256]	@ (80065c0 <lcd_init+0x4a48>)
 80064c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064c4:	611a      	str	r2, [r3, #16]
}
 80064c6:	bf00      	nop

        lcd_wr_regno(0x3A); /* Pixel Format */
        lcd_wr_xdata(0x55);
 80064c8:	2055      	movs	r0, #85	@ 0x55
 80064ca:	f7fa fa19 	bl	8000900 <lcd_wr_xdata>
 80064ce:	2336      	movs	r3, #54	@ 0x36
 80064d0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80064d4:	4b3a      	ldr	r3, [pc, #232]	@ (80065c0 <lcd_init+0x4a48>)
 80064d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064da:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80064dc:	4b38      	ldr	r3, [pc, #224]	@ (80065c0 <lcd_init+0x4a48>)
 80064de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80064e2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80064e4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	4b36      	ldr	r3, [pc, #216]	@ (80065c4 <lcd_init+0x4a4c>)
 80064ec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80064ee:	4b34      	ldr	r3, [pc, #208]	@ (80065c0 <lcd_init+0x4a48>)
 80064f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80064f4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80064f6:	4b32      	ldr	r3, [pc, #200]	@ (80065c0 <lcd_init+0x4a48>)
 80064f8:	2280      	movs	r2, #128	@ 0x80
 80064fa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80064fc:	4b30      	ldr	r3, [pc, #192]	@ (80065c0 <lcd_init+0x4a48>)
 80064fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006502:	611a      	str	r2, [r3, #16]
}
 8006504:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Access Control */
        lcd_wr_xdata(0x00);  /* 02-180 */
 8006506:	2000      	movs	r0, #0
 8006508:	f7fa f9fa 	bl	8000900 <lcd_wr_xdata>
 800650c:	2311      	movs	r3, #17
 800650e:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006512:	4b2b      	ldr	r3, [pc, #172]	@ (80065c0 <lcd_init+0x4a48>)
 8006514:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006518:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800651a:	4b29      	ldr	r3, [pc, #164]	@ (80065c0 <lcd_init+0x4a48>)
 800651c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006520:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006522:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8006526:	b29a      	uxth	r2, r3
 8006528:	4b26      	ldr	r3, [pc, #152]	@ (80065c4 <lcd_init+0x4a4c>)
 800652a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800652c:	4b24      	ldr	r3, [pc, #144]	@ (80065c0 <lcd_init+0x4a48>)
 800652e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006532:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006534:	4b22      	ldr	r3, [pc, #136]	@ (80065c0 <lcd_init+0x4a48>)
 8006536:	2280      	movs	r2, #128	@ 0x80
 8006538:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800653a:	4b21      	ldr	r3, [pc, #132]	@ (80065c0 <lcd_init+0x4a48>)
 800653c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006540:	611a      	str	r2, [r3, #16]
}
 8006542:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(120);
 8006544:	2078      	movs	r0, #120	@ 0x78
 8006546:	f000 fe6f 	bl	8007228 <HAL_Delay>
 800654a:	2329      	movs	r3, #41	@ 0x29
 800654c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006550:	4b1b      	ldr	r3, [pc, #108]	@ (80065c0 <lcd_init+0x4a48>)
 8006552:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006556:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006558:	4b19      	ldr	r3, [pc, #100]	@ (80065c0 <lcd_init+0x4a48>)
 800655a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800655e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006560:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8006564:	b29a      	uxth	r2, r3
 8006566:	4b17      	ldr	r3, [pc, #92]	@ (80065c4 <lcd_init+0x4a4c>)
 8006568:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800656a:	4b15      	ldr	r3, [pc, #84]	@ (80065c0 <lcd_init+0x4a48>)
 800656c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006570:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006572:	4b13      	ldr	r3, [pc, #76]	@ (80065c0 <lcd_init+0x4a48>)
 8006574:	2280      	movs	r2, #128	@ 0x80
 8006576:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006578:	4b11      	ldr	r3, [pc, #68]	@ (80065c0 <lcd_init+0x4a48>)
 800657a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800657e:	611a      	str	r2, [r3, #16]
}
 8006580:	bf00      	nop
        lcd_wr_regno(0x29);
        HAL_Delay(20);
 8006582:	2014      	movs	r0, #20
 8006584:	f000 fe50 	bl	8007228 <HAL_Delay>
 8006588:	232c      	movs	r3, #44	@ 0x2c
 800658a:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800658e:	4b0c      	ldr	r3, [pc, #48]	@ (80065c0 <lcd_init+0x4a48>)
 8006590:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006594:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006596:	4b0a      	ldr	r3, [pc, #40]	@ (80065c0 <lcd_init+0x4a48>)
 8006598:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800659c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800659e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	4b07      	ldr	r3, [pc, #28]	@ (80065c4 <lcd_init+0x4a4c>)
 80065a6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80065a8:	4b05      	ldr	r3, [pc, #20]	@ (80065c0 <lcd_init+0x4a48>)
 80065aa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80065ae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80065b0:	4b03      	ldr	r3, [pc, #12]	@ (80065c0 <lcd_init+0x4a48>)
 80065b2:	2280      	movs	r2, #128	@ 0x80
 80065b4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80065b6:	4b02      	ldr	r3, [pc, #8]	@ (80065c0 <lcd_init+0x4a48>)
 80065b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065bc:	611a      	str	r2, [r3, #16]
}
 80065be:	e224      	b.n	8006a0a <lcd_init+0x4e92>
 80065c0:	40011000 	.word	0x40011000
 80065c4:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2C);
    }
    else if (lcddev.id == 0x1963)
 80065c8:	4bbe      	ldr	r3, [pc, #760]	@ (80068c4 <lcd_init+0x4d4c>)
 80065ca:	889b      	ldrh	r3, [r3, #4]
 80065cc:	f641 1263 	movw	r2, #6499	@ 0x1963
 80065d0:	4293      	cmp	r3, r2
 80065d2:	f040 821a 	bne.w	8006a0a <lcd_init+0x4e92>
 80065d6:	23e2      	movs	r3, #226	@ 0xe2
 80065d8:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80065dc:	4bba      	ldr	r3, [pc, #744]	@ (80068c8 <lcd_init+0x4d50>)
 80065de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065e2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80065e4:	4bb8      	ldr	r3, [pc, #736]	@ (80068c8 <lcd_init+0x4d50>)
 80065e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065ea:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80065ec:	f8b7 3152 	ldrh.w	r3, [r7, #338]	@ 0x152
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	4bb6      	ldr	r3, [pc, #728]	@ (80068cc <lcd_init+0x4d54>)
 80065f4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80065f6:	4bb4      	ldr	r3, [pc, #720]	@ (80068c8 <lcd_init+0x4d50>)
 80065f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80065fc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80065fe:	4bb2      	ldr	r3, [pc, #712]	@ (80068c8 <lcd_init+0x4d50>)
 8006600:	2280      	movs	r2, #128	@ 0x80
 8006602:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006604:	4bb0      	ldr	r3, [pc, #704]	@ (80068c8 <lcd_init+0x4d50>)
 8006606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800660a:	611a      	str	r2, [r3, #16]
}
 800660c:	bf00      	nop
    {
        //lcd_ex_ssd1963_reginit();   /* ִ��SSD1963��ʼ�� */
        lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
        lcd_wr_xdata(0x1D); /* ����1 */
 800660e:	201d      	movs	r0, #29
 8006610:	f7fa f976 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x02); /* ����2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 8006614:	2002      	movs	r0, #2
 8006616:	f7fa f973 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x04); /* ����3 Validate M and N values */
 800661a:	2004      	movs	r0, #4
 800661c:	f7fa f970 	bl	8000900 <lcd_wr_xdata>
 8006620:	23e0      	movs	r3, #224	@ 0xe0
 8006622:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006626:	4ba8      	ldr	r3, [pc, #672]	@ (80068c8 <lcd_init+0x4d50>)
 8006628:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800662c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800662e:	4ba6      	ldr	r3, [pc, #664]	@ (80068c8 <lcd_init+0x4d50>)
 8006630:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006634:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006636:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 800663a:	b29a      	uxth	r2, r3
 800663c:	4ba3      	ldr	r3, [pc, #652]	@ (80068cc <lcd_init+0x4d54>)
 800663e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006640:	4ba1      	ldr	r3, [pc, #644]	@ (80068c8 <lcd_init+0x4d50>)
 8006642:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006646:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006648:	4b9f      	ldr	r3, [pc, #636]	@ (80068c8 <lcd_init+0x4d50>)
 800664a:	2280      	movs	r2, #128	@ 0x80
 800664c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800664e:	4b9e      	ldr	r3, [pc, #632]	@ (80068c8 <lcd_init+0x4d50>)
 8006650:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006654:	611a      	str	r2, [r3, #16]
}
 8006656:	bf00      	nop
        //delay_us(100);
        lcd_wr_regno(0xE0); /*  Start PLL command */
        lcd_wr_xdata(0x01); /*  enable PLL */
 8006658:	2001      	movs	r0, #1
 800665a:	f7fa f951 	bl	8000900 <lcd_wr_xdata>
        HAL_Delay(10);
 800665e:	200a      	movs	r0, #10
 8006660:	f000 fde2 	bl	8007228 <HAL_Delay>
 8006664:	23e0      	movs	r3, #224	@ 0xe0
 8006666:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800666a:	4b97      	ldr	r3, [pc, #604]	@ (80068c8 <lcd_init+0x4d50>)
 800666c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006670:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006672:	4b95      	ldr	r3, [pc, #596]	@ (80068c8 <lcd_init+0x4d50>)
 8006674:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006678:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800667a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 800667e:	b29a      	uxth	r2, r3
 8006680:	4b92      	ldr	r3, [pc, #584]	@ (80068cc <lcd_init+0x4d54>)
 8006682:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006684:	4b90      	ldr	r3, [pc, #576]	@ (80068c8 <lcd_init+0x4d50>)
 8006686:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800668a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800668c:	4b8e      	ldr	r3, [pc, #568]	@ (80068c8 <lcd_init+0x4d50>)
 800668e:	2280      	movs	r2, #128	@ 0x80
 8006690:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006692:	4b8d      	ldr	r3, [pc, #564]	@ (80068c8 <lcd_init+0x4d50>)
 8006694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006698:	611a      	str	r2, [r3, #16]
}
 800669a:	bf00      	nop
        lcd_wr_regno(0xE0); /*  Start PLL command again */
        lcd_wr_xdata(0x03); /*  now, use PLL output as system clock */
 800669c:	2003      	movs	r0, #3
 800669e:	f7fa f92f 	bl	8000900 <lcd_wr_xdata>
        HAL_Delay(12);
 80066a2:	200c      	movs	r0, #12
 80066a4:	f000 fdc0 	bl	8007228 <HAL_Delay>
 80066a8:	2301      	movs	r3, #1
 80066aa:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80066ae:	4b86      	ldr	r3, [pc, #536]	@ (80068c8 <lcd_init+0x4d50>)
 80066b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066b4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80066b6:	4b84      	ldr	r3, [pc, #528]	@ (80068c8 <lcd_init+0x4d50>)
 80066b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066bc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066be:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	4b81      	ldr	r3, [pc, #516]	@ (80068cc <lcd_init+0x4d54>)
 80066c6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80066c8:	4b7f      	ldr	r3, [pc, #508]	@ (80068c8 <lcd_init+0x4d50>)
 80066ca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80066ce:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80066d0:	4b7d      	ldr	r3, [pc, #500]	@ (80068c8 <lcd_init+0x4d50>)
 80066d2:	2280      	movs	r2, #128	@ 0x80
 80066d4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80066d6:	4b7c      	ldr	r3, [pc, #496]	@ (80068c8 <lcd_init+0x4d50>)
 80066d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066dc:	611a      	str	r2, [r3, #16]
}
 80066de:	bf00      	nop
        lcd_wr_regno(0x01); /* ��λ */
        HAL_Delay(10);
 80066e0:	200a      	movs	r0, #10
 80066e2:	f000 fda1 	bl	8007228 <HAL_Delay>
 80066e6:	23e6      	movs	r3, #230	@ 0xe6
 80066e8:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80066ec:	4b76      	ldr	r3, [pc, #472]	@ (80068c8 <lcd_init+0x4d50>)
 80066ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066f2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80066f4:	4b74      	ldr	r3, [pc, #464]	@ (80068c8 <lcd_init+0x4d50>)
 80066f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066fa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066fc:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 8006700:	b29a      	uxth	r2, r3
 8006702:	4b72      	ldr	r3, [pc, #456]	@ (80068cc <lcd_init+0x4d54>)
 8006704:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006706:	4b70      	ldr	r3, [pc, #448]	@ (80068c8 <lcd_init+0x4d50>)
 8006708:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800670c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800670e:	4b6e      	ldr	r3, [pc, #440]	@ (80068c8 <lcd_init+0x4d50>)
 8006710:	2280      	movs	r2, #128	@ 0x80
 8006712:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006714:	4b6c      	ldr	r3, [pc, #432]	@ (80068c8 <lcd_init+0x4d50>)
 8006716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800671a:	611a      	str	r2, [r3, #16]
}
 800671c:	bf00      	nop

        lcd_wr_regno(0xE6); /* ��������Ƶ��,33Mhz */
        lcd_wr_xdata(0x2F);
 800671e:	202f      	movs	r0, #47	@ 0x2f
 8006720:	f7fa f8ee 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006724:	20ff      	movs	r0, #255	@ 0xff
 8006726:	f7fa f8eb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 800672a:	20ff      	movs	r0, #255	@ 0xff
 800672c:	f7fa f8e8 	bl	8000900 <lcd_wr_xdata>
 8006730:	23b0      	movs	r3, #176	@ 0xb0
 8006732:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006736:	4b64      	ldr	r3, [pc, #400]	@ (80068c8 <lcd_init+0x4d50>)
 8006738:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800673c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800673e:	4b62      	ldr	r3, [pc, #392]	@ (80068c8 <lcd_init+0x4d50>)
 8006740:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006744:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006746:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 800674a:	b29a      	uxth	r2, r3
 800674c:	4b5f      	ldr	r3, [pc, #380]	@ (80068cc <lcd_init+0x4d54>)
 800674e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006750:	4b5d      	ldr	r3, [pc, #372]	@ (80068c8 <lcd_init+0x4d50>)
 8006752:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006756:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006758:	4b5b      	ldr	r3, [pc, #364]	@ (80068c8 <lcd_init+0x4d50>)
 800675a:	2280      	movs	r2, #128	@ 0x80
 800675c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800675e:	4b5a      	ldr	r3, [pc, #360]	@ (80068c8 <lcd_init+0x4d50>)
 8006760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006764:	611a      	str	r2, [r3, #16]
}
 8006766:	bf00      	nop

        lcd_wr_regno(0xB0); /* ����LCDģʽ */
        lcd_wr_xdata(0x20); /* 24λģʽ */
 8006768:	2020      	movs	r0, #32
 800676a:	f7fa f8c9 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* TFT ģʽ */
 800676e:	2000      	movs	r0, #0
 8006770:	f7fa f8c6 	bl	8000900 <lcd_wr_xdata>

        lcd_wr_xdata((SSD_HOR_RESOLUTION - 1) >> 8); /* ����LCDˮƽ���� */
 8006774:	2003      	movs	r0, #3
 8006776:	f7fa f8c3 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_RESOLUTION - 1);
 800677a:	f240 301f 	movw	r0, #799	@ 0x31f
 800677e:	f7fa f8bf 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata((SSD_VER_RESOLUTION - 1) >> 8); /* ����LCD��ֱ���� */
 8006782:	2001      	movs	r0, #1
 8006784:	f7fa f8bc 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_RESOLUTION - 1);
 8006788:	f240 10df 	movw	r0, #479	@ 0x1df
 800678c:	f7fa f8b8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* RGB���� */
 8006790:	2000      	movs	r0, #0
 8006792:	f7fa f8b5 	bl	8000900 <lcd_wr_xdata>
 8006796:	23b4      	movs	r3, #180	@ 0xb4
 8006798:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800679c:	4b4a      	ldr	r3, [pc, #296]	@ (80068c8 <lcd_init+0x4d50>)
 800679e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067a2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80067a4:	4b48      	ldr	r3, [pc, #288]	@ (80068c8 <lcd_init+0x4d50>)
 80067a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067aa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80067ac:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	4b46      	ldr	r3, [pc, #280]	@ (80068cc <lcd_init+0x4d54>)
 80067b4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80067b6:	4b44      	ldr	r3, [pc, #272]	@ (80068c8 <lcd_init+0x4d50>)
 80067b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80067bc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80067be:	4b42      	ldr	r3, [pc, #264]	@ (80068c8 <lcd_init+0x4d50>)
 80067c0:	2280      	movs	r2, #128	@ 0x80
 80067c2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067c4:	4b40      	ldr	r3, [pc, #256]	@ (80068c8 <lcd_init+0x4d50>)
 80067c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067ca:	611a      	str	r2, [r3, #16]
}
 80067cc:	bf00      	nop

        lcd_wr_regno(0xB4); /* Set horizontal period */
        lcd_wr_xdata((SSD_HT - 1) >> 8);
 80067ce:	2004      	movs	r0, #4
 80067d0:	f7fa f896 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HT - 1);
 80067d4:	f240 401f 	movw	r0, #1055	@ 0x41f
 80067d8:	f7fa f892 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS >> 8);
 80067dc:	2000      	movs	r0, #0
 80067de:	f7fa f88f 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS);
 80067e2:	202e      	movs	r0, #46	@ 0x2e
 80067e4:	f7fa f88c 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_PULSE_WIDTH - 1);
 80067e8:	2000      	movs	r0, #0
 80067ea:	f7fa f889 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80067ee:	2000      	movs	r0, #0
 80067f0:	f7fa f886 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80067f4:	2000      	movs	r0, #0
 80067f6:	f7fa f883 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80067fa:	2000      	movs	r0, #0
 80067fc:	f7fa f880 	bl	8000900 <lcd_wr_xdata>
 8006800:	23b6      	movs	r3, #182	@ 0xb6
 8006802:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006806:	4b30      	ldr	r3, [pc, #192]	@ (80068c8 <lcd_init+0x4d50>)
 8006808:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800680c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800680e:	4b2e      	ldr	r3, [pc, #184]	@ (80068c8 <lcd_init+0x4d50>)
 8006810:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006814:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006816:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 800681a:	b29a      	uxth	r2, r3
 800681c:	4b2b      	ldr	r3, [pc, #172]	@ (80068cc <lcd_init+0x4d54>)
 800681e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006820:	4b29      	ldr	r3, [pc, #164]	@ (80068c8 <lcd_init+0x4d50>)
 8006822:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006826:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006828:	4b27      	ldr	r3, [pc, #156]	@ (80068c8 <lcd_init+0x4d50>)
 800682a:	2280      	movs	r2, #128	@ 0x80
 800682c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800682e:	4b26      	ldr	r3, [pc, #152]	@ (80068c8 <lcd_init+0x4d50>)
 8006830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006834:	611a      	str	r2, [r3, #16]
}
 8006836:	bf00      	nop
        lcd_wr_regno(0xB6); /* Set vertical perio */
        lcd_wr_xdata((SSD_VT - 1) >> 8);
 8006838:	2002      	movs	r0, #2
 800683a:	f7fa f861 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VT - 1);
 800683e:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 8006842:	f7fa f85d 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS >> 8);
 8006846:	2000      	movs	r0, #0
 8006848:	f7fa f85a 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS);
 800684c:	2017      	movs	r0, #23
 800684e:	f7fa f857 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_FRONT_PORCH - 1);
 8006852:	2015      	movs	r0, #21
 8006854:	f7fa f854 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006858:	2000      	movs	r0, #0
 800685a:	f7fa f851 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800685e:	2000      	movs	r0, #0
 8006860:	f7fa f84e 	bl	8000900 <lcd_wr_xdata>
 8006864:	23f0      	movs	r3, #240	@ 0xf0
 8006866:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800686a:	4b17      	ldr	r3, [pc, #92]	@ (80068c8 <lcd_init+0x4d50>)
 800686c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006870:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006872:	4b15      	ldr	r3, [pc, #84]	@ (80068c8 <lcd_init+0x4d50>)
 8006874:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006878:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800687a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 800687e:	b29a      	uxth	r2, r3
 8006880:	4b12      	ldr	r3, [pc, #72]	@ (80068cc <lcd_init+0x4d54>)
 8006882:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006884:	4b10      	ldr	r3, [pc, #64]	@ (80068c8 <lcd_init+0x4d50>)
 8006886:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800688a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800688c:	4b0e      	ldr	r3, [pc, #56]	@ (80068c8 <lcd_init+0x4d50>)
 800688e:	2280      	movs	r2, #128	@ 0x80
 8006890:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006892:	4b0d      	ldr	r3, [pc, #52]	@ (80068c8 <lcd_init+0x4d50>)
 8006894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006898:	611a      	str	r2, [r3, #16]
}
 800689a:	bf00      	nop

        lcd_wr_regno(0xF0); /* ����SSD1963��CPU�ӿ�Ϊ16bit */
        lcd_wr_xdata(0x03); /* 16-bit(565 format) data for 16bpp */
 800689c:	2003      	movs	r0, #3
 800689e:	f7fa f82f 	bl	8000900 <lcd_wr_xdata>
 80068a2:	2329      	movs	r3, #41	@ 0x29
 80068a4:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80068a8:	4b07      	ldr	r3, [pc, #28]	@ (80068c8 <lcd_init+0x4d50>)
 80068aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068ae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80068b0:	4b05      	ldr	r3, [pc, #20]	@ (80068c8 <lcd_init+0x4d50>)
 80068b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068b6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80068b8:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 80068bc:	b29a      	uxth	r2, r3
 80068be:	4b03      	ldr	r3, [pc, #12]	@ (80068cc <lcd_init+0x4d54>)
 80068c0:	60da      	str	r2, [r3, #12]
 80068c2:	e005      	b.n	80068d0 <lcd_init+0x4d58>
 80068c4:	2000007c 	.word	0x2000007c
 80068c8:	40011000 	.word	0x40011000
 80068cc:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 80068d0:	4b56      	ldr	r3, [pc, #344]	@ (8006a2c <lcd_init+0x4eb4>)
 80068d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068d6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80068d8:	4b54      	ldr	r3, [pc, #336]	@ (8006a2c <lcd_init+0x4eb4>)
 80068da:	2280      	movs	r2, #128	@ 0x80
 80068dc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068de:	4b53      	ldr	r3, [pc, #332]	@ (8006a2c <lcd_init+0x4eb4>)
 80068e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068e4:	611a      	str	r2, [r3, #16]
}
 80068e6:	bf00      	nop
 80068e8:	23d0      	movs	r3, #208	@ 0xd0
 80068ea:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80068ee:	4b4f      	ldr	r3, [pc, #316]	@ (8006a2c <lcd_init+0x4eb4>)
 80068f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068f4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80068f6:	4b4d      	ldr	r3, [pc, #308]	@ (8006a2c <lcd_init+0x4eb4>)
 80068f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068fc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80068fe:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8006902:	b29a      	uxth	r2, r3
 8006904:	4b4a      	ldr	r3, [pc, #296]	@ (8006a30 <lcd_init+0x4eb8>)
 8006906:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006908:	4b48      	ldr	r3, [pc, #288]	@ (8006a2c <lcd_init+0x4eb4>)
 800690a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800690e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006910:	4b46      	ldr	r3, [pc, #280]	@ (8006a2c <lcd_init+0x4eb4>)
 8006912:	2280      	movs	r2, #128	@ 0x80
 8006914:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006916:	4b45      	ldr	r3, [pc, #276]	@ (8006a2c <lcd_init+0x4eb4>)
 8006918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800691c:	611a      	str	r2, [r3, #16]
}
 800691e:	bf00      	nop

        lcd_wr_regno(0x29); /* ������ʾ */
        /* ����PWM���  ����ͨ��ռ�ձȿɵ� */
        lcd_wr_regno(0xD0); /* �����Զ���ƽ��DBC */
        lcd_wr_xdata(0x00); /* disable */
 8006920:	2000      	movs	r0, #0
 8006922:	f7f9 ffed 	bl	8000900 <lcd_wr_xdata>
 8006926:	23be      	movs	r3, #190	@ 0xbe
 8006928:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800692c:	4b3f      	ldr	r3, [pc, #252]	@ (8006a2c <lcd_init+0x4eb4>)
 800692e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006932:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006934:	4b3d      	ldr	r3, [pc, #244]	@ (8006a2c <lcd_init+0x4eb4>)
 8006936:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800693a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800693c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8006940:	b29a      	uxth	r2, r3
 8006942:	4b3b      	ldr	r3, [pc, #236]	@ (8006a30 <lcd_init+0x4eb8>)
 8006944:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006946:	4b39      	ldr	r3, [pc, #228]	@ (8006a2c <lcd_init+0x4eb4>)
 8006948:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800694c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800694e:	4b37      	ldr	r3, [pc, #220]	@ (8006a2c <lcd_init+0x4eb4>)
 8006950:	2280      	movs	r2, #128	@ 0x80
 8006952:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006954:	4b35      	ldr	r3, [pc, #212]	@ (8006a2c <lcd_init+0x4eb4>)
 8006956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800695a:	611a      	str	r2, [r3, #16]
}
 800695c:	bf00      	nop

        lcd_wr_regno(0xBE); /* ����PWM��� */
        lcd_wr_xdata(0x05); /* 1����PWMƵ�� */
 800695e:	2005      	movs	r0, #5
 8006960:	f7f9 ffce 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE); /* 2����PWMռ�ձ� */
 8006964:	20fe      	movs	r0, #254	@ 0xfe
 8006966:	f7f9 ffcb 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* 3����C */
 800696a:	2001      	movs	r0, #1
 800696c:	f7f9 ffc8 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 4����D */
 8006970:	2000      	movs	r0, #0
 8006972:	f7f9 ffc5 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 5����E */
 8006976:	2000      	movs	r0, #0
 8006978:	f7f9 ffc2 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 6����F */
 800697c:	2000      	movs	r0, #0
 800697e:	f7f9 ffbf 	bl	8000900 <lcd_wr_xdata>
 8006982:	23b8      	movs	r3, #184	@ 0xb8
 8006984:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006988:	4b28      	ldr	r3, [pc, #160]	@ (8006a2c <lcd_init+0x4eb4>)
 800698a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800698e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006990:	4b26      	ldr	r3, [pc, #152]	@ (8006a2c <lcd_init+0x4eb4>)
 8006992:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006996:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006998:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 800699c:	b29a      	uxth	r2, r3
 800699e:	4b24      	ldr	r3, [pc, #144]	@ (8006a30 <lcd_init+0x4eb8>)
 80069a0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80069a2:	4b22      	ldr	r3, [pc, #136]	@ (8006a2c <lcd_init+0x4eb4>)
 80069a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80069a8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80069aa:	4b20      	ldr	r3, [pc, #128]	@ (8006a2c <lcd_init+0x4eb4>)
 80069ac:	2280      	movs	r2, #128	@ 0x80
 80069ae:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80069b0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a2c <lcd_init+0x4eb4>)
 80069b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069b6:	611a      	str	r2, [r3, #16]
}
 80069b8:	bf00      	nop

        lcd_wr_regno(0xB8); /* ����GPIO���� */
        lcd_wr_xdata(0x03); /* 2��IO�����ó���� */
 80069ba:	2003      	movs	r0, #3
 80069bc:	f7f9 ffa0 	bl	8000900 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* GPIOʹ��������IO���� */
 80069c0:	2001      	movs	r0, #1
 80069c2:	f7f9 ff9d 	bl	8000900 <lcd_wr_xdata>
 80069c6:	23ba      	movs	r3, #186	@ 0xba
 80069c8:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80069cc:	4b17      	ldr	r3, [pc, #92]	@ (8006a2c <lcd_init+0x4eb4>)
 80069ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069d2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80069d4:	4b15      	ldr	r3, [pc, #84]	@ (8006a2c <lcd_init+0x4eb4>)
 80069d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069da:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80069dc:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	4b13      	ldr	r3, [pc, #76]	@ (8006a30 <lcd_init+0x4eb8>)
 80069e4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80069e6:	4b11      	ldr	r3, [pc, #68]	@ (8006a2c <lcd_init+0x4eb4>)
 80069e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80069ec:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80069ee:	4b0f      	ldr	r3, [pc, #60]	@ (8006a2c <lcd_init+0x4eb4>)
 80069f0:	2280      	movs	r2, #128	@ 0x80
 80069f2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80069f4:	4b0d      	ldr	r3, [pc, #52]	@ (8006a2c <lcd_init+0x4eb4>)
 80069f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069fa:	611a      	str	r2, [r3, #16]
}
 80069fc:	bf00      	nop
        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0X01); /* GPIO[1:0]=01,����LCD���� */
 80069fe:	2001      	movs	r0, #1
 8006a00:	f7f9 ff7e 	bl	8000900 <lcd_wr_xdata>
        lcd_ssd_backlight_set(100); /* ��������Ϊ���� */
 8006a04:	2064      	movs	r0, #100	@ 0x64
 8006a06:	f7fa ff1f 	bl	8001848 <lcd_ssd_backlight_set>
    }

    lcd_display_dir(0); /* Ĭ��Ϊ���� */
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	f7fa ffdc 	bl	80019c8 <lcd_display_dir>
    LCD_BL(1);          /* �������� */
 8006a10:	4b06      	ldr	r3, [pc, #24]	@ (8006a2c <lcd_init+0x4eb4>)
 8006a12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a16:	611a      	str	r2, [r3, #16]
    lcd_clear(WHITE);
 8006a18:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006a1c:	f000 f80a 	bl	8006a34 <lcd_clear>
}
 8006a20:	bf00      	nop
 8006a22:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40011000 	.word	0x40011000
 8006a30:	40010c00 	.word	0x40010c00

08006a34 <lcd_clear>:
 * @brief       ��������
 * @param       color: Ҫ��������ɫ
 * @retval      ��
 */
void lcd_clear(uint16_t color)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
    uint32_t totalpoint = lcddev.width;
 8006a42:	4b27      	ldr	r3, [pc, #156]	@ (8006ae0 <lcd_clear+0xac>)
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	613b      	str	r3, [r7, #16]
    totalpoint *= lcddev.height;    /* �õ��ܵ��� */
 8006a48:	4b25      	ldr	r3, [pc, #148]	@ (8006ae0 <lcd_clear+0xac>)
 8006a4a:	885b      	ldrh	r3, [r3, #2]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	fb02 f303 	mul.w	r3, r2, r3
 8006a54:	613b      	str	r3, [r7, #16]
    lcd_set_cursor(0x00, 0x0000);   /* ���ù��λ�� */
 8006a56:	2100      	movs	r1, #0
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f7fa f80b 	bl	8000a74 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8006a5e:	4b20      	ldr	r3, [pc, #128]	@ (8006ae0 <lcd_clear+0xac>)
 8006a60:	891b      	ldrh	r3, [r3, #8]
 8006a62:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a64:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae4 <lcd_clear+0xb0>)
 8006a66:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a6a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ae4 <lcd_clear+0xb0>)
 8006a6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a72:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a74:	89fb      	ldrh	r3, [r7, #14]
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae8 <lcd_clear+0xb4>)
 8006a7a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a7c:	4b19      	ldr	r3, [pc, #100]	@ (8006ae4 <lcd_clear+0xb0>)
 8006a7e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a82:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a84:	4b17      	ldr	r3, [pc, #92]	@ (8006ae4 <lcd_clear+0xb0>)
 8006a86:	2280      	movs	r2, #128	@ 0x80
 8006a88:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a8a:	4b16      	ldr	r3, [pc, #88]	@ (8006ae4 <lcd_clear+0xb0>)
 8006a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a90:	611a      	str	r2, [r3, #16]
}
 8006a92:	bf00      	nop
}
 8006a94:	bf00      	nop
     * RS, CS�Ĳ���, �Ӷ������ٶ�, ��51֡��ߵ�78֡����, ���50%
     * ��������: -O2�Ż�, ��ˢ��
     * �����ٶ�Ҫ���ʱ��, ���Լ����Ż�: lcd_fill, lcd_color_fill, 
     * lcd_set_cursor �� lcd_draw_point �Ⱥ���, ��ҿ��������Ż�
     */
    LCD_RS(1);                      /* RS=1,��ʾд���� */
 8006a96:	4b13      	ldr	r3, [pc, #76]	@ (8006ae4 <lcd_clear+0xb0>)
 8006a98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a9c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a9e:	4b11      	ldr	r3, [pc, #68]	@ (8006ae4 <lcd_clear+0xb0>)
 8006aa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006aa4:	611a      	str	r2, [r3, #16]
    
    for (index = 0; index < totalpoint; index++)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	e00c      	b.n	8006ac6 <lcd_clear+0x92>
    {
        LCD_DATA_OUT(color);        /* д��Ҫд������ */
 8006aac:	4a0e      	ldr	r2, [pc, #56]	@ (8006ae8 <lcd_clear+0xb4>)
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	60d3      	str	r3, [r2, #12]
        LCD_WR(0);
 8006ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <lcd_clear+0xb0>)
 8006ab4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006ab8:	611a      	str	r2, [r3, #16]
        LCD_WR(1);
 8006aba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae4 <lcd_clear+0xb0>)
 8006abc:	2280      	movs	r2, #128	@ 0x80
 8006abe:	611a      	str	r2, [r3, #16]
    for (index = 0; index < totalpoint; index++)
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d3ee      	bcc.n	8006aac <lcd_clear+0x78>
    }
    
    LCD_CS(1);
 8006ace:	4b05      	ldr	r3, [pc, #20]	@ (8006ae4 <lcd_clear+0xb0>)
 8006ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ad4:	611a      	str	r2, [r3, #16]
}
 8006ad6:	bf00      	nop
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	2000007c 	.word	0x2000007c
 8006ae4:	40011000 	.word	0x40011000
 8006ae8:	40010c00 	.word	0x40010c00

08006aec <lcd_show_char>:
 * @param       mode : ���ӷ�ʽ(1); �ǵ��ӷ�ʽ(0);
 * @param       color : �ַ�����ɫ;
 * @retval      ��
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8006aec:	b590      	push	{r4, r7, lr}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4604      	mov	r4, r0
 8006af4:	4608      	mov	r0, r1
 8006af6:	4611      	mov	r1, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	4623      	mov	r3, r4
 8006afc:	80fb      	strh	r3, [r7, #6]
 8006afe:	4603      	mov	r3, r0
 8006b00:	80bb      	strh	r3, [r7, #4]
 8006b02:	460b      	mov	r3, r1
 8006b04:	70fb      	strb	r3, [r7, #3]
 8006b06:	4613      	mov	r3, r2
 8006b08:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8006b0a:	88bb      	ldrh	r3, [r7, #4]
 8006b0c:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* �õ�����һ���ַ���Ӧ������ռ���ֽ��� */
 8006b16:	78bb      	ldrb	r3, [r7, #2]
 8006b18:	08db      	lsrs	r3, r3, #3
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	78bb      	ldrb	r3, [r7, #2]
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bf14      	ite	ne
 8006b2a:	2301      	movne	r3, #1
 8006b2c:	2300      	moveq	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	4413      	add	r3, r2
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	78ba      	ldrb	r2, [r7, #2]
 8006b36:	0852      	lsrs	r2, r2, #1
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* �õ�ƫ�ƺ��ֵ��ASCII�ֿ��Ǵӿո�ʼȡģ������-' '���Ƕ�Ӧ�ַ����ֿ⣩ */
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	3b20      	subs	r3, #32
 8006b44:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8006b46:	78bb      	ldrb	r3, [r7, #2]
 8006b48:	3b0c      	subs	r3, #12
 8006b4a:	2b14      	cmp	r3, #20
 8006b4c:	f200 8099 	bhi.w	8006c82 <lcd_show_char+0x196>
 8006b50:	a201      	add	r2, pc, #4	@ (adr r2, 8006b58 <lcd_show_char+0x6c>)
 8006b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b56:	bf00      	nop
 8006b58:	08006bad 	.word	0x08006bad
 8006b5c:	08006c83 	.word	0x08006c83
 8006b60:	08006c83 	.word	0x08006c83
 8006b64:	08006c83 	.word	0x08006c83
 8006b68:	08006bbf 	.word	0x08006bbf
 8006b6c:	08006c83 	.word	0x08006c83
 8006b70:	08006c83 	.word	0x08006c83
 8006b74:	08006c83 	.word	0x08006c83
 8006b78:	08006c83 	.word	0x08006c83
 8006b7c:	08006c83 	.word	0x08006c83
 8006b80:	08006c83 	.word	0x08006c83
 8006b84:	08006c83 	.word	0x08006c83
 8006b88:	08006bcb 	.word	0x08006bcb
 8006b8c:	08006c83 	.word	0x08006c83
 8006b90:	08006c83 	.word	0x08006c83
 8006b94:	08006c83 	.word	0x08006c83
 8006b98:	08006c83 	.word	0x08006c83
 8006b9c:	08006c83 	.word	0x08006c83
 8006ba0:	08006c83 	.word	0x08006c83
 8006ba4:	08006c83 	.word	0x08006c83
 8006ba8:	08006bdd 	.word	0x08006bdd
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* ����1206���� */
 8006bac:	78fa      	ldrb	r2, [r7, #3]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4a36      	ldr	r2, [pc, #216]	@ (8006c90 <lcd_show_char+0x1a4>)
 8006bb8:	4413      	add	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
            break;
 8006bbc:	e014      	b.n	8006be8 <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* ����1608���� */
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	4a34      	ldr	r2, [pc, #208]	@ (8006c94 <lcd_show_char+0x1a8>)
 8006bc4:	4413      	add	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
            break;
 8006bc8:	e00e      	b.n	8006be8 <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* ����2412���� */
 8006bca:	78fa      	ldrb	r2, [r7, #3]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4a30      	ldr	r2, [pc, #192]	@ (8006c98 <lcd_show_char+0x1ac>)
 8006bd6:	4413      	add	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
            break;
 8006bda:	e005      	b.n	8006be8 <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* ����3216���� */
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	019b      	lsls	r3, r3, #6
 8006be0:	4a2e      	ldr	r2, [pc, #184]	@ (8006c9c <lcd_show_char+0x1b0>)
 8006be2:	4413      	add	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
            break;
 8006be6:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 8006be8:	2300      	movs	r3, #0
 8006bea:	757b      	strb	r3, [r7, #21]
 8006bec:	e044      	b.n	8006c78 <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* ��ȡ�ַ��ĵ������� */
 8006bee:	7d7b      	ldrb	r3, [r7, #21]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	75bb      	strb	r3, [r7, #22]
 8006bfc:	e034      	b.n	8006c68 <lcd_show_char+0x17c>
        {
            if (temp & 0x80)        /* ��Ч��,��Ҫ��ʾ */
 8006bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	da06      	bge.n	8006c14 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* �������,Ҫ��ʾ����� */
 8006c06:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006c08:	88b9      	ldrh	r1, [r7, #4]
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fa fdd1 	bl	80017b4 <lcd_draw_point>
 8006c12:	e00a      	b.n	8006c2a <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* ��Ч��,����ʾ */
 8006c14:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d106      	bne.n	8006c2a <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* ������ɫ,�൱������㲻��ʾ(ע�ⱳ��ɫ��ȫ�ֱ�������) */
 8006c1c:	4b20      	ldr	r3, [pc, #128]	@ (8006ca0 <lcd_show_char+0x1b4>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	88b9      	ldrh	r1, [r7, #4]
 8006c22:	88fb      	ldrh	r3, [r7, #6]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fa fdc5 	bl	80017b4 <lcd_draw_point>
            }

            temp <<= 1; /* ��λ, �Ա��ȡ��һ��λ��״̬ */
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	75fb      	strb	r3, [r7, #23]
            y++;
 8006c30:	88bb      	ldrh	r3, [r7, #4]
 8006c32:	3301      	adds	r3, #1
 8006c34:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* �������� */
 8006c36:	4b1b      	ldr	r3, [pc, #108]	@ (8006ca4 <lcd_show_char+0x1b8>)
 8006c38:	885b      	ldrh	r3, [r3, #2]
 8006c3a:	88ba      	ldrh	r2, [r7, #4]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d222      	bcs.n	8006c86 <lcd_show_char+0x19a>

            if ((y - y0) == size)   /* ��ʾ��һ����? */
 8006c40:	88ba      	ldrh	r2, [r7, #4]
 8006c42:	89fb      	ldrh	r3, [r7, #14]
 8006c44:	1ad2      	subs	r2, r2, r3
 8006c46:	78bb      	ldrb	r3, [r7, #2]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d10a      	bne.n	8006c62 <lcd_show_char+0x176>
            {
                y = y0; /* y���긴λ */
 8006c4c:	89fb      	ldrh	r3, [r7, #14]
 8006c4e:	80bb      	strh	r3, [r7, #4]
                x++;    /* x������� */
 8006c50:	88fb      	ldrh	r3, [r7, #6]
 8006c52:	3301      	adds	r3, #1
 8006c54:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   /* x���곬������ */
 8006c56:	4b13      	ldr	r3, [pc, #76]	@ (8006ca4 <lcd_show_char+0x1b8>)
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d307      	bcc.n	8006c70 <lcd_show_char+0x184>
 8006c60:	e012      	b.n	8006c88 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 8006c62:	7dbb      	ldrb	r3, [r7, #22]
 8006c64:	3301      	adds	r3, #1
 8006c66:	75bb      	strb	r3, [r7, #22]
 8006c68:	7dbb      	ldrb	r3, [r7, #22]
 8006c6a:	2b07      	cmp	r3, #7
 8006c6c:	d9c7      	bls.n	8006bfe <lcd_show_char+0x112>
 8006c6e:	e000      	b.n	8006c72 <lcd_show_char+0x186>

                break;
 8006c70:	bf00      	nop
    for (t = 0; t < csize; t++)
 8006c72:	7d7b      	ldrb	r3, [r7, #21]
 8006c74:	3301      	adds	r3, #1
 8006c76:	757b      	strb	r3, [r7, #21]
 8006c78:	7d7a      	ldrb	r2, [r7, #21]
 8006c7a:	7b7b      	ldrb	r3, [r7, #13]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d3b6      	bcc.n	8006bee <lcd_show_char+0x102>
 8006c80:	e002      	b.n	8006c88 <lcd_show_char+0x19c>
            return ;
 8006c82:	bf00      	nop
 8006c84:	e000      	b.n	8006c88 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* �������� */
 8006c86:	bf00      	nop
            }
        }
    }
}
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd90      	pop	{r4, r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	080091e0 	.word	0x080091e0
 8006c94:	08009654 	.word	0x08009654
 8006c98:	08009c44 	.word	0x08009c44
 8006c9c:	0800a9a0 	.word	0x0800a9a0
 8006ca0:	20000000 	.word	0x20000000
 8006ca4:	2000007c 	.word	0x2000007c

08006ca8 <lcd_show_string>:
 * @param       p           : �ַ����׵�ַ
 * @param       color       : �ַ�������ɫ;
 * @retval      ��
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8006ca8:	b590      	push	{r4, r7, lr}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af02      	add	r7, sp, #8
 8006cae:	4604      	mov	r4, r0
 8006cb0:	4608      	mov	r0, r1
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4623      	mov	r3, r4
 8006cb8:	80fb      	strh	r3, [r7, #6]
 8006cba:	4603      	mov	r3, r0
 8006cbc:	80bb      	strh	r3, [r7, #4]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	807b      	strh	r3, [r7, #2]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	73fb      	strb	r3, [r7, #15]
    width += x;
 8006cca:	887a      	ldrh	r2, [r7, #2]
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	4413      	add	r3, r2
 8006cd0:	807b      	strh	r3, [r7, #2]
    height += y;
 8006cd2:	883a      	ldrh	r2, [r7, #0]
 8006cd4:	88bb      	ldrh	r3, [r7, #4]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 8006cda:	e027      	b.n	8006d2c <lcd_show_string+0x84>
    {
        if (x >= width)
 8006cdc:	88fa      	ldrh	r2, [r7, #6]
 8006cde:	887b      	ldrh	r3, [r7, #2]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d307      	bcc.n	8006cf4 <lcd_show_string+0x4c>
        {
            x = x0;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	80fb      	strh	r3, [r7, #6]
            y += size;
 8006ce8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	88bb      	ldrh	r3, [r7, #4]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* �˳� */
 8006cf4:	88ba      	ldrh	r2, [r7, #4]
 8006cf6:	883b      	ldrh	r3, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d220      	bcs.n	8006d3e <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	781a      	ldrb	r2, [r3, #0]
 8006d00:	f897 4020 	ldrb.w	r4, [r7, #32]
 8006d04:	88b9      	ldrh	r1, [r7, #4]
 8006d06:	88f8      	ldrh	r0, [r7, #6]
 8006d08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	4623      	mov	r3, r4
 8006d12:	f7ff feeb 	bl	8006aec <lcd_show_char>
        x += size / 2;
 8006d16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	461a      	mov	r2, r3
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	4413      	add	r3, r2
 8006d24:	80fb      	strh	r3, [r7, #6]
        p++;
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	3301      	adds	r3, #1
 8006d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b7e      	cmp	r3, #126	@ 0x7e
 8006d32:	d805      	bhi.n	8006d40 <lcd_show_string+0x98>
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b1f      	cmp	r3, #31
 8006d3a:	d8cf      	bhi.n	8006cdc <lcd_show_string+0x34>
    }
}
 8006d3c:	e000      	b.n	8006d40 <lcd_show_string+0x98>
        if (y >= height)break;  /* �˳� */
 8006d3e:	bf00      	nop
}
 8006d40:	bf00      	nop
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd90      	pop	{r4, r7, pc}

08006d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006d4e:	f000 fa09 	bl	8007164 <HAL_Init>

  /* USER CODE BEGIN Init */
  lcd_init();
 8006d52:	f7fa ff11 	bl	8001b78 <lcd_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006d56:	f000 f845 	bl	8006de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006d5a:	f7f9 fd6b 	bl	8000834 <MX_GPIO_Init>
  MX_TIM3_Init();
 8006d5e:	f000 f967 	bl	8007030 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8006d62:	481a      	ldr	r0, [pc, #104]	@ (8006dcc <main+0x84>)
 8006d64:	f001 f99c 	bl	80080a0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_show_string(10,lcddev.height/10+60,200,24,24,"Digital Counter Demo",BLACK);
 8006d68:	4b19      	ldr	r3, [pc, #100]	@ (8006dd0 <main+0x88>)
 8006d6a:	885b      	ldrh	r3, [r3, #2]
 8006d6c:	4a19      	ldr	r2, [pc, #100]	@ (8006dd4 <main+0x8c>)
 8006d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d72:	08db      	lsrs	r3, r3, #3
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	333c      	adds	r3, #60	@ 0x3c
 8006d78:	b299      	uxth	r1, r3
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	9302      	str	r3, [sp, #8]
 8006d7e:	4b16      	ldr	r3, [pc, #88]	@ (8006dd8 <main+0x90>)
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	2318      	movs	r3, #24
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	2318      	movs	r3, #24
 8006d88:	22c8      	movs	r2, #200	@ 0xc8
 8006d8a:	200a      	movs	r0, #10
 8006d8c:	f7ff ff8c 	bl	8006ca8 <lcd_show_string>
	  char temp[10];
	  sprintf(temp,"%d",cnt);
 8006d90:	4b12      	ldr	r3, [pc, #72]	@ (8006ddc <main+0x94>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	1d3b      	adds	r3, r7, #4
 8006d98:	4911      	ldr	r1, [pc, #68]	@ (8006de0 <main+0x98>)
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f001 fd56 	bl	800884c <siprintf>
	  lcd_show_string(10,lcddev.height/10+200,200,24,24,temp,BLACK);
 8006da0:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd0 <main+0x88>)
 8006da2:	885b      	ldrh	r3, [r3, #2]
 8006da4:	4a0b      	ldr	r2, [pc, #44]	@ (8006dd4 <main+0x8c>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	08db      	lsrs	r3, r3, #3
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	33c8      	adds	r3, #200	@ 0xc8
 8006db0:	b299      	uxth	r1, r3
 8006db2:	2300      	movs	r3, #0
 8006db4:	9302      	str	r3, [sp, #8]
 8006db6:	1d3b      	adds	r3, r7, #4
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	2318      	movs	r3, #24
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	2318      	movs	r3, #24
 8006dc0:	22c8      	movs	r2, #200	@ 0xc8
 8006dc2:	200a      	movs	r0, #10
 8006dc4:	f7ff ff70 	bl	8006ca8 <lcd_show_string>
  {
 8006dc8:	bf00      	nop
 8006dca:	e7cd      	b.n	8006d68 <main+0x20>
 8006dcc:	20000090 	.word	0x20000090
 8006dd0:	2000007c 	.word	0x2000007c
 8006dd4:	cccccccd 	.word	0xcccccccd
 8006dd8:	080091c4 	.word	0x080091c4
 8006ddc:	2000008a 	.word	0x2000008a
 8006de0:	080091dc 	.word	0x080091dc

08006de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b090      	sub	sp, #64	@ 0x40
 8006de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006dea:	f107 0318 	add.w	r3, r7, #24
 8006dee:	2228      	movs	r2, #40	@ 0x28
 8006df0:	2100      	movs	r1, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 fd4a 	bl	800888c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006df8:	1d3b      	adds	r3, r7, #4
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	605a      	str	r2, [r3, #4]
 8006e00:	609a      	str	r2, [r3, #8]
 8006e02:	60da      	str	r2, [r3, #12]
 8006e04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006e06:	2301      	movs	r3, #1
 8006e08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006e0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006e10:	2300      	movs	r3, #0
 8006e12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006e14:	2301      	movs	r3, #1
 8006e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006e22:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8006e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e28:	f107 0318 	add.w	r3, r7, #24
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 fd09 	bl	8007844 <HAL_RCC_OscConfig>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006e38:	f000 f84e 	bl	8006ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e3c:	230f      	movs	r3, #15
 8006e3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e40:	2302      	movs	r3, #2
 8006e42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006e48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006e52:	1d3b      	adds	r3, r7, #4
 8006e54:	2102      	movs	r1, #2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 ff76 	bl	8007d48 <HAL_RCC_ClockConfig>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006e62:	f000 f839 	bl	8006ed8 <Error_Handler>
  }
}
 8006e66:	bf00      	nop
 8006e68:	3740      	adds	r7, #64	@ 0x40
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a12      	ldr	r2, [pc, #72]	@ (8006ec4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d11d      	bne.n	8006ebc <HAL_TIM_PeriodElapsedCallback+0x4c>
		 HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8006e80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006e84:	4810      	ldr	r0, [pc, #64]	@ (8006ec8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8006e86:	f000 fcc4 	bl	8007812 <HAL_GPIO_TogglePin>
		 lcd_clear(WHITE);g_back_color = WHITE;
 8006e8a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006e8e:	f7ff fdd1 	bl	8006a34 <lcd_clear>
 8006e92:	4b0e      	ldr	r3, [pc, #56]	@ (8006ecc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8006e94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e98:	601a      	str	r2, [r3, #0]
		 if(HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin) == GPIO_PIN_RESET){
 8006e9a:	2120      	movs	r1, #32
 8006e9c:	480c      	ldr	r0, [pc, #48]	@ (8006ed0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006e9e:	f000 fc89 	bl	80077b4 <HAL_GPIO_ReadPin>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d103      	bne.n	8006eb0 <HAL_TIM_PeriodElapsedCallback+0x40>
			 cnt = 0;
 8006ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	701a      	strb	r2, [r3, #0]
		 }
		 else{cnt ++;}
//		 cnt++;
	}
}
 8006eae:	e005      	b.n	8006ebc <HAL_TIM_PeriodElapsedCallback+0x4c>
		 else{cnt ++;}
 8006eb0:	4b08      	ldr	r3, [pc, #32]	@ (8006ed4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	4b06      	ldr	r3, [pc, #24]	@ (8006ed4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8006eba:	701a      	strb	r2, [r3, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000090 	.word	0x20000090
 8006ec8:	40010800 	.word	0x40010800
 8006ecc:	20000000 	.word	0x20000000
 8006ed0:	40011000 	.word	0x40011000
 8006ed4:	2000008a 	.word	0x2000008a

08006ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006edc:	b672      	cpsid	i
}
 8006ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006ee0:	bf00      	nop
 8006ee2:	e7fd      	b.n	8006ee0 <Error_Handler+0x8>

08006ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006eea:	4b16      	ldr	r3, [pc, #88]	@ (8006f44 <HAL_MspInit+0x60>)
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	4a15      	ldr	r2, [pc, #84]	@ (8006f44 <HAL_MspInit+0x60>)
 8006ef0:	f043 0301 	orr.w	r3, r3, #1
 8006ef4:	6193      	str	r3, [r2, #24]
 8006ef6:	4b13      	ldr	r3, [pc, #76]	@ (8006f44 <HAL_MspInit+0x60>)
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	60bb      	str	r3, [r7, #8]
 8006f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f02:	4b10      	ldr	r3, [pc, #64]	@ (8006f44 <HAL_MspInit+0x60>)
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	4a0f      	ldr	r2, [pc, #60]	@ (8006f44 <HAL_MspInit+0x60>)
 8006f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f0c:	61d3      	str	r3, [r2, #28]
 8006f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f44 <HAL_MspInit+0x60>)
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f16:	607b      	str	r3, [r7, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8006f1a:	2005      	movs	r0, #5
 8006f1c:	f000 fa74 	bl	8007408 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006f20:	4b09      	ldr	r3, [pc, #36]	@ (8006f48 <HAL_MspInit+0x64>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f34:	60fb      	str	r3, [r7, #12]
 8006f36:	4a04      	ldr	r2, [pc, #16]	@ (8006f48 <HAL_MspInit+0x64>)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f3c:	bf00      	nop
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	40021000 	.word	0x40021000
 8006f48:	40010000 	.word	0x40010000

08006f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006f50:	bf00      	nop
 8006f52:	e7fd      	b.n	8006f50 <NMI_Handler+0x4>

08006f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f58:	bf00      	nop
 8006f5a:	e7fd      	b.n	8006f58 <HardFault_Handler+0x4>

08006f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f60:	bf00      	nop
 8006f62:	e7fd      	b.n	8006f60 <MemManage_Handler+0x4>

08006f64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f68:	bf00      	nop
 8006f6a:	e7fd      	b.n	8006f68 <BusFault_Handler+0x4>

08006f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f70:	bf00      	nop
 8006f72:	e7fd      	b.n	8006f70 <UsageFault_Handler+0x4>

08006f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f78:	bf00      	nop
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr

08006f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f84:	bf00      	nop
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr

08006f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f90:	bf00      	nop
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr

08006f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f9c:	f000 f928 	bl	80071f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fa0:	bf00      	nop
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006fa8:	4802      	ldr	r0, [pc, #8]	@ (8006fb4 <TIM3_IRQHandler+0x10>)
 8006faa:	f001 f8d9 	bl	8008160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006fae:	bf00      	nop
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20000090 	.word	0x20000090

08006fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006fc0:	4a14      	ldr	r2, [pc, #80]	@ (8007014 <_sbrk+0x5c>)
 8006fc2:	4b15      	ldr	r3, [pc, #84]	@ (8007018 <_sbrk+0x60>)
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006fcc:	4b13      	ldr	r3, [pc, #76]	@ (800701c <_sbrk+0x64>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006fd4:	4b11      	ldr	r3, [pc, #68]	@ (800701c <_sbrk+0x64>)
 8006fd6:	4a12      	ldr	r2, [pc, #72]	@ (8007020 <_sbrk+0x68>)
 8006fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006fda:	4b10      	ldr	r3, [pc, #64]	@ (800701c <_sbrk+0x64>)
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d207      	bcs.n	8006ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006fe8:	f001 fc58 	bl	800889c <__errno>
 8006fec:	4603      	mov	r3, r0
 8006fee:	220c      	movs	r2, #12
 8006ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff6:	e009      	b.n	800700c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ff8:	4b08      	ldr	r3, [pc, #32]	@ (800701c <_sbrk+0x64>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006ffe:	4b07      	ldr	r3, [pc, #28]	@ (800701c <_sbrk+0x64>)
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4413      	add	r3, r2
 8007006:	4a05      	ldr	r2, [pc, #20]	@ (800701c <_sbrk+0x64>)
 8007008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800700a:	68fb      	ldr	r3, [r7, #12]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	2000c000 	.word	0x2000c000
 8007018:	00000400 	.word	0x00000400
 800701c:	2000008c 	.word	0x2000008c
 8007020:	20000228 	.word	0x20000228

08007024 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007028:	bf00      	nop
 800702a:	46bd      	mov	sp, r7
 800702c:	bc80      	pop	{r7}
 800702e:	4770      	bx	lr

08007030 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007036:	f107 0308 	add.w	r3, r7, #8
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	605a      	str	r2, [r3, #4]
 8007040:	609a      	str	r2, [r3, #8]
 8007042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007044:	463b      	mov	r3, r7
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800704c:	4b1d      	ldr	r3, [pc, #116]	@ (80070c4 <MX_TIM3_Init+0x94>)
 800704e:	4a1e      	ldr	r2, [pc, #120]	@ (80070c8 <MX_TIM3_Init+0x98>)
 8007050:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8007052:	4b1c      	ldr	r3, [pc, #112]	@ (80070c4 <MX_TIM3_Init+0x94>)
 8007054:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8007058:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800705a:	4b1a      	ldr	r3, [pc, #104]	@ (80070c4 <MX_TIM3_Init+0x94>)
 800705c:	2200      	movs	r2, #0
 800705e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8007060:	4b18      	ldr	r3, [pc, #96]	@ (80070c4 <MX_TIM3_Init+0x94>)
 8007062:	f241 3287 	movw	r2, #4999	@ 0x1387
 8007066:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007068:	4b16      	ldr	r3, [pc, #88]	@ (80070c4 <MX_TIM3_Init+0x94>)
 800706a:	2200      	movs	r2, #0
 800706c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800706e:	4b15      	ldr	r3, [pc, #84]	@ (80070c4 <MX_TIM3_Init+0x94>)
 8007070:	2200      	movs	r2, #0
 8007072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007074:	4813      	ldr	r0, [pc, #76]	@ (80070c4 <MX_TIM3_Init+0x94>)
 8007076:	f000 ffc3 	bl	8008000 <HAL_TIM_Base_Init>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007080:	f7ff ff2a 	bl	8006ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800708a:	f107 0308 	add.w	r3, r7, #8
 800708e:	4619      	mov	r1, r3
 8007090:	480c      	ldr	r0, [pc, #48]	@ (80070c4 <MX_TIM3_Init+0x94>)
 8007092:	f001 f955 	bl	8008340 <HAL_TIM_ConfigClockSource>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800709c:	f7ff ff1c 	bl	8006ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80070a0:	2300      	movs	r3, #0
 80070a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070a4:	2300      	movs	r3, #0
 80070a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80070a8:	463b      	mov	r3, r7
 80070aa:	4619      	mov	r1, r3
 80070ac:	4805      	ldr	r0, [pc, #20]	@ (80070c4 <MX_TIM3_Init+0x94>)
 80070ae:	f001 fb4f 	bl	8008750 <HAL_TIMEx_MasterConfigSynchronization>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80070b8:	f7ff ff0e 	bl	8006ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80070bc:	bf00      	nop
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20000090 	.word	0x20000090
 80070c8:	40000400 	.word	0x40000400

080070cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a0d      	ldr	r2, [pc, #52]	@ (8007110 <HAL_TIM_Base_MspInit+0x44>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d113      	bne.n	8007106 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80070de:	4b0d      	ldr	r3, [pc, #52]	@ (8007114 <HAL_TIM_Base_MspInit+0x48>)
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007114 <HAL_TIM_Base_MspInit+0x48>)
 80070e4:	f043 0302 	orr.w	r3, r3, #2
 80070e8:	61d3      	str	r3, [r2, #28]
 80070ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007114 <HAL_TIM_Base_MspInit+0x48>)
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80070f6:	2200      	movs	r2, #0
 80070f8:	2101      	movs	r1, #1
 80070fa:	201d      	movs	r0, #29
 80070fc:	f000 f98f 	bl	800741e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007100:	201d      	movs	r0, #29
 8007102:	f000 f9a8 	bl	8007456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	40000400 	.word	0x40000400
 8007114:	40021000 	.word	0x40021000

08007118 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007118:	f7ff ff84 	bl	8007024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800711c:	480b      	ldr	r0, [pc, #44]	@ (800714c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800711e:	490c      	ldr	r1, [pc, #48]	@ (8007150 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007120:	4a0c      	ldr	r2, [pc, #48]	@ (8007154 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007124:	e002      	b.n	800712c <LoopCopyDataInit>

08007126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800712a:	3304      	adds	r3, #4

0800712c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800712c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800712e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007130:	d3f9      	bcc.n	8007126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007132:	4a09      	ldr	r2, [pc, #36]	@ (8007158 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007134:	4c09      	ldr	r4, [pc, #36]	@ (800715c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007138:	e001      	b.n	800713e <LoopFillZerobss>

0800713a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800713a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800713c:	3204      	adds	r2, #4

0800713e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800713e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007140:	d3fb      	bcc.n	800713a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007142:	f001 fbb1 	bl	80088a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007146:	f7ff fdff 	bl	8006d48 <main>
  bx lr
 800714a:	4770      	bx	lr
  ldr r0, =_sdata
 800714c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007150:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8007154:	0800c1c0 	.word	0x0800c1c0
  ldr r2, =_sbss
 8007158:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800715c:	20000224 	.word	0x20000224

08007160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007160:	e7fe      	b.n	8007160 <ADC1_2_IRQHandler>
	...

08007164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007168:	4b08      	ldr	r3, [pc, #32]	@ (800718c <HAL_Init+0x28>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a07      	ldr	r2, [pc, #28]	@ (800718c <HAL_Init+0x28>)
 800716e:	f043 0310 	orr.w	r3, r3, #16
 8007172:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007174:	2003      	movs	r0, #3
 8007176:	f000 f947 	bl	8007408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800717a:	2000      	movs	r0, #0
 800717c:	f000 f808 	bl	8007190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007180:	f7ff feb0 	bl	8006ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40022000 	.word	0x40022000

08007190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007198:	4b12      	ldr	r3, [pc, #72]	@ (80071e4 <HAL_InitTick+0x54>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	4b12      	ldr	r3, [pc, #72]	@ (80071e8 <HAL_InitTick+0x58>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	4619      	mov	r1, r3
 80071a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80071a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80071aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 f95f 	bl	8007472 <HAL_SYSTICK_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e00e      	b.n	80071dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b0f      	cmp	r3, #15
 80071c2:	d80a      	bhi.n	80071da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80071c4:	2200      	movs	r2, #0
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295
 80071cc:	f000 f927 	bl	800741e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80071d0:	4a06      	ldr	r2, [pc, #24]	@ (80071ec <HAL_InitTick+0x5c>)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e000      	b.n	80071dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20000004 	.word	0x20000004
 80071e8:	2000000c 	.word	0x2000000c
 80071ec:	20000008 	.word	0x20000008

080071f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071f0:	b480      	push	{r7}
 80071f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80071f4:	4b05      	ldr	r3, [pc, #20]	@ (800720c <HAL_IncTick+0x1c>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	4b05      	ldr	r3, [pc, #20]	@ (8007210 <HAL_IncTick+0x20>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4413      	add	r3, r2
 8007200:	4a03      	ldr	r2, [pc, #12]	@ (8007210 <HAL_IncTick+0x20>)
 8007202:	6013      	str	r3, [r2, #0]
}
 8007204:	bf00      	nop
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr
 800720c:	2000000c 	.word	0x2000000c
 8007210:	200000d8 	.word	0x200000d8

08007214 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007214:	b480      	push	{r7}
 8007216:	af00      	add	r7, sp, #0
  return uwTick;
 8007218:	4b02      	ldr	r3, [pc, #8]	@ (8007224 <HAL_GetTick+0x10>)
 800721a:	681b      	ldr	r3, [r3, #0]
}
 800721c:	4618      	mov	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr
 8007224:	200000d8 	.word	0x200000d8

08007228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007230:	f7ff fff0 	bl	8007214 <HAL_GetTick>
 8007234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007240:	d005      	beq.n	800724e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007242:	4b0a      	ldr	r3, [pc, #40]	@ (800726c <HAL_Delay+0x44>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800724e:	bf00      	nop
 8007250:	f7ff ffe0 	bl	8007214 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	429a      	cmp	r2, r3
 800725e:	d8f7      	bhi.n	8007250 <HAL_Delay+0x28>
  {
  }
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	2000000c 	.word	0x2000000c

08007270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007280:	4b0c      	ldr	r3, [pc, #48]	@ (80072b4 <__NVIC_SetPriorityGrouping+0x44>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800728c:	4013      	ands	r3, r2
 800728e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007298:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800729c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072a2:	4a04      	ldr	r2, [pc, #16]	@ (80072b4 <__NVIC_SetPriorityGrouping+0x44>)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	60d3      	str	r3, [r2, #12]
}
 80072a8:	bf00      	nop
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bc80      	pop	{r7}
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	e000ed00 	.word	0xe000ed00

080072b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072bc:	4b04      	ldr	r3, [pc, #16]	@ (80072d0 <__NVIC_GetPriorityGrouping+0x18>)
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	f003 0307 	and.w	r3, r3, #7
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bc80      	pop	{r7}
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	e000ed00 	.word	0xe000ed00

080072d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	4603      	mov	r3, r0
 80072dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	db0b      	blt.n	80072fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	f003 021f 	and.w	r2, r3, #31
 80072ec:	4906      	ldr	r1, [pc, #24]	@ (8007308 <__NVIC_EnableIRQ+0x34>)
 80072ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	2001      	movs	r0, #1
 80072f6:	fa00 f202 	lsl.w	r2, r0, r2
 80072fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	bc80      	pop	{r7}
 8007306:	4770      	bx	lr
 8007308:	e000e100 	.word	0xe000e100

0800730c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	6039      	str	r1, [r7, #0]
 8007316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800731c:	2b00      	cmp	r3, #0
 800731e:	db0a      	blt.n	8007336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	b2da      	uxtb	r2, r3
 8007324:	490c      	ldr	r1, [pc, #48]	@ (8007358 <__NVIC_SetPriority+0x4c>)
 8007326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800732a:	0112      	lsls	r2, r2, #4
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	440b      	add	r3, r1
 8007330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007334:	e00a      	b.n	800734c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	b2da      	uxtb	r2, r3
 800733a:	4908      	ldr	r1, [pc, #32]	@ (800735c <__NVIC_SetPriority+0x50>)
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	3b04      	subs	r3, #4
 8007344:	0112      	lsls	r2, r2, #4
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	440b      	add	r3, r1
 800734a:	761a      	strb	r2, [r3, #24]
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	bc80      	pop	{r7}
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	e000e100 	.word	0xe000e100
 800735c:	e000ed00 	.word	0xe000ed00

08007360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007360:	b480      	push	{r7}
 8007362:	b089      	sub	sp, #36	@ 0x24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	f1c3 0307 	rsb	r3, r3, #7
 800737a:	2b04      	cmp	r3, #4
 800737c:	bf28      	it	cs
 800737e:	2304      	movcs	r3, #4
 8007380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	3304      	adds	r3, #4
 8007386:	2b06      	cmp	r3, #6
 8007388:	d902      	bls.n	8007390 <NVIC_EncodePriority+0x30>
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	3b03      	subs	r3, #3
 800738e:	e000      	b.n	8007392 <NVIC_EncodePriority+0x32>
 8007390:	2300      	movs	r3, #0
 8007392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007394:	f04f 32ff 	mov.w	r2, #4294967295
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	43da      	mvns	r2, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	401a      	ands	r2, r3
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073a8:	f04f 31ff 	mov.w	r1, #4294967295
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	fa01 f303 	lsl.w	r3, r1, r3
 80073b2:	43d9      	mvns	r1, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073b8:	4313      	orrs	r3, r2
         );
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3724      	adds	r7, #36	@ 0x24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr

080073c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073d4:	d301      	bcc.n	80073da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80073d6:	2301      	movs	r3, #1
 80073d8:	e00f      	b.n	80073fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80073da:	4a0a      	ldr	r2, [pc, #40]	@ (8007404 <SysTick_Config+0x40>)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3b01      	subs	r3, #1
 80073e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80073e2:	210f      	movs	r1, #15
 80073e4:	f04f 30ff 	mov.w	r0, #4294967295
 80073e8:	f7ff ff90 	bl	800730c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80073ec:	4b05      	ldr	r3, [pc, #20]	@ (8007404 <SysTick_Config+0x40>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80073f2:	4b04      	ldr	r3, [pc, #16]	@ (8007404 <SysTick_Config+0x40>)
 80073f4:	2207      	movs	r2, #7
 80073f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	e000e010 	.word	0xe000e010

08007408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7ff ff2d 	bl	8007270 <__NVIC_SetPriorityGrouping>
}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800741e:	b580      	push	{r7, lr}
 8007420:	b086      	sub	sp, #24
 8007422:	af00      	add	r7, sp, #0
 8007424:	4603      	mov	r3, r0
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800742c:	2300      	movs	r3, #0
 800742e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007430:	f7ff ff42 	bl	80072b8 <__NVIC_GetPriorityGrouping>
 8007434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	68b9      	ldr	r1, [r7, #8]
 800743a:	6978      	ldr	r0, [r7, #20]
 800743c:	f7ff ff90 	bl	8007360 <NVIC_EncodePriority>
 8007440:	4602      	mov	r2, r0
 8007442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007446:	4611      	mov	r1, r2
 8007448:	4618      	mov	r0, r3
 800744a:	f7ff ff5f 	bl	800730c <__NVIC_SetPriority>
}
 800744e:	bf00      	nop
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b082      	sub	sp, #8
 800745a:	af00      	add	r7, sp, #0
 800745c:	4603      	mov	r3, r0
 800745e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff ff35 	bl	80072d4 <__NVIC_EnableIRQ>
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7ff ffa2 	bl	80073c4 <SysTick_Config>
 8007480:	4603      	mov	r3, r0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
	...

0800748c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800748c:	b480      	push	{r7}
 800748e:	b08b      	sub	sp, #44	@ 0x2c
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007496:	2300      	movs	r3, #0
 8007498:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800749a:	2300      	movs	r3, #0
 800749c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800749e:	e179      	b.n	8007794 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80074a0:	2201      	movs	r2, #1
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	4013      	ands	r3, r2
 80074b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	f040 8168 	bne.w	800778e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	4a96      	ldr	r2, [pc, #600]	@ (800771c <HAL_GPIO_Init+0x290>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d05e      	beq.n	8007586 <HAL_GPIO_Init+0xfa>
 80074c8:	4a94      	ldr	r2, [pc, #592]	@ (800771c <HAL_GPIO_Init+0x290>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d875      	bhi.n	80075ba <HAL_GPIO_Init+0x12e>
 80074ce:	4a94      	ldr	r2, [pc, #592]	@ (8007720 <HAL_GPIO_Init+0x294>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d058      	beq.n	8007586 <HAL_GPIO_Init+0xfa>
 80074d4:	4a92      	ldr	r2, [pc, #584]	@ (8007720 <HAL_GPIO_Init+0x294>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d86f      	bhi.n	80075ba <HAL_GPIO_Init+0x12e>
 80074da:	4a92      	ldr	r2, [pc, #584]	@ (8007724 <HAL_GPIO_Init+0x298>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d052      	beq.n	8007586 <HAL_GPIO_Init+0xfa>
 80074e0:	4a90      	ldr	r2, [pc, #576]	@ (8007724 <HAL_GPIO_Init+0x298>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d869      	bhi.n	80075ba <HAL_GPIO_Init+0x12e>
 80074e6:	4a90      	ldr	r2, [pc, #576]	@ (8007728 <HAL_GPIO_Init+0x29c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d04c      	beq.n	8007586 <HAL_GPIO_Init+0xfa>
 80074ec:	4a8e      	ldr	r2, [pc, #568]	@ (8007728 <HAL_GPIO_Init+0x29c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d863      	bhi.n	80075ba <HAL_GPIO_Init+0x12e>
 80074f2:	4a8e      	ldr	r2, [pc, #568]	@ (800772c <HAL_GPIO_Init+0x2a0>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d046      	beq.n	8007586 <HAL_GPIO_Init+0xfa>
 80074f8:	4a8c      	ldr	r2, [pc, #560]	@ (800772c <HAL_GPIO_Init+0x2a0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d85d      	bhi.n	80075ba <HAL_GPIO_Init+0x12e>
 80074fe:	2b12      	cmp	r3, #18
 8007500:	d82a      	bhi.n	8007558 <HAL_GPIO_Init+0xcc>
 8007502:	2b12      	cmp	r3, #18
 8007504:	d859      	bhi.n	80075ba <HAL_GPIO_Init+0x12e>
 8007506:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <HAL_GPIO_Init+0x80>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	08007587 	.word	0x08007587
 8007510:	08007561 	.word	0x08007561
 8007514:	08007573 	.word	0x08007573
 8007518:	080075b5 	.word	0x080075b5
 800751c:	080075bb 	.word	0x080075bb
 8007520:	080075bb 	.word	0x080075bb
 8007524:	080075bb 	.word	0x080075bb
 8007528:	080075bb 	.word	0x080075bb
 800752c:	080075bb 	.word	0x080075bb
 8007530:	080075bb 	.word	0x080075bb
 8007534:	080075bb 	.word	0x080075bb
 8007538:	080075bb 	.word	0x080075bb
 800753c:	080075bb 	.word	0x080075bb
 8007540:	080075bb 	.word	0x080075bb
 8007544:	080075bb 	.word	0x080075bb
 8007548:	080075bb 	.word	0x080075bb
 800754c:	080075bb 	.word	0x080075bb
 8007550:	08007569 	.word	0x08007569
 8007554:	0800757d 	.word	0x0800757d
 8007558:	4a75      	ldr	r2, [pc, #468]	@ (8007730 <HAL_GPIO_Init+0x2a4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800755e:	e02c      	b.n	80075ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	623b      	str	r3, [r7, #32]
          break;
 8007566:	e029      	b.n	80075bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	3304      	adds	r3, #4
 800756e:	623b      	str	r3, [r7, #32]
          break;
 8007570:	e024      	b.n	80075bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	3308      	adds	r3, #8
 8007578:	623b      	str	r3, [r7, #32]
          break;
 800757a:	e01f      	b.n	80075bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	330c      	adds	r3, #12
 8007582:	623b      	str	r3, [r7, #32]
          break;
 8007584:	e01a      	b.n	80075bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d102      	bne.n	8007594 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800758e:	2304      	movs	r3, #4
 8007590:	623b      	str	r3, [r7, #32]
          break;
 8007592:	e013      	b.n	80075bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d105      	bne.n	80075a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800759c:	2308      	movs	r3, #8
 800759e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	611a      	str	r2, [r3, #16]
          break;
 80075a6:	e009      	b.n	80075bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80075a8:	2308      	movs	r3, #8
 80075aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	615a      	str	r2, [r3, #20]
          break;
 80075b2:	e003      	b.n	80075bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80075b4:	2300      	movs	r3, #0
 80075b6:	623b      	str	r3, [r7, #32]
          break;
 80075b8:	e000      	b.n	80075bc <HAL_GPIO_Init+0x130>
          break;
 80075ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2bff      	cmp	r3, #255	@ 0xff
 80075c0:	d801      	bhi.n	80075c6 <HAL_GPIO_Init+0x13a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	e001      	b.n	80075ca <HAL_GPIO_Init+0x13e>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3304      	adds	r3, #4
 80075ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2bff      	cmp	r3, #255	@ 0xff
 80075d0:	d802      	bhi.n	80075d8 <HAL_GPIO_Init+0x14c>
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	e002      	b.n	80075de <HAL_GPIO_Init+0x152>
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	3b08      	subs	r3, #8
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	210f      	movs	r1, #15
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	fa01 f303 	lsl.w	r3, r1, r3
 80075ec:	43db      	mvns	r3, r3
 80075ee:	401a      	ands	r2, r3
 80075f0:	6a39      	ldr	r1, [r7, #32]
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	fa01 f303 	lsl.w	r3, r1, r3
 80075f8:	431a      	orrs	r2, r3
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 80c1 	beq.w	800778e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800760c:	4b49      	ldr	r3, [pc, #292]	@ (8007734 <HAL_GPIO_Init+0x2a8>)
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	4a48      	ldr	r2, [pc, #288]	@ (8007734 <HAL_GPIO_Init+0x2a8>)
 8007612:	f043 0301 	orr.w	r3, r3, #1
 8007616:	6193      	str	r3, [r2, #24]
 8007618:	4b46      	ldr	r3, [pc, #280]	@ (8007734 <HAL_GPIO_Init+0x2a8>)
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	60bb      	str	r3, [r7, #8]
 8007622:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007624:	4a44      	ldr	r2, [pc, #272]	@ (8007738 <HAL_GPIO_Init+0x2ac>)
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	089b      	lsrs	r3, r3, #2
 800762a:	3302      	adds	r3, #2
 800762c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007630:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	220f      	movs	r2, #15
 800763c:	fa02 f303 	lsl.w	r3, r2, r3
 8007640:	43db      	mvns	r3, r3
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4013      	ands	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a3c      	ldr	r2, [pc, #240]	@ (800773c <HAL_GPIO_Init+0x2b0>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d01f      	beq.n	8007690 <HAL_GPIO_Init+0x204>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a3b      	ldr	r2, [pc, #236]	@ (8007740 <HAL_GPIO_Init+0x2b4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d019      	beq.n	800768c <HAL_GPIO_Init+0x200>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a3a      	ldr	r2, [pc, #232]	@ (8007744 <HAL_GPIO_Init+0x2b8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d013      	beq.n	8007688 <HAL_GPIO_Init+0x1fc>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a39      	ldr	r2, [pc, #228]	@ (8007748 <HAL_GPIO_Init+0x2bc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00d      	beq.n	8007684 <HAL_GPIO_Init+0x1f8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a38      	ldr	r2, [pc, #224]	@ (800774c <HAL_GPIO_Init+0x2c0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d007      	beq.n	8007680 <HAL_GPIO_Init+0x1f4>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a37      	ldr	r2, [pc, #220]	@ (8007750 <HAL_GPIO_Init+0x2c4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d101      	bne.n	800767c <HAL_GPIO_Init+0x1f0>
 8007678:	2305      	movs	r3, #5
 800767a:	e00a      	b.n	8007692 <HAL_GPIO_Init+0x206>
 800767c:	2306      	movs	r3, #6
 800767e:	e008      	b.n	8007692 <HAL_GPIO_Init+0x206>
 8007680:	2304      	movs	r3, #4
 8007682:	e006      	b.n	8007692 <HAL_GPIO_Init+0x206>
 8007684:	2303      	movs	r3, #3
 8007686:	e004      	b.n	8007692 <HAL_GPIO_Init+0x206>
 8007688:	2302      	movs	r3, #2
 800768a:	e002      	b.n	8007692 <HAL_GPIO_Init+0x206>
 800768c:	2301      	movs	r3, #1
 800768e:	e000      	b.n	8007692 <HAL_GPIO_Init+0x206>
 8007690:	2300      	movs	r3, #0
 8007692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007694:	f002 0203 	and.w	r2, r2, #3
 8007698:	0092      	lsls	r2, r2, #2
 800769a:	4093      	lsls	r3, r2
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80076a2:	4925      	ldr	r1, [pc, #148]	@ (8007738 <HAL_GPIO_Init+0x2ac>)
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	089b      	lsrs	r3, r3, #2
 80076a8:	3302      	adds	r3, #2
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d006      	beq.n	80076ca <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80076bc:	4b25      	ldr	r3, [pc, #148]	@ (8007754 <HAL_GPIO_Init+0x2c8>)
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	4924      	ldr	r1, [pc, #144]	@ (8007754 <HAL_GPIO_Init+0x2c8>)
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	608b      	str	r3, [r1, #8]
 80076c8:	e006      	b.n	80076d8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80076ca:	4b22      	ldr	r3, [pc, #136]	@ (8007754 <HAL_GPIO_Init+0x2c8>)
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	43db      	mvns	r3, r3
 80076d2:	4920      	ldr	r1, [pc, #128]	@ (8007754 <HAL_GPIO_Init+0x2c8>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d006      	beq.n	80076f2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80076e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007754 <HAL_GPIO_Init+0x2c8>)
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	491a      	ldr	r1, [pc, #104]	@ (8007754 <HAL_GPIO_Init+0x2c8>)
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	60cb      	str	r3, [r1, #12]
 80076f0:	e006      	b.n	8007700 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80076f2:	4b18      	ldr	r3, [pc, #96]	@ (8007754 <HAL_GPIO_Init+0x2c8>)
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	43db      	mvns	r3, r3
 80076fa:	4916      	ldr	r1, [pc, #88]	@ (8007754 <HAL_GPIO_Init+0x2c8>)
 80076fc:	4013      	ands	r3, r2
 80076fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d025      	beq.n	8007758 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800770c:	4b11      	ldr	r3, [pc, #68]	@ (8007754 <HAL_GPIO_Init+0x2c8>)
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	4910      	ldr	r1, [pc, #64]	@ (8007754 <HAL_GPIO_Init+0x2c8>)
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	4313      	orrs	r3, r2
 8007716:	604b      	str	r3, [r1, #4]
 8007718:	e025      	b.n	8007766 <HAL_GPIO_Init+0x2da>
 800771a:	bf00      	nop
 800771c:	10320000 	.word	0x10320000
 8007720:	10310000 	.word	0x10310000
 8007724:	10220000 	.word	0x10220000
 8007728:	10210000 	.word	0x10210000
 800772c:	10120000 	.word	0x10120000
 8007730:	10110000 	.word	0x10110000
 8007734:	40021000 	.word	0x40021000
 8007738:	40010000 	.word	0x40010000
 800773c:	40010800 	.word	0x40010800
 8007740:	40010c00 	.word	0x40010c00
 8007744:	40011000 	.word	0x40011000
 8007748:	40011400 	.word	0x40011400
 800774c:	40011800 	.word	0x40011800
 8007750:	40011c00 	.word	0x40011c00
 8007754:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007758:	4b15      	ldr	r3, [pc, #84]	@ (80077b0 <HAL_GPIO_Init+0x324>)
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	43db      	mvns	r3, r3
 8007760:	4913      	ldr	r1, [pc, #76]	@ (80077b0 <HAL_GPIO_Init+0x324>)
 8007762:	4013      	ands	r3, r2
 8007764:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d006      	beq.n	8007780 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007772:	4b0f      	ldr	r3, [pc, #60]	@ (80077b0 <HAL_GPIO_Init+0x324>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	490e      	ldr	r1, [pc, #56]	@ (80077b0 <HAL_GPIO_Init+0x324>)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	4313      	orrs	r3, r2
 800777c:	600b      	str	r3, [r1, #0]
 800777e:	e006      	b.n	800778e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007780:	4b0b      	ldr	r3, [pc, #44]	@ (80077b0 <HAL_GPIO_Init+0x324>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	43db      	mvns	r3, r3
 8007788:	4909      	ldr	r1, [pc, #36]	@ (80077b0 <HAL_GPIO_Init+0x324>)
 800778a:	4013      	ands	r3, r2
 800778c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	3301      	adds	r3, #1
 8007792:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779a:	fa22 f303 	lsr.w	r3, r2, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f47f ae7e 	bne.w	80074a0 <HAL_GPIO_Init+0x14>
  }
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop
 80077a8:	372c      	adds	r7, #44	@ 0x2c
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bc80      	pop	{r7}
 80077ae:	4770      	bx	lr
 80077b0:	40010400 	.word	0x40010400

080077b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	887b      	ldrh	r3, [r7, #2]
 80077c6:	4013      	ands	r3, r2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077cc:	2301      	movs	r3, #1
 80077ce:	73fb      	strb	r3, [r7, #15]
 80077d0:	e001      	b.n	80077d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr

080077e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	807b      	strh	r3, [r7, #2]
 80077ee:	4613      	mov	r3, r2
 80077f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077f2:	787b      	ldrb	r3, [r7, #1]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077f8:	887a      	ldrh	r2, [r7, #2]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80077fe:	e003      	b.n	8007808 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007800:	887b      	ldrh	r3, [r7, #2]
 8007802:	041a      	lsls	r2, r3, #16
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	611a      	str	r2, [r3, #16]
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	bc80      	pop	{r7}
 8007810:	4770      	bx	lr

08007812 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007812:	b480      	push	{r7}
 8007814:	b085      	sub	sp, #20
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	460b      	mov	r3, r1
 800781c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007824:	887a      	ldrh	r2, [r7, #2]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4013      	ands	r3, r2
 800782a:	041a      	lsls	r2, r3, #16
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	43d9      	mvns	r1, r3
 8007830:	887b      	ldrh	r3, [r7, #2]
 8007832:	400b      	ands	r3, r1
 8007834:	431a      	orrs	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	611a      	str	r2, [r3, #16]
}
 800783a:	bf00      	nop
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	bc80      	pop	{r7}
 8007842:	4770      	bx	lr

08007844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e272      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8087 	beq.w	8007972 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007864:	4b92      	ldr	r3, [pc, #584]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f003 030c 	and.w	r3, r3, #12
 800786c:	2b04      	cmp	r3, #4
 800786e:	d00c      	beq.n	800788a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007870:	4b8f      	ldr	r3, [pc, #572]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f003 030c 	and.w	r3, r3, #12
 8007878:	2b08      	cmp	r3, #8
 800787a:	d112      	bne.n	80078a2 <HAL_RCC_OscConfig+0x5e>
 800787c:	4b8c      	ldr	r3, [pc, #560]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007888:	d10b      	bne.n	80078a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800788a:	4b89      	ldr	r3, [pc, #548]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d06c      	beq.n	8007970 <HAL_RCC_OscConfig+0x12c>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d168      	bne.n	8007970 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e24c      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078aa:	d106      	bne.n	80078ba <HAL_RCC_OscConfig+0x76>
 80078ac:	4b80      	ldr	r3, [pc, #512]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a7f      	ldr	r2, [pc, #508]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80078b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	e02e      	b.n	8007918 <HAL_RCC_OscConfig+0xd4>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10c      	bne.n	80078dc <HAL_RCC_OscConfig+0x98>
 80078c2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a7a      	ldr	r2, [pc, #488]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80078c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	4b78      	ldr	r3, [pc, #480]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a77      	ldr	r2, [pc, #476]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80078d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078d8:	6013      	str	r3, [r2, #0]
 80078da:	e01d      	b.n	8007918 <HAL_RCC_OscConfig+0xd4>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078e4:	d10c      	bne.n	8007900 <HAL_RCC_OscConfig+0xbc>
 80078e6:	4b72      	ldr	r3, [pc, #456]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a71      	ldr	r2, [pc, #452]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80078ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	4b6f      	ldr	r3, [pc, #444]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a6e      	ldr	r2, [pc, #440]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80078f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	e00b      	b.n	8007918 <HAL_RCC_OscConfig+0xd4>
 8007900:	4b6b      	ldr	r3, [pc, #428]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a6a      	ldr	r2, [pc, #424]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 8007906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	4b68      	ldr	r3, [pc, #416]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a67      	ldr	r2, [pc, #412]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 8007912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007916:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d013      	beq.n	8007948 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007920:	f7ff fc78 	bl	8007214 <HAL_GetTick>
 8007924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007928:	f7ff fc74 	bl	8007214 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b64      	cmp	r3, #100	@ 0x64
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e200      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800793a:	4b5d      	ldr	r3, [pc, #372]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0f0      	beq.n	8007928 <HAL_RCC_OscConfig+0xe4>
 8007946:	e014      	b.n	8007972 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007948:	f7ff fc64 	bl	8007214 <HAL_GetTick>
 800794c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800794e:	e008      	b.n	8007962 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007950:	f7ff fc60 	bl	8007214 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	2b64      	cmp	r3, #100	@ 0x64
 800795c:	d901      	bls.n	8007962 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e1ec      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007962:	4b53      	ldr	r3, [pc, #332]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1f0      	bne.n	8007950 <HAL_RCC_OscConfig+0x10c>
 800796e:	e000      	b.n	8007972 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d063      	beq.n	8007a46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800797e:	4b4c      	ldr	r3, [pc, #304]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f003 030c 	and.w	r3, r3, #12
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00b      	beq.n	80079a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800798a:	4b49      	ldr	r3, [pc, #292]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f003 030c 	and.w	r3, r3, #12
 8007992:	2b08      	cmp	r3, #8
 8007994:	d11c      	bne.n	80079d0 <HAL_RCC_OscConfig+0x18c>
 8007996:	4b46      	ldr	r3, [pc, #280]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d116      	bne.n	80079d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079a2:	4b43      	ldr	r3, [pc, #268]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d005      	beq.n	80079ba <HAL_RCC_OscConfig+0x176>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d001      	beq.n	80079ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e1c0      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ba:	4b3d      	ldr	r3, [pc, #244]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	00db      	lsls	r3, r3, #3
 80079c8:	4939      	ldr	r1, [pc, #228]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ce:	e03a      	b.n	8007a46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d020      	beq.n	8007a1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079d8:	4b36      	ldr	r3, [pc, #216]	@ (8007ab4 <HAL_RCC_OscConfig+0x270>)
 80079da:	2201      	movs	r2, #1
 80079dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079de:	f7ff fc19 	bl	8007214 <HAL_GetTick>
 80079e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079e4:	e008      	b.n	80079f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079e6:	f7ff fc15 	bl	8007214 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e1a1      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079f8:	4b2d      	ldr	r3, [pc, #180]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0f0      	beq.n	80079e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a04:	4b2a      	ldr	r3, [pc, #168]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	4927      	ldr	r1, [pc, #156]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	600b      	str	r3, [r1, #0]
 8007a18:	e015      	b.n	8007a46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a1a:	4b26      	ldr	r3, [pc, #152]	@ (8007ab4 <HAL_RCC_OscConfig+0x270>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a20:	f7ff fbf8 	bl	8007214 <HAL_GetTick>
 8007a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a26:	e008      	b.n	8007a3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a28:	f7ff fbf4 	bl	8007214 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d901      	bls.n	8007a3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e180      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1f0      	bne.n	8007a28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d03a      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d019      	beq.n	8007a8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a5a:	4b17      	ldr	r3, [pc, #92]	@ (8007ab8 <HAL_RCC_OscConfig+0x274>)
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a60:	f7ff fbd8 	bl	8007214 <HAL_GetTick>
 8007a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a66:	e008      	b.n	8007a7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a68:	f7ff fbd4 	bl	8007214 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d901      	bls.n	8007a7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e160      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <HAL_RCC_OscConfig+0x26c>)
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0f0      	beq.n	8007a68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007a86:	2001      	movs	r0, #1
 8007a88:	f000 fa9c 	bl	8007fc4 <RCC_Delay>
 8007a8c:	e01c      	b.n	8007ac8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab8 <HAL_RCC_OscConfig+0x274>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a94:	f7ff fbbe 	bl	8007214 <HAL_GetTick>
 8007a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a9a:	e00f      	b.n	8007abc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a9c:	f7ff fbba 	bl	8007214 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d908      	bls.n	8007abc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e146      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
 8007aae:	bf00      	nop
 8007ab0:	40021000 	.word	0x40021000
 8007ab4:	42420000 	.word	0x42420000
 8007ab8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007abc:	4b92      	ldr	r3, [pc, #584]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e9      	bne.n	8007a9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 80a6 	beq.w	8007c22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ada:	4b8b      	ldr	r3, [pc, #556]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10d      	bne.n	8007b02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ae6:	4b88      	ldr	r3, [pc, #544]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	4a87      	ldr	r2, [pc, #540]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007af0:	61d3      	str	r3, [r2, #28]
 8007af2:	4b85      	ldr	r3, [pc, #532]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007afa:	60bb      	str	r3, [r7, #8]
 8007afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007afe:	2301      	movs	r3, #1
 8007b00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b02:	4b82      	ldr	r3, [pc, #520]	@ (8007d0c <HAL_RCC_OscConfig+0x4c8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d118      	bne.n	8007b40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8007d0c <HAL_RCC_OscConfig+0x4c8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a7e      	ldr	r2, [pc, #504]	@ (8007d0c <HAL_RCC_OscConfig+0x4c8>)
 8007b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b1a:	f7ff fb7b 	bl	8007214 <HAL_GetTick>
 8007b1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b20:	e008      	b.n	8007b34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b22:	f7ff fb77 	bl	8007214 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b64      	cmp	r3, #100	@ 0x64
 8007b2e:	d901      	bls.n	8007b34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e103      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b34:	4b75      	ldr	r3, [pc, #468]	@ (8007d0c <HAL_RCC_OscConfig+0x4c8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d0f0      	beq.n	8007b22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d106      	bne.n	8007b56 <HAL_RCC_OscConfig+0x312>
 8007b48:	4b6f      	ldr	r3, [pc, #444]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007b4e:	f043 0301 	orr.w	r3, r3, #1
 8007b52:	6213      	str	r3, [r2, #32]
 8007b54:	e02d      	b.n	8007bb2 <HAL_RCC_OscConfig+0x36e>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10c      	bne.n	8007b78 <HAL_RCC_OscConfig+0x334>
 8007b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	4a69      	ldr	r2, [pc, #420]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	6213      	str	r3, [r2, #32]
 8007b6a:	4b67      	ldr	r3, [pc, #412]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	4a66      	ldr	r2, [pc, #408]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007b70:	f023 0304 	bic.w	r3, r3, #4
 8007b74:	6213      	str	r3, [r2, #32]
 8007b76:	e01c      	b.n	8007bb2 <HAL_RCC_OscConfig+0x36e>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	2b05      	cmp	r3, #5
 8007b7e:	d10c      	bne.n	8007b9a <HAL_RCC_OscConfig+0x356>
 8007b80:	4b61      	ldr	r3, [pc, #388]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	4a60      	ldr	r2, [pc, #384]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007b86:	f043 0304 	orr.w	r3, r3, #4
 8007b8a:	6213      	str	r3, [r2, #32]
 8007b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	4a5d      	ldr	r2, [pc, #372]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007b92:	f043 0301 	orr.w	r3, r3, #1
 8007b96:	6213      	str	r3, [r2, #32]
 8007b98:	e00b      	b.n	8007bb2 <HAL_RCC_OscConfig+0x36e>
 8007b9a:	4b5b      	ldr	r3, [pc, #364]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	4a5a      	ldr	r2, [pc, #360]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007ba0:	f023 0301 	bic.w	r3, r3, #1
 8007ba4:	6213      	str	r3, [r2, #32]
 8007ba6:	4b58      	ldr	r3, [pc, #352]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	4a57      	ldr	r2, [pc, #348]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007bac:	f023 0304 	bic.w	r3, r3, #4
 8007bb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d015      	beq.n	8007be6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bba:	f7ff fb2b 	bl	8007214 <HAL_GetTick>
 8007bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bc0:	e00a      	b.n	8007bd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bc2:	f7ff fb27 	bl	8007214 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d901      	bls.n	8007bd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e0b1      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0ee      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x37e>
 8007be4:	e014      	b.n	8007c10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007be6:	f7ff fb15 	bl	8007214 <HAL_GetTick>
 8007bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bec:	e00a      	b.n	8007c04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bee:	f7ff fb11 	bl	8007214 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d901      	bls.n	8007c04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e09b      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c04:	4b40      	ldr	r3, [pc, #256]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007c06:	6a1b      	ldr	r3, [r3, #32]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1ee      	bne.n	8007bee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d105      	bne.n	8007c22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c16:	4b3c      	ldr	r3, [pc, #240]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	4a3b      	ldr	r2, [pc, #236]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 8087 	beq.w	8007d3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c2c:	4b36      	ldr	r3, [pc, #216]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f003 030c 	and.w	r3, r3, #12
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	d061      	beq.n	8007cfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d146      	bne.n	8007cce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c40:	4b33      	ldr	r3, [pc, #204]	@ (8007d10 <HAL_RCC_OscConfig+0x4cc>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c46:	f7ff fae5 	bl	8007214 <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c4e:	f7ff fae1 	bl	8007214 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e06d      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c60:	4b29      	ldr	r3, [pc, #164]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1f0      	bne.n	8007c4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c74:	d108      	bne.n	8007c88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007c76:	4b24      	ldr	r3, [pc, #144]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	4921      	ldr	r1, [pc, #132]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c88:	4b1f      	ldr	r3, [pc, #124]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a19      	ldr	r1, [r3, #32]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	491b      	ldr	r1, [pc, #108]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8007d10 <HAL_RCC_OscConfig+0x4cc>)
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ca6:	f7ff fab5 	bl	8007214 <HAL_GetTick>
 8007caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007cac:	e008      	b.n	8007cc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cae:	f7ff fab1 	bl	8007214 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d901      	bls.n	8007cc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e03d      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007cc0:	4b11      	ldr	r3, [pc, #68]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0f0      	beq.n	8007cae <HAL_RCC_OscConfig+0x46a>
 8007ccc:	e035      	b.n	8007d3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cce:	4b10      	ldr	r3, [pc, #64]	@ (8007d10 <HAL_RCC_OscConfig+0x4cc>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cd4:	f7ff fa9e 	bl	8007214 <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cda:	e008      	b.n	8007cee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cdc:	f7ff fa9a 	bl	8007214 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e026      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cee:	4b06      	ldr	r3, [pc, #24]	@ (8007d08 <HAL_RCC_OscConfig+0x4c4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f0      	bne.n	8007cdc <HAL_RCC_OscConfig+0x498>
 8007cfa:	e01e      	b.n	8007d3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d107      	bne.n	8007d14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e019      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
 8007d08:	40021000 	.word	0x40021000
 8007d0c:	40007000 	.word	0x40007000
 8007d10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007d14:	4b0b      	ldr	r3, [pc, #44]	@ (8007d44 <HAL_RCC_OscConfig+0x500>)
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d106      	bne.n	8007d36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d001      	beq.n	8007d3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e000      	b.n	8007d3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3718      	adds	r7, #24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	40021000 	.word	0x40021000

08007d48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e0d0      	b.n	8007efe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8007f08 <HAL_RCC_ClockConfig+0x1c0>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d910      	bls.n	8007d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d6a:	4b67      	ldr	r3, [pc, #412]	@ (8007f08 <HAL_RCC_ClockConfig+0x1c0>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f023 0207 	bic.w	r2, r3, #7
 8007d72:	4965      	ldr	r1, [pc, #404]	@ (8007f08 <HAL_RCC_ClockConfig+0x1c0>)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d7a:	4b63      	ldr	r3, [pc, #396]	@ (8007f08 <HAL_RCC_ClockConfig+0x1c0>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0307 	and.w	r3, r3, #7
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d001      	beq.n	8007d8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e0b8      	b.n	8007efe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d020      	beq.n	8007dda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007da4:	4b59      	ldr	r3, [pc, #356]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	4a58      	ldr	r2, [pc, #352]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007daa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007dae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007dbc:	4b53      	ldr	r3, [pc, #332]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	4a52      	ldr	r2, [pc, #328]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007dc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007dc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dc8:	4b50      	ldr	r3, [pc, #320]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	494d      	ldr	r1, [pc, #308]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d040      	beq.n	8007e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d107      	bne.n	8007dfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dee:	4b47      	ldr	r3, [pc, #284]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d115      	bne.n	8007e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e07f      	b.n	8007efe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d107      	bne.n	8007e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e06:	4b41      	ldr	r3, [pc, #260]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e073      	b.n	8007efe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e16:	4b3d      	ldr	r3, [pc, #244]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e06b      	b.n	8007efe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e26:	4b39      	ldr	r3, [pc, #228]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f023 0203 	bic.w	r2, r3, #3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	4936      	ldr	r1, [pc, #216]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e38:	f7ff f9ec 	bl	8007214 <HAL_GetTick>
 8007e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e3e:	e00a      	b.n	8007e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e40:	f7ff f9e8 	bl	8007214 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e053      	b.n	8007efe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e56:	4b2d      	ldr	r3, [pc, #180]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f003 020c 	and.w	r2, r3, #12
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d1eb      	bne.n	8007e40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e68:	4b27      	ldr	r3, [pc, #156]	@ (8007f08 <HAL_RCC_ClockConfig+0x1c0>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0307 	and.w	r3, r3, #7
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d210      	bcs.n	8007e98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e76:	4b24      	ldr	r3, [pc, #144]	@ (8007f08 <HAL_RCC_ClockConfig+0x1c0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f023 0207 	bic.w	r2, r3, #7
 8007e7e:	4922      	ldr	r1, [pc, #136]	@ (8007f08 <HAL_RCC_ClockConfig+0x1c0>)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e86:	4b20      	ldr	r3, [pc, #128]	@ (8007f08 <HAL_RCC_ClockConfig+0x1c0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d001      	beq.n	8007e98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e032      	b.n	8007efe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d008      	beq.n	8007eb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ea4:	4b19      	ldr	r3, [pc, #100]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	4916      	ldr	r1, [pc, #88]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0308 	and.w	r3, r3, #8
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d009      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007ec2:	4b12      	ldr	r3, [pc, #72]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	490e      	ldr	r1, [pc, #56]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007ed6:	f000 f821 	bl	8007f1c <HAL_RCC_GetSysClockFreq>
 8007eda:	4602      	mov	r2, r0
 8007edc:	4b0b      	ldr	r3, [pc, #44]	@ (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	091b      	lsrs	r3, r3, #4
 8007ee2:	f003 030f 	and.w	r3, r3, #15
 8007ee6:	490a      	ldr	r1, [pc, #40]	@ (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee8:	5ccb      	ldrb	r3, [r1, r3]
 8007eea:	fa22 f303 	lsr.w	r3, r2, r3
 8007eee:	4a09      	ldr	r2, [pc, #36]	@ (8007f14 <HAL_RCC_ClockConfig+0x1cc>)
 8007ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007ef2:	4b09      	ldr	r3, [pc, #36]	@ (8007f18 <HAL_RCC_ClockConfig+0x1d0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff f94a 	bl	8007190 <HAL_InitTick>

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	40022000 	.word	0x40022000
 8007f0c:	40021000 	.word	0x40021000
 8007f10:	0800c160 	.word	0x0800c160
 8007f14:	20000004 	.word	0x20000004
 8007f18:	20000008 	.word	0x20000008

08007f1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]
 8007f26:	2300      	movs	r3, #0
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007f36:	4b1e      	ldr	r3, [pc, #120]	@ (8007fb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f003 030c 	and.w	r3, r3, #12
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d002      	beq.n	8007f4c <HAL_RCC_GetSysClockFreq+0x30>
 8007f46:	2b08      	cmp	r3, #8
 8007f48:	d003      	beq.n	8007f52 <HAL_RCC_GetSysClockFreq+0x36>
 8007f4a:	e027      	b.n	8007f9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007f4c:	4b19      	ldr	r3, [pc, #100]	@ (8007fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8007f4e:	613b      	str	r3, [r7, #16]
      break;
 8007f50:	e027      	b.n	8007fa2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	0c9b      	lsrs	r3, r3, #18
 8007f56:	f003 030f 	and.w	r3, r3, #15
 8007f5a:	4a17      	ldr	r2, [pc, #92]	@ (8007fb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007f5c:	5cd3      	ldrb	r3, [r2, r3]
 8007f5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d010      	beq.n	8007f8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007f6a:	4b11      	ldr	r3, [pc, #68]	@ (8007fb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	0c5b      	lsrs	r3, r3, #17
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	4a11      	ldr	r2, [pc, #68]	@ (8007fbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8007f76:	5cd3      	ldrb	r3, [r2, r3]
 8007f78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8007fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8007f7e:	fb03 f202 	mul.w	r2, r3, r2
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f88:	617b      	str	r3, [r7, #20]
 8007f8a:	e004      	b.n	8007f96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8007fc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007f90:	fb02 f303 	mul.w	r3, r2, r3
 8007f94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	613b      	str	r3, [r7, #16]
      break;
 8007f9a:	e002      	b.n	8007fa2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007f9c:	4b05      	ldr	r3, [pc, #20]	@ (8007fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8007f9e:	613b      	str	r3, [r7, #16]
      break;
 8007fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fa2:	693b      	ldr	r3, [r7, #16]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	40021000 	.word	0x40021000
 8007fb4:	007a1200 	.word	0x007a1200
 8007fb8:	0800c170 	.word	0x0800c170
 8007fbc:	0800c180 	.word	0x0800c180
 8007fc0:	003d0900 	.word	0x003d0900

08007fc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff8 <RCC_Delay+0x34>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ffc <RCC_Delay+0x38>)
 8007fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd6:	0a5b      	lsrs	r3, r3, #9
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	fb02 f303 	mul.w	r3, r2, r3
 8007fde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007fe0:	bf00      	nop
  }
  while (Delay --);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	1e5a      	subs	r2, r3, #1
 8007fe6:	60fa      	str	r2, [r7, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f9      	bne.n	8007fe0 <RCC_Delay+0x1c>
}
 8007fec:	bf00      	nop
 8007fee:	bf00      	nop
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bc80      	pop	{r7}
 8007ff6:	4770      	bx	lr
 8007ff8:	20000004 	.word	0x20000004
 8007ffc:	10624dd3 	.word	0x10624dd3

08008000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e041      	b.n	8008096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d106      	bne.n	800802c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff f850 	bl	80070cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3304      	adds	r3, #4
 800803c:	4619      	mov	r1, r3
 800803e:	4610      	mov	r0, r2
 8008040:	f000 fa6a 	bl	8008518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
	...

080080a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d001      	beq.n	80080b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e044      	b.n	8008142 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0201 	orr.w	r2, r2, #1
 80080ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a1d      	ldr	r2, [pc, #116]	@ (800814c <HAL_TIM_Base_Start_IT+0xac>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d018      	beq.n	800810c <HAL_TIM_Base_Start_IT+0x6c>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a1c      	ldr	r2, [pc, #112]	@ (8008150 <HAL_TIM_Base_Start_IT+0xb0>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d013      	beq.n	800810c <HAL_TIM_Base_Start_IT+0x6c>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ec:	d00e      	beq.n	800810c <HAL_TIM_Base_Start_IT+0x6c>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a18      	ldr	r2, [pc, #96]	@ (8008154 <HAL_TIM_Base_Start_IT+0xb4>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d009      	beq.n	800810c <HAL_TIM_Base_Start_IT+0x6c>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a16      	ldr	r2, [pc, #88]	@ (8008158 <HAL_TIM_Base_Start_IT+0xb8>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d004      	beq.n	800810c <HAL_TIM_Base_Start_IT+0x6c>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a15      	ldr	r2, [pc, #84]	@ (800815c <HAL_TIM_Base_Start_IT+0xbc>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d111      	bne.n	8008130 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b06      	cmp	r3, #6
 800811c:	d010      	beq.n	8008140 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f042 0201 	orr.w	r2, r2, #1
 800812c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812e:	e007      	b.n	8008140 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0201 	orr.w	r2, r2, #1
 800813e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr
 800814c:	40012c00 	.word	0x40012c00
 8008150:	40013400 	.word	0x40013400
 8008154:	40000400 	.word	0x40000400
 8008158:	40000800 	.word	0x40000800
 800815c:	40000c00 	.word	0x40000c00

08008160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d020      	beq.n	80081c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d01b      	beq.n	80081c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f06f 0202 	mvn.w	r2, #2
 8008194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	f003 0303 	and.w	r3, r3, #3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f998 	bl	80084e0 <HAL_TIM_IC_CaptureCallback>
 80081b0:	e005      	b.n	80081be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f98b 	bl	80084ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f99a 	bl	80084f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f003 0304 	and.w	r3, r3, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d020      	beq.n	8008210 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01b      	beq.n	8008210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f06f 0204 	mvn.w	r2, #4
 80081e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2202      	movs	r2, #2
 80081e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f972 	bl	80084e0 <HAL_TIM_IC_CaptureCallback>
 80081fc:	e005      	b.n	800820a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f965 	bl	80084ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f974 	bl	80084f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f003 0308 	and.w	r3, r3, #8
 8008216:	2b00      	cmp	r3, #0
 8008218:	d020      	beq.n	800825c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01b      	beq.n	800825c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f06f 0208 	mvn.w	r2, #8
 800822c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2204      	movs	r2, #4
 8008232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f94c 	bl	80084e0 <HAL_TIM_IC_CaptureCallback>
 8008248:	e005      	b.n	8008256 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f93f 	bl	80084ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f94e 	bl	80084f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f003 0310 	and.w	r3, r3, #16
 8008262:	2b00      	cmp	r3, #0
 8008264:	d020      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b00      	cmp	r3, #0
 800826e:	d01b      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0210 	mvn.w	r2, #16
 8008278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2208      	movs	r2, #8
 800827e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f926 	bl	80084e0 <HAL_TIM_IC_CaptureCallback>
 8008294:	e005      	b.n	80082a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f919 	bl	80084ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f928 	bl	80084f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00c      	beq.n	80082cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d007      	beq.n	80082cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0201 	mvn.w	r2, #1
 80082c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7fe fdd2 	bl	8006e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00c      	beq.n	80082f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d007      	beq.n	80082f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80082e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 faa5 	bl	800883a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00c      	beq.n	8008314 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008300:	2b00      	cmp	r3, #0
 8008302:	d007      	beq.n	8008314 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800830c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f8f8 	bl	8008504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00c      	beq.n	8008338 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f003 0320 	and.w	r3, r3, #32
 8008324:	2b00      	cmp	r3, #0
 8008326:	d007      	beq.n	8008338 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f06f 0220 	mvn.w	r2, #32
 8008330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa78 	bl	8008828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008338:	bf00      	nop
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008354:	2b01      	cmp	r3, #1
 8008356:	d101      	bne.n	800835c <HAL_TIM_ConfigClockSource+0x1c>
 8008358:	2302      	movs	r3, #2
 800835a:	e0b4      	b.n	80084c6 <HAL_TIM_ConfigClockSource+0x186>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800837a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008382:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008394:	d03e      	beq.n	8008414 <HAL_TIM_ConfigClockSource+0xd4>
 8008396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800839a:	f200 8087 	bhi.w	80084ac <HAL_TIM_ConfigClockSource+0x16c>
 800839e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083a2:	f000 8086 	beq.w	80084b2 <HAL_TIM_ConfigClockSource+0x172>
 80083a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083aa:	d87f      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x16c>
 80083ac:	2b70      	cmp	r3, #112	@ 0x70
 80083ae:	d01a      	beq.n	80083e6 <HAL_TIM_ConfigClockSource+0xa6>
 80083b0:	2b70      	cmp	r3, #112	@ 0x70
 80083b2:	d87b      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x16c>
 80083b4:	2b60      	cmp	r3, #96	@ 0x60
 80083b6:	d050      	beq.n	800845a <HAL_TIM_ConfigClockSource+0x11a>
 80083b8:	2b60      	cmp	r3, #96	@ 0x60
 80083ba:	d877      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x16c>
 80083bc:	2b50      	cmp	r3, #80	@ 0x50
 80083be:	d03c      	beq.n	800843a <HAL_TIM_ConfigClockSource+0xfa>
 80083c0:	2b50      	cmp	r3, #80	@ 0x50
 80083c2:	d873      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x16c>
 80083c4:	2b40      	cmp	r3, #64	@ 0x40
 80083c6:	d058      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x13a>
 80083c8:	2b40      	cmp	r3, #64	@ 0x40
 80083ca:	d86f      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x16c>
 80083cc:	2b30      	cmp	r3, #48	@ 0x30
 80083ce:	d064      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x15a>
 80083d0:	2b30      	cmp	r3, #48	@ 0x30
 80083d2:	d86b      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x16c>
 80083d4:	2b20      	cmp	r3, #32
 80083d6:	d060      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x15a>
 80083d8:	2b20      	cmp	r3, #32
 80083da:	d867      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x16c>
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d05c      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x15a>
 80083e0:	2b10      	cmp	r3, #16
 80083e2:	d05a      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x15a>
 80083e4:	e062      	b.n	80084ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083f6:	f000 f98c 	bl	8008712 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008408:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	609a      	str	r2, [r3, #8]
      break;
 8008412:	e04f      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008424:	f000 f975 	bl	8008712 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008436:	609a      	str	r2, [r3, #8]
      break;
 8008438:	e03c      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008446:	461a      	mov	r2, r3
 8008448:	f000 f8ec 	bl	8008624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2150      	movs	r1, #80	@ 0x50
 8008452:	4618      	mov	r0, r3
 8008454:	f000 f943 	bl	80086de <TIM_ITRx_SetConfig>
      break;
 8008458:	e02c      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008466:	461a      	mov	r2, r3
 8008468:	f000 f90a 	bl	8008680 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2160      	movs	r1, #96	@ 0x60
 8008472:	4618      	mov	r0, r3
 8008474:	f000 f933 	bl	80086de <TIM_ITRx_SetConfig>
      break;
 8008478:	e01c      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008486:	461a      	mov	r2, r3
 8008488:	f000 f8cc 	bl	8008624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2140      	movs	r1, #64	@ 0x40
 8008492:	4618      	mov	r0, r3
 8008494:	f000 f923 	bl	80086de <TIM_ITRx_SetConfig>
      break;
 8008498:	e00c      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	f000 f91a 	bl	80086de <TIM_ITRx_SetConfig>
      break;
 80084aa:	e003      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	73fb      	strb	r3, [r7, #15]
      break;
 80084b0:	e000      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	bc80      	pop	{r7}
 80084de:	4770      	bx	lr

080084e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bc80      	pop	{r7}
 80084f0:	4770      	bx	lr

080084f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084fa:	bf00      	nop
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	bc80      	pop	{r7}
 8008502:	4770      	bx	lr

08008504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	bc80      	pop	{r7}
 8008514:	4770      	bx	lr
	...

08008518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a39      	ldr	r2, [pc, #228]	@ (8008610 <TIM_Base_SetConfig+0xf8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d013      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a38      	ldr	r2, [pc, #224]	@ (8008614 <TIM_Base_SetConfig+0xfc>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d00f      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853e:	d00b      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a35      	ldr	r2, [pc, #212]	@ (8008618 <TIM_Base_SetConfig+0x100>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d007      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a34      	ldr	r2, [pc, #208]	@ (800861c <TIM_Base_SetConfig+0x104>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d003      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a33      	ldr	r2, [pc, #204]	@ (8008620 <TIM_Base_SetConfig+0x108>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d108      	bne.n	800856a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800855e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a28      	ldr	r2, [pc, #160]	@ (8008610 <TIM_Base_SetConfig+0xf8>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d013      	beq.n	800859a <TIM_Base_SetConfig+0x82>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a27      	ldr	r2, [pc, #156]	@ (8008614 <TIM_Base_SetConfig+0xfc>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00f      	beq.n	800859a <TIM_Base_SetConfig+0x82>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008580:	d00b      	beq.n	800859a <TIM_Base_SetConfig+0x82>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a24      	ldr	r2, [pc, #144]	@ (8008618 <TIM_Base_SetConfig+0x100>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d007      	beq.n	800859a <TIM_Base_SetConfig+0x82>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a23      	ldr	r2, [pc, #140]	@ (800861c <TIM_Base_SetConfig+0x104>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d003      	beq.n	800859a <TIM_Base_SetConfig+0x82>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a22      	ldr	r2, [pc, #136]	@ (8008620 <TIM_Base_SetConfig+0x108>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d108      	bne.n	80085ac <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a0f      	ldr	r2, [pc, #60]	@ (8008610 <TIM_Base_SetConfig+0xf8>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d003      	beq.n	80085e0 <TIM_Base_SetConfig+0xc8>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a0e      	ldr	r2, [pc, #56]	@ (8008614 <TIM_Base_SetConfig+0xfc>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d103      	bne.n	80085e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	691a      	ldr	r2, [r3, #16]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f023 0201 	bic.w	r2, r3, #1
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	611a      	str	r2, [r3, #16]
  }
}
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	bc80      	pop	{r7}
 800860e:	4770      	bx	lr
 8008610:	40012c00 	.word	0x40012c00
 8008614:	40013400 	.word	0x40013400
 8008618:	40000400 	.word	0x40000400
 800861c:	40000800 	.word	0x40000800
 8008620:	40000c00 	.word	0x40000c00

08008624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	f023 0201 	bic.w	r2, r3, #1
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800864e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	011b      	lsls	r3, r3, #4
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	4313      	orrs	r3, r2
 8008658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f023 030a 	bic.w	r3, r3, #10
 8008660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4313      	orrs	r3, r2
 8008668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	621a      	str	r2, [r3, #32]
}
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr

08008680 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	f023 0210 	bic.w	r2, r3, #16
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	031b      	lsls	r3, r3, #12
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	011b      	lsls	r3, r3, #4
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	621a      	str	r2, [r3, #32]
}
 80086d4:	bf00      	nop
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	bc80      	pop	{r7}
 80086dc:	4770      	bx	lr

080086de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086de:	b480      	push	{r7}
 80086e0:	b085      	sub	sp, #20
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	f043 0307 	orr.w	r3, r3, #7
 8008700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	609a      	str	r2, [r3, #8]
}
 8008708:	bf00      	nop
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	bc80      	pop	{r7}
 8008710:	4770      	bx	lr

08008712 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008712:	b480      	push	{r7}
 8008714:	b087      	sub	sp, #28
 8008716:	af00      	add	r7, sp, #0
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	607a      	str	r2, [r7, #4]
 800871e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800872c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	021a      	lsls	r2, r3, #8
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	431a      	orrs	r2, r3
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	4313      	orrs	r3, r2
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	4313      	orrs	r3, r2
 800873e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	609a      	str	r2, [r3, #8]
}
 8008746:	bf00      	nop
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr

08008750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008760:	2b01      	cmp	r3, #1
 8008762:	d101      	bne.n	8008768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008764:	2302      	movs	r3, #2
 8008766:	e050      	b.n	800880a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a1b      	ldr	r2, [pc, #108]	@ (8008814 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d018      	beq.n	80087de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a19      	ldr	r2, [pc, #100]	@ (8008818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d013      	beq.n	80087de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087be:	d00e      	beq.n	80087de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a15      	ldr	r2, [pc, #84]	@ (800881c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d009      	beq.n	80087de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a14      	ldr	r2, [pc, #80]	@ (8008820 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d004      	beq.n	80087de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a12      	ldr	r2, [pc, #72]	@ (8008824 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d10c      	bne.n	80087f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	bc80      	pop	{r7}
 8008812:	4770      	bx	lr
 8008814:	40012c00 	.word	0x40012c00
 8008818:	40013400 	.word	0x40013400
 800881c:	40000400 	.word	0x40000400
 8008820:	40000800 	.word	0x40000800
 8008824:	40000c00 	.word	0x40000c00

08008828 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr

0800883a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr

0800884c <siprintf>:
 800884c:	b40e      	push	{r1, r2, r3}
 800884e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008852:	b500      	push	{lr}
 8008854:	b09c      	sub	sp, #112	@ 0x70
 8008856:	ab1d      	add	r3, sp, #116	@ 0x74
 8008858:	9002      	str	r0, [sp, #8]
 800885a:	9006      	str	r0, [sp, #24]
 800885c:	9107      	str	r1, [sp, #28]
 800885e:	9104      	str	r1, [sp, #16]
 8008860:	4808      	ldr	r0, [pc, #32]	@ (8008884 <siprintf+0x38>)
 8008862:	4909      	ldr	r1, [pc, #36]	@ (8008888 <siprintf+0x3c>)
 8008864:	f853 2b04 	ldr.w	r2, [r3], #4
 8008868:	9105      	str	r1, [sp, #20]
 800886a:	6800      	ldr	r0, [r0, #0]
 800886c:	a902      	add	r1, sp, #8
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	f000 f992 	bl	8008b98 <_svfiprintf_r>
 8008874:	2200      	movs	r2, #0
 8008876:	9b02      	ldr	r3, [sp, #8]
 8008878:	701a      	strb	r2, [r3, #0]
 800887a:	b01c      	add	sp, #112	@ 0x70
 800887c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008880:	b003      	add	sp, #12
 8008882:	4770      	bx	lr
 8008884:	20000010 	.word	0x20000010
 8008888:	ffff0208 	.word	0xffff0208

0800888c <memset>:
 800888c:	4603      	mov	r3, r0
 800888e:	4402      	add	r2, r0
 8008890:	4293      	cmp	r3, r2
 8008892:	d100      	bne.n	8008896 <memset+0xa>
 8008894:	4770      	bx	lr
 8008896:	f803 1b01 	strb.w	r1, [r3], #1
 800889a:	e7f9      	b.n	8008890 <memset+0x4>

0800889c <__errno>:
 800889c:	4b01      	ldr	r3, [pc, #4]	@ (80088a4 <__errno+0x8>)
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	20000010 	.word	0x20000010

080088a8 <__libc_init_array>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	2600      	movs	r6, #0
 80088ac:	4d0c      	ldr	r5, [pc, #48]	@ (80088e0 <__libc_init_array+0x38>)
 80088ae:	4c0d      	ldr	r4, [pc, #52]	@ (80088e4 <__libc_init_array+0x3c>)
 80088b0:	1b64      	subs	r4, r4, r5
 80088b2:	10a4      	asrs	r4, r4, #2
 80088b4:	42a6      	cmp	r6, r4
 80088b6:	d109      	bne.n	80088cc <__libc_init_array+0x24>
 80088b8:	f000 fc78 	bl	80091ac <_init>
 80088bc:	2600      	movs	r6, #0
 80088be:	4d0a      	ldr	r5, [pc, #40]	@ (80088e8 <__libc_init_array+0x40>)
 80088c0:	4c0a      	ldr	r4, [pc, #40]	@ (80088ec <__libc_init_array+0x44>)
 80088c2:	1b64      	subs	r4, r4, r5
 80088c4:	10a4      	asrs	r4, r4, #2
 80088c6:	42a6      	cmp	r6, r4
 80088c8:	d105      	bne.n	80088d6 <__libc_init_array+0x2e>
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80088d0:	4798      	blx	r3
 80088d2:	3601      	adds	r6, #1
 80088d4:	e7ee      	b.n	80088b4 <__libc_init_array+0xc>
 80088d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088da:	4798      	blx	r3
 80088dc:	3601      	adds	r6, #1
 80088de:	e7f2      	b.n	80088c6 <__libc_init_array+0x1e>
 80088e0:	0800c1b8 	.word	0x0800c1b8
 80088e4:	0800c1b8 	.word	0x0800c1b8
 80088e8:	0800c1b8 	.word	0x0800c1b8
 80088ec:	0800c1bc 	.word	0x0800c1bc

080088f0 <__retarget_lock_acquire_recursive>:
 80088f0:	4770      	bx	lr

080088f2 <__retarget_lock_release_recursive>:
 80088f2:	4770      	bx	lr

080088f4 <_free_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4605      	mov	r5, r0
 80088f8:	2900      	cmp	r1, #0
 80088fa:	d040      	beq.n	800897e <_free_r+0x8a>
 80088fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008900:	1f0c      	subs	r4, r1, #4
 8008902:	2b00      	cmp	r3, #0
 8008904:	bfb8      	it	lt
 8008906:	18e4      	addlt	r4, r4, r3
 8008908:	f000 f8de 	bl	8008ac8 <__malloc_lock>
 800890c:	4a1c      	ldr	r2, [pc, #112]	@ (8008980 <_free_r+0x8c>)
 800890e:	6813      	ldr	r3, [r2, #0]
 8008910:	b933      	cbnz	r3, 8008920 <_free_r+0x2c>
 8008912:	6063      	str	r3, [r4, #4]
 8008914:	6014      	str	r4, [r2, #0]
 8008916:	4628      	mov	r0, r5
 8008918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800891c:	f000 b8da 	b.w	8008ad4 <__malloc_unlock>
 8008920:	42a3      	cmp	r3, r4
 8008922:	d908      	bls.n	8008936 <_free_r+0x42>
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	1821      	adds	r1, r4, r0
 8008928:	428b      	cmp	r3, r1
 800892a:	bf01      	itttt	eq
 800892c:	6819      	ldreq	r1, [r3, #0]
 800892e:	685b      	ldreq	r3, [r3, #4]
 8008930:	1809      	addeq	r1, r1, r0
 8008932:	6021      	streq	r1, [r4, #0]
 8008934:	e7ed      	b.n	8008912 <_free_r+0x1e>
 8008936:	461a      	mov	r2, r3
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	b10b      	cbz	r3, 8008940 <_free_r+0x4c>
 800893c:	42a3      	cmp	r3, r4
 800893e:	d9fa      	bls.n	8008936 <_free_r+0x42>
 8008940:	6811      	ldr	r1, [r2, #0]
 8008942:	1850      	adds	r0, r2, r1
 8008944:	42a0      	cmp	r0, r4
 8008946:	d10b      	bne.n	8008960 <_free_r+0x6c>
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	4401      	add	r1, r0
 800894c:	1850      	adds	r0, r2, r1
 800894e:	4283      	cmp	r3, r0
 8008950:	6011      	str	r1, [r2, #0]
 8008952:	d1e0      	bne.n	8008916 <_free_r+0x22>
 8008954:	6818      	ldr	r0, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	4408      	add	r0, r1
 800895a:	6010      	str	r0, [r2, #0]
 800895c:	6053      	str	r3, [r2, #4]
 800895e:	e7da      	b.n	8008916 <_free_r+0x22>
 8008960:	d902      	bls.n	8008968 <_free_r+0x74>
 8008962:	230c      	movs	r3, #12
 8008964:	602b      	str	r3, [r5, #0]
 8008966:	e7d6      	b.n	8008916 <_free_r+0x22>
 8008968:	6820      	ldr	r0, [r4, #0]
 800896a:	1821      	adds	r1, r4, r0
 800896c:	428b      	cmp	r3, r1
 800896e:	bf01      	itttt	eq
 8008970:	6819      	ldreq	r1, [r3, #0]
 8008972:	685b      	ldreq	r3, [r3, #4]
 8008974:	1809      	addeq	r1, r1, r0
 8008976:	6021      	streq	r1, [r4, #0]
 8008978:	6063      	str	r3, [r4, #4]
 800897a:	6054      	str	r4, [r2, #4]
 800897c:	e7cb      	b.n	8008916 <_free_r+0x22>
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	20000220 	.word	0x20000220

08008984 <sbrk_aligned>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	4e0f      	ldr	r6, [pc, #60]	@ (80089c4 <sbrk_aligned+0x40>)
 8008988:	460c      	mov	r4, r1
 800898a:	6831      	ldr	r1, [r6, #0]
 800898c:	4605      	mov	r5, r0
 800898e:	b911      	cbnz	r1, 8008996 <sbrk_aligned+0x12>
 8008990:	f000 fbaa 	bl	80090e8 <_sbrk_r>
 8008994:	6030      	str	r0, [r6, #0]
 8008996:	4621      	mov	r1, r4
 8008998:	4628      	mov	r0, r5
 800899a:	f000 fba5 	bl	80090e8 <_sbrk_r>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d103      	bne.n	80089aa <sbrk_aligned+0x26>
 80089a2:	f04f 34ff 	mov.w	r4, #4294967295
 80089a6:	4620      	mov	r0, r4
 80089a8:	bd70      	pop	{r4, r5, r6, pc}
 80089aa:	1cc4      	adds	r4, r0, #3
 80089ac:	f024 0403 	bic.w	r4, r4, #3
 80089b0:	42a0      	cmp	r0, r4
 80089b2:	d0f8      	beq.n	80089a6 <sbrk_aligned+0x22>
 80089b4:	1a21      	subs	r1, r4, r0
 80089b6:	4628      	mov	r0, r5
 80089b8:	f000 fb96 	bl	80090e8 <_sbrk_r>
 80089bc:	3001      	adds	r0, #1
 80089be:	d1f2      	bne.n	80089a6 <sbrk_aligned+0x22>
 80089c0:	e7ef      	b.n	80089a2 <sbrk_aligned+0x1e>
 80089c2:	bf00      	nop
 80089c4:	2000021c 	.word	0x2000021c

080089c8 <_malloc_r>:
 80089c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089cc:	1ccd      	adds	r5, r1, #3
 80089ce:	f025 0503 	bic.w	r5, r5, #3
 80089d2:	3508      	adds	r5, #8
 80089d4:	2d0c      	cmp	r5, #12
 80089d6:	bf38      	it	cc
 80089d8:	250c      	movcc	r5, #12
 80089da:	2d00      	cmp	r5, #0
 80089dc:	4606      	mov	r6, r0
 80089de:	db01      	blt.n	80089e4 <_malloc_r+0x1c>
 80089e0:	42a9      	cmp	r1, r5
 80089e2:	d904      	bls.n	80089ee <_malloc_r+0x26>
 80089e4:	230c      	movs	r3, #12
 80089e6:	6033      	str	r3, [r6, #0]
 80089e8:	2000      	movs	r0, #0
 80089ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ac4 <_malloc_r+0xfc>
 80089f2:	f000 f869 	bl	8008ac8 <__malloc_lock>
 80089f6:	f8d8 3000 	ldr.w	r3, [r8]
 80089fa:	461c      	mov	r4, r3
 80089fc:	bb44      	cbnz	r4, 8008a50 <_malloc_r+0x88>
 80089fe:	4629      	mov	r1, r5
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff ffbf 	bl	8008984 <sbrk_aligned>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	4604      	mov	r4, r0
 8008a0a:	d158      	bne.n	8008abe <_malloc_r+0xf6>
 8008a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8008a10:	4627      	mov	r7, r4
 8008a12:	2f00      	cmp	r7, #0
 8008a14:	d143      	bne.n	8008a9e <_malloc_r+0xd6>
 8008a16:	2c00      	cmp	r4, #0
 8008a18:	d04b      	beq.n	8008ab2 <_malloc_r+0xea>
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	4630      	mov	r0, r6
 8008a20:	eb04 0903 	add.w	r9, r4, r3
 8008a24:	f000 fb60 	bl	80090e8 <_sbrk_r>
 8008a28:	4581      	cmp	r9, r0
 8008a2a:	d142      	bne.n	8008ab2 <_malloc_r+0xea>
 8008a2c:	6821      	ldr	r1, [r4, #0]
 8008a2e:	4630      	mov	r0, r6
 8008a30:	1a6d      	subs	r5, r5, r1
 8008a32:	4629      	mov	r1, r5
 8008a34:	f7ff ffa6 	bl	8008984 <sbrk_aligned>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d03a      	beq.n	8008ab2 <_malloc_r+0xea>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	442b      	add	r3, r5
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	f8d8 3000 	ldr.w	r3, [r8]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	bb62      	cbnz	r2, 8008aa4 <_malloc_r+0xdc>
 8008a4a:	f8c8 7000 	str.w	r7, [r8]
 8008a4e:	e00f      	b.n	8008a70 <_malloc_r+0xa8>
 8008a50:	6822      	ldr	r2, [r4, #0]
 8008a52:	1b52      	subs	r2, r2, r5
 8008a54:	d420      	bmi.n	8008a98 <_malloc_r+0xd0>
 8008a56:	2a0b      	cmp	r2, #11
 8008a58:	d917      	bls.n	8008a8a <_malloc_r+0xc2>
 8008a5a:	1961      	adds	r1, r4, r5
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	6025      	str	r5, [r4, #0]
 8008a60:	bf18      	it	ne
 8008a62:	6059      	strne	r1, [r3, #4]
 8008a64:	6863      	ldr	r3, [r4, #4]
 8008a66:	bf08      	it	eq
 8008a68:	f8c8 1000 	streq.w	r1, [r8]
 8008a6c:	5162      	str	r2, [r4, r5]
 8008a6e:	604b      	str	r3, [r1, #4]
 8008a70:	4630      	mov	r0, r6
 8008a72:	f000 f82f 	bl	8008ad4 <__malloc_unlock>
 8008a76:	f104 000b 	add.w	r0, r4, #11
 8008a7a:	1d23      	adds	r3, r4, #4
 8008a7c:	f020 0007 	bic.w	r0, r0, #7
 8008a80:	1ac2      	subs	r2, r0, r3
 8008a82:	bf1c      	itt	ne
 8008a84:	1a1b      	subne	r3, r3, r0
 8008a86:	50a3      	strne	r3, [r4, r2]
 8008a88:	e7af      	b.n	80089ea <_malloc_r+0x22>
 8008a8a:	6862      	ldr	r2, [r4, #4]
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	bf0c      	ite	eq
 8008a90:	f8c8 2000 	streq.w	r2, [r8]
 8008a94:	605a      	strne	r2, [r3, #4]
 8008a96:	e7eb      	b.n	8008a70 <_malloc_r+0xa8>
 8008a98:	4623      	mov	r3, r4
 8008a9a:	6864      	ldr	r4, [r4, #4]
 8008a9c:	e7ae      	b.n	80089fc <_malloc_r+0x34>
 8008a9e:	463c      	mov	r4, r7
 8008aa0:	687f      	ldr	r7, [r7, #4]
 8008aa2:	e7b6      	b.n	8008a12 <_malloc_r+0x4a>
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	d1fb      	bne.n	8008aa4 <_malloc_r+0xdc>
 8008aac:	2300      	movs	r3, #0
 8008aae:	6053      	str	r3, [r2, #4]
 8008ab0:	e7de      	b.n	8008a70 <_malloc_r+0xa8>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	6033      	str	r3, [r6, #0]
 8008ab8:	f000 f80c 	bl	8008ad4 <__malloc_unlock>
 8008abc:	e794      	b.n	80089e8 <_malloc_r+0x20>
 8008abe:	6005      	str	r5, [r0, #0]
 8008ac0:	e7d6      	b.n	8008a70 <_malloc_r+0xa8>
 8008ac2:	bf00      	nop
 8008ac4:	20000220 	.word	0x20000220

08008ac8 <__malloc_lock>:
 8008ac8:	4801      	ldr	r0, [pc, #4]	@ (8008ad0 <__malloc_lock+0x8>)
 8008aca:	f7ff bf11 	b.w	80088f0 <__retarget_lock_acquire_recursive>
 8008ace:	bf00      	nop
 8008ad0:	20000218 	.word	0x20000218

08008ad4 <__malloc_unlock>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	@ (8008adc <__malloc_unlock+0x8>)
 8008ad6:	f7ff bf0c 	b.w	80088f2 <__retarget_lock_release_recursive>
 8008ada:	bf00      	nop
 8008adc:	20000218 	.word	0x20000218

08008ae0 <__ssputs_r>:
 8008ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	461f      	mov	r7, r3
 8008ae6:	688e      	ldr	r6, [r1, #8]
 8008ae8:	4682      	mov	sl, r0
 8008aea:	42be      	cmp	r6, r7
 8008aec:	460c      	mov	r4, r1
 8008aee:	4690      	mov	r8, r2
 8008af0:	680b      	ldr	r3, [r1, #0]
 8008af2:	d82d      	bhi.n	8008b50 <__ssputs_r+0x70>
 8008af4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008af8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008afc:	d026      	beq.n	8008b4c <__ssputs_r+0x6c>
 8008afe:	6965      	ldr	r5, [r4, #20]
 8008b00:	6909      	ldr	r1, [r1, #16]
 8008b02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b06:	eba3 0901 	sub.w	r9, r3, r1
 8008b0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b0e:	1c7b      	adds	r3, r7, #1
 8008b10:	444b      	add	r3, r9
 8008b12:	106d      	asrs	r5, r5, #1
 8008b14:	429d      	cmp	r5, r3
 8008b16:	bf38      	it	cc
 8008b18:	461d      	movcc	r5, r3
 8008b1a:	0553      	lsls	r3, r2, #21
 8008b1c:	d527      	bpl.n	8008b6e <__ssputs_r+0x8e>
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f7ff ff52 	bl	80089c8 <_malloc_r>
 8008b24:	4606      	mov	r6, r0
 8008b26:	b360      	cbz	r0, 8008b82 <__ssputs_r+0xa2>
 8008b28:	464a      	mov	r2, r9
 8008b2a:	6921      	ldr	r1, [r4, #16]
 8008b2c:	f000 fafa 	bl	8009124 <memcpy>
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	6126      	str	r6, [r4, #16]
 8008b3e:	444e      	add	r6, r9
 8008b40:	6026      	str	r6, [r4, #0]
 8008b42:	463e      	mov	r6, r7
 8008b44:	6165      	str	r5, [r4, #20]
 8008b46:	eba5 0509 	sub.w	r5, r5, r9
 8008b4a:	60a5      	str	r5, [r4, #8]
 8008b4c:	42be      	cmp	r6, r7
 8008b4e:	d900      	bls.n	8008b52 <__ssputs_r+0x72>
 8008b50:	463e      	mov	r6, r7
 8008b52:	4632      	mov	r2, r6
 8008b54:	4641      	mov	r1, r8
 8008b56:	6820      	ldr	r0, [r4, #0]
 8008b58:	f000 faac 	bl	80090b4 <memmove>
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	1b9b      	subs	r3, r3, r6
 8008b62:	60a3      	str	r3, [r4, #8]
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	4433      	add	r3, r6
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6e:	462a      	mov	r2, r5
 8008b70:	f000 fae6 	bl	8009140 <_realloc_r>
 8008b74:	4606      	mov	r6, r0
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d1e0      	bne.n	8008b3c <__ssputs_r+0x5c>
 8008b7a:	4650      	mov	r0, sl
 8008b7c:	6921      	ldr	r1, [r4, #16]
 8008b7e:	f7ff feb9 	bl	80088f4 <_free_r>
 8008b82:	230c      	movs	r3, #12
 8008b84:	f8ca 3000 	str.w	r3, [sl]
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b92:	81a3      	strh	r3, [r4, #12]
 8008b94:	e7e9      	b.n	8008b6a <__ssputs_r+0x8a>
	...

08008b98 <_svfiprintf_r>:
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	4698      	mov	r8, r3
 8008b9e:	898b      	ldrh	r3, [r1, #12]
 8008ba0:	4607      	mov	r7, r0
 8008ba2:	061b      	lsls	r3, r3, #24
 8008ba4:	460d      	mov	r5, r1
 8008ba6:	4614      	mov	r4, r2
 8008ba8:	b09d      	sub	sp, #116	@ 0x74
 8008baa:	d510      	bpl.n	8008bce <_svfiprintf_r+0x36>
 8008bac:	690b      	ldr	r3, [r1, #16]
 8008bae:	b973      	cbnz	r3, 8008bce <_svfiprintf_r+0x36>
 8008bb0:	2140      	movs	r1, #64	@ 0x40
 8008bb2:	f7ff ff09 	bl	80089c8 <_malloc_r>
 8008bb6:	6028      	str	r0, [r5, #0]
 8008bb8:	6128      	str	r0, [r5, #16]
 8008bba:	b930      	cbnz	r0, 8008bca <_svfiprintf_r+0x32>
 8008bbc:	230c      	movs	r3, #12
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	b01d      	add	sp, #116	@ 0x74
 8008bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bca:	2340      	movs	r3, #64	@ 0x40
 8008bcc:	616b      	str	r3, [r5, #20]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bd2:	2320      	movs	r3, #32
 8008bd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bd8:	2330      	movs	r3, #48	@ 0x30
 8008bda:	f04f 0901 	mov.w	r9, #1
 8008bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8008be2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008d7c <_svfiprintf_r+0x1e4>
 8008be6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bea:	4623      	mov	r3, r4
 8008bec:	469a      	mov	sl, r3
 8008bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bf2:	b10a      	cbz	r2, 8008bf8 <_svfiprintf_r+0x60>
 8008bf4:	2a25      	cmp	r2, #37	@ 0x25
 8008bf6:	d1f9      	bne.n	8008bec <_svfiprintf_r+0x54>
 8008bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8008bfc:	d00b      	beq.n	8008c16 <_svfiprintf_r+0x7e>
 8008bfe:	465b      	mov	r3, fp
 8008c00:	4622      	mov	r2, r4
 8008c02:	4629      	mov	r1, r5
 8008c04:	4638      	mov	r0, r7
 8008c06:	f7ff ff6b 	bl	8008ae0 <__ssputs_r>
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	f000 80a7 	beq.w	8008d5e <_svfiprintf_r+0x1c6>
 8008c10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c12:	445a      	add	r2, fp
 8008c14:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c16:	f89a 3000 	ldrb.w	r3, [sl]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 809f 	beq.w	8008d5e <_svfiprintf_r+0x1c6>
 8008c20:	2300      	movs	r3, #0
 8008c22:	f04f 32ff 	mov.w	r2, #4294967295
 8008c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c2a:	f10a 0a01 	add.w	sl, sl, #1
 8008c2e:	9304      	str	r3, [sp, #16]
 8008c30:	9307      	str	r3, [sp, #28]
 8008c32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c36:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c38:	4654      	mov	r4, sl
 8008c3a:	2205      	movs	r2, #5
 8008c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c40:	484e      	ldr	r0, [pc, #312]	@ (8008d7c <_svfiprintf_r+0x1e4>)
 8008c42:	f000 fa61 	bl	8009108 <memchr>
 8008c46:	9a04      	ldr	r2, [sp, #16]
 8008c48:	b9d8      	cbnz	r0, 8008c82 <_svfiprintf_r+0xea>
 8008c4a:	06d0      	lsls	r0, r2, #27
 8008c4c:	bf44      	itt	mi
 8008c4e:	2320      	movmi	r3, #32
 8008c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c54:	0711      	lsls	r1, r2, #28
 8008c56:	bf44      	itt	mi
 8008c58:	232b      	movmi	r3, #43	@ 0x2b
 8008c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c62:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c64:	d015      	beq.n	8008c92 <_svfiprintf_r+0xfa>
 8008c66:	4654      	mov	r4, sl
 8008c68:	2000      	movs	r0, #0
 8008c6a:	f04f 0c0a 	mov.w	ip, #10
 8008c6e:	9a07      	ldr	r2, [sp, #28]
 8008c70:	4621      	mov	r1, r4
 8008c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c76:	3b30      	subs	r3, #48	@ 0x30
 8008c78:	2b09      	cmp	r3, #9
 8008c7a:	d94b      	bls.n	8008d14 <_svfiprintf_r+0x17c>
 8008c7c:	b1b0      	cbz	r0, 8008cac <_svfiprintf_r+0x114>
 8008c7e:	9207      	str	r2, [sp, #28]
 8008c80:	e014      	b.n	8008cac <_svfiprintf_r+0x114>
 8008c82:	eba0 0308 	sub.w	r3, r0, r8
 8008c86:	fa09 f303 	lsl.w	r3, r9, r3
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	46a2      	mov	sl, r4
 8008c8e:	9304      	str	r3, [sp, #16]
 8008c90:	e7d2      	b.n	8008c38 <_svfiprintf_r+0xa0>
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	1d19      	adds	r1, r3, #4
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	9103      	str	r1, [sp, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bfbb      	ittet	lt
 8008c9e:	425b      	neglt	r3, r3
 8008ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ca4:	9307      	strge	r3, [sp, #28]
 8008ca6:	9307      	strlt	r3, [sp, #28]
 8008ca8:	bfb8      	it	lt
 8008caa:	9204      	strlt	r2, [sp, #16]
 8008cac:	7823      	ldrb	r3, [r4, #0]
 8008cae:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cb0:	d10a      	bne.n	8008cc8 <_svfiprintf_r+0x130>
 8008cb2:	7863      	ldrb	r3, [r4, #1]
 8008cb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cb6:	d132      	bne.n	8008d1e <_svfiprintf_r+0x186>
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	3402      	adds	r4, #2
 8008cbc:	1d1a      	adds	r2, r3, #4
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	9203      	str	r2, [sp, #12]
 8008cc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cc6:	9305      	str	r3, [sp, #20]
 8008cc8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008d80 <_svfiprintf_r+0x1e8>
 8008ccc:	2203      	movs	r2, #3
 8008cce:	4650      	mov	r0, sl
 8008cd0:	7821      	ldrb	r1, [r4, #0]
 8008cd2:	f000 fa19 	bl	8009108 <memchr>
 8008cd6:	b138      	cbz	r0, 8008ce8 <_svfiprintf_r+0x150>
 8008cd8:	2240      	movs	r2, #64	@ 0x40
 8008cda:	9b04      	ldr	r3, [sp, #16]
 8008cdc:	eba0 000a 	sub.w	r0, r0, sl
 8008ce0:	4082      	lsls	r2, r0
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	3401      	adds	r4, #1
 8008ce6:	9304      	str	r3, [sp, #16]
 8008ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cec:	2206      	movs	r2, #6
 8008cee:	4825      	ldr	r0, [pc, #148]	@ (8008d84 <_svfiprintf_r+0x1ec>)
 8008cf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cf4:	f000 fa08 	bl	8009108 <memchr>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d036      	beq.n	8008d6a <_svfiprintf_r+0x1d2>
 8008cfc:	4b22      	ldr	r3, [pc, #136]	@ (8008d88 <_svfiprintf_r+0x1f0>)
 8008cfe:	bb1b      	cbnz	r3, 8008d48 <_svfiprintf_r+0x1b0>
 8008d00:	9b03      	ldr	r3, [sp, #12]
 8008d02:	3307      	adds	r3, #7
 8008d04:	f023 0307 	bic.w	r3, r3, #7
 8008d08:	3308      	adds	r3, #8
 8008d0a:	9303      	str	r3, [sp, #12]
 8008d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d0e:	4433      	add	r3, r6
 8008d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d12:	e76a      	b.n	8008bea <_svfiprintf_r+0x52>
 8008d14:	460c      	mov	r4, r1
 8008d16:	2001      	movs	r0, #1
 8008d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d1c:	e7a8      	b.n	8008c70 <_svfiprintf_r+0xd8>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f04f 0c0a 	mov.w	ip, #10
 8008d24:	4619      	mov	r1, r3
 8008d26:	3401      	adds	r4, #1
 8008d28:	9305      	str	r3, [sp, #20]
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d30:	3a30      	subs	r2, #48	@ 0x30
 8008d32:	2a09      	cmp	r2, #9
 8008d34:	d903      	bls.n	8008d3e <_svfiprintf_r+0x1a6>
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d0c6      	beq.n	8008cc8 <_svfiprintf_r+0x130>
 8008d3a:	9105      	str	r1, [sp, #20]
 8008d3c:	e7c4      	b.n	8008cc8 <_svfiprintf_r+0x130>
 8008d3e:	4604      	mov	r4, r0
 8008d40:	2301      	movs	r3, #1
 8008d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d46:	e7f0      	b.n	8008d2a <_svfiprintf_r+0x192>
 8008d48:	ab03      	add	r3, sp, #12
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	462a      	mov	r2, r5
 8008d4e:	4638      	mov	r0, r7
 8008d50:	4b0e      	ldr	r3, [pc, #56]	@ (8008d8c <_svfiprintf_r+0x1f4>)
 8008d52:	a904      	add	r1, sp, #16
 8008d54:	f3af 8000 	nop.w
 8008d58:	1c42      	adds	r2, r0, #1
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	d1d6      	bne.n	8008d0c <_svfiprintf_r+0x174>
 8008d5e:	89ab      	ldrh	r3, [r5, #12]
 8008d60:	065b      	lsls	r3, r3, #25
 8008d62:	f53f af2d 	bmi.w	8008bc0 <_svfiprintf_r+0x28>
 8008d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d68:	e72c      	b.n	8008bc4 <_svfiprintf_r+0x2c>
 8008d6a:	ab03      	add	r3, sp, #12
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	462a      	mov	r2, r5
 8008d70:	4638      	mov	r0, r7
 8008d72:	4b06      	ldr	r3, [pc, #24]	@ (8008d8c <_svfiprintf_r+0x1f4>)
 8008d74:	a904      	add	r1, sp, #16
 8008d76:	f000 f87d 	bl	8008e74 <_printf_i>
 8008d7a:	e7ed      	b.n	8008d58 <_svfiprintf_r+0x1c0>
 8008d7c:	0800c182 	.word	0x0800c182
 8008d80:	0800c188 	.word	0x0800c188
 8008d84:	0800c18c 	.word	0x0800c18c
 8008d88:	00000000 	.word	0x00000000
 8008d8c:	08008ae1 	.word	0x08008ae1

08008d90 <_printf_common>:
 8008d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d94:	4616      	mov	r6, r2
 8008d96:	4698      	mov	r8, r3
 8008d98:	688a      	ldr	r2, [r1, #8]
 8008d9a:	690b      	ldr	r3, [r1, #16]
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	bfb8      	it	lt
 8008da2:	4613      	movlt	r3, r2
 8008da4:	6033      	str	r3, [r6, #0]
 8008da6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008daa:	460c      	mov	r4, r1
 8008dac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008db0:	b10a      	cbz	r2, 8008db6 <_printf_common+0x26>
 8008db2:	3301      	adds	r3, #1
 8008db4:	6033      	str	r3, [r6, #0]
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	0699      	lsls	r1, r3, #26
 8008dba:	bf42      	ittt	mi
 8008dbc:	6833      	ldrmi	r3, [r6, #0]
 8008dbe:	3302      	addmi	r3, #2
 8008dc0:	6033      	strmi	r3, [r6, #0]
 8008dc2:	6825      	ldr	r5, [r4, #0]
 8008dc4:	f015 0506 	ands.w	r5, r5, #6
 8008dc8:	d106      	bne.n	8008dd8 <_printf_common+0x48>
 8008dca:	f104 0a19 	add.w	sl, r4, #25
 8008dce:	68e3      	ldr	r3, [r4, #12]
 8008dd0:	6832      	ldr	r2, [r6, #0]
 8008dd2:	1a9b      	subs	r3, r3, r2
 8008dd4:	42ab      	cmp	r3, r5
 8008dd6:	dc2b      	bgt.n	8008e30 <_printf_common+0xa0>
 8008dd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ddc:	6822      	ldr	r2, [r4, #0]
 8008dde:	3b00      	subs	r3, #0
 8008de0:	bf18      	it	ne
 8008de2:	2301      	movne	r3, #1
 8008de4:	0692      	lsls	r2, r2, #26
 8008de6:	d430      	bmi.n	8008e4a <_printf_common+0xba>
 8008de8:	4641      	mov	r1, r8
 8008dea:	4638      	mov	r0, r7
 8008dec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008df0:	47c8      	blx	r9
 8008df2:	3001      	adds	r0, #1
 8008df4:	d023      	beq.n	8008e3e <_printf_common+0xae>
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	6922      	ldr	r2, [r4, #16]
 8008dfa:	f003 0306 	and.w	r3, r3, #6
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	bf14      	ite	ne
 8008e02:	2500      	movne	r5, #0
 8008e04:	6833      	ldreq	r3, [r6, #0]
 8008e06:	f04f 0600 	mov.w	r6, #0
 8008e0a:	bf08      	it	eq
 8008e0c:	68e5      	ldreq	r5, [r4, #12]
 8008e0e:	f104 041a 	add.w	r4, r4, #26
 8008e12:	bf08      	it	eq
 8008e14:	1aed      	subeq	r5, r5, r3
 8008e16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008e1a:	bf08      	it	eq
 8008e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e20:	4293      	cmp	r3, r2
 8008e22:	bfc4      	itt	gt
 8008e24:	1a9b      	subgt	r3, r3, r2
 8008e26:	18ed      	addgt	r5, r5, r3
 8008e28:	42b5      	cmp	r5, r6
 8008e2a:	d11a      	bne.n	8008e62 <_printf_common+0xd2>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	e008      	b.n	8008e42 <_printf_common+0xb2>
 8008e30:	2301      	movs	r3, #1
 8008e32:	4652      	mov	r2, sl
 8008e34:	4641      	mov	r1, r8
 8008e36:	4638      	mov	r0, r7
 8008e38:	47c8      	blx	r9
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	d103      	bne.n	8008e46 <_printf_common+0xb6>
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e46:	3501      	adds	r5, #1
 8008e48:	e7c1      	b.n	8008dce <_printf_common+0x3e>
 8008e4a:	2030      	movs	r0, #48	@ 0x30
 8008e4c:	18e1      	adds	r1, r4, r3
 8008e4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e58:	4422      	add	r2, r4
 8008e5a:	3302      	adds	r3, #2
 8008e5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e60:	e7c2      	b.n	8008de8 <_printf_common+0x58>
 8008e62:	2301      	movs	r3, #1
 8008e64:	4622      	mov	r2, r4
 8008e66:	4641      	mov	r1, r8
 8008e68:	4638      	mov	r0, r7
 8008e6a:	47c8      	blx	r9
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d0e6      	beq.n	8008e3e <_printf_common+0xae>
 8008e70:	3601      	adds	r6, #1
 8008e72:	e7d9      	b.n	8008e28 <_printf_common+0x98>

08008e74 <_printf_i>:
 8008e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e78:	7e0f      	ldrb	r7, [r1, #24]
 8008e7a:	4691      	mov	r9, r2
 8008e7c:	2f78      	cmp	r7, #120	@ 0x78
 8008e7e:	4680      	mov	r8, r0
 8008e80:	460c      	mov	r4, r1
 8008e82:	469a      	mov	sl, r3
 8008e84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e8a:	d807      	bhi.n	8008e9c <_printf_i+0x28>
 8008e8c:	2f62      	cmp	r7, #98	@ 0x62
 8008e8e:	d80a      	bhi.n	8008ea6 <_printf_i+0x32>
 8008e90:	2f00      	cmp	r7, #0
 8008e92:	f000 80d3 	beq.w	800903c <_printf_i+0x1c8>
 8008e96:	2f58      	cmp	r7, #88	@ 0x58
 8008e98:	f000 80ba 	beq.w	8009010 <_printf_i+0x19c>
 8008e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ea0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ea4:	e03a      	b.n	8008f1c <_printf_i+0xa8>
 8008ea6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008eaa:	2b15      	cmp	r3, #21
 8008eac:	d8f6      	bhi.n	8008e9c <_printf_i+0x28>
 8008eae:	a101      	add	r1, pc, #4	@ (adr r1, 8008eb4 <_printf_i+0x40>)
 8008eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008eb4:	08008f0d 	.word	0x08008f0d
 8008eb8:	08008f21 	.word	0x08008f21
 8008ebc:	08008e9d 	.word	0x08008e9d
 8008ec0:	08008e9d 	.word	0x08008e9d
 8008ec4:	08008e9d 	.word	0x08008e9d
 8008ec8:	08008e9d 	.word	0x08008e9d
 8008ecc:	08008f21 	.word	0x08008f21
 8008ed0:	08008e9d 	.word	0x08008e9d
 8008ed4:	08008e9d 	.word	0x08008e9d
 8008ed8:	08008e9d 	.word	0x08008e9d
 8008edc:	08008e9d 	.word	0x08008e9d
 8008ee0:	08009023 	.word	0x08009023
 8008ee4:	08008f4b 	.word	0x08008f4b
 8008ee8:	08008fdd 	.word	0x08008fdd
 8008eec:	08008e9d 	.word	0x08008e9d
 8008ef0:	08008e9d 	.word	0x08008e9d
 8008ef4:	08009045 	.word	0x08009045
 8008ef8:	08008e9d 	.word	0x08008e9d
 8008efc:	08008f4b 	.word	0x08008f4b
 8008f00:	08008e9d 	.word	0x08008e9d
 8008f04:	08008e9d 	.word	0x08008e9d
 8008f08:	08008fe5 	.word	0x08008fe5
 8008f0c:	6833      	ldr	r3, [r6, #0]
 8008f0e:	1d1a      	adds	r2, r3, #4
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6032      	str	r2, [r6, #0]
 8008f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e09e      	b.n	800905e <_printf_i+0x1ea>
 8008f20:	6833      	ldr	r3, [r6, #0]
 8008f22:	6820      	ldr	r0, [r4, #0]
 8008f24:	1d19      	adds	r1, r3, #4
 8008f26:	6031      	str	r1, [r6, #0]
 8008f28:	0606      	lsls	r6, r0, #24
 8008f2a:	d501      	bpl.n	8008f30 <_printf_i+0xbc>
 8008f2c:	681d      	ldr	r5, [r3, #0]
 8008f2e:	e003      	b.n	8008f38 <_printf_i+0xc4>
 8008f30:	0645      	lsls	r5, r0, #25
 8008f32:	d5fb      	bpl.n	8008f2c <_printf_i+0xb8>
 8008f34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f38:	2d00      	cmp	r5, #0
 8008f3a:	da03      	bge.n	8008f44 <_printf_i+0xd0>
 8008f3c:	232d      	movs	r3, #45	@ 0x2d
 8008f3e:	426d      	negs	r5, r5
 8008f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f44:	230a      	movs	r3, #10
 8008f46:	4859      	ldr	r0, [pc, #356]	@ (80090ac <_printf_i+0x238>)
 8008f48:	e011      	b.n	8008f6e <_printf_i+0xfa>
 8008f4a:	6821      	ldr	r1, [r4, #0]
 8008f4c:	6833      	ldr	r3, [r6, #0]
 8008f4e:	0608      	lsls	r0, r1, #24
 8008f50:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f54:	d402      	bmi.n	8008f5c <_printf_i+0xe8>
 8008f56:	0649      	lsls	r1, r1, #25
 8008f58:	bf48      	it	mi
 8008f5a:	b2ad      	uxthmi	r5, r5
 8008f5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f5e:	6033      	str	r3, [r6, #0]
 8008f60:	bf14      	ite	ne
 8008f62:	230a      	movne	r3, #10
 8008f64:	2308      	moveq	r3, #8
 8008f66:	4851      	ldr	r0, [pc, #324]	@ (80090ac <_printf_i+0x238>)
 8008f68:	2100      	movs	r1, #0
 8008f6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f6e:	6866      	ldr	r6, [r4, #4]
 8008f70:	2e00      	cmp	r6, #0
 8008f72:	bfa8      	it	ge
 8008f74:	6821      	ldrge	r1, [r4, #0]
 8008f76:	60a6      	str	r6, [r4, #8]
 8008f78:	bfa4      	itt	ge
 8008f7a:	f021 0104 	bicge.w	r1, r1, #4
 8008f7e:	6021      	strge	r1, [r4, #0]
 8008f80:	b90d      	cbnz	r5, 8008f86 <_printf_i+0x112>
 8008f82:	2e00      	cmp	r6, #0
 8008f84:	d04b      	beq.n	800901e <_printf_i+0x1aa>
 8008f86:	4616      	mov	r6, r2
 8008f88:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f8c:	fb03 5711 	mls	r7, r3, r1, r5
 8008f90:	5dc7      	ldrb	r7, [r0, r7]
 8008f92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f96:	462f      	mov	r7, r5
 8008f98:	42bb      	cmp	r3, r7
 8008f9a:	460d      	mov	r5, r1
 8008f9c:	d9f4      	bls.n	8008f88 <_printf_i+0x114>
 8008f9e:	2b08      	cmp	r3, #8
 8008fa0:	d10b      	bne.n	8008fba <_printf_i+0x146>
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	07df      	lsls	r7, r3, #31
 8008fa6:	d508      	bpl.n	8008fba <_printf_i+0x146>
 8008fa8:	6923      	ldr	r3, [r4, #16]
 8008faa:	6861      	ldr	r1, [r4, #4]
 8008fac:	4299      	cmp	r1, r3
 8008fae:	bfde      	ittt	le
 8008fb0:	2330      	movle	r3, #48	@ 0x30
 8008fb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fba:	1b92      	subs	r2, r2, r6
 8008fbc:	6122      	str	r2, [r4, #16]
 8008fbe:	464b      	mov	r3, r9
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	f8cd a000 	str.w	sl, [sp]
 8008fc8:	aa03      	add	r2, sp, #12
 8008fca:	f7ff fee1 	bl	8008d90 <_printf_common>
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d14a      	bne.n	8009068 <_printf_i+0x1f4>
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd6:	b004      	add	sp, #16
 8008fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	f043 0320 	orr.w	r3, r3, #32
 8008fe2:	6023      	str	r3, [r4, #0]
 8008fe4:	2778      	movs	r7, #120	@ 0x78
 8008fe6:	4832      	ldr	r0, [pc, #200]	@ (80090b0 <_printf_i+0x23c>)
 8008fe8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	6831      	ldr	r1, [r6, #0]
 8008ff0:	061f      	lsls	r7, r3, #24
 8008ff2:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ff6:	d402      	bmi.n	8008ffe <_printf_i+0x18a>
 8008ff8:	065f      	lsls	r7, r3, #25
 8008ffa:	bf48      	it	mi
 8008ffc:	b2ad      	uxthmi	r5, r5
 8008ffe:	6031      	str	r1, [r6, #0]
 8009000:	07d9      	lsls	r1, r3, #31
 8009002:	bf44      	itt	mi
 8009004:	f043 0320 	orrmi.w	r3, r3, #32
 8009008:	6023      	strmi	r3, [r4, #0]
 800900a:	b11d      	cbz	r5, 8009014 <_printf_i+0x1a0>
 800900c:	2310      	movs	r3, #16
 800900e:	e7ab      	b.n	8008f68 <_printf_i+0xf4>
 8009010:	4826      	ldr	r0, [pc, #152]	@ (80090ac <_printf_i+0x238>)
 8009012:	e7e9      	b.n	8008fe8 <_printf_i+0x174>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	f023 0320 	bic.w	r3, r3, #32
 800901a:	6023      	str	r3, [r4, #0]
 800901c:	e7f6      	b.n	800900c <_printf_i+0x198>
 800901e:	4616      	mov	r6, r2
 8009020:	e7bd      	b.n	8008f9e <_printf_i+0x12a>
 8009022:	6833      	ldr	r3, [r6, #0]
 8009024:	6825      	ldr	r5, [r4, #0]
 8009026:	1d18      	adds	r0, r3, #4
 8009028:	6961      	ldr	r1, [r4, #20]
 800902a:	6030      	str	r0, [r6, #0]
 800902c:	062e      	lsls	r6, r5, #24
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	d501      	bpl.n	8009036 <_printf_i+0x1c2>
 8009032:	6019      	str	r1, [r3, #0]
 8009034:	e002      	b.n	800903c <_printf_i+0x1c8>
 8009036:	0668      	lsls	r0, r5, #25
 8009038:	d5fb      	bpl.n	8009032 <_printf_i+0x1be>
 800903a:	8019      	strh	r1, [r3, #0]
 800903c:	2300      	movs	r3, #0
 800903e:	4616      	mov	r6, r2
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	e7bc      	b.n	8008fbe <_printf_i+0x14a>
 8009044:	6833      	ldr	r3, [r6, #0]
 8009046:	2100      	movs	r1, #0
 8009048:	1d1a      	adds	r2, r3, #4
 800904a:	6032      	str	r2, [r6, #0]
 800904c:	681e      	ldr	r6, [r3, #0]
 800904e:	6862      	ldr	r2, [r4, #4]
 8009050:	4630      	mov	r0, r6
 8009052:	f000 f859 	bl	8009108 <memchr>
 8009056:	b108      	cbz	r0, 800905c <_printf_i+0x1e8>
 8009058:	1b80      	subs	r0, r0, r6
 800905a:	6060      	str	r0, [r4, #4]
 800905c:	6863      	ldr	r3, [r4, #4]
 800905e:	6123      	str	r3, [r4, #16]
 8009060:	2300      	movs	r3, #0
 8009062:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009066:	e7aa      	b.n	8008fbe <_printf_i+0x14a>
 8009068:	4632      	mov	r2, r6
 800906a:	4649      	mov	r1, r9
 800906c:	4640      	mov	r0, r8
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	47d0      	blx	sl
 8009072:	3001      	adds	r0, #1
 8009074:	d0ad      	beq.n	8008fd2 <_printf_i+0x15e>
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	079b      	lsls	r3, r3, #30
 800907a:	d413      	bmi.n	80090a4 <_printf_i+0x230>
 800907c:	68e0      	ldr	r0, [r4, #12]
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	4298      	cmp	r0, r3
 8009082:	bfb8      	it	lt
 8009084:	4618      	movlt	r0, r3
 8009086:	e7a6      	b.n	8008fd6 <_printf_i+0x162>
 8009088:	2301      	movs	r3, #1
 800908a:	4632      	mov	r2, r6
 800908c:	4649      	mov	r1, r9
 800908e:	4640      	mov	r0, r8
 8009090:	47d0      	blx	sl
 8009092:	3001      	adds	r0, #1
 8009094:	d09d      	beq.n	8008fd2 <_printf_i+0x15e>
 8009096:	3501      	adds	r5, #1
 8009098:	68e3      	ldr	r3, [r4, #12]
 800909a:	9903      	ldr	r1, [sp, #12]
 800909c:	1a5b      	subs	r3, r3, r1
 800909e:	42ab      	cmp	r3, r5
 80090a0:	dcf2      	bgt.n	8009088 <_printf_i+0x214>
 80090a2:	e7eb      	b.n	800907c <_printf_i+0x208>
 80090a4:	2500      	movs	r5, #0
 80090a6:	f104 0619 	add.w	r6, r4, #25
 80090aa:	e7f5      	b.n	8009098 <_printf_i+0x224>
 80090ac:	0800c193 	.word	0x0800c193
 80090b0:	0800c1a4 	.word	0x0800c1a4

080090b4 <memmove>:
 80090b4:	4288      	cmp	r0, r1
 80090b6:	b510      	push	{r4, lr}
 80090b8:	eb01 0402 	add.w	r4, r1, r2
 80090bc:	d902      	bls.n	80090c4 <memmove+0x10>
 80090be:	4284      	cmp	r4, r0
 80090c0:	4623      	mov	r3, r4
 80090c2:	d807      	bhi.n	80090d4 <memmove+0x20>
 80090c4:	1e43      	subs	r3, r0, #1
 80090c6:	42a1      	cmp	r1, r4
 80090c8:	d008      	beq.n	80090dc <memmove+0x28>
 80090ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090d2:	e7f8      	b.n	80090c6 <memmove+0x12>
 80090d4:	4601      	mov	r1, r0
 80090d6:	4402      	add	r2, r0
 80090d8:	428a      	cmp	r2, r1
 80090da:	d100      	bne.n	80090de <memmove+0x2a>
 80090dc:	bd10      	pop	{r4, pc}
 80090de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090e6:	e7f7      	b.n	80090d8 <memmove+0x24>

080090e8 <_sbrk_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	2300      	movs	r3, #0
 80090ec:	4d05      	ldr	r5, [pc, #20]	@ (8009104 <_sbrk_r+0x1c>)
 80090ee:	4604      	mov	r4, r0
 80090f0:	4608      	mov	r0, r1
 80090f2:	602b      	str	r3, [r5, #0]
 80090f4:	f7fd ff60 	bl	8006fb8 <_sbrk>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d102      	bne.n	8009102 <_sbrk_r+0x1a>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	b103      	cbz	r3, 8009102 <_sbrk_r+0x1a>
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	bd38      	pop	{r3, r4, r5, pc}
 8009104:	20000214 	.word	0x20000214

08009108 <memchr>:
 8009108:	4603      	mov	r3, r0
 800910a:	b510      	push	{r4, lr}
 800910c:	b2c9      	uxtb	r1, r1
 800910e:	4402      	add	r2, r0
 8009110:	4293      	cmp	r3, r2
 8009112:	4618      	mov	r0, r3
 8009114:	d101      	bne.n	800911a <memchr+0x12>
 8009116:	2000      	movs	r0, #0
 8009118:	e003      	b.n	8009122 <memchr+0x1a>
 800911a:	7804      	ldrb	r4, [r0, #0]
 800911c:	3301      	adds	r3, #1
 800911e:	428c      	cmp	r4, r1
 8009120:	d1f6      	bne.n	8009110 <memchr+0x8>
 8009122:	bd10      	pop	{r4, pc}

08009124 <memcpy>:
 8009124:	440a      	add	r2, r1
 8009126:	4291      	cmp	r1, r2
 8009128:	f100 33ff 	add.w	r3, r0, #4294967295
 800912c:	d100      	bne.n	8009130 <memcpy+0xc>
 800912e:	4770      	bx	lr
 8009130:	b510      	push	{r4, lr}
 8009132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009136:	4291      	cmp	r1, r2
 8009138:	f803 4f01 	strb.w	r4, [r3, #1]!
 800913c:	d1f9      	bne.n	8009132 <memcpy+0xe>
 800913e:	bd10      	pop	{r4, pc}

08009140 <_realloc_r>:
 8009140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009144:	4680      	mov	r8, r0
 8009146:	4615      	mov	r5, r2
 8009148:	460c      	mov	r4, r1
 800914a:	b921      	cbnz	r1, 8009156 <_realloc_r+0x16>
 800914c:	4611      	mov	r1, r2
 800914e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009152:	f7ff bc39 	b.w	80089c8 <_malloc_r>
 8009156:	b92a      	cbnz	r2, 8009164 <_realloc_r+0x24>
 8009158:	f7ff fbcc 	bl	80088f4 <_free_r>
 800915c:	2400      	movs	r4, #0
 800915e:	4620      	mov	r0, r4
 8009160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009164:	f000 f81a 	bl	800919c <_malloc_usable_size_r>
 8009168:	4285      	cmp	r5, r0
 800916a:	4606      	mov	r6, r0
 800916c:	d802      	bhi.n	8009174 <_realloc_r+0x34>
 800916e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009172:	d8f4      	bhi.n	800915e <_realloc_r+0x1e>
 8009174:	4629      	mov	r1, r5
 8009176:	4640      	mov	r0, r8
 8009178:	f7ff fc26 	bl	80089c8 <_malloc_r>
 800917c:	4607      	mov	r7, r0
 800917e:	2800      	cmp	r0, #0
 8009180:	d0ec      	beq.n	800915c <_realloc_r+0x1c>
 8009182:	42b5      	cmp	r5, r6
 8009184:	462a      	mov	r2, r5
 8009186:	4621      	mov	r1, r4
 8009188:	bf28      	it	cs
 800918a:	4632      	movcs	r2, r6
 800918c:	f7ff ffca 	bl	8009124 <memcpy>
 8009190:	4621      	mov	r1, r4
 8009192:	4640      	mov	r0, r8
 8009194:	f7ff fbae 	bl	80088f4 <_free_r>
 8009198:	463c      	mov	r4, r7
 800919a:	e7e0      	b.n	800915e <_realloc_r+0x1e>

0800919c <_malloc_usable_size_r>:
 800919c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a0:	1f18      	subs	r0, r3, #4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bfbc      	itt	lt
 80091a6:	580b      	ldrlt	r3, [r1, r0]
 80091a8:	18c0      	addlt	r0, r0, r3
 80091aa:	4770      	bx	lr

080091ac <_init>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	bf00      	nop
 80091b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b2:	bc08      	pop	{r3}
 80091b4:	469e      	mov	lr, r3
 80091b6:	4770      	bx	lr

080091b8 <_fini>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	bf00      	nop
 80091bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091be:	bc08      	pop	{r3}
 80091c0:	469e      	mov	lr, r3
 80091c2:	4770      	bx	lr
