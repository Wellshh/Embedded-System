
Lab9_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080026b8  080026b8  000036b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002730  08002730  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002730  08002730  00003730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002738  08002738  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002738  08002738  00003738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800273c  0800273c  0000373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002740  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000005c  0800279c  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  0800279c  00004270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc29  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0b  00000000  00000000  0000fcae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  000118c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000949  00000000  00000000  000124a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019af5  00000000  00000000  00012de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5f4  00000000  00000000  0002c8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098c71  00000000  00000000  00039ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2b43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003694  00000000  00000000  000d2b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000d621c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	080026a0 	.word	0x080026a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	080026a0 	.word	0x080026a0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b09a      	sub	sp, #104	@ 0x68
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fa71 	bl	8000720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f83b 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f8a5 	bl	8000390 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000246:	f000 f879 	bl	800033c <MX_USART1_UART_Init>
//  MX_WWDG_Init();
//  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
//  __HAL_TIM_CLEAR_IT(&htim3,TIM_IT_UPDATE);
//  HAL_TIM_Base_Start_IT(&htim3);
  HAL_GPIO_WritePin(GPIOD, LED1_Pin, SET);
 800024a:	2201      	movs	r2, #1
 800024c:	2104      	movs	r1, #4
 800024e:	4815      	ldr	r0, [pc, #84]	@ (80002a4 <main+0x70>)
 8000250:	f000 fda5 	bl	8000d9e <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(i == 0){
 8000254:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <main+0x74>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d106      	bne.n	800026a <main+0x36>
		  HAL_UART_Transmit(&huart1, "Restart\r\n", 9, HAL_MAX_DELAY);
 800025c:	f04f 33ff 	mov.w	r3, #4294967295
 8000260:	2209      	movs	r2, #9
 8000262:	4912      	ldr	r1, [pc, #72]	@ (80002ac <main+0x78>)
 8000264:	4812      	ldr	r0, [pc, #72]	@ (80002b0 <main+0x7c>)
 8000266:	f001 fb69 	bl	800193c <HAL_UART_Transmit>
	  }
	  i++;
 800026a:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <main+0x74>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	3301      	adds	r3, #1
 8000270:	4a0d      	ldr	r2, [pc, #52]	@ (80002a8 <main+0x74>)
 8000272:	6013      	str	r3, [r2, #0]
	  sprintf(msg, "i = %d\r\n", i);
 8000274:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <main+0x74>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	490e      	ldr	r1, [pc, #56]	@ (80002b4 <main+0x80>)
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fd5f 	bl	8001d40 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ffcd 	bl	8000224 <strlen>
 800028a:	4603      	mov	r3, r0
 800028c:	b29a      	uxth	r2, r3
 800028e:	1d39      	adds	r1, r7, #4
 8000290:	f04f 33ff 	mov.w	r3, #4294967295
 8000294:	4806      	ldr	r0, [pc, #24]	@ (80002b0 <main+0x7c>)
 8000296:	f001 fb51 	bl	800193c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800029a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800029e:	f000 faa1 	bl	80007e4 <HAL_Delay>
	  if(i == 0){
 80002a2:	e7d7      	b.n	8000254 <main+0x20>
 80002a4:	40011400 	.word	0x40011400
 80002a8:	2000011c 	.word	0x2000011c
 80002ac:	080026b8 	.word	0x080026b8
 80002b0:	200000c0 	.word	0x200000c0
 80002b4:	080026c4 	.word	0x080026c4

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	@ 0x40
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fd5a 	bl	8001d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	2310      	movs	r3, #16
 80002e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e6:	2302      	movs	r3, #2
 80002e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002ea:	2300      	movs	r3, #0
 80002ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002ee:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80002f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fd99 	bl	8000e30 <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000304:	f000 f89a 	bl	800043c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2302      	movs	r3, #2
 800030e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000314:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f001 f806 	bl	8001334 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800032e:	f000 f885 	bl	800043c <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	@ 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	@ (800038c <MX_USART1_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800034c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000374:	f001 fa92 	bl	800189c <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f85d 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200000c0 	.word	0x200000c0
 800038c:	40013800 	.word	0x40013800

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0308 	add.w	r3, r7, #8
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a4:	4b21      	ldr	r3, [pc, #132]	@ (800042c <MX_GPIO_Init+0x9c>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a20      	ldr	r2, [pc, #128]	@ (800042c <MX_GPIO_Init+0x9c>)
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b1e      	ldr	r3, [pc, #120]	@ (800042c <MX_GPIO_Init+0x9c>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0320 	and.w	r3, r3, #32
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_GPIO_Init+0x9c>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a1a      	ldr	r2, [pc, #104]	@ (800042c <MX_GPIO_Init+0x9c>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b18      	ldr	r3, [pc, #96]	@ (800042c <MX_GPIO_Init+0x9c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	603b      	str	r3, [r7, #0]
 80003d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2104      	movs	r1, #4
 80003d8:	4815      	ldr	r0, [pc, #84]	@ (8000430 <MX_GPIO_Init+0xa0>)
 80003da:	f000 fce0 	bl	8000d9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80003de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <MX_GPIO_Init+0xa4>)
 80003e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003e8:	2301      	movs	r3, #1
 80003ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80003ec:	f107 0308 	add.w	r3, r7, #8
 80003f0:	4619      	mov	r1, r3
 80003f2:	4811      	ldr	r0, [pc, #68]	@ (8000438 <MX_GPIO_Init+0xa8>)
 80003f4:	f000 fb28 	bl	8000a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80003f8:	2304      	movs	r3, #4
 80003fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	2302      	movs	r3, #2
 8000406:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	4619      	mov	r1, r3
 800040e:	4808      	ldr	r0, [pc, #32]	@ (8000430 <MX_GPIO_Init+0xa0>)
 8000410:	f000 fb1a 	bl	8000a48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	2028      	movs	r0, #40	@ 0x28
 800041a:	f000 fade 	bl	80009da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800041e:	2028      	movs	r0, #40	@ 0x28
 8000420:	f000 faf7 	bl	8000a12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000424:	bf00      	nop
 8000426:	3718      	adds	r7, #24
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40021000 	.word	0x40021000
 8000430:	40011400 	.word	0x40011400
 8000434:	10210000 	.word	0x10210000
 8000438:	40010800 	.word	0x40010800

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <Error_Handler+0x8>

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044e:	4b16      	ldr	r3, [pc, #88]	@ (80004a8 <HAL_MspInit+0x60>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a15      	ldr	r2, [pc, #84]	@ (80004a8 <HAL_MspInit+0x60>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <HAL_MspInit+0x60>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <HAL_MspInit+0x60>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a0f      	ldr	r2, [pc, #60]	@ (80004a8 <HAL_MspInit+0x60>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <HAL_MspInit+0x60>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800047e:	2005      	movs	r0, #5
 8000480:	f000 faa0 	bl	80009c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000484:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <HAL_MspInit+0x64>)
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	4a04      	ldr	r2, [pc, #16]	@ (80004ac <HAL_MspInit+0x64>)
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a0:	bf00      	nop
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010000 	.word	0x40010000

080004b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a1c      	ldr	r2, [pc, #112]	@ (800053c <HAL_UART_MspInit+0x8c>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d131      	bne.n	8000534 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <HAL_UART_MspInit+0x90>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000540 <HAL_UART_MspInit+0x90>)
 80004d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <HAL_UART_MspInit+0x90>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b15      	ldr	r3, [pc, #84]	@ (8000540 <HAL_UART_MspInit+0x90>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a14      	ldr	r2, [pc, #80]	@ (8000540 <HAL_UART_MspInit+0x90>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b12      	ldr	r3, [pc, #72]	@ (8000540 <HAL_UART_MspInit+0x90>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000500:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000506:	2302      	movs	r3, #2
 8000508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050a:	2303      	movs	r3, #3
 800050c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	480b      	ldr	r0, [pc, #44]	@ (8000544 <HAL_UART_MspInit+0x94>)
 8000516:	f000 fa97 	bl	8000a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800051a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800051e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	4805      	ldr	r0, [pc, #20]	@ (8000544 <HAL_UART_MspInit+0x94>)
 8000530:	f000 fa8a 	bl	8000a48 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000534:	bf00      	nop
 8000536:	3720      	adds	r7, #32
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40013800 	.word	0x40013800
 8000540:	40021000 	.word	0x40021000
 8000544:	40010800 	.word	0x40010800

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <NMI_Handler+0x4>

08000550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <MemManage_Handler+0x4>

08000560 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <BusFault_Handler+0x4>

08000568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <UsageFault_Handler+0x4>

08000570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000598:	f000 f908 	bl	80007ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 80005a4:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <WWDG_IRQHandler+0x10>)
 80005a6:	f001 fbac 	bl	8001d02 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000108 	.word	0x20000108

080005b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80005b8:	4802      	ldr	r0, [pc, #8]	@ (80005c4 <TIM3_IRQHandler+0x10>)
 80005ba:	f001 f849 	bl	8001650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000078 	.word	0x20000078

080005c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80005cc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80005d0:	f000 fc16 	bl	8000e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <HAL_WWDG_EarlyWakeupCallback>:

/* USER CODE BEGIN 1 */
void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef* hwwdg)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
//	HAL_WWDG_Refresh(hwwdg);
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80005e0:	2104      	movs	r1, #4
 80005e2:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <HAL_WWDG_EarlyWakeupCallback+0x18>)
 80005e4:	f000 fbf3 	bl	8000dce <HAL_GPIO_TogglePin>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40011400 	.word	0x40011400

080005f4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000604:	d10b      	bne.n	800061e <HAL_GPIO_EXTI_Callback+0x2a>
	case KEY1_Pin:
		if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET){
 8000606:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800060a:	4808      	ldr	r0, [pc, #32]	@ (800062c <HAL_GPIO_EXTI_Callback+0x38>)
 800060c:	f000 fbb0 	bl	8000d70 <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d105      	bne.n	8000622 <HAL_GPIO_EXTI_Callback+0x2e>
//			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
			i = 0;
 8000616:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
		}
		break;
 800061c:	e001      	b.n	8000622 <HAL_GPIO_EXTI_Callback+0x2e>
	default:
		break;
 800061e:	bf00      	nop
 8000620:	e000      	b.n	8000624 <HAL_GPIO_EXTI_Callback+0x30>
		break;
 8000622:	bf00      	nop
	}
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40010800 	.word	0x40010800
 8000630:	2000011c 	.word	0x2000011c

08000634 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a05      	ldr	r2, [pc, #20]	@ (8000654 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d102      	bne.n	800064a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_WWDG_Refresh(&hwwdg);
 8000644:	4804      	ldr	r0, [pc, #16]	@ (8000658 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000646:	f001 fb4d 	bl	8001ce4 <HAL_WWDG_Refresh>
	}
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000078 	.word	0x20000078
 8000658:	20000108 	.word	0x20000108

0800065c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000664:	4a14      	ldr	r2, [pc, #80]	@ (80006b8 <_sbrk+0x5c>)
 8000666:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <_sbrk+0x60>)
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <_sbrk+0x64>)
 800067a:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <_sbrk+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	429a      	cmp	r2, r3
 800068a:	d207      	bcs.n	800069c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800068c:	f001 fb80 	bl	8001d90 <__errno>
 8000690:	4603      	mov	r3, r0
 8000692:	220c      	movs	r2, #12
 8000694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	e009      	b.n	80006b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a05      	ldr	r2, [pc, #20]	@ (80006c0 <_sbrk+0x64>)
 80006ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ae:	68fb      	ldr	r3, [r7, #12]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	2000c000 	.word	0x2000c000
 80006bc:	00000400 	.word	0x00000400
 80006c0:	20000120 	.word	0x20000120
 80006c4:	20000270 	.word	0x20000270

080006c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d4:	f7ff fff8 	bl	80006c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480b      	ldr	r0, [pc, #44]	@ (8000708 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006da:	490c      	ldr	r1, [pc, #48]	@ (800070c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000710 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a09      	ldr	r2, [pc, #36]	@ (8000714 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006f0:	4c09      	ldr	r4, [pc, #36]	@ (8000718 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fe:	f001 fb4d 	bl	8001d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000702:	f7ff fd97 	bl	8000234 <main>
  bx lr
 8000706:	4770      	bx	lr
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000710:	08002740 	.word	0x08002740
  ldr r2, =_sbss
 8000714:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000718:	20000270 	.word	0x20000270

0800071c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC1_2_IRQHandler>
	...

08000720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000724:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <HAL_Init+0x28>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <HAL_Init+0x28>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000730:	2003      	movs	r0, #3
 8000732:	f000 f947 	bl	80009c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000736:	2001      	movs	r0, #1
 8000738:	f000 f808 	bl	800074c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800073c:	f7ff fe84 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40022000 	.word	0x40022000

0800074c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <HAL_InitTick+0x54>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_InitTick+0x58>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000762:	fbb3 f3f1 	udiv	r3, r3, r1
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f95f 	bl	8000a2e <HAL_SYSTICK_Config>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e00e      	b.n	8000798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b0f      	cmp	r3, #15
 800077e:	d80a      	bhi.n	8000796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000780:	2200      	movs	r2, #0
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f000 f927 	bl	80009da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800078c:	4a06      	ldr	r2, [pc, #24]	@ (80007a8 <HAL_InitTick+0x5c>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000792:	2300      	movs	r3, #0
 8000794:	e000      	b.n	8000798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000004 	.word	0x20000004

080007ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <HAL_IncTick+0x1c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <HAL_IncTick+0x20>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4a03      	ldr	r2, [pc, #12]	@ (80007cc <HAL_IncTick+0x20>)
 80007be:	6013      	str	r3, [r2, #0]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000124 	.word	0x20000124

080007d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;
 80007d4:	4b02      	ldr	r3, [pc, #8]	@ (80007e0 <HAL_GetTick+0x10>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000124 	.word	0x20000124

080007e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ec:	f7ff fff0 	bl	80007d0 <HAL_GetTick>
 80007f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007fc:	d005      	beq.n	800080a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <HAL_Delay+0x44>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800080a:	bf00      	nop
 800080c:	f7ff ffe0 	bl	80007d0 <HAL_GetTick>
 8000810:	4602      	mov	r2, r0
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	429a      	cmp	r2, r3
 800081a:	d8f7      	bhi.n	800080c <HAL_Delay+0x28>
  {
  }
}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000008 	.word	0x20000008

0800082c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000854:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085e:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <__NVIC_GetPriorityGrouping+0x18>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	f003 0307 	and.w	r3, r3, #7
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	db0b      	blt.n	80008ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 021f 	and.w	r2, r3, #31
 80008a8:	4906      	ldr	r1, [pc, #24]	@ (80008c4 <__NVIC_EnableIRQ+0x34>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	095b      	lsrs	r3, r3, #5
 80008b0:	2001      	movs	r0, #1
 80008b2:	fa00 f202 	lsl.w	r2, r0, r2
 80008b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	@ (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	@ (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	@ 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	@ 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000990:	d301      	bcc.n	8000996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000992:	2301      	movs	r3, #1
 8000994:	e00f      	b.n	80009b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <SysTick_Config+0x40>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099e:	210f      	movs	r1, #15
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f7ff ff90 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <SysTick_Config+0x40>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ae:	4b04      	ldr	r3, [pc, #16]	@ (80009c0 <SysTick_Config+0x40>)
 80009b0:	2207      	movs	r2, #7
 80009b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	e000e010 	.word	0xe000e010

080009c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ff2d 	bl	800082c <__NVIC_SetPriorityGrouping>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ec:	f7ff ff42 	bl	8000874 <__NVIC_GetPriorityGrouping>
 80009f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	68b9      	ldr	r1, [r7, #8]
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f7ff ff90 	bl	800091c <NVIC_EncodePriority>
 80009fc:	4602      	mov	r2, r0
 80009fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff5f 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff35 	bl	8000890 <__NVIC_EnableIRQ>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ffa2 	bl	8000980 <SysTick_Config>
 8000a3c:	4603      	mov	r3, r0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b08b      	sub	sp, #44	@ 0x2c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5a:	e179      	b.n	8000d50 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	f040 8168 	bne.w	8000d4a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4a96      	ldr	r2, [pc, #600]	@ (8000cd8 <HAL_GPIO_Init+0x290>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d05e      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000a84:	4a94      	ldr	r2, [pc, #592]	@ (8000cd8 <HAL_GPIO_Init+0x290>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d875      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000a8a:	4a94      	ldr	r2, [pc, #592]	@ (8000cdc <HAL_GPIO_Init+0x294>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d058      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000a90:	4a92      	ldr	r2, [pc, #584]	@ (8000cdc <HAL_GPIO_Init+0x294>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d86f      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000a96:	4a92      	ldr	r2, [pc, #584]	@ (8000ce0 <HAL_GPIO_Init+0x298>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d052      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000a9c:	4a90      	ldr	r2, [pc, #576]	@ (8000ce0 <HAL_GPIO_Init+0x298>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d869      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000aa2:	4a90      	ldr	r2, [pc, #576]	@ (8000ce4 <HAL_GPIO_Init+0x29c>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d04c      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000aa8:	4a8e      	ldr	r2, [pc, #568]	@ (8000ce4 <HAL_GPIO_Init+0x29c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d863      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000aae:	4a8e      	ldr	r2, [pc, #568]	@ (8000ce8 <HAL_GPIO_Init+0x2a0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d046      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000ab4:	4a8c      	ldr	r2, [pc, #560]	@ (8000ce8 <HAL_GPIO_Init+0x2a0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d85d      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000aba:	2b12      	cmp	r3, #18
 8000abc:	d82a      	bhi.n	8000b14 <HAL_GPIO_Init+0xcc>
 8000abe:	2b12      	cmp	r3, #18
 8000ac0:	d859      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac8 <HAL_GPIO_Init+0x80>)
 8000ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac8:	08000b43 	.word	0x08000b43
 8000acc:	08000b1d 	.word	0x08000b1d
 8000ad0:	08000b2f 	.word	0x08000b2f
 8000ad4:	08000b71 	.word	0x08000b71
 8000ad8:	08000b77 	.word	0x08000b77
 8000adc:	08000b77 	.word	0x08000b77
 8000ae0:	08000b77 	.word	0x08000b77
 8000ae4:	08000b77 	.word	0x08000b77
 8000ae8:	08000b77 	.word	0x08000b77
 8000aec:	08000b77 	.word	0x08000b77
 8000af0:	08000b77 	.word	0x08000b77
 8000af4:	08000b77 	.word	0x08000b77
 8000af8:	08000b77 	.word	0x08000b77
 8000afc:	08000b77 	.word	0x08000b77
 8000b00:	08000b77 	.word	0x08000b77
 8000b04:	08000b77 	.word	0x08000b77
 8000b08:	08000b77 	.word	0x08000b77
 8000b0c:	08000b25 	.word	0x08000b25
 8000b10:	08000b39 	.word	0x08000b39
 8000b14:	4a75      	ldr	r2, [pc, #468]	@ (8000cec <HAL_GPIO_Init+0x2a4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d013      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b1a:	e02c      	b.n	8000b76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	623b      	str	r3, [r7, #32]
          break;
 8000b22:	e029      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	623b      	str	r3, [r7, #32]
          break;
 8000b2c:	e024      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	3308      	adds	r3, #8
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e01f      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	330c      	adds	r3, #12
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	e01a      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d102      	bne.n	8000b50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	623b      	str	r3, [r7, #32]
          break;
 8000b4e:	e013      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d105      	bne.n	8000b64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	611a      	str	r2, [r3, #16]
          break;
 8000b62:	e009      	b.n	8000b78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b64:	2308      	movs	r3, #8
 8000b66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	615a      	str	r2, [r3, #20]
          break;
 8000b6e:	e003      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
          break;
 8000b74:	e000      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          break;
 8000b76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	2bff      	cmp	r3, #255	@ 0xff
 8000b7c:	d801      	bhi.n	8000b82 <HAL_GPIO_Init+0x13a>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	e001      	b.n	8000b86 <HAL_GPIO_Init+0x13e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3304      	adds	r3, #4
 8000b86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	2bff      	cmp	r3, #255	@ 0xff
 8000b8c:	d802      	bhi.n	8000b94 <HAL_GPIO_Init+0x14c>
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	e002      	b.n	8000b9a <HAL_GPIO_Init+0x152>
 8000b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b96:	3b08      	subs	r3, #8
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	401a      	ands	r2, r3
 8000bac:	6a39      	ldr	r1, [r7, #32]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 80c1 	beq.w	8000d4a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc8:	4b49      	ldr	r3, [pc, #292]	@ (8000cf0 <HAL_GPIO_Init+0x2a8>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a48      	ldr	r2, [pc, #288]	@ (8000cf0 <HAL_GPIO_Init+0x2a8>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b46      	ldr	r3, [pc, #280]	@ (8000cf0 <HAL_GPIO_Init+0x2a8>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000be0:	4a44      	ldr	r2, [pc, #272]	@ (8000cf4 <HAL_GPIO_Init+0x2ac>)
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	089b      	lsrs	r3, r3, #2
 8000be6:	3302      	adds	r3, #2
 8000be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a3c      	ldr	r2, [pc, #240]	@ (8000cf8 <HAL_GPIO_Init+0x2b0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d01f      	beq.n	8000c4c <HAL_GPIO_Init+0x204>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a3b      	ldr	r2, [pc, #236]	@ (8000cfc <HAL_GPIO_Init+0x2b4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d019      	beq.n	8000c48 <HAL_GPIO_Init+0x200>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a3a      	ldr	r2, [pc, #232]	@ (8000d00 <HAL_GPIO_Init+0x2b8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d013      	beq.n	8000c44 <HAL_GPIO_Init+0x1fc>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a39      	ldr	r2, [pc, #228]	@ (8000d04 <HAL_GPIO_Init+0x2bc>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d00d      	beq.n	8000c40 <HAL_GPIO_Init+0x1f8>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a38      	ldr	r2, [pc, #224]	@ (8000d08 <HAL_GPIO_Init+0x2c0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d007      	beq.n	8000c3c <HAL_GPIO_Init+0x1f4>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a37      	ldr	r2, [pc, #220]	@ (8000d0c <HAL_GPIO_Init+0x2c4>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d101      	bne.n	8000c38 <HAL_GPIO_Init+0x1f0>
 8000c34:	2305      	movs	r3, #5
 8000c36:	e00a      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c38:	2306      	movs	r3, #6
 8000c3a:	e008      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c40:	2303      	movs	r3, #3
 8000c42:	e004      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c44:	2302      	movs	r3, #2
 8000c46:	e002      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e000      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c50:	f002 0203 	and.w	r2, r2, #3
 8000c54:	0092      	lsls	r2, r2, #2
 8000c56:	4093      	lsls	r3, r2
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c5e:	4925      	ldr	r1, [pc, #148]	@ (8000cf4 <HAL_GPIO_Init+0x2ac>)
 8000c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d006      	beq.n	8000c86 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c78:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	4924      	ldr	r1, [pc, #144]	@ (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	608b      	str	r3, [r1, #8]
 8000c84:	e006      	b.n	8000c94 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c86:	4b22      	ldr	r3, [pc, #136]	@ (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	4920      	ldr	r1, [pc, #128]	@ (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	491a      	ldr	r1, [pc, #104]	@ (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	60cb      	str	r3, [r1, #12]
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4916      	ldr	r1, [pc, #88]	@ (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d025      	beq.n	8000d14 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	4910      	ldr	r1, [pc, #64]	@ (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
 8000cd4:	e025      	b.n	8000d22 <HAL_GPIO_Init+0x2da>
 8000cd6:	bf00      	nop
 8000cd8:	10320000 	.word	0x10320000
 8000cdc:	10310000 	.word	0x10310000
 8000ce0:	10220000 	.word	0x10220000
 8000ce4:	10210000 	.word	0x10210000
 8000ce8:	10120000 	.word	0x10120000
 8000cec:	10110000 	.word	0x10110000
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	40010800 	.word	0x40010800
 8000cfc:	40010c00 	.word	0x40010c00
 8000d00:	40011000 	.word	0x40011000
 8000d04:	40011400 	.word	0x40011400
 8000d08:	40011800 	.word	0x40011800
 8000d0c:	40011c00 	.word	0x40011c00
 8000d10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_GPIO_Init+0x324>)
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	4913      	ldr	r1, [pc, #76]	@ (8000d6c <HAL_GPIO_Init+0x324>)
 8000d1e:	4013      	ands	r3, r2
 8000d20:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d006      	beq.n	8000d3c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <HAL_GPIO_Init+0x324>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	490e      	ldr	r1, [pc, #56]	@ (8000d6c <HAL_GPIO_Init+0x324>)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	600b      	str	r3, [r1, #0]
 8000d3a:	e006      	b.n	8000d4a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <HAL_GPIO_Init+0x324>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	4909      	ldr	r1, [pc, #36]	@ (8000d6c <HAL_GPIO_Init+0x324>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d56:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f47f ae7e 	bne.w	8000a5c <HAL_GPIO_Init+0x14>
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	372c      	adds	r7, #44	@ 0x2c
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40010400 	.word	0x40010400

08000d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e001      	b.n	8000d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	460b      	mov	r3, r1
 8000da8:	807b      	strh	r3, [r7, #2]
 8000daa:	4613      	mov	r3, r2
 8000dac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dae:	787b      	ldrb	r3, [r7, #1]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000db4:	887a      	ldrh	r2, [r7, #2]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dba:	e003      	b.n	8000dc4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dbc:	887b      	ldrh	r3, [r7, #2]
 8000dbe:	041a      	lsls	r2, r3, #16
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	611a      	str	r2, [r3, #16]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b085      	sub	sp, #20
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000de0:	887a      	ldrh	r2, [r7, #2]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4013      	ands	r3, r2
 8000de6:	041a      	lsls	r2, r3, #16
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	400b      	ands	r3, r1
 8000df0:	431a      	orrs	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e0a:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e0c:	695a      	ldr	r2, [r3, #20]
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fbe8 	bl	80005f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40010400 	.word	0x40010400

08000e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e272      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 8087 	beq.w	8000f5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e50:	4b92      	ldr	r3, [pc, #584]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d00c      	beq.n	8000e76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e5c:	4b8f      	ldr	r3, [pc, #572]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 030c 	and.w	r3, r3, #12
 8000e64:	2b08      	cmp	r3, #8
 8000e66:	d112      	bne.n	8000e8e <HAL_RCC_OscConfig+0x5e>
 8000e68:	4b8c      	ldr	r3, [pc, #560]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e74:	d10b      	bne.n	8000e8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e76:	4b89      	ldr	r3, [pc, #548]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d06c      	beq.n	8000f5c <HAL_RCC_OscConfig+0x12c>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d168      	bne.n	8000f5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e24c      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e96:	d106      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x76>
 8000e98:	4b80      	ldr	r3, [pc, #512]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a7f      	ldr	r2, [pc, #508]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	e02e      	b.n	8000f04 <HAL_RCC_OscConfig+0xd4>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x98>
 8000eae:	4b7b      	ldr	r3, [pc, #492]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a7a      	ldr	r2, [pc, #488]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b78      	ldr	r3, [pc, #480]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a77      	ldr	r2, [pc, #476]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e01d      	b.n	8000f04 <HAL_RCC_OscConfig+0xd4>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0xbc>
 8000ed2:	4b72      	ldr	r3, [pc, #456]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a71      	ldr	r2, [pc, #452]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	4b6f      	ldr	r3, [pc, #444]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e00b      	b.n	8000f04 <HAL_RCC_OscConfig+0xd4>
 8000eec:	4b6b      	ldr	r3, [pc, #428]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a6a      	ldr	r2, [pc, #424]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b68      	ldr	r3, [pc, #416]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a67      	ldr	r2, [pc, #412]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d013      	beq.n	8000f34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fc60 	bl	80007d0 <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fc5c 	bl	80007d0 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	@ 0x64
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e200      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f26:	4b5d      	ldr	r3, [pc, #372]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0f0      	beq.n	8000f14 <HAL_RCC_OscConfig+0xe4>
 8000f32:	e014      	b.n	8000f5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fc4c 	bl	80007d0 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f3c:	f7ff fc48 	bl	80007d0 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b64      	cmp	r3, #100	@ 0x64
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e1ec      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4e:	4b53      	ldr	r3, [pc, #332]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f0      	bne.n	8000f3c <HAL_RCC_OscConfig+0x10c>
 8000f5a:	e000      	b.n	8000f5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d063      	beq.n	8001032 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f6a:	4b4c      	ldr	r3, [pc, #304]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00b      	beq.n	8000f8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f76:	4b49      	ldr	r3, [pc, #292]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b08      	cmp	r3, #8
 8000f80:	d11c      	bne.n	8000fbc <HAL_RCC_OscConfig+0x18c>
 8000f82:	4b46      	ldr	r3, [pc, #280]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d116      	bne.n	8000fbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8e:	4b43      	ldr	r3, [pc, #268]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d005      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x176>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d001      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e1c0      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	4939      	ldr	r1, [pc, #228]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fba:	e03a      	b.n	8001032 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d020      	beq.n	8001006 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc4:	4b36      	ldr	r3, [pc, #216]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fca:	f7ff fc01 	bl	80007d0 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fbfd 	bl	80007d0 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e1a1      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f0      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4927      	ldr	r1, [pc, #156]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8001000:	4313      	orrs	r3, r2
 8001002:	600b      	str	r3, [r1, #0]
 8001004:	e015      	b.n	8001032 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001006:	4b26      	ldr	r3, [pc, #152]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fbe0 	bl	80007d0 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001014:	f7ff fbdc 	bl	80007d0 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e180      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001026:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	2b00      	cmp	r3, #0
 800103c:	d03a      	beq.n	80010b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d019      	beq.n	800107a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001046:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <HAL_RCC_OscConfig+0x274>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104c:	f7ff fbc0 	bl	80007d0 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001054:	f7ff fbbc 	bl	80007d0 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e160      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <HAL_RCC_OscConfig+0x26c>)
 8001068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f0      	beq.n	8001054 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f000 face 	bl	8001614 <RCC_Delay>
 8001078:	e01c      	b.n	80010b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_RCC_OscConfig+0x274>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001080:	f7ff fba6 	bl	80007d0 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001086:	e00f      	b.n	80010a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001088:	f7ff fba2 	bl	80007d0 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d908      	bls.n	80010a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e146      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	42420000 	.word	0x42420000
 80010a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a8:	4b92      	ldr	r3, [pc, #584]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1e9      	bne.n	8001088 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80a6 	beq.w	800120e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010c6:	4b8b      	ldr	r3, [pc, #556]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10d      	bne.n	80010ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b88      	ldr	r3, [pc, #544]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a87      	ldr	r2, [pc, #540]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b85      	ldr	r3, [pc, #532]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ea:	2301      	movs	r3, #1
 80010ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ee:	4b82      	ldr	r3, [pc, #520]	@ (80012f8 <HAL_RCC_OscConfig+0x4c8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d118      	bne.n	800112c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010fa:	4b7f      	ldr	r3, [pc, #508]	@ (80012f8 <HAL_RCC_OscConfig+0x4c8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a7e      	ldr	r2, [pc, #504]	@ (80012f8 <HAL_RCC_OscConfig+0x4c8>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001106:	f7ff fb63 	bl	80007d0 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800110e:	f7ff fb5f 	bl	80007d0 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b64      	cmp	r3, #100	@ 0x64
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e103      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001120:	4b75      	ldr	r3, [pc, #468]	@ (80012f8 <HAL_RCC_OscConfig+0x4c8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d106      	bne.n	8001142 <HAL_RCC_OscConfig+0x312>
 8001134:	4b6f      	ldr	r3, [pc, #444]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4a6e      	ldr	r2, [pc, #440]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6213      	str	r3, [r2, #32]
 8001140:	e02d      	b.n	800119e <HAL_RCC_OscConfig+0x36e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x334>
 800114a:	4b6a      	ldr	r3, [pc, #424]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	4a69      	ldr	r2, [pc, #420]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	f023 0301 	bic.w	r3, r3, #1
 8001154:	6213      	str	r3, [r2, #32]
 8001156:	4b67      	ldr	r3, [pc, #412]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4a66      	ldr	r2, [pc, #408]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	f023 0304 	bic.w	r3, r3, #4
 8001160:	6213      	str	r3, [r2, #32]
 8001162:	e01c      	b.n	800119e <HAL_RCC_OscConfig+0x36e>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2b05      	cmp	r3, #5
 800116a:	d10c      	bne.n	8001186 <HAL_RCC_OscConfig+0x356>
 800116c:	4b61      	ldr	r3, [pc, #388]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4a60      	ldr	r2, [pc, #384]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6213      	str	r3, [r2, #32]
 8001178:	4b5e      	ldr	r3, [pc, #376]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4a5d      	ldr	r2, [pc, #372]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6213      	str	r3, [r2, #32]
 8001184:	e00b      	b.n	800119e <HAL_RCC_OscConfig+0x36e>
 8001186:	4b5b      	ldr	r3, [pc, #364]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	4a5a      	ldr	r2, [pc, #360]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	6213      	str	r3, [r2, #32]
 8001192:	4b58      	ldr	r3, [pc, #352]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a57      	ldr	r2, [pc, #348]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	f023 0304 	bic.w	r3, r3, #4
 800119c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d015      	beq.n	80011d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a6:	f7ff fb13 	bl	80007d0 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ac:	e00a      	b.n	80011c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ae:	f7ff fb0f 	bl	80007d0 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011bc:	4293      	cmp	r3, r2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e0b1      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c4:	4b4b      	ldr	r3, [pc, #300]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0ee      	beq.n	80011ae <HAL_RCC_OscConfig+0x37e>
 80011d0:	e014      	b.n	80011fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fafd 	bl	80007d0 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d8:	e00a      	b.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011da:	f7ff faf9 	bl	80007d0 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e09b      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f0:	4b40      	ldr	r3, [pc, #256]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1ee      	bne.n	80011da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d105      	bne.n	800120e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001202:	4b3c      	ldr	r3, [pc, #240]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a3b      	ldr	r2, [pc, #236]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800120c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8087 	beq.w	8001326 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001218:	4b36      	ldr	r3, [pc, #216]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b08      	cmp	r3, #8
 8001222:	d061      	beq.n	80012e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d146      	bne.n	80012ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800122c:	4b33      	ldr	r3, [pc, #204]	@ (80012fc <HAL_RCC_OscConfig+0x4cc>)
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001232:	f7ff facd 	bl	80007d0 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800123a:	f7ff fac9 	bl	80007d0 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e06d      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124c:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f0      	bne.n	800123a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001260:	d108      	bne.n	8001274 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001262:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	4921      	ldr	r1, [pc, #132]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001274:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a19      	ldr	r1, [r3, #32]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001284:	430b      	orrs	r3, r1
 8001286:	491b      	ldr	r1, [pc, #108]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <HAL_RCC_OscConfig+0x4cc>)
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fa9d 	bl	80007d0 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129a:	f7ff fa99 	bl	80007d0 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e03d      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ac:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0x46a>
 80012b8:	e035      	b.n	8001326 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <HAL_RCC_OscConfig+0x4cc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fa86 	bl	80007d0 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c8:	f7ff fa82 	bl	80007d0 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e026      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x498>
 80012e6:	e01e      	b.n	8001326 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d107      	bne.n	8001300 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e019      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40007000 	.word	0x40007000
 80012fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_RCC_OscConfig+0x500>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	429a      	cmp	r2, r3
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800131e:	429a      	cmp	r2, r3
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0d0      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001348:	4b6a      	ldr	r3, [pc, #424]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d910      	bls.n	8001378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001356:	4b67      	ldr	r3, [pc, #412]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 0207 	bic.w	r2, r3, #7
 800135e:	4965      	ldr	r1, [pc, #404]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001366:	4b63      	ldr	r3, [pc, #396]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d001      	beq.n	8001378 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e0b8      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d020      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001390:	4b59      	ldr	r3, [pc, #356]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a58      	ldr	r2, [pc, #352]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800139a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013a8:	4b53      	ldr	r3, [pc, #332]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	4a52      	ldr	r2, [pc, #328]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80013b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b4:	4b50      	ldr	r3, [pc, #320]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	494d      	ldr	r1, [pc, #308]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d040      	beq.n	8001454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d107      	bne.n	80013ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	4b47      	ldr	r3, [pc, #284]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d115      	bne.n	8001412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e07f      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d107      	bne.n	8001402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f2:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d109      	bne.n	8001412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e073      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001402:	4b3d      	ldr	r3, [pc, #244]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e06b      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001412:	4b39      	ldr	r3, [pc, #228]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f023 0203 	bic.w	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4936      	ldr	r1, [pc, #216]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001424:	f7ff f9d4 	bl	80007d0 <HAL_GetTick>
 8001428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142a:	e00a      	b.n	8001442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142c:	f7ff f9d0 	bl	80007d0 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e053      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001442:	4b2d      	ldr	r3, [pc, #180]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 020c 	and.w	r2, r3, #12
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	429a      	cmp	r2, r3
 8001452:	d1eb      	bne.n	800142c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001454:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d210      	bcs.n	8001484 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001462:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 0207 	bic.w	r2, r3, #7
 800146a:	4922      	ldr	r1, [pc, #136]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001472:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d001      	beq.n	8001484 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e032      	b.n	80014ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d008      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	4916      	ldr	r1, [pc, #88]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d009      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ae:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	490e      	ldr	r1, [pc, #56]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014c2:	f000 f821 	bl	8001508 <HAL_RCC_GetSysClockFreq>
 80014c6:	4602      	mov	r2, r0
 80014c8:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	091b      	lsrs	r3, r3, #4
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	490a      	ldr	r1, [pc, #40]	@ (80014fc <HAL_RCC_ClockConfig+0x1c8>)
 80014d4:	5ccb      	ldrb	r3, [r1, r3]
 80014d6:	fa22 f303 	lsr.w	r3, r2, r3
 80014da:	4a09      	ldr	r2, [pc, #36]	@ (8001500 <HAL_RCC_ClockConfig+0x1cc>)
 80014dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_RCC_ClockConfig+0x1d0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f932 	bl	800074c <HAL_InitTick>

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40022000 	.word	0x40022000
 80014f8:	40021000 	.word	0x40021000
 80014fc:	080026d0 	.word	0x080026d0
 8001500:	20000000 	.word	0x20000000
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001522:	4b1e      	ldr	r3, [pc, #120]	@ (800159c <HAL_RCC_GetSysClockFreq+0x94>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b04      	cmp	r3, #4
 8001530:	d002      	beq.n	8001538 <HAL_RCC_GetSysClockFreq+0x30>
 8001532:	2b08      	cmp	r3, #8
 8001534:	d003      	beq.n	800153e <HAL_RCC_GetSysClockFreq+0x36>
 8001536:	e027      	b.n	8001588 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800153a:	613b      	str	r3, [r7, #16]
      break;
 800153c:	e027      	b.n	800158e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	0c9b      	lsrs	r3, r3, #18
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	4a17      	ldr	r2, [pc, #92]	@ (80015a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001548:	5cd3      	ldrb	r3, [r2, r3]
 800154a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d010      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <HAL_RCC_GetSysClockFreq+0x94>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	0c5b      	lsrs	r3, r3, #17
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	4a11      	ldr	r2, [pc, #68]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800156a:	fb03 f202 	mul.w	r2, r3, r2
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	fbb2 f3f3 	udiv	r3, r2, r3
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e004      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a0c      	ldr	r2, [pc, #48]	@ (80015ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	613b      	str	r3, [r7, #16]
      break;
 8001586:	e002      	b.n	800158e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800158a:	613b      	str	r3, [r7, #16]
      break;
 800158c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800158e:	693b      	ldr	r3, [r7, #16]
}
 8001590:	4618      	mov	r0, r3
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	007a1200 	.word	0x007a1200
 80015a4:	080026e8 	.word	0x080026e8
 80015a8:	080026f8 	.word	0x080026f8
 80015ac:	003d0900 	.word	0x003d0900

080015b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b4:	4b02      	ldr	r3, [pc, #8]	@ (80015c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000000 	.word	0x20000000

080015c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015c8:	f7ff fff2 	bl	80015b0 <HAL_RCC_GetHCLKFreq>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	4903      	ldr	r1, [pc, #12]	@ (80015e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015da:	5ccb      	ldrb	r3, [r1, r3]
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40021000 	.word	0x40021000
 80015e8:	080026e0 	.word	0x080026e0

080015ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015f0:	f7ff ffde 	bl	80015b0 <HAL_RCC_GetHCLKFreq>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b05      	ldr	r3, [pc, #20]	@ (800160c <HAL_RCC_GetPCLK2Freq+0x20>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	0adb      	lsrs	r3, r3, #11
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	4903      	ldr	r1, [pc, #12]	@ (8001610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001602:	5ccb      	ldrb	r3, [r1, r3]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000
 8001610:	080026e0 	.word	0x080026e0

08001614 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <RCC_Delay+0x34>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <RCC_Delay+0x38>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0a5b      	lsrs	r3, r3, #9
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001630:	bf00      	nop
  }
  while (Delay --);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	60fa      	str	r2, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f9      	bne.n	8001630 <RCC_Delay+0x1c>
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	20000000 	.word	0x20000000
 800164c:	10624dd3 	.word	0x10624dd3

08001650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d020      	beq.n	80016b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01b      	beq.n	80016b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f06f 0202 	mvn.w	r2, #2
 8001684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f8d1 	bl	8001842 <HAL_TIM_IC_CaptureCallback>
 80016a0:	e005      	b.n	80016ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f8c4 	bl	8001830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f8d3 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d020      	beq.n	8001700 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01b      	beq.n	8001700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f06f 0204 	mvn.w	r2, #4
 80016d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2202      	movs	r2, #2
 80016d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f8ab 	bl	8001842 <HAL_TIM_IC_CaptureCallback>
 80016ec:	e005      	b.n	80016fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f89e 	bl	8001830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f8ad 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d020      	beq.n	800174c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d01b      	beq.n	800174c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f06f 0208 	mvn.w	r2, #8
 800171c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2204      	movs	r2, #4
 8001722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f885 	bl	8001842 <HAL_TIM_IC_CaptureCallback>
 8001738:	e005      	b.n	8001746 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f878 	bl	8001830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f887 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b00      	cmp	r3, #0
 8001754:	d020      	beq.n	8001798 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01b      	beq.n	8001798 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f06f 0210 	mvn.w	r2, #16
 8001768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2208      	movs	r2, #8
 800176e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f85f 	bl	8001842 <HAL_TIM_IC_CaptureCallback>
 8001784:	e005      	b.n	8001792 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f852 	bl	8001830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f861 	bl	8001854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d007      	beq.n	80017bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f06f 0201 	mvn.w	r2, #1
 80017b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7fe ff3c 	bl	8000634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00c      	beq.n	80017e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80017d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f855 	bl	800188a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00c      	beq.n	8001804 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d007      	beq.n	8001804 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80017fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f831 	bl	8001866 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00c      	beq.n	8001828 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	2b00      	cmp	r3, #0
 8001816:	d007      	beq.n	8001828 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0220 	mvn.w	r2, #32
 8001820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f828 	bl	8001878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e042      	b.n	8001934 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7fe fdf4 	bl	80004b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2224      	movs	r2, #36	@ 0x24
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80018de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f971 	bl	8001bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80018f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2220      	movs	r2, #32
 8001928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	4613      	mov	r3, r2
 800194a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b20      	cmp	r3, #32
 800195a:	d175      	bne.n	8001a48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <HAL_UART_Transmit+0x2c>
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e06e      	b.n	8001a4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2221      	movs	r2, #33	@ 0x21
 8001976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800197a:	f7fe ff29 	bl	80007d0 <HAL_GetTick>
 800197e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	88fa      	ldrh	r2, [r7, #6]
 8001984:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	88fa      	ldrh	r2, [r7, #6]
 800198a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001994:	d108      	bne.n	80019a8 <HAL_UART_Transmit+0x6c>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d104      	bne.n	80019a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	e003      	b.n	80019b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80019b0:	e02e      	b.n	8001a10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2200      	movs	r2, #0
 80019ba:	2180      	movs	r1, #128	@ 0x80
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 f848 	bl	8001a52 <UART_WaitOnFlagUntilTimeout>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2220      	movs	r2, #32
 80019cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e03a      	b.n	8001a4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10b      	bne.n	80019f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	3302      	adds	r3, #2
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	e007      	b.n	8001a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	3301      	adds	r3, #1
 8001a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1cb      	bne.n	80019b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2200      	movs	r2, #0
 8001a22:	2140      	movs	r1, #64	@ 0x40
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 f814 	bl	8001a52 <UART_WaitOnFlagUntilTimeout>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2220      	movs	r2, #32
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e006      	b.n	8001a4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e000      	b.n	8001a4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001a48:	2302      	movs	r3, #2
  }
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3720      	adds	r7, #32
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a62:	e03b      	b.n	8001adc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6a:	d037      	beq.n	8001adc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6c:	f7fe feb0 	bl	80007d0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	6a3a      	ldr	r2, [r7, #32]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d302      	bcc.n	8001a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e03a      	b.n	8001afc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d023      	beq.n	8001adc <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b80      	cmp	r3, #128	@ 0x80
 8001a98:	d020      	beq.n	8001adc <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2b40      	cmp	r3, #64	@ 0x40
 8001a9e:	d01d      	beq.n	8001adc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d116      	bne.n	8001adc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f81d 	bl	8001b04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2208      	movs	r2, #8
 8001ace:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e00f      	b.n	8001afc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d0b4      	beq.n	8001a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b095      	sub	sp, #84	@ 0x54
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	330c      	adds	r3, #12
 8001b12:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b16:	e853 3f00 	ldrex	r3, [r3]
 8001b1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	330c      	adds	r3, #12
 8001b2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8001b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001b32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b34:	e841 2300 	strex	r3, r2, [r1]
 8001b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1e5      	bne.n	8001b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3314      	adds	r3, #20
 8001b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	e853 3f00 	ldrex	r3, [r3]
 8001b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3314      	adds	r3, #20
 8001b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b68:	e841 2300 	strex	r3, r2, [r1]
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1e5      	bne.n	8001b40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d119      	bne.n	8001bb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	330c      	adds	r3, #12
 8001b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	e853 3f00 	ldrex	r3, [r3]
 8001b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f023 0310 	bic.w	r3, r3, #16
 8001b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	330c      	adds	r3, #12
 8001b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b9c:	61ba      	str	r2, [r7, #24]
 8001b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ba0:	6979      	ldr	r1, [r7, #20]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	e841 2300 	strex	r3, r2, [r1]
 8001ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1e5      	bne.n	8001b7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001bbe:	bf00      	nop
 8001bc0:	3754      	adds	r7, #84	@ 0x54
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001c02:	f023 030c 	bic.w	r3, r3, #12
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cdc <UART_SetConfig+0x114>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d103      	bne.n	8001c38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c30:	f7ff fcdc 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	e002      	b.n	8001c3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c38:	f7ff fcc4 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8001c3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	009a      	lsls	r2, r3, #2
 8001c48:	441a      	add	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	4a22      	ldr	r2, [pc, #136]	@ (8001ce0 <UART_SetConfig+0x118>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	0119      	lsls	r1, r3, #4
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	009a      	lsls	r2, r3, #2
 8001c68:	441a      	add	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <UART_SetConfig+0x118>)
 8001c76:	fba3 0302 	umull	r0, r3, r3, r2
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2064      	movs	r0, #100	@ 0x64
 8001c7e:	fb00 f303 	mul.w	r3, r0, r3
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	3332      	adds	r3, #50	@ 0x32
 8001c88:	4a15      	ldr	r2, [pc, #84]	@ (8001ce0 <UART_SetConfig+0x118>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c94:	4419      	add	r1, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009a      	lsls	r2, r3, #2
 8001ca0:	441a      	add	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <UART_SetConfig+0x118>)
 8001cae:	fba3 0302 	umull	r0, r3, r3, r2
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2064      	movs	r0, #100	@ 0x64
 8001cb6:	fb00 f303 	mul.w	r3, r0, r3
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	3332      	adds	r3, #50	@ 0x32
 8001cc0:	4a07      	ldr	r2, [pc, #28]	@ (8001ce0 <UART_SetConfig+0x118>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	440a      	add	r2, r1
 8001cd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	51eb851f 	.word	0x51eb851f

08001ce4 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68d2      	ldr	r2, [r2, #12]
 8001cf4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d18:	d10e      	bne.n	8001d38 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0201 	mvn.w	r2, #1
 8001d30:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7fe fc50 	bl	80005d8 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <siprintf>:
 8001d40:	b40e      	push	{r1, r2, r3}
 8001d42:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001d46:	b500      	push	{lr}
 8001d48:	b09c      	sub	sp, #112	@ 0x70
 8001d4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8001d4c:	9002      	str	r0, [sp, #8]
 8001d4e:	9006      	str	r0, [sp, #24]
 8001d50:	9107      	str	r1, [sp, #28]
 8001d52:	9104      	str	r1, [sp, #16]
 8001d54:	4808      	ldr	r0, [pc, #32]	@ (8001d78 <siprintf+0x38>)
 8001d56:	4909      	ldr	r1, [pc, #36]	@ (8001d7c <siprintf+0x3c>)
 8001d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d5c:	9105      	str	r1, [sp, #20]
 8001d5e:	6800      	ldr	r0, [r0, #0]
 8001d60:	a902      	add	r1, sp, #8
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	f000 f992 	bl	800208c <_svfiprintf_r>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	9b02      	ldr	r3, [sp, #8]
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	b01c      	add	sp, #112	@ 0x70
 8001d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d74:	b003      	add	sp, #12
 8001d76:	4770      	bx	lr
 8001d78:	2000000c 	.word	0x2000000c
 8001d7c:	ffff0208 	.word	0xffff0208

08001d80 <memset>:
 8001d80:	4603      	mov	r3, r0
 8001d82:	4402      	add	r2, r0
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d100      	bne.n	8001d8a <memset+0xa>
 8001d88:	4770      	bx	lr
 8001d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d8e:	e7f9      	b.n	8001d84 <memset+0x4>

08001d90 <__errno>:
 8001d90:	4b01      	ldr	r3, [pc, #4]	@ (8001d98 <__errno+0x8>)
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	2000000c 	.word	0x2000000c

08001d9c <__libc_init_array>:
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	2600      	movs	r6, #0
 8001da0:	4d0c      	ldr	r5, [pc, #48]	@ (8001dd4 <__libc_init_array+0x38>)
 8001da2:	4c0d      	ldr	r4, [pc, #52]	@ (8001dd8 <__libc_init_array+0x3c>)
 8001da4:	1b64      	subs	r4, r4, r5
 8001da6:	10a4      	asrs	r4, r4, #2
 8001da8:	42a6      	cmp	r6, r4
 8001daa:	d109      	bne.n	8001dc0 <__libc_init_array+0x24>
 8001dac:	f000 fc78 	bl	80026a0 <_init>
 8001db0:	2600      	movs	r6, #0
 8001db2:	4d0a      	ldr	r5, [pc, #40]	@ (8001ddc <__libc_init_array+0x40>)
 8001db4:	4c0a      	ldr	r4, [pc, #40]	@ (8001de0 <__libc_init_array+0x44>)
 8001db6:	1b64      	subs	r4, r4, r5
 8001db8:	10a4      	asrs	r4, r4, #2
 8001dba:	42a6      	cmp	r6, r4
 8001dbc:	d105      	bne.n	8001dca <__libc_init_array+0x2e>
 8001dbe:	bd70      	pop	{r4, r5, r6, pc}
 8001dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dc4:	4798      	blx	r3
 8001dc6:	3601      	adds	r6, #1
 8001dc8:	e7ee      	b.n	8001da8 <__libc_init_array+0xc>
 8001dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dce:	4798      	blx	r3
 8001dd0:	3601      	adds	r6, #1
 8001dd2:	e7f2      	b.n	8001dba <__libc_init_array+0x1e>
 8001dd4:	08002738 	.word	0x08002738
 8001dd8:	08002738 	.word	0x08002738
 8001ddc:	08002738 	.word	0x08002738
 8001de0:	0800273c 	.word	0x0800273c

08001de4 <__retarget_lock_acquire_recursive>:
 8001de4:	4770      	bx	lr

08001de6 <__retarget_lock_release_recursive>:
 8001de6:	4770      	bx	lr

08001de8 <_free_r>:
 8001de8:	b538      	push	{r3, r4, r5, lr}
 8001dea:	4605      	mov	r5, r0
 8001dec:	2900      	cmp	r1, #0
 8001dee:	d040      	beq.n	8001e72 <_free_r+0x8a>
 8001df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001df4:	1f0c      	subs	r4, r1, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bfb8      	it	lt
 8001dfa:	18e4      	addlt	r4, r4, r3
 8001dfc:	f000 f8de 	bl	8001fbc <__malloc_lock>
 8001e00:	4a1c      	ldr	r2, [pc, #112]	@ (8001e74 <_free_r+0x8c>)
 8001e02:	6813      	ldr	r3, [r2, #0]
 8001e04:	b933      	cbnz	r3, 8001e14 <_free_r+0x2c>
 8001e06:	6063      	str	r3, [r4, #4]
 8001e08:	6014      	str	r4, [r2, #0]
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e10:	f000 b8da 	b.w	8001fc8 <__malloc_unlock>
 8001e14:	42a3      	cmp	r3, r4
 8001e16:	d908      	bls.n	8001e2a <_free_r+0x42>
 8001e18:	6820      	ldr	r0, [r4, #0]
 8001e1a:	1821      	adds	r1, r4, r0
 8001e1c:	428b      	cmp	r3, r1
 8001e1e:	bf01      	itttt	eq
 8001e20:	6819      	ldreq	r1, [r3, #0]
 8001e22:	685b      	ldreq	r3, [r3, #4]
 8001e24:	1809      	addeq	r1, r1, r0
 8001e26:	6021      	streq	r1, [r4, #0]
 8001e28:	e7ed      	b.n	8001e06 <_free_r+0x1e>
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	b10b      	cbz	r3, 8001e34 <_free_r+0x4c>
 8001e30:	42a3      	cmp	r3, r4
 8001e32:	d9fa      	bls.n	8001e2a <_free_r+0x42>
 8001e34:	6811      	ldr	r1, [r2, #0]
 8001e36:	1850      	adds	r0, r2, r1
 8001e38:	42a0      	cmp	r0, r4
 8001e3a:	d10b      	bne.n	8001e54 <_free_r+0x6c>
 8001e3c:	6820      	ldr	r0, [r4, #0]
 8001e3e:	4401      	add	r1, r0
 8001e40:	1850      	adds	r0, r2, r1
 8001e42:	4283      	cmp	r3, r0
 8001e44:	6011      	str	r1, [r2, #0]
 8001e46:	d1e0      	bne.n	8001e0a <_free_r+0x22>
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4408      	add	r0, r1
 8001e4e:	6010      	str	r0, [r2, #0]
 8001e50:	6053      	str	r3, [r2, #4]
 8001e52:	e7da      	b.n	8001e0a <_free_r+0x22>
 8001e54:	d902      	bls.n	8001e5c <_free_r+0x74>
 8001e56:	230c      	movs	r3, #12
 8001e58:	602b      	str	r3, [r5, #0]
 8001e5a:	e7d6      	b.n	8001e0a <_free_r+0x22>
 8001e5c:	6820      	ldr	r0, [r4, #0]
 8001e5e:	1821      	adds	r1, r4, r0
 8001e60:	428b      	cmp	r3, r1
 8001e62:	bf01      	itttt	eq
 8001e64:	6819      	ldreq	r1, [r3, #0]
 8001e66:	685b      	ldreq	r3, [r3, #4]
 8001e68:	1809      	addeq	r1, r1, r0
 8001e6a:	6021      	streq	r1, [r4, #0]
 8001e6c:	6063      	str	r3, [r4, #4]
 8001e6e:	6054      	str	r4, [r2, #4]
 8001e70:	e7cb      	b.n	8001e0a <_free_r+0x22>
 8001e72:	bd38      	pop	{r3, r4, r5, pc}
 8001e74:	2000026c 	.word	0x2000026c

08001e78 <sbrk_aligned>:
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	4e0f      	ldr	r6, [pc, #60]	@ (8001eb8 <sbrk_aligned+0x40>)
 8001e7c:	460c      	mov	r4, r1
 8001e7e:	6831      	ldr	r1, [r6, #0]
 8001e80:	4605      	mov	r5, r0
 8001e82:	b911      	cbnz	r1, 8001e8a <sbrk_aligned+0x12>
 8001e84:	f000 fbaa 	bl	80025dc <_sbrk_r>
 8001e88:	6030      	str	r0, [r6, #0]
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	f000 fba5 	bl	80025dc <_sbrk_r>
 8001e92:	1c43      	adds	r3, r0, #1
 8001e94:	d103      	bne.n	8001e9e <sbrk_aligned+0x26>
 8001e96:	f04f 34ff 	mov.w	r4, #4294967295
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	bd70      	pop	{r4, r5, r6, pc}
 8001e9e:	1cc4      	adds	r4, r0, #3
 8001ea0:	f024 0403 	bic.w	r4, r4, #3
 8001ea4:	42a0      	cmp	r0, r4
 8001ea6:	d0f8      	beq.n	8001e9a <sbrk_aligned+0x22>
 8001ea8:	1a21      	subs	r1, r4, r0
 8001eaa:	4628      	mov	r0, r5
 8001eac:	f000 fb96 	bl	80025dc <_sbrk_r>
 8001eb0:	3001      	adds	r0, #1
 8001eb2:	d1f2      	bne.n	8001e9a <sbrk_aligned+0x22>
 8001eb4:	e7ef      	b.n	8001e96 <sbrk_aligned+0x1e>
 8001eb6:	bf00      	nop
 8001eb8:	20000268 	.word	0x20000268

08001ebc <_malloc_r>:
 8001ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ec0:	1ccd      	adds	r5, r1, #3
 8001ec2:	f025 0503 	bic.w	r5, r5, #3
 8001ec6:	3508      	adds	r5, #8
 8001ec8:	2d0c      	cmp	r5, #12
 8001eca:	bf38      	it	cc
 8001ecc:	250c      	movcc	r5, #12
 8001ece:	2d00      	cmp	r5, #0
 8001ed0:	4606      	mov	r6, r0
 8001ed2:	db01      	blt.n	8001ed8 <_malloc_r+0x1c>
 8001ed4:	42a9      	cmp	r1, r5
 8001ed6:	d904      	bls.n	8001ee2 <_malloc_r+0x26>
 8001ed8:	230c      	movs	r3, #12
 8001eda:	6033      	str	r3, [r6, #0]
 8001edc:	2000      	movs	r0, #0
 8001ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ee2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001fb8 <_malloc_r+0xfc>
 8001ee6:	f000 f869 	bl	8001fbc <__malloc_lock>
 8001eea:	f8d8 3000 	ldr.w	r3, [r8]
 8001eee:	461c      	mov	r4, r3
 8001ef0:	bb44      	cbnz	r4, 8001f44 <_malloc_r+0x88>
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	f7ff ffbf 	bl	8001e78 <sbrk_aligned>
 8001efa:	1c43      	adds	r3, r0, #1
 8001efc:	4604      	mov	r4, r0
 8001efe:	d158      	bne.n	8001fb2 <_malloc_r+0xf6>
 8001f00:	f8d8 4000 	ldr.w	r4, [r8]
 8001f04:	4627      	mov	r7, r4
 8001f06:	2f00      	cmp	r7, #0
 8001f08:	d143      	bne.n	8001f92 <_malloc_r+0xd6>
 8001f0a:	2c00      	cmp	r4, #0
 8001f0c:	d04b      	beq.n	8001fa6 <_malloc_r+0xea>
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	4639      	mov	r1, r7
 8001f12:	4630      	mov	r0, r6
 8001f14:	eb04 0903 	add.w	r9, r4, r3
 8001f18:	f000 fb60 	bl	80025dc <_sbrk_r>
 8001f1c:	4581      	cmp	r9, r0
 8001f1e:	d142      	bne.n	8001fa6 <_malloc_r+0xea>
 8001f20:	6821      	ldr	r1, [r4, #0]
 8001f22:	4630      	mov	r0, r6
 8001f24:	1a6d      	subs	r5, r5, r1
 8001f26:	4629      	mov	r1, r5
 8001f28:	f7ff ffa6 	bl	8001e78 <sbrk_aligned>
 8001f2c:	3001      	adds	r0, #1
 8001f2e:	d03a      	beq.n	8001fa6 <_malloc_r+0xea>
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	442b      	add	r3, r5
 8001f34:	6023      	str	r3, [r4, #0]
 8001f36:	f8d8 3000 	ldr.w	r3, [r8]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	bb62      	cbnz	r2, 8001f98 <_malloc_r+0xdc>
 8001f3e:	f8c8 7000 	str.w	r7, [r8]
 8001f42:	e00f      	b.n	8001f64 <_malloc_r+0xa8>
 8001f44:	6822      	ldr	r2, [r4, #0]
 8001f46:	1b52      	subs	r2, r2, r5
 8001f48:	d420      	bmi.n	8001f8c <_malloc_r+0xd0>
 8001f4a:	2a0b      	cmp	r2, #11
 8001f4c:	d917      	bls.n	8001f7e <_malloc_r+0xc2>
 8001f4e:	1961      	adds	r1, r4, r5
 8001f50:	42a3      	cmp	r3, r4
 8001f52:	6025      	str	r5, [r4, #0]
 8001f54:	bf18      	it	ne
 8001f56:	6059      	strne	r1, [r3, #4]
 8001f58:	6863      	ldr	r3, [r4, #4]
 8001f5a:	bf08      	it	eq
 8001f5c:	f8c8 1000 	streq.w	r1, [r8]
 8001f60:	5162      	str	r2, [r4, r5]
 8001f62:	604b      	str	r3, [r1, #4]
 8001f64:	4630      	mov	r0, r6
 8001f66:	f000 f82f 	bl	8001fc8 <__malloc_unlock>
 8001f6a:	f104 000b 	add.w	r0, r4, #11
 8001f6e:	1d23      	adds	r3, r4, #4
 8001f70:	f020 0007 	bic.w	r0, r0, #7
 8001f74:	1ac2      	subs	r2, r0, r3
 8001f76:	bf1c      	itt	ne
 8001f78:	1a1b      	subne	r3, r3, r0
 8001f7a:	50a3      	strne	r3, [r4, r2]
 8001f7c:	e7af      	b.n	8001ede <_malloc_r+0x22>
 8001f7e:	6862      	ldr	r2, [r4, #4]
 8001f80:	42a3      	cmp	r3, r4
 8001f82:	bf0c      	ite	eq
 8001f84:	f8c8 2000 	streq.w	r2, [r8]
 8001f88:	605a      	strne	r2, [r3, #4]
 8001f8a:	e7eb      	b.n	8001f64 <_malloc_r+0xa8>
 8001f8c:	4623      	mov	r3, r4
 8001f8e:	6864      	ldr	r4, [r4, #4]
 8001f90:	e7ae      	b.n	8001ef0 <_malloc_r+0x34>
 8001f92:	463c      	mov	r4, r7
 8001f94:	687f      	ldr	r7, [r7, #4]
 8001f96:	e7b6      	b.n	8001f06 <_malloc_r+0x4a>
 8001f98:	461a      	mov	r2, r3
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	42a3      	cmp	r3, r4
 8001f9e:	d1fb      	bne.n	8001f98 <_malloc_r+0xdc>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	6053      	str	r3, [r2, #4]
 8001fa4:	e7de      	b.n	8001f64 <_malloc_r+0xa8>
 8001fa6:	230c      	movs	r3, #12
 8001fa8:	4630      	mov	r0, r6
 8001faa:	6033      	str	r3, [r6, #0]
 8001fac:	f000 f80c 	bl	8001fc8 <__malloc_unlock>
 8001fb0:	e794      	b.n	8001edc <_malloc_r+0x20>
 8001fb2:	6005      	str	r5, [r0, #0]
 8001fb4:	e7d6      	b.n	8001f64 <_malloc_r+0xa8>
 8001fb6:	bf00      	nop
 8001fb8:	2000026c 	.word	0x2000026c

08001fbc <__malloc_lock>:
 8001fbc:	4801      	ldr	r0, [pc, #4]	@ (8001fc4 <__malloc_lock+0x8>)
 8001fbe:	f7ff bf11 	b.w	8001de4 <__retarget_lock_acquire_recursive>
 8001fc2:	bf00      	nop
 8001fc4:	20000264 	.word	0x20000264

08001fc8 <__malloc_unlock>:
 8001fc8:	4801      	ldr	r0, [pc, #4]	@ (8001fd0 <__malloc_unlock+0x8>)
 8001fca:	f7ff bf0c 	b.w	8001de6 <__retarget_lock_release_recursive>
 8001fce:	bf00      	nop
 8001fd0:	20000264 	.word	0x20000264

08001fd4 <__ssputs_r>:
 8001fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fd8:	461f      	mov	r7, r3
 8001fda:	688e      	ldr	r6, [r1, #8]
 8001fdc:	4682      	mov	sl, r0
 8001fde:	42be      	cmp	r6, r7
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	4690      	mov	r8, r2
 8001fe4:	680b      	ldr	r3, [r1, #0]
 8001fe6:	d82d      	bhi.n	8002044 <__ssputs_r+0x70>
 8001fe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001fec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001ff0:	d026      	beq.n	8002040 <__ssputs_r+0x6c>
 8001ff2:	6965      	ldr	r5, [r4, #20]
 8001ff4:	6909      	ldr	r1, [r1, #16]
 8001ff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ffa:	eba3 0901 	sub.w	r9, r3, r1
 8001ffe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002002:	1c7b      	adds	r3, r7, #1
 8002004:	444b      	add	r3, r9
 8002006:	106d      	asrs	r5, r5, #1
 8002008:	429d      	cmp	r5, r3
 800200a:	bf38      	it	cc
 800200c:	461d      	movcc	r5, r3
 800200e:	0553      	lsls	r3, r2, #21
 8002010:	d527      	bpl.n	8002062 <__ssputs_r+0x8e>
 8002012:	4629      	mov	r1, r5
 8002014:	f7ff ff52 	bl	8001ebc <_malloc_r>
 8002018:	4606      	mov	r6, r0
 800201a:	b360      	cbz	r0, 8002076 <__ssputs_r+0xa2>
 800201c:	464a      	mov	r2, r9
 800201e:	6921      	ldr	r1, [r4, #16]
 8002020:	f000 fafa 	bl	8002618 <memcpy>
 8002024:	89a3      	ldrh	r3, [r4, #12]
 8002026:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800202a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800202e:	81a3      	strh	r3, [r4, #12]
 8002030:	6126      	str	r6, [r4, #16]
 8002032:	444e      	add	r6, r9
 8002034:	6026      	str	r6, [r4, #0]
 8002036:	463e      	mov	r6, r7
 8002038:	6165      	str	r5, [r4, #20]
 800203a:	eba5 0509 	sub.w	r5, r5, r9
 800203e:	60a5      	str	r5, [r4, #8]
 8002040:	42be      	cmp	r6, r7
 8002042:	d900      	bls.n	8002046 <__ssputs_r+0x72>
 8002044:	463e      	mov	r6, r7
 8002046:	4632      	mov	r2, r6
 8002048:	4641      	mov	r1, r8
 800204a:	6820      	ldr	r0, [r4, #0]
 800204c:	f000 faac 	bl	80025a8 <memmove>
 8002050:	2000      	movs	r0, #0
 8002052:	68a3      	ldr	r3, [r4, #8]
 8002054:	1b9b      	subs	r3, r3, r6
 8002056:	60a3      	str	r3, [r4, #8]
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	4433      	add	r3, r6
 800205c:	6023      	str	r3, [r4, #0]
 800205e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002062:	462a      	mov	r2, r5
 8002064:	f000 fae6 	bl	8002634 <_realloc_r>
 8002068:	4606      	mov	r6, r0
 800206a:	2800      	cmp	r0, #0
 800206c:	d1e0      	bne.n	8002030 <__ssputs_r+0x5c>
 800206e:	4650      	mov	r0, sl
 8002070:	6921      	ldr	r1, [r4, #16]
 8002072:	f7ff feb9 	bl	8001de8 <_free_r>
 8002076:	230c      	movs	r3, #12
 8002078:	f8ca 3000 	str.w	r3, [sl]
 800207c:	89a3      	ldrh	r3, [r4, #12]
 800207e:	f04f 30ff 	mov.w	r0, #4294967295
 8002082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002086:	81a3      	strh	r3, [r4, #12]
 8002088:	e7e9      	b.n	800205e <__ssputs_r+0x8a>
	...

0800208c <_svfiprintf_r>:
 800208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002090:	4698      	mov	r8, r3
 8002092:	898b      	ldrh	r3, [r1, #12]
 8002094:	4607      	mov	r7, r0
 8002096:	061b      	lsls	r3, r3, #24
 8002098:	460d      	mov	r5, r1
 800209a:	4614      	mov	r4, r2
 800209c:	b09d      	sub	sp, #116	@ 0x74
 800209e:	d510      	bpl.n	80020c2 <_svfiprintf_r+0x36>
 80020a0:	690b      	ldr	r3, [r1, #16]
 80020a2:	b973      	cbnz	r3, 80020c2 <_svfiprintf_r+0x36>
 80020a4:	2140      	movs	r1, #64	@ 0x40
 80020a6:	f7ff ff09 	bl	8001ebc <_malloc_r>
 80020aa:	6028      	str	r0, [r5, #0]
 80020ac:	6128      	str	r0, [r5, #16]
 80020ae:	b930      	cbnz	r0, 80020be <_svfiprintf_r+0x32>
 80020b0:	230c      	movs	r3, #12
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	f04f 30ff 	mov.w	r0, #4294967295
 80020b8:	b01d      	add	sp, #116	@ 0x74
 80020ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020be:	2340      	movs	r3, #64	@ 0x40
 80020c0:	616b      	str	r3, [r5, #20]
 80020c2:	2300      	movs	r3, #0
 80020c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80020c6:	2320      	movs	r3, #32
 80020c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80020cc:	2330      	movs	r3, #48	@ 0x30
 80020ce:	f04f 0901 	mov.w	r9, #1
 80020d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80020d6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002270 <_svfiprintf_r+0x1e4>
 80020da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80020de:	4623      	mov	r3, r4
 80020e0:	469a      	mov	sl, r3
 80020e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020e6:	b10a      	cbz	r2, 80020ec <_svfiprintf_r+0x60>
 80020e8:	2a25      	cmp	r2, #37	@ 0x25
 80020ea:	d1f9      	bne.n	80020e0 <_svfiprintf_r+0x54>
 80020ec:	ebba 0b04 	subs.w	fp, sl, r4
 80020f0:	d00b      	beq.n	800210a <_svfiprintf_r+0x7e>
 80020f2:	465b      	mov	r3, fp
 80020f4:	4622      	mov	r2, r4
 80020f6:	4629      	mov	r1, r5
 80020f8:	4638      	mov	r0, r7
 80020fa:	f7ff ff6b 	bl	8001fd4 <__ssputs_r>
 80020fe:	3001      	adds	r0, #1
 8002100:	f000 80a7 	beq.w	8002252 <_svfiprintf_r+0x1c6>
 8002104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002106:	445a      	add	r2, fp
 8002108:	9209      	str	r2, [sp, #36]	@ 0x24
 800210a:	f89a 3000 	ldrb.w	r3, [sl]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 809f 	beq.w	8002252 <_svfiprintf_r+0x1c6>
 8002114:	2300      	movs	r3, #0
 8002116:	f04f 32ff 	mov.w	r2, #4294967295
 800211a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800211e:	f10a 0a01 	add.w	sl, sl, #1
 8002122:	9304      	str	r3, [sp, #16]
 8002124:	9307      	str	r3, [sp, #28]
 8002126:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800212a:	931a      	str	r3, [sp, #104]	@ 0x68
 800212c:	4654      	mov	r4, sl
 800212e:	2205      	movs	r2, #5
 8002130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002134:	484e      	ldr	r0, [pc, #312]	@ (8002270 <_svfiprintf_r+0x1e4>)
 8002136:	f000 fa61 	bl	80025fc <memchr>
 800213a:	9a04      	ldr	r2, [sp, #16]
 800213c:	b9d8      	cbnz	r0, 8002176 <_svfiprintf_r+0xea>
 800213e:	06d0      	lsls	r0, r2, #27
 8002140:	bf44      	itt	mi
 8002142:	2320      	movmi	r3, #32
 8002144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002148:	0711      	lsls	r1, r2, #28
 800214a:	bf44      	itt	mi
 800214c:	232b      	movmi	r3, #43	@ 0x2b
 800214e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002152:	f89a 3000 	ldrb.w	r3, [sl]
 8002156:	2b2a      	cmp	r3, #42	@ 0x2a
 8002158:	d015      	beq.n	8002186 <_svfiprintf_r+0xfa>
 800215a:	4654      	mov	r4, sl
 800215c:	2000      	movs	r0, #0
 800215e:	f04f 0c0a 	mov.w	ip, #10
 8002162:	9a07      	ldr	r2, [sp, #28]
 8002164:	4621      	mov	r1, r4
 8002166:	f811 3b01 	ldrb.w	r3, [r1], #1
 800216a:	3b30      	subs	r3, #48	@ 0x30
 800216c:	2b09      	cmp	r3, #9
 800216e:	d94b      	bls.n	8002208 <_svfiprintf_r+0x17c>
 8002170:	b1b0      	cbz	r0, 80021a0 <_svfiprintf_r+0x114>
 8002172:	9207      	str	r2, [sp, #28]
 8002174:	e014      	b.n	80021a0 <_svfiprintf_r+0x114>
 8002176:	eba0 0308 	sub.w	r3, r0, r8
 800217a:	fa09 f303 	lsl.w	r3, r9, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	46a2      	mov	sl, r4
 8002182:	9304      	str	r3, [sp, #16]
 8002184:	e7d2      	b.n	800212c <_svfiprintf_r+0xa0>
 8002186:	9b03      	ldr	r3, [sp, #12]
 8002188:	1d19      	adds	r1, r3, #4
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	9103      	str	r1, [sp, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	bfbb      	ittet	lt
 8002192:	425b      	neglt	r3, r3
 8002194:	f042 0202 	orrlt.w	r2, r2, #2
 8002198:	9307      	strge	r3, [sp, #28]
 800219a:	9307      	strlt	r3, [sp, #28]
 800219c:	bfb8      	it	lt
 800219e:	9204      	strlt	r2, [sp, #16]
 80021a0:	7823      	ldrb	r3, [r4, #0]
 80021a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80021a4:	d10a      	bne.n	80021bc <_svfiprintf_r+0x130>
 80021a6:	7863      	ldrb	r3, [r4, #1]
 80021a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80021aa:	d132      	bne.n	8002212 <_svfiprintf_r+0x186>
 80021ac:	9b03      	ldr	r3, [sp, #12]
 80021ae:	3402      	adds	r4, #2
 80021b0:	1d1a      	adds	r2, r3, #4
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	9203      	str	r2, [sp, #12]
 80021b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80021ba:	9305      	str	r3, [sp, #20]
 80021bc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002274 <_svfiprintf_r+0x1e8>
 80021c0:	2203      	movs	r2, #3
 80021c2:	4650      	mov	r0, sl
 80021c4:	7821      	ldrb	r1, [r4, #0]
 80021c6:	f000 fa19 	bl	80025fc <memchr>
 80021ca:	b138      	cbz	r0, 80021dc <_svfiprintf_r+0x150>
 80021cc:	2240      	movs	r2, #64	@ 0x40
 80021ce:	9b04      	ldr	r3, [sp, #16]
 80021d0:	eba0 000a 	sub.w	r0, r0, sl
 80021d4:	4082      	lsls	r2, r0
 80021d6:	4313      	orrs	r3, r2
 80021d8:	3401      	adds	r4, #1
 80021da:	9304      	str	r3, [sp, #16]
 80021dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021e0:	2206      	movs	r2, #6
 80021e2:	4825      	ldr	r0, [pc, #148]	@ (8002278 <_svfiprintf_r+0x1ec>)
 80021e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80021e8:	f000 fa08 	bl	80025fc <memchr>
 80021ec:	2800      	cmp	r0, #0
 80021ee:	d036      	beq.n	800225e <_svfiprintf_r+0x1d2>
 80021f0:	4b22      	ldr	r3, [pc, #136]	@ (800227c <_svfiprintf_r+0x1f0>)
 80021f2:	bb1b      	cbnz	r3, 800223c <_svfiprintf_r+0x1b0>
 80021f4:	9b03      	ldr	r3, [sp, #12]
 80021f6:	3307      	adds	r3, #7
 80021f8:	f023 0307 	bic.w	r3, r3, #7
 80021fc:	3308      	adds	r3, #8
 80021fe:	9303      	str	r3, [sp, #12]
 8002200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002202:	4433      	add	r3, r6
 8002204:	9309      	str	r3, [sp, #36]	@ 0x24
 8002206:	e76a      	b.n	80020de <_svfiprintf_r+0x52>
 8002208:	460c      	mov	r4, r1
 800220a:	2001      	movs	r0, #1
 800220c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002210:	e7a8      	b.n	8002164 <_svfiprintf_r+0xd8>
 8002212:	2300      	movs	r3, #0
 8002214:	f04f 0c0a 	mov.w	ip, #10
 8002218:	4619      	mov	r1, r3
 800221a:	3401      	adds	r4, #1
 800221c:	9305      	str	r3, [sp, #20]
 800221e:	4620      	mov	r0, r4
 8002220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002224:	3a30      	subs	r2, #48	@ 0x30
 8002226:	2a09      	cmp	r2, #9
 8002228:	d903      	bls.n	8002232 <_svfiprintf_r+0x1a6>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0c6      	beq.n	80021bc <_svfiprintf_r+0x130>
 800222e:	9105      	str	r1, [sp, #20]
 8002230:	e7c4      	b.n	80021bc <_svfiprintf_r+0x130>
 8002232:	4604      	mov	r4, r0
 8002234:	2301      	movs	r3, #1
 8002236:	fb0c 2101 	mla	r1, ip, r1, r2
 800223a:	e7f0      	b.n	800221e <_svfiprintf_r+0x192>
 800223c:	ab03      	add	r3, sp, #12
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	462a      	mov	r2, r5
 8002242:	4638      	mov	r0, r7
 8002244:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <_svfiprintf_r+0x1f4>)
 8002246:	a904      	add	r1, sp, #16
 8002248:	f3af 8000 	nop.w
 800224c:	1c42      	adds	r2, r0, #1
 800224e:	4606      	mov	r6, r0
 8002250:	d1d6      	bne.n	8002200 <_svfiprintf_r+0x174>
 8002252:	89ab      	ldrh	r3, [r5, #12]
 8002254:	065b      	lsls	r3, r3, #25
 8002256:	f53f af2d 	bmi.w	80020b4 <_svfiprintf_r+0x28>
 800225a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800225c:	e72c      	b.n	80020b8 <_svfiprintf_r+0x2c>
 800225e:	ab03      	add	r3, sp, #12
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	462a      	mov	r2, r5
 8002264:	4638      	mov	r0, r7
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <_svfiprintf_r+0x1f4>)
 8002268:	a904      	add	r1, sp, #16
 800226a:	f000 f87d 	bl	8002368 <_printf_i>
 800226e:	e7ed      	b.n	800224c <_svfiprintf_r+0x1c0>
 8002270:	080026fa 	.word	0x080026fa
 8002274:	08002700 	.word	0x08002700
 8002278:	08002704 	.word	0x08002704
 800227c:	00000000 	.word	0x00000000
 8002280:	08001fd5 	.word	0x08001fd5

08002284 <_printf_common>:
 8002284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002288:	4616      	mov	r6, r2
 800228a:	4698      	mov	r8, r3
 800228c:	688a      	ldr	r2, [r1, #8]
 800228e:	690b      	ldr	r3, [r1, #16]
 8002290:	4607      	mov	r7, r0
 8002292:	4293      	cmp	r3, r2
 8002294:	bfb8      	it	lt
 8002296:	4613      	movlt	r3, r2
 8002298:	6033      	str	r3, [r6, #0]
 800229a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800229e:	460c      	mov	r4, r1
 80022a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80022a4:	b10a      	cbz	r2, 80022aa <_printf_common+0x26>
 80022a6:	3301      	adds	r3, #1
 80022a8:	6033      	str	r3, [r6, #0]
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	0699      	lsls	r1, r3, #26
 80022ae:	bf42      	ittt	mi
 80022b0:	6833      	ldrmi	r3, [r6, #0]
 80022b2:	3302      	addmi	r3, #2
 80022b4:	6033      	strmi	r3, [r6, #0]
 80022b6:	6825      	ldr	r5, [r4, #0]
 80022b8:	f015 0506 	ands.w	r5, r5, #6
 80022bc:	d106      	bne.n	80022cc <_printf_common+0x48>
 80022be:	f104 0a19 	add.w	sl, r4, #25
 80022c2:	68e3      	ldr	r3, [r4, #12]
 80022c4:	6832      	ldr	r2, [r6, #0]
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	42ab      	cmp	r3, r5
 80022ca:	dc2b      	bgt.n	8002324 <_printf_common+0xa0>
 80022cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80022d0:	6822      	ldr	r2, [r4, #0]
 80022d2:	3b00      	subs	r3, #0
 80022d4:	bf18      	it	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	0692      	lsls	r2, r2, #26
 80022da:	d430      	bmi.n	800233e <_printf_common+0xba>
 80022dc:	4641      	mov	r1, r8
 80022de:	4638      	mov	r0, r7
 80022e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80022e4:	47c8      	blx	r9
 80022e6:	3001      	adds	r0, #1
 80022e8:	d023      	beq.n	8002332 <_printf_common+0xae>
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	6922      	ldr	r2, [r4, #16]
 80022ee:	f003 0306 	and.w	r3, r3, #6
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	bf14      	ite	ne
 80022f6:	2500      	movne	r5, #0
 80022f8:	6833      	ldreq	r3, [r6, #0]
 80022fa:	f04f 0600 	mov.w	r6, #0
 80022fe:	bf08      	it	eq
 8002300:	68e5      	ldreq	r5, [r4, #12]
 8002302:	f104 041a 	add.w	r4, r4, #26
 8002306:	bf08      	it	eq
 8002308:	1aed      	subeq	r5, r5, r3
 800230a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800230e:	bf08      	it	eq
 8002310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002314:	4293      	cmp	r3, r2
 8002316:	bfc4      	itt	gt
 8002318:	1a9b      	subgt	r3, r3, r2
 800231a:	18ed      	addgt	r5, r5, r3
 800231c:	42b5      	cmp	r5, r6
 800231e:	d11a      	bne.n	8002356 <_printf_common+0xd2>
 8002320:	2000      	movs	r0, #0
 8002322:	e008      	b.n	8002336 <_printf_common+0xb2>
 8002324:	2301      	movs	r3, #1
 8002326:	4652      	mov	r2, sl
 8002328:	4641      	mov	r1, r8
 800232a:	4638      	mov	r0, r7
 800232c:	47c8      	blx	r9
 800232e:	3001      	adds	r0, #1
 8002330:	d103      	bne.n	800233a <_printf_common+0xb6>
 8002332:	f04f 30ff 	mov.w	r0, #4294967295
 8002336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800233a:	3501      	adds	r5, #1
 800233c:	e7c1      	b.n	80022c2 <_printf_common+0x3e>
 800233e:	2030      	movs	r0, #48	@ 0x30
 8002340:	18e1      	adds	r1, r4, r3
 8002342:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800234c:	4422      	add	r2, r4
 800234e:	3302      	adds	r3, #2
 8002350:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002354:	e7c2      	b.n	80022dc <_printf_common+0x58>
 8002356:	2301      	movs	r3, #1
 8002358:	4622      	mov	r2, r4
 800235a:	4641      	mov	r1, r8
 800235c:	4638      	mov	r0, r7
 800235e:	47c8      	blx	r9
 8002360:	3001      	adds	r0, #1
 8002362:	d0e6      	beq.n	8002332 <_printf_common+0xae>
 8002364:	3601      	adds	r6, #1
 8002366:	e7d9      	b.n	800231c <_printf_common+0x98>

08002368 <_printf_i>:
 8002368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800236c:	7e0f      	ldrb	r7, [r1, #24]
 800236e:	4691      	mov	r9, r2
 8002370:	2f78      	cmp	r7, #120	@ 0x78
 8002372:	4680      	mov	r8, r0
 8002374:	460c      	mov	r4, r1
 8002376:	469a      	mov	sl, r3
 8002378:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800237a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800237e:	d807      	bhi.n	8002390 <_printf_i+0x28>
 8002380:	2f62      	cmp	r7, #98	@ 0x62
 8002382:	d80a      	bhi.n	800239a <_printf_i+0x32>
 8002384:	2f00      	cmp	r7, #0
 8002386:	f000 80d3 	beq.w	8002530 <_printf_i+0x1c8>
 800238a:	2f58      	cmp	r7, #88	@ 0x58
 800238c:	f000 80ba 	beq.w	8002504 <_printf_i+0x19c>
 8002390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002394:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002398:	e03a      	b.n	8002410 <_printf_i+0xa8>
 800239a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800239e:	2b15      	cmp	r3, #21
 80023a0:	d8f6      	bhi.n	8002390 <_printf_i+0x28>
 80023a2:	a101      	add	r1, pc, #4	@ (adr r1, 80023a8 <_printf_i+0x40>)
 80023a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023a8:	08002401 	.word	0x08002401
 80023ac:	08002415 	.word	0x08002415
 80023b0:	08002391 	.word	0x08002391
 80023b4:	08002391 	.word	0x08002391
 80023b8:	08002391 	.word	0x08002391
 80023bc:	08002391 	.word	0x08002391
 80023c0:	08002415 	.word	0x08002415
 80023c4:	08002391 	.word	0x08002391
 80023c8:	08002391 	.word	0x08002391
 80023cc:	08002391 	.word	0x08002391
 80023d0:	08002391 	.word	0x08002391
 80023d4:	08002517 	.word	0x08002517
 80023d8:	0800243f 	.word	0x0800243f
 80023dc:	080024d1 	.word	0x080024d1
 80023e0:	08002391 	.word	0x08002391
 80023e4:	08002391 	.word	0x08002391
 80023e8:	08002539 	.word	0x08002539
 80023ec:	08002391 	.word	0x08002391
 80023f0:	0800243f 	.word	0x0800243f
 80023f4:	08002391 	.word	0x08002391
 80023f8:	08002391 	.word	0x08002391
 80023fc:	080024d9 	.word	0x080024d9
 8002400:	6833      	ldr	r3, [r6, #0]
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6032      	str	r2, [r6, #0]
 8002408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800240c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002410:	2301      	movs	r3, #1
 8002412:	e09e      	b.n	8002552 <_printf_i+0x1ea>
 8002414:	6833      	ldr	r3, [r6, #0]
 8002416:	6820      	ldr	r0, [r4, #0]
 8002418:	1d19      	adds	r1, r3, #4
 800241a:	6031      	str	r1, [r6, #0]
 800241c:	0606      	lsls	r6, r0, #24
 800241e:	d501      	bpl.n	8002424 <_printf_i+0xbc>
 8002420:	681d      	ldr	r5, [r3, #0]
 8002422:	e003      	b.n	800242c <_printf_i+0xc4>
 8002424:	0645      	lsls	r5, r0, #25
 8002426:	d5fb      	bpl.n	8002420 <_printf_i+0xb8>
 8002428:	f9b3 5000 	ldrsh.w	r5, [r3]
 800242c:	2d00      	cmp	r5, #0
 800242e:	da03      	bge.n	8002438 <_printf_i+0xd0>
 8002430:	232d      	movs	r3, #45	@ 0x2d
 8002432:	426d      	negs	r5, r5
 8002434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002438:	230a      	movs	r3, #10
 800243a:	4859      	ldr	r0, [pc, #356]	@ (80025a0 <_printf_i+0x238>)
 800243c:	e011      	b.n	8002462 <_printf_i+0xfa>
 800243e:	6821      	ldr	r1, [r4, #0]
 8002440:	6833      	ldr	r3, [r6, #0]
 8002442:	0608      	lsls	r0, r1, #24
 8002444:	f853 5b04 	ldr.w	r5, [r3], #4
 8002448:	d402      	bmi.n	8002450 <_printf_i+0xe8>
 800244a:	0649      	lsls	r1, r1, #25
 800244c:	bf48      	it	mi
 800244e:	b2ad      	uxthmi	r5, r5
 8002450:	2f6f      	cmp	r7, #111	@ 0x6f
 8002452:	6033      	str	r3, [r6, #0]
 8002454:	bf14      	ite	ne
 8002456:	230a      	movne	r3, #10
 8002458:	2308      	moveq	r3, #8
 800245a:	4851      	ldr	r0, [pc, #324]	@ (80025a0 <_printf_i+0x238>)
 800245c:	2100      	movs	r1, #0
 800245e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002462:	6866      	ldr	r6, [r4, #4]
 8002464:	2e00      	cmp	r6, #0
 8002466:	bfa8      	it	ge
 8002468:	6821      	ldrge	r1, [r4, #0]
 800246a:	60a6      	str	r6, [r4, #8]
 800246c:	bfa4      	itt	ge
 800246e:	f021 0104 	bicge.w	r1, r1, #4
 8002472:	6021      	strge	r1, [r4, #0]
 8002474:	b90d      	cbnz	r5, 800247a <_printf_i+0x112>
 8002476:	2e00      	cmp	r6, #0
 8002478:	d04b      	beq.n	8002512 <_printf_i+0x1aa>
 800247a:	4616      	mov	r6, r2
 800247c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002480:	fb03 5711 	mls	r7, r3, r1, r5
 8002484:	5dc7      	ldrb	r7, [r0, r7]
 8002486:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800248a:	462f      	mov	r7, r5
 800248c:	42bb      	cmp	r3, r7
 800248e:	460d      	mov	r5, r1
 8002490:	d9f4      	bls.n	800247c <_printf_i+0x114>
 8002492:	2b08      	cmp	r3, #8
 8002494:	d10b      	bne.n	80024ae <_printf_i+0x146>
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	07df      	lsls	r7, r3, #31
 800249a:	d508      	bpl.n	80024ae <_printf_i+0x146>
 800249c:	6923      	ldr	r3, [r4, #16]
 800249e:	6861      	ldr	r1, [r4, #4]
 80024a0:	4299      	cmp	r1, r3
 80024a2:	bfde      	ittt	le
 80024a4:	2330      	movle	r3, #48	@ 0x30
 80024a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80024aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80024ae:	1b92      	subs	r2, r2, r6
 80024b0:	6122      	str	r2, [r4, #16]
 80024b2:	464b      	mov	r3, r9
 80024b4:	4621      	mov	r1, r4
 80024b6:	4640      	mov	r0, r8
 80024b8:	f8cd a000 	str.w	sl, [sp]
 80024bc:	aa03      	add	r2, sp, #12
 80024be:	f7ff fee1 	bl	8002284 <_printf_common>
 80024c2:	3001      	adds	r0, #1
 80024c4:	d14a      	bne.n	800255c <_printf_i+0x1f4>
 80024c6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ca:	b004      	add	sp, #16
 80024cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	f043 0320 	orr.w	r3, r3, #32
 80024d6:	6023      	str	r3, [r4, #0]
 80024d8:	2778      	movs	r7, #120	@ 0x78
 80024da:	4832      	ldr	r0, [pc, #200]	@ (80025a4 <_printf_i+0x23c>)
 80024dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	6831      	ldr	r1, [r6, #0]
 80024e4:	061f      	lsls	r7, r3, #24
 80024e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80024ea:	d402      	bmi.n	80024f2 <_printf_i+0x18a>
 80024ec:	065f      	lsls	r7, r3, #25
 80024ee:	bf48      	it	mi
 80024f0:	b2ad      	uxthmi	r5, r5
 80024f2:	6031      	str	r1, [r6, #0]
 80024f4:	07d9      	lsls	r1, r3, #31
 80024f6:	bf44      	itt	mi
 80024f8:	f043 0320 	orrmi.w	r3, r3, #32
 80024fc:	6023      	strmi	r3, [r4, #0]
 80024fe:	b11d      	cbz	r5, 8002508 <_printf_i+0x1a0>
 8002500:	2310      	movs	r3, #16
 8002502:	e7ab      	b.n	800245c <_printf_i+0xf4>
 8002504:	4826      	ldr	r0, [pc, #152]	@ (80025a0 <_printf_i+0x238>)
 8002506:	e7e9      	b.n	80024dc <_printf_i+0x174>
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	f023 0320 	bic.w	r3, r3, #32
 800250e:	6023      	str	r3, [r4, #0]
 8002510:	e7f6      	b.n	8002500 <_printf_i+0x198>
 8002512:	4616      	mov	r6, r2
 8002514:	e7bd      	b.n	8002492 <_printf_i+0x12a>
 8002516:	6833      	ldr	r3, [r6, #0]
 8002518:	6825      	ldr	r5, [r4, #0]
 800251a:	1d18      	adds	r0, r3, #4
 800251c:	6961      	ldr	r1, [r4, #20]
 800251e:	6030      	str	r0, [r6, #0]
 8002520:	062e      	lsls	r6, r5, #24
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	d501      	bpl.n	800252a <_printf_i+0x1c2>
 8002526:	6019      	str	r1, [r3, #0]
 8002528:	e002      	b.n	8002530 <_printf_i+0x1c8>
 800252a:	0668      	lsls	r0, r5, #25
 800252c:	d5fb      	bpl.n	8002526 <_printf_i+0x1be>
 800252e:	8019      	strh	r1, [r3, #0]
 8002530:	2300      	movs	r3, #0
 8002532:	4616      	mov	r6, r2
 8002534:	6123      	str	r3, [r4, #16]
 8002536:	e7bc      	b.n	80024b2 <_printf_i+0x14a>
 8002538:	6833      	ldr	r3, [r6, #0]
 800253a:	2100      	movs	r1, #0
 800253c:	1d1a      	adds	r2, r3, #4
 800253e:	6032      	str	r2, [r6, #0]
 8002540:	681e      	ldr	r6, [r3, #0]
 8002542:	6862      	ldr	r2, [r4, #4]
 8002544:	4630      	mov	r0, r6
 8002546:	f000 f859 	bl	80025fc <memchr>
 800254a:	b108      	cbz	r0, 8002550 <_printf_i+0x1e8>
 800254c:	1b80      	subs	r0, r0, r6
 800254e:	6060      	str	r0, [r4, #4]
 8002550:	6863      	ldr	r3, [r4, #4]
 8002552:	6123      	str	r3, [r4, #16]
 8002554:	2300      	movs	r3, #0
 8002556:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800255a:	e7aa      	b.n	80024b2 <_printf_i+0x14a>
 800255c:	4632      	mov	r2, r6
 800255e:	4649      	mov	r1, r9
 8002560:	4640      	mov	r0, r8
 8002562:	6923      	ldr	r3, [r4, #16]
 8002564:	47d0      	blx	sl
 8002566:	3001      	adds	r0, #1
 8002568:	d0ad      	beq.n	80024c6 <_printf_i+0x15e>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	079b      	lsls	r3, r3, #30
 800256e:	d413      	bmi.n	8002598 <_printf_i+0x230>
 8002570:	68e0      	ldr	r0, [r4, #12]
 8002572:	9b03      	ldr	r3, [sp, #12]
 8002574:	4298      	cmp	r0, r3
 8002576:	bfb8      	it	lt
 8002578:	4618      	movlt	r0, r3
 800257a:	e7a6      	b.n	80024ca <_printf_i+0x162>
 800257c:	2301      	movs	r3, #1
 800257e:	4632      	mov	r2, r6
 8002580:	4649      	mov	r1, r9
 8002582:	4640      	mov	r0, r8
 8002584:	47d0      	blx	sl
 8002586:	3001      	adds	r0, #1
 8002588:	d09d      	beq.n	80024c6 <_printf_i+0x15e>
 800258a:	3501      	adds	r5, #1
 800258c:	68e3      	ldr	r3, [r4, #12]
 800258e:	9903      	ldr	r1, [sp, #12]
 8002590:	1a5b      	subs	r3, r3, r1
 8002592:	42ab      	cmp	r3, r5
 8002594:	dcf2      	bgt.n	800257c <_printf_i+0x214>
 8002596:	e7eb      	b.n	8002570 <_printf_i+0x208>
 8002598:	2500      	movs	r5, #0
 800259a:	f104 0619 	add.w	r6, r4, #25
 800259e:	e7f5      	b.n	800258c <_printf_i+0x224>
 80025a0:	0800270b 	.word	0x0800270b
 80025a4:	0800271c 	.word	0x0800271c

080025a8 <memmove>:
 80025a8:	4288      	cmp	r0, r1
 80025aa:	b510      	push	{r4, lr}
 80025ac:	eb01 0402 	add.w	r4, r1, r2
 80025b0:	d902      	bls.n	80025b8 <memmove+0x10>
 80025b2:	4284      	cmp	r4, r0
 80025b4:	4623      	mov	r3, r4
 80025b6:	d807      	bhi.n	80025c8 <memmove+0x20>
 80025b8:	1e43      	subs	r3, r0, #1
 80025ba:	42a1      	cmp	r1, r4
 80025bc:	d008      	beq.n	80025d0 <memmove+0x28>
 80025be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80025c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80025c6:	e7f8      	b.n	80025ba <memmove+0x12>
 80025c8:	4601      	mov	r1, r0
 80025ca:	4402      	add	r2, r0
 80025cc:	428a      	cmp	r2, r1
 80025ce:	d100      	bne.n	80025d2 <memmove+0x2a>
 80025d0:	bd10      	pop	{r4, pc}
 80025d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80025da:	e7f7      	b.n	80025cc <memmove+0x24>

080025dc <_sbrk_r>:
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	2300      	movs	r3, #0
 80025e0:	4d05      	ldr	r5, [pc, #20]	@ (80025f8 <_sbrk_r+0x1c>)
 80025e2:	4604      	mov	r4, r0
 80025e4:	4608      	mov	r0, r1
 80025e6:	602b      	str	r3, [r5, #0]
 80025e8:	f7fe f838 	bl	800065c <_sbrk>
 80025ec:	1c43      	adds	r3, r0, #1
 80025ee:	d102      	bne.n	80025f6 <_sbrk_r+0x1a>
 80025f0:	682b      	ldr	r3, [r5, #0]
 80025f2:	b103      	cbz	r3, 80025f6 <_sbrk_r+0x1a>
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	20000260 	.word	0x20000260

080025fc <memchr>:
 80025fc:	4603      	mov	r3, r0
 80025fe:	b510      	push	{r4, lr}
 8002600:	b2c9      	uxtb	r1, r1
 8002602:	4402      	add	r2, r0
 8002604:	4293      	cmp	r3, r2
 8002606:	4618      	mov	r0, r3
 8002608:	d101      	bne.n	800260e <memchr+0x12>
 800260a:	2000      	movs	r0, #0
 800260c:	e003      	b.n	8002616 <memchr+0x1a>
 800260e:	7804      	ldrb	r4, [r0, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	428c      	cmp	r4, r1
 8002614:	d1f6      	bne.n	8002604 <memchr+0x8>
 8002616:	bd10      	pop	{r4, pc}

08002618 <memcpy>:
 8002618:	440a      	add	r2, r1
 800261a:	4291      	cmp	r1, r2
 800261c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002620:	d100      	bne.n	8002624 <memcpy+0xc>
 8002622:	4770      	bx	lr
 8002624:	b510      	push	{r4, lr}
 8002626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800262a:	4291      	cmp	r1, r2
 800262c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002630:	d1f9      	bne.n	8002626 <memcpy+0xe>
 8002632:	bd10      	pop	{r4, pc}

08002634 <_realloc_r>:
 8002634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002638:	4680      	mov	r8, r0
 800263a:	4615      	mov	r5, r2
 800263c:	460c      	mov	r4, r1
 800263e:	b921      	cbnz	r1, 800264a <_realloc_r+0x16>
 8002640:	4611      	mov	r1, r2
 8002642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002646:	f7ff bc39 	b.w	8001ebc <_malloc_r>
 800264a:	b92a      	cbnz	r2, 8002658 <_realloc_r+0x24>
 800264c:	f7ff fbcc 	bl	8001de8 <_free_r>
 8002650:	2400      	movs	r4, #0
 8002652:	4620      	mov	r0, r4
 8002654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002658:	f000 f81a 	bl	8002690 <_malloc_usable_size_r>
 800265c:	4285      	cmp	r5, r0
 800265e:	4606      	mov	r6, r0
 8002660:	d802      	bhi.n	8002668 <_realloc_r+0x34>
 8002662:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002666:	d8f4      	bhi.n	8002652 <_realloc_r+0x1e>
 8002668:	4629      	mov	r1, r5
 800266a:	4640      	mov	r0, r8
 800266c:	f7ff fc26 	bl	8001ebc <_malloc_r>
 8002670:	4607      	mov	r7, r0
 8002672:	2800      	cmp	r0, #0
 8002674:	d0ec      	beq.n	8002650 <_realloc_r+0x1c>
 8002676:	42b5      	cmp	r5, r6
 8002678:	462a      	mov	r2, r5
 800267a:	4621      	mov	r1, r4
 800267c:	bf28      	it	cs
 800267e:	4632      	movcs	r2, r6
 8002680:	f7ff ffca 	bl	8002618 <memcpy>
 8002684:	4621      	mov	r1, r4
 8002686:	4640      	mov	r0, r8
 8002688:	f7ff fbae 	bl	8001de8 <_free_r>
 800268c:	463c      	mov	r4, r7
 800268e:	e7e0      	b.n	8002652 <_realloc_r+0x1e>

08002690 <_malloc_usable_size_r>:
 8002690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002694:	1f18      	subs	r0, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	bfbc      	itt	lt
 800269a:	580b      	ldrlt	r3, [r1, r0]
 800269c:	18c0      	addlt	r0, r0, r3
 800269e:	4770      	bx	lr

080026a0 <_init>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	bf00      	nop
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr

080026ac <_fini>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	bf00      	nop
 80026b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b2:	bc08      	pop	{r3}
 80026b4:	469e      	mov	lr, r3
 80026b6:	4770      	bx	lr
