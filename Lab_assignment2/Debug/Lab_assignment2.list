
Lab_assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a910  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030f8  0800aaf8  0800aaf8  0000baf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbf0  0800dbf0  0000f064  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbf0  0800dbf0  0000ebf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbf8  0800dbf8  0000f064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbf8  0800dbf8  0000ebf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbfc  0800dbfc  0000ebfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800dc00  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000064  0800dc64  0000f064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  0800dc64  0000f2d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eafb  00000000  00000000  0000f08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002516  00000000  00000000  0001db88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000200a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5c  00000000  00000000  00020de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad94  00000000  00000000  00021844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123f8  00000000  00000000  0003c5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099d10  00000000  00000000  0004e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e86e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d20  00000000  00000000  000e8724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000ec444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000064 	.word	0x20000064
 8000204:	00000000 	.word	0x00000000
 8000208:	0800aae0 	.word	0x0800aae0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000068 	.word	0x20000068
 8000224:	0800aae0 	.word	0x0800aae0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_drsub>:
 800048c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e002      	b.n	8000498 <__adddf3>
 8000492:	bf00      	nop

08000494 <__aeabi_dsub>:
 8000494:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000498 <__adddf3>:
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800049e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	bf1f      	itttt	ne
 80004ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004be:	f000 80e2 	beq.w	8000686 <__adddf3+0x1ee>
 80004c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ca:	bfb8      	it	lt
 80004cc:	426d      	neglt	r5, r5
 80004ce:	dd0c      	ble.n	80004ea <__adddf3+0x52>
 80004d0:	442c      	add	r4, r5
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	ea82 0000 	eor.w	r0, r2, r0
 80004de:	ea83 0101 	eor.w	r1, r3, r1
 80004e2:	ea80 0202 	eor.w	r2, r0, r2
 80004e6:	ea81 0303 	eor.w	r3, r1, r3
 80004ea:	2d36      	cmp	r5, #54	@ 0x36
 80004ec:	bf88      	it	hi
 80004ee:	bd30      	pophi	{r4, r5, pc}
 80004f0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x70>
 8000502:	4240      	negs	r0, r0
 8000504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000508:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800050c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x84>
 8000516:	4252      	negs	r2, r2
 8000518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800051c:	ea94 0f05 	teq	r4, r5
 8000520:	f000 80a7 	beq.w	8000672 <__adddf3+0x1da>
 8000524:	f1a4 0401 	sub.w	r4, r4, #1
 8000528:	f1d5 0e20 	rsbs	lr, r5, #32
 800052c:	db0d      	blt.n	800054a <__adddf3+0xb2>
 800052e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000532:	fa22 f205 	lsr.w	r2, r2, r5
 8000536:	1880      	adds	r0, r0, r2
 8000538:	f141 0100 	adc.w	r1, r1, #0
 800053c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000540:	1880      	adds	r0, r0, r2
 8000542:	fa43 f305 	asr.w	r3, r3, r5
 8000546:	4159      	adcs	r1, r3
 8000548:	e00e      	b.n	8000568 <__adddf3+0xd0>
 800054a:	f1a5 0520 	sub.w	r5, r5, #32
 800054e:	f10e 0e20 	add.w	lr, lr, #32
 8000552:	2a01      	cmp	r2, #1
 8000554:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000558:	bf28      	it	cs
 800055a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800055e:	fa43 f305 	asr.w	r3, r3, r5
 8000562:	18c0      	adds	r0, r0, r3
 8000564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800056c:	d507      	bpl.n	800057e <__adddf3+0xe6>
 800056e:	f04f 0e00 	mov.w	lr, #0
 8000572:	f1dc 0c00 	rsbs	ip, ip, #0
 8000576:	eb7e 0000 	sbcs.w	r0, lr, r0
 800057a:	eb6e 0101 	sbc.w	r1, lr, r1
 800057e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000582:	d31b      	bcc.n	80005bc <__adddf3+0x124>
 8000584:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000588:	d30c      	bcc.n	80005a4 <__adddf3+0x10c>
 800058a:	0849      	lsrs	r1, r1, #1
 800058c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000590:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000594:	f104 0401 	add.w	r4, r4, #1
 8000598:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800059c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005a0:	f080 809a 	bcs.w	80006d8 <__adddf3+0x240>
 80005a4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a8:	bf08      	it	eq
 80005aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ae:	f150 0000 	adcs.w	r0, r0, #0
 80005b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b6:	ea41 0105 	orr.w	r1, r1, r5
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c0:	4140      	adcs	r0, r0
 80005c2:	eb41 0101 	adc.w	r1, r1, r1
 80005c6:	3c01      	subs	r4, #1
 80005c8:	bf28      	it	cs
 80005ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ce:	d2e9      	bcs.n	80005a4 <__adddf3+0x10c>
 80005d0:	f091 0f00 	teq	r1, #0
 80005d4:	bf04      	itt	eq
 80005d6:	4601      	moveq	r1, r0
 80005d8:	2000      	moveq	r0, #0
 80005da:	fab1 f381 	clz	r3, r1
 80005de:	bf08      	it	eq
 80005e0:	3320      	addeq	r3, #32
 80005e2:	f1a3 030b 	sub.w	r3, r3, #11
 80005e6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ea:	da0c      	bge.n	8000606 <__adddf3+0x16e>
 80005ec:	320c      	adds	r2, #12
 80005ee:	dd08      	ble.n	8000602 <__adddf3+0x16a>
 80005f0:	f102 0c14 	add.w	ip, r2, #20
 80005f4:	f1c2 020c 	rsb	r2, r2, #12
 80005f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000600:	e00c      	b.n	800061c <__adddf3+0x184>
 8000602:	f102 0214 	add.w	r2, r2, #20
 8000606:	bfd8      	it	le
 8000608:	f1c2 0c20 	rsble	ip, r2, #32
 800060c:	fa01 f102 	lsl.w	r1, r1, r2
 8000610:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000614:	bfdc      	itt	le
 8000616:	ea41 010c 	orrle.w	r1, r1, ip
 800061a:	4090      	lslle	r0, r2
 800061c:	1ae4      	subs	r4, r4, r3
 800061e:	bfa2      	ittt	ge
 8000620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000624:	4329      	orrge	r1, r5
 8000626:	bd30      	popge	{r4, r5, pc}
 8000628:	ea6f 0404 	mvn.w	r4, r4
 800062c:	3c1f      	subs	r4, #31
 800062e:	da1c      	bge.n	800066a <__adddf3+0x1d2>
 8000630:	340c      	adds	r4, #12
 8000632:	dc0e      	bgt.n	8000652 <__adddf3+0x1ba>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0220 	rsb	r2, r4, #32
 800063c:	fa20 f004 	lsr.w	r0, r0, r4
 8000640:	fa01 f302 	lsl.w	r3, r1, r2
 8000644:	ea40 0003 	orr.w	r0, r0, r3
 8000648:	fa21 f304 	lsr.w	r3, r1, r4
 800064c:	ea45 0103 	orr.w	r1, r5, r3
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f1c4 040c 	rsb	r4, r4, #12
 8000656:	f1c4 0220 	rsb	r2, r4, #32
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 f304 	lsl.w	r3, r1, r4
 8000662:	ea40 0003 	orr.w	r0, r0, r3
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	fa21 f004 	lsr.w	r0, r1, r4
 800066e:	4629      	mov	r1, r5
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	f094 0f00 	teq	r4, #0
 8000676:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800067a:	bf06      	itte	eq
 800067c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000680:	3401      	addeq	r4, #1
 8000682:	3d01      	subne	r5, #1
 8000684:	e74e      	b.n	8000524 <__adddf3+0x8c>
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf18      	it	ne
 800068c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000690:	d029      	beq.n	80006e6 <__adddf3+0x24e>
 8000692:	ea94 0f05 	teq	r4, r5
 8000696:	bf08      	it	eq
 8000698:	ea90 0f02 	teqeq	r0, r2
 800069c:	d005      	beq.n	80006aa <__adddf3+0x212>
 800069e:	ea54 0c00 	orrs.w	ip, r4, r0
 80006a2:	bf04      	itt	eq
 80006a4:	4619      	moveq	r1, r3
 80006a6:	4610      	moveq	r0, r2
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea91 0f03 	teq	r1, r3
 80006ae:	bf1e      	ittt	ne
 80006b0:	2100      	movne	r1, #0
 80006b2:	2000      	movne	r0, #0
 80006b4:	bd30      	popne	{r4, r5, pc}
 80006b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ba:	d105      	bne.n	80006c8 <__adddf3+0x230>
 80006bc:	0040      	lsls	r0, r0, #1
 80006be:	4149      	adcs	r1, r1
 80006c0:	bf28      	it	cs
 80006c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006c6:	bd30      	pop	{r4, r5, pc}
 80006c8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006cc:	bf3c      	itt	cc
 80006ce:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006d2:	bd30      	popcc	{r4, r5, pc}
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006dc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf1a      	itte	ne
 80006ec:	4619      	movne	r1, r3
 80006ee:	4610      	movne	r0, r2
 80006f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f4:	bf1c      	itt	ne
 80006f6:	460b      	movne	r3, r1
 80006f8:	4602      	movne	r2, r0
 80006fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006fe:	bf06      	itte	eq
 8000700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000704:	ea91 0f03 	teqeq	r1, r3
 8000708:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	bf00      	nop

08000710 <__aeabi_ui2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f04f 0500 	mov.w	r5, #0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e750      	b.n	80005d0 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_i2d>:
 8000730:	f090 0f00 	teq	r0, #0
 8000734:	bf04      	itt	eq
 8000736:	2100      	moveq	r1, #0
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000740:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000744:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000748:	bf48      	it	mi
 800074a:	4240      	negmi	r0, r0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e73e      	b.n	80005d0 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_f2d>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800075a:	ea4f 0131 	mov.w	r1, r1, rrx
 800075e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000762:	bf1f      	itttt	ne
 8000764:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000768:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800076c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000770:	4770      	bxne	lr
 8000772:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000776:	bf08      	it	eq
 8000778:	4770      	bxeq	lr
 800077a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800077e:	bf04      	itt	eq
 8000780:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000784:	4770      	bxeq	lr
 8000786:	b530      	push	{r4, r5, lr}
 8000788:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	e71c      	b.n	80005d0 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_ul2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f04f 0500 	mov.w	r5, #0
 80007a6:	e00a      	b.n	80007be <__aeabi_l2d+0x16>

080007a8 <__aeabi_l2d>:
 80007a8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	b530      	push	{r4, r5, lr}
 80007b2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007b6:	d502      	bpl.n	80007be <__aeabi_l2d+0x16>
 80007b8:	4240      	negs	r0, r0
 80007ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007be:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ca:	f43f aed8 	beq.w	800057e <__adddf3+0xe6>
 80007ce:	f04f 0203 	mov.w	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007de:	bf18      	it	ne
 80007e0:	3203      	addne	r2, #3
 80007e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ee:	fa20 f002 	lsr.w	r0, r0, r2
 80007f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007f6:	ea40 000e 	orr.w	r0, r0, lr
 80007fa:	fa21 f102 	lsr.w	r1, r1, r2
 80007fe:	4414      	add	r4, r2
 8000800:	e6bd      	b.n	800057e <__adddf3+0xe6>
 8000802:	bf00      	nop

08000804 <__aeabi_d2uiz>:
 8000804:	004a      	lsls	r2, r1, #1
 8000806:	d211      	bcs.n	800082c <__aeabi_d2uiz+0x28>
 8000808:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800080c:	d211      	bcs.n	8000832 <__aeabi_d2uiz+0x2e>
 800080e:	d50d      	bpl.n	800082c <__aeabi_d2uiz+0x28>
 8000810:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000818:	d40e      	bmi.n	8000838 <__aeabi_d2uiz+0x34>
 800081a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000826:	fa23 f002 	lsr.w	r0, r3, r2
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000836:	d102      	bne.n	800083e <__aeabi_d2uiz+0x3a>
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	4770      	bx	lr
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	4770      	bx	lr

08000844 <Key_Config>:
#include "lcd_v4.h"

buttonType button[3];

void Key_Config()
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
	button[0].GPIO_Port = KEY0_GPIO_Port;
 8000848:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <Key_Config+0x34>)
 800084a:	4a0c      	ldr	r2, [pc, #48]	@ (800087c <Key_Config+0x38>)
 800084c:	601a      	str	r2, [r3, #0]
	button[0].GPIO_Pin = KEY0_Pin;
 800084e:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <Key_Config+0x34>)
 8000850:	2220      	movs	r2, #32
 8000852:	809a      	strh	r2, [r3, #4]

	button[1].GPIO_Port = KEY1_GPIO_Port;
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <Key_Config+0x34>)
 8000856:	4a0a      	ldr	r2, [pc, #40]	@ (8000880 <Key_Config+0x3c>)
 8000858:	611a      	str	r2, [r3, #16]
	button[1].GPIO_Pin = KEY1_Pin;
 800085a:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <Key_Config+0x34>)
 800085c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000860:	829a      	strh	r2, [r3, #20]

	button[2].GPIO_Port = KEY_WK_GPIO_Port;
 8000862:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <Key_Config+0x34>)
 8000864:	4a06      	ldr	r2, [pc, #24]	@ (8000880 <Key_Config+0x3c>)
 8000866:	621a      	str	r2, [r3, #32]
	button[2].GPIO_Pin = KEY_WK_Pin;
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <Key_Config+0x34>)
 800086a:	2201      	movs	r2, #1
 800086c:	849a      	strh	r2, [r3, #36]	@ 0x24

}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000080 	.word	0x20000080
 800087c:	40011000 	.word	0x40011000
 8000880:	40010800 	.word	0x40010800

08000884 <Key_ParaInit>:

void Key_ParaInit(buttonType* button)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	button->high_cnt = 0;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	815a      	strh	r2, [r3, #10]
	button->hold_cnt = 0;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	811a      	strh	r2, [r3, #8]
	button->press_flag = 0;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	731a      	strb	r2, [r3, #12]
	button->release_flag = 0;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	735a      	strb	r2, [r3, #13]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
	...

080008b0 <Key_Scan>:

void Key_Scan(buttonType* button)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	switch(button->key)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	799b      	ldrb	r3, [r3, #6]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	f200 8105 	bhi.w	8000acc <Key_Scan+0x21c>
 80008c2:	a201      	add	r2, pc, #4	@ (adr r2, 80008c8 <Key_Scan+0x18>)
 80008c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c8:	080008d9 	.word	0x080008d9
 80008cc:	080009ed 	.word	0x080009ed
 80008d0:	08000a0d 	.word	0x08000a0d
 80008d4:	08000aa5 	.word	0x08000aa5
	{
		case KEY_NULL:
		{
			if (button->GPIO_Pin == KEY_WK_Pin){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	889b      	ldrh	r3, [r3, #4]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d11d      	bne.n	800091c <Key_Scan+0x6c>
				if(HAL_GPIO_ReadPin(button->GPIO_Port,button->GPIO_Pin) == 1){
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	889b      	ldrh	r3, [r3, #4]
 80008e8:	4619      	mov	r1, r3
 80008ea:	4610      	mov	r0, r2
 80008ec:	f008 fad4 	bl	8008e98 <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d103      	bne.n	80008fe <Key_Scan+0x4e>
					button->key = KEY_DOWN;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2201      	movs	r2, #1
 80008fa:	719a      	strb	r2, [r3, #6]
 80008fc:	e02b      	b.n	8000956 <Key_Scan+0xa6>
				}
				else if(HAL_GPIO_ReadPin(button->GPIO_Port, button->GPIO_Pin) == 0){
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	889b      	ldrh	r3, [r3, #4]
 8000906:	4619      	mov	r1, r3
 8000908:	4610      	mov	r0, r2
 800090a:	f008 fac5 	bl	8008e98 <HAL_GPIO_ReadPin>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d120      	bne.n	8000956 <Key_Scan+0xa6>
					button->key = KEY_NULL;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	719a      	strb	r2, [r3, #6]
 800091a:	e01c      	b.n	8000956 <Key_Scan+0xa6>
				}
			}
			else {
			/* if falling edge captured */
				if(HAL_GPIO_ReadPin(button->GPIO_Port,button->GPIO_Pin) == 0)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	889b      	ldrh	r3, [r3, #4]
 8000924:	4619      	mov	r1, r3
 8000926:	4610      	mov	r0, r2
 8000928:	f008 fab6 	bl	8008e98 <HAL_GPIO_ReadPin>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d103      	bne.n	800093a <Key_Scan+0x8a>
				{
					button->key = KEY_DOWN;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	719a      	strb	r2, [r3, #6]
 8000938:	e00d      	b.n	8000956 <Key_Scan+0xa6>
				}
				else if(HAL_GPIO_ReadPin(button->GPIO_Port,button->GPIO_Pin) == 1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	889b      	ldrh	r3, [r3, #4]
 8000942:	4619      	mov	r1, r3
 8000944:	4610      	mov	r0, r2
 8000946:	f008 faa7 	bl	8008e98 <HAL_GPIO_ReadPin>
 800094a:	4603      	mov	r3, r0
 800094c:	2b01      	cmp	r3, #1
 800094e:	d102      	bne.n	8000956 <Key_Scan+0xa6>
				{
					button->key = KEY_NULL;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	719a      	strb	r2, [r3, #6]
				}
			}

			/* if button is released ,high_time_count++ */
			if(button->release_flag == 1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7b5b      	ldrb	r3, [r3, #13]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d105      	bne.n	800096a <Key_Scan+0xba>
			{
				button->high_cnt++;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	895b      	ldrh	r3, [r3, #10]
 8000962:	3301      	adds	r3, #1
 8000964:	b29a      	uxth	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	815a      	strh	r2, [r3, #10]
			}

			/**********************judge***********************/
			/* if high_time_count is longer than LONG_PRESS_TIME, consider BUTTON_LONG_PRESS */
			if(button->hold_cnt > LONG_PRESS_TIME)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	891b      	ldrh	r3, [r3, #8]
 800096e:	2b64      	cmp	r3, #100	@ 0x64
 8000970:	d906      	bls.n	8000980 <Key_Scan+0xd0>
			{
				button->buttonAction = BUTTON_LONG_PRESS;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2204      	movs	r2, #4
 8000976:	739a      	strb	r2, [r3, #14]
				Key_ParaInit(button);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff83 	bl	8000884 <Key_ParaInit>
					button->buttonAction = BUTTON_TRIPLE;
				}

				Key_ParaInit(button);
			}
			break;
 800097e:	e0a7      	b.n	8000ad0 <Key_Scan+0x220>
			else if(button->hold_cnt < LONG_PRESS_TIME && button->hold_cnt > CLICK_MAX_TIME)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	891b      	ldrh	r3, [r3, #8]
 8000984:	2b63      	cmp	r3, #99	@ 0x63
 8000986:	d807      	bhi.n	8000998 <Key_Scan+0xe8>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	891b      	ldrh	r3, [r3, #8]
 800098c:	2b14      	cmp	r3, #20
 800098e:	d903      	bls.n	8000998 <Key_Scan+0xe8>
				Key_ParaInit(button);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff77 	bl	8000884 <Key_ParaInit>
			break;
 8000996:	e09b      	b.n	8000ad0 <Key_Scan+0x220>
			else if((button->high_cnt > JUDGE_TIME)&&(button->hold_cnt > CLICK_MIN_TIME && button->hold_cnt < CLICK_MAX_TIME))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	895b      	ldrh	r3, [r3, #10]
 800099c:	2b14      	cmp	r3, #20
 800099e:	f240 8097 	bls.w	8000ad0 <Key_Scan+0x220>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	891b      	ldrh	r3, [r3, #8]
 80009a6:	2b05      	cmp	r3, #5
 80009a8:	f240 8092 	bls.w	8000ad0 <Key_Scan+0x220>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	891b      	ldrh	r3, [r3, #8]
 80009b0:	2b13      	cmp	r3, #19
 80009b2:	f200 808d 	bhi.w	8000ad0 <Key_Scan+0x220>
				if(button->press_flag ==1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7b1b      	ldrb	r3, [r3, #12]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d103      	bne.n	80009c6 <Key_Scan+0x116>
					button->buttonAction = BUTTON_SINGLE;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2201      	movs	r2, #1
 80009c2:	739a      	strb	r2, [r3, #14]
 80009c4:	e00e      	b.n	80009e4 <Key_Scan+0x134>
				else if(button->press_flag == 2)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	7b1b      	ldrb	r3, [r3, #12]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d103      	bne.n	80009d6 <Key_Scan+0x126>
					button->buttonAction = BUTTON_DOUBLE;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2202      	movs	r2, #2
 80009d2:	739a      	strb	r2, [r3, #14]
 80009d4:	e006      	b.n	80009e4 <Key_Scan+0x134>
				else if(button->press_flag == 3)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	7b1b      	ldrb	r3, [r3, #12]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d102      	bne.n	80009e4 <Key_Scan+0x134>
					button->buttonAction = BUTTON_TRIPLE;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2203      	movs	r2, #3
 80009e2:	739a      	strb	r2, [r3, #14]
				Key_ParaInit(button);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff4d 	bl	8000884 <Key_ParaInit>
			break;
 80009ea:	e071      	b.n	8000ad0 <Key_Scan+0x220>
		}

		case KEY_DOWN:
		{
			button->key = KEY_PRESS;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2202      	movs	r2, #2
 80009f0:	719a      	strb	r2, [r3, #6]

			/* as long as falling edge occurring,press_flag++ */
			button->press_flag++;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	7b1b      	ldrb	r3, [r3, #12]
 80009f6:	3301      	adds	r3, #1
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	731a      	strb	r2, [r3, #12]

			button->release_flag = 0; 			/* means that the button has been pressed */
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	735a      	strb	r2, [r3, #13]

			button->hold_cnt = 0;				/* reset hold time count */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	811a      	strh	r2, [r3, #8]
			break;
 8000a0a:	e066      	b.n	8000ada <Key_Scan+0x22a>
		}

		case KEY_PRESS:
		{
			/* when button was kept pressed, hold count++ */
			if(button->GPIO_Pin == KEY_WK_Pin){
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d123      	bne.n	8000a5c <Key_Scan+0x1ac>
				if(HAL_GPIO_ReadPin(button->GPIO_Port,button->GPIO_Pin) == 1){
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	889b      	ldrh	r3, [r3, #4]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4610      	mov	r0, r2
 8000a20:	f008 fa3a 	bl	8008e98 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d109      	bne.n	8000a3e <Key_Scan+0x18e>
					button->key = KEY_PRESS;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	719a      	strb	r2, [r3, #6]
					button->hold_cnt++;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	891b      	ldrh	r3, [r3, #8]
 8000a34:	3301      	adds	r3, #1
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	811a      	strh	r2, [r3, #8]
				else if(HAL_GPIO_ReadPin(button->GPIO_Port,button->GPIO_Pin) == 1)
				{
					button->key = KEY_UP;
				}
			}
			break;
 8000a3c:	e04a      	b.n	8000ad4 <Key_Scan+0x224>
				else if(HAL_GPIO_ReadPin(button->GPIO_Port,button->GPIO_Pin) == 0){
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	889b      	ldrh	r3, [r3, #4]
 8000a46:	4619      	mov	r1, r3
 8000a48:	4610      	mov	r0, r2
 8000a4a:	f008 fa25 	bl	8008e98 <HAL_GPIO_ReadPin>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d13f      	bne.n	8000ad4 <Key_Scan+0x224>
					button->key = KEY_UP;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2203      	movs	r2, #3
 8000a58:	719a      	strb	r2, [r3, #6]
			break;
 8000a5a:	e03b      	b.n	8000ad4 <Key_Scan+0x224>
				if(HAL_GPIO_ReadPin(button->GPIO_Port,button->GPIO_Pin) == 0)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	889b      	ldrh	r3, [r3, #4]
 8000a64:	4619      	mov	r1, r3
 8000a66:	4610      	mov	r0, r2
 8000a68:	f008 fa16 	bl	8008e98 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d109      	bne.n	8000a86 <Key_Scan+0x1d6>
					button->key = KEY_PRESS;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2202      	movs	r2, #2
 8000a76:	719a      	strb	r2, [r3, #6]
					button->hold_cnt++;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	891b      	ldrh	r3, [r3, #8]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	811a      	strh	r2, [r3, #8]
			break;
 8000a84:	e026      	b.n	8000ad4 <Key_Scan+0x224>
				else if(HAL_GPIO_ReadPin(button->GPIO_Port,button->GPIO_Pin) == 1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	889b      	ldrh	r3, [r3, #4]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4610      	mov	r0, r2
 8000a92:	f008 fa01 	bl	8008e98 <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d11b      	bne.n	8000ad4 <Key_Scan+0x224>
					button->key = KEY_UP;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	719a      	strb	r2, [r3, #6]
			break;
 8000aa2:	e017      	b.n	8000ad4 <Key_Scan+0x224>
		}

		case KEY_UP:
		{
			button->key = KEY_NULL;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	719a      	strb	r2, [r3, #6]

			button->release_flag = 1;			/* means that the button is released */
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2201      	movs	r2, #1
 8000aae:	735a      	strb	r2, [r3, #13]

			button->high_cnt = 0;				/* reset hold time count */
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	815a      	strh	r2, [r3, #10]

			/* if press time is longer than 1s then press_flag-- */
			if(button->hold_cnt > 100)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	891b      	ldrh	r3, [r3, #8]
 8000aba:	2b64      	cmp	r3, #100	@ 0x64
 8000abc:	d90c      	bls.n	8000ad8 <Key_Scan+0x228>
			{
				button->press_flag--;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7b1b      	ldrb	r3, [r3, #12]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	731a      	strb	r2, [r3, #12]
			}
			break;
 8000aca:	e005      	b.n	8000ad8 <Key_Scan+0x228>
		}
		default:
			break;
 8000acc:	bf00      	nop
 8000ace:	e004      	b.n	8000ada <Key_Scan+0x22a>
			break;
 8000ad0:	bf00      	nop
 8000ad2:	e002      	b.n	8000ada <Key_Scan+0x22a>
			break;
 8000ad4:	bf00      	nop
 8000ad6:	e000      	b.n	8000ada <Key_Scan+0x22a>
			break;
 8000ad8:	bf00      	nop
	}
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop

08000ae4 <lcd_divide>:
 */

#include "lcd_v4.h"
#include "LCD.h"

void lcd_divide(){
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af02      	add	r7, sp, #8
	//three lines
	lcd_fill(0,lcddev.height/5, lcddev.width,lcddev.height/5,BLACK);
 8000aea:	4b2b      	ldr	r3, [pc, #172]	@ (8000b98 <lcd_divide+0xb4>)
 8000aec:	885b      	ldrh	r3, [r3, #2]
 8000aee:	4a2b      	ldr	r2, [pc, #172]	@ (8000b9c <lcd_divide+0xb8>)
 8000af0:	fba2 2303 	umull	r2, r3, r2, r3
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	b299      	uxth	r1, r3
 8000af8:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <lcd_divide+0xb4>)
 8000afa:	881a      	ldrh	r2, [r3, #0]
 8000afc:	4b26      	ldr	r3, [pc, #152]	@ (8000b98 <lcd_divide+0xb4>)
 8000afe:	885b      	ldrh	r3, [r3, #2]
 8000b00:	4826      	ldr	r0, [pc, #152]	@ (8000b9c <lcd_divide+0xb8>)
 8000b02:	fba0 0303 	umull	r0, r3, r0, r3
 8000b06:	089b      	lsrs	r3, r3, #2
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	9000      	str	r0, [sp, #0]
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f006 fae4 	bl	80070dc <lcd_fill>
	lcd_fill(0,2 * lcddev.height/5, lcddev.width,2 * lcddev.height/5, BLACK);
 8000b14:	4b20      	ldr	r3, [pc, #128]	@ (8000b98 <lcd_divide+0xb4>)
 8000b16:	885b      	ldrh	r3, [r3, #2]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4a21      	ldr	r2, [pc, #132]	@ (8000ba0 <lcd_divide+0xbc>)
 8000b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b20:	1052      	asrs	r2, r2, #1
 8000b22:	17db      	asrs	r3, r3, #31
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	b299      	uxth	r1, r3
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <lcd_divide+0xb4>)
 8000b2a:	8818      	ldrh	r0, [r3, #0]
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <lcd_divide+0xb4>)
 8000b2e:	885b      	ldrh	r3, [r3, #2]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba0 <lcd_divide+0xbc>)
 8000b34:	fb82 4203 	smull	r4, r2, r2, r3
 8000b38:	1052      	asrs	r2, r2, #1
 8000b3a:	17db      	asrs	r3, r3, #31
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	2200      	movs	r2, #0
 8000b42:	9200      	str	r2, [sp, #0]
 8000b44:	4602      	mov	r2, r0
 8000b46:	2000      	movs	r0, #0
 8000b48:	f006 fac8 	bl	80070dc <lcd_fill>
	lcd_fill(0, 3 * lcddev.height/5, lcddev.width,3 * lcddev.height/5,  BLACK);
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <lcd_divide+0xb4>)
 8000b4e:	885b      	ldrh	r3, [r3, #2]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	4a11      	ldr	r2, [pc, #68]	@ (8000ba0 <lcd_divide+0xbc>)
 8000b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5e:	1052      	asrs	r2, r2, #1
 8000b60:	17db      	asrs	r3, r3, #31
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	b299      	uxth	r1, r3
 8000b66:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <lcd_divide+0xb4>)
 8000b68:	8818      	ldrh	r0, [r3, #0]
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <lcd_divide+0xb4>)
 8000b6c:	885b      	ldrh	r3, [r3, #2]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4613      	mov	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4413      	add	r3, r2
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <lcd_divide+0xbc>)
 8000b78:	fb82 4203 	smull	r4, r2, r2, r3
 8000b7c:	1052      	asrs	r2, r2, #1
 8000b7e:	17db      	asrs	r3, r3, #31
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	2200      	movs	r2, #0
 8000b86:	9200      	str	r2, [sp, #0]
 8000b88:	4602      	mov	r2, r0
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f006 faa6 	bl	80070dc <lcd_fill>
}
 8000b90:	bf00      	nop
 8000b92:	3704      	adds	r7, #4
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	200000b0 	.word	0x200000b0
 8000b9c:	cccccccd 	.word	0xcccccccd
 8000ba0:	66666667 	.word	0x66666667

08000ba4 <lcd_picture_mode>:

void lcd_picture_mode(uint8_t Mode){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af04      	add	r7, sp, #16
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	if(Mode){
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d052      	beq.n	8000c5a <lcd_picture_mode+0xb6>
		lcd_show_string(10,lcddev.height/10,200,24,24,"Encoding Mode",BLACK);
 8000bb4:	4b49      	ldr	r3, [pc, #292]	@ (8000cdc <lcd_picture_mode+0x138>)
 8000bb6:	885b      	ldrh	r3, [r3, #2]
 8000bb8:	4a49      	ldr	r2, [pc, #292]	@ (8000ce0 <lcd_picture_mode+0x13c>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	b299      	uxth	r1, r3
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	9302      	str	r3, [sp, #8]
 8000bc6:	4b47      	ldr	r3, [pc, #284]	@ (8000ce4 <lcd_picture_mode+0x140>)
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	2318      	movs	r3, #24
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2318      	movs	r3, #24
 8000bd0:	22c8      	movs	r2, #200	@ 0xc8
 8000bd2:	200a      	movs	r0, #10
 8000bd4:	f006 fbce 	bl	8007374 <lcd_show_string>
		lcd_show_string(10,lcddev.height/10 + 40,100,16,16,"Original data", BLACK);
 8000bd8:	4b40      	ldr	r3, [pc, #256]	@ (8000cdc <lcd_picture_mode+0x138>)
 8000bda:	885b      	ldrh	r3, [r3, #2]
 8000bdc:	4a40      	ldr	r2, [pc, #256]	@ (8000ce0 <lcd_picture_mode+0x13c>)
 8000bde:	fba2 2303 	umull	r2, r3, r2, r3
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	3328      	adds	r3, #40	@ 0x28
 8000be8:	b299      	uxth	r1, r3
 8000bea:	2300      	movs	r3, #0
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	4b3e      	ldr	r3, [pc, #248]	@ (8000ce8 <lcd_picture_mode+0x144>)
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	2264      	movs	r2, #100	@ 0x64
 8000bfa:	200a      	movs	r0, #10
 8000bfc:	f006 fbba 	bl	8007374 <lcd_show_string>
		lcd_show_string(10,2*lcddev.height/5 + 10, 100, 16,16,"Hamming code", BLACK);
 8000c00:	4b36      	ldr	r3, [pc, #216]	@ (8000cdc <lcd_picture_mode+0x138>)
 8000c02:	885b      	ldrh	r3, [r3, #2]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4a39      	ldr	r2, [pc, #228]	@ (8000cec <lcd_picture_mode+0x148>)
 8000c08:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0c:	1052      	asrs	r2, r2, #1
 8000c0e:	17db      	asrs	r3, r3, #31
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	330a      	adds	r3, #10
 8000c16:	b299      	uxth	r1, r3
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	4b34      	ldr	r3, [pc, #208]	@ (8000cf0 <lcd_picture_mode+0x14c>)
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	2310      	movs	r3, #16
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2310      	movs	r3, #16
 8000c26:	2264      	movs	r2, #100	@ 0x64
 8000c28:	200a      	movs	r0, #10
 8000c2a:	f006 fba3 	bl	8007374 <lcd_show_string>
		lcd_show_string(10,4*lcddev.height/5,200,24,24,"No errors", BLACK);
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <lcd_picture_mode+0x138>)
 8000c30:	885b      	ldrh	r3, [r3, #2]
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4a2d      	ldr	r2, [pc, #180]	@ (8000cec <lcd_picture_mode+0x148>)
 8000c36:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3a:	1052      	asrs	r2, r2, #1
 8000c3c:	17db      	asrs	r3, r3, #31
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	b299      	uxth	r1, r3
 8000c42:	2300      	movs	r3, #0
 8000c44:	9302      	str	r3, [sp, #8]
 8000c46:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <lcd_picture_mode+0x150>)
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	2318      	movs	r3, #24
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2318      	movs	r3, #24
 8000c50:	22c8      	movs	r2, #200	@ 0xc8
 8000c52:	200a      	movs	r0, #10
 8000c54:	f006 fb8e 	bl	8007374 <lcd_show_string>
	else {
		lcd_show_string(10,lcddev.height/10,200,24,24,"Decoding Mode",BLACK);
		lcd_show_string(10,lcddev.height/10 + 40,100,16,16,"Original data", BLACK);
		lcd_show_string(10,2*lcddev.height/5 + 10, 100, 16,16,"Hamming code", BLACK);
	}
}
 8000c58:	e03c      	b.n	8000cd4 <lcd_picture_mode+0x130>
		lcd_show_string(10,lcddev.height/10,200,24,24,"Decoding Mode",BLACK);
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <lcd_picture_mode+0x138>)
 8000c5c:	885b      	ldrh	r3, [r3, #2]
 8000c5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ce0 <lcd_picture_mode+0x13c>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	08db      	lsrs	r3, r3, #3
 8000c66:	b299      	uxth	r1, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <lcd_picture_mode+0x154>)
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	2318      	movs	r3, #24
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2318      	movs	r3, #24
 8000c76:	22c8      	movs	r2, #200	@ 0xc8
 8000c78:	200a      	movs	r0, #10
 8000c7a:	f006 fb7b 	bl	8007374 <lcd_show_string>
		lcd_show_string(10,lcddev.height/10 + 40,100,16,16,"Original data", BLACK);
 8000c7e:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <lcd_picture_mode+0x138>)
 8000c80:	885b      	ldrh	r3, [r3, #2]
 8000c82:	4a17      	ldr	r2, [pc, #92]	@ (8000ce0 <lcd_picture_mode+0x13c>)
 8000c84:	fba2 2303 	umull	r2, r3, r2, r3
 8000c88:	08db      	lsrs	r3, r3, #3
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	3328      	adds	r3, #40	@ 0x28
 8000c8e:	b299      	uxth	r1, r3
 8000c90:	2300      	movs	r3, #0
 8000c92:	9302      	str	r3, [sp, #8]
 8000c94:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <lcd_picture_mode+0x144>)
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	2310      	movs	r3, #16
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	2264      	movs	r2, #100	@ 0x64
 8000ca0:	200a      	movs	r0, #10
 8000ca2:	f006 fb67 	bl	8007374 <lcd_show_string>
		lcd_show_string(10,2*lcddev.height/5 + 10, 100, 16,16,"Hamming code", BLACK);
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <lcd_picture_mode+0x138>)
 8000ca8:	885b      	ldrh	r3, [r3, #2]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4a0f      	ldr	r2, [pc, #60]	@ (8000cec <lcd_picture_mode+0x148>)
 8000cae:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb2:	1052      	asrs	r2, r2, #1
 8000cb4:	17db      	asrs	r3, r3, #31
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	330a      	adds	r3, #10
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	9302      	str	r3, [sp, #8]
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <lcd_picture_mode+0x14c>)
 8000cc4:	9301      	str	r3, [sp, #4]
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2310      	movs	r3, #16
 8000ccc:	2264      	movs	r2, #100	@ 0x64
 8000cce:	200a      	movs	r0, #10
 8000cd0:	f006 fb50 	bl	8007374 <lcd_show_string>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000b0 	.word	0x200000b0
 8000ce0:	cccccccd 	.word	0xcccccccd
 8000ce4:	0800aaf8 	.word	0x0800aaf8
 8000ce8:	0800ab08 	.word	0x0800ab08
 8000cec:	66666667 	.word	0x66666667
 8000cf0:	0800ab18 	.word	0x0800ab18
 8000cf4:	0800ab28 	.word	0x0800ab28
 8000cf8:	0800ab34 	.word	0x0800ab34

08000cfc <lcd_clear_area>:


void lcd_clear_area(uint16_t color, uint16_t x0, uint16_t y0, uint16_t width, uint16_t height)
{//局部清除函数
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4604      	mov	r4, r0
 8000d04:	4608      	mov	r0, r1
 8000d06:	4611      	mov	r1, r2
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	80fb      	strh	r3, [r7, #6]
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80bb      	strh	r3, [r7, #4]
 8000d12:	460b      	mov	r3, r1
 8000d14:	807b      	strh	r3, [r7, #2]
 8000d16:	4613      	mov	r3, r2
 8000d18:	803b      	strh	r3, [r7, #0]
    uint32_t index = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
    uint32_t totalpoint = width * height;   /* 计算需要清除的总像素点数 */
 8000d1e:	883b      	ldrh	r3, [r7, #0]
 8000d20:	8c3a      	ldrh	r2, [r7, #32]
 8000d22:	fb02 f303 	mul.w	r3, r2, r3
 8000d26:	60bb      	str	r3, [r7, #8]

    lcd_set_cursor(x0, y0);
 8000d28:	887a      	ldrh	r2, [r7, #2]
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f996 	bl	8001060 <lcd_set_cursor>
    lcd_write_ram_prepare();
 8000d34:	f000 f96a 	bl	800100c <lcd_write_ram_prepare>

    LCD_RS(1);
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <lcd_clear_area+0x84>)
 8000d3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d3e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <lcd_clear_area+0x84>)
 8000d42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d46:	611a      	str	r2, [r3, #16]

    for (index = 0; index < totalpoint; index++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	e00c      	b.n	8000d68 <lcd_clear_area+0x6c>
    {
        LCD_DATA_OUT(color);
 8000d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000d84 <lcd_clear_area+0x88>)
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	60d3      	str	r3, [r2, #12]
        LCD_WR(0);
 8000d54:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <lcd_clear_area+0x84>)
 8000d56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d5a:	611a      	str	r2, [r3, #16]
        LCD_WR(1);
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <lcd_clear_area+0x84>)
 8000d5e:	2280      	movs	r2, #128	@ 0x80
 8000d60:	611a      	str	r2, [r3, #16]
    for (index = 0; index < totalpoint; index++)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3301      	adds	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d3ee      	bcc.n	8000d4e <lcd_clear_area+0x52>
    }

    LCD_CS(1);
 8000d70:	4b03      	ldr	r3, [pc, #12]	@ (8000d80 <lcd_clear_area+0x84>)
 8000d72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d76:	611a      	str	r2, [r3, #16]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	40011000 	.word	0x40011000
 8000d84:	40010c00 	.word	0x40010c00

08000d88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e88 <MX_GPIO_Init+0x100>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a39      	ldr	r2, [pc, #228]	@ (8000e88 <MX_GPIO_Init+0x100>)
 8000da2:	f043 0320 	orr.w	r3, r3, #32
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b37      	ldr	r3, [pc, #220]	@ (8000e88 <MX_GPIO_Init+0x100>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0320 	and.w	r3, r3, #32
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b34      	ldr	r3, [pc, #208]	@ (8000e88 <MX_GPIO_Init+0x100>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a33      	ldr	r2, [pc, #204]	@ (8000e88 <MX_GPIO_Init+0x100>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b31      	ldr	r3, [pc, #196]	@ (8000e88 <MX_GPIO_Init+0x100>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e88 <MX_GPIO_Init+0x100>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8000e88 <MX_GPIO_Init+0x100>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e88 <MX_GPIO_Init+0x100>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dea:	4828      	ldr	r0, [pc, #160]	@ (8000e8c <MX_GPIO_Init+0x104>)
 8000dec:	f008 f86b 	bl	8008ec6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2104      	movs	r1, #4
 8000df4:	4826      	ldr	r0, [pc, #152]	@ (8000e90 <MX_GPIO_Init+0x108>)
 8000df6:	f008 f866 	bl	8008ec6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481f      	ldr	r0, [pc, #124]	@ (8000e8c <MX_GPIO_Init+0x104>)
 8000e0e:	f007 feaf 	bl	8008b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8000e12:	2320      	movs	r3, #32
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	481b      	ldr	r0, [pc, #108]	@ (8000e94 <MX_GPIO_Init+0x10c>)
 8000e26:	f007 fea3 	bl	8008b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000e2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	4812      	ldr	r0, [pc, #72]	@ (8000e8c <MX_GPIO_Init+0x104>)
 8000e44:	f007 fe94 	bl	8008b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480b      	ldr	r0, [pc, #44]	@ (8000e8c <MX_GPIO_Init+0x104>)
 8000e5e:	f007 fe87 	bl	8008b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000e62:	2304      	movs	r3, #4
 8000e64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <MX_GPIO_Init+0x108>)
 8000e7a:	f007 fe79 	bl	8008b70 <HAL_GPIO_Init>

}
 8000e7e:	bf00      	nop
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	40011400 	.word	0x40011400
 8000e94:	40011000 	.word	0x40011000

08000e98 <lcd_wr_xdata>:
 *              ʡ����ռ�.
 * @param       data : Ҫд�������
 * @retval      ��
 */
void lcd_wr_xdata(uint16_t data)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
    LCD_RS(1);
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <lcd_wr_xdata+0x40>)
 8000ea4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ea8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <lcd_wr_xdata+0x40>)
 8000eac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000eb0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(data);
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <lcd_wr_xdata+0x44>)
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	60d3      	str	r3, [r2, #12]
    LCD_WR(0);
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <lcd_wr_xdata+0x40>)
 8000eba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ebe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <lcd_wr_xdata+0x40>)
 8000ec2:	2280      	movs	r2, #128	@ 0x80
 8000ec4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000ec6:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <lcd_wr_xdata+0x40>)
 8000ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ecc:	611a      	str	r2, [r3, #16]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	40011000 	.word	0x40011000
 8000edc:	40010c00 	.word	0x40010c00

08000ee0 <lcd_write_reg>:
 * @param       regno:�Ĵ������/��ַ
 * @param       data:Ҫд�������
 * @retval      ��
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460a      	mov	r2, r1
 8000eea:	80fb      	strh	r3, [r7, #6]
 8000eec:	4613      	mov	r3, r2
 8000eee:	80bb      	strh	r3, [r7, #4]
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8000ef4:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <lcd_write_reg+0x7c>)
 8000ef6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000efa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000efc:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <lcd_write_reg+0x7c>)
 8000efe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f02:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8000f04:	89fb      	ldrh	r3, [r7, #14]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <lcd_write_reg+0x80>)
 8000f0a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8000f0c:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <lcd_write_reg+0x7c>)
 8000f0e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f12:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <lcd_write_reg+0x7c>)
 8000f16:	2280      	movs	r2, #128	@ 0x80
 8000f18:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <lcd_write_reg+0x7c>)
 8000f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f20:	611a      	str	r2, [r3, #16]
}
 8000f22:	bf00      	nop
    lcd_wr_regno(regno);    /* д��Ҫд�ļĴ������ */
    lcd_wr_data(data);      /* д������ */
 8000f24:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <lcd_write_reg+0x7c>)
 8000f26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <lcd_write_reg+0x7c>)
 8000f2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f32:	611a      	str	r2, [r3, #16]
 8000f34:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <lcd_write_reg+0x80>)
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	60d3      	str	r3, [r2, #12]
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <lcd_write_reg+0x7c>)
 8000f3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <lcd_write_reg+0x7c>)
 8000f44:	2280      	movs	r2, #128	@ 0x80
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <lcd_write_reg+0x7c>)
 8000f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f4e:	611a      	str	r2, [r3, #16]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40011000 	.word	0x40011000
 8000f60:	40010c00 	.word	0x40010c00

08000f64 <lcd_opt_delay>:
 * @brief       LCD��ʱ����,�����ڲ�����mdk -O1ʱ���Ż�ʱ��Ҫ���õĵط�
 * @param       t:��ʱ����ֵ
 * @retval      ��
 */
static void lcd_opt_delay(uint32_t i)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    while (i--);
 8000f6c:	bf00      	nop
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	1e5a      	subs	r2, r3, #1
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1fa      	bne.n	8000f6e <lcd_opt_delay+0xa>
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <lcd_rd_data>:
 * @brief       LCD������
 * @param       ��
 * @retval      ��ȡ��������
 */
static uint16_t lcd_rd_data(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* ��ֹ���Ż� */
    
    GPIO_InitTypeDef gpio_init_struct;
    /* LCD_DATA ����ģʽ����, ��������, ׼���������� */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000f8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f8e:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct); 
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4818      	ldr	r0, [pc, #96]	@ (8001004 <lcd_rd_data+0x80>)
 8000fa2:	f007 fde5 	bl	8008b70 <HAL_GPIO_Init>

    LCD_RS(1);              /* RS=1,��ʾ�������� */
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <lcd_rd_data+0x84>)
 8000fa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8000fae:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <lcd_rd_data+0x84>)
 8000fb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fb4:	611a      	str	r2, [r3, #16]
    LCD_RD(0);
 8000fb6:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <lcd_rd_data+0x84>)
 8000fb8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fbc:	611a      	str	r2, [r3, #16]
    lcd_opt_delay(2);
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f7ff ffd0 	bl	8000f64 <lcd_opt_delay>
    ram = LCD_DATA_IN;      /* ��ȡ���� */
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <lcd_rd_data+0x80>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	82fb      	strh	r3, [r7, #22]
    LCD_RD(1);
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <lcd_rd_data+0x84>)
 8000fce:	2240      	movs	r2, #64	@ 0x40
 8000fd0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <lcd_rd_data+0x84>)
 8000fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd8:	611a      	str	r2, [r3, #16]
    
    /* LCD_DATA ����ģʽ����, �������, �ָ����״̬ */
    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8000fda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fde:	607b      	str	r3, [r7, #4]
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Pull = GPIO_PULLUP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4804      	ldr	r0, [pc, #16]	@ (8001004 <lcd_rd_data+0x80>)
 8000ff2:	f007 fdbd 	bl	8008b70 <HAL_GPIO_Init>

    return ram;
 8000ff6:	8afb      	ldrh	r3, [r7, #22]
 8000ff8:	b29b      	uxth	r3, r3
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40010c00 	.word	0x40010c00
 8001008:	40011000 	.word	0x40011000

0800100c <lcd_write_ram_prepare>:
 * @brief       ׼��дGRAM
 * @param       ��
 * @retval      ��
 */
__attribute__((always_inline)) void lcd_write_ram_prepare(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
    lcd_wr_regno(lcddev.wramcmd);
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <lcd_write_ram_prepare+0x48>)
 8001014:	891b      	ldrh	r3, [r3, #8]
 8001016:	80fb      	strh	r3, [r7, #6]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <lcd_write_ram_prepare+0x4c>)
 800101a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800101e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001020:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <lcd_write_ram_prepare+0x4c>)
 8001022:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001026:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <lcd_write_ram_prepare+0x50>)
 800102e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001030:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <lcd_write_ram_prepare+0x4c>)
 8001032:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001036:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <lcd_write_ram_prepare+0x4c>)
 800103a:	2280      	movs	r2, #128	@ 0x80
 800103c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <lcd_write_ram_prepare+0x4c>)
 8001040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001044:	611a      	str	r2, [r3, #16]
}
 8001046:	bf00      	nop
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200000b0 	.word	0x200000b0
 8001058:	40011000 	.word	0x40011000
 800105c:	40010c00 	.word	0x40010c00

08001060 <lcd_set_cursor>:
 * @brief       ���ù��λ��(��RGB����Ч)
 * @param       x,y: ����
 * @retval      ��
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	@ 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	460a      	mov	r2, r1
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	4613      	mov	r3, r2
 800106e:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8001070:	4b44      	ldr	r3, [pc, #272]	@ (8001184 <lcd_set_cursor+0x124>)
 8001072:	889b      	ldrh	r3, [r3, #4]
 8001074:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001078:	4293      	cmp	r3, r2
 800107a:	f040 8189 	bne.w	8001390 <lcd_set_cursor+0x330>
    {
        if (lcddev.dir == 0)    /* ����ģʽ, x������Ҫ�任 */
 800107e:	4b41      	ldr	r3, [pc, #260]	@ (8001184 <lcd_set_cursor+0x124>)
 8001080:	799b      	ldrb	r3, [r3, #6]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f040 8084 	bne.w	8001190 <lcd_set_cursor+0x130>
        {
            x = lcddev.width - 1 - x;
 8001088:	4b3e      	ldr	r3, [pc, #248]	@ (8001184 <lcd_set_cursor+0x124>)
 800108a:	881a      	ldrh	r2, [r3, #0]
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	3b01      	subs	r3, #1
 8001094:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8001096:	4b3b      	ldr	r3, [pc, #236]	@ (8001184 <lcd_set_cursor+0x124>)
 8001098:	895b      	ldrh	r3, [r3, #10]
 800109a:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <lcd_set_cursor+0x128>)
 800109e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80010a2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80010a4:	4b38      	ldr	r3, [pc, #224]	@ (8001188 <lcd_set_cursor+0x128>)
 80010a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010aa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80010ac:	89fb      	ldrh	r3, [r7, #14]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b36      	ldr	r3, [pc, #216]	@ (800118c <lcd_set_cursor+0x12c>)
 80010b2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80010b4:	4b34      	ldr	r3, [pc, #208]	@ (8001188 <lcd_set_cursor+0x128>)
 80010b6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010ba:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80010bc:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <lcd_set_cursor+0x128>)
 80010be:	2280      	movs	r2, #128	@ 0x80
 80010c0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80010c2:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <lcd_set_cursor+0x128>)
 80010c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010c8:	611a      	str	r2, [r3, #16]
}
 80010ca:	bf00      	nop
            lcd_wr_data(0);
 80010cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001188 <lcd_set_cursor+0x128>)
 80010ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <lcd_set_cursor+0x128>)
 80010d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010da:	611a      	str	r2, [r3, #16]
 80010dc:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <lcd_set_cursor+0x12c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <lcd_set_cursor+0x128>)
 80010e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <lcd_set_cursor+0x128>)
 80010ec:	2280      	movs	r2, #128	@ 0x80
 80010ee:	611a      	str	r2, [r3, #16]
 80010f0:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <lcd_set_cursor+0x128>)
 80010f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f6:	611a      	str	r2, [r3, #16]
            lcd_wr_data(0);
 80010f8:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <lcd_set_cursor+0x128>)
 80010fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <lcd_set_cursor+0x128>)
 8001102:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	4b20      	ldr	r3, [pc, #128]	@ (800118c <lcd_set_cursor+0x12c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <lcd_set_cursor+0x128>)
 8001110:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001114:	611a      	str	r2, [r3, #16]
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <lcd_set_cursor+0x128>)
 8001118:	2280      	movs	r2, #128	@ 0x80
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <lcd_set_cursor+0x128>)
 800111e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001122:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x >> 8);
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <lcd_set_cursor+0x128>)
 8001126:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800112a:	611a      	str	r2, [r3, #16]
 800112c:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <lcd_set_cursor+0x128>)
 800112e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001132:	611a      	str	r2, [r3, #16]
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	b29a      	uxth	r2, r3
 800113a:	4b14      	ldr	r3, [pc, #80]	@ (800118c <lcd_set_cursor+0x12c>)
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <lcd_set_cursor+0x128>)
 8001140:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001144:	611a      	str	r2, [r3, #16]
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <lcd_set_cursor+0x128>)
 8001148:	2280      	movs	r2, #128	@ 0x80
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <lcd_set_cursor+0x128>)
 800114e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001152:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <lcd_set_cursor+0x128>)
 8001156:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <lcd_set_cursor+0x128>)
 800115e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	4a09      	ldr	r2, [pc, #36]	@ (800118c <lcd_set_cursor+0x12c>)
 8001168:	b2db      	uxtb	r3, r3
 800116a:	60d3      	str	r3, [r2, #12]
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <lcd_set_cursor+0x128>)
 800116e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <lcd_set_cursor+0x128>)
 8001176:	2280      	movs	r2, #128	@ 0x80
 8001178:	611a      	str	r2, [r3, #16]
 800117a:	4b03      	ldr	r3, [pc, #12]	@ (8001188 <lcd_set_cursor+0x128>)
 800117c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001180:	611a      	str	r2, [r3, #16]
 8001182:	e081      	b.n	8001288 <lcd_set_cursor+0x228>
 8001184:	200000b0 	.word	0x200000b0
 8001188:	40011000 	.word	0x40011000
 800118c:	40010c00 	.word	0x40010c00
        }
        else                    /* ����ģʽ */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8001190:	4b7c      	ldr	r3, [pc, #496]	@ (8001384 <lcd_set_cursor+0x324>)
 8001192:	895b      	ldrh	r3, [r3, #10]
 8001194:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001196:	4b7c      	ldr	r3, [pc, #496]	@ (8001388 <lcd_set_cursor+0x328>)
 8001198:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800119c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800119e:	4b7a      	ldr	r3, [pc, #488]	@ (8001388 <lcd_set_cursor+0x328>)
 80011a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80011a6:	8a3b      	ldrh	r3, [r7, #16]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b78      	ldr	r3, [pc, #480]	@ (800138c <lcd_set_cursor+0x32c>)
 80011ac:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80011ae:	4b76      	ldr	r3, [pc, #472]	@ (8001388 <lcd_set_cursor+0x328>)
 80011b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011b4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80011b6:	4b74      	ldr	r3, [pc, #464]	@ (8001388 <lcd_set_cursor+0x328>)
 80011b8:	2280      	movs	r2, #128	@ 0x80
 80011ba:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80011bc:	4b72      	ldr	r3, [pc, #456]	@ (8001388 <lcd_set_cursor+0x328>)
 80011be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011c2:	611a      	str	r2, [r3, #16]
}
 80011c4:	bf00      	nop
            lcd_wr_data(x >> 8);
 80011c6:	4b70      	ldr	r3, [pc, #448]	@ (8001388 <lcd_set_cursor+0x328>)
 80011c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001388 <lcd_set_cursor+0x328>)
 80011d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011d4:	611a      	str	r2, [r3, #16]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b6b      	ldr	r3, [pc, #428]	@ (800138c <lcd_set_cursor+0x32c>)
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	4b69      	ldr	r3, [pc, #420]	@ (8001388 <lcd_set_cursor+0x328>)
 80011e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011e6:	611a      	str	r2, [r3, #16]
 80011e8:	4b67      	ldr	r3, [pc, #412]	@ (8001388 <lcd_set_cursor+0x328>)
 80011ea:	2280      	movs	r2, #128	@ 0x80
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	4b66      	ldr	r3, [pc, #408]	@ (8001388 <lcd_set_cursor+0x328>)
 80011f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f4:	611a      	str	r2, [r3, #16]
            lcd_wr_data(x & 0XFF);
 80011f6:	4b64      	ldr	r3, [pc, #400]	@ (8001388 <lcd_set_cursor+0x328>)
 80011f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011fc:	611a      	str	r2, [r3, #16]
 80011fe:	4b62      	ldr	r3, [pc, #392]	@ (8001388 <lcd_set_cursor+0x328>)
 8001200:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001204:	611a      	str	r2, [r3, #16]
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4a60      	ldr	r2, [pc, #384]	@ (800138c <lcd_set_cursor+0x32c>)
 800120a:	b2db      	uxtb	r3, r3
 800120c:	60d3      	str	r3, [r2, #12]
 800120e:	4b5e      	ldr	r3, [pc, #376]	@ (8001388 <lcd_set_cursor+0x328>)
 8001210:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	4b5c      	ldr	r3, [pc, #368]	@ (8001388 <lcd_set_cursor+0x328>)
 8001218:	2280      	movs	r2, #128	@ 0x80
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	4b5a      	ldr	r3, [pc, #360]	@ (8001388 <lcd_set_cursor+0x328>)
 800121e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001222:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) >> 8);
 8001224:	4b58      	ldr	r3, [pc, #352]	@ (8001388 <lcd_set_cursor+0x328>)
 8001226:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	4b56      	ldr	r3, [pc, #344]	@ (8001388 <lcd_set_cursor+0x328>)
 800122e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <lcd_set_cursor+0x324>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	3b01      	subs	r3, #1
 800123a:	121a      	asrs	r2, r3, #8
 800123c:	4b53      	ldr	r3, [pc, #332]	@ (800138c <lcd_set_cursor+0x32c>)
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	4b51      	ldr	r3, [pc, #324]	@ (8001388 <lcd_set_cursor+0x328>)
 8001242:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	4b4f      	ldr	r3, [pc, #316]	@ (8001388 <lcd_set_cursor+0x328>)
 800124a:	2280      	movs	r2, #128	@ 0x80
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	4b4e      	ldr	r3, [pc, #312]	@ (8001388 <lcd_set_cursor+0x328>)
 8001250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001254:	611a      	str	r2, [r3, #16]
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8001256:	4b4c      	ldr	r3, [pc, #304]	@ (8001388 <lcd_set_cursor+0x328>)
 8001258:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800125c:	611a      	str	r2, [r3, #16]
 800125e:	4b4a      	ldr	r3, [pc, #296]	@ (8001388 <lcd_set_cursor+0x328>)
 8001260:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	4b47      	ldr	r3, [pc, #284]	@ (8001384 <lcd_set_cursor+0x324>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	3b01      	subs	r3, #1
 800126c:	4a47      	ldr	r2, [pc, #284]	@ (800138c <lcd_set_cursor+0x32c>)
 800126e:	b2db      	uxtb	r3, r3
 8001270:	60d3      	str	r3, [r2, #12]
 8001272:	4b45      	ldr	r3, [pc, #276]	@ (8001388 <lcd_set_cursor+0x328>)
 8001274:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001278:	611a      	str	r2, [r3, #16]
 800127a:	4b43      	ldr	r3, [pc, #268]	@ (8001388 <lcd_set_cursor+0x328>)
 800127c:	2280      	movs	r2, #128	@ 0x80
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <lcd_set_cursor+0x328>)
 8001282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001286:	611a      	str	r2, [r3, #16]
        }

        lcd_wr_regno(lcddev.setycmd);
 8001288:	4b3e      	ldr	r3, [pc, #248]	@ (8001384 <lcd_set_cursor+0x324>)
 800128a:	899b      	ldrh	r3, [r3, #12]
 800128c:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800128e:	4b3e      	ldr	r3, [pc, #248]	@ (8001388 <lcd_set_cursor+0x328>)
 8001290:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001294:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001296:	4b3c      	ldr	r3, [pc, #240]	@ (8001388 <lcd_set_cursor+0x328>)
 8001298:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800129c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800129e:	8a7b      	ldrh	r3, [r7, #18]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b3a      	ldr	r3, [pc, #232]	@ (800138c <lcd_set_cursor+0x32c>)
 80012a4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80012a6:	4b38      	ldr	r3, [pc, #224]	@ (8001388 <lcd_set_cursor+0x328>)
 80012a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012ac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80012ae:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <lcd_set_cursor+0x328>)
 80012b0:	2280      	movs	r2, #128	@ 0x80
 80012b2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80012b4:	4b34      	ldr	r3, [pc, #208]	@ (8001388 <lcd_set_cursor+0x328>)
 80012b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012ba:	611a      	str	r2, [r3, #16]
}
 80012bc:	bf00      	nop
        lcd_wr_data(y >> 8);
 80012be:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <lcd_set_cursor+0x328>)
 80012c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012c4:	611a      	str	r2, [r3, #16]
 80012c6:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <lcd_set_cursor+0x328>)
 80012c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012cc:	611a      	str	r2, [r3, #16]
 80012ce:	88bb      	ldrh	r3, [r7, #4]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <lcd_set_cursor+0x32c>)
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001388 <lcd_set_cursor+0x328>)
 80012da:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <lcd_set_cursor+0x328>)
 80012e2:	2280      	movs	r2, #128	@ 0x80
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	4b28      	ldr	r3, [pc, #160]	@ (8001388 <lcd_set_cursor+0x328>)
 80012e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012ec:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 80012ee:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <lcd_set_cursor+0x328>)
 80012f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <lcd_set_cursor+0x328>)
 80012f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012fc:	611a      	str	r2, [r3, #16]
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	4a22      	ldr	r2, [pc, #136]	@ (800138c <lcd_set_cursor+0x32c>)
 8001302:	b2db      	uxtb	r3, r3
 8001304:	60d3      	str	r3, [r2, #12]
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <lcd_set_cursor+0x328>)
 8001308:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <lcd_set_cursor+0x328>)
 8001310:	2280      	movs	r2, #128	@ 0x80
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <lcd_set_cursor+0x328>)
 8001316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800131a:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <lcd_set_cursor+0x328>)
 800131e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001322:	611a      	str	r2, [r3, #16]
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <lcd_set_cursor+0x328>)
 8001326:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <lcd_set_cursor+0x324>)
 800132e:	885b      	ldrh	r3, [r3, #2]
 8001330:	3b01      	subs	r3, #1
 8001332:	121a      	asrs	r2, r3, #8
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <lcd_set_cursor+0x32c>)
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <lcd_set_cursor+0x328>)
 800133a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <lcd_set_cursor+0x328>)
 8001342:	2280      	movs	r2, #128	@ 0x80
 8001344:	611a      	str	r2, [r3, #16]
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <lcd_set_cursor+0x328>)
 8001348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800134c:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <lcd_set_cursor+0x328>)
 8001350:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <lcd_set_cursor+0x328>)
 8001358:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <lcd_set_cursor+0x324>)
 8001360:	885b      	ldrh	r3, [r3, #2]
 8001362:	3b01      	subs	r3, #1
 8001364:	4a09      	ldr	r2, [pc, #36]	@ (800138c <lcd_set_cursor+0x32c>)
 8001366:	b2db      	uxtb	r3, r3
 8001368:	60d3      	str	r3, [r2, #12]
 800136a:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <lcd_set_cursor+0x328>)
 800136c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <lcd_set_cursor+0x328>)
 8001374:	2280      	movs	r2, #128	@ 0x80
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <lcd_set_cursor+0x328>)
 800137a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800137e:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 8001380:	e176      	b.n	8001670 <lcd_set_cursor+0x610>
 8001382:	bf00      	nop
 8001384:	200000b0 	.word	0x200000b0
 8001388:	40011000 	.word	0x40011000
 800138c:	40010c00 	.word	0x40010c00
    else if (lcddev.id == 0X5510)
 8001390:	4b6a      	ldr	r3, [pc, #424]	@ (800153c <lcd_set_cursor+0x4dc>)
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001398:	4293      	cmp	r3, r2
 800139a:	f040 80d5 	bne.w	8001548 <lcd_set_cursor+0x4e8>
        lcd_wr_regno(lcddev.setxcmd);
 800139e:	4b67      	ldr	r3, [pc, #412]	@ (800153c <lcd_set_cursor+0x4dc>)
 80013a0:	895b      	ldrh	r3, [r3, #10]
 80013a2:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80013a4:	4b66      	ldr	r3, [pc, #408]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80013a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013aa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80013ac:	4b64      	ldr	r3, [pc, #400]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80013ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013b2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80013b4:	8b7b      	ldrh	r3, [r7, #26]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b62      	ldr	r3, [pc, #392]	@ (8001544 <lcd_set_cursor+0x4e4>)
 80013ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80013bc:	4b60      	ldr	r3, [pc, #384]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80013be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80013c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80013c6:	2280      	movs	r2, #128	@ 0x80
 80013c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80013ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80013cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013d0:	611a      	str	r2, [r3, #16]
}
 80013d2:	bf00      	nop
        lcd_wr_data(x >> 8);
 80013d4:	4b5a      	ldr	r3, [pc, #360]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80013d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	4b58      	ldr	r3, [pc, #352]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80013de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	4b56      	ldr	r3, [pc, #344]	@ (8001544 <lcd_set_cursor+0x4e4>)
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	4b54      	ldr	r3, [pc, #336]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80013f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013f4:	611a      	str	r2, [r3, #16]
 80013f6:	4b52      	ldr	r3, [pc, #328]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80013f8:	2280      	movs	r2, #128	@ 0x80
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	4b50      	ldr	r3, [pc, #320]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80013fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001402:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 8001404:	4b4d      	ldr	r3, [pc, #308]	@ (800153c <lcd_set_cursor+0x4dc>)
 8001406:	895b      	ldrh	r3, [r3, #10]
 8001408:	3301      	adds	r3, #1
 800140a:	b29b      	uxth	r3, r3
 800140c:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800140e:	4b4c      	ldr	r3, [pc, #304]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001410:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001414:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001416:	4b4a      	ldr	r3, [pc, #296]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001418:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800141c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800141e:	8b3b      	ldrh	r3, [r7, #24]
 8001420:	b29a      	uxth	r2, r3
 8001422:	4b48      	ldr	r3, [pc, #288]	@ (8001544 <lcd_set_cursor+0x4e4>)
 8001424:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001426:	4b46      	ldr	r3, [pc, #280]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001428:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800142c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800142e:	4b44      	ldr	r3, [pc, #272]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001430:	2280      	movs	r2, #128	@ 0x80
 8001432:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001434:	4b42      	ldr	r3, [pc, #264]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800143a:	611a      	str	r2, [r3, #16]
}
 800143c:	bf00      	nop
        lcd_wr_data(x & 0XFF);
 800143e:	4b40      	ldr	r3, [pc, #256]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001440:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	4b3e      	ldr	r3, [pc, #248]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001448:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	4a3c      	ldr	r2, [pc, #240]	@ (8001544 <lcd_set_cursor+0x4e4>)
 8001452:	b2db      	uxtb	r3, r3
 8001454:	60d3      	str	r3, [r2, #12]
 8001456:	4b3a      	ldr	r3, [pc, #232]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001458:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800145c:	611a      	str	r2, [r3, #16]
 800145e:	4b38      	ldr	r3, [pc, #224]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001460:	2280      	movs	r2, #128	@ 0x80
 8001462:	611a      	str	r2, [r3, #16]
 8001464:	4b36      	ldr	r3, [pc, #216]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800146a:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 800146c:	4b33      	ldr	r3, [pc, #204]	@ (800153c <lcd_set_cursor+0x4dc>)
 800146e:	899b      	ldrh	r3, [r3, #12]
 8001470:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001472:	4b33      	ldr	r3, [pc, #204]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001474:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001478:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800147a:	4b31      	ldr	r3, [pc, #196]	@ (8001540 <lcd_set_cursor+0x4e0>)
 800147c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001480:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001482:	8afb      	ldrh	r3, [r7, #22]
 8001484:	b29a      	uxth	r2, r3
 8001486:	4b2f      	ldr	r3, [pc, #188]	@ (8001544 <lcd_set_cursor+0x4e4>)
 8001488:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800148a:	4b2d      	ldr	r3, [pc, #180]	@ (8001540 <lcd_set_cursor+0x4e0>)
 800148c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001490:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001494:	2280      	movs	r2, #128	@ 0x80
 8001496:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001498:	4b29      	ldr	r3, [pc, #164]	@ (8001540 <lcd_set_cursor+0x4e0>)
 800149a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800149e:	611a      	str	r2, [r3, #16]
}
 80014a0:	bf00      	nop
        lcd_wr_data(y >> 8);
 80014a2:	4b27      	ldr	r3, [pc, #156]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80014a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014a8:	611a      	str	r2, [r3, #16]
 80014aa:	4b25      	ldr	r3, [pc, #148]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80014ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <lcd_set_cursor+0x4e4>)
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80014be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80014c6:	2280      	movs	r2, #128	@ 0x80
 80014c8:	611a      	str	r2, [r3, #16]
 80014ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80014cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d0:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <lcd_set_cursor+0x4dc>)
 80014d4:	899b      	ldrh	r3, [r3, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	b29b      	uxth	r3, r3
 80014da:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80014de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014e2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80014e4:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80014e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014ea:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80014ec:	8abb      	ldrh	r3, [r7, #20]
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <lcd_set_cursor+0x4e4>)
 80014f2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80014f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014fa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80014fc:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <lcd_set_cursor+0x4e0>)
 80014fe:	2280      	movs	r2, #128	@ 0x80
 8001500:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001508:	611a      	str	r2, [r3, #16]
}
 800150a:	bf00      	nop
        lcd_wr_data(y & 0XFF);
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <lcd_set_cursor+0x4e0>)
 800150e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001516:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	88bb      	ldrh	r3, [r7, #4]
 800151e:	4a09      	ldr	r2, [pc, #36]	@ (8001544 <lcd_set_cursor+0x4e4>)
 8001520:	b2db      	uxtb	r3, r3
 8001522:	60d3      	str	r3, [r2, #12]
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001526:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <lcd_set_cursor+0x4e0>)
 800152e:	2280      	movs	r2, #128	@ 0x80
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <lcd_set_cursor+0x4e0>)
 8001534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001538:	611a      	str	r2, [r3, #16]
}
 800153a:	e099      	b.n	8001670 <lcd_set_cursor+0x610>
 800153c:	200000b0 	.word	0x200000b0
 8001540:	40011000 	.word	0x40011000
 8001544:	40010c00 	.word	0x40010c00
        lcd_wr_regno(lcddev.setxcmd);
 8001548:	4b4c      	ldr	r3, [pc, #304]	@ (800167c <lcd_set_cursor+0x61c>)
 800154a:	895b      	ldrh	r3, [r3, #10]
 800154c:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800154e:	4b4c      	ldr	r3, [pc, #304]	@ (8001680 <lcd_set_cursor+0x620>)
 8001550:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001554:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001556:	4b4a      	ldr	r3, [pc, #296]	@ (8001680 <lcd_set_cursor+0x620>)
 8001558:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800155c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800155e:	8bfb      	ldrh	r3, [r7, #30]
 8001560:	b29a      	uxth	r2, r3
 8001562:	4b48      	ldr	r3, [pc, #288]	@ (8001684 <lcd_set_cursor+0x624>)
 8001564:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001566:	4b46      	ldr	r3, [pc, #280]	@ (8001680 <lcd_set_cursor+0x620>)
 8001568:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800156c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800156e:	4b44      	ldr	r3, [pc, #272]	@ (8001680 <lcd_set_cursor+0x620>)
 8001570:	2280      	movs	r2, #128	@ 0x80
 8001572:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001574:	4b42      	ldr	r3, [pc, #264]	@ (8001680 <lcd_set_cursor+0x620>)
 8001576:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800157a:	611a      	str	r2, [r3, #16]
}
 800157c:	bf00      	nop
        lcd_wr_data(x >> 8);
 800157e:	4b40      	ldr	r3, [pc, #256]	@ (8001680 <lcd_set_cursor+0x620>)
 8001580:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001584:	611a      	str	r2, [r3, #16]
 8001586:	4b3e      	ldr	r3, [pc, #248]	@ (8001680 <lcd_set_cursor+0x620>)
 8001588:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <lcd_set_cursor+0x624>)
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	4b39      	ldr	r3, [pc, #228]	@ (8001680 <lcd_set_cursor+0x620>)
 800159a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	4b37      	ldr	r3, [pc, #220]	@ (8001680 <lcd_set_cursor+0x620>)
 80015a2:	2280      	movs	r2, #128	@ 0x80
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <lcd_set_cursor+0x620>)
 80015a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ac:	611a      	str	r2, [r3, #16]
        lcd_wr_data(x & 0XFF);
 80015ae:	4b34      	ldr	r3, [pc, #208]	@ (8001680 <lcd_set_cursor+0x620>)
 80015b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <lcd_set_cursor+0x620>)
 80015b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015bc:	611a      	str	r2, [r3, #16]
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	4a30      	ldr	r2, [pc, #192]	@ (8001684 <lcd_set_cursor+0x624>)
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	60d3      	str	r3, [r2, #12]
 80015c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <lcd_set_cursor+0x620>)
 80015c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001680 <lcd_set_cursor+0x620>)
 80015d0:	2280      	movs	r2, #128	@ 0x80
 80015d2:	611a      	str	r2, [r3, #16]
 80015d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <lcd_set_cursor+0x620>)
 80015d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015da:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 80015dc:	4b27      	ldr	r3, [pc, #156]	@ (800167c <lcd_set_cursor+0x61c>)
 80015de:	899b      	ldrh	r3, [r3, #12]
 80015e0:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80015e2:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <lcd_set_cursor+0x620>)
 80015e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015e8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80015ea:	4b25      	ldr	r3, [pc, #148]	@ (8001680 <lcd_set_cursor+0x620>)
 80015ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015f0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80015f2:	8bbb      	ldrh	r3, [r7, #28]
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <lcd_set_cursor+0x624>)
 80015f8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80015fa:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <lcd_set_cursor+0x620>)
 80015fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001600:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001602:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <lcd_set_cursor+0x620>)
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <lcd_set_cursor+0x620>)
 800160a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800160e:	611a      	str	r2, [r3, #16]
}
 8001610:	bf00      	nop
        lcd_wr_data(y >> 8);
 8001612:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <lcd_set_cursor+0x620>)
 8001614:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <lcd_set_cursor+0x620>)
 800161c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001620:	611a      	str	r2, [r3, #16]
 8001622:	88bb      	ldrh	r3, [r7, #4]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <lcd_set_cursor+0x624>)
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <lcd_set_cursor+0x620>)
 800162e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <lcd_set_cursor+0x620>)
 8001636:	2280      	movs	r2, #128	@ 0x80
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <lcd_set_cursor+0x620>)
 800163c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001640:	611a      	str	r2, [r3, #16]
        lcd_wr_data(y & 0XFF);
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <lcd_set_cursor+0x620>)
 8001644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <lcd_set_cursor+0x620>)
 800164c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001650:	611a      	str	r2, [r3, #16]
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	4a0b      	ldr	r2, [pc, #44]	@ (8001684 <lcd_set_cursor+0x624>)
 8001656:	b2db      	uxtb	r3, r3
 8001658:	60d3      	str	r3, [r2, #12]
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <lcd_set_cursor+0x620>)
 800165c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <lcd_set_cursor+0x620>)
 8001664:	2280      	movs	r2, #128	@ 0x80
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <lcd_set_cursor+0x620>)
 800166a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800166e:	611a      	str	r2, [r3, #16]
}
 8001670:	bf00      	nop
 8001672:	3724      	adds	r7, #36	@ 0x24
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200000b0 	.word	0x200000b0
 8001680:	40011000 	.word	0x40011000
 8001684:	40010c00 	.word	0x40010c00

08001688 <lcd_scan_dir>:
 *
 * @param       dir:0~7,����8������(���嶨���lcd.h)
 * @retval      ��
 */
void lcd_scan_dir(uint8_t dir)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t dirreg = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t temp;

    /* ����ʱ����1963���ı�ɨ�跽��, ����IC�ı�ɨ�跽������ʱ1963�ı䷽��, ����IC���ı�ɨ�跽�� */
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 800169a:	4b5f      	ldr	r3, [pc, #380]	@ (8001818 <lcd_scan_dir+0x190>)
 800169c:	799b      	ldrb	r3, [r3, #6]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d105      	bne.n	80016ae <lcd_scan_dir+0x26>
 80016a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001818 <lcd_scan_dir+0x190>)
 80016a4:	889b      	ldrh	r3, [r3, #4]
 80016a6:	f641 1263 	movw	r2, #6499	@ 0x1963
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d109      	bne.n	80016c2 <lcd_scan_dir+0x3a>
 80016ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001818 <lcd_scan_dir+0x190>)
 80016b0:	799b      	ldrb	r3, [r3, #6]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d134      	bne.n	8001720 <lcd_scan_dir+0x98>
 80016b6:	4b58      	ldr	r3, [pc, #352]	@ (8001818 <lcd_scan_dir+0x190>)
 80016b8:	889b      	ldrh	r3, [r3, #4]
 80016ba:	f641 1263 	movw	r2, #6499	@ 0x1963
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12e      	bne.n	8001720 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* ����ת�� */
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b07      	cmp	r3, #7
 80016c6:	d82b      	bhi.n	8001720 <lcd_scan_dir+0x98>
 80016c8:	a201      	add	r2, pc, #4	@ (adr r2, 80016d0 <lcd_scan_dir+0x48>)
 80016ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ce:	bf00      	nop
 80016d0:	080016f1 	.word	0x080016f1
 80016d4:	080016f7 	.word	0x080016f7
 80016d8:	080016fd 	.word	0x080016fd
 80016dc:	08001703 	.word	0x08001703
 80016e0:	08001709 	.word	0x08001709
 80016e4:	0800170f 	.word	0x0800170f
 80016e8:	08001715 	.word	0x08001715
 80016ec:	0800171b 	.word	0x0800171b
        {
            case 0:
                dir = 6;
 80016f0:	2306      	movs	r3, #6
 80016f2:	71fb      	strb	r3, [r7, #7]
                break;
 80016f4:	e014      	b.n	8001720 <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 80016f6:	2307      	movs	r3, #7
 80016f8:	71fb      	strb	r3, [r7, #7]
                break;
 80016fa:	e011      	b.n	8001720 <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 80016fc:	2304      	movs	r3, #4
 80016fe:	71fb      	strb	r3, [r7, #7]
                break;
 8001700:	e00e      	b.n	8001720 <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 8001702:	2305      	movs	r3, #5
 8001704:	71fb      	strb	r3, [r7, #7]
                break;
 8001706:	e00b      	b.n	8001720 <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 8001708:	2301      	movs	r3, #1
 800170a:	71fb      	strb	r3, [r7, #7]
                break;
 800170c:	e008      	b.n	8001720 <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	71fb      	strb	r3, [r7, #7]
                break;
 8001712:	e005      	b.n	8001720 <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 8001714:	2303      	movs	r3, #3
 8001716:	71fb      	strb	r3, [r7, #7]
                break;
 8001718:	e002      	b.n	8001720 <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 800171a:	2302      	movs	r3, #2
 800171c:	71fb      	strb	r3, [r7, #7]
                break;
 800171e:	bf00      	nop
        }
    }

    /* ����ɨ�跽ʽ ���� 0X36/0X3600 �Ĵ��� bit 5,6,7 λ��ֵ */
    switch (dir)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	2b07      	cmp	r3, #7
 8001724:	d835      	bhi.n	8001792 <lcd_scan_dir+0x10a>
 8001726:	a201      	add	r2, pc, #4	@ (adr r2, 800172c <lcd_scan_dir+0xa4>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	08001793 	.word	0x08001793
 8001730:	0800174d 	.word	0x0800174d
 8001734:	08001757 	.word	0x08001757
 8001738:	08001761 	.word	0x08001761
 800173c:	0800176b 	.word	0x0800176b
 8001740:	08001775 	.word	0x08001775
 8001744:	0800177f 	.word	0x0800177f
 8001748:	08001789 	.word	0x08001789
        case L2R_U2D:/* ������,���ϵ��� */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* ������,���µ��� */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 800174c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800174e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001752:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001754:	e01d      	b.n	8001792 <lcd_scan_dir+0x10a>

        case R2L_U2D:/* ���ҵ���,���ϵ��� */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8001756:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800175c:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 800175e:	e018      	b.n	8001792 <lcd_scan_dir+0x10a>

        case R2L_D2U:/* ���ҵ���,���µ��� */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001760:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001762:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001766:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001768:	e013      	b.n	8001792 <lcd_scan_dir+0x10a>

        case U2D_L2R:/* ���ϵ���,������ */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800176a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800176c:	f043 0320 	orr.w	r3, r3, #32
 8001770:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001772:	e00e      	b.n	8001792 <lcd_scan_dir+0x10a>

        case U2D_R2L:/* ���ϵ���,���ҵ��� */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001774:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001776:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800177a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 800177c:	e009      	b.n	8001792 <lcd_scan_dir+0x10a>

        case D2U_L2R:/* ���µ���,������ */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800177e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001780:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001784:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001786:	e004      	b.n	8001792 <lcd_scan_dir+0x10a>

        case D2U_R2L:/* ���µ���,���ҵ��� */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001788:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800178a:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800178e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            break;
 8001790:	bf00      	nop
    }

    dirreg = 0X36;  /* �Ծ��󲿷�����IC, ��0X36�Ĵ������� */
 8001792:	2336      	movs	r3, #54	@ 0x36
 8001794:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (lcddev.id == 0X5510)
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <lcd_scan_dir+0x190>)
 8001798:	889b      	ldrh	r3, [r3, #4]
 800179a:	f245 5210 	movw	r2, #21776	@ 0x5510
 800179e:	4293      	cmp	r3, r2
 80017a0:	d102      	bne.n	80017a8 <lcd_scan_dir+0x120>
    {
        dirreg = 0X3600;    /* ����5510, ����������ic�ļĴ����в��� */
 80017a2:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 80017a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* 9341 & 7789 & 7796 Ҫ����BGRλ */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <lcd_scan_dir+0x190>)
 80017aa:	889b      	ldrh	r3, [r3, #4]
 80017ac:	f249 3241 	movw	r2, #37697	@ 0x9341
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d00b      	beq.n	80017cc <lcd_scan_dir+0x144>
 80017b4:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <lcd_scan_dir+0x190>)
 80017b6:	889b      	ldrh	r3, [r3, #4]
 80017b8:	f247 7289 	movw	r2, #30601	@ 0x7789
 80017bc:	4293      	cmp	r3, r2
 80017be:	d005      	beq.n	80017cc <lcd_scan_dir+0x144>
 80017c0:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <lcd_scan_dir+0x190>)
 80017c2:	889b      	ldrh	r3, [r3, #4]
 80017c4:	f247 7296 	movw	r2, #30614	@ 0x7796
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d103      	bne.n	80017d4 <lcd_scan_dir+0x14c>
    {
        regval |= 0X08;
 80017cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017ce:	f043 0308 	orr.w	r3, r3, #8
 80017d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    lcd_write_reg(dirreg, regval);
 80017d4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80017d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fb80 	bl	8000ee0 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963�������괦�� */
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <lcd_scan_dir+0x190>)
 80017e2:	889b      	ldrh	r3, [r3, #4]
 80017e4:	f641 1263 	movw	r2, #6499	@ 0x1963
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d027      	beq.n	800183c <lcd_scan_dir+0x1b4>
    {
        if (regval & 0X20)
 80017ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d012      	beq.n	800181c <lcd_scan_dir+0x194>
        {
            if (lcddev.width < lcddev.height)   /* ����X,Y */
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <lcd_scan_dir+0x190>)
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <lcd_scan_dir+0x190>)
 80017fc:	885b      	ldrh	r3, [r3, #2]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d21c      	bcs.n	800183c <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 8001802:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <lcd_scan_dir+0x190>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <lcd_scan_dir+0x190>)
 800180a:	885a      	ldrh	r2, [r3, #2]
 800180c:	4b02      	ldr	r3, [pc, #8]	@ (8001818 <lcd_scan_dir+0x190>)
 800180e:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8001810:	4a01      	ldr	r2, [pc, #4]	@ (8001818 <lcd_scan_dir+0x190>)
 8001812:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001814:	8053      	strh	r3, [r2, #2]
 8001816:	e011      	b.n	800183c <lcd_scan_dir+0x1b4>
 8001818:	200000b0 	.word	0x200000b0
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* ����X,Y */
 800181c:	4b9c      	ldr	r3, [pc, #624]	@ (8001a90 <lcd_scan_dir+0x408>)
 800181e:	881a      	ldrh	r2, [r3, #0]
 8001820:	4b9b      	ldr	r3, [pc, #620]	@ (8001a90 <lcd_scan_dir+0x408>)
 8001822:	885b      	ldrh	r3, [r3, #2]
 8001824:	429a      	cmp	r2, r3
 8001826:	d909      	bls.n	800183c <lcd_scan_dir+0x1b4>
            {
                temp = lcddev.width;
 8001828:	4b99      	ldr	r3, [pc, #612]	@ (8001a90 <lcd_scan_dir+0x408>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	847b      	strh	r3, [r7, #34]	@ 0x22
                lcddev.width = lcddev.height;
 800182e:	4b98      	ldr	r3, [pc, #608]	@ (8001a90 <lcd_scan_dir+0x408>)
 8001830:	885a      	ldrh	r2, [r3, #2]
 8001832:	4b97      	ldr	r3, [pc, #604]	@ (8001a90 <lcd_scan_dir+0x408>)
 8001834:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8001836:	4a96      	ldr	r2, [pc, #600]	@ (8001a90 <lcd_scan_dir+0x408>)
 8001838:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800183a:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* ������ʾ����(����)��С */
    if (lcddev.id == 0X5510)
 800183c:	4b94      	ldr	r3, [pc, #592]	@ (8001a90 <lcd_scan_dir+0x408>)
 800183e:	889b      	ldrh	r3, [r3, #4]
 8001840:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001844:	4293      	cmp	r3, r2
 8001846:	f040 81af 	bne.w	8001ba8 <lcd_scan_dir+0x520>
    {
        lcd_wr_regno(lcddev.setxcmd);
 800184a:	4b91      	ldr	r3, [pc, #580]	@ (8001a90 <lcd_scan_dir+0x408>)
 800184c:	895b      	ldrh	r3, [r3, #10]
 800184e:	83bb      	strh	r3, [r7, #28]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001850:	4b90      	ldr	r3, [pc, #576]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001852:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001856:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001858:	4b8e      	ldr	r3, [pc, #568]	@ (8001a94 <lcd_scan_dir+0x40c>)
 800185a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800185e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001860:	8bbb      	ldrh	r3, [r7, #28]
 8001862:	b29a      	uxth	r2, r3
 8001864:	4b8c      	ldr	r3, [pc, #560]	@ (8001a98 <lcd_scan_dir+0x410>)
 8001866:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001868:	4b8a      	ldr	r3, [pc, #552]	@ (8001a94 <lcd_scan_dir+0x40c>)
 800186a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800186e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001870:	4b88      	ldr	r3, [pc, #544]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001872:	2280      	movs	r2, #128	@ 0x80
 8001874:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001876:	4b87      	ldr	r3, [pc, #540]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800187c:	611a      	str	r2, [r3, #16]
}
 800187e:	bf00      	nop
        lcd_wr_data(0);
 8001880:	4b84      	ldr	r3, [pc, #528]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001882:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	4b82      	ldr	r3, [pc, #520]	@ (8001a94 <lcd_scan_dir+0x40c>)
 800188a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	4b81      	ldr	r3, [pc, #516]	@ (8001a98 <lcd_scan_dir+0x410>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	4b7f      	ldr	r3, [pc, #508]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001898:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800189c:	611a      	str	r2, [r3, #16]
 800189e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80018a0:	2280      	movs	r2, #128	@ 0x80
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	4b7b      	ldr	r3, [pc, #492]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80018a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018aa:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 1);
 80018ac:	4b78      	ldr	r3, [pc, #480]	@ (8001a90 <lcd_scan_dir+0x408>)
 80018ae:	895b      	ldrh	r3, [r3, #10]
 80018b0:	3301      	adds	r3, #1
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	837b      	strh	r3, [r7, #26]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80018b6:	4b77      	ldr	r3, [pc, #476]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80018b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018bc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80018be:	4b75      	ldr	r3, [pc, #468]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80018c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018c4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80018c6:	8b7b      	ldrh	r3, [r7, #26]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	4b73      	ldr	r3, [pc, #460]	@ (8001a98 <lcd_scan_dir+0x410>)
 80018cc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80018ce:	4b71      	ldr	r3, [pc, #452]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80018d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018d4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80018d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80018d8:	2280      	movs	r2, #128	@ 0x80
 80018da:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80018dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80018de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e2:	611a      	str	r2, [r3, #16]
}
 80018e4:	bf00      	nop
        lcd_wr_data(0);
 80018e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80018e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	4b69      	ldr	r3, [pc, #420]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80018f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	4b68      	ldr	r3, [pc, #416]	@ (8001a98 <lcd_scan_dir+0x410>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	4b65      	ldr	r3, [pc, #404]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80018fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	4b63      	ldr	r3, [pc, #396]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	611a      	str	r2, [r3, #16]
 800190a:	4b62      	ldr	r3, [pc, #392]	@ (8001a94 <lcd_scan_dir+0x40c>)
 800190c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001910:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 2);
 8001912:	4b5f      	ldr	r3, [pc, #380]	@ (8001a90 <lcd_scan_dir+0x408>)
 8001914:	895b      	ldrh	r3, [r3, #10]
 8001916:	3302      	adds	r3, #2
 8001918:	b29b      	uxth	r3, r3
 800191a:	833b      	strh	r3, [r7, #24]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800191c:	4b5d      	ldr	r3, [pc, #372]	@ (8001a94 <lcd_scan_dir+0x40c>)
 800191e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001922:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001924:	4b5b      	ldr	r3, [pc, #364]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001926:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800192a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800192c:	8b3b      	ldrh	r3, [r7, #24]
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b59      	ldr	r3, [pc, #356]	@ (8001a98 <lcd_scan_dir+0x410>)
 8001932:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001934:	4b57      	ldr	r3, [pc, #348]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001936:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800193a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800193c:	4b55      	ldr	r3, [pc, #340]	@ (8001a94 <lcd_scan_dir+0x40c>)
 800193e:	2280      	movs	r2, #128	@ 0x80
 8001940:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001942:	4b54      	ldr	r3, [pc, #336]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001948:	611a      	str	r2, [r3, #16]
}
 800194a:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) >> 8);
 800194c:	4b51      	ldr	r3, [pc, #324]	@ (8001a94 <lcd_scan_dir+0x40c>)
 800194e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001952:	611a      	str	r2, [r3, #16]
 8001954:	4b4f      	ldr	r3, [pc, #316]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001956:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a90 <lcd_scan_dir+0x408>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	3b01      	subs	r3, #1
 8001962:	121a      	asrs	r2, r3, #8
 8001964:	4b4c      	ldr	r3, [pc, #304]	@ (8001a98 <lcd_scan_dir+0x410>)
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	4b4a      	ldr	r3, [pc, #296]	@ (8001a94 <lcd_scan_dir+0x40c>)
 800196a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	4b48      	ldr	r3, [pc, #288]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001972:	2280      	movs	r2, #128	@ 0x80
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	4b47      	ldr	r3, [pc, #284]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800197c:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setxcmd + 3);
 800197e:	4b44      	ldr	r3, [pc, #272]	@ (8001a90 <lcd_scan_dir+0x408>)
 8001980:	895b      	ldrh	r3, [r3, #10]
 8001982:	3303      	adds	r3, #3
 8001984:	b29b      	uxth	r3, r3
 8001986:	82fb      	strh	r3, [r7, #22]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001988:	4b42      	ldr	r3, [pc, #264]	@ (8001a94 <lcd_scan_dir+0x40c>)
 800198a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800198e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001990:	4b40      	ldr	r3, [pc, #256]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001992:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001996:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001998:	8afb      	ldrh	r3, [r7, #22]
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a98 <lcd_scan_dir+0x410>)
 800199e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80019a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80019a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019a6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80019a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80019aa:	2280      	movs	r2, #128	@ 0x80
 80019ac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80019ae:	4b39      	ldr	r3, [pc, #228]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80019b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b4:	611a      	str	r2, [r3, #16]
}
 80019b6:	bf00      	nop
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 80019b8:	4b36      	ldr	r3, [pc, #216]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80019ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	4b34      	ldr	r3, [pc, #208]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80019c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	4b31      	ldr	r3, [pc, #196]	@ (8001a90 <lcd_scan_dir+0x408>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	4a32      	ldr	r2, [pc, #200]	@ (8001a98 <lcd_scan_dir+0x410>)
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	60d3      	str	r3, [r2, #12]
 80019d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80019d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019da:	611a      	str	r2, [r3, #16]
 80019dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80019de:	2280      	movs	r2, #128	@ 0x80
 80019e0:	611a      	str	r2, [r3, #16]
 80019e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80019e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e8:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 80019ea:	4b29      	ldr	r3, [pc, #164]	@ (8001a90 <lcd_scan_dir+0x408>)
 80019ec:	899b      	ldrh	r3, [r3, #12]
 80019ee:	82bb      	strh	r3, [r7, #20]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80019f0:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80019f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019f6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80019f8:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <lcd_scan_dir+0x40c>)
 80019fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019fe:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001a00:	8abb      	ldrh	r3, [r7, #20]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <lcd_scan_dir+0x410>)
 8001a06:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001a08:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a0a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a0e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001a10:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a12:	2280      	movs	r2, #128	@ 0x80
 8001a14:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001a16:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a1c:	611a      	str	r2, [r3, #16]
}
 8001a1e:	bf00      	nop
        lcd_wr_data(0);
 8001a20:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a26:	611a      	str	r2, [r3, #16]
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a2e:	611a      	str	r2, [r3, #16]
 8001a30:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <lcd_scan_dir+0x410>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a40:	2280      	movs	r2, #128	@ 0x80
 8001a42:	611a      	str	r2, [r3, #16]
 8001a44:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a4a:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 1);
 8001a4c:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <lcd_scan_dir+0x408>)
 8001a4e:	899b      	ldrh	r3, [r3, #12]
 8001a50:	3301      	adds	r3, #1
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	827b      	strh	r3, [r7, #18]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001a56:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a5c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a64:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001a66:	8a7b      	ldrh	r3, [r7, #18]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <lcd_scan_dir+0x410>)
 8001a6c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a70:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a74:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001a76:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a78:	2280      	movs	r2, #128	@ 0x80
 8001a7a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a82:	611a      	str	r2, [r3, #16]
}
 8001a84:	bf00      	nop
        lcd_wr_data(0);
 8001a86:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <lcd_scan_dir+0x40c>)
 8001a88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a8c:	611a      	str	r2, [r3, #16]
 8001a8e:	e005      	b.n	8001a9c <lcd_scan_dir+0x414>
 8001a90:	200000b0 	.word	0x200000b0
 8001a94:	40011000 	.word	0x40011000
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001a9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aa2:	611a      	str	r2, [r3, #16]
 8001aa4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba0 <lcd_scan_dir+0x518>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001aac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ab0:	611a      	str	r2, [r3, #16]
 8001ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001ab4:	2280      	movs	r2, #128	@ 0x80
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	4b38      	ldr	r3, [pc, #224]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001aba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001abe:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 2);
 8001ac0:	4b38      	ldr	r3, [pc, #224]	@ (8001ba4 <lcd_scan_dir+0x51c>)
 8001ac2:	899b      	ldrh	r3, [r3, #12]
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	823b      	strh	r3, [r7, #16]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001aca:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001acc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ad0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001ad2:	4b32      	ldr	r3, [pc, #200]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001ad4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ad8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001ada:	8a3b      	ldrh	r3, [r7, #16]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b30      	ldr	r3, [pc, #192]	@ (8001ba0 <lcd_scan_dir+0x518>)
 8001ae0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001ae4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ae8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001aea:	4b2c      	ldr	r3, [pc, #176]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001aec:	2280      	movs	r2, #128	@ 0x80
 8001aee:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001af0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001af2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001af6:	611a      	str	r2, [r3, #16]
}
 8001af8:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) >> 8);
 8001afa:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001afc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b00:	611a      	str	r2, [r3, #16]
 8001b02:	4b26      	ldr	r3, [pc, #152]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b08:	611a      	str	r2, [r3, #16]
 8001b0a:	4b26      	ldr	r3, [pc, #152]	@ (8001ba4 <lcd_scan_dir+0x51c>)
 8001b0c:	885b      	ldrh	r3, [r3, #2]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	121a      	asrs	r2, r3, #8
 8001b12:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <lcd_scan_dir+0x518>)
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b18:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b1c:	611a      	str	r2, [r3, #16]
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b2a:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd + 3);
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <lcd_scan_dir+0x51c>)
 8001b2e:	899b      	ldrh	r3, [r3, #12]
 8001b30:	3303      	adds	r3, #3
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b3c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b44:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001b46:	89fb      	ldrh	r3, [r7, #14]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <lcd_scan_dir+0x518>)
 8001b4c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001b4e:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b50:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b54:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001b56:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b58:	2280      	movs	r2, #128	@ 0x80
 8001b5a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b62:	611a      	str	r2, [r3, #16]
}
 8001b64:	bf00      	nop
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8001b66:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b6c:	611a      	str	r2, [r3, #16]
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <lcd_scan_dir+0x51c>)
 8001b78:	885b      	ldrh	r3, [r3, #2]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	4a08      	ldr	r2, [pc, #32]	@ (8001ba0 <lcd_scan_dir+0x518>)
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	60d3      	str	r3, [r2, #12]
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b84:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	611a      	str	r2, [r3, #16]
 8001b90:	4b02      	ldr	r3, [pc, #8]	@ (8001b9c <lcd_scan_dir+0x514>)
 8001b92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b96:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 8001b98:	e0f8      	b.n	8001d8c <lcd_scan_dir+0x704>
 8001b9a:	bf00      	nop
 8001b9c:	40011000 	.word	0x40011000
 8001ba0:	40010c00 	.word	0x40010c00
 8001ba4:	200000b0 	.word	0x200000b0
        lcd_wr_regno(lcddev.setxcmd);
 8001ba8:	4b7a      	ldr	r3, [pc, #488]	@ (8001d94 <lcd_scan_dir+0x70c>)
 8001baa:	895b      	ldrh	r3, [r3, #10]
 8001bac:	843b      	strh	r3, [r7, #32]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001bae:	4b7a      	ldr	r3, [pc, #488]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001bb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bb4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001bb6:	4b78      	ldr	r3, [pc, #480]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001bb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bbc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001bbe:	8c3b      	ldrh	r3, [r7, #32]
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b76      	ldr	r3, [pc, #472]	@ (8001d9c <lcd_scan_dir+0x714>)
 8001bc4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001bc6:	4b74      	ldr	r3, [pc, #464]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001bc8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001bcc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001bce:	4b72      	ldr	r3, [pc, #456]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001bd0:	2280      	movs	r2, #128	@ 0x80
 8001bd2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001bd4:	4b70      	ldr	r3, [pc, #448]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bda:	611a      	str	r2, [r3, #16]
}
 8001bdc:	bf00      	nop
        lcd_wr_data(0);
 8001bde:	4b6e      	ldr	r3, [pc, #440]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001be0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001be4:	611a      	str	r2, [r3, #16]
 8001be6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001be8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bec:	611a      	str	r2, [r3, #16]
 8001bee:	4b6b      	ldr	r3, [pc, #428]	@ (8001d9c <lcd_scan_dir+0x714>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	4b68      	ldr	r3, [pc, #416]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001bf6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	4b66      	ldr	r3, [pc, #408]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001bfe:	2280      	movs	r2, #128	@ 0x80
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	4b65      	ldr	r3, [pc, #404]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c08:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 8001c0a:	4b63      	ldr	r3, [pc, #396]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	4b61      	ldr	r3, [pc, #388]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c18:	611a      	str	r2, [r3, #16]
 8001c1a:	4b60      	ldr	r3, [pc, #384]	@ (8001d9c <lcd_scan_dir+0x714>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	4b5d      	ldr	r3, [pc, #372]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c26:	611a      	str	r2, [r3, #16]
 8001c28:	4b5b      	ldr	r3, [pc, #364]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c2a:	2280      	movs	r2, #128	@ 0x80
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	4b5a      	ldr	r3, [pc, #360]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c34:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) >> 8);
 8001c36:	4b58      	ldr	r3, [pc, #352]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c3c:	611a      	str	r2, [r3, #16]
 8001c3e:	4b56      	ldr	r3, [pc, #344]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c44:	611a      	str	r2, [r3, #16]
 8001c46:	4b53      	ldr	r3, [pc, #332]	@ (8001d94 <lcd_scan_dir+0x70c>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	121a      	asrs	r2, r3, #8
 8001c4e:	4b53      	ldr	r3, [pc, #332]	@ (8001d9c <lcd_scan_dir+0x714>)
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	4b51      	ldr	r3, [pc, #324]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c5c:	2280      	movs	r2, #128	@ 0x80
 8001c5e:	611a      	str	r2, [r3, #16]
 8001c60:	4b4d      	ldr	r3, [pc, #308]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c66:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8001c68:	4b4b      	ldr	r3, [pc, #300]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	4b49      	ldr	r3, [pc, #292]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c76:	611a      	str	r2, [r3, #16]
 8001c78:	4b46      	ldr	r3, [pc, #280]	@ (8001d94 <lcd_scan_dir+0x70c>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	4a47      	ldr	r2, [pc, #284]	@ (8001d9c <lcd_scan_dir+0x714>)
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	60d3      	str	r3, [r2, #12]
 8001c84:	4b44      	ldr	r3, [pc, #272]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c86:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c8a:	611a      	str	r2, [r3, #16]
 8001c8c:	4b42      	ldr	r3, [pc, #264]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c8e:	2280      	movs	r2, #128	@ 0x80
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	4b41      	ldr	r3, [pc, #260]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c98:	611a      	str	r2, [r3, #16]
        lcd_wr_regno(lcddev.setycmd);
 8001c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d94 <lcd_scan_dir+0x70c>)
 8001c9c:	899b      	ldrh	r3, [r3, #12]
 8001c9e:	83fb      	strh	r3, [r7, #30]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001ca2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ca6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001caa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cae:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001cb0:	8bfb      	ldrh	r3, [r7, #30]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b39      	ldr	r3, [pc, #228]	@ (8001d9c <lcd_scan_dir+0x714>)
 8001cb6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001cb8:	4b37      	ldr	r3, [pc, #220]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001cba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001cbe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001cc0:	4b35      	ldr	r3, [pc, #212]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001cc2:	2280      	movs	r2, #128	@ 0x80
 8001cc4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001cc6:	4b34      	ldr	r3, [pc, #208]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ccc:	611a      	str	r2, [r3, #16]
}
 8001cce:	bf00      	nop
        lcd_wr_data(0);
 8001cd0:	4b31      	ldr	r3, [pc, #196]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001cd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd6:	611a      	str	r2, [r3, #16]
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001cda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cde:	611a      	str	r2, [r3, #16]
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d9c <lcd_scan_dir+0x714>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001ce8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001cf0:	2280      	movs	r2, #128	@ 0x80
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001cf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cfa:	611a      	str	r2, [r3, #16]
        lcd_wr_data(0);
 8001cfc:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001cfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d02:	611a      	str	r2, [r3, #16]
 8001d04:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d0a:	611a      	str	r2, [r3, #16]
 8001d0c:	4b23      	ldr	r3, [pc, #140]	@ (8001d9c <lcd_scan_dir+0x714>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d14:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d1c:	2280      	movs	r2, #128	@ 0x80
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d26:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) >> 8);
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d2e:	611a      	str	r2, [r3, #16]
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <lcd_scan_dir+0x70c>)
 8001d3a:	885b      	ldrh	r3, [r3, #2]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	121a      	asrs	r2, r3, #8
 8001d40:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <lcd_scan_dir+0x714>)
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d4a:	611a      	str	r2, [r3, #16]
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d4e:	2280      	movs	r2, #128	@ 0x80
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d58:	611a      	str	r2, [r3, #16]
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d60:	611a      	str	r2, [r3, #16]
 8001d62:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <lcd_scan_dir+0x70c>)
 8001d6c:	885b      	ldrh	r3, [r3, #2]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <lcd_scan_dir+0x714>)
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	60d3      	str	r3, [r2, #12]
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d78:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d7c:	611a      	str	r2, [r3, #16]
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d80:	2280      	movs	r2, #128	@ 0x80
 8001d82:	611a      	str	r2, [r3, #16]
 8001d84:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <lcd_scan_dir+0x710>)
 8001d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d8a:	611a      	str	r2, [r3, #16]
}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	@ 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200000b0 	.word	0x200000b0
 8001d98:	40011000 	.word	0x40011000
 8001d9c:	40010c00 	.word	0x40010c00

08001da0 <lcd_draw_point>:
 * @param       x,y: ����
 * @param       color: �����ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	603a      	str	r2, [r7, #0]
 8001daa:	80fb      	strh	r3, [r7, #6]
 8001dac:	460b      	mov	r3, r1
 8001dae:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* ���ù��λ�� */
 8001db0:	88ba      	ldrh	r2, [r7, #4]
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f952 	bl	8001060 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e28 <lcd_draw_point+0x88>)
 8001dbe:	891b      	ldrh	r3, [r3, #8]
 8001dc0:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <lcd_draw_point+0x8c>)
 8001dc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001dc8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001dca:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <lcd_draw_point+0x8c>)
 8001dcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dd0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <lcd_draw_point+0x90>)
 8001dd8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001dda:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <lcd_draw_point+0x8c>)
 8001ddc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001de0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001de2:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <lcd_draw_point+0x8c>)
 8001de4:	2280      	movs	r2, #128	@ 0x80
 8001de6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001de8:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <lcd_draw_point+0x8c>)
 8001dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dee:	611a      	str	r2, [r3, #16]
}
 8001df0:	bf00      	nop
}
 8001df2:	bf00      	nop
    lcd_write_ram_prepare();    /* ��ʼд��GRAM */
    lcd_wr_data(color);
 8001df4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <lcd_draw_point+0x8c>)
 8001df6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <lcd_draw_point+0x8c>)
 8001dfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e02:	611a      	str	r2, [r3, #16]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <lcd_draw_point+0x90>)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	60d3      	str	r3, [r2, #12]
 8001e0a:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <lcd_draw_point+0x8c>)
 8001e0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <lcd_draw_point+0x8c>)
 8001e14:	2280      	movs	r2, #128	@ 0x80
 8001e16:	611a      	str	r2, [r3, #16]
 8001e18:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <lcd_draw_point+0x8c>)
 8001e1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e1e:	611a      	str	r2, [r3, #16]
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	200000b0 	.word	0x200000b0
 8001e2c:	40011000 	.word	0x40011000
 8001e30:	40010c00 	.word	0x40010c00
 8001e34:	00000000 	.word	0x00000000

08001e38 <lcd_ssd_backlight_set>:
 * @brief       SSD1963�����������ú���
 * @param       pwm: ����ȼ�,0~100.Խ��Խ��.
 * @retval      ��
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
 8001e42:	23be      	movs	r3, #190	@ 0xbe
 8001e44:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8001e46:	4b5a      	ldr	r3, [pc, #360]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001e48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e4c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8001e4e:	4b58      	ldr	r3, [pc, #352]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001e50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e54:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	4b56      	ldr	r3, [pc, #344]	@ (8001fb4 <lcd_ssd_backlight_set+0x17c>)
 8001e5c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8001e5e:	4b54      	ldr	r3, [pc, #336]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001e60:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e64:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8001e66:	4b52      	ldr	r3, [pc, #328]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001e68:	2280      	movs	r2, #128	@ 0x80
 8001e6a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8001e6c:	4b50      	ldr	r3, [pc, #320]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e72:	611a      	str	r2, [r3, #16]
}
 8001e74:	bf00      	nop
    lcd_wr_regno(0xBE);         /* ����PWM��� */
    lcd_wr_data(0x05);          /* 1����PWMƵ�� */
 8001e76:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001e78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e7c:	611a      	str	r2, [r3, #16]
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001e80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb4 <lcd_ssd_backlight_set+0x17c>)
 8001e88:	2205      	movs	r2, #5
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	4b48      	ldr	r3, [pc, #288]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001e8e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e92:	611a      	str	r2, [r3, #16]
 8001e94:	4b46      	ldr	r3, [pc, #280]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001e96:	2280      	movs	r2, #128	@ 0x80
 8001e98:	611a      	str	r2, [r3, #16]
 8001e9a:	4b45      	ldr	r3, [pc, #276]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea0:	611a      	str	r2, [r3, #16]
    lcd_wr_data(pwm * 2.55);    /* 2����PWMռ�ձ� */
 8001ea2:	4b43      	ldr	r3, [pc, #268]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001ea4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ea8:	611a      	str	r2, [r3, #16]
 8001eaa:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001eac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eb0:	611a      	str	r2, [r3, #16]
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fc3b 	bl	8000730 <__aeabi_i2d>
 8001eba:	a33b      	add	r3, pc, #236	@ (adr r3, 8001fa8 <lcd_ssd_backlight_set+0x170>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe f9ba 	bl	8000238 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4c3a      	ldr	r4, [pc, #232]	@ (8001fb4 <lcd_ssd_backlight_set+0x17c>)
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7fe fc99 	bl	8000804 <__aeabi_d2uiz>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	60e3      	str	r3, [r4, #12]
 8001ed6:	4b36      	ldr	r3, [pc, #216]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001ed8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	4b34      	ldr	r3, [pc, #208]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001ee0:	2280      	movs	r2, #128	@ 0x80
 8001ee2:	611a      	str	r2, [r3, #16]
 8001ee4:	4b32      	ldr	r3, [pc, #200]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eea:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x01);          /* 3����C */
 8001eec:	4b30      	ldr	r3, [pc, #192]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001eee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef2:	611a      	str	r2, [r3, #16]
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001ef6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001efa:	611a      	str	r2, [r3, #16]
 8001efc:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <lcd_ssd_backlight_set+0x17c>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f04:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f08:	611a      	str	r2, [r3, #16]
 8001f0a:	4b29      	ldr	r3, [pc, #164]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f0c:	2280      	movs	r2, #128	@ 0x80
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	4b27      	ldr	r3, [pc, #156]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f16:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0xFF);          /* 4����D */
 8001f18:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	4b23      	ldr	r3, [pc, #140]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f26:	611a      	str	r2, [r3, #16]
 8001f28:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <lcd_ssd_backlight_set+0x17c>)
 8001f2a:	22ff      	movs	r2, #255	@ 0xff
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	4b20      	ldr	r3, [pc, #128]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f30:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f34:	611a      	str	r2, [r3, #16]
 8001f36:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f38:	2280      	movs	r2, #128	@ 0x80
 8001f3a:	611a      	str	r2, [r3, #16]
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f42:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 5����E */
 8001f44:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f4a:	611a      	str	r2, [r3, #16]
 8001f4c:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f52:	611a      	str	r2, [r3, #16]
 8001f54:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <lcd_ssd_backlight_set+0x17c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f64:	2280      	movs	r2, #128	@ 0x80
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f6e:	611a      	str	r2, [r3, #16]
    lcd_wr_data(0x00);          /* 6����F */
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f76:	611a      	str	r2, [r3, #16]
 8001f78:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f7e:	611a      	str	r2, [r3, #16]
 8001f80:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <lcd_ssd_backlight_set+0x17c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f8c:	611a      	str	r2, [r3, #16]
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f90:	2280      	movs	r2, #128	@ 0x80
 8001f92:	611a      	str	r2, [r3, #16]
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <lcd_ssd_backlight_set+0x178>)
 8001f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f9a:	611a      	str	r2, [r3, #16]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd90      	pop	{r4, r7, pc}
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	66666666 	.word	0x66666666
 8001fac:	40046666 	.word	0x40046666
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	40010c00 	.word	0x40010c00

08001fb8 <lcd_display_dir>:
 * @brief       ����LCD��ʾ����
 * @param       dir:0,����; 1,����
 * @retval      ��
 */
void lcd_display_dir(uint8_t dir)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* ����/���� */
 8001fc2:	4a68      	ldr	r2, [pc, #416]	@ (8002164 <lcd_display_dir+0x1ac>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* ���� */
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d165      	bne.n	800209a <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 8001fce:	4b65      	ldr	r3, [pc, #404]	@ (8002164 <lcd_display_dir+0x1ac>)
 8001fd0:	22f0      	movs	r2, #240	@ 0xf0
 8001fd2:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 8001fd4:	4b63      	ldr	r3, [pc, #396]	@ (8002164 <lcd_display_dir+0x1ac>)
 8001fd6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001fda:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001fdc:	4b61      	ldr	r3, [pc, #388]	@ (8002164 <lcd_display_dir+0x1ac>)
 8001fde:	889b      	ldrh	r3, [r3, #4]
 8001fe0:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d114      	bne.n	8002012 <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8001fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8002164 <lcd_display_dir+0x1ac>)
 8001fea:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001fee:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001ff0:	4b5c      	ldr	r3, [pc, #368]	@ (8002164 <lcd_display_dir+0x1ac>)
 8001ff2:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001ff6:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8002164 <lcd_display_dir+0x1ac>)
 8001ffa:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001ffe:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8002000:	4b58      	ldr	r3, [pc, #352]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002002:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002006:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8002008:	4b56      	ldr	r3, [pc, #344]	@ (8002164 <lcd_display_dir+0x1ac>)
 800200a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800200e:	805a      	strh	r2, [r3, #2]
 8002010:	e020      	b.n	8002054 <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 8002012:	4b54      	ldr	r3, [pc, #336]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002014:	889b      	ldrh	r3, [r3, #4]
 8002016:	f641 1263 	movw	r2, #6499	@ 0x1963
 800201a:	4293      	cmp	r3, r2
 800201c:	d111      	bne.n	8002042 <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 800201e:	4b51      	ldr	r3, [pc, #324]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002020:	222c      	movs	r2, #44	@ 0x2c
 8002022:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* ����дX����ָ�� */
 8002024:	4b4f      	ldr	r3, [pc, #316]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002026:	222b      	movs	r2, #43	@ 0x2b
 8002028:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* ����дY����ָ�� */
 800202a:	4b4e      	ldr	r3, [pc, #312]	@ (8002164 <lcd_display_dir+0x1ac>)
 800202c:	222a      	movs	r2, #42	@ 0x2a
 800202e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* ���ÿ��480 */
 8002030:	4b4c      	ldr	r3, [pc, #304]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002032:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002036:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* ���ø߶�800 */
 8002038:	4b4a      	ldr	r3, [pc, #296]	@ (8002164 <lcd_display_dir+0x1ac>)
 800203a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800203e:	805a      	strh	r2, [r3, #2]
 8002040:	e008      	b.n	8002054 <lcd_display_dir+0x9c>
        }
        else   /* ����IC, ����: 9341 / 5310 / 7789 / 7796 / 9806 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 8002042:	4b48      	ldr	r3, [pc, #288]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002044:	222c      	movs	r2, #44	@ 0x2c
 8002046:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8002048:	4b46      	ldr	r3, [pc, #280]	@ (8002164 <lcd_display_dir+0x1ac>)
 800204a:	222a      	movs	r2, #42	@ 0x2a
 800204c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 800204e:	4b45      	ldr	r3, [pc, #276]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002050:	222b      	movs	r2, #43	@ 0x2b
 8002052:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 8002054:	4b43      	ldr	r3, [pc, #268]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002056:	889b      	ldrh	r3, [r3, #4]
 8002058:	f245 3210 	movw	r2, #21264	@ 0x5310
 800205c:	4293      	cmp	r3, r2
 800205e:	d005      	beq.n	800206c <lcd_display_dir+0xb4>
 8002060:	4b40      	ldr	r3, [pc, #256]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002062:	889b      	ldrh	r3, [r3, #4]
 8002064:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002068:	4293      	cmp	r3, r2
 800206a:	d107      	bne.n	800207c <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 800206c:	4b3d      	ldr	r3, [pc, #244]	@ (8002164 <lcd_display_dir+0x1ac>)
 800206e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002072:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8002074:	4b3b      	ldr	r3, [pc, #236]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002076:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800207a:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* �����9806 ���ʾ�� 480*800 �ֱ��� */
 800207c:	4b39      	ldr	r3, [pc, #228]	@ (8002164 <lcd_display_dir+0x1ac>)
 800207e:	889b      	ldrh	r3, [r3, #4]
 8002080:	f649 0206 	movw	r2, #38918	@ 0x9806
 8002084:	4293      	cmp	r3, r2
 8002086:	d165      	bne.n	8002154 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <lcd_display_dir+0x1ac>)
 800208a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800208e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8002090:	4b34      	ldr	r3, [pc, #208]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002092:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002096:	805a      	strh	r2, [r3, #2]
 8002098:	e05c      	b.n	8002154 <lcd_display_dir+0x19c>
        }
    }
    else                /* ���� */
    {
        lcddev.width = 320;         /* Ĭ�Ͽ�� */
 800209a:	4b32      	ldr	r3, [pc, #200]	@ (8002164 <lcd_display_dir+0x1ac>)
 800209c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80020a0:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Ĭ�ϸ߶� */
 80020a2:	4b30      	ldr	r3, [pc, #192]	@ (8002164 <lcd_display_dir+0x1ac>)
 80020a4:	22f0      	movs	r2, #240	@ 0xf0
 80020a6:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 80020a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002164 <lcd_display_dir+0x1ac>)
 80020aa:	889b      	ldrh	r3, [r3, #4]
 80020ac:	f245 5210 	movw	r2, #21776	@ 0x5510
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d114      	bne.n	80020de <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 80020b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002164 <lcd_display_dir+0x1ac>)
 80020b6:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80020ba:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 80020bc:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <lcd_display_dir+0x1ac>)
 80020be:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 80020c2:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 80020c4:	4b27      	ldr	r3, [pc, #156]	@ (8002164 <lcd_display_dir+0x1ac>)
 80020c6:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 80020ca:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 80020cc:	4b25      	ldr	r3, [pc, #148]	@ (8002164 <lcd_display_dir+0x1ac>)
 80020ce:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80020d2:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 80020d4:	4b23      	ldr	r3, [pc, #140]	@ (8002164 <lcd_display_dir+0x1ac>)
 80020d6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80020da:	805a      	strh	r2, [r3, #2]
 80020dc:	e026      	b.n	800212c <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 80020de:	4b21      	ldr	r3, [pc, #132]	@ (8002164 <lcd_display_dir+0x1ac>)
 80020e0:	889b      	ldrh	r3, [r3, #4]
 80020e2:	f641 1263 	movw	r2, #6499	@ 0x1963
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d005      	beq.n	80020f6 <lcd_display_dir+0x13e>
 80020ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002164 <lcd_display_dir+0x1ac>)
 80020ec:	889b      	ldrh	r3, [r3, #4]
 80020ee:	f649 0206 	movw	r2, #38918	@ 0x9806
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d111      	bne.n	800211a <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* ����д��GRAM��ָ�� */
 80020f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002164 <lcd_display_dir+0x1ac>)
 80020f8:	222c      	movs	r2, #44	@ 0x2c
 80020fa:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* ����дX����ָ�� */
 80020fc:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <lcd_display_dir+0x1ac>)
 80020fe:	222a      	movs	r2, #42	@ 0x2a
 8002100:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* ����дY����ָ�� */
 8002102:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002104:	222b      	movs	r2, #43	@ 0x2b
 8002106:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* ���ÿ��800 */
 8002108:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <lcd_display_dir+0x1ac>)
 800210a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800210e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* ���ø߶�480 */
 8002110:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002112:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002116:	805a      	strh	r2, [r3, #2]
 8002118:	e008      	b.n	800212c <lcd_display_dir+0x174>
        }
        else     /* ����IC, ����: 9341 / 5310 / 7789 / 7796 ��IC */
        {
            lcddev.wramcmd = 0X2C;
 800211a:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <lcd_display_dir+0x1ac>)
 800211c:	222c      	movs	r2, #44	@ 0x2c
 800211e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8002120:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002122:	222a      	movs	r2, #42	@ 0x2a
 8002124:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002128:	222b      	movs	r2, #43	@ 0x2b
 800212a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* �����5310/7796 ���ʾ�� 320*480�ֱ��� */
 800212c:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <lcd_display_dir+0x1ac>)
 800212e:	889b      	ldrh	r3, [r3, #4]
 8002130:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002134:	4293      	cmp	r3, r2
 8002136:	d005      	beq.n	8002144 <lcd_display_dir+0x18c>
 8002138:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <lcd_display_dir+0x1ac>)
 800213a:	889b      	ldrh	r3, [r3, #4]
 800213c:	f247 7296 	movw	r2, #30614	@ 0x7796
 8002140:	4293      	cmp	r3, r2
 8002142:	d107      	bne.n	8002154 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8002144:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <lcd_display_dir+0x1ac>)
 8002146:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800214a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <lcd_display_dir+0x1ac>)
 800214e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002152:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Ĭ��ɨ�跽�� */
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff fa97 	bl	8001688 <lcd_scan_dir>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200000b0 	.word	0x200000b0

08002168 <lcd_init>:
 *
 * @param       ��
 * @retval      ��
 */
void lcd_init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b0da      	sub	sp, #360	@ 0x168
 800216c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_struct;
    
    LCD_BL_GPIO_CLK_ENABLE();   /* LCD_BL��ʱ��ʹ�� */
 800216e:	4bbe      	ldr	r3, [pc, #760]	@ (8002468 <lcd_init+0x300>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	4abd      	ldr	r2, [pc, #756]	@ (8002468 <lcd_init+0x300>)
 8002174:	f043 0310 	orr.w	r3, r3, #16
 8002178:	6193      	str	r3, [r2, #24]
 800217a:	4bbb      	ldr	r3, [pc, #748]	@ (8002468 <lcd_init+0x300>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 0210 	and.w	r2, r3, #16
 8002182:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002186:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002190:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002194:	681b      	ldr	r3, [r3, #0]
    LCD_CS_GPIO_CLK_ENABLE();   /* LCD_CS��ʱ��ʹ�� */
 8002196:	4bb4      	ldr	r3, [pc, #720]	@ (8002468 <lcd_init+0x300>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	4ab3      	ldr	r2, [pc, #716]	@ (8002468 <lcd_init+0x300>)
 800219c:	f043 0310 	orr.w	r3, r3, #16
 80021a0:	6193      	str	r3, [r2, #24]
 80021a2:	4bb1      	ldr	r3, [pc, #708]	@ (8002468 <lcd_init+0x300>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0210 	and.w	r2, r3, #16
 80021aa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021ae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021b8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80021bc:	681b      	ldr	r3, [r3, #0]
    LCD_WR_GPIO_CLK_ENABLE();   /* LCD_WR��ʱ��ʹ�� */
 80021be:	4baa      	ldr	r3, [pc, #680]	@ (8002468 <lcd_init+0x300>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4aa9      	ldr	r2, [pc, #676]	@ (8002468 <lcd_init+0x300>)
 80021c4:	f043 0310 	orr.w	r3, r3, #16
 80021c8:	6193      	str	r3, [r2, #24]
 80021ca:	4ba7      	ldr	r3, [pc, #668]	@ (8002468 <lcd_init+0x300>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0210 	and.w	r2, r3, #16
 80021d2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021d6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021e0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80021e4:	681b      	ldr	r3, [r3, #0]
    LCD_RD_GPIO_CLK_ENABLE();   /* LCD_RD��ʱ��ʹ�� */
 80021e6:	4ba0      	ldr	r3, [pc, #640]	@ (8002468 <lcd_init+0x300>)
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	4a9f      	ldr	r2, [pc, #636]	@ (8002468 <lcd_init+0x300>)
 80021ec:	f043 0310 	orr.w	r3, r3, #16
 80021f0:	6193      	str	r3, [r2, #24]
 80021f2:	4b9d      	ldr	r3, [pc, #628]	@ (8002468 <lcd_init+0x300>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f003 0210 	and.w	r2, r3, #16
 80021fa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80021fe:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002208:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800220c:	681b      	ldr	r3, [r3, #0]
    LCD_RS_GPIO_CLK_ENABLE();   /* LCD_RS��ʱ��ʹ�� */
 800220e:	4b96      	ldr	r3, [pc, #600]	@ (8002468 <lcd_init+0x300>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	4a95      	ldr	r2, [pc, #596]	@ (8002468 <lcd_init+0x300>)
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	6193      	str	r3, [r2, #24]
 800221a:	4b93      	ldr	r3, [pc, #588]	@ (8002468 <lcd_init+0x300>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 0210 	and.w	r2, r3, #16
 8002222:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002226:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002230:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002234:	681b      	ldr	r3, [r3, #0]
    LCD_DATA_GPIO_CLK_ENABLE(); /* LCD_DATA��ʱ��ʹ�� */
 8002236:	4b8c      	ldr	r3, [pc, #560]	@ (8002468 <lcd_init+0x300>)
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	4a8b      	ldr	r2, [pc, #556]	@ (8002468 <lcd_init+0x300>)
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	6193      	str	r3, [r2, #24]
 8002242:	4b89      	ldr	r3, [pc, #548]	@ (8002468 <lcd_init+0x300>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f003 0208 	and.w	r2, r3, #8
 800224a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800224e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002258:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800225c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_AFIO_CLK_ENABLE();
 800225e:	4b82      	ldr	r3, [pc, #520]	@ (8002468 <lcd_init+0x300>)
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	4a81      	ldr	r2, [pc, #516]	@ (8002468 <lcd_init+0x300>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6193      	str	r3, [r2, #24]
 800226a:	4b7f      	ldr	r3, [pc, #508]	@ (8002468 <lcd_init+0x300>)
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 0201 	and.w	r2, r3, #1
 8002272:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002276:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002280:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002284:	681b      	ldr	r3, [r3, #0]
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); /* ��ֹJTAG, ʹ��SWD, �ͷ�PB3,PB4������������ͨIO�� */
 8002286:	4b79      	ldr	r3, [pc, #484]	@ (800246c <lcd_init+0x304>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800228e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002292:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002296:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800229a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800229e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022a2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80022a6:	4a71      	ldr	r2, [pc, #452]	@ (800246c <lcd_init+0x304>)
 80022a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80022ac:	6053      	str	r3, [r2, #4]
    
    gpio_init_struct.Pin = LCD_BL_GPIO_PIN;
 80022ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022b2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;               
 80022b6:	2301      	movs	r3, #1
 80022b8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    
 80022bc:	2301      	movs	r3, #1
 80022be:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          
 80022c2:	2303      	movs	r3, #3
 80022c4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &gpio_init_struct);     /* LCD_BL����ģʽ����(�������) */
 80022c8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80022cc:	4619      	mov	r1, r3
 80022ce:	4868      	ldr	r0, [pc, #416]	@ (8002470 <lcd_init+0x308>)
 80022d0:	f006 fc4e 	bl	8008b70 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_CS_GPIO_PIN;
 80022d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022d8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ���츴�� */
 80022dc:	2301      	movs	r3, #1
 80022de:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    gpio_init_struct.Pull = GPIO_PULLUP;                    /* ���� */
 80022e2:	2301      	movs	r3, #1
 80022e4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;          /* ���� */
 80022e8:	2303      	movs	r3, #3
 80022ea:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_CS���� */
 80022ee:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80022f2:	4619      	mov	r1, r3
 80022f4:	485e      	ldr	r0, [pc, #376]	@ (8002470 <lcd_init+0x308>)
 80022f6:	f006 fc3b 	bl	8008b70 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_WR_GPIO_PIN;
 80022fa:	2380      	movs	r3, #128	@ 0x80
 80022fc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_WR���� */
 8002300:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002304:	4619      	mov	r1, r3
 8002306:	485a      	ldr	r0, [pc, #360]	@ (8002470 <lcd_init+0x308>)
 8002308:	f006 fc32 	bl	8008b70 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RD_GPIO_PIN;
 800230c:	2340      	movs	r3, #64	@ 0x40
 800230e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RD���� */
 8002312:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002316:	4619      	mov	r1, r3
 8002318:	4855      	ldr	r0, [pc, #340]	@ (8002470 <lcd_init+0x308>)
 800231a:	f006 fc29 	bl	8008b70 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RS_GPIO_PIN;
 800231e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002322:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &gpio_init_struct);     /* ��ʼ��LCD_RS���� */
 8002326:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 800232a:	4619      	mov	r1, r3
 800232c:	4850      	ldr	r0, [pc, #320]	@ (8002470 <lcd_init+0x308>)
 800232e:	f006 fc1f 	bl	8008b70 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_DATA_GPIO_PIN;
 8002332:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002336:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* ������� */
 800233a:	2301      	movs	r3, #1
 800233c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    HAL_GPIO_Init(LCD_DATA_GPIO_PORT, &gpio_init_struct);   /* LCD_DATA����ģʽ���� */
 8002340:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002344:	4619      	mov	r1, r3
 8002346:	484b      	ldr	r0, [pc, #300]	@ (8002474 <lcd_init+0x30c>)
 8002348:	f006 fc12 	bl	8008b70 <HAL_GPIO_Init>
    LCD_WR(1);                  /* WR Ĭ�ϸߵ�ƽ */
 800234c:	4b48      	ldr	r3, [pc, #288]	@ (8002470 <lcd_init+0x308>)
 800234e:	2280      	movs	r2, #128	@ 0x80
 8002350:	611a      	str	r2, [r3, #16]
    LCD_RD(1);                  /* RD Ĭ�ϸߵ�ƽ */
 8002352:	4b47      	ldr	r3, [pc, #284]	@ (8002470 <lcd_init+0x308>)
 8002354:	2240      	movs	r2, #64	@ 0x40
 8002356:	611a      	str	r2, [r3, #16]
    LCD_CS(1);                  /* CS Ĭ�ϸߵ�ƽ */
 8002358:	4b45      	ldr	r3, [pc, #276]	@ (8002470 <lcd_init+0x308>)
 800235a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800235e:	611a      	str	r2, [r3, #16]
    LCD_RS(1);                  /* RS Ĭ�ϸߵ�ƽ */
 8002360:	4b43      	ldr	r3, [pc, #268]	@ (8002470 <lcd_init+0x308>)
 8002362:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002366:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(0XFFFF);       /* DATA Ĭ�ϸߵ�ƽ */
 8002368:	4b42      	ldr	r3, [pc, #264]	@ (8002474 <lcd_init+0x30c>)
 800236a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800236e:	60da      	str	r2, [r3, #12]

    lcd_opt_delay(0X1FFFF);
 8002370:	4841      	ldr	r0, [pc, #260]	@ (8002478 <lcd_init+0x310>)
 8002372:	f7fe fdf7 	bl	8000f64 <lcd_opt_delay>
 8002376:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800237a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800237e:	22d3      	movs	r2, #211	@ 0xd3
 8002380:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002382:	4b3b      	ldr	r3, [pc, #236]	@ (8002470 <lcd_init+0x308>)
 8002384:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002388:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800238a:	4b39      	ldr	r3, [pc, #228]	@ (8002470 <lcd_init+0x308>)
 800238c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002390:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002392:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002396:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	b29a      	uxth	r2, r3
 800239e:	4b35      	ldr	r3, [pc, #212]	@ (8002474 <lcd_init+0x30c>)
 80023a0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80023a2:	4b33      	ldr	r3, [pc, #204]	@ (8002470 <lcd_init+0x308>)
 80023a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023a8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80023aa:	4b31      	ldr	r3, [pc, #196]	@ (8002470 <lcd_init+0x308>)
 80023ac:	2280      	movs	r2, #128	@ 0x80
 80023ae:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80023b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002470 <lcd_init+0x308>)
 80023b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b6:	611a      	str	r2, [r3, #16]
}
 80023b8:	bf00      	nop

    /* ����9341 ID�Ķ�ȡ */
    lcd_wr_regno(0XD3);
    lcddev.id = lcd_rd_data();  /* dummy read */
 80023ba:	f7fe fde3 	bl	8000f84 <lcd_rd_data>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b2e      	ldr	r3, [pc, #184]	@ (800247c <lcd_init+0x314>)
 80023c4:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ����0X00 */
 80023c6:	f7fe fddd 	bl	8000f84 <lcd_rd_data>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b2b      	ldr	r3, [pc, #172]	@ (800247c <lcd_init+0x314>)
 80023d0:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* ��ȡ0X93 */
 80023d2:	f7fe fdd7 	bl	8000f84 <lcd_rd_data>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	4b28      	ldr	r3, [pc, #160]	@ (800247c <lcd_init+0x314>)
 80023dc:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 80023de:	4b27      	ldr	r3, [pc, #156]	@ (800247c <lcd_init+0x314>)
 80023e0:	889b      	ldrh	r3, [r3, #4]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	4b25      	ldr	r3, [pc, #148]	@ (800247c <lcd_init+0x314>)
 80023e8:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* ��ȡ0X41 */
 80023ea:	f7fe fdcb 	bl	8000f84 <lcd_rd_data>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b22      	ldr	r3, [pc, #136]	@ (800247c <lcd_init+0x314>)
 80023f4:	889b      	ldrh	r3, [r3, #4]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	4b20      	ldr	r3, [pc, #128]	@ (800247c <lcd_init+0x314>)
 80023fc:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* ���� 9341 , ���Կ����ǲ��� ST7789 */
 80023fe:	4b1f      	ldr	r3, [pc, #124]	@ (800247c <lcd_init+0x314>)
 8002400:	889b      	ldrh	r3, [r3, #4]
 8002402:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002406:	4293      	cmp	r3, r2
 8002408:	f000 820e 	beq.w	8002828 <lcd_init+0x6c0>
 800240c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002410:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8002414:	2204      	movs	r2, #4
 8002416:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002418:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <lcd_init+0x308>)
 800241a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800241e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002420:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <lcd_init+0x308>)
 8002422:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002426:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002428:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800242c:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b29a      	uxth	r2, r3
 8002434:	4b0f      	ldr	r3, [pc, #60]	@ (8002474 <lcd_init+0x30c>)
 8002436:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002438:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <lcd_init+0x308>)
 800243a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800243e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <lcd_init+0x308>)
 8002442:	2280      	movs	r2, #128	@ 0x80
 8002444:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <lcd_init+0x308>)
 8002448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800244c:	611a      	str	r2, [r3, #16]
}
 800244e:	bf00      	nop
    {
        lcd_wr_regno(0X04);
        lcddev.id = lcd_rd_data();      /* dummy read */
 8002450:	f7fe fd98 	bl	8000f84 <lcd_rd_data>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	4b08      	ldr	r3, [pc, #32]	@ (800247c <lcd_init+0x314>)
 800245a:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ����0X85 */
 800245c:	f7fe fd92 	bl	8000f84 <lcd_rd_data>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	e00c      	b.n	8002480 <lcd_init+0x318>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	40010000 	.word	0x40010000
 8002470:	40011000 	.word	0x40011000
 8002474:	40010c00 	.word	0x40010c00
 8002478:	0001ffff 	.word	0x0001ffff
 800247c:	200000b0 	.word	0x200000b0
 8002480:	4bb1      	ldr	r3, [pc, #708]	@ (8002748 <lcd_init+0x5e0>)
 8002482:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* ��ȡ0X85 */
 8002484:	f7fe fd7e 	bl	8000f84 <lcd_rd_data>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	4bae      	ldr	r3, [pc, #696]	@ (8002748 <lcd_init+0x5e0>)
 800248e:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8002490:	4bad      	ldr	r3, [pc, #692]	@ (8002748 <lcd_init+0x5e0>)
 8002492:	889b      	ldrh	r3, [r3, #4]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	b29a      	uxth	r2, r3
 8002498:	4bab      	ldr	r3, [pc, #684]	@ (8002748 <lcd_init+0x5e0>)
 800249a:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* ��ȡ0X52 */
 800249c:	f7fe fd72 	bl	8000f84 <lcd_rd_data>
 80024a0:	4603      	mov	r3, r0
 80024a2:	461a      	mov	r2, r3
 80024a4:	4ba8      	ldr	r3, [pc, #672]	@ (8002748 <lcd_init+0x5e0>)
 80024a6:	889b      	ldrh	r3, [r3, #4]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4ba6      	ldr	r3, [pc, #664]	@ (8002748 <lcd_init+0x5e0>)
 80024ae:	809a      	strh	r2, [r3, #4]
        
        if (lcddev.id == 0X8552)        /* ��8552��IDת����7789 */
 80024b0:	4ba5      	ldr	r3, [pc, #660]	@ (8002748 <lcd_init+0x5e0>)
 80024b2:	889b      	ldrh	r3, [r3, #4]
 80024b4:	f248 5252 	movw	r2, #34130	@ 0x8552
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d103      	bne.n	80024c4 <lcd_init+0x35c>
        {
            lcddev.id = 0x7789;
 80024bc:	4ba2      	ldr	r3, [pc, #648]	@ (8002748 <lcd_init+0x5e0>)
 80024be:	f247 7289 	movw	r2, #30601	@ 0x7789
 80024c2:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Ҳ����ST7789, �����ǲ��� NT35310 */
 80024c4:	4ba0      	ldr	r3, [pc, #640]	@ (8002748 <lcd_init+0x5e0>)
 80024c6:	889b      	ldrh	r3, [r3, #4]
 80024c8:	f247 7289 	movw	r2, #30601	@ 0x7789
 80024cc:	4293      	cmp	r3, r2
 80024ce:	f000 81ab 	beq.w	8002828 <lcd_init+0x6c0>
 80024d2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024d6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024da:	22d4      	movs	r2, #212	@ 0xd4
 80024dc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80024de:	4b9b      	ldr	r3, [pc, #620]	@ (800274c <lcd_init+0x5e4>)
 80024e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024e4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80024e6:	4b99      	ldr	r3, [pc, #612]	@ (800274c <lcd_init+0x5e4>)
 80024e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024ec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80024ee:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80024f2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	4b95      	ldr	r3, [pc, #596]	@ (8002750 <lcd_init+0x5e8>)
 80024fc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80024fe:	4b93      	ldr	r3, [pc, #588]	@ (800274c <lcd_init+0x5e4>)
 8002500:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002504:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002506:	4b91      	ldr	r3, [pc, #580]	@ (800274c <lcd_init+0x5e4>)
 8002508:	2280      	movs	r2, #128	@ 0x80
 800250a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800250c:	4b8f      	ldr	r3, [pc, #572]	@ (800274c <lcd_init+0x5e4>)
 800250e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002512:	611a      	str	r2, [r3, #16]
}
 8002514:	bf00      	nop
        {
            lcd_wr_regno(0xD4);
            lcddev.id = lcd_rd_data();  /* dummy read */
 8002516:	f7fe fd35 	bl	8000f84 <lcd_rd_data>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	4b8a      	ldr	r3, [pc, #552]	@ (8002748 <lcd_init+0x5e0>)
 8002520:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x01 */
 8002522:	f7fe fd2f 	bl	8000f84 <lcd_rd_data>
 8002526:	4603      	mov	r3, r0
 8002528:	461a      	mov	r2, r3
 800252a:	4b87      	ldr	r3, [pc, #540]	@ (8002748 <lcd_init+0x5e0>)
 800252c:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* ����0x53 */
 800252e:	f7fe fd29 	bl	8000f84 <lcd_rd_data>
 8002532:	4603      	mov	r3, r0
 8002534:	461a      	mov	r2, r3
 8002536:	4b84      	ldr	r3, [pc, #528]	@ (8002748 <lcd_init+0x5e0>)
 8002538:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 800253a:	4b83      	ldr	r3, [pc, #524]	@ (8002748 <lcd_init+0x5e0>)
 800253c:	889b      	ldrh	r3, [r3, #4]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b81      	ldr	r3, [pc, #516]	@ (8002748 <lcd_init+0x5e0>)
 8002544:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* �������0x10 */
 8002546:	f7fe fd1d 	bl	8000f84 <lcd_rd_data>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	4b7e      	ldr	r3, [pc, #504]	@ (8002748 <lcd_init+0x5e0>)
 8002550:	889b      	ldrh	r3, [r3, #4]
 8002552:	4313      	orrs	r3, r2
 8002554:	b29a      	uxth	r2, r3
 8002556:	4b7c      	ldr	r3, [pc, #496]	@ (8002748 <lcd_init+0x5e0>)
 8002558:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Ҳ����NT35310,���Կ����ǲ���ST7796 */
 800255a:	4b7b      	ldr	r3, [pc, #492]	@ (8002748 <lcd_init+0x5e0>)
 800255c:	889b      	ldrh	r3, [r3, #4]
 800255e:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002562:	4293      	cmp	r3, r2
 8002564:	f000 8160 	beq.w	8002828 <lcd_init+0x6c0>
 8002568:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800256c:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8002570:	22d3      	movs	r2, #211	@ 0xd3
 8002572:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002574:	4b75      	ldr	r3, [pc, #468]	@ (800274c <lcd_init+0x5e4>)
 8002576:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800257a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800257c:	4b73      	ldr	r3, [pc, #460]	@ (800274c <lcd_init+0x5e4>)
 800257e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002582:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002584:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002588:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	b29a      	uxth	r2, r3
 8002590:	4b6f      	ldr	r3, [pc, #444]	@ (8002750 <lcd_init+0x5e8>)
 8002592:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002594:	4b6d      	ldr	r3, [pc, #436]	@ (800274c <lcd_init+0x5e4>)
 8002596:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800259a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800259c:	4b6b      	ldr	r3, [pc, #428]	@ (800274c <lcd_init+0x5e4>)
 800259e:	2280      	movs	r2, #128	@ 0x80
 80025a0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80025a2:	4b6a      	ldr	r3, [pc, #424]	@ (800274c <lcd_init+0x5e4>)
 80025a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025a8:	611a      	str	r2, [r3, #16]
}
 80025aa:	bf00      	nop
            {
                lcd_wr_regno(0XD3);
                lcddev.id = lcd_rd_data();  /* dummy read */
 80025ac:	f7fe fcea 	bl	8000f84 <lcd_rd_data>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b64      	ldr	r3, [pc, #400]	@ (8002748 <lcd_init+0x5e0>)
 80025b6:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ����0X00 */
 80025b8:	f7fe fce4 	bl	8000f84 <lcd_rd_data>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	4b61      	ldr	r3, [pc, #388]	@ (8002748 <lcd_init+0x5e0>)
 80025c2:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* ��ȡ0X77 */
 80025c4:	f7fe fcde 	bl	8000f84 <lcd_rd_data>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002748 <lcd_init+0x5e0>)
 80025ce:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 80025d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002748 <lcd_init+0x5e0>)
 80025d2:	889b      	ldrh	r3, [r3, #4]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002748 <lcd_init+0x5e0>)
 80025da:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* ��ȡ0X96 */
 80025dc:	f7fe fcd2 	bl	8000f84 <lcd_rd_data>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b58      	ldr	r3, [pc, #352]	@ (8002748 <lcd_init+0x5e0>)
 80025e6:	889b      	ldrh	r3, [r3, #4]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b56      	ldr	r3, [pc, #344]	@ (8002748 <lcd_init+0x5e0>)
 80025ee:	809a      	strh	r2, [r3, #4]
                
                if (lcddev.id != 0x7796)    /* Ҳ����ST7796,���Կ����ǲ���NT35510 */
 80025f0:	4b55      	ldr	r3, [pc, #340]	@ (8002748 <lcd_init+0x5e0>)
 80025f2:	889b      	ldrh	r3, [r3, #4]
 80025f4:	f247 7296 	movw	r2, #30614	@ 0x7796
 80025f8:	4293      	cmp	r3, r2
 80025fa:	f000 8115 	beq.w	8002828 <lcd_init+0x6c0>
                {
                    /* ������Կ�������ṩ�� */
                    lcd_write_reg(0xF000, 0x0055);
 80025fe:	2155      	movs	r1, #85	@ 0x55
 8002600:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8002604:	f7fe fc6c 	bl	8000ee0 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8002608:	21aa      	movs	r1, #170	@ 0xaa
 800260a:	f24f 0001 	movw	r0, #61441	@ 0xf001
 800260e:	f7fe fc67 	bl	8000ee0 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 8002612:	2152      	movs	r1, #82	@ 0x52
 8002614:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8002618:	f7fe fc62 	bl	8000ee0 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 800261c:	2108      	movs	r1, #8
 800261e:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8002622:	f7fe fc5d 	bl	8000ee0 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 8002626:	2101      	movs	r1, #1
 8002628:	f24f 0004 	movw	r0, #61444	@ 0xf004
 800262c:	f7fe fc58 	bl	8000ee0 <lcd_write_reg>
 8002630:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002634:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8002638:	f44f 4245 	mov.w	r2, #50432	@ 0xc500
 800263c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800263e:	4b43      	ldr	r3, [pc, #268]	@ (800274c <lcd_init+0x5e4>)
 8002640:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002644:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002646:	4b41      	ldr	r3, [pc, #260]	@ (800274c <lcd_init+0x5e4>)
 8002648:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800264c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800264e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002652:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	b29a      	uxth	r2, r3
 800265a:	4b3d      	ldr	r3, [pc, #244]	@ (8002750 <lcd_init+0x5e8>)
 800265c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800265e:	4b3b      	ldr	r3, [pc, #236]	@ (800274c <lcd_init+0x5e4>)
 8002660:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002664:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002666:	4b39      	ldr	r3, [pc, #228]	@ (800274c <lcd_init+0x5e4>)
 8002668:	2280      	movs	r2, #128	@ 0x80
 800266a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800266c:	4b37      	ldr	r3, [pc, #220]	@ (800274c <lcd_init+0x5e4>)
 800266e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002672:	611a      	str	r2, [r3, #16]
}
 8002674:	bf00      	nop

                    lcd_wr_regno(0xC500);       /* ��ȡID�Ͱ�λ */
                    lcddev.id = lcd_rd_data();  /* ����0x55 */
 8002676:	f7fe fc85 	bl	8000f84 <lcd_rd_data>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <lcd_init+0x5e0>)
 8002680:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8002682:	4b31      	ldr	r3, [pc, #196]	@ (8002748 <lcd_init+0x5e0>)
 8002684:	889b      	ldrh	r3, [r3, #4]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	b29a      	uxth	r2, r3
 800268a:	4b2f      	ldr	r3, [pc, #188]	@ (8002748 <lcd_init+0x5e0>)
 800268c:	809a      	strh	r2, [r3, #4]
 800268e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002692:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002696:	f24c 5201 	movw	r2, #50433	@ 0xc501
 800269a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800269c:	4b2b      	ldr	r3, [pc, #172]	@ (800274c <lcd_init+0x5e4>)
 800269e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026a2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80026a4:	4b29      	ldr	r3, [pc, #164]	@ (800274c <lcd_init+0x5e4>)
 80026a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026aa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80026ac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026b0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	4b25      	ldr	r3, [pc, #148]	@ (8002750 <lcd_init+0x5e8>)
 80026ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80026bc:	4b23      	ldr	r3, [pc, #140]	@ (800274c <lcd_init+0x5e4>)
 80026be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80026c4:	4b21      	ldr	r3, [pc, #132]	@ (800274c <lcd_init+0x5e4>)
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80026ca:	4b20      	ldr	r3, [pc, #128]	@ (800274c <lcd_init+0x5e4>)
 80026cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026d0:	611a      	str	r2, [r3, #16]
}
 80026d2:	bf00      	nop

                    lcd_wr_regno(0xC501);       /* ��ȡID�߰�λ */
                    lcddev.id |= lcd_rd_data(); /* ����0x10 */
 80026d4:	f7fe fc56 	bl	8000f84 <lcd_rd_data>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002748 <lcd_init+0x5e0>)
 80026de:	889b      	ldrh	r3, [r3, #4]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	4b18      	ldr	r3, [pc, #96]	@ (8002748 <lcd_init+0x5e0>)
 80026e6:	809a      	strh	r2, [r3, #4]
                    
                    //delay_ms(5);                /* �ȴ�5ms, ��Ϊ0XC501ָ���1963��˵���������λָ��, �ȴ�5ms��1963��λ����ٲ��� */

                    if (lcddev.id != 0x5510)    /* Ҳ����NT5510,���Կ����ǲ���ILI9806 */
 80026e8:	4b17      	ldr	r3, [pc, #92]	@ (8002748 <lcd_init+0x5e0>)
 80026ea:	889b      	ldrh	r3, [r3, #4]
 80026ec:	f245 5210 	movw	r2, #21776	@ 0x5510
 80026f0:	4293      	cmp	r3, r2
 80026f2:	f000 8099 	beq.w	8002828 <lcd_init+0x6c0>
 80026f6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80026fa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026fe:	22d3      	movs	r2, #211	@ 0xd3
 8002700:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002702:	4b12      	ldr	r3, [pc, #72]	@ (800274c <lcd_init+0x5e4>)
 8002704:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002708:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <lcd_init+0x5e4>)
 800270c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002710:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002712:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002716:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	b29a      	uxth	r2, r3
 800271e:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <lcd_init+0x5e8>)
 8002720:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002722:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <lcd_init+0x5e4>)
 8002724:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002728:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <lcd_init+0x5e4>)
 800272c:	2280      	movs	r2, #128	@ 0x80
 800272e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002730:	4b06      	ldr	r3, [pc, #24]	@ (800274c <lcd_init+0x5e4>)
 8002732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002736:	611a      	str	r2, [r3, #16]
}
 8002738:	bf00      	nop
                    {
                        lcd_wr_regno(0XD3);
                        lcddev.id = lcd_rd_data();  /* dummy read */
 800273a:	f7fe fc23 	bl	8000f84 <lcd_rd_data>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	4b01      	ldr	r3, [pc, #4]	@ (8002748 <lcd_init+0x5e0>)
 8002744:	809a      	strh	r2, [r3, #4]
 8002746:	e005      	b.n	8002754 <lcd_init+0x5ec>
 8002748:	200000b0 	.word	0x200000b0
 800274c:	40011000 	.word	0x40011000
 8002750:	40010c00 	.word	0x40010c00
                        lcddev.id = lcd_rd_data();  /* ����0X00 */
 8002754:	f7fe fc16 	bl	8000f84 <lcd_rd_data>
 8002758:	4603      	mov	r3, r0
 800275a:	461a      	mov	r2, r3
 800275c:	4bb2      	ldr	r3, [pc, #712]	@ (8002a28 <lcd_init+0x8c0>)
 800275e:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* ����0X98 */
 8002760:	f7fe fc10 	bl	8000f84 <lcd_rd_data>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4baf      	ldr	r3, [pc, #700]	@ (8002a28 <lcd_init+0x8c0>)
 800276a:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 800276c:	4bae      	ldr	r3, [pc, #696]	@ (8002a28 <lcd_init+0x8c0>)
 800276e:	889b      	ldrh	r3, [r3, #4]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	b29a      	uxth	r2, r3
 8002774:	4bac      	ldr	r3, [pc, #688]	@ (8002a28 <lcd_init+0x8c0>)
 8002776:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* ����0X06 */
 8002778:	f7fe fc04 	bl	8000f84 <lcd_rd_data>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	4ba9      	ldr	r3, [pc, #676]	@ (8002a28 <lcd_init+0x8c0>)
 8002782:	889b      	ldrh	r3, [r3, #4]
 8002784:	4313      	orrs	r3, r2
 8002786:	b29a      	uxth	r2, r3
 8002788:	4ba7      	ldr	r3, [pc, #668]	@ (8002a28 <lcd_init+0x8c0>)
 800278a:	809a      	strh	r2, [r3, #4]
                        
                        if (lcddev.id != 0x9806)    /* Ҳ����ILI9806,���Կ����ǲ���SSD1963 */
 800278c:	4ba6      	ldr	r3, [pc, #664]	@ (8002a28 <lcd_init+0x8c0>)
 800278e:	889b      	ldrh	r3, [r3, #4]
 8002790:	f649 0206 	movw	r2, #38918	@ 0x9806
 8002794:	4293      	cmp	r3, r2
 8002796:	d047      	beq.n	8002828 <lcd_init+0x6c0>
 8002798:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800279c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80027a0:	22a1      	movs	r2, #161	@ 0xa1
 80027a2:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80027a4:	4ba1      	ldr	r3, [pc, #644]	@ (8002a2c <lcd_init+0x8c4>)
 80027a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027aa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80027ac:	4b9f      	ldr	r3, [pc, #636]	@ (8002a2c <lcd_init+0x8c4>)
 80027ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027b2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80027b4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80027b8:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	4b9b      	ldr	r3, [pc, #620]	@ (8002a30 <lcd_init+0x8c8>)
 80027c2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80027c4:	4b99      	ldr	r3, [pc, #612]	@ (8002a2c <lcd_init+0x8c4>)
 80027c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80027ca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80027cc:	4b97      	ldr	r3, [pc, #604]	@ (8002a2c <lcd_init+0x8c4>)
 80027ce:	2280      	movs	r2, #128	@ 0x80
 80027d0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80027d2:	4b96      	ldr	r3, [pc, #600]	@ (8002a2c <lcd_init+0x8c4>)
 80027d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027d8:	611a      	str	r2, [r3, #16]
}
 80027da:	bf00      	nop
                        {
                            lcd_wr_regno(0xA1);
                            lcddev.id = lcd_rd_data();
 80027dc:	f7fe fbd2 	bl	8000f84 <lcd_rd_data>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	4b90      	ldr	r3, [pc, #576]	@ (8002a28 <lcd_init+0x8c0>)
 80027e6:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* ����0x57 */
 80027e8:	f7fe fbcc 	bl	8000f84 <lcd_rd_data>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b8d      	ldr	r3, [pc, #564]	@ (8002a28 <lcd_init+0x8c0>)
 80027f2:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 80027f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002a28 <lcd_init+0x8c0>)
 80027f6:	889b      	ldrh	r3, [r3, #4]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002a28 <lcd_init+0x8c0>)
 80027fe:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* ����0x61 */
 8002800:	f7fe fbc0 	bl	8000f84 <lcd_rd_data>
 8002804:	4603      	mov	r3, r0
 8002806:	461a      	mov	r2, r3
 8002808:	4b87      	ldr	r3, [pc, #540]	@ (8002a28 <lcd_init+0x8c0>)
 800280a:	889b      	ldrh	r3, [r3, #4]
 800280c:	4313      	orrs	r3, r2
 800280e:	b29a      	uxth	r2, r3
 8002810:	4b85      	ldr	r3, [pc, #532]	@ (8002a28 <lcd_init+0x8c0>)
 8002812:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* SSD1963���ص�ID��5761H,Ϊ��������,����ǿ������Ϊ1963 */
 8002814:	4b84      	ldr	r3, [pc, #528]	@ (8002a28 <lcd_init+0x8c0>)
 8002816:	889b      	ldrh	r3, [r3, #4]
 8002818:	f245 7261 	movw	r2, #22369	@ 0x5761
 800281c:	4293      	cmp	r3, r2
 800281e:	d103      	bne.n	8002828 <lcd_init+0x6c0>
 8002820:	4b81      	ldr	r3, [pc, #516]	@ (8002a28 <lcd_init+0x8c0>)
 8002822:	f641 1263 	movw	r2, #6499	@ 0x1963
 8002826:	809a      	strh	r2, [r3, #4]
     * ����(������f_putc����), ����, �����ʼ������1, �������ε�����
     * ���� printf ��� !!!!!!!
     */
    //printf("LCD ID:%x\r\n", lcddev.id); /* ��ӡLCD ID */

    if (lcddev.id == 0X7789)
 8002828:	4b7f      	ldr	r3, [pc, #508]	@ (8002a28 <lcd_init+0x8c0>)
 800282a:	889b      	ldrh	r3, [r3, #4]
 800282c:	f247 7289 	movw	r2, #30601	@ 0x7789
 8002830:	4293      	cmp	r3, r2
 8002832:	f040 82f3 	bne.w	8002e1c <lcd_init+0xcb4>
 8002836:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800283a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800283e:	2211      	movs	r2, #17
 8002840:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002842:	4b7a      	ldr	r3, [pc, #488]	@ (8002a2c <lcd_init+0x8c4>)
 8002844:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002848:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800284a:	4b78      	ldr	r3, [pc, #480]	@ (8002a2c <lcd_init+0x8c4>)
 800284c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002850:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002852:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002856:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29a      	uxth	r2, r3
 800285e:	4b74      	ldr	r3, [pc, #464]	@ (8002a30 <lcd_init+0x8c8>)
 8002860:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002862:	4b72      	ldr	r3, [pc, #456]	@ (8002a2c <lcd_init+0x8c4>)
 8002864:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002868:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800286a:	4b70      	ldr	r3, [pc, #448]	@ (8002a2c <lcd_init+0x8c4>)
 800286c:	2280      	movs	r2, #128	@ 0x80
 800286e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002870:	4b6e      	ldr	r3, [pc, #440]	@ (8002a2c <lcd_init+0x8c4>)
 8002872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002876:	611a      	str	r2, [r3, #16]
}
 8002878:	bf00      	nop
    {
        //lcd_ex_st7789_reginit();    /* ִ��ST7789��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 800287a:	2078      	movs	r0, #120	@ 0x78
 800287c:	f006 f846 	bl	800890c <HAL_Delay>
 8002880:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002884:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8002888:	2236      	movs	r2, #54	@ 0x36
 800288a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800288c:	4b67      	ldr	r3, [pc, #412]	@ (8002a2c <lcd_init+0x8c4>)
 800288e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002892:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002894:	4b65      	ldr	r3, [pc, #404]	@ (8002a2c <lcd_init+0x8c4>)
 8002896:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800289a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800289c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80028a0:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	4b61      	ldr	r3, [pc, #388]	@ (8002a30 <lcd_init+0x8c8>)
 80028aa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80028ac:	4b5f      	ldr	r3, [pc, #380]	@ (8002a2c <lcd_init+0x8c4>)
 80028ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028b2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80028b4:	4b5d      	ldr	r3, [pc, #372]	@ (8002a2c <lcd_init+0x8c4>)
 80028b6:	2280      	movs	r2, #128	@ 0x80
 80028b8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80028ba:	4b5c      	ldr	r3, [pc, #368]	@ (8002a2c <lcd_init+0x8c4>)
 80028bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028c0:	611a      	str	r2, [r3, #16]
}
 80028c2:	bf00      	nop

        lcd_wr_regno(0x36);
        lcd_wr_xdata(0x00);
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fe fae7 	bl	8000e98 <lcd_wr_xdata>
 80028ca:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80028ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028d2:	223a      	movs	r2, #58	@ 0x3a
 80028d4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80028d6:	4b55      	ldr	r3, [pc, #340]	@ (8002a2c <lcd_init+0x8c4>)
 80028d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028dc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80028de:	4b53      	ldr	r3, [pc, #332]	@ (8002a2c <lcd_init+0x8c4>)
 80028e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028e4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80028e6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80028ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	4b4f      	ldr	r3, [pc, #316]	@ (8002a30 <lcd_init+0x8c8>)
 80028f4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80028f6:	4b4d      	ldr	r3, [pc, #308]	@ (8002a2c <lcd_init+0x8c4>)
 80028f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80028fc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80028fe:	4b4b      	ldr	r3, [pc, #300]	@ (8002a2c <lcd_init+0x8c4>)
 8002900:	2280      	movs	r2, #128	@ 0x80
 8002902:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002904:	4b49      	ldr	r3, [pc, #292]	@ (8002a2c <lcd_init+0x8c4>)
 8002906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800290a:	611a      	str	r2, [r3, #16]
}
 800290c:	bf00      	nop


        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0X05);
 800290e:	2005      	movs	r0, #5
 8002910:	f7fe fac2 	bl	8000e98 <lcd_wr_xdata>
 8002914:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002918:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 800291c:	22b2      	movs	r2, #178	@ 0xb2
 800291e:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002920:	4b42      	ldr	r3, [pc, #264]	@ (8002a2c <lcd_init+0x8c4>)
 8002922:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002926:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002928:	4b40      	ldr	r3, [pc, #256]	@ (8002a2c <lcd_init+0x8c4>)
 800292a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800292e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002930:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002934:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29a      	uxth	r2, r3
 800293c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a30 <lcd_init+0x8c8>)
 800293e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002940:	4b3a      	ldr	r3, [pc, #232]	@ (8002a2c <lcd_init+0x8c4>)
 8002942:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002946:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002948:	4b38      	ldr	r3, [pc, #224]	@ (8002a2c <lcd_init+0x8c4>)
 800294a:	2280      	movs	r2, #128	@ 0x80
 800294c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800294e:	4b37      	ldr	r3, [pc, #220]	@ (8002a2c <lcd_init+0x8c4>)
 8002950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002954:	611a      	str	r2, [r3, #16]
}
 8002956:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x0C);
 8002958:	200c      	movs	r0, #12
 800295a:	f7fe fa9d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 800295e:	200c      	movs	r0, #12
 8002960:	f7fe fa9a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002964:	2000      	movs	r0, #0
 8002966:	f7fe fa97 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 800296a:	2033      	movs	r0, #51	@ 0x33
 800296c:	f7fe fa94 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8002970:	2033      	movs	r0, #51	@ 0x33
 8002972:	f7fe fa91 	bl	8000e98 <lcd_wr_xdata>
 8002976:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800297a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800297e:	22b7      	movs	r2, #183	@ 0xb7
 8002980:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002982:	4b2a      	ldr	r3, [pc, #168]	@ (8002a2c <lcd_init+0x8c4>)
 8002984:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002988:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800298a:	4b28      	ldr	r3, [pc, #160]	@ (8002a2c <lcd_init+0x8c4>)
 800298c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002990:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002992:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002996:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	b29a      	uxth	r2, r3
 800299e:	4b24      	ldr	r3, [pc, #144]	@ (8002a30 <lcd_init+0x8c8>)
 80029a0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80029a2:	4b22      	ldr	r3, [pc, #136]	@ (8002a2c <lcd_init+0x8c4>)
 80029a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029a8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80029aa:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <lcd_init+0x8c4>)
 80029ac:	2280      	movs	r2, #128	@ 0x80
 80029ae:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80029b0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a2c <lcd_init+0x8c4>)
 80029b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029b6:	611a      	str	r2, [r3, #16]
}
 80029b8:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x35);
 80029ba:	2035      	movs	r0, #53	@ 0x35
 80029bc:	f7fe fa6c 	bl	8000e98 <lcd_wr_xdata>
 80029c0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80029c4:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 80029c8:	22bb      	movs	r2, #187	@ 0xbb
 80029ca:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80029cc:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <lcd_init+0x8c4>)
 80029ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029d2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80029d4:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <lcd_init+0x8c4>)
 80029d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029da:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80029dc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80029e0:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <lcd_init+0x8c8>)
 80029ea:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80029ec:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <lcd_init+0x8c4>)
 80029ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029f2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80029f4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <lcd_init+0x8c4>)
 80029f6:	2280      	movs	r2, #128	@ 0x80
 80029f8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80029fa:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <lcd_init+0x8c4>)
 80029fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a00:	611a      	str	r2, [r3, #16]
}
 8002a02:	bf00      	nop

        lcd_wr_regno(0xBB); /* vcom */
        lcd_wr_xdata(0x32); /* 30 */
 8002a04:	2032      	movs	r0, #50	@ 0x32
 8002a06:	f7fe fa47 	bl	8000e98 <lcd_wr_xdata>
 8002a0a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a0e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a12:	22c0      	movs	r2, #192	@ 0xc0
 8002a14:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a16:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <lcd_init+0x8c4>)
 8002a18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a1c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a1e:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <lcd_init+0x8c4>)
 8002a20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a24:	611a      	str	r2, [r3, #16]
 8002a26:	e005      	b.n	8002a34 <lcd_init+0x8cc>
 8002a28:	200000b0 	.word	0x200000b0
 8002a2c:	40011000 	.word	0x40011000
 8002a30:	40010c00 	.word	0x40010c00
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a34:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a38:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	4bbf      	ldr	r3, [pc, #764]	@ (8002d40 <lcd_init+0xbd8>)
 8002a42:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a44:	4bbf      	ldr	r3, [pc, #764]	@ (8002d44 <lcd_init+0xbdc>)
 8002a46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a4a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a4c:	4bbd      	ldr	r3, [pc, #756]	@ (8002d44 <lcd_init+0xbdc>)
 8002a4e:	2280      	movs	r2, #128	@ 0x80
 8002a50:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a52:	4bbc      	ldr	r3, [pc, #752]	@ (8002d44 <lcd_init+0xbdc>)
 8002a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a58:	611a      	str	r2, [r3, #16]
}
 8002a5a:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x0C);
 8002a5c:	200c      	movs	r0, #12
 8002a5e:	f7fe fa1b 	bl	8000e98 <lcd_wr_xdata>
 8002a62:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a66:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8002a6a:	22c2      	movs	r2, #194	@ 0xc2
 8002a6c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002a6e:	4bb5      	ldr	r3, [pc, #724]	@ (8002d44 <lcd_init+0xbdc>)
 8002a70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a74:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002a76:	4bb3      	ldr	r3, [pc, #716]	@ (8002d44 <lcd_init+0xbdc>)
 8002a78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a7c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002a7e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002a82:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	4bad      	ldr	r3, [pc, #692]	@ (8002d40 <lcd_init+0xbd8>)
 8002a8c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002a8e:	4bad      	ldr	r3, [pc, #692]	@ (8002d44 <lcd_init+0xbdc>)
 8002a90:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a94:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002a96:	4bab      	ldr	r3, [pc, #684]	@ (8002d44 <lcd_init+0xbdc>)
 8002a98:	2280      	movs	r2, #128	@ 0x80
 8002a9a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002a9c:	4ba9      	ldr	r3, [pc, #676]	@ (8002d44 <lcd_init+0xbdc>)
 8002a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa2:	611a      	str	r2, [r3, #16]
}
 8002aa4:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x01);
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f7fe f9f6 	bl	8000e98 <lcd_wr_xdata>
 8002aac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002ab0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ab4:	22c3      	movs	r2, #195	@ 0xc3
 8002ab6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002ab8:	4ba2      	ldr	r3, [pc, #648]	@ (8002d44 <lcd_init+0xbdc>)
 8002aba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002abe:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ac0:	4ba0      	ldr	r3, [pc, #640]	@ (8002d44 <lcd_init+0xbdc>)
 8002ac2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ac6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ac8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002acc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	4b9a      	ldr	r3, [pc, #616]	@ (8002d40 <lcd_init+0xbd8>)
 8002ad6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ad8:	4b9a      	ldr	r3, [pc, #616]	@ (8002d44 <lcd_init+0xbdc>)
 8002ada:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ade:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ae0:	4b98      	ldr	r3, [pc, #608]	@ (8002d44 <lcd_init+0xbdc>)
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ae6:	4b97      	ldr	r3, [pc, #604]	@ (8002d44 <lcd_init+0xbdc>)
 8002ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aec:	611a      	str	r2, [r3, #16]
}
 8002aee:	bf00      	nop

        lcd_wr_regno(0xC3); /* vrh */
        lcd_wr_xdata(0x10); /* 17 0D */
 8002af0:	2010      	movs	r0, #16
 8002af2:	f7fe f9d1 	bl	8000e98 <lcd_wr_xdata>
 8002af6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002afa:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8002afe:	22c4      	movs	r2, #196	@ 0xc4
 8002b00:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b02:	4b90      	ldr	r3, [pc, #576]	@ (8002d44 <lcd_init+0xbdc>)
 8002b04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b08:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b0a:	4b8e      	ldr	r3, [pc, #568]	@ (8002d44 <lcd_init+0xbdc>)
 8002b0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b10:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b12:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b16:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	4b88      	ldr	r3, [pc, #544]	@ (8002d40 <lcd_init+0xbd8>)
 8002b20:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b22:	4b88      	ldr	r3, [pc, #544]	@ (8002d44 <lcd_init+0xbdc>)
 8002b24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b28:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b2a:	4b86      	ldr	r3, [pc, #536]	@ (8002d44 <lcd_init+0xbdc>)
 8002b2c:	2280      	movs	r2, #128	@ 0x80
 8002b2e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b30:	4b84      	ldr	r3, [pc, #528]	@ (8002d44 <lcd_init+0xbdc>)
 8002b32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b36:	611a      	str	r2, [r3, #16]
}
 8002b38:	bf00      	nop

        lcd_wr_regno(0xC4); /* vdv */
        lcd_wr_xdata(0x20); /* 20 */
 8002b3a:	2020      	movs	r0, #32
 8002b3c:	f7fe f9ac 	bl	8000e98 <lcd_wr_xdata>
 8002b40:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b44:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b48:	22c6      	movs	r2, #198	@ 0xc6
 8002b4a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b4c:	4b7d      	ldr	r3, [pc, #500]	@ (8002d44 <lcd_init+0xbdc>)
 8002b4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b52:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b54:	4b7b      	ldr	r3, [pc, #492]	@ (8002d44 <lcd_init+0xbdc>)
 8002b56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b5a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002b5c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b60:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b75      	ldr	r3, [pc, #468]	@ (8002d40 <lcd_init+0xbd8>)
 8002b6a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002b6c:	4b75      	ldr	r3, [pc, #468]	@ (8002d44 <lcd_init+0xbdc>)
 8002b6e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002b72:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002b74:	4b73      	ldr	r3, [pc, #460]	@ (8002d44 <lcd_init+0xbdc>)
 8002b76:	2280      	movs	r2, #128	@ 0x80
 8002b78:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002b7a:	4b72      	ldr	r3, [pc, #456]	@ (8002d44 <lcd_init+0xbdc>)
 8002b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b80:	611a      	str	r2, [r3, #16]
}
 8002b82:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x0f);
 8002b84:	200f      	movs	r0, #15
 8002b86:	f7fe f987 	bl	8000e98 <lcd_wr_xdata>
 8002b8a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002b8e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8002b92:	22d0      	movs	r2, #208	@ 0xd0
 8002b94:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002b96:	4b6b      	ldr	r3, [pc, #428]	@ (8002d44 <lcd_init+0xbdc>)
 8002b98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b9c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002b9e:	4b69      	ldr	r3, [pc, #420]	@ (8002d44 <lcd_init+0xbdc>)
 8002ba0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ba4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ba6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002baa:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b63      	ldr	r3, [pc, #396]	@ (8002d40 <lcd_init+0xbd8>)
 8002bb4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002bb6:	4b63      	ldr	r3, [pc, #396]	@ (8002d44 <lcd_init+0xbdc>)
 8002bb8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002bbc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002bbe:	4b61      	ldr	r3, [pc, #388]	@ (8002d44 <lcd_init+0xbdc>)
 8002bc0:	2280      	movs	r2, #128	@ 0x80
 8002bc2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002bc4:	4b5f      	ldr	r3, [pc, #380]	@ (8002d44 <lcd_init+0xbdc>)
 8002bc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bca:	611a      	str	r2, [r3, #16]
}
 8002bcc:	bf00      	nop

        lcd_wr_regno(0xD0);
        lcd_wr_xdata(0xA4);
 8002bce:	20a4      	movs	r0, #164	@ 0xa4
 8002bd0:	f7fe f962 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 8002bd4:	20a1      	movs	r0, #161	@ 0xa1
 8002bd6:	f7fe f95f 	bl	8000e98 <lcd_wr_xdata>
 8002bda:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bde:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002be2:	22e0      	movs	r2, #224	@ 0xe0
 8002be4:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002be6:	4b57      	ldr	r3, [pc, #348]	@ (8002d44 <lcd_init+0xbdc>)
 8002be8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002bee:	4b55      	ldr	r3, [pc, #340]	@ (8002d44 <lcd_init+0xbdc>)
 8002bf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bf4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002bf6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002bfa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	4b4f      	ldr	r3, [pc, #316]	@ (8002d40 <lcd_init+0xbd8>)
 8002c04:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c06:	4b4f      	ldr	r3, [pc, #316]	@ (8002d44 <lcd_init+0xbdc>)
 8002c08:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c0c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002c0e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d44 <lcd_init+0xbdc>)
 8002c10:	2280      	movs	r2, #128	@ 0x80
 8002c12:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002c14:	4b4b      	ldr	r3, [pc, #300]	@ (8002d44 <lcd_init+0xbdc>)
 8002c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c1a:	611a      	str	r2, [r3, #16]
}
 8002c1c:	bf00      	nop

        lcd_wr_regno(0xE0); /* Set Gamma  */
        lcd_wr_xdata(0xd0);
 8002c1e:	20d0      	movs	r0, #208	@ 0xd0
 8002c20:	f7fe f93a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fe f937 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8002c2a:	2002      	movs	r0, #2
 8002c2c:	f7fe f934 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002c30:	2007      	movs	r0, #7
 8002c32:	f7fe f931 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 8002c36:	200a      	movs	r0, #10
 8002c38:	f7fe f92e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002c3c:	2028      	movs	r0, #40	@ 0x28
 8002c3e:	f7fe f92b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8002c42:	2032      	movs	r0, #50	@ 0x32
 8002c44:	f7fe f928 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0X44);
 8002c48:	2044      	movs	r0, #68	@ 0x44
 8002c4a:	f7fe f925 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x42);
 8002c4e:	2042      	movs	r0, #66	@ 0x42
 8002c50:	f7fe f922 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 8002c54:	2006      	movs	r0, #6
 8002c56:	f7fe f91f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 8002c5a:	200e      	movs	r0, #14
 8002c5c:	f7fe f91c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8002c60:	2012      	movs	r0, #18
 8002c62:	f7fe f919 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8002c66:	2014      	movs	r0, #20
 8002c68:	f7fe f916 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002c6c:	2017      	movs	r0, #23
 8002c6e:	f7fe f913 	bl	8000e98 <lcd_wr_xdata>
 8002c72:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c76:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8002c7a:	22e1      	movs	r2, #225	@ 0xe1
 8002c7c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002c7e:	4b31      	ldr	r3, [pc, #196]	@ (8002d44 <lcd_init+0xbdc>)
 8002c80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c84:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002c86:	4b2f      	ldr	r3, [pc, #188]	@ (8002d44 <lcd_init+0xbdc>)
 8002c88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c8c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002c8e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002c92:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <lcd_init+0xbd8>)
 8002c9c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002c9e:	4b29      	ldr	r3, [pc, #164]	@ (8002d44 <lcd_init+0xbdc>)
 8002ca0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ca4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002ca6:	4b27      	ldr	r3, [pc, #156]	@ (8002d44 <lcd_init+0xbdc>)
 8002ca8:	2280      	movs	r2, #128	@ 0x80
 8002caa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002cac:	4b25      	ldr	r3, [pc, #148]	@ (8002d44 <lcd_init+0xbdc>)
 8002cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb2:	611a      	str	r2, [r3, #16]
}
 8002cb4:	bf00      	nop


        lcd_wr_regno(0XE1);  /* Set Gamma */
        lcd_wr_xdata(0xd0);
 8002cb6:	20d0      	movs	r0, #208	@ 0xd0
 8002cb8:	f7fe f8ee 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f7fe f8eb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8002cc2:	2002      	movs	r0, #2
 8002cc4:	f7fe f8e8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8002cc8:	2007      	movs	r0, #7
 8002cca:	f7fe f8e5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0a);
 8002cce:	200a      	movs	r0, #10
 8002cd0:	f7fe f8e2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8002cd4:	2028      	movs	r0, #40	@ 0x28
 8002cd6:	f7fe f8df 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x31);
 8002cda:	2031      	movs	r0, #49	@ 0x31
 8002cdc:	f7fe f8dc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8002ce0:	2054      	movs	r0, #84	@ 0x54
 8002ce2:	f7fe f8d9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x47);
 8002ce6:	2047      	movs	r0, #71	@ 0x47
 8002ce8:	f7fe f8d6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0e);
 8002cec:	200e      	movs	r0, #14
 8002cee:	f7fe f8d3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x1c);
 8002cf2:	201c      	movs	r0, #28
 8002cf4:	f7fe f8d0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8002cf8:	2017      	movs	r0, #23
 8002cfa:	f7fe f8cd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x1b);
 8002cfe:	201b      	movs	r0, #27
 8002d00:	f7fe f8ca 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x1e);
 8002d04:	201e      	movs	r0, #30
 8002d06:	f7fe f8c7 	bl	8000e98 <lcd_wr_xdata>
 8002d0a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d0e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d12:	222a      	movs	r2, #42	@ 0x2a
 8002d14:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <lcd_init+0xbdc>)
 8002d18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d1c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d1e:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <lcd_init+0xbdc>)
 8002d20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d24:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d26:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	4b03      	ldr	r3, [pc, #12]	@ (8002d40 <lcd_init+0xbd8>)
 8002d34:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d36:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <lcd_init+0xbdc>)
 8002d38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d3c:	611a      	str	r2, [r3, #16]
 8002d3e:	e003      	b.n	8002d48 <lcd_init+0xbe0>
 8002d40:	40010c00 	.word	0x40010c00
 8002d44:	40011000 	.word	0x40011000
    LCD_WR(1);
 8002d48:	4b32      	ldr	r3, [pc, #200]	@ (8002e14 <lcd_init+0xcac>)
 8002d4a:	2280      	movs	r2, #128	@ 0x80
 8002d4c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002d4e:	4b31      	ldr	r3, [pc, #196]	@ (8002e14 <lcd_init+0xcac>)
 8002d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d54:	611a      	str	r2, [r3, #16]
}
 8002d56:	bf00      	nop


        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fe f89d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fe f89a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fe f897 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 8002d6a:	20ef      	movs	r0, #239	@ 0xef
 8002d6c:	f7fe f894 	bl	8000e98 <lcd_wr_xdata>
 8002d70:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d74:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8002d78:	222b      	movs	r2, #43	@ 0x2b
 8002d7a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002d7c:	4b25      	ldr	r3, [pc, #148]	@ (8002e14 <lcd_init+0xcac>)
 8002d7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d82:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002d84:	4b23      	ldr	r3, [pc, #140]	@ (8002e14 <lcd_init+0xcac>)
 8002d86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d8a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002d8c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002d90:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	4b1f      	ldr	r3, [pc, #124]	@ (8002e18 <lcd_init+0xcb0>)
 8002d9a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e14 <lcd_init+0xcac>)
 8002d9e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002da2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002da4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e14 <lcd_init+0xcac>)
 8002da6:	2280      	movs	r2, #128	@ 0x80
 8002da8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002daa:	4b1a      	ldr	r3, [pc, #104]	@ (8002e14 <lcd_init+0xcac>)
 8002dac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db0:	611a      	str	r2, [r3, #16]
}
 8002db2:	bf00      	nop

        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fe f86f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7fe f86c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	f7fe f869 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8002dc6:	203f      	movs	r0, #63	@ 0x3f
 8002dc8:	f7fe f866 	bl	8000e98 <lcd_wr_xdata>
 8002dcc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002dd0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dd4:	2229      	movs	r2, #41	@ 0x29
 8002dd6:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e14 <lcd_init+0xcac>)
 8002dda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002dde:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002de0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e14 <lcd_init+0xcac>)
 8002de2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002de6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002de8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8002dec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <lcd_init+0xcb0>)
 8002df6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <lcd_init+0xcac>)
 8002dfa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002dfe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e00:	4b04      	ldr	r3, [pc, #16]	@ (8002e14 <lcd_init+0xcac>)
 8002e02:	2280      	movs	r2, #128	@ 0x80
 8002e04:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e06:	4b03      	ldr	r3, [pc, #12]	@ (8002e14 <lcd_init+0xcac>)
 8002e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e0c:	611a      	str	r2, [r3, #16]
}
 8002e0e:	f004 b8f4 	b.w	8006ffa <lcd_init+0x4e92>
 8002e12:	bf00      	nop
 8002e14:	40011000 	.word	0x40011000
 8002e18:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0X9341)
 8002e1c:	4bb9      	ldr	r3, [pc, #740]	@ (8003104 <lcd_init+0xf9c>)
 8002e1e:	889b      	ldrh	r3, [r3, #4]
 8002e20:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002e24:	4293      	cmp	r3, r2
 8002e26:	f040 83a1 	bne.w	800356c <lcd_init+0x1404>
 8002e2a:	23cf      	movs	r3, #207	@ 0xcf
 8002e2c:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e30:	4bb5      	ldr	r3, [pc, #724]	@ (8003108 <lcd_init+0xfa0>)
 8002e32:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e36:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e38:	4bb3      	ldr	r3, [pc, #716]	@ (8003108 <lcd_init+0xfa0>)
 8002e3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e3e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e40:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	4bb1      	ldr	r3, [pc, #708]	@ (800310c <lcd_init+0xfa4>)
 8002e48:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e4a:	4baf      	ldr	r3, [pc, #700]	@ (8003108 <lcd_init+0xfa0>)
 8002e4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e50:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e52:	4bad      	ldr	r3, [pc, #692]	@ (8003108 <lcd_init+0xfa0>)
 8002e54:	2280      	movs	r2, #128	@ 0x80
 8002e56:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002e58:	4bab      	ldr	r3, [pc, #684]	@ (8003108 <lcd_init+0xfa0>)
 8002e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e5e:	611a      	str	r2, [r3, #16]
}
 8002e60:	bf00      	nop
    {
        //lcd_ex_ili9341_reginit();   /* ִ��ILI9341��ʼ�� */
        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7fe f818 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xC1);
 8002e68:	20c1      	movs	r0, #193	@ 0xc1
 8002e6a:	f7fe f815 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0X30);
 8002e6e:	2030      	movs	r0, #48	@ 0x30
 8002e70:	f7fe f812 	bl	8000e98 <lcd_wr_xdata>
 8002e74:	23ed      	movs	r3, #237	@ 0xed
 8002e76:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002e7a:	4ba3      	ldr	r3, [pc, #652]	@ (8003108 <lcd_init+0xfa0>)
 8002e7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e80:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002e82:	4ba1      	ldr	r3, [pc, #644]	@ (8003108 <lcd_init+0xfa0>)
 8002e84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e88:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002e8a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	4b9e      	ldr	r3, [pc, #632]	@ (800310c <lcd_init+0xfa4>)
 8002e92:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002e94:	4b9c      	ldr	r3, [pc, #624]	@ (8003108 <lcd_init+0xfa0>)
 8002e96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e9a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002e9c:	4b9a      	ldr	r3, [pc, #616]	@ (8003108 <lcd_init+0xfa0>)
 8002e9e:	2280      	movs	r2, #128	@ 0x80
 8002ea0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ea2:	4b99      	ldr	r3, [pc, #612]	@ (8003108 <lcd_init+0xfa0>)
 8002ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ea8:	611a      	str	r2, [r3, #16]
}
 8002eaa:	bf00      	nop
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x64);
 8002eac:	2064      	movs	r0, #100	@ 0x64
 8002eae:	f7fd fff3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8002eb2:	2003      	movs	r0, #3
 8002eb4:	f7fd fff0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0X12);
 8002eb8:	2012      	movs	r0, #18
 8002eba:	f7fd ffed 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0X81);
 8002ebe:	2081      	movs	r0, #129	@ 0x81
 8002ec0:	f7fd ffea 	bl	8000e98 <lcd_wr_xdata>
 8002ec4:	23e8      	movs	r3, #232	@ 0xe8
 8002ec6:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002eca:	4b8f      	ldr	r3, [pc, #572]	@ (8003108 <lcd_init+0xfa0>)
 8002ecc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ed0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ed2:	4b8d      	ldr	r3, [pc, #564]	@ (8003108 <lcd_init+0xfa0>)
 8002ed4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ed8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002eda:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	4b8a      	ldr	r3, [pc, #552]	@ (800310c <lcd_init+0xfa4>)
 8002ee2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002ee4:	4b88      	ldr	r3, [pc, #544]	@ (8003108 <lcd_init+0xfa0>)
 8002ee6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002eea:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002eec:	4b86      	ldr	r3, [pc, #536]	@ (8003108 <lcd_init+0xfa0>)
 8002eee:	2280      	movs	r2, #128	@ 0x80
 8002ef0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002ef2:	4b85      	ldr	r3, [pc, #532]	@ (8003108 <lcd_init+0xfa0>)
 8002ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef8:	611a      	str	r2, [r3, #16]
}
 8002efa:	bf00      	nop
        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x85);
 8002efc:	2085      	movs	r0, #133	@ 0x85
 8002efe:	f7fd ffcb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8002f02:	2010      	movs	r0, #16
 8002f04:	f7fd ffc8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 8002f08:	207a      	movs	r0, #122	@ 0x7a
 8002f0a:	f7fd ffc5 	bl	8000e98 <lcd_wr_xdata>
 8002f0e:	23cb      	movs	r3, #203	@ 0xcb
 8002f10:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f14:	4b7c      	ldr	r3, [pc, #496]	@ (8003108 <lcd_init+0xfa0>)
 8002f16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f1a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f1c:	4b7a      	ldr	r3, [pc, #488]	@ (8003108 <lcd_init+0xfa0>)
 8002f1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f22:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f24:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	4b78      	ldr	r3, [pc, #480]	@ (800310c <lcd_init+0xfa4>)
 8002f2c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f2e:	4b76      	ldr	r3, [pc, #472]	@ (8003108 <lcd_init+0xfa0>)
 8002f30:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f34:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f36:	4b74      	ldr	r3, [pc, #464]	@ (8003108 <lcd_init+0xfa0>)
 8002f38:	2280      	movs	r2, #128	@ 0x80
 8002f3a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f3c:	4b72      	ldr	r3, [pc, #456]	@ (8003108 <lcd_init+0xfa0>)
 8002f3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f42:	611a      	str	r2, [r3, #16]
}
 8002f44:	bf00      	nop
        lcd_wr_regno(0xCB);
        lcd_wr_xdata(0x39);
 8002f46:	2039      	movs	r0, #57	@ 0x39
 8002f48:	f7fd ffa6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8002f4c:	202c      	movs	r0, #44	@ 0x2c
 8002f4e:	f7fd ffa3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fd ffa0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8002f58:	2034      	movs	r0, #52	@ 0x34
 8002f5a:	f7fd ff9d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 8002f5e:	2002      	movs	r0, #2
 8002f60:	f7fd ff9a 	bl	8000e98 <lcd_wr_xdata>
 8002f64:	23f7      	movs	r3, #247	@ 0xf7
 8002f66:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002f6a:	4b67      	ldr	r3, [pc, #412]	@ (8003108 <lcd_init+0xfa0>)
 8002f6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f70:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002f72:	4b65      	ldr	r3, [pc, #404]	@ (8003108 <lcd_init+0xfa0>)
 8002f74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f78:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002f7a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	4b62      	ldr	r3, [pc, #392]	@ (800310c <lcd_init+0xfa4>)
 8002f82:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002f84:	4b60      	ldr	r3, [pc, #384]	@ (8003108 <lcd_init+0xfa0>)
 8002f86:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f8a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8003108 <lcd_init+0xfa0>)
 8002f8e:	2280      	movs	r2, #128	@ 0x80
 8002f90:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002f92:	4b5d      	ldr	r3, [pc, #372]	@ (8003108 <lcd_init+0xfa0>)
 8002f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f98:	611a      	str	r2, [r3, #16]
}
 8002f9a:	bf00      	nop
        lcd_wr_regno(0xF7);
        lcd_wr_xdata(0x20);
 8002f9c:	2020      	movs	r0, #32
 8002f9e:	f7fd ff7b 	bl	8000e98 <lcd_wr_xdata>
 8002fa2:	23ea      	movs	r3, #234	@ 0xea
 8002fa4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002fa8:	4b57      	ldr	r3, [pc, #348]	@ (8003108 <lcd_init+0xfa0>)
 8002faa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002fb0:	4b55      	ldr	r3, [pc, #340]	@ (8003108 <lcd_init+0xfa0>)
 8002fb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fb6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002fb8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	4b53      	ldr	r3, [pc, #332]	@ (800310c <lcd_init+0xfa4>)
 8002fc0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8002fc2:	4b51      	ldr	r3, [pc, #324]	@ (8003108 <lcd_init+0xfa0>)
 8002fc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002fc8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8002fca:	4b4f      	ldr	r3, [pc, #316]	@ (8003108 <lcd_init+0xfa0>)
 8002fcc:	2280      	movs	r2, #128	@ 0x80
 8002fce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8002fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8003108 <lcd_init+0xfa0>)
 8002fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fd6:	611a      	str	r2, [r3, #16]
}
 8002fd8:	bf00      	nop
        lcd_wr_regno(0xEA);
        lcd_wr_xdata(0x00);
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f7fd ff5c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7fd ff59 	bl	8000e98 <lcd_wr_xdata>
 8002fe6:	23c0      	movs	r3, #192	@ 0xc0
 8002fe8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8002fec:	4b46      	ldr	r3, [pc, #280]	@ (8003108 <lcd_init+0xfa0>)
 8002fee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ff2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8002ff4:	4b44      	ldr	r3, [pc, #272]	@ (8003108 <lcd_init+0xfa0>)
 8002ff6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ffa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8002ffc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003000:	b29a      	uxth	r2, r3
 8003002:	4b42      	ldr	r3, [pc, #264]	@ (800310c <lcd_init+0xfa4>)
 8003004:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003006:	4b40      	ldr	r3, [pc, #256]	@ (8003108 <lcd_init+0xfa0>)
 8003008:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800300c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800300e:	4b3e      	ldr	r3, [pc, #248]	@ (8003108 <lcd_init+0xfa0>)
 8003010:	2280      	movs	r2, #128	@ 0x80
 8003012:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003014:	4b3c      	ldr	r3, [pc, #240]	@ (8003108 <lcd_init+0xfa0>)
 8003016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800301a:	611a      	str	r2, [r3, #16]
}
 800301c:	bf00      	nop
        lcd_wr_regno(0xC0); /* Power control */
        lcd_wr_xdata(0x1B); /* VRH[5:0] */
 800301e:	201b      	movs	r0, #27
 8003020:	f7fd ff3a 	bl	8000e98 <lcd_wr_xdata>
 8003024:	23c1      	movs	r3, #193	@ 0xc1
 8003026:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800302a:	4b37      	ldr	r3, [pc, #220]	@ (8003108 <lcd_init+0xfa0>)
 800302c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003030:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003032:	4b35      	ldr	r3, [pc, #212]	@ (8003108 <lcd_init+0xfa0>)
 8003034:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003038:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800303a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800303e:	b29a      	uxth	r2, r3
 8003040:	4b32      	ldr	r3, [pc, #200]	@ (800310c <lcd_init+0xfa4>)
 8003042:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003044:	4b30      	ldr	r3, [pc, #192]	@ (8003108 <lcd_init+0xfa0>)
 8003046:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800304a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800304c:	4b2e      	ldr	r3, [pc, #184]	@ (8003108 <lcd_init+0xfa0>)
 800304e:	2280      	movs	r2, #128	@ 0x80
 8003050:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003052:	4b2d      	ldr	r3, [pc, #180]	@ (8003108 <lcd_init+0xfa0>)
 8003054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003058:	611a      	str	r2, [r3, #16]
}
 800305a:	bf00      	nop
        lcd_wr_regno(0xC1); /* Power control */
        lcd_wr_xdata(0x01); /* SAP[2:0];BT[3:0] */
 800305c:	2001      	movs	r0, #1
 800305e:	f7fd ff1b 	bl	8000e98 <lcd_wr_xdata>
 8003062:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003066:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800306a:	22c5      	movs	r2, #197	@ 0xc5
 800306c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800306e:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <lcd_init+0xfa0>)
 8003070:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003074:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003076:	4b24      	ldr	r3, [pc, #144]	@ (8003108 <lcd_init+0xfa0>)
 8003078:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800307c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800307e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003082:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29a      	uxth	r2, r3
 800308a:	4b20      	ldr	r3, [pc, #128]	@ (800310c <lcd_init+0xfa4>)
 800308c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800308e:	4b1e      	ldr	r3, [pc, #120]	@ (8003108 <lcd_init+0xfa0>)
 8003090:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003094:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003096:	4b1c      	ldr	r3, [pc, #112]	@ (8003108 <lcd_init+0xfa0>)
 8003098:	2280      	movs	r2, #128	@ 0x80
 800309a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800309c:	4b1a      	ldr	r3, [pc, #104]	@ (8003108 <lcd_init+0xfa0>)
 800309e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030a2:	611a      	str	r2, [r3, #16]
}
 80030a4:	bf00      	nop
        lcd_wr_regno(0xC5); /* VCM control */
        lcd_wr_xdata(0x30); /* 3F */
 80030a6:	2030      	movs	r0, #48	@ 0x30
 80030a8:	f7fd fef6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x30); /* 3C */
 80030ac:	2030      	movs	r0, #48	@ 0x30
 80030ae:	f7fd fef3 	bl	8000e98 <lcd_wr_xdata>
 80030b2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80030b6:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 80030ba:	22c7      	movs	r2, #199	@ 0xc7
 80030bc:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80030be:	4b12      	ldr	r3, [pc, #72]	@ (8003108 <lcd_init+0xfa0>)
 80030c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030c4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80030c6:	4b10      	ldr	r3, [pc, #64]	@ (8003108 <lcd_init+0xfa0>)
 80030c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030cc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80030ce:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80030d2:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29a      	uxth	r2, r3
 80030da:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <lcd_init+0xfa4>)
 80030dc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80030de:	4b0a      	ldr	r3, [pc, #40]	@ (8003108 <lcd_init+0xfa0>)
 80030e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80030e4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80030e6:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <lcd_init+0xfa0>)
 80030e8:	2280      	movs	r2, #128	@ 0x80
 80030ea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80030ec:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <lcd_init+0xfa0>)
 80030ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f2:	611a      	str	r2, [r3, #16]
}
 80030f4:	bf00      	nop
        lcd_wr_regno(0xC7); /* VCM control2 */
        lcd_wr_xdata(0XB7);
 80030f6:	20b7      	movs	r0, #183	@ 0xb7
 80030f8:	f7fd fece 	bl	8000e98 <lcd_wr_xdata>
 80030fc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003100:	e006      	b.n	8003110 <lcd_init+0xfa8>
 8003102:	bf00      	nop
 8003104:	200000b0 	.word	0x200000b0
 8003108:	40011000 	.word	0x40011000
 800310c:	40010c00 	.word	0x40010c00
 8003110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003114:	2236      	movs	r2, #54	@ 0x36
 8003116:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003118:	4bc1      	ldr	r3, [pc, #772]	@ (8003420 <lcd_init+0x12b8>)
 800311a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800311e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003120:	4bbf      	ldr	r3, [pc, #764]	@ (8003420 <lcd_init+0x12b8>)
 8003122:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003126:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003128:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800312c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b29a      	uxth	r2, r3
 8003134:	4bbb      	ldr	r3, [pc, #748]	@ (8003424 <lcd_init+0x12bc>)
 8003136:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003138:	4bb9      	ldr	r3, [pc, #740]	@ (8003420 <lcd_init+0x12b8>)
 800313a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800313e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003140:	4bb7      	ldr	r3, [pc, #732]	@ (8003420 <lcd_init+0x12b8>)
 8003142:	2280      	movs	r2, #128	@ 0x80
 8003144:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003146:	4bb6      	ldr	r3, [pc, #728]	@ (8003420 <lcd_init+0x12b8>)
 8003148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800314c:	611a      	str	r2, [r3, #16]
}
 800314e:	bf00      	nop
        lcd_wr_regno(0x36); /*  Memory Access Control */
        lcd_wr_xdata(0x48);
 8003150:	2048      	movs	r0, #72	@ 0x48
 8003152:	f7fd fea1 	bl	8000e98 <lcd_wr_xdata>
 8003156:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800315a:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800315e:	223a      	movs	r2, #58	@ 0x3a
 8003160:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003162:	4baf      	ldr	r3, [pc, #700]	@ (8003420 <lcd_init+0x12b8>)
 8003164:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003168:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800316a:	4bad      	ldr	r3, [pc, #692]	@ (8003420 <lcd_init+0x12b8>)
 800316c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003170:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003172:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003176:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	b29a      	uxth	r2, r3
 800317e:	4ba9      	ldr	r3, [pc, #676]	@ (8003424 <lcd_init+0x12bc>)
 8003180:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003182:	4ba7      	ldr	r3, [pc, #668]	@ (8003420 <lcd_init+0x12b8>)
 8003184:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003188:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800318a:	4ba5      	ldr	r3, [pc, #660]	@ (8003420 <lcd_init+0x12b8>)
 800318c:	2280      	movs	r2, #128	@ 0x80
 800318e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003190:	4ba3      	ldr	r3, [pc, #652]	@ (8003420 <lcd_init+0x12b8>)
 8003192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003196:	611a      	str	r2, [r3, #16]
}
 8003198:	bf00      	nop
        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 800319a:	2055      	movs	r0, #85	@ 0x55
 800319c:	f7fd fe7c 	bl	8000e98 <lcd_wr_xdata>
 80031a0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80031a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031a8:	22b1      	movs	r2, #177	@ 0xb1
 80031aa:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031ac:	4b9c      	ldr	r3, [pc, #624]	@ (8003420 <lcd_init+0x12b8>)
 80031ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031b2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80031b4:	4b9a      	ldr	r3, [pc, #616]	@ (8003420 <lcd_init+0x12b8>)
 80031b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031ba:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80031bc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80031c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	4b96      	ldr	r3, [pc, #600]	@ (8003424 <lcd_init+0x12bc>)
 80031ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80031cc:	4b94      	ldr	r3, [pc, #592]	@ (8003420 <lcd_init+0x12b8>)
 80031ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80031d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80031d4:	4b92      	ldr	r3, [pc, #584]	@ (8003420 <lcd_init+0x12b8>)
 80031d6:	2280      	movs	r2, #128	@ 0x80
 80031d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80031da:	4b91      	ldr	r3, [pc, #580]	@ (8003420 <lcd_init+0x12b8>)
 80031dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031e0:	611a      	str	r2, [r3, #16]
}
 80031e2:	bf00      	nop
        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x00);
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7fd fe57 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x1A);
 80031ea:	201a      	movs	r0, #26
 80031ec:	f7fd fe54 	bl	8000e98 <lcd_wr_xdata>
 80031f0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80031f4:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80031f8:	22b6      	movs	r2, #182	@ 0xb6
 80031fa:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80031fc:	4b88      	ldr	r3, [pc, #544]	@ (8003420 <lcd_init+0x12b8>)
 80031fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003202:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003204:	4b86      	ldr	r3, [pc, #536]	@ (8003420 <lcd_init+0x12b8>)
 8003206:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800320a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800320c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003210:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29a      	uxth	r2, r3
 8003218:	4b82      	ldr	r3, [pc, #520]	@ (8003424 <lcd_init+0x12bc>)
 800321a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800321c:	4b80      	ldr	r3, [pc, #512]	@ (8003420 <lcd_init+0x12b8>)
 800321e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003222:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003224:	4b7e      	ldr	r3, [pc, #504]	@ (8003420 <lcd_init+0x12b8>)
 8003226:	2280      	movs	r2, #128	@ 0x80
 8003228:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800322a:	4b7d      	ldr	r3, [pc, #500]	@ (8003420 <lcd_init+0x12b8>)
 800322c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003230:	611a      	str	r2, [r3, #16]
}
 8003232:	bf00      	nop
        lcd_wr_regno(0xB6); /*  Display Function Control */
        lcd_wr_xdata(0x0A);
 8003234:	200a      	movs	r0, #10
 8003236:	f7fd fe2f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 800323a:	20a2      	movs	r0, #162	@ 0xa2
 800323c:	f7fd fe2c 	bl	8000e98 <lcd_wr_xdata>
 8003240:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003244:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003248:	22f2      	movs	r2, #242	@ 0xf2
 800324a:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800324c:	4b74      	ldr	r3, [pc, #464]	@ (8003420 <lcd_init+0x12b8>)
 800324e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003252:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003254:	4b72      	ldr	r3, [pc, #456]	@ (8003420 <lcd_init+0x12b8>)
 8003256:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800325a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800325c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003260:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29a      	uxth	r2, r3
 8003268:	4b6e      	ldr	r3, [pc, #440]	@ (8003424 <lcd_init+0x12bc>)
 800326a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800326c:	4b6c      	ldr	r3, [pc, #432]	@ (8003420 <lcd_init+0x12b8>)
 800326e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003272:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003274:	4b6a      	ldr	r3, [pc, #424]	@ (8003420 <lcd_init+0x12b8>)
 8003276:	2280      	movs	r2, #128	@ 0x80
 8003278:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800327a:	4b69      	ldr	r3, [pc, #420]	@ (8003420 <lcd_init+0x12b8>)
 800327c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003280:	611a      	str	r2, [r3, #16]
}
 8003282:	bf00      	nop
        lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
        lcd_wr_xdata(0x00);
 8003284:	2000      	movs	r0, #0
 8003286:	f7fd fe07 	bl	8000e98 <lcd_wr_xdata>
 800328a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800328e:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8003292:	2226      	movs	r2, #38	@ 0x26
 8003294:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003296:	4b62      	ldr	r3, [pc, #392]	@ (8003420 <lcd_init+0x12b8>)
 8003298:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800329c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800329e:	4b60      	ldr	r3, [pc, #384]	@ (8003420 <lcd_init+0x12b8>)
 80032a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032a4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80032a6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80032aa:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003424 <lcd_init+0x12bc>)
 80032b4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80032b6:	4b5a      	ldr	r3, [pc, #360]	@ (8003420 <lcd_init+0x12b8>)
 80032b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032bc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80032be:	4b58      	ldr	r3, [pc, #352]	@ (8003420 <lcd_init+0x12b8>)
 80032c0:	2280      	movs	r2, #128	@ 0x80
 80032c2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80032c4:	4b56      	ldr	r3, [pc, #344]	@ (8003420 <lcd_init+0x12b8>)
 80032c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ca:	611a      	str	r2, [r3, #16]
}
 80032cc:	bf00      	nop
        lcd_wr_regno(0x26); /* Gamma curve selected */
        lcd_wr_xdata(0x01);
 80032ce:	2001      	movs	r0, #1
 80032d0:	f7fd fde2 	bl	8000e98 <lcd_wr_xdata>
 80032d4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80032d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032dc:	22e0      	movs	r2, #224	@ 0xe0
 80032de:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80032e0:	4b4f      	ldr	r3, [pc, #316]	@ (8003420 <lcd_init+0x12b8>)
 80032e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80032e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003420 <lcd_init+0x12b8>)
 80032ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80032f0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80032f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	4b49      	ldr	r3, [pc, #292]	@ (8003424 <lcd_init+0x12bc>)
 80032fe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003300:	4b47      	ldr	r3, [pc, #284]	@ (8003420 <lcd_init+0x12b8>)
 8003302:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003306:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003308:	4b45      	ldr	r3, [pc, #276]	@ (8003420 <lcd_init+0x12b8>)
 800330a:	2280      	movs	r2, #128	@ 0x80
 800330c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800330e:	4b44      	ldr	r3, [pc, #272]	@ (8003420 <lcd_init+0x12b8>)
 8003310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003314:	611a      	str	r2, [r3, #16]
}
 8003316:	bf00      	nop
        lcd_wr_regno(0xE0); /* Set Gamma */
        lcd_wr_xdata(0x0F);
 8003318:	200f      	movs	r0, #15
 800331a:	f7fd fdbd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 800331e:	202a      	movs	r0, #42	@ 0x2a
 8003320:	f7fd fdba 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 8003324:	2028      	movs	r0, #40	@ 0x28
 8003326:	f7fd fdb7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 800332a:	2008      	movs	r0, #8
 800332c:	f7fd fdb4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 8003330:	200e      	movs	r0, #14
 8003332:	f7fd fdb1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 8003336:	2008      	movs	r0, #8
 8003338:	f7fd fdae 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 800333c:	2054      	movs	r0, #84	@ 0x54
 800333e:	f7fd fdab 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0XA9);
 8003342:	20a9      	movs	r0, #169	@ 0xa9
 8003344:	f7fd fda8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8003348:	2043      	movs	r0, #67	@ 0x43
 800334a:	f7fd fda5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);
 800334e:	200a      	movs	r0, #10
 8003350:	f7fd fda2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8003354:	200f      	movs	r0, #15
 8003356:	f7fd fd9f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800335a:	2000      	movs	r0, #0
 800335c:	f7fd fd9c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003360:	2000      	movs	r0, #0
 8003362:	f7fd fd99 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003366:	2000      	movs	r0, #0
 8003368:	f7fd fd96 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800336c:	2000      	movs	r0, #0
 800336e:	f7fd fd93 	bl	8000e98 <lcd_wr_xdata>
 8003372:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003376:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800337a:	22e1      	movs	r2, #225	@ 0xe1
 800337c:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800337e:	4b28      	ldr	r3, [pc, #160]	@ (8003420 <lcd_init+0x12b8>)
 8003380:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003384:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003386:	4b26      	ldr	r3, [pc, #152]	@ (8003420 <lcd_init+0x12b8>)
 8003388:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800338c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800338e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003392:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	b29a      	uxth	r2, r3
 800339a:	4b22      	ldr	r3, [pc, #136]	@ (8003424 <lcd_init+0x12bc>)
 800339c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800339e:	4b20      	ldr	r3, [pc, #128]	@ (8003420 <lcd_init+0x12b8>)
 80033a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80033a4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80033a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003420 <lcd_init+0x12b8>)
 80033a8:	2280      	movs	r2, #128	@ 0x80
 80033aa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80033ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003420 <lcd_init+0x12b8>)
 80033ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033b2:	611a      	str	r2, [r3, #16]
}
 80033b4:	bf00      	nop
        lcd_wr_regno(0XE1); /* Set Gamma */
        lcd_wr_xdata(0x00);
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7fd fd6e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);
 80033bc:	2015      	movs	r0, #21
 80033be:	f7fd fd6b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 80033c2:	2017      	movs	r0, #23
 80033c4:	f7fd fd68 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 80033c8:	2007      	movs	r0, #7
 80033ca:	f7fd fd65 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 80033ce:	2011      	movs	r0, #17
 80033d0:	f7fd fd62 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 80033d4:	2006      	movs	r0, #6
 80033d6:	f7fd fd5f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x2B);
 80033da:	202b      	movs	r0, #43	@ 0x2b
 80033dc:	f7fd fd5c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 80033e0:	2056      	movs	r0, #86	@ 0x56
 80033e2:	f7fd fd59 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80033e6:	203c      	movs	r0, #60	@ 0x3c
 80033e8:	f7fd fd56 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 80033ec:	2005      	movs	r0, #5
 80033ee:	f7fd fd53 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80033f2:	2010      	movs	r0, #16
 80033f4:	f7fd fd50 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 80033f8:	200f      	movs	r0, #15
 80033fa:	f7fd fd4d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 80033fe:	203f      	movs	r0, #63	@ 0x3f
 8003400:	f7fd fd4a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8003404:	203f      	movs	r0, #63	@ 0x3f
 8003406:	f7fd fd47 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 800340a:	200f      	movs	r0, #15
 800340c:	f7fd fd44 	bl	8000e98 <lcd_wr_xdata>
 8003410:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003414:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003418:	222b      	movs	r2, #43	@ 0x2b
 800341a:	801a      	strh	r2, [r3, #0]
 800341c:	e004      	b.n	8003428 <lcd_init+0x12c0>
 800341e:	bf00      	nop
 8003420:	40011000 	.word	0x40011000
 8003424:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003428:	4b4e      	ldr	r3, [pc, #312]	@ (8003564 <lcd_init+0x13fc>)
 800342a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800342e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003430:	4b4c      	ldr	r3, [pc, #304]	@ (8003564 <lcd_init+0x13fc>)
 8003432:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003436:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003438:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800343c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29a      	uxth	r2, r3
 8003444:	4b48      	ldr	r3, [pc, #288]	@ (8003568 <lcd_init+0x1400>)
 8003446:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003448:	4b46      	ldr	r3, [pc, #280]	@ (8003564 <lcd_init+0x13fc>)
 800344a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800344e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003450:	4b44      	ldr	r3, [pc, #272]	@ (8003564 <lcd_init+0x13fc>)
 8003452:	2280      	movs	r2, #128	@ 0x80
 8003454:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003456:	4b43      	ldr	r3, [pc, #268]	@ (8003564 <lcd_init+0x13fc>)
 8003458:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800345c:	611a      	str	r2, [r3, #16]
}
 800345e:	bf00      	nop
        lcd_wr_regno(0x2B);
        lcd_wr_xdata(0x00);
 8003460:	2000      	movs	r0, #0
 8003462:	f7fd fd19 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003466:	2000      	movs	r0, #0
 8003468:	f7fd fd16 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800346c:	2001      	movs	r0, #1
 800346e:	f7fd fd13 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x3f);
 8003472:	203f      	movs	r0, #63	@ 0x3f
 8003474:	f7fd fd10 	bl	8000e98 <lcd_wr_xdata>
 8003478:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800347c:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8003480:	222a      	movs	r2, #42	@ 0x2a
 8003482:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003484:	4b37      	ldr	r3, [pc, #220]	@ (8003564 <lcd_init+0x13fc>)
 8003486:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800348a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800348c:	4b35      	ldr	r3, [pc, #212]	@ (8003564 <lcd_init+0x13fc>)
 800348e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003492:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003494:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003498:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	4b31      	ldr	r3, [pc, #196]	@ (8003568 <lcd_init+0x1400>)
 80034a2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80034a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003564 <lcd_init+0x13fc>)
 80034a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034aa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80034ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003564 <lcd_init+0x13fc>)
 80034ae:	2280      	movs	r2, #128	@ 0x80
 80034b0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80034b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003564 <lcd_init+0x13fc>)
 80034b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034b8:	611a      	str	r2, [r3, #16]
}
 80034ba:	bf00      	nop
        lcd_wr_regno(0x2A);
        lcd_wr_xdata(0x00);
 80034bc:	2000      	movs	r0, #0
 80034be:	f7fd fceb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7fd fce8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7fd fce5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xef);
 80034ce:	20ef      	movs	r0, #239	@ 0xef
 80034d0:	f7fd fce2 	bl	8000e98 <lcd_wr_xdata>
 80034d4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80034d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80034dc:	2211      	movs	r2, #17
 80034de:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80034e0:	4b20      	ldr	r3, [pc, #128]	@ (8003564 <lcd_init+0x13fc>)
 80034e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034e6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80034e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003564 <lcd_init+0x13fc>)
 80034ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034ee:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80034f0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80034f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003568 <lcd_init+0x1400>)
 80034fe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003500:	4b18      	ldr	r3, [pc, #96]	@ (8003564 <lcd_init+0x13fc>)
 8003502:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003506:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003508:	4b16      	ldr	r3, [pc, #88]	@ (8003564 <lcd_init+0x13fc>)
 800350a:	2280      	movs	r2, #128	@ 0x80
 800350c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800350e:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <lcd_init+0x13fc>)
 8003510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003514:	611a      	str	r2, [r3, #16]
}
 8003516:	bf00      	nop
        lcd_wr_regno(0x11); /* Exit Sleep */
        HAL_Delay(120);
 8003518:	2078      	movs	r0, #120	@ 0x78
 800351a:	f005 f9f7 	bl	800890c <HAL_Delay>
 800351e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003522:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003526:	2229      	movs	r2, #41	@ 0x29
 8003528:	801a      	strh	r2, [r3, #0]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800352a:	4b0e      	ldr	r3, [pc, #56]	@ (8003564 <lcd_init+0x13fc>)
 800352c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003530:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003532:	4b0c      	ldr	r3, [pc, #48]	@ (8003564 <lcd_init+0x13fc>)
 8003534:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003538:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800353a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800353e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29a      	uxth	r2, r3
 8003546:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <lcd_init+0x1400>)
 8003548:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800354a:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <lcd_init+0x13fc>)
 800354c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003550:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003552:	4b04      	ldr	r3, [pc, #16]	@ (8003564 <lcd_init+0x13fc>)
 8003554:	2280      	movs	r2, #128	@ 0x80
 8003556:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003558:	4b02      	ldr	r3, [pc, #8]	@ (8003564 <lcd_init+0x13fc>)
 800355a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800355e:	611a      	str	r2, [r3, #16]
}
 8003560:	f003 bd4b 	b.w	8006ffa <lcd_init+0x4e92>
 8003564:	40011000 	.word	0x40011000
 8003568:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x29); /* display on */
    }
    else if (lcddev.id == 0x5310)
 800356c:	4bbe      	ldr	r3, [pc, #760]	@ (8003868 <lcd_init+0x1700>)
 800356e:	889b      	ldrh	r3, [r3, #4]
 8003570:	f245 3210 	movw	r2, #21264	@ 0x5310
 8003574:	4293      	cmp	r3, r2
 8003576:	f041 846d 	bne.w	8004e54 <lcd_init+0x2cec>
 800357a:	23ed      	movs	r3, #237	@ 0xed
 800357c:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003580:	4bba      	ldr	r3, [pc, #744]	@ (800386c <lcd_init+0x1704>)
 8003582:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003586:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003588:	4bb8      	ldr	r3, [pc, #736]	@ (800386c <lcd_init+0x1704>)
 800358a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800358e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003590:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8003594:	b29a      	uxth	r2, r3
 8003596:	4bb6      	ldr	r3, [pc, #728]	@ (8003870 <lcd_init+0x1708>)
 8003598:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800359a:	4bb4      	ldr	r3, [pc, #720]	@ (800386c <lcd_init+0x1704>)
 800359c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80035a0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80035a2:	4bb2      	ldr	r3, [pc, #712]	@ (800386c <lcd_init+0x1704>)
 80035a4:	2280      	movs	r2, #128	@ 0x80
 80035a6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80035a8:	4bb0      	ldr	r3, [pc, #704]	@ (800386c <lcd_init+0x1704>)
 80035aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ae:	611a      	str	r2, [r3, #16]
}
 80035b0:	bf00      	nop
    {
        //lcd_ex_nt35310_reginit();   /* ִ��NT35310��ʼ�� */
        lcd_wr_regno(0xED);
        lcd_wr_xdata(0x01);
 80035b2:	2001      	movs	r0, #1
 80035b4:	f7fd fc70 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE);
 80035b8:	20fe      	movs	r0, #254	@ 0xfe
 80035ba:	f7fd fc6d 	bl	8000e98 <lcd_wr_xdata>
 80035be:	23ee      	movs	r3, #238	@ 0xee
 80035c0:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80035c4:	4ba9      	ldr	r3, [pc, #676]	@ (800386c <lcd_init+0x1704>)
 80035c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035ca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80035cc:	4ba7      	ldr	r3, [pc, #668]	@ (800386c <lcd_init+0x1704>)
 80035ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035d2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80035d4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 80035d8:	b29a      	uxth	r2, r3
 80035da:	4ba5      	ldr	r3, [pc, #660]	@ (8003870 <lcd_init+0x1708>)
 80035dc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80035de:	4ba3      	ldr	r3, [pc, #652]	@ (800386c <lcd_init+0x1704>)
 80035e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80035e4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80035e6:	4ba1      	ldr	r3, [pc, #644]	@ (800386c <lcd_init+0x1704>)
 80035e8:	2280      	movs	r2, #128	@ 0x80
 80035ea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80035ec:	4b9f      	ldr	r3, [pc, #636]	@ (800386c <lcd_init+0x1704>)
 80035ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035f2:	611a      	str	r2, [r3, #16]
}
 80035f4:	bf00      	nop

        lcd_wr_regno(0xEE);
        lcd_wr_xdata(0xDE);
 80035f6:	20de      	movs	r0, #222	@ 0xde
 80035f8:	f7fd fc4e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 80035fc:	2021      	movs	r0, #33	@ 0x21
 80035fe:	f7fd fc4b 	bl	8000e98 <lcd_wr_xdata>
 8003602:	23f1      	movs	r3, #241	@ 0xf1
 8003604:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003608:	4b98      	ldr	r3, [pc, #608]	@ (800386c <lcd_init+0x1704>)
 800360a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800360e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003610:	4b96      	ldr	r3, [pc, #600]	@ (800386c <lcd_init+0x1704>)
 8003612:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003616:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003618:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 800361c:	b29a      	uxth	r2, r3
 800361e:	4b94      	ldr	r3, [pc, #592]	@ (8003870 <lcd_init+0x1708>)
 8003620:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003622:	4b92      	ldr	r3, [pc, #584]	@ (800386c <lcd_init+0x1704>)
 8003624:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003628:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800362a:	4b90      	ldr	r3, [pc, #576]	@ (800386c <lcd_init+0x1704>)
 800362c:	2280      	movs	r2, #128	@ 0x80
 800362e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003630:	4b8e      	ldr	r3, [pc, #568]	@ (800386c <lcd_init+0x1704>)
 8003632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003636:	611a      	str	r2, [r3, #16]
}
 8003638:	bf00      	nop

        lcd_wr_regno(0xF1);
        lcd_wr_xdata(0x01);
 800363a:	2001      	movs	r0, #1
 800363c:	f7fd fc2c 	bl	8000e98 <lcd_wr_xdata>
 8003640:	23df      	movs	r3, #223	@ 0xdf
 8003642:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003646:	4b89      	ldr	r3, [pc, #548]	@ (800386c <lcd_init+0x1704>)
 8003648:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800364c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800364e:	4b87      	ldr	r3, [pc, #540]	@ (800386c <lcd_init+0x1704>)
 8003650:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003654:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003656:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 800365a:	b29a      	uxth	r2, r3
 800365c:	4b84      	ldr	r3, [pc, #528]	@ (8003870 <lcd_init+0x1708>)
 800365e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003660:	4b82      	ldr	r3, [pc, #520]	@ (800386c <lcd_init+0x1704>)
 8003662:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003666:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003668:	4b80      	ldr	r3, [pc, #512]	@ (800386c <lcd_init+0x1704>)
 800366a:	2280      	movs	r2, #128	@ 0x80
 800366c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800366e:	4b7f      	ldr	r3, [pc, #508]	@ (800386c <lcd_init+0x1704>)
 8003670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003674:	611a      	str	r2, [r3, #16]
}
 8003676:	bf00      	nop
        lcd_wr_regno(0xDF);
        lcd_wr_xdata(0x10);
 8003678:	2010      	movs	r0, #16
 800367a:	f7fd fc0d 	bl	8000e98 <lcd_wr_xdata>
 800367e:	23c4      	movs	r3, #196	@ 0xc4
 8003680:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003684:	4b79      	ldr	r3, [pc, #484]	@ (800386c <lcd_init+0x1704>)
 8003686:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800368a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800368c:	4b77      	ldr	r3, [pc, #476]	@ (800386c <lcd_init+0x1704>)
 800368e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003692:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003694:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003698:	b29a      	uxth	r2, r3
 800369a:	4b75      	ldr	r3, [pc, #468]	@ (8003870 <lcd_init+0x1708>)
 800369c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800369e:	4b73      	ldr	r3, [pc, #460]	@ (800386c <lcd_init+0x1704>)
 80036a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036a4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80036a6:	4b71      	ldr	r3, [pc, #452]	@ (800386c <lcd_init+0x1704>)
 80036a8:	2280      	movs	r2, #128	@ 0x80
 80036aa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80036ac:	4b6f      	ldr	r3, [pc, #444]	@ (800386c <lcd_init+0x1704>)
 80036ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036b2:	611a      	str	r2, [r3, #16]
}
 80036b4:	bf00      	nop

        /* VCOMvoltage */
        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x8F);  /* 5f */
 80036b6:	208f      	movs	r0, #143	@ 0x8f
 80036b8:	f7fd fbee 	bl	8000e98 <lcd_wr_xdata>
 80036bc:	23c6      	movs	r3, #198	@ 0xc6
 80036be:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80036c2:	4b6a      	ldr	r3, [pc, #424]	@ (800386c <lcd_init+0x1704>)
 80036c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036c8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80036ca:	4b68      	ldr	r3, [pc, #416]	@ (800386c <lcd_init+0x1704>)
 80036cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036d0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80036d2:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	4b65      	ldr	r3, [pc, #404]	@ (8003870 <lcd_init+0x1708>)
 80036da:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80036dc:	4b63      	ldr	r3, [pc, #396]	@ (800386c <lcd_init+0x1704>)
 80036de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80036e2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80036e4:	4b61      	ldr	r3, [pc, #388]	@ (800386c <lcd_init+0x1704>)
 80036e6:	2280      	movs	r2, #128	@ 0x80
 80036e8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80036ea:	4b60      	ldr	r3, [pc, #384]	@ (800386c <lcd_init+0x1704>)
 80036ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036f0:	611a      	str	r2, [r3, #16]
}
 80036f2:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x00);
 80036f4:	2000      	movs	r0, #0
 80036f6:	f7fd fbcf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 80036fa:	20e2      	movs	r0, #226	@ 0xe2
 80036fc:	f7fd fbcc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003700:	20e2      	movs	r0, #226	@ 0xe2
 8003702:	f7fd fbc9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xE2);
 8003706:	20e2      	movs	r0, #226	@ 0xe2
 8003708:	f7fd fbc6 	bl	8000e98 <lcd_wr_xdata>
 800370c:	23bf      	movs	r3, #191	@ 0xbf
 800370e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003712:	4b56      	ldr	r3, [pc, #344]	@ (800386c <lcd_init+0x1704>)
 8003714:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003718:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800371a:	4b54      	ldr	r3, [pc, #336]	@ (800386c <lcd_init+0x1704>)
 800371c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003720:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003726:	b29a      	uxth	r2, r3
 8003728:	4b51      	ldr	r3, [pc, #324]	@ (8003870 <lcd_init+0x1708>)
 800372a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800372c:	4b4f      	ldr	r3, [pc, #316]	@ (800386c <lcd_init+0x1704>)
 800372e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003732:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003734:	4b4d      	ldr	r3, [pc, #308]	@ (800386c <lcd_init+0x1704>)
 8003736:	2280      	movs	r2, #128	@ 0x80
 8003738:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800373a:	4b4c      	ldr	r3, [pc, #304]	@ (800386c <lcd_init+0x1704>)
 800373c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003740:	611a      	str	r2, [r3, #16]
}
 8003742:	bf00      	nop
        lcd_wr_regno(0xBF);
        lcd_wr_xdata(0xAA);
 8003744:	20aa      	movs	r0, #170	@ 0xaa
 8003746:	f7fd fba7 	bl	8000e98 <lcd_wr_xdata>
 800374a:	23b0      	movs	r3, #176	@ 0xb0
 800374c:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003750:	4b46      	ldr	r3, [pc, #280]	@ (800386c <lcd_init+0x1704>)
 8003752:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003756:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003758:	4b44      	ldr	r3, [pc, #272]	@ (800386c <lcd_init+0x1704>)
 800375a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800375e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003760:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8003764:	b29a      	uxth	r2, r3
 8003766:	4b42      	ldr	r3, [pc, #264]	@ (8003870 <lcd_init+0x1708>)
 8003768:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800376a:	4b40      	ldr	r3, [pc, #256]	@ (800386c <lcd_init+0x1704>)
 800376c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003770:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003772:	4b3e      	ldr	r3, [pc, #248]	@ (800386c <lcd_init+0x1704>)
 8003774:	2280      	movs	r2, #128	@ 0x80
 8003776:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003778:	4b3c      	ldr	r3, [pc, #240]	@ (800386c <lcd_init+0x1704>)
 800377a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800377e:	611a      	str	r2, [r3, #16]
}
 8003780:	bf00      	nop

        lcd_wr_regno(0xB0);
        lcd_wr_xdata(0x0D);
 8003782:	200d      	movs	r0, #13
 8003784:	f7fd fb88 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003788:	2000      	movs	r0, #0
 800378a:	f7fd fb85 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 800378e:	200d      	movs	r0, #13
 8003790:	f7fd fb82 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003794:	2000      	movs	r0, #0
 8003796:	f7fd fb7f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x11);
 800379a:	2011      	movs	r0, #17
 800379c:	f7fd fb7c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7fd fb79 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 80037a6:	2019      	movs	r0, #25
 80037a8:	f7fd fb76 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037ac:	2000      	movs	r0, #0
 80037ae:	f7fd fb73 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 80037b2:	2021      	movs	r0, #33	@ 0x21
 80037b4:	f7fd fb70 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037b8:	2000      	movs	r0, #0
 80037ba:	f7fd fb6d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x2D);
 80037be:	202d      	movs	r0, #45	@ 0x2d
 80037c0:	f7fd fb6a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037c4:	2000      	movs	r0, #0
 80037c6:	f7fd fb67 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x3D);
 80037ca:	203d      	movs	r0, #61	@ 0x3d
 80037cc:	f7fd fb64 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037d0:	2000      	movs	r0, #0
 80037d2:	f7fd fb61 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80037d6:	205d      	movs	r0, #93	@ 0x5d
 80037d8:	f7fd fb5e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037dc:	2000      	movs	r0, #0
 80037de:	f7fd fb5b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80037e2:	205d      	movs	r0, #93	@ 0x5d
 80037e4:	f7fd fb58 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80037e8:	2000      	movs	r0, #0
 80037ea:	f7fd fb55 	bl	8000e98 <lcd_wr_xdata>
 80037ee:	23b1      	movs	r3, #177	@ 0xb1
 80037f0:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80037f4:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <lcd_init+0x1704>)
 80037f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037fa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80037fc:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <lcd_init+0x1704>)
 80037fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003802:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003804:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8003808:	b29a      	uxth	r2, r3
 800380a:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <lcd_init+0x1708>)
 800380c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800380e:	4b17      	ldr	r3, [pc, #92]	@ (800386c <lcd_init+0x1704>)
 8003810:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003814:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003816:	4b15      	ldr	r3, [pc, #84]	@ (800386c <lcd_init+0x1704>)
 8003818:	2280      	movs	r2, #128	@ 0x80
 800381a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800381c:	4b13      	ldr	r3, [pc, #76]	@ (800386c <lcd_init+0x1704>)
 800381e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003822:	611a      	str	r2, [r3, #16]
}
 8003824:	bf00      	nop

        lcd_wr_regno(0xB1);
        lcd_wr_xdata(0x80);
 8003826:	2080      	movs	r0, #128	@ 0x80
 8003828:	f7fd fb36 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800382c:	2000      	movs	r0, #0
 800382e:	f7fd fb33 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8003832:	208b      	movs	r0, #139	@ 0x8b
 8003834:	f7fd fb30 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003838:	2000      	movs	r0, #0
 800383a:	f7fd fb2d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 800383e:	2096      	movs	r0, #150	@ 0x96
 8003840:	f7fd fb2a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003844:	2000      	movs	r0, #0
 8003846:	f7fd fb27 	bl	8000e98 <lcd_wr_xdata>
 800384a:	23b2      	movs	r3, #178	@ 0xb2
 800384c:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003850:	4b06      	ldr	r3, [pc, #24]	@ (800386c <lcd_init+0x1704>)
 8003852:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003856:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003858:	4b04      	ldr	r3, [pc, #16]	@ (800386c <lcd_init+0x1704>)
 800385a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800385e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003860:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8003864:	b29a      	uxth	r2, r3
 8003866:	e005      	b.n	8003874 <lcd_init+0x170c>
 8003868:	200000b0 	.word	0x200000b0
 800386c:	40011000 	.word	0x40011000
 8003870:	40010c00 	.word	0x40010c00
 8003874:	4bd0      	ldr	r3, [pc, #832]	@ (8003bb8 <lcd_init+0x1a50>)
 8003876:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003878:	4bd0      	ldr	r3, [pc, #832]	@ (8003bbc <lcd_init+0x1a54>)
 800387a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800387e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003880:	4bce      	ldr	r3, [pc, #824]	@ (8003bbc <lcd_init+0x1a54>)
 8003882:	2280      	movs	r2, #128	@ 0x80
 8003884:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003886:	4bcd      	ldr	r3, [pc, #820]	@ (8003bbc <lcd_init+0x1a54>)
 8003888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800388c:	611a      	str	r2, [r3, #16]
}
 800388e:	bf00      	nop

        lcd_wr_regno(0xB2);
        lcd_wr_xdata(0x00);
 8003890:	2000      	movs	r0, #0
 8003892:	f7fd fb01 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003896:	2000      	movs	r0, #0
 8003898:	f7fd fafe 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800389c:	2002      	movs	r0, #2
 800389e:	f7fd fafb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038a2:	2000      	movs	r0, #0
 80038a4:	f7fd faf8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 80038a8:	2003      	movs	r0, #3
 80038aa:	f7fd faf5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038ae:	2000      	movs	r0, #0
 80038b0:	f7fd faf2 	bl	8000e98 <lcd_wr_xdata>
 80038b4:	23b3      	movs	r3, #179	@ 0xb3
 80038b6:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80038ba:	4bc0      	ldr	r3, [pc, #768]	@ (8003bbc <lcd_init+0x1a54>)
 80038bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038c0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80038c2:	4bbe      	ldr	r3, [pc, #760]	@ (8003bbc <lcd_init+0x1a54>)
 80038c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038c8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80038ca:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	4bb9      	ldr	r3, [pc, #740]	@ (8003bb8 <lcd_init+0x1a50>)
 80038d2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80038d4:	4bb9      	ldr	r3, [pc, #740]	@ (8003bbc <lcd_init+0x1a54>)
 80038d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038da:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80038dc:	4bb7      	ldr	r3, [pc, #732]	@ (8003bbc <lcd_init+0x1a54>)
 80038de:	2280      	movs	r2, #128	@ 0x80
 80038e0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80038e2:	4bb6      	ldr	r3, [pc, #728]	@ (8003bbc <lcd_init+0x1a54>)
 80038e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038e8:	611a      	str	r2, [r3, #16]
}
 80038ea:	bf00      	nop

        lcd_wr_regno(0xB3);
        lcd_wr_xdata(0x00);
 80038ec:	2000      	movs	r0, #0
 80038ee:	f7fd fad3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038f2:	2000      	movs	r0, #0
 80038f4:	f7fd fad0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038f8:	2000      	movs	r0, #0
 80038fa:	f7fd facd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80038fe:	2000      	movs	r0, #0
 8003900:	f7fd faca 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003904:	2000      	movs	r0, #0
 8003906:	f7fd fac7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800390a:	2000      	movs	r0, #0
 800390c:	f7fd fac4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003910:	2000      	movs	r0, #0
 8003912:	f7fd fac1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003916:	2000      	movs	r0, #0
 8003918:	f7fd fabe 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800391c:	2000      	movs	r0, #0
 800391e:	f7fd fabb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003922:	2000      	movs	r0, #0
 8003924:	f7fd fab8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003928:	2000      	movs	r0, #0
 800392a:	f7fd fab5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800392e:	2000      	movs	r0, #0
 8003930:	f7fd fab2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003934:	2000      	movs	r0, #0
 8003936:	f7fd faaf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800393a:	2000      	movs	r0, #0
 800393c:	f7fd faac 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003940:	2000      	movs	r0, #0
 8003942:	f7fd faa9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003946:	2000      	movs	r0, #0
 8003948:	f7fd faa6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800394c:	2000      	movs	r0, #0
 800394e:	f7fd faa3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003952:	2000      	movs	r0, #0
 8003954:	f7fd faa0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003958:	2000      	movs	r0, #0
 800395a:	f7fd fa9d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800395e:	2000      	movs	r0, #0
 8003960:	f7fd fa9a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003964:	2000      	movs	r0, #0
 8003966:	f7fd fa97 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800396a:	2000      	movs	r0, #0
 800396c:	f7fd fa94 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003970:	2000      	movs	r0, #0
 8003972:	f7fd fa91 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003976:	2000      	movs	r0, #0
 8003978:	f7fd fa8e 	bl	8000e98 <lcd_wr_xdata>
 800397c:	23b4      	movs	r3, #180	@ 0xb4
 800397e:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003982:	4b8e      	ldr	r3, [pc, #568]	@ (8003bbc <lcd_init+0x1a54>)
 8003984:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003988:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800398a:	4b8c      	ldr	r3, [pc, #560]	@ (8003bbc <lcd_init+0x1a54>)
 800398c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003990:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003992:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 8003996:	b29a      	uxth	r2, r3
 8003998:	4b87      	ldr	r3, [pc, #540]	@ (8003bb8 <lcd_init+0x1a50>)
 800399a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800399c:	4b87      	ldr	r3, [pc, #540]	@ (8003bbc <lcd_init+0x1a54>)
 800399e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80039a2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80039a4:	4b85      	ldr	r3, [pc, #532]	@ (8003bbc <lcd_init+0x1a54>)
 80039a6:	2280      	movs	r2, #128	@ 0x80
 80039a8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80039aa:	4b84      	ldr	r3, [pc, #528]	@ (8003bbc <lcd_init+0x1a54>)
 80039ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039b0:	611a      	str	r2, [r3, #16]
}
 80039b2:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x8B);
 80039b4:	208b      	movs	r0, #139	@ 0x8b
 80039b6:	f7fd fa6f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039ba:	2000      	movs	r0, #0
 80039bc:	f7fd fa6c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x96);
 80039c0:	2096      	movs	r0, #150	@ 0x96
 80039c2:	f7fd fa69 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039c6:	2000      	movs	r0, #0
 80039c8:	f7fd fa66 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA1);
 80039cc:	20a1      	movs	r0, #161	@ 0xa1
 80039ce:	f7fd fa63 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80039d2:	2000      	movs	r0, #0
 80039d4:	f7fd fa60 	bl	8000e98 <lcd_wr_xdata>
 80039d8:	23b5      	movs	r3, #181	@ 0xb5
 80039da:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80039de:	4b77      	ldr	r3, [pc, #476]	@ (8003bbc <lcd_init+0x1a54>)
 80039e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039e4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80039e6:	4b75      	ldr	r3, [pc, #468]	@ (8003bbc <lcd_init+0x1a54>)
 80039e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039ec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80039ee:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	4b70      	ldr	r3, [pc, #448]	@ (8003bb8 <lcd_init+0x1a50>)
 80039f6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80039f8:	4b70      	ldr	r3, [pc, #448]	@ (8003bbc <lcd_init+0x1a54>)
 80039fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80039fe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a00:	4b6e      	ldr	r3, [pc, #440]	@ (8003bbc <lcd_init+0x1a54>)
 8003a02:	2280      	movs	r2, #128	@ 0x80
 8003a04:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a06:	4b6d      	ldr	r3, [pc, #436]	@ (8003bbc <lcd_init+0x1a54>)
 8003a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a0c:	611a      	str	r2, [r3, #16]
}
 8003a0e:	bf00      	nop

        lcd_wr_regno(0xB5);
        lcd_wr_xdata(0x02);
 8003a10:	2002      	movs	r0, #2
 8003a12:	f7fd fa41 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a16:	2000      	movs	r0, #0
 8003a18:	f7fd fa3e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8003a1c:	2003      	movs	r0, #3
 8003a1e:	f7fd fa3b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a22:	2000      	movs	r0, #0
 8003a24:	f7fd fa38 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8003a28:	2004      	movs	r0, #4
 8003a2a:	f7fd fa35 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f7fd fa32 	bl	8000e98 <lcd_wr_xdata>
 8003a34:	23b6      	movs	r3, #182	@ 0xb6
 8003a36:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a3a:	4b60      	ldr	r3, [pc, #384]	@ (8003bbc <lcd_init+0x1a54>)
 8003a3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a40:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a42:	4b5e      	ldr	r3, [pc, #376]	@ (8003bbc <lcd_init+0x1a54>)
 8003a44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a48:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a4a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	4b59      	ldr	r3, [pc, #356]	@ (8003bb8 <lcd_init+0x1a50>)
 8003a52:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a54:	4b59      	ldr	r3, [pc, #356]	@ (8003bbc <lcd_init+0x1a54>)
 8003a56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a5a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003a5c:	4b57      	ldr	r3, [pc, #348]	@ (8003bbc <lcd_init+0x1a54>)
 8003a5e:	2280      	movs	r2, #128	@ 0x80
 8003a60:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003a62:	4b56      	ldr	r3, [pc, #344]	@ (8003bbc <lcd_init+0x1a54>)
 8003a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a68:	611a      	str	r2, [r3, #16]
}
 8003a6a:	bf00      	nop

        lcd_wr_regno(0xB6);
        lcd_wr_xdata(0x00);
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f7fd fa13 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003a72:	2000      	movs	r0, #0
 8003a74:	f7fd fa10 	bl	8000e98 <lcd_wr_xdata>
 8003a78:	23b7      	movs	r3, #183	@ 0xb7
 8003a7a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8003bbc <lcd_init+0x1a54>)
 8003a80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a84:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003a86:	4b4d      	ldr	r3, [pc, #308]	@ (8003bbc <lcd_init+0x1a54>)
 8003a88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a8c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003a8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	4b48      	ldr	r3, [pc, #288]	@ (8003bb8 <lcd_init+0x1a50>)
 8003a96:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003a98:	4b48      	ldr	r3, [pc, #288]	@ (8003bbc <lcd_init+0x1a54>)
 8003a9a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a9e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003aa0:	4b46      	ldr	r3, [pc, #280]	@ (8003bbc <lcd_init+0x1a54>)
 8003aa2:	2280      	movs	r2, #128	@ 0x80
 8003aa4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003aa6:	4b45      	ldr	r3, [pc, #276]	@ (8003bbc <lcd_init+0x1a54>)
 8003aa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aac:	611a      	str	r2, [r3, #16]
}
 8003aae:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0x00);
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	f7fd f9f1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f7fd f9ee 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x3F);
 8003abc:	203f      	movs	r0, #63	@ 0x3f
 8003abe:	f7fd f9eb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	f7fd f9e8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x5E);
 8003ac8:	205e      	movs	r0, #94	@ 0x5e
 8003aca:	f7fd f9e5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f7fd f9e2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8003ad4:	2064      	movs	r0, #100	@ 0x64
 8003ad6:	f7fd f9df 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ada:	2000      	movs	r0, #0
 8003adc:	f7fd f9dc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x8C);
 8003ae0:	208c      	movs	r0, #140	@ 0x8c
 8003ae2:	f7fd f9d9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f7fd f9d6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xAC);
 8003aec:	20ac      	movs	r0, #172	@ 0xac
 8003aee:	f7fd f9d3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003af2:	2000      	movs	r0, #0
 8003af4:	f7fd f9d0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003af8:	20dc      	movs	r0, #220	@ 0xdc
 8003afa:	f7fd f9cd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003afe:	2000      	movs	r0, #0
 8003b00:	f7fd f9ca 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x70);
 8003b04:	2070      	movs	r0, #112	@ 0x70
 8003b06:	f7fd f9c7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f7fd f9c4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x90);
 8003b10:	2090      	movs	r0, #144	@ 0x90
 8003b12:	f7fd f9c1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b16:	2000      	movs	r0, #0
 8003b18:	f7fd f9be 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xEB);
 8003b1c:	20eb      	movs	r0, #235	@ 0xeb
 8003b1e:	f7fd f9bb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b22:	2000      	movs	r0, #0
 8003b24:	f7fd f9b8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 8003b28:	20dc      	movs	r0, #220	@ 0xdc
 8003b2a:	f7fd f9b5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f7fd f9b2 	bl	8000e98 <lcd_wr_xdata>
 8003b34:	23b8      	movs	r3, #184	@ 0xb8
 8003b36:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003b3a:	4b20      	ldr	r3, [pc, #128]	@ (8003bbc <lcd_init+0x1a54>)
 8003b3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b40:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003b42:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <lcd_init+0x1a54>)
 8003b44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b48:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003b4a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	4b19      	ldr	r3, [pc, #100]	@ (8003bb8 <lcd_init+0x1a50>)
 8003b52:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003b54:	4b19      	ldr	r3, [pc, #100]	@ (8003bbc <lcd_init+0x1a54>)
 8003b56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003b5a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003b5c:	4b17      	ldr	r3, [pc, #92]	@ (8003bbc <lcd_init+0x1a54>)
 8003b5e:	2280      	movs	r2, #128	@ 0x80
 8003b60:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003b62:	4b16      	ldr	r3, [pc, #88]	@ (8003bbc <lcd_init+0x1a54>)
 8003b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b68:	611a      	str	r2, [r3, #16]
}
 8003b6a:	bf00      	nop

        lcd_wr_regno(0xB8);
        lcd_wr_xdata(0x00);
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f7fd f993 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b72:	2000      	movs	r0, #0
 8003b74:	f7fd f990 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7fd f98d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f7fd f98a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b84:	2000      	movs	r0, #0
 8003b86:	f7fd f987 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	f7fd f984 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b90:	2000      	movs	r0, #0
 8003b92:	f7fd f981 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003b96:	2000      	movs	r0, #0
 8003b98:	f7fd f97e 	bl	8000e98 <lcd_wr_xdata>
 8003b9c:	23ba      	movs	r3, #186	@ 0xba
 8003b9e:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003ba2:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <lcd_init+0x1a54>)
 8003ba4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ba8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003baa:	4b04      	ldr	r3, [pc, #16]	@ (8003bbc <lcd_init+0x1a54>)
 8003bac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bb0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003bb2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8003bb6:	e003      	b.n	8003bc0 <lcd_init+0x1a58>
 8003bb8:	40010c00 	.word	0x40010c00
 8003bbc:	40011000 	.word	0x40011000
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	4bd9      	ldr	r3, [pc, #868]	@ (8003f28 <lcd_init+0x1dc0>)
 8003bc4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003bc6:	4bd9      	ldr	r3, [pc, #868]	@ (8003f2c <lcd_init+0x1dc4>)
 8003bc8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003bcc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003bce:	4bd7      	ldr	r3, [pc, #860]	@ (8003f2c <lcd_init+0x1dc4>)
 8003bd0:	2280      	movs	r2, #128	@ 0x80
 8003bd2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003bd4:	4bd5      	ldr	r3, [pc, #852]	@ (8003f2c <lcd_init+0x1dc4>)
 8003bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bda:	611a      	str	r2, [r3, #16]
}
 8003bdc:	bf00      	nop

        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0x24);
 8003bde:	2024      	movs	r0, #36	@ 0x24
 8003be0:	f7fd f95a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003be4:	2000      	movs	r0, #0
 8003be6:	f7fd f957 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bea:	2000      	movs	r0, #0
 8003bec:	f7fd f954 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7fd f951 	bl	8000e98 <lcd_wr_xdata>
 8003bf6:	23c1      	movs	r3, #193	@ 0xc1
 8003bf8:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003bfc:	4bcb      	ldr	r3, [pc, #812]	@ (8003f2c <lcd_init+0x1dc4>)
 8003bfe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c02:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003c04:	4bc9      	ldr	r3, [pc, #804]	@ (8003f2c <lcd_init+0x1dc4>)
 8003c06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c0a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003c0c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	4bc5      	ldr	r3, [pc, #788]	@ (8003f28 <lcd_init+0x1dc0>)
 8003c14:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003c16:	4bc5      	ldr	r3, [pc, #788]	@ (8003f2c <lcd_init+0x1dc4>)
 8003c18:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c1c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003c1e:	4bc3      	ldr	r3, [pc, #780]	@ (8003f2c <lcd_init+0x1dc4>)
 8003c20:	2280      	movs	r2, #128	@ 0x80
 8003c22:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003c24:	4bc1      	ldr	r3, [pc, #772]	@ (8003f2c <lcd_init+0x1dc4>)
 8003c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c2a:	611a      	str	r2, [r3, #16]
}
 8003c2c:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x20);
 8003c2e:	2020      	movs	r0, #32
 8003c30:	f7fd f932 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c34:	2000      	movs	r0, #0
 8003c36:	f7fd f92f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8003c3a:	2054      	movs	r0, #84	@ 0x54
 8003c3c:	f7fd f92c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c40:	2000      	movs	r0, #0
 8003c42:	f7fd f929 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8003c46:	20ff      	movs	r0, #255	@ 0xff
 8003c48:	f7fd f926 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f7fd f923 	bl	8000e98 <lcd_wr_xdata>
 8003c52:	23c2      	movs	r3, #194	@ 0xc2
 8003c54:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003c58:	4bb4      	ldr	r3, [pc, #720]	@ (8003f2c <lcd_init+0x1dc4>)
 8003c5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c5e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003c60:	4bb2      	ldr	r3, [pc, #712]	@ (8003f2c <lcd_init+0x1dc4>)
 8003c62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c66:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003c68:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	4bae      	ldr	r3, [pc, #696]	@ (8003f28 <lcd_init+0x1dc0>)
 8003c70:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003c72:	4bae      	ldr	r3, [pc, #696]	@ (8003f2c <lcd_init+0x1dc4>)
 8003c74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003c78:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003c7a:	4bac      	ldr	r3, [pc, #688]	@ (8003f2c <lcd_init+0x1dc4>)
 8003c7c:	2280      	movs	r2, #128	@ 0x80
 8003c7e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003c80:	4baa      	ldr	r3, [pc, #680]	@ (8003f2c <lcd_init+0x1dc4>)
 8003c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c86:	611a      	str	r2, [r3, #16]
}
 8003c88:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0x0A);
 8003c8a:	200a      	movs	r0, #10
 8003c8c:	f7fd f904 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c90:	2000      	movs	r0, #0
 8003c92:	f7fd f901 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8003c96:	2004      	movs	r0, #4
 8003c98:	f7fd f8fe 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	f7fd f8fb 	bl	8000e98 <lcd_wr_xdata>
 8003ca2:	23c3      	movs	r3, #195	@ 0xc3
 8003ca4:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003ca8:	4ba0      	ldr	r3, [pc, #640]	@ (8003f2c <lcd_init+0x1dc4>)
 8003caa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003cae:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003cb0:	4b9e      	ldr	r3, [pc, #632]	@ (8003f2c <lcd_init+0x1dc4>)
 8003cb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cb6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003cb8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	4b9a      	ldr	r3, [pc, #616]	@ (8003f28 <lcd_init+0x1dc0>)
 8003cc0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003cc2:	4b9a      	ldr	r3, [pc, #616]	@ (8003f2c <lcd_init+0x1dc4>)
 8003cc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003cc8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003cca:	4b98      	ldr	r3, [pc, #608]	@ (8003f2c <lcd_init+0x1dc4>)
 8003ccc:	2280      	movs	r2, #128	@ 0x80
 8003cce:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003cd0:	4b96      	ldr	r3, [pc, #600]	@ (8003f2c <lcd_init+0x1dc4>)
 8003cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cd6:	611a      	str	r2, [r3, #16]
}
 8003cd8:	bf00      	nop

        lcd_wr_regno(0xC3);
        lcd_wr_xdata(0x3C);
 8003cda:	203c      	movs	r0, #60	@ 0x3c
 8003cdc:	f7fd f8dc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7fd f8d9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x3A);
 8003ce6:	203a      	movs	r0, #58	@ 0x3a
 8003ce8:	f7fd f8d6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cec:	2000      	movs	r0, #0
 8003cee:	f7fd f8d3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x39);
 8003cf2:	2039      	movs	r0, #57	@ 0x39
 8003cf4:	f7fd f8d0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f7fd f8cd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 8003cfe:	2037      	movs	r0, #55	@ 0x37
 8003d00:	f7fd f8ca 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d04:	2000      	movs	r0, #0
 8003d06:	f7fd f8c7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8003d0a:	203c      	movs	r0, #60	@ 0x3c
 8003d0c:	f7fd f8c4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7fd f8c1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003d16:	2036      	movs	r0, #54	@ 0x36
 8003d18:	f7fd f8be 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f7fd f8bb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8003d22:	2032      	movs	r0, #50	@ 0x32
 8003d24:	f7fd f8b8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d28:	2000      	movs	r0, #0
 8003d2a:	f7fd f8b5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 8003d2e:	202f      	movs	r0, #47	@ 0x2f
 8003d30:	f7fd f8b2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d34:	2000      	movs	r0, #0
 8003d36:	f7fd f8af 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8003d3a:	202c      	movs	r0, #44	@ 0x2c
 8003d3c:	f7fd f8ac 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d40:	2000      	movs	r0, #0
 8003d42:	f7fd f8a9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8003d46:	2029      	movs	r0, #41	@ 0x29
 8003d48:	f7fd f8a6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f7fd f8a3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8003d52:	2026      	movs	r0, #38	@ 0x26
 8003d54:	f7fd f8a0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f7fd f89d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003d5e:	2024      	movs	r0, #36	@ 0x24
 8003d60:	f7fd f89a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d64:	2000      	movs	r0, #0
 8003d66:	f7fd f897 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003d6a:	2024      	movs	r0, #36	@ 0x24
 8003d6c:	f7fd f894 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d70:	2000      	movs	r0, #0
 8003d72:	f7fd f891 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8003d76:	2023      	movs	r0, #35	@ 0x23
 8003d78:	f7fd f88e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f7fd f88b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8003d82:	203c      	movs	r0, #60	@ 0x3c
 8003d84:	f7fd f888 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f7fd f885 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 8003d8e:	2036      	movs	r0, #54	@ 0x36
 8003d90:	f7fd f882 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003d94:	2000      	movs	r0, #0
 8003d96:	f7fd f87f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8003d9a:	2032      	movs	r0, #50	@ 0x32
 8003d9c:	f7fd f87c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003da0:	2000      	movs	r0, #0
 8003da2:	f7fd f879 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x2F);
 8003da6:	202f      	movs	r0, #47	@ 0x2f
 8003da8:	f7fd f876 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dac:	2000      	movs	r0, #0
 8003dae:	f7fd f873 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 8003db2:	202c      	movs	r0, #44	@ 0x2c
 8003db4:	f7fd f870 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003db8:	2000      	movs	r0, #0
 8003dba:	f7fd f86d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8003dbe:	2029      	movs	r0, #41	@ 0x29
 8003dc0:	f7fd f86a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f7fd f867 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 8003dca:	2026      	movs	r0, #38	@ 0x26
 8003dcc:	f7fd f864 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	f7fd f861 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003dd6:	2024      	movs	r0, #36	@ 0x24
 8003dd8:	f7fd f85e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7fd f85b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x24);
 8003de2:	2024      	movs	r0, #36	@ 0x24
 8003de4:	f7fd f858 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7fd f855 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8003dee:	2023      	movs	r0, #35	@ 0x23
 8003df0:	f7fd f852 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003df4:	2000      	movs	r0, #0
 8003df6:	f7fd f84f 	bl	8000e98 <lcd_wr_xdata>
 8003dfa:	23c4      	movs	r3, #196	@ 0xc4
 8003dfc:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003e00:	4b4a      	ldr	r3, [pc, #296]	@ (8003f2c <lcd_init+0x1dc4>)
 8003e02:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e06:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003e08:	4b48      	ldr	r3, [pc, #288]	@ (8003f2c <lcd_init+0x1dc4>)
 8003e0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e0e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003e10:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	4b44      	ldr	r3, [pc, #272]	@ (8003f28 <lcd_init+0x1dc0>)
 8003e18:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003e1a:	4b44      	ldr	r3, [pc, #272]	@ (8003f2c <lcd_init+0x1dc4>)
 8003e1c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e20:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003e22:	4b42      	ldr	r3, [pc, #264]	@ (8003f2c <lcd_init+0x1dc4>)
 8003e24:	2280      	movs	r2, #128	@ 0x80
 8003e26:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003e28:	4b40      	ldr	r3, [pc, #256]	@ (8003f2c <lcd_init+0x1dc4>)
 8003e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e2e:	611a      	str	r2, [r3, #16]
}
 8003e30:	bf00      	nop

        lcd_wr_regno(0xC4);
        lcd_wr_xdata(0x62);
 8003e32:	2062      	movs	r0, #98	@ 0x62
 8003e34:	f7fd f830 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f7fd f82d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8003e3e:	2005      	movs	r0, #5
 8003e40:	f7fd f82a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e44:	2000      	movs	r0, #0
 8003e46:	f7fd f827 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 8003e4a:	2084      	movs	r0, #132	@ 0x84
 8003e4c:	f7fd f824 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e50:	2000      	movs	r0, #0
 8003e52:	f7fd f821 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xF0);
 8003e56:	20f0      	movs	r0, #240	@ 0xf0
 8003e58:	f7fd f81e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f7fd f81b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 8003e62:	2018      	movs	r0, #24
 8003e64:	f7fd f818 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7fd f815 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA4);
 8003e6e:	20a4      	movs	r0, #164	@ 0xa4
 8003e70:	f7fd f812 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7fd f80f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x18);
 8003e7a:	2018      	movs	r0, #24
 8003e7c:	f7fd f80c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e80:	2000      	movs	r0, #0
 8003e82:	f7fd f809 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8003e86:	2050      	movs	r0, #80	@ 0x50
 8003e88:	f7fd f806 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7fd f803 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 8003e92:	200c      	movs	r0, #12
 8003e94:	f7fd f800 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f7fc fffd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003e9e:	2017      	movs	r0, #23
 8003ea0:	f7fc fffa 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7fc fff7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x95);
 8003eaa:	2095      	movs	r0, #149	@ 0x95
 8003eac:	f7fc fff4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7fc fff1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8003eb6:	20f3      	movs	r0, #243	@ 0xf3
 8003eb8:	f7fc ffee 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7fc ffeb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xE6);
 8003ec2:	20e6      	movs	r0, #230	@ 0xe6
 8003ec4:	f7fc ffe8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f7fc ffe5 	bl	8000e98 <lcd_wr_xdata>
 8003ece:	23c5      	movs	r3, #197	@ 0xc5
 8003ed0:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003ed4:	4b15      	ldr	r3, [pc, #84]	@ (8003f2c <lcd_init+0x1dc4>)
 8003ed6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003eda:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003edc:	4b13      	ldr	r3, [pc, #76]	@ (8003f2c <lcd_init+0x1dc4>)
 8003ede:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ee2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003ee4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	4b0f      	ldr	r3, [pc, #60]	@ (8003f28 <lcd_init+0x1dc0>)
 8003eec:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003eee:	4b0f      	ldr	r3, [pc, #60]	@ (8003f2c <lcd_init+0x1dc4>)
 8003ef0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003ef4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <lcd_init+0x1dc4>)
 8003ef8:	2280      	movs	r2, #128	@ 0x80
 8003efa:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003efc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f2c <lcd_init+0x1dc4>)
 8003efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f02:	611a      	str	r2, [r3, #16]
}
 8003f04:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x32);
 8003f06:	2032      	movs	r0, #50	@ 0x32
 8003f08:	f7fc ffc6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f7fc ffc3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8003f12:	2044      	movs	r0, #68	@ 0x44
 8003f14:	f7fc ffc0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f7fc ffbd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x65);
 8003f1e:	2065      	movs	r0, #101	@ 0x65
 8003f20:	f7fc ffba 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f24:	2000      	movs	r0, #0
 8003f26:	e003      	b.n	8003f30 <lcd_init+0x1dc8>
 8003f28:	40010c00 	.word	0x40010c00
 8003f2c:	40011000 	.word	0x40011000
 8003f30:	f7fc ffb2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 8003f34:	2076      	movs	r0, #118	@ 0x76
 8003f36:	f7fc ffaf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	f7fc ffac 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 8003f40:	2088      	movs	r0, #136	@ 0x88
 8003f42:	f7fc ffa9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f46:	2000      	movs	r0, #0
 8003f48:	f7fc ffa6 	bl	8000e98 <lcd_wr_xdata>
 8003f4c:	23c6      	movs	r3, #198	@ 0xc6
 8003f4e:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003f52:	4bd7      	ldr	r3, [pc, #860]	@ (80042b0 <lcd_init+0x2148>)
 8003f54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f58:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003f5a:	4bd5      	ldr	r3, [pc, #852]	@ (80042b0 <lcd_init+0x2148>)
 8003f5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f60:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003f62:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	4bd2      	ldr	r3, [pc, #840]	@ (80042b4 <lcd_init+0x214c>)
 8003f6a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003f6c:	4bd0      	ldr	r3, [pc, #832]	@ (80042b0 <lcd_init+0x2148>)
 8003f6e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003f72:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003f74:	4bce      	ldr	r3, [pc, #824]	@ (80042b0 <lcd_init+0x2148>)
 8003f76:	2280      	movs	r2, #128	@ 0x80
 8003f78:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003f7a:	4bcd      	ldr	r3, [pc, #820]	@ (80042b0 <lcd_init+0x2148>)
 8003f7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f80:	611a      	str	r2, [r3, #16]
}
 8003f82:	bf00      	nop

        lcd_wr_regno(0xC6);
        lcd_wr_xdata(0x20);
 8003f84:	2020      	movs	r0, #32
 8003f86:	f7fc ff87 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	f7fc ff84 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x17);
 8003f90:	2017      	movs	r0, #23
 8003f92:	f7fc ff81 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003f96:	2000      	movs	r0, #0
 8003f98:	f7fc ff7e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7fc ff7b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	f7fc ff78 	bl	8000e98 <lcd_wr_xdata>
 8003fa8:	23c7      	movs	r3, #199	@ 0xc7
 8003faa:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003fae:	4bc0      	ldr	r3, [pc, #768]	@ (80042b0 <lcd_init+0x2148>)
 8003fb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fb4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8003fb6:	4bbe      	ldr	r3, [pc, #760]	@ (80042b0 <lcd_init+0x2148>)
 8003fb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fbc:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8003fbe:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	4bbb      	ldr	r3, [pc, #748]	@ (80042b4 <lcd_init+0x214c>)
 8003fc6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8003fc8:	4bb9      	ldr	r3, [pc, #740]	@ (80042b0 <lcd_init+0x2148>)
 8003fca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003fce:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8003fd0:	4bb7      	ldr	r3, [pc, #732]	@ (80042b0 <lcd_init+0x2148>)
 8003fd2:	2280      	movs	r2, #128	@ 0x80
 8003fd4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8003fd6:	4bb6      	ldr	r3, [pc, #728]	@ (80042b0 <lcd_init+0x2148>)
 8003fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fdc:	611a      	str	r2, [r3, #16]
}
 8003fde:	bf00      	nop

        lcd_wr_regno(0xC7);
        lcd_wr_xdata(0x00);
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f7fc ff59 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	f7fc ff56 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003fec:	2000      	movs	r0, #0
 8003fee:	f7fc ff53 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f7fc ff50 	bl	8000e98 <lcd_wr_xdata>
 8003ff8:	23c8      	movs	r3, #200	@ 0xc8
 8003ffa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8003ffe:	4bac      	ldr	r3, [pc, #688]	@ (80042b0 <lcd_init+0x2148>)
 8004000:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004004:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004006:	4baa      	ldr	r3, [pc, #680]	@ (80042b0 <lcd_init+0x2148>)
 8004008:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800400c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800400e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8004012:	b29a      	uxth	r2, r3
 8004014:	4ba7      	ldr	r3, [pc, #668]	@ (80042b4 <lcd_init+0x214c>)
 8004016:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004018:	4ba5      	ldr	r3, [pc, #660]	@ (80042b0 <lcd_init+0x2148>)
 800401a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800401e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004020:	4ba3      	ldr	r3, [pc, #652]	@ (80042b0 <lcd_init+0x2148>)
 8004022:	2280      	movs	r2, #128	@ 0x80
 8004024:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004026:	4ba2      	ldr	r3, [pc, #648]	@ (80042b0 <lcd_init+0x2148>)
 8004028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800402c:	611a      	str	r2, [r3, #16]
}
 800402e:	bf00      	nop

        lcd_wr_regno(0xC8);
        lcd_wr_xdata(0x00);
 8004030:	2000      	movs	r0, #0
 8004032:	f7fc ff31 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004036:	2000      	movs	r0, #0
 8004038:	f7fc ff2e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800403c:	2000      	movs	r0, #0
 800403e:	f7fc ff2b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004042:	2000      	movs	r0, #0
 8004044:	f7fc ff28 	bl	8000e98 <lcd_wr_xdata>
 8004048:	23c9      	movs	r3, #201	@ 0xc9
 800404a:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800404e:	4b98      	ldr	r3, [pc, #608]	@ (80042b0 <lcd_init+0x2148>)
 8004050:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004054:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004056:	4b96      	ldr	r3, [pc, #600]	@ (80042b0 <lcd_init+0x2148>)
 8004058:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800405c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800405e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8004062:	b29a      	uxth	r2, r3
 8004064:	4b93      	ldr	r3, [pc, #588]	@ (80042b4 <lcd_init+0x214c>)
 8004066:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004068:	4b91      	ldr	r3, [pc, #580]	@ (80042b0 <lcd_init+0x2148>)
 800406a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800406e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004070:	4b8f      	ldr	r3, [pc, #572]	@ (80042b0 <lcd_init+0x2148>)
 8004072:	2280      	movs	r2, #128	@ 0x80
 8004074:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004076:	4b8e      	ldr	r3, [pc, #568]	@ (80042b0 <lcd_init+0x2148>)
 8004078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800407c:	611a      	str	r2, [r3, #16]
}
 800407e:	bf00      	nop

        lcd_wr_regno(0xC9);
        lcd_wr_xdata(0x00);
 8004080:	2000      	movs	r0, #0
 8004082:	f7fc ff09 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004086:	2000      	movs	r0, #0
 8004088:	f7fc ff06 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800408c:	2000      	movs	r0, #0
 800408e:	f7fc ff03 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004092:	2000      	movs	r0, #0
 8004094:	f7fc ff00 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004098:	2000      	movs	r0, #0
 800409a:	f7fc fefd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800409e:	2000      	movs	r0, #0
 80040a0:	f7fc fefa 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040a4:	2000      	movs	r0, #0
 80040a6:	f7fc fef7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040aa:	2000      	movs	r0, #0
 80040ac:	f7fc fef4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040b0:	2000      	movs	r0, #0
 80040b2:	f7fc fef1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040b6:	2000      	movs	r0, #0
 80040b8:	f7fc feee 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040bc:	2000      	movs	r0, #0
 80040be:	f7fc feeb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040c2:	2000      	movs	r0, #0
 80040c4:	f7fc fee8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040c8:	2000      	movs	r0, #0
 80040ca:	f7fc fee5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040ce:	2000      	movs	r0, #0
 80040d0:	f7fc fee2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040d4:	2000      	movs	r0, #0
 80040d6:	f7fc fedf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80040da:	2000      	movs	r0, #0
 80040dc:	f7fc fedc 	bl	8000e98 <lcd_wr_xdata>
 80040e0:	23e0      	movs	r3, #224	@ 0xe0
 80040e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80040e6:	4b72      	ldr	r3, [pc, #456]	@ (80042b0 <lcd_init+0x2148>)
 80040e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80040ee:	4b70      	ldr	r3, [pc, #448]	@ (80042b0 <lcd_init+0x2148>)
 80040f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040f4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80040f6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	4b6d      	ldr	r3, [pc, #436]	@ (80042b4 <lcd_init+0x214c>)
 80040fe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004100:	4b6b      	ldr	r3, [pc, #428]	@ (80042b0 <lcd_init+0x2148>)
 8004102:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004106:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004108:	4b69      	ldr	r3, [pc, #420]	@ (80042b0 <lcd_init+0x2148>)
 800410a:	2280      	movs	r2, #128	@ 0x80
 800410c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800410e:	4b68      	ldr	r3, [pc, #416]	@ (80042b0 <lcd_init+0x2148>)
 8004110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004114:	611a      	str	r2, [r3, #16]
}
 8004116:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0x16);
 8004118:	2016      	movs	r0, #22
 800411a:	f7fc febd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800411e:	2000      	movs	r0, #0
 8004120:	f7fc feba 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8004124:	201c      	movs	r0, #28
 8004126:	f7fc feb7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800412a:	2000      	movs	r0, #0
 800412c:	f7fc feb4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x21);
 8004130:	2021      	movs	r0, #33	@ 0x21
 8004132:	f7fc feb1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004136:	2000      	movs	r0, #0
 8004138:	f7fc feae 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 800413c:	2036      	movs	r0, #54	@ 0x36
 800413e:	f7fc feab 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004142:	2000      	movs	r0, #0
 8004144:	f7fc fea8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x46);
 8004148:	2046      	movs	r0, #70	@ 0x46
 800414a:	f7fc fea5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800414e:	2000      	movs	r0, #0
 8004150:	f7fc fea2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8004154:	2052      	movs	r0, #82	@ 0x52
 8004156:	f7fc fe9f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800415a:	2000      	movs	r0, #0
 800415c:	f7fc fe9c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8004160:	2064      	movs	r0, #100	@ 0x64
 8004162:	f7fc fe99 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004166:	2000      	movs	r0, #0
 8004168:	f7fc fe96 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 800416c:	207a      	movs	r0, #122	@ 0x7a
 800416e:	f7fc fe93 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004172:	2000      	movs	r0, #0
 8004174:	f7fc fe90 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8004178:	208b      	movs	r0, #139	@ 0x8b
 800417a:	f7fc fe8d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800417e:	2000      	movs	r0, #0
 8004180:	f7fc fe8a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004184:	2099      	movs	r0, #153	@ 0x99
 8004186:	f7fc fe87 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800418a:	2000      	movs	r0, #0
 800418c:	f7fc fe84 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 8004190:	20a8      	movs	r0, #168	@ 0xa8
 8004192:	f7fc fe81 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004196:	2000      	movs	r0, #0
 8004198:	f7fc fe7e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 800419c:	20b9      	movs	r0, #185	@ 0xb9
 800419e:	f7fc fe7b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041a2:	2000      	movs	r0, #0
 80041a4:	f7fc fe78 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 80041a8:	20c4      	movs	r0, #196	@ 0xc4
 80041aa:	f7fc fe75 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f7fc fe72 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 80041b4:	20ca      	movs	r0, #202	@ 0xca
 80041b6:	f7fc fe6f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ba:	2000      	movs	r0, #0
 80041bc:	f7fc fe6c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 80041c0:	20d2      	movs	r0, #210	@ 0xd2
 80041c2:	f7fc fe69 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041c6:	2000      	movs	r0, #0
 80041c8:	f7fc fe66 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xD9);
 80041cc:	20d9      	movs	r0, #217	@ 0xd9
 80041ce:	f7fc fe63 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7fc fe60 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 80041d8:	20e0      	movs	r0, #224	@ 0xe0
 80041da:	f7fc fe5d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041de:	2000      	movs	r0, #0
 80041e0:	f7fc fe5a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80041e4:	20f3      	movs	r0, #243	@ 0xf3
 80041e6:	f7fc fe57 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7fc fe54 	bl	8000e98 <lcd_wr_xdata>
 80041f0:	23e1      	movs	r3, #225	@ 0xe1
 80041f2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80041f6:	4b2e      	ldr	r3, [pc, #184]	@ (80042b0 <lcd_init+0x2148>)
 80041f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041fc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80041fe:	4b2c      	ldr	r3, [pc, #176]	@ (80042b0 <lcd_init+0x2148>)
 8004200:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004204:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004206:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 800420a:	b29a      	uxth	r2, r3
 800420c:	4b29      	ldr	r3, [pc, #164]	@ (80042b4 <lcd_init+0x214c>)
 800420e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004210:	4b27      	ldr	r3, [pc, #156]	@ (80042b0 <lcd_init+0x2148>)
 8004212:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004216:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004218:	4b25      	ldr	r3, [pc, #148]	@ (80042b0 <lcd_init+0x2148>)
 800421a:	2280      	movs	r2, #128	@ 0x80
 800421c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800421e:	4b24      	ldr	r3, [pc, #144]	@ (80042b0 <lcd_init+0x2148>)
 8004220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004224:	611a      	str	r2, [r3, #16]
}
 8004226:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0x16);
 8004228:	2016      	movs	r0, #22
 800422a:	f7fc fe35 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800422e:	2000      	movs	r0, #0
 8004230:	f7fc fe32 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 8004234:	201c      	movs	r0, #28
 8004236:	f7fc fe2f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800423a:	2000      	movs	r0, #0
 800423c:	f7fc fe2c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8004240:	2022      	movs	r0, #34	@ 0x22
 8004242:	f7fc fe29 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004246:	2000      	movs	r0, #0
 8004248:	f7fc fe26 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 800424c:	2036      	movs	r0, #54	@ 0x36
 800424e:	f7fc fe23 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004252:	2000      	movs	r0, #0
 8004254:	f7fc fe20 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004258:	2045      	movs	r0, #69	@ 0x45
 800425a:	f7fc fe1d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800425e:	2000      	movs	r0, #0
 8004260:	f7fc fe1a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8004264:	2052      	movs	r0, #82	@ 0x52
 8004266:	f7fc fe17 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800426a:	2000      	movs	r0, #0
 800426c:	f7fc fe14 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x64);
 8004270:	2064      	movs	r0, #100	@ 0x64
 8004272:	f7fc fe11 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004276:	2000      	movs	r0, #0
 8004278:	f7fc fe0e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x7A);
 800427c:	207a      	movs	r0, #122	@ 0x7a
 800427e:	f7fc fe0b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004282:	2000      	movs	r0, #0
 8004284:	f7fc fe08 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x8B);
 8004288:	208b      	movs	r0, #139	@ 0x8b
 800428a:	f7fc fe05 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800428e:	2000      	movs	r0, #0
 8004290:	f7fc fe02 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004294:	2099      	movs	r0, #153	@ 0x99
 8004296:	f7fc fdff 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800429a:	2000      	movs	r0, #0
 800429c:	f7fc fdfc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA8);
 80042a0:	20a8      	movs	r0, #168	@ 0xa8
 80042a2:	f7fc fdf9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042a6:	2000      	movs	r0, #0
 80042a8:	f7fc fdf6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xB9);
 80042ac:	20b9      	movs	r0, #185	@ 0xb9
 80042ae:	e003      	b.n	80042b8 <lcd_init+0x2150>
 80042b0:	40011000 	.word	0x40011000
 80042b4:	40010c00 	.word	0x40010c00
 80042b8:	f7fc fdee 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042bc:	2000      	movs	r0, #0
 80042be:	f7fc fdeb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 80042c2:	20c4      	movs	r0, #196	@ 0xc4
 80042c4:	f7fc fde8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042c8:	2000      	movs	r0, #0
 80042ca:	f7fc fde5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xCA);
 80042ce:	20ca      	movs	r0, #202	@ 0xca
 80042d0:	f7fc fde2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042d4:	2000      	movs	r0, #0
 80042d6:	f7fc fddf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xD2);
 80042da:	20d2      	movs	r0, #210	@ 0xd2
 80042dc:	f7fc fddc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042e0:	2000      	movs	r0, #0
 80042e2:	f7fc fdd9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xD8);
 80042e6:	20d8      	movs	r0, #216	@ 0xd8
 80042e8:	f7fc fdd6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042ec:	2000      	movs	r0, #0
 80042ee:	f7fc fdd3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 80042f2:	20e0      	movs	r0, #224	@ 0xe0
 80042f4:	f7fc fdd0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80042f8:	2000      	movs	r0, #0
 80042fa:	f7fc fdcd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 80042fe:	20f3      	movs	r0, #243	@ 0xf3
 8004300:	f7fc fdca 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004304:	2000      	movs	r0, #0
 8004306:	f7fc fdc7 	bl	8000e98 <lcd_wr_xdata>
 800430a:	23e2      	movs	r3, #226	@ 0xe2
 800430c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004310:	4be3      	ldr	r3, [pc, #908]	@ (80046a0 <lcd_init+0x2538>)
 8004312:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004316:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004318:	4be1      	ldr	r3, [pc, #900]	@ (80046a0 <lcd_init+0x2538>)
 800431a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800431e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004320:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8004324:	b29a      	uxth	r2, r3
 8004326:	4bdf      	ldr	r3, [pc, #892]	@ (80046a4 <lcd_init+0x253c>)
 8004328:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800432a:	4bdd      	ldr	r3, [pc, #884]	@ (80046a0 <lcd_init+0x2538>)
 800432c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004330:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004332:	4bdb      	ldr	r3, [pc, #876]	@ (80046a0 <lcd_init+0x2538>)
 8004334:	2280      	movs	r2, #128	@ 0x80
 8004336:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004338:	4bd9      	ldr	r3, [pc, #868]	@ (80046a0 <lcd_init+0x2538>)
 800433a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800433e:	611a      	str	r2, [r3, #16]
}
 8004340:	bf00      	nop

        lcd_wr_regno(0xE2);
        lcd_wr_xdata(0x05);
 8004342:	2005      	movs	r0, #5
 8004344:	f7fc fda8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004348:	2000      	movs	r0, #0
 800434a:	f7fc fda5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 800434e:	200b      	movs	r0, #11
 8004350:	f7fc fda2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004354:	2000      	movs	r0, #0
 8004356:	f7fc fd9f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);
 800435a:	201b      	movs	r0, #27
 800435c:	f7fc fd9c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004360:	2000      	movs	r0, #0
 8004362:	f7fc fd99 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004366:	2034      	movs	r0, #52	@ 0x34
 8004368:	f7fc fd96 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800436c:	2000      	movs	r0, #0
 800436e:	f7fc fd93 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004372:	2044      	movs	r0, #68	@ 0x44
 8004374:	f7fc fd90 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004378:	2000      	movs	r0, #0
 800437a:	f7fc fd8d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x4F);
 800437e:	204f      	movs	r0, #79	@ 0x4f
 8004380:	f7fc fd8a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004384:	2000      	movs	r0, #0
 8004386:	f7fc fd87 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 800438a:	2061      	movs	r0, #97	@ 0x61
 800438c:	f7fc fd84 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004390:	2000      	movs	r0, #0
 8004392:	f7fc fd81 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x79);
 8004396:	2079      	movs	r0, #121	@ 0x79
 8004398:	f7fc fd7e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800439c:	2000      	movs	r0, #0
 800439e:	f7fc fd7b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80043a2:	2088      	movs	r0, #136	@ 0x88
 80043a4:	f7fc fd78 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043a8:	2000      	movs	r0, #0
 80043aa:	f7fc fd75 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 80043ae:	2097      	movs	r0, #151	@ 0x97
 80043b0:	f7fc fd72 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043b4:	2000      	movs	r0, #0
 80043b6:	f7fc fd6f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 80043ba:	20a6      	movs	r0, #166	@ 0xa6
 80043bc:	f7fc fd6c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043c0:	2000      	movs	r0, #0
 80043c2:	f7fc fd69 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 80043c6:	20b7      	movs	r0, #183	@ 0xb7
 80043c8:	f7fc fd66 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043cc:	2000      	movs	r0, #0
 80043ce:	f7fc fd63 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 80043d2:	20c2      	movs	r0, #194	@ 0xc2
 80043d4:	f7fc fd60 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043d8:	2000      	movs	r0, #0
 80043da:	f7fc fd5d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 80043de:	20c7      	movs	r0, #199	@ 0xc7
 80043e0:	f7fc fd5a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043e4:	2000      	movs	r0, #0
 80043e6:	f7fc fd57 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 80043ea:	20d1      	movs	r0, #209	@ 0xd1
 80043ec:	f7fc fd54 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043f0:	2000      	movs	r0, #0
 80043f2:	f7fc fd51 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xD6);
 80043f6:	20d6      	movs	r0, #214	@ 0xd6
 80043f8:	f7fc fd4e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80043fc:	2000      	movs	r0, #0
 80043fe:	f7fc fd4b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8004402:	20dd      	movs	r0, #221	@ 0xdd
 8004404:	f7fc fd48 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004408:	2000      	movs	r0, #0
 800440a:	f7fc fd45 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 800440e:	20f3      	movs	r0, #243	@ 0xf3
 8004410:	f7fc fd42 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004414:	2000      	movs	r0, #0
 8004416:	f7fc fd3f 	bl	8000e98 <lcd_wr_xdata>
 800441a:	23e3      	movs	r3, #227	@ 0xe3
 800441c:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004420:	4b9f      	ldr	r3, [pc, #636]	@ (80046a0 <lcd_init+0x2538>)
 8004422:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004426:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004428:	4b9d      	ldr	r3, [pc, #628]	@ (80046a0 <lcd_init+0x2538>)
 800442a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800442e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004430:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8004434:	b29a      	uxth	r2, r3
 8004436:	4b9b      	ldr	r3, [pc, #620]	@ (80046a4 <lcd_init+0x253c>)
 8004438:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800443a:	4b99      	ldr	r3, [pc, #612]	@ (80046a0 <lcd_init+0x2538>)
 800443c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004440:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004442:	4b97      	ldr	r3, [pc, #604]	@ (80046a0 <lcd_init+0x2538>)
 8004444:	2280      	movs	r2, #128	@ 0x80
 8004446:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004448:	4b95      	ldr	r3, [pc, #596]	@ (80046a0 <lcd_init+0x2538>)
 800444a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800444e:	611a      	str	r2, [r3, #16]
}
 8004450:	bf00      	nop
        lcd_wr_regno(0xE3);
        lcd_wr_xdata(0x05);
 8004452:	2005      	movs	r0, #5
 8004454:	f7fc fd20 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004458:	2000      	movs	r0, #0
 800445a:	f7fc fd1d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA);
 800445e:	200a      	movs	r0, #10
 8004460:	f7fc fd1a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004464:	2000      	movs	r0, #0
 8004466:	f7fc fd17 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x1C);
 800446a:	201c      	movs	r0, #28
 800446c:	f7fc fd14 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004470:	2000      	movs	r0, #0
 8004472:	f7fc fd11 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 8004476:	2033      	movs	r0, #51	@ 0x33
 8004478:	f7fc fd0e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800447c:	2000      	movs	r0, #0
 800447e:	f7fc fd0b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004482:	2044      	movs	r0, #68	@ 0x44
 8004484:	f7fc fd08 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004488:	2000      	movs	r0, #0
 800448a:	f7fc fd05 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 800448e:	2050      	movs	r0, #80	@ 0x50
 8004490:	f7fc fd02 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004494:	2000      	movs	r0, #0
 8004496:	f7fc fcff 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x62);
 800449a:	2062      	movs	r0, #98	@ 0x62
 800449c:	f7fc fcfc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044a0:	2000      	movs	r0, #0
 80044a2:	f7fc fcf9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x78);
 80044a6:	2078      	movs	r0, #120	@ 0x78
 80044a8:	f7fc fcf6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044ac:	2000      	movs	r0, #0
 80044ae:	f7fc fcf3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80044b2:	2088      	movs	r0, #136	@ 0x88
 80044b4:	f7fc fcf0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044b8:	2000      	movs	r0, #0
 80044ba:	f7fc fced 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x97);
 80044be:	2097      	movs	r0, #151	@ 0x97
 80044c0:	f7fc fcea 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044c4:	2000      	movs	r0, #0
 80044c6:	f7fc fce7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA6);
 80044ca:	20a6      	movs	r0, #166	@ 0xa6
 80044cc:	f7fc fce4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044d0:	2000      	movs	r0, #0
 80044d2:	f7fc fce1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xB7);
 80044d6:	20b7      	movs	r0, #183	@ 0xb7
 80044d8:	f7fc fcde 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044dc:	2000      	movs	r0, #0
 80044de:	f7fc fcdb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xC2);
 80044e2:	20c2      	movs	r0, #194	@ 0xc2
 80044e4:	f7fc fcd8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044e8:	2000      	movs	r0, #0
 80044ea:	f7fc fcd5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xC7);
 80044ee:	20c7      	movs	r0, #199	@ 0xc7
 80044f0:	f7fc fcd2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80044f4:	2000      	movs	r0, #0
 80044f6:	f7fc fccf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xD1);
 80044fa:	20d1      	movs	r0, #209	@ 0xd1
 80044fc:	f7fc fccc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004500:	2000      	movs	r0, #0
 8004502:	f7fc fcc9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xD5);
 8004506:	20d5      	movs	r0, #213	@ 0xd5
 8004508:	f7fc fcc6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800450c:	2000      	movs	r0, #0
 800450e:	f7fc fcc3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8004512:	20dd      	movs	r0, #221	@ 0xdd
 8004514:	f7fc fcc0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004518:	2000      	movs	r0, #0
 800451a:	f7fc fcbd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 800451e:	20f3      	movs	r0, #243	@ 0xf3
 8004520:	f7fc fcba 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004524:	2000      	movs	r0, #0
 8004526:	f7fc fcb7 	bl	8000e98 <lcd_wr_xdata>
 800452a:	23e4      	movs	r3, #228	@ 0xe4
 800452c:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004530:	4b5b      	ldr	r3, [pc, #364]	@ (80046a0 <lcd_init+0x2538>)
 8004532:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004536:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004538:	4b59      	ldr	r3, [pc, #356]	@ (80046a0 <lcd_init+0x2538>)
 800453a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800453e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004540:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004544:	b29a      	uxth	r2, r3
 8004546:	4b57      	ldr	r3, [pc, #348]	@ (80046a4 <lcd_init+0x253c>)
 8004548:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800454a:	4b55      	ldr	r3, [pc, #340]	@ (80046a0 <lcd_init+0x2538>)
 800454c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004550:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004552:	4b53      	ldr	r3, [pc, #332]	@ (80046a0 <lcd_init+0x2538>)
 8004554:	2280      	movs	r2, #128	@ 0x80
 8004556:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004558:	4b51      	ldr	r3, [pc, #324]	@ (80046a0 <lcd_init+0x2538>)
 800455a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800455e:	611a      	str	r2, [r3, #16]
}
 8004560:	bf00      	nop

        lcd_wr_regno(0xE4);
        lcd_wr_xdata(0x01);
 8004562:	2001      	movs	r0, #1
 8004564:	f7fc fc98 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004568:	2000      	movs	r0, #0
 800456a:	f7fc fc95 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800456e:	2001      	movs	r0, #1
 8004570:	f7fc fc92 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004574:	2000      	movs	r0, #0
 8004576:	f7fc fc8f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800457a:	2002      	movs	r0, #2
 800457c:	f7fc fc8c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004580:	2000      	movs	r0, #0
 8004582:	f7fc fc89 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x2A);
 8004586:	202a      	movs	r0, #42	@ 0x2a
 8004588:	f7fc fc86 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800458c:	2000      	movs	r0, #0
 800458e:	f7fc fc83 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 8004592:	203c      	movs	r0, #60	@ 0x3c
 8004594:	f7fc fc80 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004598:	2000      	movs	r0, #0
 800459a:	f7fc fc7d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 800459e:	204b      	movs	r0, #75	@ 0x4b
 80045a0:	f7fc fc7a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045a4:	2000      	movs	r0, #0
 80045a6:	f7fc fc77 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80045aa:	205d      	movs	r0, #93	@ 0x5d
 80045ac:	f7fc fc74 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045b0:	2000      	movs	r0, #0
 80045b2:	f7fc fc71 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 80045b6:	2074      	movs	r0, #116	@ 0x74
 80045b8:	f7fc fc6e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045bc:	2000      	movs	r0, #0
 80045be:	f7fc fc6b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 80045c2:	2084      	movs	r0, #132	@ 0x84
 80045c4:	f7fc fc68 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045c8:	2000      	movs	r0, #0
 80045ca:	f7fc fc65 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 80045ce:	2093      	movs	r0, #147	@ 0x93
 80045d0:	f7fc fc62 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045d4:	2000      	movs	r0, #0
 80045d6:	f7fc fc5f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 80045da:	20a2      	movs	r0, #162	@ 0xa2
 80045dc:	f7fc fc5c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045e0:	2000      	movs	r0, #0
 80045e2:	f7fc fc59 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 80045e6:	20b3      	movs	r0, #179	@ 0xb3
 80045e8:	f7fc fc56 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045ec:	2000      	movs	r0, #0
 80045ee:	f7fc fc53 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 80045f2:	20be      	movs	r0, #190	@ 0xbe
 80045f4:	f7fc fc50 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80045f8:	2000      	movs	r0, #0
 80045fa:	f7fc fc4d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 80045fe:	20c4      	movs	r0, #196	@ 0xc4
 8004600:	f7fc fc4a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004604:	2000      	movs	r0, #0
 8004606:	f7fc fc47 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 800460a:	20cd      	movs	r0, #205	@ 0xcd
 800460c:	f7fc fc44 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004610:	2000      	movs	r0, #0
 8004612:	f7fc fc41 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 8004616:	20d3      	movs	r0, #211	@ 0xd3
 8004618:	f7fc fc3e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800461c:	2000      	movs	r0, #0
 800461e:	f7fc fc3b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xDD);
 8004622:	20dd      	movs	r0, #221	@ 0xdd
 8004624:	f7fc fc38 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004628:	2000      	movs	r0, #0
 800462a:	f7fc fc35 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 800462e:	20f3      	movs	r0, #243	@ 0xf3
 8004630:	f7fc fc32 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004634:	2000      	movs	r0, #0
 8004636:	f7fc fc2f 	bl	8000e98 <lcd_wr_xdata>
 800463a:	23e5      	movs	r3, #229	@ 0xe5
 800463c:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004640:	4b17      	ldr	r3, [pc, #92]	@ (80046a0 <lcd_init+0x2538>)
 8004642:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004646:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004648:	4b15      	ldr	r3, [pc, #84]	@ (80046a0 <lcd_init+0x2538>)
 800464a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800464e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004650:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004654:	b29a      	uxth	r2, r3
 8004656:	4b13      	ldr	r3, [pc, #76]	@ (80046a4 <lcd_init+0x253c>)
 8004658:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800465a:	4b11      	ldr	r3, [pc, #68]	@ (80046a0 <lcd_init+0x2538>)
 800465c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004660:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004662:	4b0f      	ldr	r3, [pc, #60]	@ (80046a0 <lcd_init+0x2538>)
 8004664:	2280      	movs	r2, #128	@ 0x80
 8004666:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004668:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <lcd_init+0x2538>)
 800466a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800466e:	611a      	str	r2, [r3, #16]
}
 8004670:	bf00      	nop
        lcd_wr_regno(0xE5);
        lcd_wr_xdata(0x00);
 8004672:	2000      	movs	r0, #0
 8004674:	f7fc fc10 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004678:	2000      	movs	r0, #0
 800467a:	f7fc fc0d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800467e:	2000      	movs	r0, #0
 8004680:	f7fc fc0a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004684:	2000      	movs	r0, #0
 8004686:	f7fc fc07 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x02);
 800468a:	2002      	movs	r0, #2
 800468c:	f7fc fc04 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004690:	2000      	movs	r0, #0
 8004692:	f7fc fc01 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004696:	2029      	movs	r0, #41	@ 0x29
 8004698:	f7fc fbfe 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800469c:	2000      	movs	r0, #0
 800469e:	e003      	b.n	80046a8 <lcd_init+0x2540>
 80046a0:	40011000 	.word	0x40011000
 80046a4:	40010c00 	.word	0x40010c00
 80046a8:	f7fc fbf6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x3C);
 80046ac:	203c      	movs	r0, #60	@ 0x3c
 80046ae:	f7fc fbf3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046b2:	2000      	movs	r0, #0
 80046b4:	f7fc fbf0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x4B);
 80046b8:	204b      	movs	r0, #75	@ 0x4b
 80046ba:	f7fc fbed 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046be:	2000      	movs	r0, #0
 80046c0:	f7fc fbea 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x5D);
 80046c4:	205d      	movs	r0, #93	@ 0x5d
 80046c6:	f7fc fbe7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046ca:	2000      	movs	r0, #0
 80046cc:	f7fc fbe4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x74);
 80046d0:	2074      	movs	r0, #116	@ 0x74
 80046d2:	f7fc fbe1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046d6:	2000      	movs	r0, #0
 80046d8:	f7fc fbde 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x84);
 80046dc:	2084      	movs	r0, #132	@ 0x84
 80046de:	f7fc fbdb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046e2:	2000      	movs	r0, #0
 80046e4:	f7fc fbd8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x93);
 80046e8:	2093      	movs	r0, #147	@ 0x93
 80046ea:	f7fc fbd5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046ee:	2000      	movs	r0, #0
 80046f0:	f7fc fbd2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 80046f4:	20a2      	movs	r0, #162	@ 0xa2
 80046f6:	f7fc fbcf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80046fa:	2000      	movs	r0, #0
 80046fc:	f7fc fbcc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xB3);
 8004700:	20b3      	movs	r0, #179	@ 0xb3
 8004702:	f7fc fbc9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004706:	2000      	movs	r0, #0
 8004708:	f7fc fbc6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xBE);
 800470c:	20be      	movs	r0, #190	@ 0xbe
 800470e:	f7fc fbc3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004712:	2000      	movs	r0, #0
 8004714:	f7fc fbc0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xC4);
 8004718:	20c4      	movs	r0, #196	@ 0xc4
 800471a:	f7fc fbbd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800471e:	2000      	movs	r0, #0
 8004720:	f7fc fbba 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xCD);
 8004724:	20cd      	movs	r0, #205	@ 0xcd
 8004726:	f7fc fbb7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800472a:	2000      	movs	r0, #0
 800472c:	f7fc fbb4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xD3);
 8004730:	20d3      	movs	r0, #211	@ 0xd3
 8004732:	f7fc fbb1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004736:	2000      	movs	r0, #0
 8004738:	f7fc fbae 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xDC);
 800473c:	20dc      	movs	r0, #220	@ 0xdc
 800473e:	f7fc fbab 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004742:	2000      	movs	r0, #0
 8004744:	f7fc fba8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xF3);
 8004748:	20f3      	movs	r0, #243	@ 0xf3
 800474a:	f7fc fba5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800474e:	2000      	movs	r0, #0
 8004750:	f7fc fba2 	bl	8000e98 <lcd_wr_xdata>
 8004754:	23e6      	movs	r3, #230	@ 0xe6
 8004756:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800475a:	4bde      	ldr	r3, [pc, #888]	@ (8004ad4 <lcd_init+0x296c>)
 800475c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004760:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004762:	4bdc      	ldr	r3, [pc, #880]	@ (8004ad4 <lcd_init+0x296c>)
 8004764:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004768:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800476a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800476e:	b29a      	uxth	r2, r3
 8004770:	4bd9      	ldr	r3, [pc, #868]	@ (8004ad8 <lcd_init+0x2970>)
 8004772:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004774:	4bd7      	ldr	r3, [pc, #860]	@ (8004ad4 <lcd_init+0x296c>)
 8004776:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800477a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800477c:	4bd5      	ldr	r3, [pc, #852]	@ (8004ad4 <lcd_init+0x296c>)
 800477e:	2280      	movs	r2, #128	@ 0x80
 8004780:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004782:	4bd4      	ldr	r3, [pc, #848]	@ (8004ad4 <lcd_init+0x296c>)
 8004784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004788:	611a      	str	r2, [r3, #16]
}
 800478a:	bf00      	nop

        lcd_wr_regno(0xE6);
        lcd_wr_xdata(0x11);
 800478c:	2011      	movs	r0, #17
 800478e:	f7fc fb83 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004792:	2000      	movs	r0, #0
 8004794:	f7fc fb80 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8004798:	2034      	movs	r0, #52	@ 0x34
 800479a:	f7fc fb7d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800479e:	2000      	movs	r0, #0
 80047a0:	f7fc fb7a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 80047a4:	2056      	movs	r0, #86	@ 0x56
 80047a6:	f7fc fb77 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047aa:	2000      	movs	r0, #0
 80047ac:	f7fc fb74 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 80047b0:	2076      	movs	r0, #118	@ 0x76
 80047b2:	f7fc fb71 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047b6:	2000      	movs	r0, #0
 80047b8:	f7fc fb6e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 80047bc:	2077      	movs	r0, #119	@ 0x77
 80047be:	f7fc fb6b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047c2:	2000      	movs	r0, #0
 80047c4:	f7fc fb68 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80047c8:	2066      	movs	r0, #102	@ 0x66
 80047ca:	f7fc fb65 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047ce:	2000      	movs	r0, #0
 80047d0:	f7fc fb62 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80047d4:	2088      	movs	r0, #136	@ 0x88
 80047d6:	f7fc fb5f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047da:	2000      	movs	r0, #0
 80047dc:	f7fc fb5c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80047e0:	2099      	movs	r0, #153	@ 0x99
 80047e2:	f7fc fb59 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047e6:	2000      	movs	r0, #0
 80047e8:	f7fc fb56 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 80047ec:	20bb      	movs	r0, #187	@ 0xbb
 80047ee:	f7fc fb53 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047f2:	2000      	movs	r0, #0
 80047f4:	f7fc fb50 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80047f8:	2099      	movs	r0, #153	@ 0x99
 80047fa:	f7fc fb4d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80047fe:	2000      	movs	r0, #0
 8004800:	f7fc fb4a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 8004804:	2066      	movs	r0, #102	@ 0x66
 8004806:	f7fc fb47 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800480a:	2000      	movs	r0, #0
 800480c:	f7fc fb44 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004810:	2055      	movs	r0, #85	@ 0x55
 8004812:	f7fc fb41 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004816:	2000      	movs	r0, #0
 8004818:	f7fc fb3e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 800481c:	2055      	movs	r0, #85	@ 0x55
 800481e:	f7fc fb3b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004822:	2000      	movs	r0, #0
 8004824:	f7fc fb38 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004828:	2045      	movs	r0, #69	@ 0x45
 800482a:	f7fc fb35 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800482e:	2000      	movs	r0, #0
 8004830:	f7fc fb32 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x43);
 8004834:	2043      	movs	r0, #67	@ 0x43
 8004836:	f7fc fb2f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800483a:	2000      	movs	r0, #0
 800483c:	f7fc fb2c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004840:	2044      	movs	r0, #68	@ 0x44
 8004842:	f7fc fb29 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004846:	2000      	movs	r0, #0
 8004848:	f7fc fb26 	bl	8000e98 <lcd_wr_xdata>
 800484c:	23e7      	movs	r3, #231	@ 0xe7
 800484e:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004852:	4ba0      	ldr	r3, [pc, #640]	@ (8004ad4 <lcd_init+0x296c>)
 8004854:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004858:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800485a:	4b9e      	ldr	r3, [pc, #632]	@ (8004ad4 <lcd_init+0x296c>)
 800485c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004860:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004862:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8004866:	b29a      	uxth	r2, r3
 8004868:	4b9b      	ldr	r3, [pc, #620]	@ (8004ad8 <lcd_init+0x2970>)
 800486a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800486c:	4b99      	ldr	r3, [pc, #612]	@ (8004ad4 <lcd_init+0x296c>)
 800486e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004872:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004874:	4b97      	ldr	r3, [pc, #604]	@ (8004ad4 <lcd_init+0x296c>)
 8004876:	2280      	movs	r2, #128	@ 0x80
 8004878:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800487a:	4b96      	ldr	r3, [pc, #600]	@ (8004ad4 <lcd_init+0x296c>)
 800487c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004880:	611a      	str	r2, [r3, #16]
}
 8004882:	bf00      	nop

        lcd_wr_regno(0xE7);
        lcd_wr_xdata(0x32);
 8004884:	2032      	movs	r0, #50	@ 0x32
 8004886:	f7fc fb07 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800488a:	2000      	movs	r0, #0
 800488c:	f7fc fb04 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004890:	2055      	movs	r0, #85	@ 0x55
 8004892:	f7fc fb01 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004896:	2000      	movs	r0, #0
 8004898:	f7fc fafe 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x76);
 800489c:	2076      	movs	r0, #118	@ 0x76
 800489e:	f7fc fafb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048a2:	2000      	movs	r0, #0
 80048a4:	f7fc faf8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80048a8:	2066      	movs	r0, #102	@ 0x66
 80048aa:	f7fc faf5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048ae:	2000      	movs	r0, #0
 80048b0:	f7fc faf2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80048b4:	2067      	movs	r0, #103	@ 0x67
 80048b6:	f7fc faef 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048ba:	2000      	movs	r0, #0
 80048bc:	f7fc faec 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80048c0:	2067      	movs	r0, #103	@ 0x67
 80048c2:	f7fc fae9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048c6:	2000      	movs	r0, #0
 80048c8:	f7fc fae6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 80048cc:	2087      	movs	r0, #135	@ 0x87
 80048ce:	f7fc fae3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048d2:	2000      	movs	r0, #0
 80048d4:	f7fc fae0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80048d8:	2099      	movs	r0, #153	@ 0x99
 80048da:	f7fc fadd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048de:	2000      	movs	r0, #0
 80048e0:	f7fc fada 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 80048e4:	20bb      	movs	r0, #187	@ 0xbb
 80048e6:	f7fc fad7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048ea:	2000      	movs	r0, #0
 80048ec:	f7fc fad4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80048f0:	2099      	movs	r0, #153	@ 0x99
 80048f2:	f7fc fad1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80048f6:	2000      	movs	r0, #0
 80048f8:	f7fc face 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 80048fc:	2077      	movs	r0, #119	@ 0x77
 80048fe:	f7fc facb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004902:	2000      	movs	r0, #0
 8004904:	f7fc fac8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004908:	2044      	movs	r0, #68	@ 0x44
 800490a:	f7fc fac5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800490e:	2000      	movs	r0, #0
 8004910:	f7fc fac2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x56);
 8004914:	2056      	movs	r0, #86	@ 0x56
 8004916:	f7fc fabf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800491a:	2000      	movs	r0, #0
 800491c:	f7fc fabc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8004920:	2023      	movs	r0, #35	@ 0x23
 8004922:	f7fc fab9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004926:	2000      	movs	r0, #0
 8004928:	f7fc fab6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 800492c:	2033      	movs	r0, #51	@ 0x33
 800492e:	f7fc fab3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004932:	2000      	movs	r0, #0
 8004934:	f7fc fab0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8004938:	2045      	movs	r0, #69	@ 0x45
 800493a:	f7fc faad 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800493e:	2000      	movs	r0, #0
 8004940:	f7fc faaa 	bl	8000e98 <lcd_wr_xdata>
 8004944:	23e8      	movs	r3, #232	@ 0xe8
 8004946:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800494a:	4b62      	ldr	r3, [pc, #392]	@ (8004ad4 <lcd_init+0x296c>)
 800494c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004950:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004952:	4b60      	ldr	r3, [pc, #384]	@ (8004ad4 <lcd_init+0x296c>)
 8004954:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004958:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800495a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800495e:	b29a      	uxth	r2, r3
 8004960:	4b5d      	ldr	r3, [pc, #372]	@ (8004ad8 <lcd_init+0x2970>)
 8004962:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004964:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad4 <lcd_init+0x296c>)
 8004966:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800496a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800496c:	4b59      	ldr	r3, [pc, #356]	@ (8004ad4 <lcd_init+0x296c>)
 800496e:	2280      	movs	r2, #128	@ 0x80
 8004970:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004972:	4b58      	ldr	r3, [pc, #352]	@ (8004ad4 <lcd_init+0x296c>)
 8004974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004978:	611a      	str	r2, [r3, #16]
}
 800497a:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x00);
 800497c:	2000      	movs	r0, #0
 800497e:	f7fc fa8b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004982:	2000      	movs	r0, #0
 8004984:	f7fc fa88 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 8004988:	2099      	movs	r0, #153	@ 0x99
 800498a:	f7fc fa85 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800498e:	2000      	movs	r0, #0
 8004990:	f7fc fa82 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x87);
 8004994:	2087      	movs	r0, #135	@ 0x87
 8004996:	f7fc fa7f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800499a:	2000      	movs	r0, #0
 800499c:	f7fc fa7c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80049a0:	2088      	movs	r0, #136	@ 0x88
 80049a2:	f7fc fa79 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049a6:	2000      	movs	r0, #0
 80049a8:	f7fc fa76 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x77);
 80049ac:	2077      	movs	r0, #119	@ 0x77
 80049ae:	f7fc fa73 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049b2:	2000      	movs	r0, #0
 80049b4:	f7fc fa70 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80049b8:	2066      	movs	r0, #102	@ 0x66
 80049ba:	f7fc fa6d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049be:	2000      	movs	r0, #0
 80049c0:	f7fc fa6a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);
 80049c4:	2088      	movs	r0, #136	@ 0x88
 80049c6:	f7fc fa67 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049ca:	2000      	movs	r0, #0
 80049cc:	f7fc fa64 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xAA);
 80049d0:	20aa      	movs	r0, #170	@ 0xaa
 80049d2:	f7fc fa61 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049d6:	2000      	movs	r0, #0
 80049d8:	f7fc fa5e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xBB);
 80049dc:	20bb      	movs	r0, #187	@ 0xbb
 80049de:	f7fc fa5b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7fc fa58 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x99);
 80049e8:	2099      	movs	r0, #153	@ 0x99
 80049ea:	f7fc fa55 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049ee:	2000      	movs	r0, #0
 80049f0:	f7fc fa52 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x66);
 80049f4:	2066      	movs	r0, #102	@ 0x66
 80049f6:	f7fc fa4f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80049fa:	2000      	movs	r0, #0
 80049fc:	f7fc fa4c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004a00:	2055      	movs	r0, #85	@ 0x55
 8004a02:	f7fc fa49 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a06:	2000      	movs	r0, #0
 8004a08:	f7fc fa46 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004a0c:	2055      	movs	r0, #85	@ 0x55
 8004a0e:	f7fc fa43 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a12:	2000      	movs	r0, #0
 8004a14:	f7fc fa40 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004a18:	2044      	movs	r0, #68	@ 0x44
 8004a1a:	f7fc fa3d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f7fc fa3a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8004a24:	2044      	movs	r0, #68	@ 0x44
 8004a26:	f7fc fa37 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7fc fa34 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x55);
 8004a30:	2055      	movs	r0, #85	@ 0x55
 8004a32:	f7fc fa31 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a36:	2000      	movs	r0, #0
 8004a38:	f7fc fa2e 	bl	8000e98 <lcd_wr_xdata>
 8004a3c:	23e9      	movs	r3, #233	@ 0xe9
 8004a3e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a42:	4b24      	ldr	r3, [pc, #144]	@ (8004ad4 <lcd_init+0x296c>)
 8004a44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a48:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a4a:	4b22      	ldr	r3, [pc, #136]	@ (8004ad4 <lcd_init+0x296c>)
 8004a4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a50:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004a52:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	4b1f      	ldr	r3, [pc, #124]	@ (8004ad8 <lcd_init+0x2970>)
 8004a5a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad4 <lcd_init+0x296c>)
 8004a5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a62:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004a64:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad4 <lcd_init+0x296c>)
 8004a66:	2280      	movs	r2, #128	@ 0x80
 8004a68:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad4 <lcd_init+0x296c>)
 8004a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a70:	611a      	str	r2, [r3, #16]
}
 8004a72:	bf00      	nop

        lcd_wr_regno(0xE9);
        lcd_wr_xdata(0xAA);
 8004a74:	20aa      	movs	r0, #170	@ 0xaa
 8004a76:	f7fc fa0f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	f7fc fa0c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a80:	2000      	movs	r0, #0
 8004a82:	f7fc fa09 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004a86:	2000      	movs	r0, #0
 8004a88:	f7fc fa06 	bl	8000e98 <lcd_wr_xdata>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004a92:	4b10      	ldr	r3, [pc, #64]	@ (8004ad4 <lcd_init+0x296c>)
 8004a94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a98:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad4 <lcd_init+0x296c>)
 8004a9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aa0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004aa2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <lcd_init+0x2970>)
 8004aaa:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004aac:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <lcd_init+0x296c>)
 8004aae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ab2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ab4:	4b07      	ldr	r3, [pc, #28]	@ (8004ad4 <lcd_init+0x296c>)
 8004ab6:	2280      	movs	r2, #128	@ 0x80
 8004ab8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004aba:	4b06      	ldr	r3, [pc, #24]	@ (8004ad4 <lcd_init+0x296c>)
 8004abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ac0:	611a      	str	r2, [r3, #16]
}
 8004ac2:	bf00      	nop

        lcd_wr_regno(0x00);
        lcd_wr_xdata(0xAA);
 8004ac4:	20aa      	movs	r0, #170	@ 0xaa
 8004ac6:	f7fc f9e7 	bl	8000e98 <lcd_wr_xdata>
 8004aca:	23cf      	movs	r3, #207	@ 0xcf
 8004acc:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8004ad0:	e004      	b.n	8004adc <lcd_init+0x2974>
 8004ad2:	bf00      	nop
 8004ad4:	40011000 	.word	0x40011000
 8004ad8:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004adc:	4bbc      	ldr	r3, [pc, #752]	@ (8004dd0 <lcd_init+0x2c68>)
 8004ade:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ae2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004ae4:	4bba      	ldr	r3, [pc, #744]	@ (8004dd0 <lcd_init+0x2c68>)
 8004ae6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aea:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004aec:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	4bb8      	ldr	r3, [pc, #736]	@ (8004dd4 <lcd_init+0x2c6c>)
 8004af4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004af6:	4bb6      	ldr	r3, [pc, #728]	@ (8004dd0 <lcd_init+0x2c68>)
 8004af8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004afc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004afe:	4bb4      	ldr	r3, [pc, #720]	@ (8004dd0 <lcd_init+0x2c68>)
 8004b00:	2280      	movs	r2, #128	@ 0x80
 8004b02:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004b04:	4bb2      	ldr	r3, [pc, #712]	@ (8004dd0 <lcd_init+0x2c68>)
 8004b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b0a:	611a      	str	r2, [r3, #16]
}
 8004b0c:	bf00      	nop

        lcd_wr_regno(0xCF);
        lcd_wr_xdata(0x00);
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7fc f9c2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b14:	2000      	movs	r0, #0
 8004b16:	f7fc f9bf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	f7fc f9bc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b20:	2000      	movs	r0, #0
 8004b22:	f7fc f9b9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b26:	2000      	movs	r0, #0
 8004b28:	f7fc f9b6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	f7fc f9b3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b32:	2000      	movs	r0, #0
 8004b34:	f7fc f9b0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f7fc f9ad 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f7fc f9aa 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b44:	2000      	movs	r0, #0
 8004b46:	f7fc f9a7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7fc f9a4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b50:	2000      	movs	r0, #0
 8004b52:	f7fc f9a1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b56:	2000      	movs	r0, #0
 8004b58:	f7fc f99e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f7fc f99b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b62:	2000      	movs	r0, #0
 8004b64:	f7fc f998 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b68:	2000      	movs	r0, #0
 8004b6a:	f7fc f995 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f7fc f992 	bl	8000e98 <lcd_wr_xdata>
 8004b74:	23f0      	movs	r3, #240	@ 0xf0
 8004b76:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004b7a:	4b95      	ldr	r3, [pc, #596]	@ (8004dd0 <lcd_init+0x2c68>)
 8004b7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b80:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004b82:	4b93      	ldr	r3, [pc, #588]	@ (8004dd0 <lcd_init+0x2c68>)
 8004b84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b88:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004b8a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	4b90      	ldr	r3, [pc, #576]	@ (8004dd4 <lcd_init+0x2c6c>)
 8004b92:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004b94:	4b8e      	ldr	r3, [pc, #568]	@ (8004dd0 <lcd_init+0x2c68>)
 8004b96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004b9a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8004dd0 <lcd_init+0x2c68>)
 8004b9e:	2280      	movs	r2, #128	@ 0x80
 8004ba0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004ba2:	4b8b      	ldr	r3, [pc, #556]	@ (8004dd0 <lcd_init+0x2c68>)
 8004ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ba8:	611a      	str	r2, [r3, #16]
}
 8004baa:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x00);
 8004bac:	2000      	movs	r0, #0
 8004bae:	f7fc f973 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x50);
 8004bb2:	2050      	movs	r0, #80	@ 0x50
 8004bb4:	f7fc f970 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bb8:	2000      	movs	r0, #0
 8004bba:	f7fc f96d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f7fc f96a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	f7fc f967 	bl	8000e98 <lcd_wr_xdata>
 8004bca:	23f3      	movs	r3, #243	@ 0xf3
 8004bcc:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004bd0:	4b7f      	ldr	r3, [pc, #508]	@ (8004dd0 <lcd_init+0x2c68>)
 8004bd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bd6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004bd8:	4b7d      	ldr	r3, [pc, #500]	@ (8004dd0 <lcd_init+0x2c68>)
 8004bda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bde:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004be0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	4b7b      	ldr	r3, [pc, #492]	@ (8004dd4 <lcd_init+0x2c6c>)
 8004be8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004bea:	4b79      	ldr	r3, [pc, #484]	@ (8004dd0 <lcd_init+0x2c68>)
 8004bec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004bf0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004bf2:	4b77      	ldr	r3, [pc, #476]	@ (8004dd0 <lcd_init+0x2c68>)
 8004bf4:	2280      	movs	r2, #128	@ 0x80
 8004bf6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004bf8:	4b75      	ldr	r3, [pc, #468]	@ (8004dd0 <lcd_init+0x2c68>)
 8004bfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bfe:	611a      	str	r2, [r3, #16]
}
 8004c00:	bf00      	nop

        lcd_wr_regno(0xF3);
        lcd_wr_xdata(0x00);
 8004c02:	2000      	movs	r0, #0
 8004c04:	f7fc f948 	bl	8000e98 <lcd_wr_xdata>
 8004c08:	23f9      	movs	r3, #249	@ 0xf9
 8004c0a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c0e:	4b70      	ldr	r3, [pc, #448]	@ (8004dd0 <lcd_init+0x2c68>)
 8004c10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c14:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c16:	4b6e      	ldr	r3, [pc, #440]	@ (8004dd0 <lcd_init+0x2c68>)
 8004c18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c1c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	4b6b      	ldr	r3, [pc, #428]	@ (8004dd4 <lcd_init+0x2c6c>)
 8004c26:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c28:	4b69      	ldr	r3, [pc, #420]	@ (8004dd0 <lcd_init+0x2c68>)
 8004c2a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c2e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c30:	4b67      	ldr	r3, [pc, #412]	@ (8004dd0 <lcd_init+0x2c68>)
 8004c32:	2280      	movs	r2, #128	@ 0x80
 8004c34:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c36:	4b66      	ldr	r3, [pc, #408]	@ (8004dd0 <lcd_init+0x2c68>)
 8004c38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c3c:	611a      	str	r2, [r3, #16]
}
 8004c3e:	bf00      	nop

        lcd_wr_regno(0xF9);
        lcd_wr_xdata(0x06);
 8004c40:	2006      	movs	r0, #6
 8004c42:	f7fc f929 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8004c46:	2010      	movs	r0, #16
 8004c48:	f7fc f926 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 8004c4c:	2029      	movs	r0, #41	@ 0x29
 8004c4e:	f7fc f923 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8004c52:	2000      	movs	r0, #0
 8004c54:	f7fc f920 	bl	8000e98 <lcd_wr_xdata>
 8004c58:	233a      	movs	r3, #58	@ 0x3a
 8004c5a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8004dd0 <lcd_init+0x2c68>)
 8004c60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c64:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004c66:	4b5a      	ldr	r3, [pc, #360]	@ (8004dd0 <lcd_init+0x2c68>)
 8004c68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c6c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004c6e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	4b57      	ldr	r3, [pc, #348]	@ (8004dd4 <lcd_init+0x2c6c>)
 8004c76:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004c78:	4b55      	ldr	r3, [pc, #340]	@ (8004dd0 <lcd_init+0x2c68>)
 8004c7a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c7e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004c80:	4b53      	ldr	r3, [pc, #332]	@ (8004dd0 <lcd_init+0x2c68>)
 8004c82:	2280      	movs	r2, #128	@ 0x80
 8004c84:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004c86:	4b52      	ldr	r3, [pc, #328]	@ (8004dd0 <lcd_init+0x2c68>)
 8004c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c8c:	611a      	str	r2, [r3, #16]
}
 8004c8e:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);  /* 66 */
 8004c90:	2055      	movs	r0, #85	@ 0x55
 8004c92:	f7fc f901 	bl	8000e98 <lcd_wr_xdata>
 8004c96:	2311      	movs	r3, #17
 8004c98:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8004dd0 <lcd_init+0x2c68>)
 8004c9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ca2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd0 <lcd_init+0x2c68>)
 8004ca6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004caa:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004cac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	4b48      	ldr	r3, [pc, #288]	@ (8004dd4 <lcd_init+0x2c6c>)
 8004cb4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004cb6:	4b46      	ldr	r3, [pc, #280]	@ (8004dd0 <lcd_init+0x2c68>)
 8004cb8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cbc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004cbe:	4b44      	ldr	r3, [pc, #272]	@ (8004dd0 <lcd_init+0x2c68>)
 8004cc0:	2280      	movs	r2, #128	@ 0x80
 8004cc2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004cc4:	4b42      	ldr	r3, [pc, #264]	@ (8004dd0 <lcd_init+0x2c68>)
 8004cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cca:	611a      	str	r2, [r3, #16]
}
 8004ccc:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(100);
 8004cce:	2064      	movs	r0, #100	@ 0x64
 8004cd0:	f003 fe1c 	bl	800890c <HAL_Delay>
 8004cd4:	2329      	movs	r3, #41	@ 0x29
 8004cd6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004cda:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd0 <lcd_init+0x2c68>)
 8004cdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ce0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd0 <lcd_init+0x2c68>)
 8004ce4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ce8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004cea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	4b38      	ldr	r3, [pc, #224]	@ (8004dd4 <lcd_init+0x2c6c>)
 8004cf2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004cf4:	4b36      	ldr	r3, [pc, #216]	@ (8004dd0 <lcd_init+0x2c68>)
 8004cf6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cfa:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004cfc:	4b34      	ldr	r3, [pc, #208]	@ (8004dd0 <lcd_init+0x2c68>)
 8004cfe:	2280      	movs	r2, #128	@ 0x80
 8004d00:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d02:	4b33      	ldr	r3, [pc, #204]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d08:	611a      	str	r2, [r3, #16]
}
 8004d0a:	bf00      	nop
 8004d0c:	2335      	movs	r3, #53	@ 0x35
 8004d0e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d12:	4b2f      	ldr	r3, [pc, #188]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d18:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d20:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d22:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd4 <lcd_init+0x2c6c>)
 8004d2a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d2c:	4b28      	ldr	r3, [pc, #160]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d2e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d32:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d34:	4b26      	ldr	r3, [pc, #152]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d36:	2280      	movs	r2, #128	@ 0x80
 8004d38:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d3a:	4b25      	ldr	r3, [pc, #148]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d40:	611a      	str	r2, [r3, #16]
}
 8004d42:	bf00      	nop
        lcd_wr_regno(0x29);
        lcd_wr_regno(0x35);
        lcd_wr_xdata(0x00);
 8004d44:	2000      	movs	r0, #0
 8004d46:	f7fc f8a7 	bl	8000e98 <lcd_wr_xdata>
 8004d4a:	2351      	movs	r3, #81	@ 0x51
 8004d4c:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d50:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d52:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d56:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d58:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d5e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d60:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd4 <lcd_init+0x2c6c>)
 8004d68:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004d6a:	4b19      	ldr	r3, [pc, #100]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d6c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004d70:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004d72:	4b17      	ldr	r3, [pc, #92]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d74:	2280      	movs	r2, #128	@ 0x80
 8004d76:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004d78:	4b15      	ldr	r3, [pc, #84]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d7e:	611a      	str	r2, [r3, #16]
}
 8004d80:	bf00      	nop

        lcd_wr_regno(0x51);
        lcd_wr_xdata(0xFF);
 8004d82:	20ff      	movs	r0, #255	@ 0xff
 8004d84:	f7fc f888 	bl	8000e98 <lcd_wr_xdata>
 8004d88:	2353      	movs	r3, #83	@ 0x53
 8004d8a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004d8e:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d94:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004d96:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd0 <lcd_init+0x2c68>)
 8004d98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d9c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004d9e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <lcd_init+0x2c6c>)
 8004da6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004da8:	4b09      	ldr	r3, [pc, #36]	@ (8004dd0 <lcd_init+0x2c68>)
 8004daa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004dae:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004db0:	4b07      	ldr	r3, [pc, #28]	@ (8004dd0 <lcd_init+0x2c68>)
 8004db2:	2280      	movs	r2, #128	@ 0x80
 8004db4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004db6:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <lcd_init+0x2c68>)
 8004db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dbc:	611a      	str	r2, [r3, #16]
}
 8004dbe:	bf00      	nop
        lcd_wr_regno(0x53);
        lcd_wr_xdata(0x2C);
 8004dc0:	202c      	movs	r0, #44	@ 0x2c
 8004dc2:	f7fc f869 	bl	8000e98 <lcd_wr_xdata>
 8004dc6:	2355      	movs	r3, #85	@ 0x55
 8004dc8:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8004dcc:	e004      	b.n	8004dd8 <lcd_init+0x2c70>
 8004dce:	bf00      	nop
 8004dd0:	40011000 	.word	0x40011000
 8004dd4:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8004e4c <lcd_init+0x2ce4>)
 8004dda:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004dde:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004de0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e4c <lcd_init+0x2ce4>)
 8004de2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004de6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004de8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	4b18      	ldr	r3, [pc, #96]	@ (8004e50 <lcd_init+0x2ce8>)
 8004df0:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004df2:	4b16      	ldr	r3, [pc, #88]	@ (8004e4c <lcd_init+0x2ce4>)
 8004df4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004df8:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004dfa:	4b14      	ldr	r3, [pc, #80]	@ (8004e4c <lcd_init+0x2ce4>)
 8004dfc:	2280      	movs	r2, #128	@ 0x80
 8004dfe:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e00:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <lcd_init+0x2ce4>)
 8004e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e06:	611a      	str	r2, [r3, #16]
}
 8004e08:	bf00      	nop
        lcd_wr_regno(0x55);
        lcd_wr_xdata(0x82);
 8004e0a:	2082      	movs	r0, #130	@ 0x82
 8004e0c:	f7fc f844 	bl	8000e98 <lcd_wr_xdata>
 8004e10:	232c      	movs	r3, #44	@ 0x2c
 8004e12:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e16:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <lcd_init+0x2ce4>)
 8004e18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e1c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e4c <lcd_init+0x2ce4>)
 8004e20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e24:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e26:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	4b08      	ldr	r3, [pc, #32]	@ (8004e50 <lcd_init+0x2ce8>)
 8004e2e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e30:	4b06      	ldr	r3, [pc, #24]	@ (8004e4c <lcd_init+0x2ce4>)
 8004e32:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e36:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e38:	4b04      	ldr	r3, [pc, #16]	@ (8004e4c <lcd_init+0x2ce4>)
 8004e3a:	2280      	movs	r2, #128	@ 0x80
 8004e3c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e3e:	4b03      	ldr	r3, [pc, #12]	@ (8004e4c <lcd_init+0x2ce4>)
 8004e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e44:	611a      	str	r2, [r3, #16]
}
 8004e46:	f002 b8d8 	b.w	8006ffa <lcd_init+0x4e92>
 8004e4a:	bf00      	nop
 8004e4c:	40011000 	.word	0x40011000
 8004e50:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2c);
    }
    else if (lcddev.id == 0x7796)
 8004e54:	4bb4      	ldr	r3, [pc, #720]	@ (8005128 <lcd_init+0x2fc0>)
 8004e56:	889b      	ldrh	r3, [r3, #4]
 8004e58:	f247 7296 	movw	r2, #30614	@ 0x7796
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	f040 82e3 	bne.w	8005428 <lcd_init+0x32c0>
 8004e62:	2311      	movs	r3, #17
 8004e64:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004e68:	4bb0      	ldr	r3, [pc, #704]	@ (800512c <lcd_init+0x2fc4>)
 8004e6a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e6e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004e70:	4bae      	ldr	r3, [pc, #696]	@ (800512c <lcd_init+0x2fc4>)
 8004e72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e76:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004e78:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	4bac      	ldr	r3, [pc, #688]	@ (8005130 <lcd_init+0x2fc8>)
 8004e80:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004e82:	4baa      	ldr	r3, [pc, #680]	@ (800512c <lcd_init+0x2fc4>)
 8004e84:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e88:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004e8a:	4ba8      	ldr	r3, [pc, #672]	@ (800512c <lcd_init+0x2fc4>)
 8004e8c:	2280      	movs	r2, #128	@ 0x80
 8004e8e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004e90:	4ba6      	ldr	r3, [pc, #664]	@ (800512c <lcd_init+0x2fc4>)
 8004e92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e96:	611a      	str	r2, [r3, #16]
}
 8004e98:	bf00      	nop
    {
       // lcd_ex_st7796_reginit();    /* ִ��ST7796��ʼ�� */
        lcd_wr_regno(0x11);

        HAL_Delay(120);
 8004e9a:	2078      	movs	r0, #120	@ 0x78
 8004e9c:	f003 fd36 	bl	800890c <HAL_Delay>
 8004ea0:	2336      	movs	r3, #54	@ 0x36
 8004ea2:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004ea6:	4ba1      	ldr	r3, [pc, #644]	@ (800512c <lcd_init+0x2fc4>)
 8004ea8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004eac:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004eae:	4b9f      	ldr	r3, [pc, #636]	@ (800512c <lcd_init+0x2fc4>)
 8004eb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004eb4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004eb6:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	4b9c      	ldr	r3, [pc, #624]	@ (8005130 <lcd_init+0x2fc8>)
 8004ebe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ec0:	4b9a      	ldr	r3, [pc, #616]	@ (800512c <lcd_init+0x2fc4>)
 8004ec2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ec6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ec8:	4b98      	ldr	r3, [pc, #608]	@ (800512c <lcd_init+0x2fc4>)
 8004eca:	2280      	movs	r2, #128	@ 0x80
 8004ecc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004ece:	4b97      	ldr	r3, [pc, #604]	@ (800512c <lcd_init+0x2fc4>)
 8004ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ed4:	611a      	str	r2, [r3, #16]
}
 8004ed6:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
        lcd_wr_xdata(0x48);
 8004ed8:	2048      	movs	r0, #72	@ 0x48
 8004eda:	f7fb ffdd 	bl	8000e98 <lcd_wr_xdata>
 8004ede:	233a      	movs	r3, #58	@ 0x3a
 8004ee0:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004ee4:	4b91      	ldr	r3, [pc, #580]	@ (800512c <lcd_init+0x2fc4>)
 8004ee6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004eea:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004eec:	4b8f      	ldr	r3, [pc, #572]	@ (800512c <lcd_init+0x2fc4>)
 8004eee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ef2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004ef4:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	4b8d      	ldr	r3, [pc, #564]	@ (8005130 <lcd_init+0x2fc8>)
 8004efc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004efe:	4b8b      	ldr	r3, [pc, #556]	@ (800512c <lcd_init+0x2fc4>)
 8004f00:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f04:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004f06:	4b89      	ldr	r3, [pc, #548]	@ (800512c <lcd_init+0x2fc4>)
 8004f08:	2280      	movs	r2, #128	@ 0x80
 8004f0a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004f0c:	4b87      	ldr	r3, [pc, #540]	@ (800512c <lcd_init+0x2fc4>)
 8004f0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f12:	611a      	str	r2, [r3, #16]
}
 8004f14:	bf00      	nop

        lcd_wr_regno(0x3A);
        lcd_wr_xdata(0x55);
 8004f16:	2055      	movs	r0, #85	@ 0x55
 8004f18:	f7fb ffbe 	bl	8000e98 <lcd_wr_xdata>
 8004f1c:	23f0      	movs	r3, #240	@ 0xf0
 8004f1e:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004f22:	4b82      	ldr	r3, [pc, #520]	@ (800512c <lcd_init+0x2fc4>)
 8004f24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f28:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004f2a:	4b80      	ldr	r3, [pc, #512]	@ (800512c <lcd_init+0x2fc4>)
 8004f2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f30:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004f32:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	4b7d      	ldr	r3, [pc, #500]	@ (8005130 <lcd_init+0x2fc8>)
 8004f3a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004f3c:	4b7b      	ldr	r3, [pc, #492]	@ (800512c <lcd_init+0x2fc4>)
 8004f3e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f42:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004f44:	4b79      	ldr	r3, [pc, #484]	@ (800512c <lcd_init+0x2fc4>)
 8004f46:	2280      	movs	r2, #128	@ 0x80
 8004f48:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004f4a:	4b78      	ldr	r3, [pc, #480]	@ (800512c <lcd_init+0x2fc4>)
 8004f4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f50:	611a      	str	r2, [r3, #16]
}
 8004f52:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0xC3);
 8004f54:	20c3      	movs	r0, #195	@ 0xc3
 8004f56:	f7fb ff9f 	bl	8000e98 <lcd_wr_xdata>
 8004f5a:	23f0      	movs	r3, #240	@ 0xf0
 8004f5c:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004f60:	4b72      	ldr	r3, [pc, #456]	@ (800512c <lcd_init+0x2fc4>)
 8004f62:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f66:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004f68:	4b70      	ldr	r3, [pc, #448]	@ (800512c <lcd_init+0x2fc4>)
 8004f6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f6e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004f70:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	4b6e      	ldr	r3, [pc, #440]	@ (8005130 <lcd_init+0x2fc8>)
 8004f78:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004f7a:	4b6c      	ldr	r3, [pc, #432]	@ (800512c <lcd_init+0x2fc4>)
 8004f7c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f80:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004f82:	4b6a      	ldr	r3, [pc, #424]	@ (800512c <lcd_init+0x2fc4>)
 8004f84:	2280      	movs	r2, #128	@ 0x80
 8004f86:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004f88:	4b68      	ldr	r3, [pc, #416]	@ (800512c <lcd_init+0x2fc4>)
 8004f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f8e:	611a      	str	r2, [r3, #16]
}
 8004f90:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x96);
 8004f92:	2096      	movs	r0, #150	@ 0x96
 8004f94:	f7fb ff80 	bl	8000e98 <lcd_wr_xdata>
 8004f98:	23b4      	movs	r3, #180	@ 0xb4
 8004f9a:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004f9e:	4b63      	ldr	r3, [pc, #396]	@ (800512c <lcd_init+0x2fc4>)
 8004fa0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fa4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004fa6:	4b61      	ldr	r3, [pc, #388]	@ (800512c <lcd_init+0x2fc4>)
 8004fa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fac:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004fae:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	@ 0xf8
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8005130 <lcd_init+0x2fc8>)
 8004fb6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004fb8:	4b5c      	ldr	r3, [pc, #368]	@ (800512c <lcd_init+0x2fc4>)
 8004fba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004fbe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004fc0:	4b5a      	ldr	r3, [pc, #360]	@ (800512c <lcd_init+0x2fc4>)
 8004fc2:	2280      	movs	r2, #128	@ 0x80
 8004fc4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8004fc6:	4b59      	ldr	r3, [pc, #356]	@ (800512c <lcd_init+0x2fc4>)
 8004fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fcc:	611a      	str	r2, [r3, #16]
}
 8004fce:	bf00      	nop

        lcd_wr_regno(0xB4);
        lcd_wr_xdata(0x01);
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	f7fb ff61 	bl	8000e98 <lcd_wr_xdata>
 8004fd6:	23b6      	movs	r3, #182	@ 0xb6
 8004fd8:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8004fdc:	4b53      	ldr	r3, [pc, #332]	@ (800512c <lcd_init+0x2fc4>)
 8004fde:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fe2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8004fe4:	4b51      	ldr	r3, [pc, #324]	@ (800512c <lcd_init+0x2fc4>)
 8004fe6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fea:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8004fec:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8005130 <lcd_init+0x2fc8>)
 8004ff4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8004ff6:	4b4d      	ldr	r3, [pc, #308]	@ (800512c <lcd_init+0x2fc4>)
 8004ff8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ffc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8004ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800512c <lcd_init+0x2fc4>)
 8005000:	2280      	movs	r2, #128	@ 0x80
 8005002:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005004:	4b49      	ldr	r3, [pc, #292]	@ (800512c <lcd_init+0x2fc4>)
 8005006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800500a:	611a      	str	r2, [r3, #16]
}
 800500c:	bf00      	nop

        lcd_wr_regno(0xB6); /* Display Function Control */
        lcd_wr_xdata(0x0A);
 800500e:	200a      	movs	r0, #10
 8005010:	f7fb ff42 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA2);
 8005014:	20a2      	movs	r0, #162	@ 0xa2
 8005016:	f7fb ff3f 	bl	8000e98 <lcd_wr_xdata>
 800501a:	23b7      	movs	r3, #183	@ 0xb7
 800501c:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005020:	4b42      	ldr	r3, [pc, #264]	@ (800512c <lcd_init+0x2fc4>)
 8005022:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005026:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005028:	4b40      	ldr	r3, [pc, #256]	@ (800512c <lcd_init+0x2fc4>)
 800502a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800502e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005030:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8005034:	b29a      	uxth	r2, r3
 8005036:	4b3e      	ldr	r3, [pc, #248]	@ (8005130 <lcd_init+0x2fc8>)
 8005038:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800503a:	4b3c      	ldr	r3, [pc, #240]	@ (800512c <lcd_init+0x2fc4>)
 800503c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005040:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005042:	4b3a      	ldr	r3, [pc, #232]	@ (800512c <lcd_init+0x2fc4>)
 8005044:	2280      	movs	r2, #128	@ 0x80
 8005046:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005048:	4b38      	ldr	r3, [pc, #224]	@ (800512c <lcd_init+0x2fc4>)
 800504a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800504e:	611a      	str	r2, [r3, #16]
}
 8005050:	bf00      	nop

        lcd_wr_regno(0xB7);
        lcd_wr_xdata(0xC6);
 8005052:	20c6      	movs	r0, #198	@ 0xc6
 8005054:	f7fb ff20 	bl	8000e98 <lcd_wr_xdata>
 8005058:	23b9      	movs	r3, #185	@ 0xb9
 800505a:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800505e:	4b33      	ldr	r3, [pc, #204]	@ (800512c <lcd_init+0x2fc4>)
 8005060:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005064:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005066:	4b31      	ldr	r3, [pc, #196]	@ (800512c <lcd_init+0x2fc4>)
 8005068:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800506c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800506e:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 8005072:	b29a      	uxth	r2, r3
 8005074:	4b2e      	ldr	r3, [pc, #184]	@ (8005130 <lcd_init+0x2fc8>)
 8005076:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005078:	4b2c      	ldr	r3, [pc, #176]	@ (800512c <lcd_init+0x2fc4>)
 800507a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800507e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005080:	4b2a      	ldr	r3, [pc, #168]	@ (800512c <lcd_init+0x2fc4>)
 8005082:	2280      	movs	r2, #128	@ 0x80
 8005084:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005086:	4b29      	ldr	r3, [pc, #164]	@ (800512c <lcd_init+0x2fc4>)
 8005088:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800508c:	611a      	str	r2, [r3, #16]
}
 800508e:	bf00      	nop

        lcd_wr_regno(0xB9);
        lcd_wr_xdata(0x02);
 8005090:	2002      	movs	r0, #2
 8005092:	f7fb ff01 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xE0);
 8005096:	20e0      	movs	r0, #224	@ 0xe0
 8005098:	f7fb fefe 	bl	8000e98 <lcd_wr_xdata>
 800509c:	23c0      	movs	r3, #192	@ 0xc0
 800509e:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80050a2:	4b22      	ldr	r3, [pc, #136]	@ (800512c <lcd_init+0x2fc4>)
 80050a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050a8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80050aa:	4b20      	ldr	r3, [pc, #128]	@ (800512c <lcd_init+0x2fc4>)
 80050ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050b0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80050b2:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005130 <lcd_init+0x2fc8>)
 80050ba:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80050bc:	4b1b      	ldr	r3, [pc, #108]	@ (800512c <lcd_init+0x2fc4>)
 80050be:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80050c2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80050c4:	4b19      	ldr	r3, [pc, #100]	@ (800512c <lcd_init+0x2fc4>)
 80050c6:	2280      	movs	r2, #128	@ 0x80
 80050c8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80050ca:	4b18      	ldr	r3, [pc, #96]	@ (800512c <lcd_init+0x2fc4>)
 80050cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050d0:	611a      	str	r2, [r3, #16]
}
 80050d2:	bf00      	nop

        lcd_wr_regno(0xC0);
        lcd_wr_xdata(0x80);
 80050d4:	2080      	movs	r0, #128	@ 0x80
 80050d6:	f7fb fedf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x16);
 80050da:	2016      	movs	r0, #22
 80050dc:	f7fb fedc 	bl	8000e98 <lcd_wr_xdata>
 80050e0:	23c1      	movs	r3, #193	@ 0xc1
 80050e2:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80050e6:	4b11      	ldr	r3, [pc, #68]	@ (800512c <lcd_init+0x2fc4>)
 80050e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80050ee:	4b0f      	ldr	r3, [pc, #60]	@ (800512c <lcd_init+0x2fc4>)
 80050f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050f4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80050f6:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005130 <lcd_init+0x2fc8>)
 80050fe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005100:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <lcd_init+0x2fc4>)
 8005102:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005106:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005108:	4b08      	ldr	r3, [pc, #32]	@ (800512c <lcd_init+0x2fc4>)
 800510a:	2280      	movs	r2, #128	@ 0x80
 800510c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800510e:	4b07      	ldr	r3, [pc, #28]	@ (800512c <lcd_init+0x2fc4>)
 8005110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005114:	611a      	str	r2, [r3, #16]
}
 8005116:	bf00      	nop

        lcd_wr_regno(0xC1);
        lcd_wr_xdata(0x19);
 8005118:	2019      	movs	r0, #25
 800511a:	f7fb febd 	bl	8000e98 <lcd_wr_xdata>
 800511e:	23c2      	movs	r3, #194	@ 0xc2
 8005120:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
 8005124:	e006      	b.n	8005134 <lcd_init+0x2fcc>
 8005126:	bf00      	nop
 8005128:	200000b0 	.word	0x200000b0
 800512c:	40011000 	.word	0x40011000
 8005130:	40010c00 	.word	0x40010c00
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005134:	4bba      	ldr	r3, [pc, #744]	@ (8005420 <lcd_init+0x32b8>)
 8005136:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800513a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800513c:	4bb8      	ldr	r3, [pc, #736]	@ (8005420 <lcd_init+0x32b8>)
 800513e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005142:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005144:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8005148:	b29a      	uxth	r2, r3
 800514a:	4bb6      	ldr	r3, [pc, #728]	@ (8005424 <lcd_init+0x32bc>)
 800514c:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800514e:	4bb4      	ldr	r3, [pc, #720]	@ (8005420 <lcd_init+0x32b8>)
 8005150:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005154:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005156:	4bb2      	ldr	r3, [pc, #712]	@ (8005420 <lcd_init+0x32b8>)
 8005158:	2280      	movs	r2, #128	@ 0x80
 800515a:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800515c:	4bb0      	ldr	r3, [pc, #704]	@ (8005420 <lcd_init+0x32b8>)
 800515e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005162:	611a      	str	r2, [r3, #16]
}
 8005164:	bf00      	nop

        lcd_wr_regno(0xC2);
        lcd_wr_xdata(0xA7);
 8005166:	20a7      	movs	r0, #167	@ 0xa7
 8005168:	f7fb fe96 	bl	8000e98 <lcd_wr_xdata>
 800516c:	23c5      	movs	r3, #197	@ 0xc5
 800516e:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005172:	4bab      	ldr	r3, [pc, #684]	@ (8005420 <lcd_init+0x32b8>)
 8005174:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005178:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800517a:	4ba9      	ldr	r3, [pc, #676]	@ (8005420 <lcd_init+0x32b8>)
 800517c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005180:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005182:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8005186:	b29a      	uxth	r2, r3
 8005188:	4ba6      	ldr	r3, [pc, #664]	@ (8005424 <lcd_init+0x32bc>)
 800518a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800518c:	4ba4      	ldr	r3, [pc, #656]	@ (8005420 <lcd_init+0x32b8>)
 800518e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005192:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005194:	4ba2      	ldr	r3, [pc, #648]	@ (8005420 <lcd_init+0x32b8>)
 8005196:	2280      	movs	r2, #128	@ 0x80
 8005198:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800519a:	4ba1      	ldr	r3, [pc, #644]	@ (8005420 <lcd_init+0x32b8>)
 800519c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051a0:	611a      	str	r2, [r3, #16]
}
 80051a2:	bf00      	nop

        lcd_wr_regno(0xC5);
        lcd_wr_xdata(0x16);
 80051a4:	2016      	movs	r0, #22
 80051a6:	f7fb fe77 	bl	8000e98 <lcd_wr_xdata>
 80051aa:	23e8      	movs	r3, #232	@ 0xe8
 80051ac:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80051b0:	4b9b      	ldr	r3, [pc, #620]	@ (8005420 <lcd_init+0x32b8>)
 80051b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051b6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80051b8:	4b99      	ldr	r3, [pc, #612]	@ (8005420 <lcd_init+0x32b8>)
 80051ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80051be:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80051c0:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	4b97      	ldr	r3, [pc, #604]	@ (8005424 <lcd_init+0x32bc>)
 80051c8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80051ca:	4b95      	ldr	r3, [pc, #596]	@ (8005420 <lcd_init+0x32b8>)
 80051cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80051d0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80051d2:	4b93      	ldr	r3, [pc, #588]	@ (8005420 <lcd_init+0x32b8>)
 80051d4:	2280      	movs	r2, #128	@ 0x80
 80051d6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80051d8:	4b91      	ldr	r3, [pc, #580]	@ (8005420 <lcd_init+0x32b8>)
 80051da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051de:	611a      	str	r2, [r3, #16]
}
 80051e0:	bf00      	nop

        lcd_wr_regno(0xE8);
        lcd_wr_xdata(0x40);
 80051e2:	2040      	movs	r0, #64	@ 0x40
 80051e4:	f7fb fe58 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x8A);
 80051e8:	208a      	movs	r0, #138	@ 0x8a
 80051ea:	f7fb fe55 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80051ee:	2000      	movs	r0, #0
 80051f0:	f7fb fe52 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80051f4:	2000      	movs	r0, #0
 80051f6:	f7fb fe4f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x29);
 80051fa:	2029      	movs	r0, #41	@ 0x29
 80051fc:	f7fb fe4c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x19);
 8005200:	2019      	movs	r0, #25
 8005202:	f7fb fe49 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xA5);
 8005206:	20a5      	movs	r0, #165	@ 0xa5
 8005208:	f7fb fe46 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x33);
 800520c:	2033      	movs	r0, #51	@ 0x33
 800520e:	f7fb fe43 	bl	8000e98 <lcd_wr_xdata>
 8005212:	23e0      	movs	r3, #224	@ 0xe0
 8005214:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005218:	4b81      	ldr	r3, [pc, #516]	@ (8005420 <lcd_init+0x32b8>)
 800521a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800521e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005220:	4b7f      	ldr	r3, [pc, #508]	@ (8005420 <lcd_init+0x32b8>)
 8005222:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005226:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005228:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 800522c:	b29a      	uxth	r2, r3
 800522e:	4b7d      	ldr	r3, [pc, #500]	@ (8005424 <lcd_init+0x32bc>)
 8005230:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005232:	4b7b      	ldr	r3, [pc, #492]	@ (8005420 <lcd_init+0x32b8>)
 8005234:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005238:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800523a:	4b79      	ldr	r3, [pc, #484]	@ (8005420 <lcd_init+0x32b8>)
 800523c:	2280      	movs	r2, #128	@ 0x80
 800523e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005240:	4b77      	ldr	r3, [pc, #476]	@ (8005420 <lcd_init+0x32b8>)
 8005242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005246:	611a      	str	r2, [r3, #16]
}
 8005248:	bf00      	nop

        lcd_wr_regno(0xE0);
        lcd_wr_xdata(0xF0);
 800524a:	20f0      	movs	r0, #240	@ 0xf0
 800524c:	f7fb fe24 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);
 8005250:	2007      	movs	r0, #7
 8005252:	f7fb fe21 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);
 8005256:	200d      	movs	r0, #13
 8005258:	f7fb fe1e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 800525c:	2004      	movs	r0, #4
 800525e:	f7fb fe1b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x05);
 8005262:	2005      	movs	r0, #5
 8005264:	f7fb fe18 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 8005268:	2014      	movs	r0, #20
 800526a:	f7fb fe15 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x36);
 800526e:	2036      	movs	r0, #54	@ 0x36
 8005270:	f7fb fe12 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x54);
 8005274:	2054      	movs	r0, #84	@ 0x54
 8005276:	f7fb fe0f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 800527a:	204c      	movs	r0, #76	@ 0x4c
 800527c:	f7fb fe0c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x38);
 8005280:	2038      	movs	r0, #56	@ 0x38
 8005282:	f7fb fe09 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 8005286:	2013      	movs	r0, #19
 8005288:	f7fb fe06 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 800528c:	2014      	movs	r0, #20
 800528e:	f7fb fe03 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x2E);
 8005292:	202e      	movs	r0, #46	@ 0x2e
 8005294:	f7fb fe00 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x34);
 8005298:	2034      	movs	r0, #52	@ 0x34
 800529a:	f7fb fdfd 	bl	8000e98 <lcd_wr_xdata>
 800529e:	23e1      	movs	r3, #225	@ 0xe1
 80052a0:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80052a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005420 <lcd_init+0x32b8>)
 80052a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80052aa:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80052ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005420 <lcd_init+0x32b8>)
 80052ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052b2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80052b4:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	4b5a      	ldr	r3, [pc, #360]	@ (8005424 <lcd_init+0x32bc>)
 80052bc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80052be:	4b58      	ldr	r3, [pc, #352]	@ (8005420 <lcd_init+0x32b8>)
 80052c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80052c4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80052c6:	4b56      	ldr	r3, [pc, #344]	@ (8005420 <lcd_init+0x32b8>)
 80052c8:	2280      	movs	r2, #128	@ 0x80
 80052ca:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80052cc:	4b54      	ldr	r3, [pc, #336]	@ (8005420 <lcd_init+0x32b8>)
 80052ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052d2:	611a      	str	r2, [r3, #16]
}
 80052d4:	bf00      	nop

        lcd_wr_regno(0xE1);
        lcd_wr_xdata(0xF0);
 80052d6:	20f0      	movs	r0, #240	@ 0xf0
 80052d8:	f7fb fdde 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 80052dc:	2010      	movs	r0, #16
 80052de:	f7fb fddb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x14);
 80052e2:	2014      	movs	r0, #20
 80052e4:	f7fb fdd8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);
 80052e8:	200e      	movs	r0, #14
 80052ea:	f7fb fdd5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);
 80052ee:	200c      	movs	r0, #12
 80052f0:	f7fb fdd2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x08);
 80052f4:	2008      	movs	r0, #8
 80052f6:	f7fb fdcf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x35);
 80052fa:	2035      	movs	r0, #53	@ 0x35
 80052fc:	f7fb fdcc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x44);
 8005300:	2044      	movs	r0, #68	@ 0x44
 8005302:	f7fb fdc9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x4C);
 8005306:	204c      	movs	r0, #76	@ 0x4c
 8005308:	f7fb fdc6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x26);
 800530c:	2026      	movs	r0, #38	@ 0x26
 800530e:	f7fb fdc3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8005312:	2010      	movs	r0, #16
 8005314:	f7fb fdc0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);
 8005318:	2012      	movs	r0, #18
 800531a:	f7fb fdbd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x2C);
 800531e:	202c      	movs	r0, #44	@ 0x2c
 8005320:	f7fb fdba 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x32);
 8005324:	2032      	movs	r0, #50	@ 0x32
 8005326:	f7fb fdb7 	bl	8000e98 <lcd_wr_xdata>
 800532a:	23f0      	movs	r3, #240	@ 0xf0
 800532c:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8005330:	4b3b      	ldr	r3, [pc, #236]	@ (8005420 <lcd_init+0x32b8>)
 8005332:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005336:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005338:	4b39      	ldr	r3, [pc, #228]	@ (8005420 <lcd_init+0x32b8>)
 800533a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800533e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8005340:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8005344:	b29a      	uxth	r2, r3
 8005346:	4b37      	ldr	r3, [pc, #220]	@ (8005424 <lcd_init+0x32bc>)
 8005348:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800534a:	4b35      	ldr	r3, [pc, #212]	@ (8005420 <lcd_init+0x32b8>)
 800534c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005350:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005352:	4b33      	ldr	r3, [pc, #204]	@ (8005420 <lcd_init+0x32b8>)
 8005354:	2280      	movs	r2, #128	@ 0x80
 8005356:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005358:	4b31      	ldr	r3, [pc, #196]	@ (8005420 <lcd_init+0x32b8>)
 800535a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800535e:	611a      	str	r2, [r3, #16]
}
 8005360:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x3C);
 8005362:	203c      	movs	r0, #60	@ 0x3c
 8005364:	f7fb fd98 	bl	8000e98 <lcd_wr_xdata>
 8005368:	23f0      	movs	r3, #240	@ 0xf0
 800536a:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800536e:	4b2c      	ldr	r3, [pc, #176]	@ (8005420 <lcd_init+0x32b8>)
 8005370:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005374:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8005376:	4b2a      	ldr	r3, [pc, #168]	@ (8005420 <lcd_init+0x32b8>)
 8005378:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800537c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800537e:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 8005382:	b29a      	uxth	r2, r3
 8005384:	4b27      	ldr	r3, [pc, #156]	@ (8005424 <lcd_init+0x32bc>)
 8005386:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005388:	4b25      	ldr	r3, [pc, #148]	@ (8005420 <lcd_init+0x32b8>)
 800538a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800538e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8005390:	4b23      	ldr	r3, [pc, #140]	@ (8005420 <lcd_init+0x32b8>)
 8005392:	2280      	movs	r2, #128	@ 0x80
 8005394:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005396:	4b22      	ldr	r3, [pc, #136]	@ (8005420 <lcd_init+0x32b8>)
 8005398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800539c:	611a      	str	r2, [r3, #16]
}
 800539e:	bf00      	nop

        lcd_wr_regno(0xF0);
        lcd_wr_xdata(0x69);
 80053a0:	2069      	movs	r0, #105	@ 0x69
 80053a2:	f7fb fd79 	bl	8000e98 <lcd_wr_xdata>

        HAL_Delay(120);
 80053a6:	2078      	movs	r0, #120	@ 0x78
 80053a8:	f003 fab0 	bl	800890c <HAL_Delay>
 80053ac:	2321      	movs	r3, #33	@ 0x21
 80053ae:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80053b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <lcd_init+0x32b8>)
 80053b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053b8:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80053ba:	4b19      	ldr	r3, [pc, #100]	@ (8005420 <lcd_init+0x32b8>)
 80053bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053c0:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80053c2:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	4b16      	ldr	r3, [pc, #88]	@ (8005424 <lcd_init+0x32bc>)
 80053ca:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80053cc:	4b14      	ldr	r3, [pc, #80]	@ (8005420 <lcd_init+0x32b8>)
 80053ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80053d2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80053d4:	4b12      	ldr	r3, [pc, #72]	@ (8005420 <lcd_init+0x32b8>)
 80053d6:	2280      	movs	r2, #128	@ 0x80
 80053d8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80053da:	4b11      	ldr	r3, [pc, #68]	@ (8005420 <lcd_init+0x32b8>)
 80053dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053e0:	611a      	str	r2, [r3, #16]
}
 80053e2:	bf00      	nop
 80053e4:	2329      	movs	r3, #41	@ 0x29
 80053e6:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80053ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005420 <lcd_init+0x32b8>)
 80053ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053f0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80053f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005420 <lcd_init+0x32b8>)
 80053f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053f8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80053fa:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 80053fe:	b29a      	uxth	r2, r3
 8005400:	4b08      	ldr	r3, [pc, #32]	@ (8005424 <lcd_init+0x32bc>)
 8005402:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8005404:	4b06      	ldr	r3, [pc, #24]	@ (8005420 <lcd_init+0x32b8>)
 8005406:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800540a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800540c:	4b04      	ldr	r3, [pc, #16]	@ (8005420 <lcd_init+0x32b8>)
 800540e:	2280      	movs	r2, #128	@ 0x80
 8005410:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8005412:	4b03      	ldr	r3, [pc, #12]	@ (8005420 <lcd_init+0x32b8>)
 8005414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005418:	611a      	str	r2, [r3, #16]
}
 800541a:	f001 bdee 	b.w	8006ffa <lcd_init+0x4e92>
 800541e:	bf00      	nop
 8005420:	40011000 	.word	0x40011000
 8005424:	40010c00 	.word	0x40010c00

        lcd_wr_regno(0x21);
        lcd_wr_regno(0x29);
    }
    else if (lcddev.id == 0x5510)
 8005428:	4b03      	ldr	r3, [pc, #12]	@ (8005438 <lcd_init+0x32d0>)
 800542a:	889b      	ldrh	r3, [r3, #4]
 800542c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8005430:	4293      	cmp	r3, r2
 8005432:	f040 87b3 	bne.w	800639c <lcd_init+0x4234>
 8005436:	e001      	b.n	800543c <lcd_init+0x32d4>
 8005438:	200000b0 	.word	0x200000b0
    {
        //lcd_ex_nt35510_reginit();   /* ִ��NT35510��ʼ�� */

        lcd_write_reg(0xF000, 0x55);
 800543c:	2155      	movs	r1, #85	@ 0x55
 800543e:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8005442:	f7fb fd4d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8005446:	21aa      	movs	r1, #170	@ 0xaa
 8005448:	f24f 0001 	movw	r0, #61441	@ 0xf001
 800544c:	f7fb fd48 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8005450:	2152      	movs	r1, #82	@ 0x52
 8005452:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8005456:	f7fb fd43 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 800545a:	2108      	movs	r1, #8
 800545c:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8005460:	f7fb fd3e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x01);
 8005464:	2101      	movs	r1, #1
 8005466:	f24f 0004 	movw	r0, #61444	@ 0xf004
 800546a:	f7fb fd39 	bl	8000ee0 <lcd_write_reg>
        /* AVDD Set AVDD 5.2V */
        lcd_write_reg(0xB000, 0x0D);
 800546e:	210d      	movs	r1, #13
 8005470:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8005474:	f7fb fd34 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB001, 0x0D);
 8005478:	210d      	movs	r1, #13
 800547a:	f24b 0001 	movw	r0, #45057	@ 0xb001
 800547e:	f7fb fd2f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB002, 0x0D);
 8005482:	210d      	movs	r1, #13
 8005484:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8005488:	f7fb fd2a 	bl	8000ee0 <lcd_write_reg>
        /* AVDD ratio */
        lcd_write_reg(0xB600, 0x34);
 800548c:	2134      	movs	r1, #52	@ 0x34
 800548e:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8005492:	f7fb fd25 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB601, 0x34);
 8005496:	2134      	movs	r1, #52	@ 0x34
 8005498:	f24b 6001 	movw	r0, #46593	@ 0xb601
 800549c:	f7fb fd20 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB602, 0x34);
 80054a0:	2134      	movs	r1, #52	@ 0x34
 80054a2:	f24b 6002 	movw	r0, #46594	@ 0xb602
 80054a6:	f7fb fd1b 	bl	8000ee0 <lcd_write_reg>
        /* AVEE -5.2V */
        lcd_write_reg(0xB100, 0x0D);
 80054aa:	210d      	movs	r1, #13
 80054ac:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 80054b0:	f7fb fd16 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x0D);
 80054b4:	210d      	movs	r1, #13
 80054b6:	f24b 1001 	movw	r0, #45313	@ 0xb101
 80054ba:	f7fb fd11 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB102, 0x0D);
 80054be:	210d      	movs	r1, #13
 80054c0:	f24b 1002 	movw	r0, #45314	@ 0xb102
 80054c4:	f7fb fd0c 	bl	8000ee0 <lcd_write_reg>
        /* AVEE ratio */
        lcd_write_reg(0xB700, 0x34);
 80054c8:	2134      	movs	r1, #52	@ 0x34
 80054ca:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 80054ce:	f7fb fd07 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x34);
 80054d2:	2134      	movs	r1, #52	@ 0x34
 80054d4:	f24b 7001 	movw	r0, #46849	@ 0xb701
 80054d8:	f7fb fd02 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB702, 0x34);
 80054dc:	2134      	movs	r1, #52	@ 0x34
 80054de:	f24b 7002 	movw	r0, #46850	@ 0xb702
 80054e2:	f7fb fcfd 	bl	8000ee0 <lcd_write_reg>
        /* VCL -2.5V */
        lcd_write_reg(0xB200, 0x00);
 80054e6:	2100      	movs	r1, #0
 80054e8:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 80054ec:	f7fb fcf8 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB201, 0x00);
 80054f0:	2100      	movs	r1, #0
 80054f2:	f24b 2001 	movw	r0, #45569	@ 0xb201
 80054f6:	f7fb fcf3 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB202, 0x00);
 80054fa:	2100      	movs	r1, #0
 80054fc:	f24b 2002 	movw	r0, #45570	@ 0xb202
 8005500:	f7fb fcee 	bl	8000ee0 <lcd_write_reg>
        /* VCL ratio */
        lcd_write_reg(0xB800, 0x24);
 8005504:	2124      	movs	r1, #36	@ 0x24
 8005506:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 800550a:	f7fb fce9 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x24);
 800550e:	2124      	movs	r1, #36	@ 0x24
 8005510:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8005514:	f7fb fce4 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x24);
 8005518:	2124      	movs	r1, #36	@ 0x24
 800551a:	f64b 0002 	movw	r0, #47106	@ 0xb802
 800551e:	f7fb fcdf 	bl	8000ee0 <lcd_write_reg>
        /* VGH 15V (Free pump) */
        lcd_write_reg(0xBF00, 0x01);
 8005522:	2101      	movs	r1, #1
 8005524:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 8005528:	f7fb fcda 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB300, 0x0F);
 800552c:	210f      	movs	r1, #15
 800552e:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8005532:	f7fb fcd5 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB301, 0x0F);
 8005536:	210f      	movs	r1, #15
 8005538:	f24b 3001 	movw	r0, #45825	@ 0xb301
 800553c:	f7fb fcd0 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB302, 0x0F);
 8005540:	210f      	movs	r1, #15
 8005542:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8005546:	f7fb fccb 	bl	8000ee0 <lcd_write_reg>
        /* VGH ratio */
        lcd_write_reg(0xB900, 0x34);
 800554a:	2134      	movs	r1, #52	@ 0x34
 800554c:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8005550:	f7fb fcc6 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB901, 0x34);
 8005554:	2134      	movs	r1, #52	@ 0x34
 8005556:	f64b 1001 	movw	r0, #47361	@ 0xb901
 800555a:	f7fb fcc1 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB902, 0x34);
 800555e:	2134      	movs	r1, #52	@ 0x34
 8005560:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8005564:	f7fb fcbc 	bl	8000ee0 <lcd_write_reg>
        /* VGL_REG -10V */
        lcd_write_reg(0xB500, 0x08);
 8005568:	2108      	movs	r1, #8
 800556a:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 800556e:	f7fb fcb7 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB501, 0x08);
 8005572:	2108      	movs	r1, #8
 8005574:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8005578:	f7fb fcb2 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB502, 0x08);
 800557c:	2108      	movs	r1, #8
 800557e:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8005582:	f7fb fcad 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xC200, 0x03);
 8005586:	2103      	movs	r1, #3
 8005588:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 800558c:	f7fb fca8 	bl	8000ee0 <lcd_write_reg>
        /* VGLX ratio */
        lcd_write_reg(0xBA00, 0x24);
 8005590:	2124      	movs	r1, #36	@ 0x24
 8005592:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8005596:	f7fb fca3 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xBA01, 0x24);
 800559a:	2124      	movs	r1, #36	@ 0x24
 800559c:	f64b 2001 	movw	r0, #47617	@ 0xba01
 80055a0:	f7fb fc9e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xBA02, 0x24);
 80055a4:	2124      	movs	r1, #36	@ 0x24
 80055a6:	f64b 2002 	movw	r0, #47618	@ 0xba02
 80055aa:	f7fb fc99 	bl	8000ee0 <lcd_write_reg>
        /* VGMP/VGSP 4.5V/0V */
        lcd_write_reg(0xBC00, 0x00);
 80055ae:	2100      	movs	r1, #0
 80055b0:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 80055b4:	f7fb fc94 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x78);
 80055b8:	2178      	movs	r1, #120	@ 0x78
 80055ba:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 80055be:	f7fb fc8f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 80055c2:	2100      	movs	r1, #0
 80055c4:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 80055c8:	f7fb fc8a 	bl	8000ee0 <lcd_write_reg>
        /* VGMN/VGSN -4.5V/0V */
        lcd_write_reg(0xBD00, 0x00);
 80055cc:	2100      	movs	r1, #0
 80055ce:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 80055d2:	f7fb fc85 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xBD01, 0x78);
 80055d6:	2178      	movs	r1, #120	@ 0x78
 80055d8:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 80055dc:	f7fb fc80 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xBD02, 0x00);
 80055e0:	2100      	movs	r1, #0
 80055e2:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 80055e6:	f7fb fc7b 	bl	8000ee0 <lcd_write_reg>
        /* VCOM */
        lcd_write_reg(0xBE00, 0x00);
 80055ea:	2100      	movs	r1, #0
 80055ec:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 80055f0:	f7fb fc76 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xBE01, 0x64);
 80055f4:	2164      	movs	r1, #100	@ 0x64
 80055f6:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 80055fa:	f7fb fc71 	bl	8000ee0 <lcd_write_reg>
        /* Gamma Setting */
        lcd_write_reg(0xD100, 0x00);
 80055fe:	2100      	movs	r1, #0
 8005600:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8005604:	f7fb fc6c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD101, 0x33);
 8005608:	2133      	movs	r1, #51	@ 0x33
 800560a:	f24d 1001 	movw	r0, #53505	@ 0xd101
 800560e:	f7fb fc67 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD102, 0x00);
 8005612:	2100      	movs	r1, #0
 8005614:	f24d 1002 	movw	r0, #53506	@ 0xd102
 8005618:	f7fb fc62 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD103, 0x34);
 800561c:	2134      	movs	r1, #52	@ 0x34
 800561e:	f24d 1003 	movw	r0, #53507	@ 0xd103
 8005622:	f7fb fc5d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD104, 0x00);
 8005626:	2100      	movs	r1, #0
 8005628:	f24d 1004 	movw	r0, #53508	@ 0xd104
 800562c:	f7fb fc58 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD105, 0x3A);
 8005630:	213a      	movs	r1, #58	@ 0x3a
 8005632:	f24d 1005 	movw	r0, #53509	@ 0xd105
 8005636:	f7fb fc53 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD106, 0x00);
 800563a:	2100      	movs	r1, #0
 800563c:	f24d 1006 	movw	r0, #53510	@ 0xd106
 8005640:	f7fb fc4e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD107, 0x4A);
 8005644:	214a      	movs	r1, #74	@ 0x4a
 8005646:	f24d 1007 	movw	r0, #53511	@ 0xd107
 800564a:	f7fb fc49 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD108, 0x00);
 800564e:	2100      	movs	r1, #0
 8005650:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8005654:	f7fb fc44 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD109, 0x5C);
 8005658:	215c      	movs	r1, #92	@ 0x5c
 800565a:	f24d 1009 	movw	r0, #53513	@ 0xd109
 800565e:	f7fb fc3f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD10A, 0x00);
 8005662:	2100      	movs	r1, #0
 8005664:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8005668:	f7fb fc3a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD10B, 0x81);
 800566c:	2181      	movs	r1, #129	@ 0x81
 800566e:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8005672:	f7fb fc35 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD10C, 0x00);
 8005676:	2100      	movs	r1, #0
 8005678:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 800567c:	f7fb fc30 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD10D, 0xA6);
 8005680:	21a6      	movs	r1, #166	@ 0xa6
 8005682:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8005686:	f7fb fc2b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD10E, 0x00);
 800568a:	2100      	movs	r1, #0
 800568c:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8005690:	f7fb fc26 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD10F, 0xE5);
 8005694:	21e5      	movs	r1, #229	@ 0xe5
 8005696:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 800569a:	f7fb fc21 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD110, 0x01);
 800569e:	2101      	movs	r1, #1
 80056a0:	f24d 1010 	movw	r0, #53520	@ 0xd110
 80056a4:	f7fb fc1c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD111, 0x13);
 80056a8:	2113      	movs	r1, #19
 80056aa:	f24d 1011 	movw	r0, #53521	@ 0xd111
 80056ae:	f7fb fc17 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD112, 0x01);
 80056b2:	2101      	movs	r1, #1
 80056b4:	f24d 1012 	movw	r0, #53522	@ 0xd112
 80056b8:	f7fb fc12 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD113, 0x54);
 80056bc:	2154      	movs	r1, #84	@ 0x54
 80056be:	f24d 1013 	movw	r0, #53523	@ 0xd113
 80056c2:	f7fb fc0d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD114, 0x01);
 80056c6:	2101      	movs	r1, #1
 80056c8:	f24d 1014 	movw	r0, #53524	@ 0xd114
 80056cc:	f7fb fc08 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD115, 0x82);
 80056d0:	2182      	movs	r1, #130	@ 0x82
 80056d2:	f24d 1015 	movw	r0, #53525	@ 0xd115
 80056d6:	f7fb fc03 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD116, 0x01);
 80056da:	2101      	movs	r1, #1
 80056dc:	f24d 1016 	movw	r0, #53526	@ 0xd116
 80056e0:	f7fb fbfe 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD117, 0xCA);
 80056e4:	21ca      	movs	r1, #202	@ 0xca
 80056e6:	f24d 1017 	movw	r0, #53527	@ 0xd117
 80056ea:	f7fb fbf9 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD118, 0x02);
 80056ee:	2102      	movs	r1, #2
 80056f0:	f24d 1018 	movw	r0, #53528	@ 0xd118
 80056f4:	f7fb fbf4 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD119, 0x00);
 80056f8:	2100      	movs	r1, #0
 80056fa:	f24d 1019 	movw	r0, #53529	@ 0xd119
 80056fe:	f7fb fbef 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD11A, 0x02);
 8005702:	2102      	movs	r1, #2
 8005704:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 8005708:	f7fb fbea 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD11B, 0x01);
 800570c:	2101      	movs	r1, #1
 800570e:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 8005712:	f7fb fbe5 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD11C, 0x02);
 8005716:	2102      	movs	r1, #2
 8005718:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 800571c:	f7fb fbe0 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD11D, 0x34);
 8005720:	2134      	movs	r1, #52	@ 0x34
 8005722:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 8005726:	f7fb fbdb 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD11E, 0x02);
 800572a:	2102      	movs	r1, #2
 800572c:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8005730:	f7fb fbd6 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD11F, 0x67);
 8005734:	2167      	movs	r1, #103	@ 0x67
 8005736:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 800573a:	f7fb fbd1 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD120, 0x02);
 800573e:	2102      	movs	r1, #2
 8005740:	f24d 1020 	movw	r0, #53536	@ 0xd120
 8005744:	f7fb fbcc 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD121, 0x84);
 8005748:	2184      	movs	r1, #132	@ 0x84
 800574a:	f24d 1021 	movw	r0, #53537	@ 0xd121
 800574e:	f7fb fbc7 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD122, 0x02);
 8005752:	2102      	movs	r1, #2
 8005754:	f24d 1022 	movw	r0, #53538	@ 0xd122
 8005758:	f7fb fbc2 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD123, 0xA4);
 800575c:	21a4      	movs	r1, #164	@ 0xa4
 800575e:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8005762:	f7fb fbbd 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD124, 0x02);
 8005766:	2102      	movs	r1, #2
 8005768:	f24d 1024 	movw	r0, #53540	@ 0xd124
 800576c:	f7fb fbb8 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD125, 0xB7);
 8005770:	21b7      	movs	r1, #183	@ 0xb7
 8005772:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8005776:	f7fb fbb3 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD126, 0x02);
 800577a:	2102      	movs	r1, #2
 800577c:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8005780:	f7fb fbae 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD127, 0xCF);
 8005784:	21cf      	movs	r1, #207	@ 0xcf
 8005786:	f24d 1027 	movw	r0, #53543	@ 0xd127
 800578a:	f7fb fba9 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD128, 0x02);
 800578e:	2102      	movs	r1, #2
 8005790:	f24d 1028 	movw	r0, #53544	@ 0xd128
 8005794:	f7fb fba4 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD129, 0xDE);
 8005798:	21de      	movs	r1, #222	@ 0xde
 800579a:	f24d 1029 	movw	r0, #53545	@ 0xd129
 800579e:	f7fb fb9f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD12A, 0x02);
 80057a2:	2102      	movs	r1, #2
 80057a4:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 80057a8:	f7fb fb9a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD12B, 0xF2);
 80057ac:	21f2      	movs	r1, #242	@ 0xf2
 80057ae:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 80057b2:	f7fb fb95 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD12C, 0x02);
 80057b6:	2102      	movs	r1, #2
 80057b8:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 80057bc:	f7fb fb90 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD12D, 0xFE);
 80057c0:	21fe      	movs	r1, #254	@ 0xfe
 80057c2:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 80057c6:	f7fb fb8b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD12E, 0x03);
 80057ca:	2103      	movs	r1, #3
 80057cc:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 80057d0:	f7fb fb86 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD12F, 0x10);
 80057d4:	2110      	movs	r1, #16
 80057d6:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 80057da:	f7fb fb81 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD130, 0x03);
 80057de:	2103      	movs	r1, #3
 80057e0:	f24d 1030 	movw	r0, #53552	@ 0xd130
 80057e4:	f7fb fb7c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD131, 0x33);
 80057e8:	2133      	movs	r1, #51	@ 0x33
 80057ea:	f24d 1031 	movw	r0, #53553	@ 0xd131
 80057ee:	f7fb fb77 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD132, 0x03);
 80057f2:	2103      	movs	r1, #3
 80057f4:	f24d 1032 	movw	r0, #53554	@ 0xd132
 80057f8:	f7fb fb72 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD133, 0x6D);
 80057fc:	216d      	movs	r1, #109	@ 0x6d
 80057fe:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8005802:	f7fb fb6d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD200, 0x00);
 8005806:	2100      	movs	r1, #0
 8005808:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 800580c:	f7fb fb68 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD201, 0x33);
 8005810:	2133      	movs	r1, #51	@ 0x33
 8005812:	f24d 2001 	movw	r0, #53761	@ 0xd201
 8005816:	f7fb fb63 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD202, 0x00);
 800581a:	2100      	movs	r1, #0
 800581c:	f24d 2002 	movw	r0, #53762	@ 0xd202
 8005820:	f7fb fb5e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD203, 0x34);
 8005824:	2134      	movs	r1, #52	@ 0x34
 8005826:	f24d 2003 	movw	r0, #53763	@ 0xd203
 800582a:	f7fb fb59 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD204, 0x00);
 800582e:	2100      	movs	r1, #0
 8005830:	f24d 2004 	movw	r0, #53764	@ 0xd204
 8005834:	f7fb fb54 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD205, 0x3A);
 8005838:	213a      	movs	r1, #58	@ 0x3a
 800583a:	f24d 2005 	movw	r0, #53765	@ 0xd205
 800583e:	f7fb fb4f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD206, 0x00);
 8005842:	2100      	movs	r1, #0
 8005844:	f24d 2006 	movw	r0, #53766	@ 0xd206
 8005848:	f7fb fb4a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD207, 0x4A);
 800584c:	214a      	movs	r1, #74	@ 0x4a
 800584e:	f24d 2007 	movw	r0, #53767	@ 0xd207
 8005852:	f7fb fb45 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD208, 0x00);
 8005856:	2100      	movs	r1, #0
 8005858:	f24d 2008 	movw	r0, #53768	@ 0xd208
 800585c:	f7fb fb40 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD209, 0x5C);
 8005860:	215c      	movs	r1, #92	@ 0x5c
 8005862:	f24d 2009 	movw	r0, #53769	@ 0xd209
 8005866:	f7fb fb3b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD20A, 0x00);
 800586a:	2100      	movs	r1, #0
 800586c:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8005870:	f7fb fb36 	bl	8000ee0 <lcd_write_reg>

        lcd_write_reg(0xD20B, 0x81);
 8005874:	2181      	movs	r1, #129	@ 0x81
 8005876:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 800587a:	f7fb fb31 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD20C, 0x00);
 800587e:	2100      	movs	r1, #0
 8005880:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8005884:	f7fb fb2c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD20D, 0xA6);
 8005888:	21a6      	movs	r1, #166	@ 0xa6
 800588a:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 800588e:	f7fb fb27 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD20E, 0x00);
 8005892:	2100      	movs	r1, #0
 8005894:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8005898:	f7fb fb22 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD20F, 0xE5);
 800589c:	21e5      	movs	r1, #229	@ 0xe5
 800589e:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 80058a2:	f7fb fb1d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD210, 0x01);
 80058a6:	2101      	movs	r1, #1
 80058a8:	f24d 2010 	movw	r0, #53776	@ 0xd210
 80058ac:	f7fb fb18 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD211, 0x13);
 80058b0:	2113      	movs	r1, #19
 80058b2:	f24d 2011 	movw	r0, #53777	@ 0xd211
 80058b6:	f7fb fb13 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD212, 0x01);
 80058ba:	2101      	movs	r1, #1
 80058bc:	f24d 2012 	movw	r0, #53778	@ 0xd212
 80058c0:	f7fb fb0e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD213, 0x54);
 80058c4:	2154      	movs	r1, #84	@ 0x54
 80058c6:	f24d 2013 	movw	r0, #53779	@ 0xd213
 80058ca:	f7fb fb09 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD214, 0x01);
 80058ce:	2101      	movs	r1, #1
 80058d0:	f24d 2014 	movw	r0, #53780	@ 0xd214
 80058d4:	f7fb fb04 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD215, 0x82);
 80058d8:	2182      	movs	r1, #130	@ 0x82
 80058da:	f24d 2015 	movw	r0, #53781	@ 0xd215
 80058de:	f7fb faff 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD216, 0x01);
 80058e2:	2101      	movs	r1, #1
 80058e4:	f24d 2016 	movw	r0, #53782	@ 0xd216
 80058e8:	f7fb fafa 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD217, 0xCA);
 80058ec:	21ca      	movs	r1, #202	@ 0xca
 80058ee:	f24d 2017 	movw	r0, #53783	@ 0xd217
 80058f2:	f7fb faf5 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD218, 0x02);
 80058f6:	2102      	movs	r1, #2
 80058f8:	f24d 2018 	movw	r0, #53784	@ 0xd218
 80058fc:	f7fb faf0 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD219, 0x00);
 8005900:	2100      	movs	r1, #0
 8005902:	f24d 2019 	movw	r0, #53785	@ 0xd219
 8005906:	f7fb faeb 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD21A, 0x02);
 800590a:	2102      	movs	r1, #2
 800590c:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 8005910:	f7fb fae6 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD21B, 0x01);
 8005914:	2101      	movs	r1, #1
 8005916:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 800591a:	f7fb fae1 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD21C, 0x02);
 800591e:	2102      	movs	r1, #2
 8005920:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 8005924:	f7fb fadc 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD21D, 0x34);
 8005928:	2134      	movs	r1, #52	@ 0x34
 800592a:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 800592e:	f7fb fad7 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD21E, 0x02);
 8005932:	2102      	movs	r1, #2
 8005934:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 8005938:	f7fb fad2 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD21F, 0x67);
 800593c:	2167      	movs	r1, #103	@ 0x67
 800593e:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 8005942:	f7fb facd 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD220, 0x02);
 8005946:	2102      	movs	r1, #2
 8005948:	f24d 2020 	movw	r0, #53792	@ 0xd220
 800594c:	f7fb fac8 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD221, 0x84);
 8005950:	2184      	movs	r1, #132	@ 0x84
 8005952:	f24d 2021 	movw	r0, #53793	@ 0xd221
 8005956:	f7fb fac3 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD222, 0x02);
 800595a:	2102      	movs	r1, #2
 800595c:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8005960:	f7fb fabe 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD223, 0xA4);
 8005964:	21a4      	movs	r1, #164	@ 0xa4
 8005966:	f24d 2023 	movw	r0, #53795	@ 0xd223
 800596a:	f7fb fab9 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD224, 0x02);
 800596e:	2102      	movs	r1, #2
 8005970:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8005974:	f7fb fab4 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD225, 0xB7);
 8005978:	21b7      	movs	r1, #183	@ 0xb7
 800597a:	f24d 2025 	movw	r0, #53797	@ 0xd225
 800597e:	f7fb faaf 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD226, 0x02);
 8005982:	2102      	movs	r1, #2
 8005984:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8005988:	f7fb faaa 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD227, 0xCF);
 800598c:	21cf      	movs	r1, #207	@ 0xcf
 800598e:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8005992:	f7fb faa5 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD228, 0x02);
 8005996:	2102      	movs	r1, #2
 8005998:	f24d 2028 	movw	r0, #53800	@ 0xd228
 800599c:	f7fb faa0 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD229, 0xDE);
 80059a0:	21de      	movs	r1, #222	@ 0xde
 80059a2:	f24d 2029 	movw	r0, #53801	@ 0xd229
 80059a6:	f7fb fa9b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD22A, 0x02);
 80059aa:	2102      	movs	r1, #2
 80059ac:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 80059b0:	f7fb fa96 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD22B, 0xF2);
 80059b4:	21f2      	movs	r1, #242	@ 0xf2
 80059b6:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 80059ba:	f7fb fa91 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD22C, 0x02);
 80059be:	2102      	movs	r1, #2
 80059c0:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 80059c4:	f7fb fa8c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD22D, 0xFE);
 80059c8:	21fe      	movs	r1, #254	@ 0xfe
 80059ca:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 80059ce:	f7fb fa87 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD22E, 0x03);
 80059d2:	2103      	movs	r1, #3
 80059d4:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 80059d8:	f7fb fa82 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD22F, 0x10);
 80059dc:	2110      	movs	r1, #16
 80059de:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 80059e2:	f7fb fa7d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD230, 0x03);
 80059e6:	2103      	movs	r1, #3
 80059e8:	f24d 2030 	movw	r0, #53808	@ 0xd230
 80059ec:	f7fb fa78 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD231, 0x33);
 80059f0:	2133      	movs	r1, #51	@ 0x33
 80059f2:	f24d 2031 	movw	r0, #53809	@ 0xd231
 80059f6:	f7fb fa73 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD232, 0x03);
 80059fa:	2103      	movs	r1, #3
 80059fc:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8005a00:	f7fb fa6e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD233, 0x6D);
 8005a04:	216d      	movs	r1, #109	@ 0x6d
 8005a06:	f24d 2033 	movw	r0, #53811	@ 0xd233
 8005a0a:	f7fb fa69 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD300, 0x00);
 8005a0e:	2100      	movs	r1, #0
 8005a10:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 8005a14:	f7fb fa64 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD301, 0x33);
 8005a18:	2133      	movs	r1, #51	@ 0x33
 8005a1a:	f24d 3001 	movw	r0, #54017	@ 0xd301
 8005a1e:	f7fb fa5f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD302, 0x00);
 8005a22:	2100      	movs	r1, #0
 8005a24:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8005a28:	f7fb fa5a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD303, 0x34);
 8005a2c:	2134      	movs	r1, #52	@ 0x34
 8005a2e:	f24d 3003 	movw	r0, #54019	@ 0xd303
 8005a32:	f7fb fa55 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD304, 0x00);
 8005a36:	2100      	movs	r1, #0
 8005a38:	f24d 3004 	movw	r0, #54020	@ 0xd304
 8005a3c:	f7fb fa50 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD305, 0x3A);
 8005a40:	213a      	movs	r1, #58	@ 0x3a
 8005a42:	f24d 3005 	movw	r0, #54021	@ 0xd305
 8005a46:	f7fb fa4b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD306, 0x00);
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8005a50:	f7fb fa46 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD307, 0x4A);
 8005a54:	214a      	movs	r1, #74	@ 0x4a
 8005a56:	f24d 3007 	movw	r0, #54023	@ 0xd307
 8005a5a:	f7fb fa41 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD308, 0x00);
 8005a5e:	2100      	movs	r1, #0
 8005a60:	f24d 3008 	movw	r0, #54024	@ 0xd308
 8005a64:	f7fb fa3c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD309, 0x5C);
 8005a68:	215c      	movs	r1, #92	@ 0x5c
 8005a6a:	f24d 3009 	movw	r0, #54025	@ 0xd309
 8005a6e:	f7fb fa37 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD30A, 0x00);
 8005a72:	2100      	movs	r1, #0
 8005a74:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8005a78:	f7fb fa32 	bl	8000ee0 <lcd_write_reg>

        lcd_write_reg(0xD30B, 0x81);
 8005a7c:	2181      	movs	r1, #129	@ 0x81
 8005a7e:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8005a82:	f7fb fa2d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD30C, 0x00);
 8005a86:	2100      	movs	r1, #0
 8005a88:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 8005a8c:	f7fb fa28 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD30D, 0xA6);
 8005a90:	21a6      	movs	r1, #166	@ 0xa6
 8005a92:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8005a96:	f7fb fa23 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD30E, 0x00);
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8005aa0:	f7fb fa1e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD30F, 0xE5);
 8005aa4:	21e5      	movs	r1, #229	@ 0xe5
 8005aa6:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 8005aaa:	f7fb fa19 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD310, 0x01);
 8005aae:	2101      	movs	r1, #1
 8005ab0:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8005ab4:	f7fb fa14 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD311, 0x13);
 8005ab8:	2113      	movs	r1, #19
 8005aba:	f24d 3011 	movw	r0, #54033	@ 0xd311
 8005abe:	f7fb fa0f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD312, 0x01);
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8005ac8:	f7fb fa0a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD313, 0x54);
 8005acc:	2154      	movs	r1, #84	@ 0x54
 8005ace:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8005ad2:	f7fb fa05 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD314, 0x01);
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	f24d 3014 	movw	r0, #54036	@ 0xd314
 8005adc:	f7fb fa00 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD315, 0x82);
 8005ae0:	2182      	movs	r1, #130	@ 0x82
 8005ae2:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8005ae6:	f7fb f9fb 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD316, 0x01);
 8005aea:	2101      	movs	r1, #1
 8005aec:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8005af0:	f7fb f9f6 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD317, 0xCA);
 8005af4:	21ca      	movs	r1, #202	@ 0xca
 8005af6:	f24d 3017 	movw	r0, #54039	@ 0xd317
 8005afa:	f7fb f9f1 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD318, 0x02);
 8005afe:	2102      	movs	r1, #2
 8005b00:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8005b04:	f7fb f9ec 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD319, 0x00);
 8005b08:	2100      	movs	r1, #0
 8005b0a:	f24d 3019 	movw	r0, #54041	@ 0xd319
 8005b0e:	f7fb f9e7 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD31A, 0x02);
 8005b12:	2102      	movs	r1, #2
 8005b14:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8005b18:	f7fb f9e2 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD31B, 0x01);
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 8005b22:	f7fb f9dd 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD31C, 0x02);
 8005b26:	2102      	movs	r1, #2
 8005b28:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 8005b2c:	f7fb f9d8 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD31D, 0x34);
 8005b30:	2134      	movs	r1, #52	@ 0x34
 8005b32:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 8005b36:	f7fb f9d3 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD31E, 0x02);
 8005b3a:	2102      	movs	r1, #2
 8005b3c:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 8005b40:	f7fb f9ce 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD31F, 0x67);
 8005b44:	2167      	movs	r1, #103	@ 0x67
 8005b46:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 8005b4a:	f7fb f9c9 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD320, 0x02);
 8005b4e:	2102      	movs	r1, #2
 8005b50:	f24d 3020 	movw	r0, #54048	@ 0xd320
 8005b54:	f7fb f9c4 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD321, 0x84);
 8005b58:	2184      	movs	r1, #132	@ 0x84
 8005b5a:	f24d 3021 	movw	r0, #54049	@ 0xd321
 8005b5e:	f7fb f9bf 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD322, 0x02);
 8005b62:	2102      	movs	r1, #2
 8005b64:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8005b68:	f7fb f9ba 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD323, 0xA4);
 8005b6c:	21a4      	movs	r1, #164	@ 0xa4
 8005b6e:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8005b72:	f7fb f9b5 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD324, 0x02);
 8005b76:	2102      	movs	r1, #2
 8005b78:	f24d 3024 	movw	r0, #54052	@ 0xd324
 8005b7c:	f7fb f9b0 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD325, 0xB7);
 8005b80:	21b7      	movs	r1, #183	@ 0xb7
 8005b82:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8005b86:	f7fb f9ab 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD326, 0x02);
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8005b90:	f7fb f9a6 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD327, 0xCF);
 8005b94:	21cf      	movs	r1, #207	@ 0xcf
 8005b96:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8005b9a:	f7fb f9a1 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD328, 0x02);
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8005ba4:	f7fb f99c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD329, 0xDE);
 8005ba8:	21de      	movs	r1, #222	@ 0xde
 8005baa:	f24d 3029 	movw	r0, #54057	@ 0xd329
 8005bae:	f7fb f997 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD32A, 0x02);
 8005bb2:	2102      	movs	r1, #2
 8005bb4:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8005bb8:	f7fb f992 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD32B, 0xF2);
 8005bbc:	21f2      	movs	r1, #242	@ 0xf2
 8005bbe:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8005bc2:	f7fb f98d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD32C, 0x02);
 8005bc6:	2102      	movs	r1, #2
 8005bc8:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 8005bcc:	f7fb f988 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD32D, 0xFE);
 8005bd0:	21fe      	movs	r1, #254	@ 0xfe
 8005bd2:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8005bd6:	f7fb f983 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD32E, 0x03);
 8005bda:	2103      	movs	r1, #3
 8005bdc:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8005be0:	f7fb f97e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD32F, 0x10);
 8005be4:	2110      	movs	r1, #16
 8005be6:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 8005bea:	f7fb f979 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD330, 0x03);
 8005bee:	2103      	movs	r1, #3
 8005bf0:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8005bf4:	f7fb f974 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD331, 0x33);
 8005bf8:	2133      	movs	r1, #51	@ 0x33
 8005bfa:	f24d 3031 	movw	r0, #54065	@ 0xd331
 8005bfe:	f7fb f96f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD332, 0x03);
 8005c02:	2103      	movs	r1, #3
 8005c04:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8005c08:	f7fb f96a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD333, 0x6D);
 8005c0c:	216d      	movs	r1, #109	@ 0x6d
 8005c0e:	f24d 3033 	movw	r0, #54067	@ 0xd333
 8005c12:	f7fb f965 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD400, 0x00);
 8005c16:	2100      	movs	r1, #0
 8005c18:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 8005c1c:	f7fb f960 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD401, 0x33);
 8005c20:	2133      	movs	r1, #51	@ 0x33
 8005c22:	f24d 4001 	movw	r0, #54273	@ 0xd401
 8005c26:	f7fb f95b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD402, 0x00);
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	f24d 4002 	movw	r0, #54274	@ 0xd402
 8005c30:	f7fb f956 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD403, 0x34);
 8005c34:	2134      	movs	r1, #52	@ 0x34
 8005c36:	f24d 4003 	movw	r0, #54275	@ 0xd403
 8005c3a:	f7fb f951 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD404, 0x00);
 8005c3e:	2100      	movs	r1, #0
 8005c40:	f24d 4004 	movw	r0, #54276	@ 0xd404
 8005c44:	f7fb f94c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD405, 0x3A);
 8005c48:	213a      	movs	r1, #58	@ 0x3a
 8005c4a:	f24d 4005 	movw	r0, #54277	@ 0xd405
 8005c4e:	f7fb f947 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD406, 0x00);
 8005c52:	2100      	movs	r1, #0
 8005c54:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8005c58:	f7fb f942 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD407, 0x4A);
 8005c5c:	214a      	movs	r1, #74	@ 0x4a
 8005c5e:	f24d 4007 	movw	r0, #54279	@ 0xd407
 8005c62:	f7fb f93d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD408, 0x00);
 8005c66:	2100      	movs	r1, #0
 8005c68:	f24d 4008 	movw	r0, #54280	@ 0xd408
 8005c6c:	f7fb f938 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD409, 0x5C);
 8005c70:	215c      	movs	r1, #92	@ 0x5c
 8005c72:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8005c76:	f7fb f933 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD40A, 0x00);
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8005c80:	f7fb f92e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD40B, 0x81);
 8005c84:	2181      	movs	r1, #129	@ 0x81
 8005c86:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 8005c8a:	f7fb f929 	bl	8000ee0 <lcd_write_reg>

        lcd_write_reg(0xD40C, 0x00);
 8005c8e:	2100      	movs	r1, #0
 8005c90:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 8005c94:	f7fb f924 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD40D, 0xA6);
 8005c98:	21a6      	movs	r1, #166	@ 0xa6
 8005c9a:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 8005c9e:	f7fb f91f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD40E, 0x00);
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8005ca8:	f7fb f91a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD40F, 0xE5);
 8005cac:	21e5      	movs	r1, #229	@ 0xe5
 8005cae:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 8005cb2:	f7fb f915 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD410, 0x01);
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	f24d 4010 	movw	r0, #54288	@ 0xd410
 8005cbc:	f7fb f910 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD411, 0x13);
 8005cc0:	2113      	movs	r1, #19
 8005cc2:	f24d 4011 	movw	r0, #54289	@ 0xd411
 8005cc6:	f7fb f90b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD412, 0x01);
 8005cca:	2101      	movs	r1, #1
 8005ccc:	f24d 4012 	movw	r0, #54290	@ 0xd412
 8005cd0:	f7fb f906 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD413, 0x54);
 8005cd4:	2154      	movs	r1, #84	@ 0x54
 8005cd6:	f24d 4013 	movw	r0, #54291	@ 0xd413
 8005cda:	f7fb f901 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD414, 0x01);
 8005cde:	2101      	movs	r1, #1
 8005ce0:	f24d 4014 	movw	r0, #54292	@ 0xd414
 8005ce4:	f7fb f8fc 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD415, 0x82);
 8005ce8:	2182      	movs	r1, #130	@ 0x82
 8005cea:	f24d 4015 	movw	r0, #54293	@ 0xd415
 8005cee:	f7fb f8f7 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD416, 0x01);
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8005cf8:	f7fb f8f2 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD417, 0xCA);
 8005cfc:	21ca      	movs	r1, #202	@ 0xca
 8005cfe:	f24d 4017 	movw	r0, #54295	@ 0xd417
 8005d02:	f7fb f8ed 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD418, 0x02);
 8005d06:	2102      	movs	r1, #2
 8005d08:	f24d 4018 	movw	r0, #54296	@ 0xd418
 8005d0c:	f7fb f8e8 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD419, 0x00);
 8005d10:	2100      	movs	r1, #0
 8005d12:	f24d 4019 	movw	r0, #54297	@ 0xd419
 8005d16:	f7fb f8e3 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD41A, 0x02);
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 8005d20:	f7fb f8de 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD41B, 0x01);
 8005d24:	2101      	movs	r1, #1
 8005d26:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 8005d2a:	f7fb f8d9 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD41C, 0x02);
 8005d2e:	2102      	movs	r1, #2
 8005d30:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 8005d34:	f7fb f8d4 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD41D, 0x34);
 8005d38:	2134      	movs	r1, #52	@ 0x34
 8005d3a:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 8005d3e:	f7fb f8cf 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD41E, 0x02);
 8005d42:	2102      	movs	r1, #2
 8005d44:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 8005d48:	f7fb f8ca 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD41F, 0x67);
 8005d4c:	2167      	movs	r1, #103	@ 0x67
 8005d4e:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 8005d52:	f7fb f8c5 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD420, 0x02);
 8005d56:	2102      	movs	r1, #2
 8005d58:	f24d 4020 	movw	r0, #54304	@ 0xd420
 8005d5c:	f7fb f8c0 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD421, 0x84);
 8005d60:	2184      	movs	r1, #132	@ 0x84
 8005d62:	f24d 4021 	movw	r0, #54305	@ 0xd421
 8005d66:	f7fb f8bb 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD422, 0x02);
 8005d6a:	2102      	movs	r1, #2
 8005d6c:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8005d70:	f7fb f8b6 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD423, 0xA4);
 8005d74:	21a4      	movs	r1, #164	@ 0xa4
 8005d76:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8005d7a:	f7fb f8b1 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD424, 0x02);
 8005d7e:	2102      	movs	r1, #2
 8005d80:	f24d 4024 	movw	r0, #54308	@ 0xd424
 8005d84:	f7fb f8ac 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD425, 0xB7);
 8005d88:	21b7      	movs	r1, #183	@ 0xb7
 8005d8a:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8005d8e:	f7fb f8a7 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD426, 0x02);
 8005d92:	2102      	movs	r1, #2
 8005d94:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8005d98:	f7fb f8a2 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD427, 0xCF);
 8005d9c:	21cf      	movs	r1, #207	@ 0xcf
 8005d9e:	f24d 4027 	movw	r0, #54311	@ 0xd427
 8005da2:	f7fb f89d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD428, 0x02);
 8005da6:	2102      	movs	r1, #2
 8005da8:	f24d 4028 	movw	r0, #54312	@ 0xd428
 8005dac:	f7fb f898 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD429, 0xDE);
 8005db0:	21de      	movs	r1, #222	@ 0xde
 8005db2:	f24d 4029 	movw	r0, #54313	@ 0xd429
 8005db6:	f7fb f893 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD42A, 0x02);
 8005dba:	2102      	movs	r1, #2
 8005dbc:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 8005dc0:	f7fb f88e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD42B, 0xF2);
 8005dc4:	21f2      	movs	r1, #242	@ 0xf2
 8005dc6:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 8005dca:	f7fb f889 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD42C, 0x02);
 8005dce:	2102      	movs	r1, #2
 8005dd0:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 8005dd4:	f7fb f884 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD42D, 0xFE);
 8005dd8:	21fe      	movs	r1, #254	@ 0xfe
 8005dda:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 8005dde:	f7fb f87f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD42E, 0x03);
 8005de2:	2103      	movs	r1, #3
 8005de4:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 8005de8:	f7fb f87a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD42F, 0x10);
 8005dec:	2110      	movs	r1, #16
 8005dee:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8005df2:	f7fb f875 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD430, 0x03);
 8005df6:	2103      	movs	r1, #3
 8005df8:	f24d 4030 	movw	r0, #54320	@ 0xd430
 8005dfc:	f7fb f870 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD431, 0x33);
 8005e00:	2133      	movs	r1, #51	@ 0x33
 8005e02:	f24d 4031 	movw	r0, #54321	@ 0xd431
 8005e06:	f7fb f86b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD432, 0x03);
 8005e0a:	2103      	movs	r1, #3
 8005e0c:	f24d 4032 	movw	r0, #54322	@ 0xd432
 8005e10:	f7fb f866 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD433, 0x6D);
 8005e14:	216d      	movs	r1, #109	@ 0x6d
 8005e16:	f24d 4033 	movw	r0, #54323	@ 0xd433
 8005e1a:	f7fb f861 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD500, 0x00);
 8005e1e:	2100      	movs	r1, #0
 8005e20:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 8005e24:	f7fb f85c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD501, 0x33);
 8005e28:	2133      	movs	r1, #51	@ 0x33
 8005e2a:	f24d 5001 	movw	r0, #54529	@ 0xd501
 8005e2e:	f7fb f857 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD502, 0x00);
 8005e32:	2100      	movs	r1, #0
 8005e34:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8005e38:	f7fb f852 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD503, 0x34);
 8005e3c:	2134      	movs	r1, #52	@ 0x34
 8005e3e:	f24d 5003 	movw	r0, #54531	@ 0xd503
 8005e42:	f7fb f84d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD504, 0x00);
 8005e46:	2100      	movs	r1, #0
 8005e48:	f24d 5004 	movw	r0, #54532	@ 0xd504
 8005e4c:	f7fb f848 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD505, 0x3A);
 8005e50:	213a      	movs	r1, #58	@ 0x3a
 8005e52:	f24d 5005 	movw	r0, #54533	@ 0xd505
 8005e56:	f7fb f843 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD506, 0x00);
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	f24d 5006 	movw	r0, #54534	@ 0xd506
 8005e60:	f7fb f83e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD507, 0x4A);
 8005e64:	214a      	movs	r1, #74	@ 0x4a
 8005e66:	f24d 5007 	movw	r0, #54535	@ 0xd507
 8005e6a:	f7fb f839 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD508, 0x00);
 8005e6e:	2100      	movs	r1, #0
 8005e70:	f24d 5008 	movw	r0, #54536	@ 0xd508
 8005e74:	f7fb f834 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD509, 0x5C);
 8005e78:	215c      	movs	r1, #92	@ 0x5c
 8005e7a:	f24d 5009 	movw	r0, #54537	@ 0xd509
 8005e7e:	f7fb f82f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD50A, 0x00);
 8005e82:	2100      	movs	r1, #0
 8005e84:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8005e88:	f7fb f82a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD50B, 0x81);
 8005e8c:	2181      	movs	r1, #129	@ 0x81
 8005e8e:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 8005e92:	f7fb f825 	bl	8000ee0 <lcd_write_reg>

        lcd_write_reg(0xD50C, 0x00);
 8005e96:	2100      	movs	r1, #0
 8005e98:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 8005e9c:	f7fb f820 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD50D, 0xA6);
 8005ea0:	21a6      	movs	r1, #166	@ 0xa6
 8005ea2:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 8005ea6:	f7fb f81b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD50E, 0x00);
 8005eaa:	2100      	movs	r1, #0
 8005eac:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 8005eb0:	f7fb f816 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD50F, 0xE5);
 8005eb4:	21e5      	movs	r1, #229	@ 0xe5
 8005eb6:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 8005eba:	f7fb f811 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD510, 0x01);
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	f24d 5010 	movw	r0, #54544	@ 0xd510
 8005ec4:	f7fb f80c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD511, 0x13);
 8005ec8:	2113      	movs	r1, #19
 8005eca:	f24d 5011 	movw	r0, #54545	@ 0xd511
 8005ece:	f7fb f807 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD512, 0x01);
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	f24d 5012 	movw	r0, #54546	@ 0xd512
 8005ed8:	f7fb f802 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD513, 0x54);
 8005edc:	2154      	movs	r1, #84	@ 0x54
 8005ede:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8005ee2:	f7fa fffd 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD514, 0x01);
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	f24d 5014 	movw	r0, #54548	@ 0xd514
 8005eec:	f7fa fff8 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD515, 0x82);
 8005ef0:	2182      	movs	r1, #130	@ 0x82
 8005ef2:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8005ef6:	f7fa fff3 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD516, 0x01);
 8005efa:	2101      	movs	r1, #1
 8005efc:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8005f00:	f7fa ffee 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD517, 0xCA);
 8005f04:	21ca      	movs	r1, #202	@ 0xca
 8005f06:	f24d 5017 	movw	r0, #54551	@ 0xd517
 8005f0a:	f7fa ffe9 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD518, 0x02);
 8005f0e:	2102      	movs	r1, #2
 8005f10:	f24d 5018 	movw	r0, #54552	@ 0xd518
 8005f14:	f7fa ffe4 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD519, 0x00);
 8005f18:	2100      	movs	r1, #0
 8005f1a:	f24d 5019 	movw	r0, #54553	@ 0xd519
 8005f1e:	f7fa ffdf 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD51A, 0x02);
 8005f22:	2102      	movs	r1, #2
 8005f24:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8005f28:	f7fa ffda 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD51B, 0x01);
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 8005f32:	f7fa ffd5 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD51C, 0x02);
 8005f36:	2102      	movs	r1, #2
 8005f38:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8005f3c:	f7fa ffd0 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD51D, 0x34);
 8005f40:	2134      	movs	r1, #52	@ 0x34
 8005f42:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 8005f46:	f7fa ffcb 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD51E, 0x02);
 8005f4a:	2102      	movs	r1, #2
 8005f4c:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 8005f50:	f7fa ffc6 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD51F, 0x67);
 8005f54:	2167      	movs	r1, #103	@ 0x67
 8005f56:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 8005f5a:	f7fa ffc1 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD520, 0x02);
 8005f5e:	2102      	movs	r1, #2
 8005f60:	f24d 5020 	movw	r0, #54560	@ 0xd520
 8005f64:	f7fa ffbc 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD521, 0x84);
 8005f68:	2184      	movs	r1, #132	@ 0x84
 8005f6a:	f24d 5021 	movw	r0, #54561	@ 0xd521
 8005f6e:	f7fa ffb7 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD522, 0x02);
 8005f72:	2102      	movs	r1, #2
 8005f74:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8005f78:	f7fa ffb2 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD523, 0xA4);
 8005f7c:	21a4      	movs	r1, #164	@ 0xa4
 8005f7e:	f24d 5023 	movw	r0, #54563	@ 0xd523
 8005f82:	f7fa ffad 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD524, 0x02);
 8005f86:	2102      	movs	r1, #2
 8005f88:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8005f8c:	f7fa ffa8 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD525, 0xB7);
 8005f90:	21b7      	movs	r1, #183	@ 0xb7
 8005f92:	f24d 5025 	movw	r0, #54565	@ 0xd525
 8005f96:	f7fa ffa3 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD526, 0x02);
 8005f9a:	2102      	movs	r1, #2
 8005f9c:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8005fa0:	f7fa ff9e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD527, 0xCF);
 8005fa4:	21cf      	movs	r1, #207	@ 0xcf
 8005fa6:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8005faa:	f7fa ff99 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD528, 0x02);
 8005fae:	2102      	movs	r1, #2
 8005fb0:	f24d 5028 	movw	r0, #54568	@ 0xd528
 8005fb4:	f7fa ff94 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD529, 0xDE);
 8005fb8:	21de      	movs	r1, #222	@ 0xde
 8005fba:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8005fbe:	f7fa ff8f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD52A, 0x02);
 8005fc2:	2102      	movs	r1, #2
 8005fc4:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 8005fc8:	f7fa ff8a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD52B, 0xF2);
 8005fcc:	21f2      	movs	r1, #242	@ 0xf2
 8005fce:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8005fd2:	f7fa ff85 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD52C, 0x02);
 8005fd6:	2102      	movs	r1, #2
 8005fd8:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8005fdc:	f7fa ff80 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD52D, 0xFE);
 8005fe0:	21fe      	movs	r1, #254	@ 0xfe
 8005fe2:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 8005fe6:	f7fa ff7b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD52E, 0x03);
 8005fea:	2103      	movs	r1, #3
 8005fec:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8005ff0:	f7fa ff76 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD52F, 0x10);
 8005ff4:	2110      	movs	r1, #16
 8005ff6:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8005ffa:	f7fa ff71 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD530, 0x03);
 8005ffe:	2103      	movs	r1, #3
 8006000:	f24d 5030 	movw	r0, #54576	@ 0xd530
 8006004:	f7fa ff6c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD531, 0x33);
 8006008:	2133      	movs	r1, #51	@ 0x33
 800600a:	f24d 5031 	movw	r0, #54577	@ 0xd531
 800600e:	f7fa ff67 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD532, 0x03);
 8006012:	2103      	movs	r1, #3
 8006014:	f24d 5032 	movw	r0, #54578	@ 0xd532
 8006018:	f7fa ff62 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD533, 0x6D);
 800601c:	216d      	movs	r1, #109	@ 0x6d
 800601e:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8006022:	f7fa ff5d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD600, 0x00);
 8006026:	2100      	movs	r1, #0
 8006028:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 800602c:	f7fa ff58 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD601, 0x33);
 8006030:	2133      	movs	r1, #51	@ 0x33
 8006032:	f24d 6001 	movw	r0, #54785	@ 0xd601
 8006036:	f7fa ff53 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD602, 0x00);
 800603a:	2100      	movs	r1, #0
 800603c:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8006040:	f7fa ff4e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD603, 0x34);
 8006044:	2134      	movs	r1, #52	@ 0x34
 8006046:	f24d 6003 	movw	r0, #54787	@ 0xd603
 800604a:	f7fa ff49 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD604, 0x00);
 800604e:	2100      	movs	r1, #0
 8006050:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8006054:	f7fa ff44 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD605, 0x3A);
 8006058:	213a      	movs	r1, #58	@ 0x3a
 800605a:	f24d 6005 	movw	r0, #54789	@ 0xd605
 800605e:	f7fa ff3f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD606, 0x00);
 8006062:	2100      	movs	r1, #0
 8006064:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8006068:	f7fa ff3a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD607, 0x4A);
 800606c:	214a      	movs	r1, #74	@ 0x4a
 800606e:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8006072:	f7fa ff35 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD608, 0x00);
 8006076:	2100      	movs	r1, #0
 8006078:	f24d 6008 	movw	r0, #54792	@ 0xd608
 800607c:	f7fa ff30 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD609, 0x5C);
 8006080:	215c      	movs	r1, #92	@ 0x5c
 8006082:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8006086:	f7fa ff2b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD60A, 0x00);
 800608a:	2100      	movs	r1, #0
 800608c:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8006090:	f7fa ff26 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD60B, 0x81);
 8006094:	2181      	movs	r1, #129	@ 0x81
 8006096:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 800609a:	f7fa ff21 	bl	8000ee0 <lcd_write_reg>

        lcd_write_reg(0xD60C, 0x00);
 800609e:	2100      	movs	r1, #0
 80060a0:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 80060a4:	f7fa ff1c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD60D, 0xA6);
 80060a8:	21a6      	movs	r1, #166	@ 0xa6
 80060aa:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 80060ae:	f7fa ff17 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD60E, 0x00);
 80060b2:	2100      	movs	r1, #0
 80060b4:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 80060b8:	f7fa ff12 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD60F, 0xE5);
 80060bc:	21e5      	movs	r1, #229	@ 0xe5
 80060be:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 80060c2:	f7fa ff0d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD610, 0x01);
 80060c6:	2101      	movs	r1, #1
 80060c8:	f24d 6010 	movw	r0, #54800	@ 0xd610
 80060cc:	f7fa ff08 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD611, 0x13);
 80060d0:	2113      	movs	r1, #19
 80060d2:	f24d 6011 	movw	r0, #54801	@ 0xd611
 80060d6:	f7fa ff03 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD612, 0x01);
 80060da:	2101      	movs	r1, #1
 80060dc:	f24d 6012 	movw	r0, #54802	@ 0xd612
 80060e0:	f7fa fefe 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD613, 0x54);
 80060e4:	2154      	movs	r1, #84	@ 0x54
 80060e6:	f24d 6013 	movw	r0, #54803	@ 0xd613
 80060ea:	f7fa fef9 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD614, 0x01);
 80060ee:	2101      	movs	r1, #1
 80060f0:	f24d 6014 	movw	r0, #54804	@ 0xd614
 80060f4:	f7fa fef4 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD615, 0x82);
 80060f8:	2182      	movs	r1, #130	@ 0x82
 80060fa:	f24d 6015 	movw	r0, #54805	@ 0xd615
 80060fe:	f7fa feef 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD616, 0x01);
 8006102:	2101      	movs	r1, #1
 8006104:	f24d 6016 	movw	r0, #54806	@ 0xd616
 8006108:	f7fa feea 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD617, 0xCA);
 800610c:	21ca      	movs	r1, #202	@ 0xca
 800610e:	f24d 6017 	movw	r0, #54807	@ 0xd617
 8006112:	f7fa fee5 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD618, 0x02);
 8006116:	2102      	movs	r1, #2
 8006118:	f24d 6018 	movw	r0, #54808	@ 0xd618
 800611c:	f7fa fee0 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD619, 0x00);
 8006120:	2100      	movs	r1, #0
 8006122:	f24d 6019 	movw	r0, #54809	@ 0xd619
 8006126:	f7fa fedb 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD61A, 0x02);
 800612a:	2102      	movs	r1, #2
 800612c:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8006130:	f7fa fed6 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD61B, 0x01);
 8006134:	2101      	movs	r1, #1
 8006136:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 800613a:	f7fa fed1 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD61C, 0x02);
 800613e:	2102      	movs	r1, #2
 8006140:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8006144:	f7fa fecc 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD61D, 0x34);
 8006148:	2134      	movs	r1, #52	@ 0x34
 800614a:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 800614e:	f7fa fec7 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD61E, 0x02);
 8006152:	2102      	movs	r1, #2
 8006154:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8006158:	f7fa fec2 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD61F, 0x67);
 800615c:	2167      	movs	r1, #103	@ 0x67
 800615e:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 8006162:	f7fa febd 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD620, 0x02);
 8006166:	2102      	movs	r1, #2
 8006168:	f24d 6020 	movw	r0, #54816	@ 0xd620
 800616c:	f7fa feb8 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD621, 0x84);
 8006170:	2184      	movs	r1, #132	@ 0x84
 8006172:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8006176:	f7fa feb3 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD622, 0x02);
 800617a:	2102      	movs	r1, #2
 800617c:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8006180:	f7fa feae 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD623, 0xA4);
 8006184:	21a4      	movs	r1, #164	@ 0xa4
 8006186:	f24d 6023 	movw	r0, #54819	@ 0xd623
 800618a:	f7fa fea9 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD624, 0x02);
 800618e:	2102      	movs	r1, #2
 8006190:	f24d 6024 	movw	r0, #54820	@ 0xd624
 8006194:	f7fa fea4 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD625, 0xB7);
 8006198:	21b7      	movs	r1, #183	@ 0xb7
 800619a:	f24d 6025 	movw	r0, #54821	@ 0xd625
 800619e:	f7fa fe9f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD626, 0x02);
 80061a2:	2102      	movs	r1, #2
 80061a4:	f24d 6026 	movw	r0, #54822	@ 0xd626
 80061a8:	f7fa fe9a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD627, 0xCF);
 80061ac:	21cf      	movs	r1, #207	@ 0xcf
 80061ae:	f24d 6027 	movw	r0, #54823	@ 0xd627
 80061b2:	f7fa fe95 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD628, 0x02);
 80061b6:	2102      	movs	r1, #2
 80061b8:	f24d 6028 	movw	r0, #54824	@ 0xd628
 80061bc:	f7fa fe90 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD629, 0xDE);
 80061c0:	21de      	movs	r1, #222	@ 0xde
 80061c2:	f24d 6029 	movw	r0, #54825	@ 0xd629
 80061c6:	f7fa fe8b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD62A, 0x02);
 80061ca:	2102      	movs	r1, #2
 80061cc:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 80061d0:	f7fa fe86 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD62B, 0xF2);
 80061d4:	21f2      	movs	r1, #242	@ 0xf2
 80061d6:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 80061da:	f7fa fe81 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD62C, 0x02);
 80061de:	2102      	movs	r1, #2
 80061e0:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 80061e4:	f7fa fe7c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD62D, 0xFE);
 80061e8:	21fe      	movs	r1, #254	@ 0xfe
 80061ea:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 80061ee:	f7fa fe77 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD62E, 0x03);
 80061f2:	2103      	movs	r1, #3
 80061f4:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 80061f8:	f7fa fe72 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD62F, 0x10);
 80061fc:	2110      	movs	r1, #16
 80061fe:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8006202:	f7fa fe6d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD630, 0x03);
 8006206:	2103      	movs	r1, #3
 8006208:	f24d 6030 	movw	r0, #54832	@ 0xd630
 800620c:	f7fa fe68 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD631, 0x33);
 8006210:	2133      	movs	r1, #51	@ 0x33
 8006212:	f24d 6031 	movw	r0, #54833	@ 0xd631
 8006216:	f7fa fe63 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD632, 0x03);
 800621a:	2103      	movs	r1, #3
 800621c:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8006220:	f7fa fe5e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xD633, 0x6D);
 8006224:	216d      	movs	r1, #109	@ 0x6d
 8006226:	f24d 6033 	movw	r0, #54835	@ 0xd633
 800622a:	f7fa fe59 	bl	8000ee0 <lcd_write_reg>
        /* LV2 Page 0 enable */
        lcd_write_reg(0xF000, 0x55);
 800622e:	2155      	movs	r1, #85	@ 0x55
 8006230:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8006234:	f7fa fe54 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xF001, 0xAA);
 8006238:	21aa      	movs	r1, #170	@ 0xaa
 800623a:	f24f 0001 	movw	r0, #61441	@ 0xf001
 800623e:	f7fa fe4f 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xF002, 0x52);
 8006242:	2152      	movs	r1, #82	@ 0x52
 8006244:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8006248:	f7fa fe4a 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xF003, 0x08);
 800624c:	2108      	movs	r1, #8
 800624e:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8006252:	f7fa fe45 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xF004, 0x00);
 8006256:	2100      	movs	r1, #0
 8006258:	f24f 0004 	movw	r0, #61444	@ 0xf004
 800625c:	f7fa fe40 	bl	8000ee0 <lcd_write_reg>
        /* Display control */
        lcd_write_reg(0xB100, 0xCC);
 8006260:	21cc      	movs	r1, #204	@ 0xcc
 8006262:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8006266:	f7fa fe3b 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB101, 0x00);
 800626a:	2100      	movs	r1, #0
 800626c:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8006270:	f7fa fe36 	bl	8000ee0 <lcd_write_reg>
        /* Source hold time */
        lcd_write_reg(0xB600, 0x05);
 8006274:	2105      	movs	r1, #5
 8006276:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 800627a:	f7fa fe31 	bl	8000ee0 <lcd_write_reg>
        /* Gate EQ control */
        lcd_write_reg(0xB700, 0x70);
 800627e:	2170      	movs	r1, #112	@ 0x70
 8006280:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8006284:	f7fa fe2c 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB701, 0x70);
 8006288:	2170      	movs	r1, #112	@ 0x70
 800628a:	f24b 7001 	movw	r0, #46849	@ 0xb701
 800628e:	f7fa fe27 	bl	8000ee0 <lcd_write_reg>
        /* Source EQ control (Mode 2) */
        lcd_write_reg(0xB800, 0x01);
 8006292:	2101      	movs	r1, #1
 8006294:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8006298:	f7fa fe22 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB801, 0x03);
 800629c:	2103      	movs	r1, #3
 800629e:	f64b 0001 	movw	r0, #47105	@ 0xb801
 80062a2:	f7fa fe1d 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB802, 0x03);
 80062a6:	2103      	movs	r1, #3
 80062a8:	f64b 0002 	movw	r0, #47106	@ 0xb802
 80062ac:	f7fa fe18 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xB803, 0x03);
 80062b0:	2103      	movs	r1, #3
 80062b2:	f64b 0003 	movw	r0, #47107	@ 0xb803
 80062b6:	f7fa fe13 	bl	8000ee0 <lcd_write_reg>
        /* Inversion mode (2-dot) */
        lcd_write_reg(0xBC00, 0x02);
 80062ba:	2102      	movs	r1, #2
 80062bc:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 80062c0:	f7fa fe0e 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xBC01, 0x00);
 80062c4:	2100      	movs	r1, #0
 80062c6:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 80062ca:	f7fa fe09 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xBC02, 0x00);
 80062ce:	2100      	movs	r1, #0
 80062d0:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 80062d4:	f7fa fe04 	bl	8000ee0 <lcd_write_reg>
        /* Timing control 4H w/ 4-delay */
        lcd_write_reg(0xC900, 0xD0);
 80062d8:	21d0      	movs	r1, #208	@ 0xd0
 80062da:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 80062de:	f7fa fdff 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xC901, 0x02);
 80062e2:	2102      	movs	r1, #2
 80062e4:	f64c 1001 	movw	r0, #51457	@ 0xc901
 80062e8:	f7fa fdfa 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xC902, 0x50);
 80062ec:	2150      	movs	r1, #80	@ 0x50
 80062ee:	f64c 1002 	movw	r0, #51458	@ 0xc902
 80062f2:	f7fa fdf5 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xC903, 0x50);
 80062f6:	2150      	movs	r1, #80	@ 0x50
 80062f8:	f64c 1003 	movw	r0, #51459	@ 0xc903
 80062fc:	f7fa fdf0 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0xC904, 0x50);
 8006300:	2150      	movs	r1, #80	@ 0x50
 8006302:	f64c 1004 	movw	r0, #51460	@ 0xc904
 8006306:	f7fa fdeb 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0x3500, 0x00);
 800630a:	2100      	movs	r1, #0
 800630c:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 8006310:	f7fa fde6 	bl	8000ee0 <lcd_write_reg>
        lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8006314:	2155      	movs	r1, #85	@ 0x55
 8006316:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 800631a:	f7fa fde1 	bl	8000ee0 <lcd_write_reg>
 800631e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8006322:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006326:	4b1b      	ldr	r3, [pc, #108]	@ (8006394 <lcd_init+0x422c>)
 8006328:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800632c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800632e:	4b19      	ldr	r3, [pc, #100]	@ (8006394 <lcd_init+0x422c>)
 8006330:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006334:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006336:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800633a:	b29a      	uxth	r2, r3
 800633c:	4b16      	ldr	r3, [pc, #88]	@ (8006398 <lcd_init+0x4230>)
 800633e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006340:	4b14      	ldr	r3, [pc, #80]	@ (8006394 <lcd_init+0x422c>)
 8006342:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006346:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006348:	4b12      	ldr	r3, [pc, #72]	@ (8006394 <lcd_init+0x422c>)
 800634a:	2280      	movs	r2, #128	@ 0x80
 800634c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800634e:	4b11      	ldr	r3, [pc, #68]	@ (8006394 <lcd_init+0x422c>)
 8006350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006354:	611a      	str	r2, [r3, #16]
}
 8006356:	bf00      	nop
 8006358:	f44f 5324 	mov.w	r3, #10496	@ 0x2900
 800635c:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006360:	4b0c      	ldr	r3, [pc, #48]	@ (8006394 <lcd_init+0x422c>)
 8006362:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006366:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006368:	4b0a      	ldr	r3, [pc, #40]	@ (8006394 <lcd_init+0x422c>)
 800636a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800636e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006370:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 8006374:	b29a      	uxth	r2, r3
 8006376:	4b08      	ldr	r3, [pc, #32]	@ (8006398 <lcd_init+0x4230>)
 8006378:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800637a:	4b06      	ldr	r3, [pc, #24]	@ (8006394 <lcd_init+0x422c>)
 800637c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006380:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006382:	4b04      	ldr	r3, [pc, #16]	@ (8006394 <lcd_init+0x422c>)
 8006384:	2280      	movs	r2, #128	@ 0x80
 8006386:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006388:	4b02      	ldr	r3, [pc, #8]	@ (8006394 <lcd_init+0x422c>)
 800638a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800638e:	611a      	str	r2, [r3, #16]
}
 8006390:	f000 be33 	b.w	8006ffa <lcd_init+0x4e92>
 8006394:	40011000 	.word	0x40011000
 8006398:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x1100);
        //delay_us(120);
        lcd_wr_regno(0x2900);
    }
    else if (lcddev.id == 0x9806)
 800639c:	4bc3      	ldr	r3, [pc, #780]	@ (80066ac <lcd_init+0x4544>)
 800639e:	889b      	ldrh	r3, [r3, #4]
 80063a0:	f649 0206 	movw	r2, #38918	@ 0x9806
 80063a4:	4293      	cmp	r3, r2
 80063a6:	f040 8407 	bne.w	8006bb8 <lcd_init+0x4a50>
 80063aa:	23ff      	movs	r3, #255	@ 0xff
 80063ac:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80063b0:	4bbf      	ldr	r3, [pc, #764]	@ (80066b0 <lcd_init+0x4548>)
 80063b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063b6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80063b8:	4bbd      	ldr	r3, [pc, #756]	@ (80066b0 <lcd_init+0x4548>)
 80063ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80063be:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80063c0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	4bbb      	ldr	r3, [pc, #748]	@ (80066b4 <lcd_init+0x454c>)
 80063c8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80063ca:	4bb9      	ldr	r3, [pc, #740]	@ (80066b0 <lcd_init+0x4548>)
 80063cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80063d0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80063d2:	4bb7      	ldr	r3, [pc, #732]	@ (80066b0 <lcd_init+0x4548>)
 80063d4:	2280      	movs	r2, #128	@ 0x80
 80063d6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80063d8:	4bb5      	ldr	r3, [pc, #724]	@ (80066b0 <lcd_init+0x4548>)
 80063da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063de:	611a      	str	r2, [r3, #16]
}
 80063e0:	bf00      	nop
    {
       // lcd_ex_ili9806_reginit();   /* ִ��ILI9806��ʼ�� */
        lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
        lcd_wr_xdata(0xFF);
 80063e2:	20ff      	movs	r0, #255	@ 0xff
 80063e4:	f7fa fd58 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x98);
 80063e8:	2098      	movs	r0, #152	@ 0x98
 80063ea:	f7fa fd55 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);
 80063ee:	2006      	movs	r0, #6
 80063f0:	f7fa fd52 	bl	8000e98 <lcd_wr_xdata>
 80063f4:	23bc      	movs	r3, #188	@ 0xbc
 80063f6:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80063fa:	4bad      	ldr	r3, [pc, #692]	@ (80066b0 <lcd_init+0x4548>)
 80063fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006400:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006402:	4bab      	ldr	r3, [pc, #684]	@ (80066b0 <lcd_init+0x4548>)
 8006404:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006408:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800640a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800640e:	b29a      	uxth	r2, r3
 8006410:	4ba8      	ldr	r3, [pc, #672]	@ (80066b4 <lcd_init+0x454c>)
 8006412:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006414:	4ba6      	ldr	r3, [pc, #664]	@ (80066b0 <lcd_init+0x4548>)
 8006416:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800641a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800641c:	4ba4      	ldr	r3, [pc, #656]	@ (80066b0 <lcd_init+0x4548>)
 800641e:	2280      	movs	r2, #128	@ 0x80
 8006420:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006422:	4ba3      	ldr	r3, [pc, #652]	@ (80066b0 <lcd_init+0x4548>)
 8006424:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006428:	611a      	str	r2, [r3, #16]
}
 800642a:	bf00      	nop

        lcd_wr_regno(0xBC); /* GIP 1 */
        lcd_wr_xdata(0x01);
 800642c:	2001      	movs	r0, #1
 800642e:	f7fa fd33 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 8006432:	200f      	movs	r0, #15
 8006434:	f7fa fd30 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x61);
 8006438:	2061      	movs	r0, #97	@ 0x61
 800643a:	f7fa fd2d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 800643e:	20ff      	movs	r0, #255	@ 0xff
 8006440:	f7fa fd2a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006444:	2001      	movs	r0, #1
 8006446:	f7fa fd27 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800644a:	2001      	movs	r0, #1
 800644c:	f7fa fd24 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8006450:	200b      	movs	r0, #11
 8006452:	f7fa fd21 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);
 8006456:	2010      	movs	r0, #16
 8006458:	f7fa fd1e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x37);
 800645c:	2037      	movs	r0, #55	@ 0x37
 800645e:	f7fa fd1b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x63);
 8006462:	2063      	movs	r0, #99	@ 0x63
 8006464:	f7fa fd18 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006468:	20ff      	movs	r0, #255	@ 0xff
 800646a:	f7fa fd15 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 800646e:	20ff      	movs	r0, #255	@ 0xff
 8006470:	f7fa fd12 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006474:	2001      	movs	r0, #1
 8006476:	f7fa fd0f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 800647a:	2001      	movs	r0, #1
 800647c:	f7fa fd0c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006480:	2000      	movs	r0, #0
 8006482:	f7fa fd09 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006486:	2000      	movs	r0, #0
 8006488:	f7fa fd06 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 800648c:	20ff      	movs	r0, #255	@ 0xff
 800648e:	f7fa fd03 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x52);
 8006492:	2052      	movs	r0, #82	@ 0x52
 8006494:	f7fa fd00 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006498:	2001      	movs	r0, #1
 800649a:	f7fa fcfd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 800649e:	2000      	movs	r0, #0
 80064a0:	f7fa fcfa 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 80064a4:	2040      	movs	r0, #64	@ 0x40
 80064a6:	f7fa fcf7 	bl	8000e98 <lcd_wr_xdata>
 80064aa:	23bd      	movs	r3, #189	@ 0xbd
 80064ac:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80064b0:	4b7f      	ldr	r3, [pc, #508]	@ (80066b0 <lcd_init+0x4548>)
 80064b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064b6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80064b8:	4b7d      	ldr	r3, [pc, #500]	@ (80066b0 <lcd_init+0x4548>)
 80064ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80064be:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80064c0:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	4b7b      	ldr	r3, [pc, #492]	@ (80066b4 <lcd_init+0x454c>)
 80064c8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80064ca:	4b79      	ldr	r3, [pc, #484]	@ (80066b0 <lcd_init+0x4548>)
 80064cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80064d0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80064d2:	4b77      	ldr	r3, [pc, #476]	@ (80066b0 <lcd_init+0x4548>)
 80064d4:	2280      	movs	r2, #128	@ 0x80
 80064d6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80064d8:	4b75      	ldr	r3, [pc, #468]	@ (80066b0 <lcd_init+0x4548>)
 80064da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064de:	611a      	str	r2, [r3, #16]
}
 80064e0:	bf00      	nop

        lcd_wr_regno(0xBD); /* GIP 2 */
        lcd_wr_xdata(0x01);
 80064e2:	2001      	movs	r0, #1
 80064e4:	f7fa fcd8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 80064e8:	2023      	movs	r0, #35	@ 0x23
 80064ea:	f7fa fcd5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 80064ee:	2045      	movs	r0, #69	@ 0x45
 80064f0:	f7fa fcd2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 80064f4:	2067      	movs	r0, #103	@ 0x67
 80064f6:	f7fa fccf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 80064fa:	2001      	movs	r0, #1
 80064fc:	f7fa fccc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x23);
 8006500:	2023      	movs	r0, #35	@ 0x23
 8006502:	f7fa fcc9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x45);
 8006506:	2045      	movs	r0, #69	@ 0x45
 8006508:	f7fa fcc6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x67);
 800650c:	2067      	movs	r0, #103	@ 0x67
 800650e:	f7fa fcc3 	bl	8000e98 <lcd_wr_xdata>
 8006512:	23be      	movs	r3, #190	@ 0xbe
 8006514:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006518:	4b65      	ldr	r3, [pc, #404]	@ (80066b0 <lcd_init+0x4548>)
 800651a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800651e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006520:	4b63      	ldr	r3, [pc, #396]	@ (80066b0 <lcd_init+0x4548>)
 8006522:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006526:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006528:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800652c:	b29a      	uxth	r2, r3
 800652e:	4b61      	ldr	r3, [pc, #388]	@ (80066b4 <lcd_init+0x454c>)
 8006530:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006532:	4b5f      	ldr	r3, [pc, #380]	@ (80066b0 <lcd_init+0x4548>)
 8006534:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006538:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800653a:	4b5d      	ldr	r3, [pc, #372]	@ (80066b0 <lcd_init+0x4548>)
 800653c:	2280      	movs	r2, #128	@ 0x80
 800653e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006540:	4b5b      	ldr	r3, [pc, #364]	@ (80066b0 <lcd_init+0x4548>)
 8006542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006546:	611a      	str	r2, [r3, #16]
}
 8006548:	bf00      	nop

        lcd_wr_regno(0xBE); /* GIP 3 */
        lcd_wr_xdata(0x00);
 800654a:	2000      	movs	r0, #0
 800654c:	f7fa fca4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006550:	2001      	movs	r0, #1
 8006552:	f7fa fca1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xAB);
 8006556:	20ab      	movs	r0, #171	@ 0xab
 8006558:	f7fa fc9e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x60);
 800655c:	2060      	movs	r0, #96	@ 0x60
 800655e:	f7fa fc9b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006562:	2022      	movs	r0, #34	@ 0x22
 8006564:	f7fa fc98 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006568:	2022      	movs	r0, #34	@ 0x22
 800656a:	f7fa fc95 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 800656e:	2022      	movs	r0, #34	@ 0x22
 8006570:	f7fa fc92 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 8006574:	2022      	movs	r0, #34	@ 0x22
 8006576:	f7fa fc8f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x22);
 800657a:	2022      	movs	r0, #34	@ 0x22
 800657c:	f7fa fc8c 	bl	8000e98 <lcd_wr_xdata>
 8006580:	23c7      	movs	r3, #199	@ 0xc7
 8006582:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006586:	4b4a      	ldr	r3, [pc, #296]	@ (80066b0 <lcd_init+0x4548>)
 8006588:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800658c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800658e:	4b48      	ldr	r3, [pc, #288]	@ (80066b0 <lcd_init+0x4548>)
 8006590:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006594:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006596:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800659a:	b29a      	uxth	r2, r3
 800659c:	4b45      	ldr	r3, [pc, #276]	@ (80066b4 <lcd_init+0x454c>)
 800659e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80065a0:	4b43      	ldr	r3, [pc, #268]	@ (80066b0 <lcd_init+0x4548>)
 80065a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80065a6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80065a8:	4b41      	ldr	r3, [pc, #260]	@ (80066b0 <lcd_init+0x4548>)
 80065aa:	2280      	movs	r2, #128	@ 0x80
 80065ac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80065ae:	4b40      	ldr	r3, [pc, #256]	@ (80066b0 <lcd_init+0x4548>)
 80065b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065b4:	611a      	str	r2, [r3, #16]
}
 80065b6:	bf00      	nop

        lcd_wr_regno(0xC7); /* VCOM Control */
        lcd_wr_xdata(0x36);
 80065b8:	2036      	movs	r0, #54	@ 0x36
 80065ba:	f7fa fc6d 	bl	8000e98 <lcd_wr_xdata>
 80065be:	23ed      	movs	r3, #237	@ 0xed
 80065c0:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80065c4:	4b3a      	ldr	r3, [pc, #232]	@ (80066b0 <lcd_init+0x4548>)
 80065c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065ca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80065cc:	4b38      	ldr	r3, [pc, #224]	@ (80066b0 <lcd_init+0x4548>)
 80065ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065d2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80065d4:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 80065d8:	b29a      	uxth	r2, r3
 80065da:	4b36      	ldr	r3, [pc, #216]	@ (80066b4 <lcd_init+0x454c>)
 80065dc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80065de:	4b34      	ldr	r3, [pc, #208]	@ (80066b0 <lcd_init+0x4548>)
 80065e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80065e4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80065e6:	4b32      	ldr	r3, [pc, #200]	@ (80066b0 <lcd_init+0x4548>)
 80065e8:	2280      	movs	r2, #128	@ 0x80
 80065ea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80065ec:	4b30      	ldr	r3, [pc, #192]	@ (80066b0 <lcd_init+0x4548>)
 80065ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065f2:	611a      	str	r2, [r3, #16]
}
 80065f4:	bf00      	nop

        lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
        lcd_wr_xdata(0x7F);
 80065f6:	207f      	movs	r0, #127	@ 0x7f
 80065f8:	f7fa fc4e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);
 80065fc:	200f      	movs	r0, #15
 80065fe:	f7fa fc4b 	bl	8000e98 <lcd_wr_xdata>
 8006602:	23c0      	movs	r3, #192	@ 0xc0
 8006604:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006608:	4b29      	ldr	r3, [pc, #164]	@ (80066b0 <lcd_init+0x4548>)
 800660a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800660e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006610:	4b27      	ldr	r3, [pc, #156]	@ (80066b0 <lcd_init+0x4548>)
 8006612:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006616:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006618:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 800661c:	b29a      	uxth	r2, r3
 800661e:	4b25      	ldr	r3, [pc, #148]	@ (80066b4 <lcd_init+0x454c>)
 8006620:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006622:	4b23      	ldr	r3, [pc, #140]	@ (80066b0 <lcd_init+0x4548>)
 8006624:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006628:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800662a:	4b21      	ldr	r3, [pc, #132]	@ (80066b0 <lcd_init+0x4548>)
 800662c:	2280      	movs	r2, #128	@ 0x80
 800662e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006630:	4b1f      	ldr	r3, [pc, #124]	@ (80066b0 <lcd_init+0x4548>)
 8006632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006636:	611a      	str	r2, [r3, #16]
}
 8006638:	bf00      	nop

        lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
        lcd_wr_xdata(0x0F);
 800663a:	200f      	movs	r0, #15
 800663c:	f7fa fc2c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);
 8006640:	200b      	movs	r0, #11
 8006642:	f7fa fc29 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* VGH 15V,VGLO-10V */
 8006646:	200a      	movs	r0, #10
 8006648:	f7fa fc26 	bl	8000e98 <lcd_wr_xdata>
 800664c:	23fc      	movs	r3, #252	@ 0xfc
 800664e:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006652:	4b17      	ldr	r3, [pc, #92]	@ (80066b0 <lcd_init+0x4548>)
 8006654:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006658:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800665a:	4b15      	ldr	r3, [pc, #84]	@ (80066b0 <lcd_init+0x4548>)
 800665c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006660:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006662:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8006666:	b29a      	uxth	r2, r3
 8006668:	4b12      	ldr	r3, [pc, #72]	@ (80066b4 <lcd_init+0x454c>)
 800666a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800666c:	4b10      	ldr	r3, [pc, #64]	@ (80066b0 <lcd_init+0x4548>)
 800666e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006672:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006674:	4b0e      	ldr	r3, [pc, #56]	@ (80066b0 <lcd_init+0x4548>)
 8006676:	2280      	movs	r2, #128	@ 0x80
 8006678:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800667a:	4b0d      	ldr	r3, [pc, #52]	@ (80066b0 <lcd_init+0x4548>)
 800667c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006680:	611a      	str	r2, [r3, #16]
}
 8006682:	bf00      	nop

        lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
        lcd_wr_xdata(0x08);
 8006684:	2008      	movs	r0, #8
 8006686:	f7fa fc07 	bl	8000e98 <lcd_wr_xdata>
 800668a:	23df      	movs	r3, #223	@ 0xdf
 800668c:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006690:	4b07      	ldr	r3, [pc, #28]	@ (80066b0 <lcd_init+0x4548>)
 8006692:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006696:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006698:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <lcd_init+0x4548>)
 800669a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800669e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80066a0:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	4b03      	ldr	r3, [pc, #12]	@ (80066b4 <lcd_init+0x454c>)
 80066a8:	60da      	str	r2, [r3, #12]
 80066aa:	e005      	b.n	80066b8 <lcd_init+0x4550>
 80066ac:	200000b0 	.word	0x200000b0
 80066b0:	40011000 	.word	0x40011000
 80066b4:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 80066b8:	4bc7      	ldr	r3, [pc, #796]	@ (80069d8 <lcd_init+0x4870>)
 80066ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80066be:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80066c0:	4bc5      	ldr	r3, [pc, #788]	@ (80069d8 <lcd_init+0x4870>)
 80066c2:	2280      	movs	r2, #128	@ 0x80
 80066c4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80066c6:	4bc4      	ldr	r3, [pc, #784]	@ (80069d8 <lcd_init+0x4870>)
 80066c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066cc:	611a      	str	r2, [r3, #16]
}
 80066ce:	bf00      	nop

        lcd_wr_regno(0XDF);
        lcd_wr_xdata(0x00);
 80066d0:	2000      	movs	r0, #0
 80066d2:	f7fa fbe1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80066d6:	2000      	movs	r0, #0
 80066d8:	f7fa fbde 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80066dc:	2000      	movs	r0, #0
 80066de:	f7fa fbdb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80066e2:	2000      	movs	r0, #0
 80066e4:	f7fa fbd8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 80066e8:	2000      	movs	r0, #0
 80066ea:	f7fa fbd5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 80066ee:	2020      	movs	r0, #32
 80066f0:	f7fa fbd2 	bl	8000e98 <lcd_wr_xdata>
 80066f4:	23f3      	movs	r3, #243	@ 0xf3
 80066f6:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80066fa:	4bb7      	ldr	r3, [pc, #732]	@ (80069d8 <lcd_init+0x4870>)
 80066fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006700:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006702:	4bb5      	ldr	r3, [pc, #724]	@ (80069d8 <lcd_init+0x4870>)
 8006704:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006708:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800670a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800670e:	b29a      	uxth	r2, r3
 8006710:	4bb2      	ldr	r3, [pc, #712]	@ (80069dc <lcd_init+0x4874>)
 8006712:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006714:	4bb0      	ldr	r3, [pc, #704]	@ (80069d8 <lcd_init+0x4870>)
 8006716:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800671a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800671c:	4bae      	ldr	r3, [pc, #696]	@ (80069d8 <lcd_init+0x4870>)
 800671e:	2280      	movs	r2, #128	@ 0x80
 8006720:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006722:	4bad      	ldr	r3, [pc, #692]	@ (80069d8 <lcd_init+0x4870>)
 8006724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006728:	611a      	str	r2, [r3, #16]
}
 800672a:	bf00      	nop

        lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
        lcd_wr_xdata(0x74);
 800672c:	2074      	movs	r0, #116	@ 0x74
 800672e:	f7fa fbb3 	bl	8000e98 <lcd_wr_xdata>
 8006732:	23b4      	movs	r3, #180	@ 0xb4
 8006734:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006738:	4ba7      	ldr	r3, [pc, #668]	@ (80069d8 <lcd_init+0x4870>)
 800673a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800673e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006740:	4ba5      	ldr	r3, [pc, #660]	@ (80069d8 <lcd_init+0x4870>)
 8006742:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006746:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006748:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 800674c:	b29a      	uxth	r2, r3
 800674e:	4ba3      	ldr	r3, [pc, #652]	@ (80069dc <lcd_init+0x4874>)
 8006750:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006752:	4ba1      	ldr	r3, [pc, #644]	@ (80069d8 <lcd_init+0x4870>)
 8006754:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006758:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800675a:	4b9f      	ldr	r3, [pc, #636]	@ (80069d8 <lcd_init+0x4870>)
 800675c:	2280      	movs	r2, #128	@ 0x80
 800675e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006760:	4b9d      	ldr	r3, [pc, #628]	@ (80069d8 <lcd_init+0x4870>)
 8006762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006766:	611a      	str	r2, [r3, #16]
}
 8006768:	bf00      	nop

        lcd_wr_regno(0xB4); /* Inversion Type */
        lcd_wr_xdata(0x00);  /* 02 */
 800676a:	2000      	movs	r0, #0
 800676c:	f7fa fb94 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006770:	2000      	movs	r0, #0
 8006772:	f7fa fb91 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* 02 */
 8006776:	2000      	movs	r0, #0
 8006778:	f7fa fb8e 	bl	8000e98 <lcd_wr_xdata>
 800677c:	23f7      	movs	r3, #247	@ 0xf7
 800677e:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006782:	4b95      	ldr	r3, [pc, #596]	@ (80069d8 <lcd_init+0x4870>)
 8006784:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006788:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800678a:	4b93      	ldr	r3, [pc, #588]	@ (80069d8 <lcd_init+0x4870>)
 800678c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006790:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006792:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 8006796:	b29a      	uxth	r2, r3
 8006798:	4b90      	ldr	r3, [pc, #576]	@ (80069dc <lcd_init+0x4874>)
 800679a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800679c:	4b8e      	ldr	r3, [pc, #568]	@ (80069d8 <lcd_init+0x4870>)
 800679e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80067a2:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80067a4:	4b8c      	ldr	r3, [pc, #560]	@ (80069d8 <lcd_init+0x4870>)
 80067a6:	2280      	movs	r2, #128	@ 0x80
 80067a8:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067aa:	4b8b      	ldr	r3, [pc, #556]	@ (80069d8 <lcd_init+0x4870>)
 80067ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067b0:	611a      	str	r2, [r3, #16]
}
 80067b2:	bf00      	nop

        lcd_wr_regno(0xF7); /* Resolution Control */
        lcd_wr_xdata(0x82);  /* 480*800 */
 80067b4:	2082      	movs	r0, #130	@ 0x82
 80067b6:	f7fa fb6f 	bl	8000e98 <lcd_wr_xdata>
 80067ba:	23b1      	movs	r3, #177	@ 0xb1
 80067bc:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80067c0:	4b85      	ldr	r3, [pc, #532]	@ (80069d8 <lcd_init+0x4870>)
 80067c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067c6:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80067c8:	4b83      	ldr	r3, [pc, #524]	@ (80069d8 <lcd_init+0x4870>)
 80067ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067ce:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80067d0:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	4b81      	ldr	r3, [pc, #516]	@ (80069dc <lcd_init+0x4874>)
 80067d8:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80067da:	4b7f      	ldr	r3, [pc, #508]	@ (80069d8 <lcd_init+0x4870>)
 80067dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80067e0:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80067e2:	4b7d      	ldr	r3, [pc, #500]	@ (80069d8 <lcd_init+0x4870>)
 80067e4:	2280      	movs	r2, #128	@ 0x80
 80067e6:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80067e8:	4b7b      	ldr	r3, [pc, #492]	@ (80069d8 <lcd_init+0x4870>)
 80067ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067ee:	611a      	str	r2, [r3, #16]
}
 80067f0:	bf00      	nop

        lcd_wr_regno(0xB1); /* FRAME RATE Setting */
        lcd_wr_xdata(0x00);
 80067f2:	2000      	movs	r0, #0
 80067f4:	f7fa fb50 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 80067f8:	2013      	movs	r0, #19
 80067fa:	f7fa fb4d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);
 80067fe:	2013      	movs	r0, #19
 8006800:	f7fa fb4a 	bl	8000e98 <lcd_wr_xdata>
 8006804:	23f2      	movs	r3, #242	@ 0xf2
 8006806:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800680a:	4b73      	ldr	r3, [pc, #460]	@ (80069d8 <lcd_init+0x4870>)
 800680c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006810:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006812:	4b71      	ldr	r3, [pc, #452]	@ (80069d8 <lcd_init+0x4870>)
 8006814:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006818:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800681a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 800681e:	b29a      	uxth	r2, r3
 8006820:	4b6e      	ldr	r3, [pc, #440]	@ (80069dc <lcd_init+0x4874>)
 8006822:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006824:	4b6c      	ldr	r3, [pc, #432]	@ (80069d8 <lcd_init+0x4870>)
 8006826:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800682a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800682c:	4b6a      	ldr	r3, [pc, #424]	@ (80069d8 <lcd_init+0x4870>)
 800682e:	2280      	movs	r2, #128	@ 0x80
 8006830:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006832:	4b69      	ldr	r3, [pc, #420]	@ (80069d8 <lcd_init+0x4870>)
 8006834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006838:	611a      	str	r2, [r3, #16]
}
 800683a:	bf00      	nop

        lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
        lcd_wr_xdata(0x80);
 800683c:	2080      	movs	r0, #128	@ 0x80
 800683e:	f7fa fb2b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x04);
 8006842:	2004      	movs	r0, #4
 8006844:	f7fa fb28 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x40);
 8006848:	2040      	movs	r0, #64	@ 0x40
 800684a:	f7fa fb25 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x28);
 800684e:	2028      	movs	r0, #40	@ 0x28
 8006850:	f7fa fb22 	bl	8000e98 <lcd_wr_xdata>
 8006854:	23c1      	movs	r3, #193	@ 0xc1
 8006856:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 800685a:	4b5f      	ldr	r3, [pc, #380]	@ (80069d8 <lcd_init+0x4870>)
 800685c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006860:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006862:	4b5d      	ldr	r3, [pc, #372]	@ (80069d8 <lcd_init+0x4870>)
 8006864:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006868:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 800686a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 800686e:	b29a      	uxth	r2, r3
 8006870:	4b5a      	ldr	r3, [pc, #360]	@ (80069dc <lcd_init+0x4874>)
 8006872:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006874:	4b58      	ldr	r3, [pc, #352]	@ (80069d8 <lcd_init+0x4870>)
 8006876:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800687a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 800687c:	4b56      	ldr	r3, [pc, #344]	@ (80069d8 <lcd_init+0x4870>)
 800687e:	2280      	movs	r2, #128	@ 0x80
 8006880:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006882:	4b55      	ldr	r3, [pc, #340]	@ (80069d8 <lcd_init+0x4870>)
 8006884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006888:	611a      	str	r2, [r3, #16]
}
 800688a:	bf00      	nop

        lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
        lcd_wr_xdata(0x17);
 800688c:	2017      	movs	r0, #23
 800688e:	f7fa fb03 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMP */
 8006892:	2088      	movs	r0, #136	@ 0x88
 8006894:	f7fa fb00 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x88);  /* VGMN */
 8006898:	2088      	movs	r0, #136	@ 0x88
 800689a:	f7fa fafd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);
 800689e:	2020      	movs	r0, #32
 80068a0:	f7fa fafa 	bl	8000e98 <lcd_wr_xdata>
 80068a4:	23e0      	movs	r3, #224	@ 0xe0
 80068a6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80068aa:	4b4b      	ldr	r3, [pc, #300]	@ (80069d8 <lcd_init+0x4870>)
 80068ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068b0:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80068b2:	4b49      	ldr	r3, [pc, #292]	@ (80069d8 <lcd_init+0x4870>)
 80068b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068b8:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80068ba:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 80068be:	b29a      	uxth	r2, r3
 80068c0:	4b46      	ldr	r3, [pc, #280]	@ (80069dc <lcd_init+0x4874>)
 80068c2:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 80068c4:	4b44      	ldr	r3, [pc, #272]	@ (80069d8 <lcd_init+0x4870>)
 80068c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068ca:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 80068cc:	4b42      	ldr	r3, [pc, #264]	@ (80069d8 <lcd_init+0x4870>)
 80068ce:	2280      	movs	r2, #128	@ 0x80
 80068d0:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 80068d2:	4b41      	ldr	r3, [pc, #260]	@ (80069d8 <lcd_init+0x4870>)
 80068d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068d8:	611a      	str	r2, [r3, #16]
}
 80068da:	bf00      	nop

        lcd_wr_regno(0xE0); /* Positive Gamma Control */
        lcd_wr_xdata(0x00);  /* P1 */
 80068dc:	2000      	movs	r0, #0
 80068de:	f7fa fadb 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P2 */
 80068e2:	200a      	movs	r0, #10
 80068e4:	f7fa fad8 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x12);  /* P3 */
 80068e8:	2012      	movs	r0, #18
 80068ea:	f7fa fad5 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P4 */
 80068ee:	2010      	movs	r0, #16
 80068f0:	f7fa fad2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 80068f4:	200e      	movs	r0, #14
 80068f6:	f7fa facf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x20);  /* P6 */
 80068fa:	2020      	movs	r0, #32
 80068fc:	f7fa facc 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xCC);  /* P7 */
 8006900:	20cc      	movs	r0, #204	@ 0xcc
 8006902:	f7fa fac9 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x07);  /* P8 */
 8006906:	2007      	movs	r0, #7
 8006908:	f7fa fac6 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 800690c:	2006      	movs	r0, #6
 800690e:	f7fa fac3 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P10 */
 8006912:	200b      	movs	r0, #11
 8006914:	f7fa fac0 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P11 */
 8006918:	200e      	movs	r0, #14
 800691a:	f7fa fabd 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P12 */
 800691e:	200f      	movs	r0, #15
 8006920:	f7fa faba 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P13 */
 8006924:	200d      	movs	r0, #13
 8006926:	f7fa fab7 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 800692a:	2015      	movs	r0, #21
 800692c:	f7fa fab4 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x10);  /* P15 */
 8006930:	2010      	movs	r0, #16
 8006932:	f7fa fab1 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 8006936:	2000      	movs	r0, #0
 8006938:	f7fa faae 	bl	8000e98 <lcd_wr_xdata>
 800693c:	23e1      	movs	r3, #225	@ 0xe1
 800693e:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006942:	4b25      	ldr	r3, [pc, #148]	@ (80069d8 <lcd_init+0x4870>)
 8006944:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006948:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800694a:	4b23      	ldr	r3, [pc, #140]	@ (80069d8 <lcd_init+0x4870>)
 800694c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006950:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006952:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8006956:	b29a      	uxth	r2, r3
 8006958:	4b20      	ldr	r3, [pc, #128]	@ (80069dc <lcd_init+0x4874>)
 800695a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800695c:	4b1e      	ldr	r3, [pc, #120]	@ (80069d8 <lcd_init+0x4870>)
 800695e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006962:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006964:	4b1c      	ldr	r3, [pc, #112]	@ (80069d8 <lcd_init+0x4870>)
 8006966:	2280      	movs	r2, #128	@ 0x80
 8006968:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800696a:	4b1b      	ldr	r3, [pc, #108]	@ (80069d8 <lcd_init+0x4870>)
 800696c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006970:	611a      	str	r2, [r3, #16]
}
 8006972:	bf00      	nop

        lcd_wr_regno(0xE1); /* Negative Gamma Correction */
        lcd_wr_xdata(0x00);  /* P1 */
 8006974:	2000      	movs	r0, #0
 8006976:	f7fa fa8f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0B);  /* P2 */
 800697a:	200b      	movs	r0, #11
 800697c:	f7fa fa8c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x13);  /* P3 */
 8006980:	2013      	movs	r0, #19
 8006982:	f7fa fa89 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0D);  /* P4 */
 8006986:	200d      	movs	r0, #13
 8006988:	f7fa fa86 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P5 */
 800698c:	200e      	movs	r0, #14
 800698e:	f7fa fa83 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x1B);  /* P6 */
 8006992:	201b      	movs	r0, #27
 8006994:	f7fa fa80 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x71);  /* P7 */
 8006998:	2071      	movs	r0, #113	@ 0x71
 800699a:	f7fa fa7d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P8 */
 800699e:	2006      	movs	r0, #6
 80069a0:	f7fa fa7a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x06);  /* P9 */
 80069a4:	2006      	movs	r0, #6
 80069a6:	f7fa fa77 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0A);  /* P10 */
 80069aa:	200a      	movs	r0, #10
 80069ac:	f7fa fa74 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P11 */
 80069b0:	200f      	movs	r0, #15
 80069b2:	f7fa fa71 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0E);  /* P12 */
 80069b6:	200e      	movs	r0, #14
 80069b8:	f7fa fa6e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0F);  /* P13 */
 80069bc:	200f      	movs	r0, #15
 80069be:	f7fa fa6b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x15);  /* P14 */
 80069c2:	2015      	movs	r0, #21
 80069c4:	f7fa fa68 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x0C);  /* P15 */
 80069c8:	200c      	movs	r0, #12
 80069ca:	f7fa fa65 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* P16 */
 80069ce:	2000      	movs	r0, #0
 80069d0:	f7fa fa62 	bl	8000e98 <lcd_wr_xdata>
 80069d4:	e004      	b.n	80069e0 <lcd_init+0x4878>
 80069d6:	bf00      	nop
 80069d8:	40011000 	.word	0x40011000
 80069dc:	40010c00 	.word	0x40010c00
 80069e0:	232a      	movs	r3, #42	@ 0x2a
 80069e2:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 80069e6:	4b72      	ldr	r3, [pc, #456]	@ (8006bb0 <lcd_init+0x4a48>)
 80069e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069ec:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 80069ee:	4b70      	ldr	r3, [pc, #448]	@ (8006bb0 <lcd_init+0x4a48>)
 80069f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069f4:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 80069f6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	4b6d      	ldr	r3, [pc, #436]	@ (8006bb4 <lcd_init+0x4a4c>)
 80069fe:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a00:	4b6b      	ldr	r3, [pc, #428]	@ (8006bb0 <lcd_init+0x4a48>)
 8006a02:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a06:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a08:	4b69      	ldr	r3, [pc, #420]	@ (8006bb0 <lcd_init+0x4a48>)
 8006a0a:	2280      	movs	r2, #128	@ 0x80
 8006a0c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a0e:	4b68      	ldr	r3, [pc, #416]	@ (8006bb0 <lcd_init+0x4a48>)
 8006a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a14:	611a      	str	r2, [r3, #16]
}
 8006a16:	bf00      	nop

        lcd_wr_regno(0x2a);
        lcd_wr_xdata(0x00);
 8006a18:	2000      	movs	r0, #0
 8006a1a:	f7fa fa3d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006a1e:	2000      	movs	r0, #0
 8006a20:	f7fa fa3a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01);
 8006a24:	2001      	movs	r0, #1
 8006a26:	f7fa fa37 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xdf);
 8006a2a:	20df      	movs	r0, #223	@ 0xdf
 8006a2c:	f7fa fa34 	bl	8000e98 <lcd_wr_xdata>
 8006a30:	232b      	movs	r3, #43	@ 0x2b
 8006a32:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a36:	4b5e      	ldr	r3, [pc, #376]	@ (8006bb0 <lcd_init+0x4a48>)
 8006a38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a3c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8006bb0 <lcd_init+0x4a48>)
 8006a40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a44:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a46:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	4b59      	ldr	r3, [pc, #356]	@ (8006bb4 <lcd_init+0x4a4c>)
 8006a4e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006a50:	4b57      	ldr	r3, [pc, #348]	@ (8006bb0 <lcd_init+0x4a48>)
 8006a52:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006a56:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006a58:	4b55      	ldr	r3, [pc, #340]	@ (8006bb0 <lcd_init+0x4a48>)
 8006a5a:	2280      	movs	r2, #128	@ 0x80
 8006a5c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006a5e:	4b54      	ldr	r3, [pc, #336]	@ (8006bb0 <lcd_init+0x4a48>)
 8006a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a64:	611a      	str	r2, [r3, #16]
}
 8006a66:	bf00      	nop

        lcd_wr_regno(0x2b);
        lcd_wr_xdata(0x00);
 8006a68:	2000      	movs	r0, #0
 8006a6a:	f7fa fa15 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006a6e:	2000      	movs	r0, #0
 8006a70:	f7fa fa12 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x03);
 8006a74:	2003      	movs	r0, #3
 8006a76:	f7fa fa0f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x1f);
 8006a7a:	201f      	movs	r0, #31
 8006a7c:	f7fa fa0c 	bl	8000e98 <lcd_wr_xdata>
 8006a80:	233a      	movs	r3, #58	@ 0x3a
 8006a82:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006a86:	4b4a      	ldr	r3, [pc, #296]	@ (8006bb0 <lcd_init+0x4a48>)
 8006a88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a8c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006a8e:	4b48      	ldr	r3, [pc, #288]	@ (8006bb0 <lcd_init+0x4a48>)
 8006a90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a94:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006a96:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	4b45      	ldr	r3, [pc, #276]	@ (8006bb4 <lcd_init+0x4a4c>)
 8006a9e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006aa0:	4b43      	ldr	r3, [pc, #268]	@ (8006bb0 <lcd_init+0x4a48>)
 8006aa2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006aa6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006aa8:	4b41      	ldr	r3, [pc, #260]	@ (8006bb0 <lcd_init+0x4a48>)
 8006aaa:	2280      	movs	r2, #128	@ 0x80
 8006aac:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006aae:	4b40      	ldr	r3, [pc, #256]	@ (8006bb0 <lcd_init+0x4a48>)
 8006ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ab4:	611a      	str	r2, [r3, #16]
}
 8006ab6:	bf00      	nop

        lcd_wr_regno(0x3A); /* Pixel Format */
        lcd_wr_xdata(0x55);
 8006ab8:	2055      	movs	r0, #85	@ 0x55
 8006aba:	f7fa f9ed 	bl	8000e98 <lcd_wr_xdata>
 8006abe:	2336      	movs	r3, #54	@ 0x36
 8006ac0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006ac4:	4b3a      	ldr	r3, [pc, #232]	@ (8006bb0 <lcd_init+0x4a48>)
 8006ac6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006aca:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006acc:	4b38      	ldr	r3, [pc, #224]	@ (8006bb0 <lcd_init+0x4a48>)
 8006ace:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ad2:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006ad4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	4b36      	ldr	r3, [pc, #216]	@ (8006bb4 <lcd_init+0x4a4c>)
 8006adc:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006ade:	4b34      	ldr	r3, [pc, #208]	@ (8006bb0 <lcd_init+0x4a48>)
 8006ae0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006ae4:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006ae6:	4b32      	ldr	r3, [pc, #200]	@ (8006bb0 <lcd_init+0x4a48>)
 8006ae8:	2280      	movs	r2, #128	@ 0x80
 8006aea:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006aec:	4b30      	ldr	r3, [pc, #192]	@ (8006bb0 <lcd_init+0x4a48>)
 8006aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006af2:	611a      	str	r2, [r3, #16]
}
 8006af4:	bf00      	nop

        lcd_wr_regno(0x36); /* Memory Access Control */
        lcd_wr_xdata(0x00);  /* 02-180 */
 8006af6:	2000      	movs	r0, #0
 8006af8:	f7fa f9ce 	bl	8000e98 <lcd_wr_xdata>
 8006afc:	2311      	movs	r3, #17
 8006afe:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006b02:	4b2b      	ldr	r3, [pc, #172]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b08:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b0a:	4b29      	ldr	r3, [pc, #164]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b10:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b12:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	4b26      	ldr	r3, [pc, #152]	@ (8006bb4 <lcd_init+0x4a4c>)
 8006b1a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006b1c:	4b24      	ldr	r3, [pc, #144]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b1e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b22:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006b24:	4b22      	ldr	r3, [pc, #136]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b26:	2280      	movs	r2, #128	@ 0x80
 8006b28:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006b2a:	4b21      	ldr	r3, [pc, #132]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b30:	611a      	str	r2, [r3, #16]
}
 8006b32:	bf00      	nop

        lcd_wr_regno(0x11);
        HAL_Delay(120);
 8006b34:	2078      	movs	r0, #120	@ 0x78
 8006b36:	f001 fee9 	bl	800890c <HAL_Delay>
 8006b3a:	2329      	movs	r3, #41	@ 0x29
 8006b3c:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006b40:	4b1b      	ldr	r3, [pc, #108]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b42:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b46:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b48:	4b19      	ldr	r3, [pc, #100]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b4e:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b50:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	4b17      	ldr	r3, [pc, #92]	@ (8006bb4 <lcd_init+0x4a4c>)
 8006b58:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006b5a:	4b15      	ldr	r3, [pc, #84]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b60:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006b62:	4b13      	ldr	r3, [pc, #76]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b64:	2280      	movs	r2, #128	@ 0x80
 8006b66:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006b68:	4b11      	ldr	r3, [pc, #68]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b6e:	611a      	str	r2, [r3, #16]
}
 8006b70:	bf00      	nop
        lcd_wr_regno(0x29);
        HAL_Delay(20);
 8006b72:	2014      	movs	r0, #20
 8006b74:	f001 feca 	bl	800890c <HAL_Delay>
 8006b78:	232c      	movs	r3, #44	@ 0x2c
 8006b7a:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b84:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006b86:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b8c:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006b8e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	4b07      	ldr	r3, [pc, #28]	@ (8006bb4 <lcd_init+0x4a4c>)
 8006b96:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006b98:	4b05      	ldr	r3, [pc, #20]	@ (8006bb0 <lcd_init+0x4a48>)
 8006b9a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006b9e:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006ba0:	4b03      	ldr	r3, [pc, #12]	@ (8006bb0 <lcd_init+0x4a48>)
 8006ba2:	2280      	movs	r2, #128	@ 0x80
 8006ba4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006ba6:	4b02      	ldr	r3, [pc, #8]	@ (8006bb0 <lcd_init+0x4a48>)
 8006ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bac:	611a      	str	r2, [r3, #16]
}
 8006bae:	e224      	b.n	8006ffa <lcd_init+0x4e92>
 8006bb0:	40011000 	.word	0x40011000
 8006bb4:	40010c00 	.word	0x40010c00
        lcd_wr_regno(0x2C);
    }
    else if (lcddev.id == 0x1963)
 8006bb8:	4bbe      	ldr	r3, [pc, #760]	@ (8006eb4 <lcd_init+0x4d4c>)
 8006bba:	889b      	ldrh	r3, [r3, #4]
 8006bbc:	f641 1263 	movw	r2, #6499	@ 0x1963
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	f040 821a 	bne.w	8006ffa <lcd_init+0x4e92>
 8006bc6:	23e2      	movs	r3, #226	@ 0xe2
 8006bc8:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006bcc:	4bba      	ldr	r3, [pc, #744]	@ (8006eb8 <lcd_init+0x4d50>)
 8006bce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006bd2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006bd4:	4bb8      	ldr	r3, [pc, #736]	@ (8006eb8 <lcd_init+0x4d50>)
 8006bd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bda:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006bdc:	f8b7 3152 	ldrh.w	r3, [r7, #338]	@ 0x152
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	4bb6      	ldr	r3, [pc, #728]	@ (8006ebc <lcd_init+0x4d54>)
 8006be4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006be6:	4bb4      	ldr	r3, [pc, #720]	@ (8006eb8 <lcd_init+0x4d50>)
 8006be8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006bec:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006bee:	4bb2      	ldr	r3, [pc, #712]	@ (8006eb8 <lcd_init+0x4d50>)
 8006bf0:	2280      	movs	r2, #128	@ 0x80
 8006bf2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006bf4:	4bb0      	ldr	r3, [pc, #704]	@ (8006eb8 <lcd_init+0x4d50>)
 8006bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bfa:	611a      	str	r2, [r3, #16]
}
 8006bfc:	bf00      	nop
    {
        //lcd_ex_ssd1963_reginit();   /* ִ��SSD1963��ʼ�� */
        lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
        lcd_wr_xdata(0x1D); /* ����1 */
 8006bfe:	201d      	movs	r0, #29
 8006c00:	f7fa f94a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x02); /* ����2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 8006c04:	2002      	movs	r0, #2
 8006c06:	f7fa f947 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x04); /* ����3 Validate M and N values */
 8006c0a:	2004      	movs	r0, #4
 8006c0c:	f7fa f944 	bl	8000e98 <lcd_wr_xdata>
 8006c10:	23e0      	movs	r3, #224	@ 0xe0
 8006c12:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006c16:	4ba8      	ldr	r3, [pc, #672]	@ (8006eb8 <lcd_init+0x4d50>)
 8006c18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c1c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006c1e:	4ba6      	ldr	r3, [pc, #664]	@ (8006eb8 <lcd_init+0x4d50>)
 8006c20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c24:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006c26:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	4ba3      	ldr	r3, [pc, #652]	@ (8006ebc <lcd_init+0x4d54>)
 8006c2e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006c30:	4ba1      	ldr	r3, [pc, #644]	@ (8006eb8 <lcd_init+0x4d50>)
 8006c32:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c36:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006c38:	4b9f      	ldr	r3, [pc, #636]	@ (8006eb8 <lcd_init+0x4d50>)
 8006c3a:	2280      	movs	r2, #128	@ 0x80
 8006c3c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006c3e:	4b9e      	ldr	r3, [pc, #632]	@ (8006eb8 <lcd_init+0x4d50>)
 8006c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c44:	611a      	str	r2, [r3, #16]
}
 8006c46:	bf00      	nop
        //delay_us(100);
        lcd_wr_regno(0xE0); /*  Start PLL command */
        lcd_wr_xdata(0x01); /*  enable PLL */
 8006c48:	2001      	movs	r0, #1
 8006c4a:	f7fa f925 	bl	8000e98 <lcd_wr_xdata>
        HAL_Delay(10);
 8006c4e:	200a      	movs	r0, #10
 8006c50:	f001 fe5c 	bl	800890c <HAL_Delay>
 8006c54:	23e0      	movs	r3, #224	@ 0xe0
 8006c56:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006c5a:	4b97      	ldr	r3, [pc, #604]	@ (8006eb8 <lcd_init+0x4d50>)
 8006c5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c60:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006c62:	4b95      	ldr	r3, [pc, #596]	@ (8006eb8 <lcd_init+0x4d50>)
 8006c64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006c68:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006c6a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	4b92      	ldr	r3, [pc, #584]	@ (8006ebc <lcd_init+0x4d54>)
 8006c72:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006c74:	4b90      	ldr	r3, [pc, #576]	@ (8006eb8 <lcd_init+0x4d50>)
 8006c76:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006c7a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006c7c:	4b8e      	ldr	r3, [pc, #568]	@ (8006eb8 <lcd_init+0x4d50>)
 8006c7e:	2280      	movs	r2, #128	@ 0x80
 8006c80:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006c82:	4b8d      	ldr	r3, [pc, #564]	@ (8006eb8 <lcd_init+0x4d50>)
 8006c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c88:	611a      	str	r2, [r3, #16]
}
 8006c8a:	bf00      	nop
        lcd_wr_regno(0xE0); /*  Start PLL command again */
        lcd_wr_xdata(0x03); /*  now, use PLL output as system clock */
 8006c8c:	2003      	movs	r0, #3
 8006c8e:	f7fa f903 	bl	8000e98 <lcd_wr_xdata>
        HAL_Delay(12);
 8006c92:	200c      	movs	r0, #12
 8006c94:	f001 fe3a 	bl	800890c <HAL_Delay>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006c9e:	4b86      	ldr	r3, [pc, #536]	@ (8006eb8 <lcd_init+0x4d50>)
 8006ca0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ca4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ca6:	4b84      	ldr	r3, [pc, #528]	@ (8006eb8 <lcd_init+0x4d50>)
 8006ca8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006cac:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006cae:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	4b81      	ldr	r3, [pc, #516]	@ (8006ebc <lcd_init+0x4d54>)
 8006cb6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006cb8:	4b7f      	ldr	r3, [pc, #508]	@ (8006eb8 <lcd_init+0x4d50>)
 8006cba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006cbe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006cc0:	4b7d      	ldr	r3, [pc, #500]	@ (8006eb8 <lcd_init+0x4d50>)
 8006cc2:	2280      	movs	r2, #128	@ 0x80
 8006cc4:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006cc6:	4b7c      	ldr	r3, [pc, #496]	@ (8006eb8 <lcd_init+0x4d50>)
 8006cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ccc:	611a      	str	r2, [r3, #16]
}
 8006cce:	bf00      	nop
        lcd_wr_regno(0x01); /* ��λ */
        HAL_Delay(10);
 8006cd0:	200a      	movs	r0, #10
 8006cd2:	f001 fe1b 	bl	800890c <HAL_Delay>
 8006cd6:	23e6      	movs	r3, #230	@ 0xe6
 8006cd8:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006cdc:	4b76      	ldr	r3, [pc, #472]	@ (8006eb8 <lcd_init+0x4d50>)
 8006cde:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ce2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ce4:	4b74      	ldr	r3, [pc, #464]	@ (8006eb8 <lcd_init+0x4d50>)
 8006ce6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006cea:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006cec:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	4b72      	ldr	r3, [pc, #456]	@ (8006ebc <lcd_init+0x4d54>)
 8006cf4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006cf6:	4b70      	ldr	r3, [pc, #448]	@ (8006eb8 <lcd_init+0x4d50>)
 8006cf8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006cfc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006cfe:	4b6e      	ldr	r3, [pc, #440]	@ (8006eb8 <lcd_init+0x4d50>)
 8006d00:	2280      	movs	r2, #128	@ 0x80
 8006d02:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006d04:	4b6c      	ldr	r3, [pc, #432]	@ (8006eb8 <lcd_init+0x4d50>)
 8006d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d0a:	611a      	str	r2, [r3, #16]
}
 8006d0c:	bf00      	nop

        lcd_wr_regno(0xE6); /* ��������Ƶ��,33Mhz */
        lcd_wr_xdata(0x2F);
 8006d0e:	202f      	movs	r0, #47	@ 0x2f
 8006d10:	f7fa f8c2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006d14:	20ff      	movs	r0, #255	@ 0xff
 8006d16:	f7fa f8bf 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xFF);
 8006d1a:	20ff      	movs	r0, #255	@ 0xff
 8006d1c:	f7fa f8bc 	bl	8000e98 <lcd_wr_xdata>
 8006d20:	23b0      	movs	r3, #176	@ 0xb0
 8006d22:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006d26:	4b64      	ldr	r3, [pc, #400]	@ (8006eb8 <lcd_init+0x4d50>)
 8006d28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d2c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006d2e:	4b62      	ldr	r3, [pc, #392]	@ (8006eb8 <lcd_init+0x4d50>)
 8006d30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d34:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006d36:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	4b5f      	ldr	r3, [pc, #380]	@ (8006ebc <lcd_init+0x4d54>)
 8006d3e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006d40:	4b5d      	ldr	r3, [pc, #372]	@ (8006eb8 <lcd_init+0x4d50>)
 8006d42:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006d46:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006d48:	4b5b      	ldr	r3, [pc, #364]	@ (8006eb8 <lcd_init+0x4d50>)
 8006d4a:	2280      	movs	r2, #128	@ 0x80
 8006d4c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006d4e:	4b5a      	ldr	r3, [pc, #360]	@ (8006eb8 <lcd_init+0x4d50>)
 8006d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d54:	611a      	str	r2, [r3, #16]
}
 8006d56:	bf00      	nop

        lcd_wr_regno(0xB0); /* ����LCDģʽ */
        lcd_wr_xdata(0x20); /* 24λģʽ */
 8006d58:	2020      	movs	r0, #32
 8006d5a:	f7fa f89d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* TFT ģʽ */
 8006d5e:	2000      	movs	r0, #0
 8006d60:	f7fa f89a 	bl	8000e98 <lcd_wr_xdata>

        lcd_wr_xdata((SSD_HOR_RESOLUTION - 1) >> 8); /* ����LCDˮƽ���� */
 8006d64:	2003      	movs	r0, #3
 8006d66:	f7fa f897 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_RESOLUTION - 1);
 8006d6a:	f240 301f 	movw	r0, #799	@ 0x31f
 8006d6e:	f7fa f893 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata((SSD_VER_RESOLUTION - 1) >> 8); /* ����LCD��ֱ���� */
 8006d72:	2001      	movs	r0, #1
 8006d74:	f7fa f890 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_RESOLUTION - 1);
 8006d78:	f240 10df 	movw	r0, #479	@ 0x1df
 8006d7c:	f7fa f88c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);  /* RGB���� */
 8006d80:	2000      	movs	r0, #0
 8006d82:	f7fa f889 	bl	8000e98 <lcd_wr_xdata>
 8006d86:	23b4      	movs	r3, #180	@ 0xb4
 8006d88:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006d8c:	4b4a      	ldr	r3, [pc, #296]	@ (8006eb8 <lcd_init+0x4d50>)
 8006d8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d92:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006d94:	4b48      	ldr	r3, [pc, #288]	@ (8006eb8 <lcd_init+0x4d50>)
 8006d96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d9a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006d9c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	4b46      	ldr	r3, [pc, #280]	@ (8006ebc <lcd_init+0x4d54>)
 8006da4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006da6:	4b44      	ldr	r3, [pc, #272]	@ (8006eb8 <lcd_init+0x4d50>)
 8006da8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006dac:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006dae:	4b42      	ldr	r3, [pc, #264]	@ (8006eb8 <lcd_init+0x4d50>)
 8006db0:	2280      	movs	r2, #128	@ 0x80
 8006db2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006db4:	4b40      	ldr	r3, [pc, #256]	@ (8006eb8 <lcd_init+0x4d50>)
 8006db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dba:	611a      	str	r2, [r3, #16]
}
 8006dbc:	bf00      	nop

        lcd_wr_regno(0xB4); /* Set horizontal period */
        lcd_wr_xdata((SSD_HT - 1) >> 8);
 8006dbe:	2004      	movs	r0, #4
 8006dc0:	f7fa f86a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HT - 1);
 8006dc4:	f240 401f 	movw	r0, #1055	@ 0x41f
 8006dc8:	f7fa f866 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS >> 8);
 8006dcc:	2000      	movs	r0, #0
 8006dce:	f7fa f863 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HPS);
 8006dd2:	202e      	movs	r0, #46	@ 0x2e
 8006dd4:	f7fa f860 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_HOR_PULSE_WIDTH - 1);
 8006dd8:	2000      	movs	r0, #0
 8006dda:	f7fa f85d 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006dde:	2000      	movs	r0, #0
 8006de0:	f7fa f85a 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006de4:	2000      	movs	r0, #0
 8006de6:	f7fa f857 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006dea:	2000      	movs	r0, #0
 8006dec:	f7fa f854 	bl	8000e98 <lcd_wr_xdata>
 8006df0:	23b6      	movs	r3, #182	@ 0xb6
 8006df2:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006df6:	4b30      	ldr	r3, [pc, #192]	@ (8006eb8 <lcd_init+0x4d50>)
 8006df8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006dfc:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8006eb8 <lcd_init+0x4d50>)
 8006e00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e04:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006e06:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ebc <lcd_init+0x4d54>)
 8006e0e:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006e10:	4b29      	ldr	r3, [pc, #164]	@ (8006eb8 <lcd_init+0x4d50>)
 8006e12:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006e16:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006e18:	4b27      	ldr	r3, [pc, #156]	@ (8006eb8 <lcd_init+0x4d50>)
 8006e1a:	2280      	movs	r2, #128	@ 0x80
 8006e1c:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006e1e:	4b26      	ldr	r3, [pc, #152]	@ (8006eb8 <lcd_init+0x4d50>)
 8006e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e24:	611a      	str	r2, [r3, #16]
}
 8006e26:	bf00      	nop
        lcd_wr_regno(0xB6); /* Set vertical perio */
        lcd_wr_xdata((SSD_VT - 1) >> 8);
 8006e28:	2002      	movs	r0, #2
 8006e2a:	f7fa f835 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VT - 1);
 8006e2e:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 8006e32:	f7fa f831 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS >> 8);
 8006e36:	2000      	movs	r0, #0
 8006e38:	f7fa f82e 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VPS);
 8006e3c:	2017      	movs	r0, #23
 8006e3e:	f7fa f82b 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(SSD_VER_FRONT_PORCH - 1);
 8006e42:	2015      	movs	r0, #21
 8006e44:	f7fa f828 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006e48:	2000      	movs	r0, #0
 8006e4a:	f7fa f825 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00);
 8006e4e:	2000      	movs	r0, #0
 8006e50:	f7fa f822 	bl	8000e98 <lcd_wr_xdata>
 8006e54:	23f0      	movs	r3, #240	@ 0xf0
 8006e56:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006e5a:	4b17      	ldr	r3, [pc, #92]	@ (8006eb8 <lcd_init+0x4d50>)
 8006e5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e60:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006e62:	4b15      	ldr	r3, [pc, #84]	@ (8006eb8 <lcd_init+0x4d50>)
 8006e64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e68:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006e6a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	4b12      	ldr	r3, [pc, #72]	@ (8006ebc <lcd_init+0x4d54>)
 8006e72:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006e74:	4b10      	ldr	r3, [pc, #64]	@ (8006eb8 <lcd_init+0x4d50>)
 8006e76:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006e7a:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb8 <lcd_init+0x4d50>)
 8006e7e:	2280      	movs	r2, #128	@ 0x80
 8006e80:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006e82:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <lcd_init+0x4d50>)
 8006e84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e88:	611a      	str	r2, [r3, #16]
}
 8006e8a:	bf00      	nop

        lcd_wr_regno(0xF0); /* ����SSD1963��CPU�ӿ�Ϊ16bit */
        lcd_wr_xdata(0x03); /* 16-bit(565 format) data for 16bpp */
 8006e8c:	2003      	movs	r0, #3
 8006e8e:	f7fa f803 	bl	8000e98 <lcd_wr_xdata>
 8006e92:	2329      	movs	r3, #41	@ 0x29
 8006e94:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006e98:	4b07      	ldr	r3, [pc, #28]	@ (8006eb8 <lcd_init+0x4d50>)
 8006e9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e9e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ea0:	4b05      	ldr	r3, [pc, #20]	@ (8006eb8 <lcd_init+0x4d50>)
 8006ea2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ea6:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006ea8:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	4b03      	ldr	r3, [pc, #12]	@ (8006ebc <lcd_init+0x4d54>)
 8006eb0:	60da      	str	r2, [r3, #12]
 8006eb2:	e005      	b.n	8006ec0 <lcd_init+0x4d58>
 8006eb4:	200000b0 	.word	0x200000b0
 8006eb8:	40011000 	.word	0x40011000
 8006ebc:	40010c00 	.word	0x40010c00
    LCD_WR(0);
 8006ec0:	4b56      	ldr	r3, [pc, #344]	@ (800701c <lcd_init+0x4eb4>)
 8006ec2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006ec6:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006ec8:	4b54      	ldr	r3, [pc, #336]	@ (800701c <lcd_init+0x4eb4>)
 8006eca:	2280      	movs	r2, #128	@ 0x80
 8006ecc:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006ece:	4b53      	ldr	r3, [pc, #332]	@ (800701c <lcd_init+0x4eb4>)
 8006ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ed4:	611a      	str	r2, [r3, #16]
}
 8006ed6:	bf00      	nop
 8006ed8:	23d0      	movs	r3, #208	@ 0xd0
 8006eda:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006ede:	4b4f      	ldr	r3, [pc, #316]	@ (800701c <lcd_init+0x4eb4>)
 8006ee0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ee4:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006ee6:	4b4d      	ldr	r3, [pc, #308]	@ (800701c <lcd_init+0x4eb4>)
 8006ee8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006eec:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006eee:	f8b7 313e 	ldrh.w	r3, [r7, #318]	@ 0x13e
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	4b4a      	ldr	r3, [pc, #296]	@ (8007020 <lcd_init+0x4eb8>)
 8006ef6:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006ef8:	4b48      	ldr	r3, [pc, #288]	@ (800701c <lcd_init+0x4eb4>)
 8006efa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006efe:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006f00:	4b46      	ldr	r3, [pc, #280]	@ (800701c <lcd_init+0x4eb4>)
 8006f02:	2280      	movs	r2, #128	@ 0x80
 8006f04:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006f06:	4b45      	ldr	r3, [pc, #276]	@ (800701c <lcd_init+0x4eb4>)
 8006f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f0c:	611a      	str	r2, [r3, #16]
}
 8006f0e:	bf00      	nop

        lcd_wr_regno(0x29); /* ������ʾ */
        /* ����PWM���  ����ͨ��ռ�ձȿɵ� */
        lcd_wr_regno(0xD0); /* �����Զ���ƽ��DBC */
        lcd_wr_xdata(0x00); /* disable */
 8006f10:	2000      	movs	r0, #0
 8006f12:	f7f9 ffc1 	bl	8000e98 <lcd_wr_xdata>
 8006f16:	23be      	movs	r3, #190	@ 0xbe
 8006f18:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800701c <lcd_init+0x4eb4>)
 8006f1e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f22:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006f24:	4b3d      	ldr	r3, [pc, #244]	@ (800701c <lcd_init+0x4eb4>)
 8006f26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006f2a:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006f2c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	@ 0x13c
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	4b3b      	ldr	r3, [pc, #236]	@ (8007020 <lcd_init+0x4eb8>)
 8006f34:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006f36:	4b39      	ldr	r3, [pc, #228]	@ (800701c <lcd_init+0x4eb4>)
 8006f38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006f3c:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006f3e:	4b37      	ldr	r3, [pc, #220]	@ (800701c <lcd_init+0x4eb4>)
 8006f40:	2280      	movs	r2, #128	@ 0x80
 8006f42:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006f44:	4b35      	ldr	r3, [pc, #212]	@ (800701c <lcd_init+0x4eb4>)
 8006f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f4a:	611a      	str	r2, [r3, #16]
}
 8006f4c:	bf00      	nop

        lcd_wr_regno(0xBE); /* ����PWM��� */
        lcd_wr_xdata(0x05); /* 1����PWMƵ�� */
 8006f4e:	2005      	movs	r0, #5
 8006f50:	f7f9 ffa2 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0xFE); /* 2����PWMռ�ձ� */
 8006f54:	20fe      	movs	r0, #254	@ 0xfe
 8006f56:	f7f9 ff9f 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* 3����C */
 8006f5a:	2001      	movs	r0, #1
 8006f5c:	f7f9 ff9c 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 4����D */
 8006f60:	2000      	movs	r0, #0
 8006f62:	f7f9 ff99 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 5����E */
 8006f66:	2000      	movs	r0, #0
 8006f68:	f7f9 ff96 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x00); /* 6����F */
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	f7f9 ff93 	bl	8000e98 <lcd_wr_xdata>
 8006f72:	23b8      	movs	r3, #184	@ 0xb8
 8006f74:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006f78:	4b28      	ldr	r3, [pc, #160]	@ (800701c <lcd_init+0x4eb4>)
 8006f7a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f7e:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006f80:	4b26      	ldr	r3, [pc, #152]	@ (800701c <lcd_init+0x4eb4>)
 8006f82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006f86:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006f88:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	4b24      	ldr	r3, [pc, #144]	@ (8007020 <lcd_init+0x4eb8>)
 8006f90:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006f92:	4b22      	ldr	r3, [pc, #136]	@ (800701c <lcd_init+0x4eb4>)
 8006f94:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006f98:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006f9a:	4b20      	ldr	r3, [pc, #128]	@ (800701c <lcd_init+0x4eb4>)
 8006f9c:	2280      	movs	r2, #128	@ 0x80
 8006f9e:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800701c <lcd_init+0x4eb4>)
 8006fa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fa6:	611a      	str	r2, [r3, #16]
}
 8006fa8:	bf00      	nop

        lcd_wr_regno(0xB8); /* ����GPIO���� */
        lcd_wr_xdata(0x03); /* 2��IO�����ó���� */
 8006faa:	2003      	movs	r0, #3
 8006fac:	f7f9 ff74 	bl	8000e98 <lcd_wr_xdata>
        lcd_wr_xdata(0x01); /* GPIOʹ��������IO���� */
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	f7f9 ff71 	bl	8000e98 <lcd_wr_xdata>
 8006fb6:	23ba      	movs	r3, #186	@ 0xba
 8006fb8:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8006fbc:	4b17      	ldr	r3, [pc, #92]	@ (800701c <lcd_init+0x4eb4>)
 8006fbe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006fc2:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 8006fc4:	4b15      	ldr	r3, [pc, #84]	@ (800701c <lcd_init+0x4eb4>)
 8006fc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006fca:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8006fcc:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	4b13      	ldr	r3, [pc, #76]	@ (8007020 <lcd_init+0x4eb8>)
 8006fd4:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 8006fd6:	4b11      	ldr	r3, [pc, #68]	@ (800701c <lcd_init+0x4eb4>)
 8006fd8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006fdc:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8006fde:	4b0f      	ldr	r3, [pc, #60]	@ (800701c <lcd_init+0x4eb4>)
 8006fe0:	2280      	movs	r2, #128	@ 0x80
 8006fe2:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8006fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800701c <lcd_init+0x4eb4>)
 8006fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fea:	611a      	str	r2, [r3, #16]
}
 8006fec:	bf00      	nop
        lcd_wr_regno(0xBA);
        lcd_wr_xdata(0X01); /* GPIO[1:0]=01,����LCD���� */
 8006fee:	2001      	movs	r0, #1
 8006ff0:	f7f9 ff52 	bl	8000e98 <lcd_wr_xdata>
        lcd_ssd_backlight_set(100); /* ��������Ϊ���� */
 8006ff4:	2064      	movs	r0, #100	@ 0x64
 8006ff6:	f7fa ff1f 	bl	8001e38 <lcd_ssd_backlight_set>
    }

    lcd_display_dir(0); /* Ĭ��Ϊ���� */
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	f7fa ffdc 	bl	8001fb8 <lcd_display_dir>
    LCD_BL(1);          /* �������� */
 8007000:	4b06      	ldr	r3, [pc, #24]	@ (800701c <lcd_init+0x4eb4>)
 8007002:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007006:	611a      	str	r2, [r3, #16]
    lcd_clear(WHITE);
 8007008:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800700c:	f000 f80a 	bl	8007024 <lcd_clear>
}
 8007010:	bf00      	nop
 8007012:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	40011000 	.word	0x40011000
 8007020:	40010c00 	.word	0x40010c00

08007024 <lcd_clear>:
 * @brief       ��������
 * @param       color: Ҫ��������ɫ
 * @retval      ��
 */
void lcd_clear(uint16_t color)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
    uint32_t totalpoint = lcddev.width;
 8007032:	4b27      	ldr	r3, [pc, #156]	@ (80070d0 <lcd_clear+0xac>)
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	613b      	str	r3, [r7, #16]
    totalpoint *= lcddev.height;    /* �õ��ܵ��� */
 8007038:	4b25      	ldr	r3, [pc, #148]	@ (80070d0 <lcd_clear+0xac>)
 800703a:	885b      	ldrh	r3, [r3, #2]
 800703c:	461a      	mov	r2, r3
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	fb02 f303 	mul.w	r3, r2, r3
 8007044:	613b      	str	r3, [r7, #16]
    lcd_set_cursor(0x00, 0x0000);   /* ���ù��λ�� */
 8007046:	2100      	movs	r1, #0
 8007048:	2000      	movs	r0, #0
 800704a:	f7fa f809 	bl	8001060 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 800704e:	4b20      	ldr	r3, [pc, #128]	@ (80070d0 <lcd_clear+0xac>)
 8007050:	891b      	ldrh	r3, [r3, #8]
 8007052:	81fb      	strh	r3, [r7, #14]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007054:	4b1f      	ldr	r3, [pc, #124]	@ (80070d4 <lcd_clear+0xb0>)
 8007056:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800705a:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800705c:	4b1d      	ldr	r3, [pc, #116]	@ (80070d4 <lcd_clear+0xb0>)
 800705e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007062:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007064:	89fb      	ldrh	r3, [r7, #14]
 8007066:	b29a      	uxth	r2, r3
 8007068:	4b1b      	ldr	r3, [pc, #108]	@ (80070d8 <lcd_clear+0xb4>)
 800706a:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800706c:	4b19      	ldr	r3, [pc, #100]	@ (80070d4 <lcd_clear+0xb0>)
 800706e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007072:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007074:	4b17      	ldr	r3, [pc, #92]	@ (80070d4 <lcd_clear+0xb0>)
 8007076:	2280      	movs	r2, #128	@ 0x80
 8007078:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 800707a:	4b16      	ldr	r3, [pc, #88]	@ (80070d4 <lcd_clear+0xb0>)
 800707c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007080:	611a      	str	r2, [r3, #16]
}
 8007082:	bf00      	nop
}
 8007084:	bf00      	nop
     * RS, CS�Ĳ���, �Ӷ������ٶ�, ��51֡��ߵ�78֡����, ���50%
     * ��������: -O2�Ż�, ��ˢ��
     * �����ٶ�Ҫ���ʱ��, ���Լ����Ż�: lcd_fill, lcd_color_fill, 
     * lcd_set_cursor �� lcd_draw_point �Ⱥ���, ��ҿ��������Ż�
     */
    LCD_RS(1);                      /* RS=1,��ʾд���� */
 8007086:	4b13      	ldr	r3, [pc, #76]	@ (80070d4 <lcd_clear+0xb0>)
 8007088:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800708c:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800708e:	4b11      	ldr	r3, [pc, #68]	@ (80070d4 <lcd_clear+0xb0>)
 8007090:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007094:	611a      	str	r2, [r3, #16]
    
    for (index = 0; index < totalpoint; index++)
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
 800709a:	e00c      	b.n	80070b6 <lcd_clear+0x92>
    {
        LCD_DATA_OUT(color);        /* д��Ҫд������ */
 800709c:	4a0e      	ldr	r2, [pc, #56]	@ (80070d8 <lcd_clear+0xb4>)
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	60d3      	str	r3, [r2, #12]
        LCD_WR(0);
 80070a2:	4b0c      	ldr	r3, [pc, #48]	@ (80070d4 <lcd_clear+0xb0>)
 80070a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80070a8:	611a      	str	r2, [r3, #16]
        LCD_WR(1);
 80070aa:	4b0a      	ldr	r3, [pc, #40]	@ (80070d4 <lcd_clear+0xb0>)
 80070ac:	2280      	movs	r2, #128	@ 0x80
 80070ae:	611a      	str	r2, [r3, #16]
    for (index = 0; index < totalpoint; index++)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	3301      	adds	r3, #1
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d3ee      	bcc.n	800709c <lcd_clear+0x78>
    }
    
    LCD_CS(1);
 80070be:	4b05      	ldr	r3, [pc, #20]	@ (80070d4 <lcd_clear+0xb0>)
 80070c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070c4:	611a      	str	r2, [r3, #16]
}
 80070c6:	bf00      	nop
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	200000b0 	.word	0x200000b0
 80070d4:	40011000 	.word	0x40011000
 80070d8:	40010c00 	.word	0x40010c00

080070dc <lcd_fill>:
 * @param       (sx,sy),(ex,ey):�����ζԽ�����,�����СΪ:(ex - sx + 1) * (ey - sy + 1)
 * @param       color: Ҫ������ɫ(32λ��ɫ,�������LTDC)
 * @retval      ��
 */
void lcd_fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey, uint32_t color)
{
 80070dc:	b590      	push	{r4, r7, lr}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	461a      	mov	r2, r3
 80070ea:	4623      	mov	r3, r4
 80070ec:	80fb      	strh	r3, [r7, #6]
 80070ee:	4603      	mov	r3, r0
 80070f0:	80bb      	strh	r3, [r7, #4]
 80070f2:	460b      	mov	r3, r1
 80070f4:	807b      	strh	r3, [r7, #2]
 80070f6:	4613      	mov	r3, r2
 80070f8:	803b      	strh	r3, [r7, #0]
    uint16_t i, j;
    uint16_t xlen = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	817b      	strh	r3, [r7, #10]
    xlen = ex - sx + 1;
 80070fe:	887a      	ldrh	r2, [r7, #2]
 8007100:	88fb      	ldrh	r3, [r7, #6]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	b29b      	uxth	r3, r3
 8007106:	3301      	adds	r3, #1
 8007108:	817b      	strh	r3, [r7, #10]

    for (i = sy; i <= ey; i++)
 800710a:	88bb      	ldrh	r3, [r7, #4]
 800710c:	81fb      	strh	r3, [r7, #14]
 800710e:	e044      	b.n	800719a <lcd_fill+0xbe>
    {
        lcd_set_cursor(sx, i);      /* ���ù��λ�� */
 8007110:	89fa      	ldrh	r2, [r7, #14]
 8007112:	88fb      	ldrh	r3, [r7, #6]
 8007114:	4611      	mov	r1, r2
 8007116:	4618      	mov	r0, r3
 8007118:	f7f9 ffa2 	bl	8001060 <lcd_set_cursor>
    lcd_wr_regno(lcddev.wramcmd);
 800711c:	4b23      	ldr	r3, [pc, #140]	@ (80071ac <lcd_fill+0xd0>)
 800711e:	891b      	ldrh	r3, [r3, #8]
 8007120:	813b      	strh	r3, [r7, #8]
    LCD_RS(0);              /* RS=0,��ʾд�Ĵ��� */
 8007122:	4b23      	ldr	r3, [pc, #140]	@ (80071b0 <lcd_fill+0xd4>)
 8007124:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007128:	611a      	str	r2, [r3, #16]
    LCD_CS(0);
 800712a:	4b21      	ldr	r3, [pc, #132]	@ (80071b0 <lcd_fill+0xd4>)
 800712c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007130:	611a      	str	r2, [r3, #16]
    LCD_DATA_OUT(regno);    /* д��Ҫд�ļĴ������ */
 8007132:	893b      	ldrh	r3, [r7, #8]
 8007134:	b29a      	uxth	r2, r3
 8007136:	4b1f      	ldr	r3, [pc, #124]	@ (80071b4 <lcd_fill+0xd8>)
 8007138:	60da      	str	r2, [r3, #12]
    LCD_WR(0);
 800713a:	4b1d      	ldr	r3, [pc, #116]	@ (80071b0 <lcd_fill+0xd4>)
 800713c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007140:	611a      	str	r2, [r3, #16]
    LCD_WR(1);
 8007142:	4b1b      	ldr	r3, [pc, #108]	@ (80071b0 <lcd_fill+0xd4>)
 8007144:	2280      	movs	r2, #128	@ 0x80
 8007146:	611a      	str	r2, [r3, #16]
    LCD_CS(1);
 8007148:	4b19      	ldr	r3, [pc, #100]	@ (80071b0 <lcd_fill+0xd4>)
 800714a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800714e:	611a      	str	r2, [r3, #16]
}
 8007150:	bf00      	nop
}
 8007152:	bf00      	nop
        lcd_write_ram_prepare();    /* ��ʼд��GRAM */

        for (j = 0; j < xlen; j++)
 8007154:	2300      	movs	r3, #0
 8007156:	81bb      	strh	r3, [r7, #12]
 8007158:	e018      	b.n	800718c <lcd_fill+0xb0>
        {
            lcd_wr_data(color);     /* д������ */
 800715a:	4b15      	ldr	r3, [pc, #84]	@ (80071b0 <lcd_fill+0xd4>)
 800715c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007160:	611a      	str	r2, [r3, #16]
 8007162:	4b13      	ldr	r3, [pc, #76]	@ (80071b0 <lcd_fill+0xd4>)
 8007164:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007168:	611a      	str	r2, [r3, #16]
 800716a:	4a12      	ldr	r2, [pc, #72]	@ (80071b4 <lcd_fill+0xd8>)
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	60d3      	str	r3, [r2, #12]
 8007170:	4b0f      	ldr	r3, [pc, #60]	@ (80071b0 <lcd_fill+0xd4>)
 8007172:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007176:	611a      	str	r2, [r3, #16]
 8007178:	4b0d      	ldr	r3, [pc, #52]	@ (80071b0 <lcd_fill+0xd4>)
 800717a:	2280      	movs	r2, #128	@ 0x80
 800717c:	611a      	str	r2, [r3, #16]
 800717e:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <lcd_fill+0xd4>)
 8007180:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007184:	611a      	str	r2, [r3, #16]
        for (j = 0; j < xlen; j++)
 8007186:	89bb      	ldrh	r3, [r7, #12]
 8007188:	3301      	adds	r3, #1
 800718a:	81bb      	strh	r3, [r7, #12]
 800718c:	89ba      	ldrh	r2, [r7, #12]
 800718e:	897b      	ldrh	r3, [r7, #10]
 8007190:	429a      	cmp	r2, r3
 8007192:	d3e2      	bcc.n	800715a <lcd_fill+0x7e>
    for (i = sy; i <= ey; i++)
 8007194:	89fb      	ldrh	r3, [r7, #14]
 8007196:	3301      	adds	r3, #1
 8007198:	81fb      	strh	r3, [r7, #14]
 800719a:	89fa      	ldrh	r2, [r7, #14]
 800719c:	883b      	ldrh	r3, [r7, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d9b6      	bls.n	8007110 <lcd_fill+0x34>
        }
    }
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd90      	pop	{r4, r7, pc}
 80071ac:	200000b0 	.word	0x200000b0
 80071b0:	40011000 	.word	0x40011000
 80071b4:	40010c00 	.word	0x40010c00

080071b8 <lcd_show_char>:
 * @param       mode : ���ӷ�ʽ(1); �ǵ��ӷ�ʽ(0);
 * @param       color : �ַ�����ɫ;
 * @retval      ��
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 80071b8:	b590      	push	{r4, r7, lr}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4604      	mov	r4, r0
 80071c0:	4608      	mov	r0, r1
 80071c2:	4611      	mov	r1, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	4623      	mov	r3, r4
 80071c8:	80fb      	strh	r3, [r7, #6]
 80071ca:	4603      	mov	r3, r0
 80071cc:	80bb      	strh	r3, [r7, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	70fb      	strb	r3, [r7, #3]
 80071d2:	4613      	mov	r3, r2
 80071d4:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 80071d6:	88bb      	ldrh	r3, [r7, #4]
 80071d8:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* �õ�����һ���ַ���Ӧ������ռ���ֽ��� */
 80071e2:	78bb      	ldrb	r3, [r7, #2]
 80071e4:	08db      	lsrs	r3, r3, #3
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	78bb      	ldrb	r3, [r7, #2]
 80071ec:	f003 0307 	and.w	r3, r3, #7
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bf14      	ite	ne
 80071f6:	2301      	movne	r3, #1
 80071f8:	2300      	moveq	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	4413      	add	r3, r2
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	78ba      	ldrb	r2, [r7, #2]
 8007202:	0852      	lsrs	r2, r2, #1
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	fb02 f303 	mul.w	r3, r2, r3
 800720a:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* �õ�ƫ�ƺ��ֵ��ASCII�ֿ��Ǵӿո�ʼȡģ������-' '���Ƕ�Ӧ�ַ����ֿ⣩ */
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	3b20      	subs	r3, #32
 8007210:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8007212:	78bb      	ldrb	r3, [r7, #2]
 8007214:	3b0c      	subs	r3, #12
 8007216:	2b14      	cmp	r3, #20
 8007218:	f200 8099 	bhi.w	800734e <lcd_show_char+0x196>
 800721c:	a201      	add	r2, pc, #4	@ (adr r2, 8007224 <lcd_show_char+0x6c>)
 800721e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007222:	bf00      	nop
 8007224:	08007279 	.word	0x08007279
 8007228:	0800734f 	.word	0x0800734f
 800722c:	0800734f 	.word	0x0800734f
 8007230:	0800734f 	.word	0x0800734f
 8007234:	0800728b 	.word	0x0800728b
 8007238:	0800734f 	.word	0x0800734f
 800723c:	0800734f 	.word	0x0800734f
 8007240:	0800734f 	.word	0x0800734f
 8007244:	0800734f 	.word	0x0800734f
 8007248:	0800734f 	.word	0x0800734f
 800724c:	0800734f 	.word	0x0800734f
 8007250:	0800734f 	.word	0x0800734f
 8007254:	08007297 	.word	0x08007297
 8007258:	0800734f 	.word	0x0800734f
 800725c:	0800734f 	.word	0x0800734f
 8007260:	0800734f 	.word	0x0800734f
 8007264:	0800734f 	.word	0x0800734f
 8007268:	0800734f 	.word	0x0800734f
 800726c:	0800734f 	.word	0x0800734f
 8007270:	0800734f 	.word	0x0800734f
 8007274:	080072a9 	.word	0x080072a9
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* ����1206���� */
 8007278:	78fa      	ldrb	r2, [r7, #3]
 800727a:	4613      	mov	r3, r2
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4a36      	ldr	r2, [pc, #216]	@ (800735c <lcd_show_char+0x1a4>)
 8007284:	4413      	add	r3, r2
 8007286:	613b      	str	r3, [r7, #16]
            break;
 8007288:	e014      	b.n	80072b4 <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* ����1608���� */
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	011b      	lsls	r3, r3, #4
 800728e:	4a34      	ldr	r2, [pc, #208]	@ (8007360 <lcd_show_char+0x1a8>)
 8007290:	4413      	add	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
            break;
 8007294:	e00e      	b.n	80072b4 <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* ����2412���� */
 8007296:	78fa      	ldrb	r2, [r7, #3]
 8007298:	4613      	mov	r3, r2
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4a30      	ldr	r2, [pc, #192]	@ (8007364 <lcd_show_char+0x1ac>)
 80072a2:	4413      	add	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
            break;
 80072a6:	e005      	b.n	80072b4 <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* ����3216���� */
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	019b      	lsls	r3, r3, #6
 80072ac:	4a2e      	ldr	r2, [pc, #184]	@ (8007368 <lcd_show_char+0x1b0>)
 80072ae:	4413      	add	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
            break;
 80072b2:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 80072b4:	2300      	movs	r3, #0
 80072b6:	757b      	strb	r3, [r7, #21]
 80072b8:	e044      	b.n	8007344 <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* ��ȡ�ַ��ĵ������� */
 80072ba:	7d7b      	ldrb	r3, [r7, #21]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	4413      	add	r3, r2
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 80072c4:	2300      	movs	r3, #0
 80072c6:	75bb      	strb	r3, [r7, #22]
 80072c8:	e034      	b.n	8007334 <lcd_show_char+0x17c>
        {
            if (temp & 0x80)        /* ��Ч��,��Ҫ��ʾ */
 80072ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	da06      	bge.n	80072e0 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* �������,Ҫ��ʾ����� */
 80072d2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80072d4:	88b9      	ldrh	r1, [r7, #4]
 80072d6:	88fb      	ldrh	r3, [r7, #6]
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fa fd61 	bl	8001da0 <lcd_draw_point>
 80072de:	e00a      	b.n	80072f6 <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* ��Ч��,����ʾ */
 80072e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d106      	bne.n	80072f6 <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* ������ɫ,�൱������㲻��ʾ(ע�ⱳ��ɫ��ȫ�ֱ�������) */
 80072e8:	4b20      	ldr	r3, [pc, #128]	@ (800736c <lcd_show_char+0x1b4>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	88b9      	ldrh	r1, [r7, #4]
 80072ee:	88fb      	ldrh	r3, [r7, #6]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fa fd55 	bl	8001da0 <lcd_draw_point>
            }

            temp <<= 1; /* ��λ, �Ա��ȡ��һ��λ��״̬ */
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	75fb      	strb	r3, [r7, #23]
            y++;
 80072fc:	88bb      	ldrh	r3, [r7, #4]
 80072fe:	3301      	adds	r3, #1
 8007300:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* �������� */
 8007302:	4b1b      	ldr	r3, [pc, #108]	@ (8007370 <lcd_show_char+0x1b8>)
 8007304:	885b      	ldrh	r3, [r3, #2]
 8007306:	88ba      	ldrh	r2, [r7, #4]
 8007308:	429a      	cmp	r2, r3
 800730a:	d222      	bcs.n	8007352 <lcd_show_char+0x19a>

            if ((y - y0) == size)   /* ��ʾ��һ����? */
 800730c:	88ba      	ldrh	r2, [r7, #4]
 800730e:	89fb      	ldrh	r3, [r7, #14]
 8007310:	1ad2      	subs	r2, r2, r3
 8007312:	78bb      	ldrb	r3, [r7, #2]
 8007314:	429a      	cmp	r2, r3
 8007316:	d10a      	bne.n	800732e <lcd_show_char+0x176>
            {
                y = y0; /* y���긴λ */
 8007318:	89fb      	ldrh	r3, [r7, #14]
 800731a:	80bb      	strh	r3, [r7, #4]
                x++;    /* x������� */
 800731c:	88fb      	ldrh	r3, [r7, #6]
 800731e:	3301      	adds	r3, #1
 8007320:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   /* x���곬������ */
 8007322:	4b13      	ldr	r3, [pc, #76]	@ (8007370 <lcd_show_char+0x1b8>)
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	429a      	cmp	r2, r3
 800732a:	d307      	bcc.n	800733c <lcd_show_char+0x184>
 800732c:	e012      	b.n	8007354 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)   /* һ���ֽ�8���� */
 800732e:	7dbb      	ldrb	r3, [r7, #22]
 8007330:	3301      	adds	r3, #1
 8007332:	75bb      	strb	r3, [r7, #22]
 8007334:	7dbb      	ldrb	r3, [r7, #22]
 8007336:	2b07      	cmp	r3, #7
 8007338:	d9c7      	bls.n	80072ca <lcd_show_char+0x112>
 800733a:	e000      	b.n	800733e <lcd_show_char+0x186>

                break;
 800733c:	bf00      	nop
    for (t = 0; t < csize; t++)
 800733e:	7d7b      	ldrb	r3, [r7, #21]
 8007340:	3301      	adds	r3, #1
 8007342:	757b      	strb	r3, [r7, #21]
 8007344:	7d7a      	ldrb	r2, [r7, #21]
 8007346:	7b7b      	ldrb	r3, [r7, #13]
 8007348:	429a      	cmp	r2, r3
 800734a:	d3b6      	bcc.n	80072ba <lcd_show_char+0x102>
 800734c:	e002      	b.n	8007354 <lcd_show_char+0x19c>
            return ;
 800734e:	bf00      	nop
 8007350:	e000      	b.n	8007354 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* �������� */
 8007352:	bf00      	nop
            }
        }
    }
}
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	bd90      	pop	{r4, r7, pc}
 800735a:	bf00      	nop
 800735c:	0800ac10 	.word	0x0800ac10
 8007360:	0800b084 	.word	0x0800b084
 8007364:	0800b674 	.word	0x0800b674
 8007368:	0800c3d0 	.word	0x0800c3d0
 800736c:	20000000 	.word	0x20000000
 8007370:	200000b0 	.word	0x200000b0

08007374 <lcd_show_string>:
 * @param       p           : �ַ����׵�ַ
 * @param       color       : �ַ�������ɫ;
 * @retval      ��
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8007374:	b590      	push	{r4, r7, lr}
 8007376:	b087      	sub	sp, #28
 8007378:	af02      	add	r7, sp, #8
 800737a:	4604      	mov	r4, r0
 800737c:	4608      	mov	r0, r1
 800737e:	4611      	mov	r1, r2
 8007380:	461a      	mov	r2, r3
 8007382:	4623      	mov	r3, r4
 8007384:	80fb      	strh	r3, [r7, #6]
 8007386:	4603      	mov	r3, r0
 8007388:	80bb      	strh	r3, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	807b      	strh	r3, [r7, #2]
 800738e:	4613      	mov	r3, r2
 8007390:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	73fb      	strb	r3, [r7, #15]
    width += x;
 8007396:	887a      	ldrh	r2, [r7, #2]
 8007398:	88fb      	ldrh	r3, [r7, #6]
 800739a:	4413      	add	r3, r2
 800739c:	807b      	strh	r3, [r7, #2]
    height += y;
 800739e:	883a      	ldrh	r2, [r7, #0]
 80073a0:	88bb      	ldrh	r3, [r7, #4]
 80073a2:	4413      	add	r3, r2
 80073a4:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 80073a6:	e027      	b.n	80073f8 <lcd_show_string+0x84>
    {
        if (x >= width)
 80073a8:	88fa      	ldrh	r2, [r7, #6]
 80073aa:	887b      	ldrh	r3, [r7, #2]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d307      	bcc.n	80073c0 <lcd_show_string+0x4c>
        {
            x = x0;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	80fb      	strh	r3, [r7, #6]
            y += size;
 80073b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	88bb      	ldrh	r3, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* �˳� */
 80073c0:	88ba      	ldrh	r2, [r7, #4]
 80073c2:	883b      	ldrh	r3, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d220      	bcs.n	800740a <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 80073c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ca:	781a      	ldrb	r2, [r3, #0]
 80073cc:	f897 4020 	ldrb.w	r4, [r7, #32]
 80073d0:	88b9      	ldrh	r1, [r7, #4]
 80073d2:	88f8      	ldrh	r0, [r7, #6]
 80073d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80073d6:	9301      	str	r3, [sp, #4]
 80073d8:	2300      	movs	r3, #0
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	4623      	mov	r3, r4
 80073de:	f7ff feeb 	bl	80071b8 <lcd_show_char>
        x += size / 2;
 80073e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	4413      	add	r3, r2
 80073f0:	80fb      	strh	r3, [r7, #6]
        p++;
 80073f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f4:	3301      	adds	r3, #1
 80073f6:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((*p <= '~') && (*p >= ' '))   /* �ж��ǲ��ǷǷ��ַ�! */
 80073f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b7e      	cmp	r3, #126	@ 0x7e
 80073fe:	d805      	bhi.n	800740c <lcd_show_string+0x98>
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b1f      	cmp	r3, #31
 8007406:	d8cf      	bhi.n	80073a8 <lcd_show_string+0x34>
    }
}
 8007408:	e000      	b.n	800740c <lcd_show_string+0x98>
        if (y >= height)break;  /* �˳� */
 800740a:	bf00      	nop
}
 800740c:	bf00      	nop
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	bd90      	pop	{r4, r7, pc}

08007414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	b099      	sub	sp, #100	@ 0x64
 800741a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800741c:	f001 fa14 	bl	8008848 <HAL_Init>

  /* USER CODE BEGIN Init */
  lcd_init();
 8007420:	f7fa fea2 	bl	8002168 <lcd_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007424:	f000 fe3c 	bl	80080a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007428:	f7f9 fcae 	bl	8000d88 <MX_GPIO_Init>
  MX_TIM2_Init();
 800742c:	f001 f900 	bl	8008630 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8007430:	f001 f96e 	bl	8008710 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Key_Config();
 8007434:	f7f9 fa06 	bl	8000844 <Key_Config>
  HAL_TIM_Base_Start_IT(&htim2);//开定时器
 8007438:	48a3      	ldr	r0, [pc, #652]	@ (80076c8 <main+0x2b4>)
 800743a:	f002 f9d5 	bl	80097e8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(button[2].buttonAction == BUTTON_LONG_PRESS){//长按KEY_WK_UP设置original数据长度
 800743e:	4ba3      	ldr	r3, [pc, #652]	@ (80076cc <main+0x2b8>)
 8007440:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007444:	2b04      	cmp	r3, #4
 8007446:	f040 8155 	bne.w	80076f4 <main+0x2e0>
		  lcd_clear(WHITE);g_back_color = WHITE;
 800744a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800744e:	f7ff fde9 	bl	8007024 <lcd_clear>
 8007452:	4b9f      	ldr	r3, [pc, #636]	@ (80076d0 <main+0x2bc>)
 8007454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007458:	601a      	str	r2, [r3, #0]
		  button[2].buttonAction = BUTTON_NULL;
 800745a:	4b9c      	ldr	r3, [pc, #624]	@ (80076cc <main+0x2b8>)
 800745c:	2200      	movs	r2, #0
 800745e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		  char len_str[4];
		  sprintf(len_str,"%d",bit_len);
 8007462:	4b9c      	ldr	r3, [pc, #624]	@ (80076d4 <main+0x2c0>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800746c:	499a      	ldr	r1, [pc, #616]	@ (80076d8 <main+0x2c4>)
 800746e:	4618      	mov	r0, r3
 8007470:	f002 ff24 	bl	800a2bc <siprintf>
		  lcd_show_string(10,lcddev.height/10,200,24,24,"Input Length: ",BLACK);
 8007474:	4b99      	ldr	r3, [pc, #612]	@ (80076dc <main+0x2c8>)
 8007476:	885b      	ldrh	r3, [r3, #2]
 8007478:	4a99      	ldr	r2, [pc, #612]	@ (80076e0 <main+0x2cc>)
 800747a:	fba2 2303 	umull	r2, r3, r2, r3
 800747e:	08db      	lsrs	r3, r3, #3
 8007480:	b299      	uxth	r1, r3
 8007482:	2300      	movs	r3, #0
 8007484:	9302      	str	r3, [sp, #8]
 8007486:	4b97      	ldr	r3, [pc, #604]	@ (80076e4 <main+0x2d0>)
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	2318      	movs	r3, #24
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	2318      	movs	r3, #24
 8007490:	22c8      	movs	r2, #200	@ 0xc8
 8007492:	200a      	movs	r0, #10
 8007494:	f7ff ff6e 	bl	8007374 <lcd_show_string>
		  lcd_show_string(5 * lcddev.width/ 6, lcddev.height/10,200,24,24,len_str,BLACK);
 8007498:	4b90      	ldr	r3, [pc, #576]	@ (80076dc <main+0x2c8>)
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	4a90      	ldr	r2, [pc, #576]	@ (80076e8 <main+0x2d4>)
 80074a6:	fb82 1203 	smull	r1, r2, r2, r3
 80074aa:	17db      	asrs	r3, r3, #31
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	b298      	uxth	r0, r3
 80074b0:	4b8a      	ldr	r3, [pc, #552]	@ (80076dc <main+0x2c8>)
 80074b2:	885b      	ldrh	r3, [r3, #2]
 80074b4:	4a8a      	ldr	r2, [pc, #552]	@ (80076e0 <main+0x2cc>)
 80074b6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ba:	08db      	lsrs	r3, r3, #3
 80074bc:	b299      	uxth	r1, r3
 80074be:	2300      	movs	r3, #0
 80074c0:	9302      	str	r3, [sp, #8]
 80074c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	2318      	movs	r3, #24
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	2318      	movs	r3, #24
 80074ce:	22c8      	movs	r2, #200	@ 0xc8
 80074d0:	f7ff ff50 	bl	8007374 <lcd_show_string>
		  lcd_show_string(10,lcddev.height/10 + 50,200,16,16,"Maximum Length is 10", BLACK);
 80074d4:	4b81      	ldr	r3, [pc, #516]	@ (80076dc <main+0x2c8>)
 80074d6:	885b      	ldrh	r3, [r3, #2]
 80074d8:	4a81      	ldr	r2, [pc, #516]	@ (80076e0 <main+0x2cc>)
 80074da:	fba2 2303 	umull	r2, r3, r2, r3
 80074de:	08db      	lsrs	r3, r3, #3
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3332      	adds	r3, #50	@ 0x32
 80074e4:	b299      	uxth	r1, r3
 80074e6:	2300      	movs	r3, #0
 80074e8:	9302      	str	r3, [sp, #8]
 80074ea:	4b80      	ldr	r3, [pc, #512]	@ (80076ec <main+0x2d8>)
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	2310      	movs	r3, #16
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	2310      	movs	r3, #16
 80074f4:	22c8      	movs	r2, #200	@ 0xc8
 80074f6:	200a      	movs	r0, #10
 80074f8:	f7ff ff3c 	bl	8007374 <lcd_show_string>
		  while(button[2].buttonAction != BUTTON_LONG_PRESS){
 80074fc:	e0d0      	b.n	80076a0 <main+0x28c>
			  //按KEY1减1，按KEY0加1
			  if(button[1].buttonAction == BUTTON_SINGLE){
 80074fe:	4b73      	ldr	r3, [pc, #460]	@ (80076cc <main+0x2b8>)
 8007500:	7f9b      	ldrb	r3, [r3, #30]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d14f      	bne.n	80075a6 <main+0x192>
				  button[1].buttonAction = BUTTON_NULL;
 8007506:	4b71      	ldr	r3, [pc, #452]	@ (80076cc <main+0x2b8>)
 8007508:	2200      	movs	r2, #0
 800750a:	779a      	strb	r2, [r3, #30]
				  if(bit_len - 1 >= 1){
 800750c:	4b71      	ldr	r3, [pc, #452]	@ (80076d4 <main+0x2c0>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b01      	cmp	r3, #1
 8007512:	f240 80c5 	bls.w	80076a0 <main+0x28c>
					  bit_len -= 1;
 8007516:	4b6f      	ldr	r3, [pc, #444]	@ (80076d4 <main+0x2c0>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	3b01      	subs	r3, #1
 800751c:	b2da      	uxtb	r2, r3
 800751e:	4b6d      	ldr	r3, [pc, #436]	@ (80076d4 <main+0x2c0>)
 8007520:	701a      	strb	r2, [r3, #0]
					  lcd_clear_area(WHITE,5*lcddev.width/6,lcddev.height/10,200,24);
 8007522:	4b6e      	ldr	r3, [pc, #440]	@ (80076dc <main+0x2c8>)
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	4613      	mov	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	4a6e      	ldr	r2, [pc, #440]	@ (80076e8 <main+0x2d4>)
 8007530:	fb82 1203 	smull	r1, r2, r2, r3
 8007534:	17db      	asrs	r3, r3, #31
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	b299      	uxth	r1, r3
 800753a:	4b68      	ldr	r3, [pc, #416]	@ (80076dc <main+0x2c8>)
 800753c:	885b      	ldrh	r3, [r3, #2]
 800753e:	4a68      	ldr	r2, [pc, #416]	@ (80076e0 <main+0x2cc>)
 8007540:	fba2 2303 	umull	r2, r3, r2, r3
 8007544:	08db      	lsrs	r3, r3, #3
 8007546:	b29a      	uxth	r2, r3
 8007548:	2318      	movs	r3, #24
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	23c8      	movs	r3, #200	@ 0xc8
 800754e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007552:	f7f9 fbd3 	bl	8000cfc <lcd_clear_area>
					  sprintf(len_str,"%d",bit_len);
 8007556:	4b5f      	ldr	r3, [pc, #380]	@ (80076d4 <main+0x2c0>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007560:	495d      	ldr	r1, [pc, #372]	@ (80076d8 <main+0x2c4>)
 8007562:	4618      	mov	r0, r3
 8007564:	f002 feaa 	bl	800a2bc <siprintf>
					  lcd_show_string(5 * lcddev.width/ 6, lcddev.height/10,200,24,24,len_str,BLACK);
 8007568:	4b5c      	ldr	r3, [pc, #368]	@ (80076dc <main+0x2c8>)
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	4a5c      	ldr	r2, [pc, #368]	@ (80076e8 <main+0x2d4>)
 8007576:	fb82 1203 	smull	r1, r2, r2, r3
 800757a:	17db      	asrs	r3, r3, #31
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	b298      	uxth	r0, r3
 8007580:	4b56      	ldr	r3, [pc, #344]	@ (80076dc <main+0x2c8>)
 8007582:	885b      	ldrh	r3, [r3, #2]
 8007584:	4a56      	ldr	r2, [pc, #344]	@ (80076e0 <main+0x2cc>)
 8007586:	fba2 2303 	umull	r2, r3, r2, r3
 800758a:	08db      	lsrs	r3, r3, #3
 800758c:	b299      	uxth	r1, r3
 800758e:	2300      	movs	r3, #0
 8007590:	9302      	str	r3, [sp, #8]
 8007592:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	2318      	movs	r3, #24
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	2318      	movs	r3, #24
 800759e:	22c8      	movs	r2, #200	@ 0xc8
 80075a0:	f7ff fee8 	bl	8007374 <lcd_show_string>
 80075a4:	e07c      	b.n	80076a0 <main+0x28c>
				  }
			  }
			  else if(button[0].buttonAction == BUTTON_SINGLE){
 80075a6:	4b49      	ldr	r3, [pc, #292]	@ (80076cc <main+0x2b8>)
 80075a8:	7b9b      	ldrb	r3, [r3, #14]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d178      	bne.n	80076a0 <main+0x28c>
				  button[0].buttonAction = BUTTON_NULL;
 80075ae:	4b47      	ldr	r3, [pc, #284]	@ (80076cc <main+0x2b8>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	739a      	strb	r2, [r3, #14]
				  if(bit_len + 1 <= MAX_LENGTH){
 80075b4:	4b47      	ldr	r3, [pc, #284]	@ (80076d4 <main+0x2c0>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b09      	cmp	r3, #9
 80075ba:	d847      	bhi.n	800764c <main+0x238>
					  bit_len += 1;
 80075bc:	4b45      	ldr	r3, [pc, #276]	@ (80076d4 <main+0x2c0>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	3301      	adds	r3, #1
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	4b43      	ldr	r3, [pc, #268]	@ (80076d4 <main+0x2c0>)
 80075c6:	701a      	strb	r2, [r3, #0]
					  lcd_clear_area(WHITE,5*lcddev.width/6,lcddev.height/10,200,24);
 80075c8:	4b44      	ldr	r3, [pc, #272]	@ (80076dc <main+0x2c8>)
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	4613      	mov	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	4a44      	ldr	r2, [pc, #272]	@ (80076e8 <main+0x2d4>)
 80075d6:	fb82 1203 	smull	r1, r2, r2, r3
 80075da:	17db      	asrs	r3, r3, #31
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	b299      	uxth	r1, r3
 80075e0:	4b3e      	ldr	r3, [pc, #248]	@ (80076dc <main+0x2c8>)
 80075e2:	885b      	ldrh	r3, [r3, #2]
 80075e4:	4a3e      	ldr	r2, [pc, #248]	@ (80076e0 <main+0x2cc>)
 80075e6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ea:	08db      	lsrs	r3, r3, #3
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	2318      	movs	r3, #24
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	23c8      	movs	r3, #200	@ 0xc8
 80075f4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80075f8:	f7f9 fb80 	bl	8000cfc <lcd_clear_area>
					  sprintf(len_str,"%d",bit_len);
 80075fc:	4b35      	ldr	r3, [pc, #212]	@ (80076d4 <main+0x2c0>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007606:	4934      	ldr	r1, [pc, #208]	@ (80076d8 <main+0x2c4>)
 8007608:	4618      	mov	r0, r3
 800760a:	f002 fe57 	bl	800a2bc <siprintf>
					  lcd_show_string(5 * lcddev.width/ 6, lcddev.height/10,200,24,24,len_str,BLACK);
 800760e:	4b33      	ldr	r3, [pc, #204]	@ (80076dc <main+0x2c8>)
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	4a33      	ldr	r2, [pc, #204]	@ (80076e8 <main+0x2d4>)
 800761c:	fb82 1203 	smull	r1, r2, r2, r3
 8007620:	17db      	asrs	r3, r3, #31
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	b298      	uxth	r0, r3
 8007626:	4b2d      	ldr	r3, [pc, #180]	@ (80076dc <main+0x2c8>)
 8007628:	885b      	ldrh	r3, [r3, #2]
 800762a:	4a2d      	ldr	r2, [pc, #180]	@ (80076e0 <main+0x2cc>)
 800762c:	fba2 2303 	umull	r2, r3, r2, r3
 8007630:	08db      	lsrs	r3, r3, #3
 8007632:	b299      	uxth	r1, r3
 8007634:	2300      	movs	r3, #0
 8007636:	9302      	str	r3, [sp, #8]
 8007638:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	2318      	movs	r3, #24
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	2318      	movs	r3, #24
 8007644:	22c8      	movs	r2, #200	@ 0xc8
 8007646:	f7ff fe95 	bl	8007374 <lcd_show_string>
 800764a:	e029      	b.n	80076a0 <main+0x28c>
				  }
				  else {
					  lcd_show_string(10, lcddev.height/10 + 100, 200, 24, 24, "Exceeding Maximum Length!", RED);
 800764c:	4b23      	ldr	r3, [pc, #140]	@ (80076dc <main+0x2c8>)
 800764e:	885b      	ldrh	r3, [r3, #2]
 8007650:	4a23      	ldr	r2, [pc, #140]	@ (80076e0 <main+0x2cc>)
 8007652:	fba2 2303 	umull	r2, r3, r2, r3
 8007656:	08db      	lsrs	r3, r3, #3
 8007658:	b29b      	uxth	r3, r3
 800765a:	3364      	adds	r3, #100	@ 0x64
 800765c:	b299      	uxth	r1, r3
 800765e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8007662:	9302      	str	r3, [sp, #8]
 8007664:	4b22      	ldr	r3, [pc, #136]	@ (80076f0 <main+0x2dc>)
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	2318      	movs	r3, #24
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	2318      	movs	r3, #24
 800766e:	22c8      	movs	r2, #200	@ 0xc8
 8007670:	200a      	movs	r0, #10
 8007672:	f7ff fe7f 	bl	8007374 <lcd_show_string>
					  HAL_Delay(2000);
 8007676:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800767a:	f001 f947 	bl	800890c <HAL_Delay>
					  lcd_clear_area(WHITE,10,lcddev.height/10 + 100, 200,40);
 800767e:	4b17      	ldr	r3, [pc, #92]	@ (80076dc <main+0x2c8>)
 8007680:	885b      	ldrh	r3, [r3, #2]
 8007682:	4a17      	ldr	r2, [pc, #92]	@ (80076e0 <main+0x2cc>)
 8007684:	fba2 2303 	umull	r2, r3, r2, r3
 8007688:	08db      	lsrs	r3, r3, #3
 800768a:	b29b      	uxth	r3, r3
 800768c:	3364      	adds	r3, #100	@ 0x64
 800768e:	b29a      	uxth	r2, r3
 8007690:	2328      	movs	r3, #40	@ 0x28
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	23c8      	movs	r3, #200	@ 0xc8
 8007696:	210a      	movs	r1, #10
 8007698:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800769c:	f7f9 fb2e 	bl	8000cfc <lcd_clear_area>
		  while(button[2].buttonAction != BUTTON_LONG_PRESS){
 80076a0:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <main+0x2b8>)
 80076a2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	f47f af29 	bne.w	80074fe <main+0xea>
				  }
			  }
		  }//再次长按KEY_WK_UP退出设置模式
		  button[2].buttonAction = BUTTON_NULL;
 80076ac:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <main+0x2b8>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		  lcd_clear(WHITE);g_back_color = WHITE;
 80076b4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80076b8:	f7ff fcb4 	bl	8007024 <lcd_clear>
 80076bc:	4b04      	ldr	r3, [pc, #16]	@ (80076d0 <main+0x2bc>)
 80076be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	e6bb      	b.n	800743e <main+0x2a>
 80076c6:	bf00      	nop
 80076c8:	200000f4 	.word	0x200000f4
 80076cc:	20000080 	.word	0x20000080
 80076d0:	20000000 	.word	0x20000000
 80076d4:	20000004 	.word	0x20000004
 80076d8:	0800ab44 	.word	0x0800ab44
 80076dc:	200000b0 	.word	0x200000b0
 80076e0:	cccccccd 	.word	0xcccccccd
 80076e4:	0800ab48 	.word	0x0800ab48
 80076e8:	2aaaaaab 	.word	0x2aaaaaab
 80076ec:	0800ab58 	.word	0x0800ab58
 80076f0:	0800ab70 	.word	0x0800ab70
	  }
	  else if(button[2].buttonAction == BUTTON_DOUBLE){
 80076f4:	4bb5      	ldr	r3, [pc, #724]	@ (80079cc <main+0x5b8>)
 80076f6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	f040 813e 	bne.w	800797c <main+0x568>
		  lcd_clear(WHITE);g_back_color = WHITE;
 8007700:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007704:	f7ff fc8e 	bl	8007024 <lcd_clear>
 8007708:	4bb1      	ldr	r3, [pc, #708]	@ (80079d0 <main+0x5bc>)
 800770a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800770e:	601a      	str	r2, [r3, #0]
		  button[2].buttonAction = BUTTON_NULL;
 8007710:	4bae      	ldr	r3, [pc, #696]	@ (80079cc <main+0x5b8>)
 8007712:	2200      	movs	r2, #0
 8007714:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		  char len_str[4];
		  sprintf(len_str,"%d",hamming_len);
 8007718:	4bae      	ldr	r3, [pc, #696]	@ (80079d4 <main+0x5c0>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007722:	49ad      	ldr	r1, [pc, #692]	@ (80079d8 <main+0x5c4>)
 8007724:	4618      	mov	r0, r3
 8007726:	f002 fdc9 	bl	800a2bc <siprintf>
		  lcd_show_string(10,lcddev.height/10,200,24,24,"Hamming Length: ",BLACK);
 800772a:	4bac      	ldr	r3, [pc, #688]	@ (80079dc <main+0x5c8>)
 800772c:	885b      	ldrh	r3, [r3, #2]
 800772e:	4aac      	ldr	r2, [pc, #688]	@ (80079e0 <main+0x5cc>)
 8007730:	fba2 2303 	umull	r2, r3, r2, r3
 8007734:	08db      	lsrs	r3, r3, #3
 8007736:	b299      	uxth	r1, r3
 8007738:	2300      	movs	r3, #0
 800773a:	9302      	str	r3, [sp, #8]
 800773c:	4ba9      	ldr	r3, [pc, #676]	@ (80079e4 <main+0x5d0>)
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	2318      	movs	r3, #24
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	2318      	movs	r3, #24
 8007746:	22c8      	movs	r2, #200	@ 0xc8
 8007748:	200a      	movs	r0, #10
 800774a:	f7ff fe13 	bl	8007374 <lcd_show_string>
		  lcd_show_string(5 * lcddev.width/ 6, lcddev.height/10,200,24,24,len_str,BLACK);
 800774e:	4ba3      	ldr	r3, [pc, #652]	@ (80079dc <main+0x5c8>)
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	4aa3      	ldr	r2, [pc, #652]	@ (80079e8 <main+0x5d4>)
 800775c:	fb82 1203 	smull	r1, r2, r2, r3
 8007760:	17db      	asrs	r3, r3, #31
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	b298      	uxth	r0, r3
 8007766:	4b9d      	ldr	r3, [pc, #628]	@ (80079dc <main+0x5c8>)
 8007768:	885b      	ldrh	r3, [r3, #2]
 800776a:	4a9d      	ldr	r2, [pc, #628]	@ (80079e0 <main+0x5cc>)
 800776c:	fba2 2303 	umull	r2, r3, r2, r3
 8007770:	08db      	lsrs	r3, r3, #3
 8007772:	b299      	uxth	r1, r3
 8007774:	2300      	movs	r3, #0
 8007776:	9302      	str	r3, [sp, #8]
 8007778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	2318      	movs	r3, #24
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	2318      	movs	r3, #24
 8007784:	22c8      	movs	r2, #200	@ 0xc8
 8007786:	f7ff fdf5 	bl	8007374 <lcd_show_string>
		  lcd_show_string(10,lcddev.height/10 + 50,200,16,16,"Maximum Length is 14", BLACK);
 800778a:	4b94      	ldr	r3, [pc, #592]	@ (80079dc <main+0x5c8>)
 800778c:	885b      	ldrh	r3, [r3, #2]
 800778e:	4a94      	ldr	r2, [pc, #592]	@ (80079e0 <main+0x5cc>)
 8007790:	fba2 2303 	umull	r2, r3, r2, r3
 8007794:	08db      	lsrs	r3, r3, #3
 8007796:	b29b      	uxth	r3, r3
 8007798:	3332      	adds	r3, #50	@ 0x32
 800779a:	b299      	uxth	r1, r3
 800779c:	2300      	movs	r3, #0
 800779e:	9302      	str	r3, [sp, #8]
 80077a0:	4b92      	ldr	r3, [pc, #584]	@ (80079ec <main+0x5d8>)
 80077a2:	9301      	str	r3, [sp, #4]
 80077a4:	2310      	movs	r3, #16
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	2310      	movs	r3, #16
 80077aa:	22c8      	movs	r2, #200	@ 0xc8
 80077ac:	200a      	movs	r0, #10
 80077ae:	f7ff fde1 	bl	8007374 <lcd_show_string>
		  while(button[2].buttonAction != BUTTON_DOUBLE){
 80077b2:	e0d0      	b.n	8007956 <main+0x542>
			  //按KEY1减1，按KEY0加1
			  if(button[1].buttonAction == BUTTON_SINGLE){
 80077b4:	4b85      	ldr	r3, [pc, #532]	@ (80079cc <main+0x5b8>)
 80077b6:	7f9b      	ldrb	r3, [r3, #30]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d14f      	bne.n	800785c <main+0x448>
				  button[1].buttonAction = BUTTON_NULL;
 80077bc:	4b83      	ldr	r3, [pc, #524]	@ (80079cc <main+0x5b8>)
 80077be:	2200      	movs	r2, #0
 80077c0:	779a      	strb	r2, [r3, #30]
				  if(hamming_len - 1 >= HAMMING_MIN_LENGTH){
 80077c2:	4b84      	ldr	r3, [pc, #528]	@ (80079d4 <main+0x5c0>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	f240 80c5 	bls.w	8007956 <main+0x542>
					  hamming_len -= 1;
 80077cc:	4b81      	ldr	r3, [pc, #516]	@ (80079d4 <main+0x5c0>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	4b7f      	ldr	r3, [pc, #508]	@ (80079d4 <main+0x5c0>)
 80077d6:	701a      	strb	r2, [r3, #0]
					  lcd_clear_area(WHITE,5*lcddev.width/6,lcddev.height/10,200,24);
 80077d8:	4b80      	ldr	r3, [pc, #512]	@ (80079dc <main+0x5c8>)
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	461a      	mov	r2, r3
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	4a80      	ldr	r2, [pc, #512]	@ (80079e8 <main+0x5d4>)
 80077e6:	fb82 1203 	smull	r1, r2, r2, r3
 80077ea:	17db      	asrs	r3, r3, #31
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	b299      	uxth	r1, r3
 80077f0:	4b7a      	ldr	r3, [pc, #488]	@ (80079dc <main+0x5c8>)
 80077f2:	885b      	ldrh	r3, [r3, #2]
 80077f4:	4a7a      	ldr	r2, [pc, #488]	@ (80079e0 <main+0x5cc>)
 80077f6:	fba2 2303 	umull	r2, r3, r2, r3
 80077fa:	08db      	lsrs	r3, r3, #3
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	2318      	movs	r3, #24
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	23c8      	movs	r3, #200	@ 0xc8
 8007804:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007808:	f7f9 fa78 	bl	8000cfc <lcd_clear_area>
					  sprintf(len_str,"%d",hamming_len);
 800780c:	4b71      	ldr	r3, [pc, #452]	@ (80079d4 <main+0x5c0>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007816:	4970      	ldr	r1, [pc, #448]	@ (80079d8 <main+0x5c4>)
 8007818:	4618      	mov	r0, r3
 800781a:	f002 fd4f 	bl	800a2bc <siprintf>
					  lcd_show_string(5 * lcddev.width/ 6, lcddev.height/10,200,24,24,len_str,BLACK);
 800781e:	4b6f      	ldr	r3, [pc, #444]	@ (80079dc <main+0x5c8>)
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	4613      	mov	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	4a6f      	ldr	r2, [pc, #444]	@ (80079e8 <main+0x5d4>)
 800782c:	fb82 1203 	smull	r1, r2, r2, r3
 8007830:	17db      	asrs	r3, r3, #31
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	b298      	uxth	r0, r3
 8007836:	4b69      	ldr	r3, [pc, #420]	@ (80079dc <main+0x5c8>)
 8007838:	885b      	ldrh	r3, [r3, #2]
 800783a:	4a69      	ldr	r2, [pc, #420]	@ (80079e0 <main+0x5cc>)
 800783c:	fba2 2303 	umull	r2, r3, r2, r3
 8007840:	08db      	lsrs	r3, r3, #3
 8007842:	b299      	uxth	r1, r3
 8007844:	2300      	movs	r3, #0
 8007846:	9302      	str	r3, [sp, #8]
 8007848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	2318      	movs	r3, #24
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	2318      	movs	r3, #24
 8007854:	22c8      	movs	r2, #200	@ 0xc8
 8007856:	f7ff fd8d 	bl	8007374 <lcd_show_string>
 800785a:	e07c      	b.n	8007956 <main+0x542>
				  }
			  }
			  else if(button[0].buttonAction == BUTTON_SINGLE){
 800785c:	4b5b      	ldr	r3, [pc, #364]	@ (80079cc <main+0x5b8>)
 800785e:	7b9b      	ldrb	r3, [r3, #14]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d178      	bne.n	8007956 <main+0x542>
				  button[0].buttonAction = BUTTON_NULL;
 8007864:	4b59      	ldr	r3, [pc, #356]	@ (80079cc <main+0x5b8>)
 8007866:	2200      	movs	r2, #0
 8007868:	739a      	strb	r2, [r3, #14]
					  if(hamming_len + 1 <= HAMMING_MAX_LENGTH){
 800786a:	4b5a      	ldr	r3, [pc, #360]	@ (80079d4 <main+0x5c0>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b0d      	cmp	r3, #13
 8007870:	d847      	bhi.n	8007902 <main+0x4ee>
						  hamming_len += 1;
 8007872:	4b58      	ldr	r3, [pc, #352]	@ (80079d4 <main+0x5c0>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	3301      	adds	r3, #1
 8007878:	b2da      	uxtb	r2, r3
 800787a:	4b56      	ldr	r3, [pc, #344]	@ (80079d4 <main+0x5c0>)
 800787c:	701a      	strb	r2, [r3, #0]
						  lcd_clear_area(WHITE,5*lcddev.width/6,lcddev.height/10,200,24);
 800787e:	4b57      	ldr	r3, [pc, #348]	@ (80079dc <main+0x5c8>)
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	4a57      	ldr	r2, [pc, #348]	@ (80079e8 <main+0x5d4>)
 800788c:	fb82 1203 	smull	r1, r2, r2, r3
 8007890:	17db      	asrs	r3, r3, #31
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	b299      	uxth	r1, r3
 8007896:	4b51      	ldr	r3, [pc, #324]	@ (80079dc <main+0x5c8>)
 8007898:	885b      	ldrh	r3, [r3, #2]
 800789a:	4a51      	ldr	r2, [pc, #324]	@ (80079e0 <main+0x5cc>)
 800789c:	fba2 2303 	umull	r2, r3, r2, r3
 80078a0:	08db      	lsrs	r3, r3, #3
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	2318      	movs	r3, #24
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	23c8      	movs	r3, #200	@ 0xc8
 80078aa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80078ae:	f7f9 fa25 	bl	8000cfc <lcd_clear_area>
						  sprintf(len_str,"%d",hamming_len);
 80078b2:	4b48      	ldr	r3, [pc, #288]	@ (80079d4 <main+0x5c0>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078bc:	4946      	ldr	r1, [pc, #280]	@ (80079d8 <main+0x5c4>)
 80078be:	4618      	mov	r0, r3
 80078c0:	f002 fcfc 	bl	800a2bc <siprintf>
						  lcd_show_string(5 * lcddev.width/ 6, lcddev.height/10,200,24,24,len_str,BLACK);
 80078c4:	4b45      	ldr	r3, [pc, #276]	@ (80079dc <main+0x5c8>)
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	4a45      	ldr	r2, [pc, #276]	@ (80079e8 <main+0x5d4>)
 80078d2:	fb82 1203 	smull	r1, r2, r2, r3
 80078d6:	17db      	asrs	r3, r3, #31
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	b298      	uxth	r0, r3
 80078dc:	4b3f      	ldr	r3, [pc, #252]	@ (80079dc <main+0x5c8>)
 80078de:	885b      	ldrh	r3, [r3, #2]
 80078e0:	4a3f      	ldr	r2, [pc, #252]	@ (80079e0 <main+0x5cc>)
 80078e2:	fba2 2303 	umull	r2, r3, r2, r3
 80078e6:	08db      	lsrs	r3, r3, #3
 80078e8:	b299      	uxth	r1, r3
 80078ea:	2300      	movs	r3, #0
 80078ec:	9302      	str	r3, [sp, #8]
 80078ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	2318      	movs	r3, #24
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	2318      	movs	r3, #24
 80078fa:	22c8      	movs	r2, #200	@ 0xc8
 80078fc:	f7ff fd3a 	bl	8007374 <lcd_show_string>
 8007900:	e029      	b.n	8007956 <main+0x542>
					  }
					  else{
						  lcd_show_string(10, lcddev.height/10 + 100, 200, 24, 24, "Exceeding Maximum Length!", RED);
 8007902:	4b36      	ldr	r3, [pc, #216]	@ (80079dc <main+0x5c8>)
 8007904:	885b      	ldrh	r3, [r3, #2]
 8007906:	4a36      	ldr	r2, [pc, #216]	@ (80079e0 <main+0x5cc>)
 8007908:	fba2 2303 	umull	r2, r3, r2, r3
 800790c:	08db      	lsrs	r3, r3, #3
 800790e:	b29b      	uxth	r3, r3
 8007910:	3364      	adds	r3, #100	@ 0x64
 8007912:	b299      	uxth	r1, r3
 8007914:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8007918:	9302      	str	r3, [sp, #8]
 800791a:	4b35      	ldr	r3, [pc, #212]	@ (80079f0 <main+0x5dc>)
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	2318      	movs	r3, #24
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	2318      	movs	r3, #24
 8007924:	22c8      	movs	r2, #200	@ 0xc8
 8007926:	200a      	movs	r0, #10
 8007928:	f7ff fd24 	bl	8007374 <lcd_show_string>
						  HAL_Delay(2000);
 800792c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007930:	f000 ffec 	bl	800890c <HAL_Delay>
						  lcd_clear_area(WHITE,10,lcddev.height/10 + 100, 200,40);
 8007934:	4b29      	ldr	r3, [pc, #164]	@ (80079dc <main+0x5c8>)
 8007936:	885b      	ldrh	r3, [r3, #2]
 8007938:	4a29      	ldr	r2, [pc, #164]	@ (80079e0 <main+0x5cc>)
 800793a:	fba2 2303 	umull	r2, r3, r2, r3
 800793e:	08db      	lsrs	r3, r3, #3
 8007940:	b29b      	uxth	r3, r3
 8007942:	3364      	adds	r3, #100	@ 0x64
 8007944:	b29a      	uxth	r2, r3
 8007946:	2328      	movs	r3, #40	@ 0x28
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	23c8      	movs	r3, #200	@ 0xc8
 800794c:	210a      	movs	r1, #10
 800794e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007952:	f7f9 f9d3 	bl	8000cfc <lcd_clear_area>
		  while(button[2].buttonAction != BUTTON_DOUBLE){
 8007956:	4b1d      	ldr	r3, [pc, #116]	@ (80079cc <main+0x5b8>)
 8007958:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800795c:	2b02      	cmp	r3, #2
 800795e:	f47f af29 	bne.w	80077b4 <main+0x3a0>
					  }
				  }
			  }
		  button[2].buttonAction = BUTTON_NULL;
 8007962:	4b1a      	ldr	r3, [pc, #104]	@ (80079cc <main+0x5b8>)
 8007964:	2200      	movs	r2, #0
 8007966:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		  lcd_clear(WHITE);g_back_color = WHITE;
 800796a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800796e:	f7ff fb59 	bl	8007024 <lcd_clear>
 8007972:	4b17      	ldr	r3, [pc, #92]	@ (80079d0 <main+0x5bc>)
 8007974:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	e560      	b.n	800743e <main+0x2a>
	  }//双击KEY_WK_UP设置HAMMING码长度
	  else{
		  //切换Encoding和Decoding模
		  if(button[2].buttonAction == BUTTON_SINGLE){
 800797c:	4b13      	ldr	r3, [pc, #76]	@ (80079cc <main+0x5b8>)
 800797e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007982:	2b01      	cmp	r3, #1
 8007984:	d162      	bne.n	8007a4c <main+0x638>
			  button[2].buttonAction = BUTTON_NULL;
 8007986:	4b11      	ldr	r3, [pc, #68]	@ (80079cc <main+0x5b8>)
 8007988:	2200      	movs	r2, #0
 800798a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			  if(mode == ENCODING){
 800798e:	4b19      	ldr	r3, [pc, #100]	@ (80079f4 <main+0x5e0>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d134      	bne.n	8007a00 <main+0x5ec>
				  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8007996:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800799a:	4817      	ldr	r0, [pc, #92]	@ (80079f8 <main+0x5e4>)
 800799c:	f001 faab 	bl	8008ef6 <HAL_GPIO_TogglePin>
				  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80079a0:	2104      	movs	r1, #4
 80079a2:	4816      	ldr	r0, [pc, #88]	@ (80079fc <main+0x5e8>)
 80079a4:	f001 faa7 	bl	8008ef6 <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 80079a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80079ac:	f000 ffae 	bl	800890c <HAL_Delay>
				  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 80079b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80079b4:	4810      	ldr	r0, [pc, #64]	@ (80079f8 <main+0x5e4>)
 80079b6:	f001 fa9e 	bl	8008ef6 <HAL_GPIO_TogglePin>
				  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80079ba:	2104      	movs	r1, #4
 80079bc:	480f      	ldr	r0, [pc, #60]	@ (80079fc <main+0x5e8>)
 80079be:	f001 fa9a 	bl	8008ef6 <HAL_GPIO_TogglePin>
				  mode = DECODING;
 80079c2:	4b0c      	ldr	r3, [pc, #48]	@ (80079f4 <main+0x5e0>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	701a      	strb	r2, [r3, #0]
 80079c8:	e040      	b.n	8007a4c <main+0x638>
 80079ca:	bf00      	nop
 80079cc:	20000080 	.word	0x20000080
 80079d0:	20000000 	.word	0x20000000
 80079d4:	20000005 	.word	0x20000005
 80079d8:	0800ab44 	.word	0x0800ab44
 80079dc:	200000b0 	.word	0x200000b0
 80079e0:	cccccccd 	.word	0xcccccccd
 80079e4:	0800ab8c 	.word	0x0800ab8c
 80079e8:	2aaaaaab 	.word	0x2aaaaaab
 80079ec:	0800aba0 	.word	0x0800aba0
 80079f0:	0800ab70 	.word	0x0800ab70
 80079f4:	20000006 	.word	0x20000006
 80079f8:	40010800 	.word	0x40010800
 80079fc:	40011400 	.word	0x40011400
			  }
			  else{
				  for(uint8_t i = 0; i < 3; i ++){
 8007a00:	2300      	movs	r3, #0
 8007a02:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007a06:	e011      	b.n	8007a2c <main+0x618>
					  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8007a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007a0c:	48be      	ldr	r0, [pc, #760]	@ (8007d08 <main+0x8f4>)
 8007a0e:	f001 fa72 	bl	8008ef6 <HAL_GPIO_TogglePin>
					  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8007a12:	2104      	movs	r1, #4
 8007a14:	48bd      	ldr	r0, [pc, #756]	@ (8007d0c <main+0x8f8>)
 8007a16:	f001 fa6e 	bl	8008ef6 <HAL_GPIO_TogglePin>
					  HAL_Delay(500);
 8007a1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007a1e:	f000 ff75 	bl	800890c <HAL_Delay>
				  for(uint8_t i = 0; i < 3; i ++){
 8007a22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007a26:	3301      	adds	r3, #1
 8007a28:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007a2c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d9e9      	bls.n	8007a08 <main+0x5f4>
				  }
				  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8007a34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007a38:	48b3      	ldr	r0, [pc, #716]	@ (8007d08 <main+0x8f4>)
 8007a3a:	f001 fa5c 	bl	8008ef6 <HAL_GPIO_TogglePin>
				  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8007a3e:	2104      	movs	r1, #4
 8007a40:	48b2      	ldr	r0, [pc, #712]	@ (8007d0c <main+0x8f8>)
 8007a42:	f001 fa58 	bl	8008ef6 <HAL_GPIO_TogglePin>
				  mode = ENCODING;
 8007a46:	4bb2      	ldr	r3, [pc, #712]	@ (8007d10 <main+0x8fc>)
 8007a48:	2201      	movs	r2, #1
 8007a4a:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if(mode == ENCODING){
 8007a4c:	4bb0      	ldr	r3, [pc, #704]	@ (8007d10 <main+0x8fc>)
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	f040 80b5 	bne.w	8007bc0 <main+0x7ac>
			  lcd_clear(WHITE);g_back_color = WHITE;
 8007a56:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007a5a:	f7ff fae3 	bl	8007024 <lcd_clear>
 8007a5e:	4bad      	ldr	r3, [pc, #692]	@ (8007d14 <main+0x900>)
 8007a60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a64:	601a      	str	r2, [r3, #0]
			  lcd_divide();
 8007a66:	f7f9 f83d 	bl	8000ae4 <lcd_divide>
			  lcd_picture_mode(ENCODING);
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	f7f9 f89a 	bl	8000ba4 <lcd_picture_mode>
			  uint8_t flag = 0; //flag检查是否已经输入完成
 8007a70:	2300      	movs	r3, #0
 8007a72:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
			  while(button[2].buttonAction != BUTTON_SINGLE && button[2].buttonAction != BUTTON_LONG_PRESS && button[2].buttonAction != BUTTON_DOUBLE){
 8007a76:	e090      	b.n	8007b9a <main+0x786>
				  uint8_t input_size = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				  while(input_size < bit_len && flag == 0 && button[2].buttonAction != BUTTON_SINGLE && button[2].buttonAction != BUTTON_LONG_PRESS && button[2].buttonAction != BUTTON_DOUBLE){
 8007a7e:	e041      	b.n	8007b04 <main+0x6f0>
					  if(button[0].buttonAction == BUTTON_SINGLE){//KEY0输入0，KEY1输入1
 8007a80:	4ba5      	ldr	r3, [pc, #660]	@ (8007d18 <main+0x904>)
 8007a82:	7b9b      	ldrb	r3, [r3, #14]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d11b      	bne.n	8007ac0 <main+0x6ac>
						  button[0].buttonAction = BUTTON_NULL;
 8007a88:	4ba3      	ldr	r3, [pc, #652]	@ (8007d18 <main+0x904>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	739a      	strb	r2, [r3, #14]
						  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8007a8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007a92:	489d      	ldr	r0, [pc, #628]	@ (8007d08 <main+0x8f4>)
 8007a94:	f001 fa2f 	bl	8008ef6 <HAL_GPIO_TogglePin>
						  HAL_Delay(500);
 8007a98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007a9c:	f000 ff36 	bl	800890c <HAL_Delay>
						  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8007aa0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007aa4:	4898      	ldr	r0, [pc, #608]	@ (8007d08 <main+0x8f4>)
 8007aa6:	f001 fa26 	bl	8008ef6 <HAL_GPIO_TogglePin>
						  or_data[input_size] = '0';
 8007aaa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007aae:	4a9b      	ldr	r2, [pc, #620]	@ (8007d1c <main+0x908>)
 8007ab0:	2130      	movs	r1, #48	@ 0x30
 8007ab2:	54d1      	strb	r1, [r2, r3]
						  input_size++;
 8007ab4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007ab8:	3301      	adds	r3, #1
 8007aba:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8007abe:	e01c      	b.n	8007afa <main+0x6e6>
					  }
					  else if(button[1].buttonAction == BUTTON_SINGLE){
 8007ac0:	4b95      	ldr	r3, [pc, #596]	@ (8007d18 <main+0x904>)
 8007ac2:	7f9b      	ldrb	r3, [r3, #30]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d118      	bne.n	8007afa <main+0x6e6>
						  button[1].buttonAction = BUTTON_NULL;
 8007ac8:	4b93      	ldr	r3, [pc, #588]	@ (8007d18 <main+0x904>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	779a      	strb	r2, [r3, #30]
						  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8007ace:	2104      	movs	r1, #4
 8007ad0:	488e      	ldr	r0, [pc, #568]	@ (8007d0c <main+0x8f8>)
 8007ad2:	f001 fa10 	bl	8008ef6 <HAL_GPIO_TogglePin>
						  HAL_Delay(500);
 8007ad6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007ada:	f000 ff17 	bl	800890c <HAL_Delay>
						  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8007ade:	2104      	movs	r1, #4
 8007ae0:	488a      	ldr	r0, [pc, #552]	@ (8007d0c <main+0x8f8>)
 8007ae2:	f001 fa08 	bl	8008ef6 <HAL_GPIO_TogglePin>
						  or_data[input_size] = '1';
 8007ae6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007aea:	4a8c      	ldr	r2, [pc, #560]	@ (8007d1c <main+0x908>)
 8007aec:	2131      	movs	r1, #49	@ 0x31
 8007aee:	54d1      	strb	r1, [r2, r3]
						  input_size++;
 8007af0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007af4:	3301      	adds	r3, #1
 8007af6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
					  }
					  or_data[input_size] = '\0';
 8007afa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007afe:	4a87      	ldr	r2, [pc, #540]	@ (8007d1c <main+0x908>)
 8007b00:	2100      	movs	r1, #0
 8007b02:	54d1      	strb	r1, [r2, r3]
				  while(input_size < bit_len && flag == 0 && button[2].buttonAction != BUTTON_SINGLE && button[2].buttonAction != BUTTON_LONG_PRESS && button[2].buttonAction != BUTTON_DOUBLE){
 8007b04:	4b86      	ldr	r3, [pc, #536]	@ (8007d20 <main+0x90c>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d212      	bcs.n	8007b36 <main+0x722>
 8007b10:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10e      	bne.n	8007b36 <main+0x722>
 8007b18:	4b7f      	ldr	r3, [pc, #508]	@ (8007d18 <main+0x904>)
 8007b1a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d009      	beq.n	8007b36 <main+0x722>
 8007b22:	4b7d      	ldr	r3, [pc, #500]	@ (8007d18 <main+0x904>)
 8007b24:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d004      	beq.n	8007b36 <main+0x722>
 8007b2c:	4b7a      	ldr	r3, [pc, #488]	@ (8007d18 <main+0x904>)
 8007b2e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d1a4      	bne.n	8007a80 <main+0x66c>
				  }
				  flag = 1;
 8007b36:	2301      	movs	r3, #1
 8007b38:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
				  lcd_show_string(10,lcddev.height/10 + 60, 200, 24,24,or_data,BLACK);
 8007b3c:	4b79      	ldr	r3, [pc, #484]	@ (8007d24 <main+0x910>)
 8007b3e:	885b      	ldrh	r3, [r3, #2]
 8007b40:	4a79      	ldr	r2, [pc, #484]	@ (8007d28 <main+0x914>)
 8007b42:	fba2 2303 	umull	r2, r3, r2, r3
 8007b46:	08db      	lsrs	r3, r3, #3
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	333c      	adds	r3, #60	@ 0x3c
 8007b4c:	b299      	uxth	r1, r3
 8007b4e:	2300      	movs	r3, #0
 8007b50:	9302      	str	r3, [sp, #8]
 8007b52:	4b72      	ldr	r3, [pc, #456]	@ (8007d1c <main+0x908>)
 8007b54:	9301      	str	r3, [sp, #4]
 8007b56:	2318      	movs	r3, #24
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	2318      	movs	r3, #24
 8007b5c:	22c8      	movs	r2, #200	@ 0xc8
 8007b5e:	200a      	movs	r0, #10
 8007b60:	f7ff fc08 	bl	8007374 <lcd_show_string>
				  //Hamming Code编码
				  encoded_data = HAMMING_ENCODE(or_data);
 8007b64:	486d      	ldr	r0, [pc, #436]	@ (8007d1c <main+0x908>)
 8007b66:	f000 fb4b 	bl	8008200 <HAMMING_ENCODE>
 8007b6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				  lcd_show_string(10,2*lcddev.height/5 + 30, 200, 24,24,encoded_data,BLACK);
 8007b6c:	4b6d      	ldr	r3, [pc, #436]	@ (8007d24 <main+0x910>)
 8007b6e:	885b      	ldrh	r3, [r3, #2]
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	4a6e      	ldr	r2, [pc, #440]	@ (8007d2c <main+0x918>)
 8007b74:	fb82 1203 	smull	r1, r2, r2, r3
 8007b78:	1052      	asrs	r2, r2, #1
 8007b7a:	17db      	asrs	r3, r3, #31
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	331e      	adds	r3, #30
 8007b82:	b299      	uxth	r1, r3
 8007b84:	2300      	movs	r3, #0
 8007b86:	9302      	str	r3, [sp, #8]
 8007b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	2318      	movs	r3, #24
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	2318      	movs	r3, #24
 8007b92:	22c8      	movs	r2, #200	@ 0xc8
 8007b94:	200a      	movs	r0, #10
 8007b96:	f7ff fbed 	bl	8007374 <lcd_show_string>
			  while(button[2].buttonAction != BUTTON_SINGLE && button[2].buttonAction != BUTTON_LONG_PRESS && button[2].buttonAction != BUTTON_DOUBLE){
 8007b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8007d18 <main+0x904>)
 8007b9c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	f43f ac4c 	beq.w	800743e <main+0x2a>
 8007ba6:	4b5c      	ldr	r3, [pc, #368]	@ (8007d18 <main+0x904>)
 8007ba8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	f43f ac46 	beq.w	800743e <main+0x2a>
 8007bb2:	4b59      	ldr	r3, [pc, #356]	@ (8007d18 <main+0x904>)
 8007bb4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	f47f af5d 	bne.w	8007a78 <main+0x664>
 8007bbe:	e43e      	b.n	800743e <main+0x2a>
			  }

		  }
		  else {
 8007bc0:	466b      	mov	r3, sp
 8007bc2:	607b      	str	r3, [r7, #4]
			  lcd_clear(WHITE);g_back_color = WHITE;
 8007bc4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007bc8:	f7ff fa2c 	bl	8007024 <lcd_clear>
 8007bcc:	4b51      	ldr	r3, [pc, #324]	@ (8007d14 <main+0x900>)
 8007bce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007bd2:	601a      	str	r2, [r3, #0]
			  lcd_divide();
 8007bd4:	f7f8 ff86 	bl	8000ae4 <lcd_divide>
			  lcd_picture_mode(DECODING);
 8007bd8:	2000      	movs	r0, #0
 8007bda:	f7f8 ffe3 	bl	8000ba4 <lcd_picture_mode>
			  uint8_t flag = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			  //显示冗余位数量
			  char parity_bit[2];
			  parity_bit[0] = calculate_redundant_bits(hamming_len,DECODING) + '0';
 8007be4:	4b52      	ldr	r3, [pc, #328]	@ (8007d30 <main+0x91c>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2100      	movs	r1, #0
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fabe 	bl	800816c <calculate_redundant_bits>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	3330      	adds	r3, #48	@ 0x30
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f887 3020 	strb.w	r3, [r7, #32]
			  parity_bit[1] = '\0';
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			  char result[strlen("with ") + strlen(parity_bit) + strlen(" bits") + 1];  // 动态调整 result 大小
 8007c00:	f107 0320 	add.w	r3, r7, #32
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7f8 fb0f 	bl	8000228 <strlen>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f103 010b 	add.w	r1, r3, #11
 8007c10:	460b      	mov	r3, r1
 8007c12:	3b01      	subs	r3, #1
 8007c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c16:	2300      	movs	r3, #0
 8007c18:	4688      	mov	r8, r1
 8007c1a:	4699      	mov	r9, r3
 8007c1c:	f04f 0200 	mov.w	r2, #0
 8007c20:	f04f 0300 	mov.w	r3, #0
 8007c24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c30:	2300      	movs	r3, #0
 8007c32:	468a      	mov	sl, r1
 8007c34:	469b      	mov	fp, r3
 8007c36:	f04f 0200 	mov.w	r2, #0
 8007c3a:	f04f 0300 	mov.w	r3, #0
 8007c3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c42:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c4a:	1dcb      	adds	r3, r1, #7
 8007c4c:	08db      	lsrs	r3, r3, #3
 8007c4e:	00db      	lsls	r3, r3, #3
 8007c50:	ebad 0d03 	sub.w	sp, sp, r3
 8007c54:	ab04      	add	r3, sp, #16
 8007c56:	3300      	adds	r3, #0
 8007c58:	643b      	str	r3, [r7, #64]	@ 0x40
			  strcpy(result, "with ");
 8007c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c5c:	4a35      	ldr	r2, [pc, #212]	@ (8007d34 <main+0x920>)
 8007c5e:	6810      	ldr	r0, [r2, #0]
 8007c60:	6018      	str	r0, [r3, #0]
 8007c62:	8892      	ldrh	r2, [r2, #4]
 8007c64:	809a      	strh	r2, [r3, #4]
			  strcat(result, parity_bit);
 8007c66:	f107 0320 	add.w	r3, r7, #32
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007c6e:	f002 fb4d 	bl	800a30c <strcat>
			  strcat(result, " bits");
 8007c72:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007c74:	f7f8 fad8 	bl	8000228 <strlen>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c7e:	4413      	add	r3, r2
 8007c80:	4a2d      	ldr	r2, [pc, #180]	@ (8007d38 <main+0x924>)
 8007c82:	6810      	ldr	r0, [r2, #0]
 8007c84:	6018      	str	r0, [r3, #0]
 8007c86:	8892      	ldrh	r2, [r2, #4]
 8007c88:	809a      	strh	r2, [r3, #4]
			  lcd_show_string(lcddev.width/2,2*lcddev.height/5+10,100,16,16,result,BLACK);
 8007c8a:	4b26      	ldr	r3, [pc, #152]	@ (8007d24 <main+0x910>)
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	085b      	lsrs	r3, r3, #1
 8007c90:	b298      	uxth	r0, r3
 8007c92:	4b24      	ldr	r3, [pc, #144]	@ (8007d24 <main+0x910>)
 8007c94:	885b      	ldrh	r3, [r3, #2]
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	4a24      	ldr	r2, [pc, #144]	@ (8007d2c <main+0x918>)
 8007c9a:	fb82 1203 	smull	r1, r2, r2, r3
 8007c9e:	1052      	asrs	r2, r2, #1
 8007ca0:	17db      	asrs	r3, r3, #31
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	330a      	adds	r3, #10
 8007ca8:	b299      	uxth	r1, r3
 8007caa:	2300      	movs	r3, #0
 8007cac:	9302      	str	r3, [sp, #8]
 8007cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cb0:	9301      	str	r3, [sp, #4]
 8007cb2:	2310      	movs	r3, #16
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	2310      	movs	r3, #16
 8007cb8:	2264      	movs	r2, #100	@ 0x64
 8007cba:	f7ff fb5b 	bl	8007374 <lcd_show_string>
//			  lcd_show_string(10,lcddev.height/10 + 60, 200, 24,24,or_data,BLACK);
//			  if(encoded_data != NULL){lcd_show_string(10,2*lcddev.height/5 + 30, 200, 24,24,encoded_data,BLACK);}
			  while(button[2].buttonAction != BUTTON_SINGLE && button[2].buttonAction != BUTTON_LONG_PRESS && button[2].buttonAction != BUTTON_DOUBLE){
 8007cbe:	e1d2      	b.n	8008066 <main+0xc52>
				  uint8_t input_size = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
				  while(input_size < hamming_len && flag == 0 && button[2].buttonAction != BUTTON_SINGLE && button[2].buttonAction != BUTTON_LONG_PRESS && button[2].buttonAction != BUTTON_DOUBLE ){
 8007cc6:	e05d      	b.n	8007d84 <main+0x970>
					  if(button[0].buttonAction == BUTTON_SINGLE){
 8007cc8:	4b13      	ldr	r3, [pc, #76]	@ (8007d18 <main+0x904>)
 8007cca:	7b9b      	ldrb	r3, [r3, #14]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d137      	bne.n	8007d40 <main+0x92c>
						  button[0].buttonAction = BUTTON_NULL;
 8007cd0:	4b11      	ldr	r3, [pc, #68]	@ (8007d18 <main+0x904>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	739a      	strb	r2, [r3, #14]
						  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8007cd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007cda:	480b      	ldr	r0, [pc, #44]	@ (8007d08 <main+0x8f4>)
 8007cdc:	f001 f90b 	bl	8008ef6 <HAL_GPIO_TogglePin>
						  HAL_Delay(500);
 8007ce0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007ce4:	f000 fe12 	bl	800890c <HAL_Delay>
						  HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8007ce8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007cec:	4806      	ldr	r0, [pc, #24]	@ (8007d08 <main+0x8f4>)
 8007cee:	f001 f902 	bl	8008ef6 <HAL_GPIO_TogglePin>
						  or_hamming[input_size] = '0';
 8007cf2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007cf6:	4a11      	ldr	r2, [pc, #68]	@ (8007d3c <main+0x928>)
 8007cf8:	2130      	movs	r1, #48	@ 0x30
 8007cfa:	54d1      	strb	r1, [r2, r3]
						  input_size++;
 8007cfc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007d00:	3301      	adds	r3, #1
 8007d02:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8007d06:	e038      	b.n	8007d7a <main+0x966>
 8007d08:	40010800 	.word	0x40010800
 8007d0c:	40011400 	.word	0x40011400
 8007d10:	20000006 	.word	0x20000006
 8007d14:	20000000 	.word	0x20000000
 8007d18:	20000080 	.word	0x20000080
 8007d1c:	200000d4 	.word	0x200000d4
 8007d20:	20000004 	.word	0x20000004
 8007d24:	200000b0 	.word	0x200000b0
 8007d28:	cccccccd 	.word	0xcccccccd
 8007d2c:	66666667 	.word	0x66666667
 8007d30:	20000005 	.word	0x20000005
 8007d34:	0800abb8 	.word	0x0800abb8
 8007d38:	0800abc0 	.word	0x0800abc0
 8007d3c:	200000e0 	.word	0x200000e0
					  }
					  else if(button[1].buttonAction == BUTTON_SINGLE){
 8007d40:	4bac      	ldr	r3, [pc, #688]	@ (8007ff4 <main+0xbe0>)
 8007d42:	7f9b      	ldrb	r3, [r3, #30]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d118      	bne.n	8007d7a <main+0x966>
						  button[1].buttonAction = BUTTON_NULL;
 8007d48:	4baa      	ldr	r3, [pc, #680]	@ (8007ff4 <main+0xbe0>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	779a      	strb	r2, [r3, #30]
						  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8007d4e:	2104      	movs	r1, #4
 8007d50:	48a9      	ldr	r0, [pc, #676]	@ (8007ff8 <main+0xbe4>)
 8007d52:	f001 f8d0 	bl	8008ef6 <HAL_GPIO_TogglePin>
						  HAL_Delay(500);
 8007d56:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007d5a:	f000 fdd7 	bl	800890c <HAL_Delay>
						  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8007d5e:	2104      	movs	r1, #4
 8007d60:	48a5      	ldr	r0, [pc, #660]	@ (8007ff8 <main+0xbe4>)
 8007d62:	f001 f8c8 	bl	8008ef6 <HAL_GPIO_TogglePin>
						  or_hamming[input_size] = '1';
 8007d66:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007d6a:	4aa4      	ldr	r2, [pc, #656]	@ (8007ffc <main+0xbe8>)
 8007d6c:	2131      	movs	r1, #49	@ 0x31
 8007d6e:	54d1      	strb	r1, [r2, r3]
						  input_size++;
 8007d70:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007d74:	3301      	adds	r3, #1
 8007d76:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
					  }
					  or_hamming[input_size] = '\0';
 8007d7a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007d7e:	4a9f      	ldr	r2, [pc, #636]	@ (8007ffc <main+0xbe8>)
 8007d80:	2100      	movs	r1, #0
 8007d82:	54d1      	strb	r1, [r2, r3]
				  while(input_size < hamming_len && flag == 0 && button[2].buttonAction != BUTTON_SINGLE && button[2].buttonAction != BUTTON_LONG_PRESS && button[2].buttonAction != BUTTON_DOUBLE ){
 8007d84:	4b9e      	ldr	r3, [pc, #632]	@ (8008000 <main+0xbec>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d212      	bcs.n	8007db6 <main+0x9a2>
 8007d90:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10e      	bne.n	8007db6 <main+0x9a2>
 8007d98:	4b96      	ldr	r3, [pc, #600]	@ (8007ff4 <main+0xbe0>)
 8007d9a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d009      	beq.n	8007db6 <main+0x9a2>
 8007da2:	4b94      	ldr	r3, [pc, #592]	@ (8007ff4 <main+0xbe0>)
 8007da4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d004      	beq.n	8007db6 <main+0x9a2>
 8007dac:	4b91      	ldr	r3, [pc, #580]	@ (8007ff4 <main+0xbe0>)
 8007dae:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d188      	bne.n	8007cc8 <main+0x8b4>
				  }
				  if(flag == 0){//只用显示一次
 8007db6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f040 8150 	bne.w	8008060 <main+0xc4c>
					  lcd_show_string(10,2*lcddev.height/5 + 30, 200, 24,24,or_hamming,BLACK);
 8007dc0:	4b90      	ldr	r3, [pc, #576]	@ (8008004 <main+0xbf0>)
 8007dc2:	885b      	ldrh	r3, [r3, #2]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	4a90      	ldr	r2, [pc, #576]	@ (8008008 <main+0xbf4>)
 8007dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8007dcc:	1052      	asrs	r2, r2, #1
 8007dce:	17db      	asrs	r3, r3, #31
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	331e      	adds	r3, #30
 8007dd6:	b299      	uxth	r1, r3
 8007dd8:	2300      	movs	r3, #0
 8007dda:	9302      	str	r3, [sp, #8]
 8007ddc:	4b87      	ldr	r3, [pc, #540]	@ (8007ffc <main+0xbe8>)
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	2318      	movs	r3, #24
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	2318      	movs	r3, #24
 8007de6:	22c8      	movs	r2, #200	@ 0xc8
 8007de8:	200a      	movs	r0, #10
 8007dea:	f7ff fac3 	bl	8007374 <lcd_show_string>
					  char *decode = HAMMING_DECODE(or_hamming);
 8007dee:	4883      	ldr	r0, [pc, #524]	@ (8007ffc <main+0xbe8>)
 8007df0:	f000 fa90 	bl	8008314 <HAMMING_DECODE>
 8007df4:	63f8      	str	r0, [r7, #60]	@ 0x3c
					  lcd_show_string(10,lcddev.height/10 + 60, 200, 24,24,decode,BLACK);
 8007df6:	4b83      	ldr	r3, [pc, #524]	@ (8008004 <main+0xbf0>)
 8007df8:	885b      	ldrh	r3, [r3, #2]
 8007dfa:	4a84      	ldr	r2, [pc, #528]	@ (800800c <main+0xbf8>)
 8007dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007e00:	08db      	lsrs	r3, r3, #3
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	333c      	adds	r3, #60	@ 0x3c
 8007e06:	b299      	uxth	r1, r3
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9302      	str	r3, [sp, #8]
 8007e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	2318      	movs	r3, #24
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	2318      	movs	r3, #24
 8007e16:	22c8      	movs	r2, #200	@ 0xc8
 8007e18:	200a      	movs	r0, #10
 8007e1a:	f7ff faab 	bl	8007374 <lcd_show_string>
					  lcd_show_string(10,3*lcddev.height/5 + 10,100,16,16,"Parity Bits:",BLACK);
 8007e1e:	4b79      	ldr	r3, [pc, #484]	@ (8008004 <main+0xbf0>)
 8007e20:	885b      	ldrh	r3, [r3, #2]
 8007e22:	461a      	mov	r2, r3
 8007e24:	4613      	mov	r3, r2
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	4413      	add	r3, r2
 8007e2a:	4a77      	ldr	r2, [pc, #476]	@ (8008008 <main+0xbf4>)
 8007e2c:	fb82 1203 	smull	r1, r2, r2, r3
 8007e30:	1052      	asrs	r2, r2, #1
 8007e32:	17db      	asrs	r3, r3, #31
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	330a      	adds	r3, #10
 8007e3a:	b299      	uxth	r1, r3
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9302      	str	r3, [sp, #8]
 8007e40:	4b73      	ldr	r3, [pc, #460]	@ (8008010 <main+0xbfc>)
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	2310      	movs	r3, #16
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	2310      	movs	r3, #16
 8007e4a:	2264      	movs	r2, #100	@ 0x64
 8007e4c:	200a      	movs	r0, #10
 8007e4e:	f7ff fa91 	bl	8007374 <lcd_show_string>
					  lcd_show_string(lcddev.width/2,3*lcddev.height/5+10,100,16,16,parity_val,BLACK);
 8007e52:	4b6c      	ldr	r3, [pc, #432]	@ (8008004 <main+0xbf0>)
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	085b      	lsrs	r3, r3, #1
 8007e58:	b298      	uxth	r0, r3
 8007e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8008004 <main+0xbf0>)
 8007e5c:	885b      	ldrh	r3, [r3, #2]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	4613      	mov	r3, r2
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	4413      	add	r3, r2
 8007e66:	4a68      	ldr	r2, [pc, #416]	@ (8008008 <main+0xbf4>)
 8007e68:	fb82 1203 	smull	r1, r2, r2, r3
 8007e6c:	1052      	asrs	r2, r2, #1
 8007e6e:	17db      	asrs	r3, r3, #31
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	330a      	adds	r3, #10
 8007e76:	b299      	uxth	r1, r3
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9302      	str	r3, [sp, #8]
 8007e7c:	4b65      	ldr	r3, [pc, #404]	@ (8008014 <main+0xc00>)
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	2310      	movs	r3, #16
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	2310      	movs	r3, #16
 8007e86:	2264      	movs	r2, #100	@ 0x64
 8007e88:	f7ff fa74 	bl	8007374 <lcd_show_string>
					  if(error_position != 0){
 8007e8c:	4b62      	ldr	r3, [pc, #392]	@ (8008018 <main+0xc04>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 80cb 	beq.w	800802c <main+0xc18>
 8007e96:	466b      	mov	r3, sp
 8007e98:	461e      	mov	r6, r3
						  lcd_show_string(10,3*lcddev.height/5+30,200,16,16,"1 error occurs in bit",BLACK);
 8007e9a:	4b5a      	ldr	r3, [pc, #360]	@ (8008004 <main+0xbf0>)
 8007e9c:	885b      	ldrh	r3, [r3, #2]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	4413      	add	r3, r2
 8007ea6:	4a58      	ldr	r2, [pc, #352]	@ (8008008 <main+0xbf4>)
 8007ea8:	fb82 1203 	smull	r1, r2, r2, r3
 8007eac:	1052      	asrs	r2, r2, #1
 8007eae:	17db      	asrs	r3, r3, #31
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	331e      	adds	r3, #30
 8007eb6:	b299      	uxth	r1, r3
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9302      	str	r3, [sp, #8]
 8007ebc:	4b57      	ldr	r3, [pc, #348]	@ (800801c <main+0xc08>)
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	2310      	movs	r3, #16
 8007ec6:	22c8      	movs	r2, #200	@ 0xc8
 8007ec8:	200a      	movs	r0, #10
 8007eca:	f7ff fa53 	bl	8007374 <lcd_show_string>
						  char temp = error_position + '0';
 8007ece:	4b52      	ldr	r3, [pc, #328]	@ (8008018 <main+0xc04>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	3330      	adds	r3, #48	@ 0x30
 8007ed4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
						  char ep[2] = {temp,'\0'};
 8007ed8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007edc:	773b      	strb	r3, [r7, #28]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	777b      	strb	r3, [r7, #29]
						  lcd_show_string(6*lcddev.width/7,3*lcddev.height/5+26,100,24,24,ep,BLACK);
 8007ee2:	4b48      	ldr	r3, [pc, #288]	@ (8008004 <main+0xbf0>)
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4613      	mov	r3, r2
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	4413      	add	r3, r2
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8008020 <main+0xc0c>)
 8007ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8007ef6:	441a      	add	r2, r3
 8007ef8:	1092      	asrs	r2, r2, #2
 8007efa:	17db      	asrs	r3, r3, #31
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	b298      	uxth	r0, r3
 8007f00:	4b40      	ldr	r3, [pc, #256]	@ (8008004 <main+0xbf0>)
 8007f02:	885b      	ldrh	r3, [r3, #2]
 8007f04:	461a      	mov	r2, r3
 8007f06:	4613      	mov	r3, r2
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	4413      	add	r3, r2
 8007f0c:	4a3e      	ldr	r2, [pc, #248]	@ (8008008 <main+0xbf4>)
 8007f0e:	fb82 1203 	smull	r1, r2, r2, r3
 8007f12:	1052      	asrs	r2, r2, #1
 8007f14:	17db      	asrs	r3, r3, #31
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	331a      	adds	r3, #26
 8007f1c:	b299      	uxth	r1, r3
 8007f1e:	2300      	movs	r3, #0
 8007f20:	9302      	str	r3, [sp, #8]
 8007f22:	f107 031c 	add.w	r3, r7, #28
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	2318      	movs	r3, #24
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	2318      	movs	r3, #24
 8007f2e:	2264      	movs	r2, #100	@ 0x64
 8007f30:	f7ff fa20 	bl	8007374 <lcd_show_string>
						  char result[strlen("The error data is ")+strlen(wr_data)];
 8007f34:	483b      	ldr	r0, [pc, #236]	@ (8008024 <main+0xc10>)
 8007f36:	f7f8 f977 	bl	8000228 <strlen>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	f103 0112 	add.w	r1, r3, #18
 8007f40:	460b      	mov	r3, r1
 8007f42:	3b01      	subs	r3, #1
 8007f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f46:	2300      	movs	r3, #0
 8007f48:	6139      	str	r1, [r7, #16]
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007f58:	4628      	mov	r0, r5
 8007f5a:	00c3      	lsls	r3, r0, #3
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007f62:	4620      	mov	r0, r4
 8007f64:	00c2      	lsls	r2, r0, #3
 8007f66:	2300      	movs	r3, #0
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f78:	4628      	mov	r0, r5
 8007f7a:	00c3      	lsls	r3, r0, #3
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007f82:	4620      	mov	r0, r4
 8007f84:	00c2      	lsls	r2, r0, #3
 8007f86:	1dcb      	adds	r3, r1, #7
 8007f88:	08db      	lsrs	r3, r3, #3
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	ebad 0d03 	sub.w	sp, sp, r3
 8007f90:	ab04      	add	r3, sp, #16
 8007f92:	3300      	adds	r3, #0
 8007f94:	633b      	str	r3, [r7, #48]	@ 0x30
						  strcpy(result,"The error data is ");strcat(result,wr_data);
 8007f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f98:	4a23      	ldr	r2, [pc, #140]	@ (8008028 <main+0xc14>)
 8007f9a:	461d      	mov	r5, r3
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fa0:	6028      	str	r0, [r5, #0]
 8007fa2:	6069      	str	r1, [r5, #4]
 8007fa4:	60aa      	str	r2, [r5, #8]
 8007fa6:	60eb      	str	r3, [r5, #12]
 8007fa8:	8823      	ldrh	r3, [r4, #0]
 8007faa:	78a2      	ldrb	r2, [r4, #2]
 8007fac:	822b      	strh	r3, [r5, #16]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	74ab      	strb	r3, [r5, #18]
 8007fb2:	491c      	ldr	r1, [pc, #112]	@ (8008024 <main+0xc10>)
 8007fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fb6:	f002 f9a9 	bl	800a30c <strcat>
						  lcd_show_string(10,3*lcddev.height/5+50,200,16,16,result,BLACK);
 8007fba:	4b12      	ldr	r3, [pc, #72]	@ (8008004 <main+0xbf0>)
 8007fbc:	885b      	ldrh	r3, [r3, #2]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	4413      	add	r3, r2
 8007fc6:	4a10      	ldr	r2, [pc, #64]	@ (8008008 <main+0xbf4>)
 8007fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8007fcc:	1052      	asrs	r2, r2, #1
 8007fce:	17db      	asrs	r3, r3, #31
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3332      	adds	r3, #50	@ 0x32
 8007fd6:	b299      	uxth	r1, r3
 8007fd8:	2300      	movs	r3, #0
 8007fda:	9302      	str	r3, [sp, #8]
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	22c8      	movs	r2, #200	@ 0xc8
 8007fe8:	200a      	movs	r0, #10
 8007fea:	f7ff f9c3 	bl	8007374 <lcd_show_string>
 8007fee:	46b5      	mov	sp, r6
 8007ff0:	e036      	b.n	8008060 <main+0xc4c>
 8007ff2:	bf00      	nop
 8007ff4:	20000080 	.word	0x20000080
 8007ff8:	40011400 	.word	0x40011400
 8007ffc:	200000e0 	.word	0x200000e0
 8008000:	20000005 	.word	0x20000005
 8008004:	200000b0 	.word	0x200000b0
 8008008:	66666667 	.word	0x66666667
 800800c:	cccccccd 	.word	0xcccccccd
 8008010:	0800abc8 	.word	0x0800abc8
 8008014:	200000cc 	.word	0x200000cc
 8008018:	200000d0 	.word	0x200000d0
 800801c:	0800abd8 	.word	0x0800abd8
 8008020:	92492493 	.word	0x92492493
 8008024:	200000c0 	.word	0x200000c0
 8008028:	0800abf0 	.word	0x0800abf0
					  }
					  else{
						  lcd_show_string(10,3*lcddev.height/5+30,200,16,16,"No errors",BLACK);
 800802c:	4b18      	ldr	r3, [pc, #96]	@ (8008090 <main+0xc7c>)
 800802e:	885b      	ldrh	r3, [r3, #2]
 8008030:	461a      	mov	r2, r3
 8008032:	4613      	mov	r3, r2
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	4413      	add	r3, r2
 8008038:	4a16      	ldr	r2, [pc, #88]	@ (8008094 <main+0xc80>)
 800803a:	fb82 1203 	smull	r1, r2, r2, r3
 800803e:	1052      	asrs	r2, r2, #1
 8008040:	17db      	asrs	r3, r3, #31
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	b29b      	uxth	r3, r3
 8008046:	331e      	adds	r3, #30
 8008048:	b299      	uxth	r1, r3
 800804a:	2300      	movs	r3, #0
 800804c:	9302      	str	r3, [sp, #8]
 800804e:	4b12      	ldr	r3, [pc, #72]	@ (8008098 <main+0xc84>)
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	2310      	movs	r3, #16
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	2310      	movs	r3, #16
 8008058:	22c8      	movs	r2, #200	@ 0xc8
 800805a:	200a      	movs	r0, #10
 800805c:	f7ff f98a 	bl	8007374 <lcd_show_string>
					  }
				  }
				  flag = 1;
 8008060:	2301      	movs	r3, #1
 8008062:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			  while(button[2].buttonAction != BUTTON_SINGLE && button[2].buttonAction != BUTTON_LONG_PRESS && button[2].buttonAction != BUTTON_DOUBLE){
 8008066:	4b0d      	ldr	r3, [pc, #52]	@ (800809c <main+0xc88>)
 8008068:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800806c:	2b01      	cmp	r3, #1
 800806e:	d00a      	beq.n	8008086 <main+0xc72>
 8008070:	4b0a      	ldr	r3, [pc, #40]	@ (800809c <main+0xc88>)
 8008072:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8008076:	2b04      	cmp	r3, #4
 8008078:	d005      	beq.n	8008086 <main+0xc72>
 800807a:	4b08      	ldr	r3, [pc, #32]	@ (800809c <main+0xc88>)
 800807c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8008080:	2b02      	cmp	r3, #2
 8008082:	f47f ae1d 	bne.w	8007cc0 <main+0x8ac>
 8008086:	f8d7 d004 	ldr.w	sp, [r7, #4]
	  if(button[2].buttonAction == BUTTON_LONG_PRESS){//长按KEY_WK_UP设置original数据长度
 800808a:	f7ff b9d8 	b.w	800743e <main+0x2a>
 800808e:	bf00      	nop
 8008090:	200000b0 	.word	0x200000b0
 8008094:	66666667 	.word	0x66666667
 8008098:	0800ac04 	.word	0x0800ac04
 800809c:	20000080 	.word	0x20000080

080080a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b090      	sub	sp, #64	@ 0x40
 80080a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80080a6:	f107 0318 	add.w	r3, r7, #24
 80080aa:	2228      	movs	r2, #40	@ 0x28
 80080ac:	2100      	movs	r1, #0
 80080ae:	4618      	mov	r0, r3
 80080b0:	f002 f924 	bl	800a2fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80080b4:	1d3b      	adds	r3, r7, #4
 80080b6:	2200      	movs	r2, #0
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	605a      	str	r2, [r3, #4]
 80080bc:	609a      	str	r2, [r3, #8]
 80080be:	60da      	str	r2, [r3, #12]
 80080c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80080c2:	2301      	movs	r3, #1
 80080c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80080c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80080ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80080cc:	2300      	movs	r3, #0
 80080ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80080d0:	2301      	movs	r3, #1
 80080d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080d4:	2302      	movs	r3, #2
 80080d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80080d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80080dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80080de:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80080e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080e4:	f107 0318 	add.w	r3, r7, #24
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 ff1d 	bl	8008f28 <HAL_RCC_OscConfig>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80080f4:	f000 f9f0 	bl	80084d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80080f8:	230f      	movs	r3, #15
 80080fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80080fc:	2302      	movs	r3, #2
 80080fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008108:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800810a:	2300      	movs	r3, #0
 800810c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800810e:	1d3b      	adds	r3, r7, #4
 8008110:	2102      	movs	r1, #2
 8008112:	4618      	mov	r0, r3
 8008114:	f001 f98a 	bl	800942c <HAL_RCC_ClockConfig>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800811e:	f000 f9db 	bl	80084d8 <Error_Handler>
  }
}
 8008122:	bf00      	nop
 8008124:	3740      	adds	r7, #64	@ 0x40
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //按键扫描
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a09      	ldr	r2, [pc, #36]	@ (800815c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d10a      	bne.n	8008152 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		Key_Scan(button);
 800813c:	4808      	ldr	r0, [pc, #32]	@ (8008160 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800813e:	f7f8 fbb7 	bl	80008b0 <Key_Scan>
		Key_Scan(button+1);
 8008142:	4b08      	ldr	r3, [pc, #32]	@ (8008164 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8008144:	4618      	mov	r0, r3
 8008146:	f7f8 fbb3 	bl	80008b0 <Key_Scan>
		Key_Scan(button+2);
 800814a:	4b07      	ldr	r3, [pc, #28]	@ (8008168 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800814c:	4618      	mov	r0, r3
 800814e:	f7f8 fbaf 	bl	80008b0 <Key_Scan>
	}
}
 8008152:	bf00      	nop
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	200000f4 	.word	0x200000f4
 8008160:	20000080 	.word	0x20000080
 8008164:	20000090 	.word	0x20000090
 8008168:	200000a0 	.word	0x200000a0

0800816c <calculate_redundant_bits>:

// 计算冗余位的数量
uint8_t calculate_redundant_bits(uint8_t input_len, uint8_t mode) {
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	4603      	mov	r3, r0
 8008174:	460a      	mov	r2, r1
 8008176:	71fb      	strb	r3, [r7, #7]
 8008178:	4613      	mov	r3, r2
 800817a:	71bb      	strb	r3, [r7, #6]
    uint8_t r = 0;
 800817c:	2300      	movs	r3, #0
 800817e:	73fb      	strb	r3, [r7, #15]
    if(mode == ENCODING){
 8008180:	79bb      	ldrb	r3, [r7, #6]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d110      	bne.n	80081a8 <calculate_redundant_bits+0x3c>
    	while ((1 << r) < (input_len + r + 1)) {
 8008186:	e002      	b.n	800818e <calculate_redundant_bits+0x22>
    		r++;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	3301      	adds	r3, #1
 800818c:	73fb      	strb	r3, [r7, #15]
    	while ((1 << r) < (input_len + r + 1)) {
 800818e:	79fa      	ldrb	r2, [r7, #7]
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	441a      	add	r2, r3
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	2101      	movs	r1, #1
 8008198:	fa01 f303 	lsl.w	r3, r1, r3
 800819c:	429a      	cmp	r2, r3
 800819e:	daf3      	bge.n	8008188 <calculate_redundant_bits+0x1c>
 80081a0:	e008      	b.n	80081b4 <calculate_redundant_bits+0x48>
    	}
    }
    else{
    	while ((1 << r) < input_len) {
    	        r++;
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
 80081a4:	3301      	adds	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]
    	while ((1 << r) < input_len) {
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	2201      	movs	r2, #1
 80081ac:	409a      	lsls	r2, r3
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	dbf6      	blt.n	80081a2 <calculate_redundant_bits+0x36>
    	    }
    }
    return r;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bc80      	pop	{r7}
 80081be:	4770      	bx	lr

080081c0 <char_to_bit>:

uint8_t char_to_bit(char c) {
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4603      	mov	r3, r0
 80081c8:	71fb      	strb	r3, [r7, #7]
    return c == '1' ? 1 : 0;
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	2b31      	cmp	r3, #49	@ 0x31
 80081ce:	bf0c      	ite	eq
 80081d0:	2301      	moveq	r3, #1
 80081d2:	2300      	movne	r3, #0
 80081d4:	b2db      	uxtb	r3, r3
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	bc80      	pop	{r7}
 80081de:	4770      	bx	lr

080081e0 <bit_to_char>:

char bit_to_char(uint8_t bit) {
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	71fb      	strb	r3, [r7, #7]
    return bit ? '1' : '0';
 80081ea:	79fb      	ldrb	r3, [r7, #7]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <bit_to_char+0x14>
 80081f0:	2331      	movs	r3, #49	@ 0x31
 80081f2:	e000      	b.n	80081f6 <bit_to_char+0x16>
 80081f4:	2330      	movs	r3, #48	@ 0x30
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bc80      	pop	{r7}
 80081fe:	4770      	bx	lr

08008200 <HAMMING_ENCODE>:

// Hamming编码函数，输入为字符串
char* HAMMING_ENCODE(char* input) {
 8008200:	b590      	push	{r4, r7, lr}
 8008202:	b089      	sub	sp, #36	@ 0x24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
    uint8_t input_len = strlen(input);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7f8 f80d 	bl	8000228 <strlen>
 800820e:	4603      	mov	r3, r0
 8008210:	767b      	strb	r3, [r7, #25]

    uint8_t r = calculate_redundant_bits(input_len,ENCODING);
 8008212:	7e7b      	ldrb	r3, [r7, #25]
 8008214:	2101      	movs	r1, #1
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff ffa8 	bl	800816c <calculate_redundant_bits>
 800821c:	4603      	mov	r3, r0
 800821e:	763b      	strb	r3, [r7, #24]
    uint8_t total_len = input_len + r;
 8008220:	7e7a      	ldrb	r2, [r7, #25]
 8008222:	7e3b      	ldrb	r3, [r7, #24]
 8008224:	4413      	add	r3, r2
 8008226:	75fb      	strb	r3, [r7, #23]

    // 分配空间存储编码后的数据
    char* encoded = (char*)malloc((total_len + 1) * sizeof(char));
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	3301      	adds	r3, #1
 800822c:	4618      	mov	r0, r3
 800822e:	f001 ff8f 	bl	800a150 <malloc>
 8008232:	4603      	mov	r3, r0
 8008234:	613b      	str	r3, [r7, #16]
    encoded[total_len] = '\0';
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4413      	add	r3, r2
 800823c:	2200      	movs	r2, #0
 800823e:	701a      	strb	r2, [r3, #0]

    // 初始化编码数组
    for (uint8_t i = 0; i < total_len; i++) {
 8008240:	2300      	movs	r3, #0
 8008242:	77fb      	strb	r3, [r7, #31]
 8008244:	e007      	b.n	8008256 <HAMMING_ENCODE+0x56>
        encoded[i] = '0';
 8008246:	7ffb      	ldrb	r3, [r7, #31]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4413      	add	r3, r2
 800824c:	2230      	movs	r2, #48	@ 0x30
 800824e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < total_len; i++) {
 8008250:	7ffb      	ldrb	r3, [r7, #31]
 8008252:	3301      	adds	r3, #1
 8008254:	77fb      	strb	r3, [r7, #31]
 8008256:	7ffa      	ldrb	r2, [r7, #31]
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	429a      	cmp	r2, r3
 800825c:	d3f3      	bcc.n	8008246 <HAMMING_ENCODE+0x46>
    }

    uint8_t data_index = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	77bb      	strb	r3, [r7, #30]
    for (uint8_t i = 1; i <= total_len; i++) {
 8008262:	2301      	movs	r3, #1
 8008264:	777b      	strb	r3, [r7, #29]
 8008266:	e014      	b.n	8008292 <HAMMING_ENCODE+0x92>
        if ((i & (i - 1)) != 0) {
 8008268:	7f7a      	ldrb	r2, [r7, #29]
 800826a:	7f7b      	ldrb	r3, [r7, #29]
 800826c:	3b01      	subs	r3, #1
 800826e:	4013      	ands	r3, r2
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <HAMMING_ENCODE+0x8c>
            encoded[i - 1] = input[data_index];
 8008274:	7fbb      	ldrb	r3, [r7, #30]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	441a      	add	r2, r3
 800827a:	7f7b      	ldrb	r3, [r7, #29]
 800827c:	3b01      	subs	r3, #1
 800827e:	6939      	ldr	r1, [r7, #16]
 8008280:	440b      	add	r3, r1
 8008282:	7812      	ldrb	r2, [r2, #0]
 8008284:	701a      	strb	r2, [r3, #0]
            data_index++;
 8008286:	7fbb      	ldrb	r3, [r7, #30]
 8008288:	3301      	adds	r3, #1
 800828a:	77bb      	strb	r3, [r7, #30]
    for (uint8_t i = 1; i <= total_len; i++) {
 800828c:	7f7b      	ldrb	r3, [r7, #29]
 800828e:	3301      	adds	r3, #1
 8008290:	777b      	strb	r3, [r7, #29]
 8008292:	7f7a      	ldrb	r2, [r7, #29]
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	429a      	cmp	r2, r3
 8008298:	d9e6      	bls.n	8008268 <HAMMING_ENCODE+0x68>
        }
    }

    for (uint8_t i = 0; i < r; i++) {
 800829a:	2300      	movs	r3, #0
 800829c:	773b      	strb	r3, [r7, #28]
 800829e:	e030      	b.n	8008302 <HAMMING_ENCODE+0x102>
        uint8_t pos = (1 << i);
 80082a0:	7f3b      	ldrb	r3, [r7, #28]
 80082a2:	2201      	movs	r2, #1
 80082a4:	fa02 f303 	lsl.w	r3, r2, r3
 80082a8:	73fb      	strb	r3, [r7, #15]
        uint8_t parity = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	76fb      	strb	r3, [r7, #27]

        for (uint8_t j = 1; j <= total_len; j++) {
 80082ae:	2301      	movs	r3, #1
 80082b0:	76bb      	strb	r3, [r7, #26]
 80082b2:	e015      	b.n	80082e0 <HAMMING_ENCODE+0xe0>
            if (j & pos) {
 80082b4:	7eba      	ldrb	r2, [r7, #26]
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	4013      	ands	r3, r2
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00c      	beq.n	80082da <HAMMING_ENCODE+0xda>
                parity ^= char_to_bit(encoded[j - 1]);
 80082c0:	7ebb      	ldrb	r3, [r7, #26]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	4413      	add	r3, r2
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff ff78 	bl	80081c0 <char_to_bit>
 80082d0:	4603      	mov	r3, r0
 80082d2:	461a      	mov	r2, r3
 80082d4:	7efb      	ldrb	r3, [r7, #27]
 80082d6:	4053      	eors	r3, r2
 80082d8:	76fb      	strb	r3, [r7, #27]
        for (uint8_t j = 1; j <= total_len; j++) {
 80082da:	7ebb      	ldrb	r3, [r7, #26]
 80082dc:	3301      	adds	r3, #1
 80082de:	76bb      	strb	r3, [r7, #26]
 80082e0:	7eba      	ldrb	r2, [r7, #26]
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d9e5      	bls.n	80082b4 <HAMMING_ENCODE+0xb4>
            }
        }
        encoded[pos - 1] = bit_to_char(parity);
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
 80082ea:	3b01      	subs	r3, #1
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	18d4      	adds	r4, r2, r3
 80082f0:	7efb      	ldrb	r3, [r7, #27]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff ff74 	bl	80081e0 <bit_to_char>
 80082f8:	4603      	mov	r3, r0
 80082fa:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < r; i++) {
 80082fc:	7f3b      	ldrb	r3, [r7, #28]
 80082fe:	3301      	adds	r3, #1
 8008300:	773b      	strb	r3, [r7, #28]
 8008302:	7f3a      	ldrb	r2, [r7, #28]
 8008304:	7e3b      	ldrb	r3, [r7, #24]
 8008306:	429a      	cmp	r2, r3
 8008308:	d3ca      	bcc.n	80082a0 <HAMMING_ENCODE+0xa0>
    }

    return encoded;
 800830a:	693b      	ldr	r3, [r7, #16]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3724      	adds	r7, #36	@ 0x24
 8008310:	46bd      	mov	sp, r7
 8008312:	bd90      	pop	{r4, r7, pc}

08008314 <HAMMING_DECODE>:

char* HAMMING_DECODE(char* hamming_input) {
 8008314:	b590      	push	{r4, r7, lr}
 8008316:	b089      	sub	sp, #36	@ 0x24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
    uint8_t input_len = strlen(hamming_input);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7f7 ff83 	bl	8000228 <strlen>
 8008322:	4603      	mov	r3, r0
 8008324:	763b      	strb	r3, [r7, #24]


    uint8_t r = calculate_redundant_bits(input_len,DECODING);
 8008326:	7e3b      	ldrb	r3, [r7, #24]
 8008328:	2100      	movs	r1, #0
 800832a:	4618      	mov	r0, r3
 800832c:	f7ff ff1e 	bl	800816c <calculate_redundant_bits>
 8008330:	4603      	mov	r3, r0
 8008332:	75fb      	strb	r3, [r7, #23]
    uint8_t error_pos = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < r; i++) {
 8008338:	2300      	movs	r3, #0
 800833a:	77bb      	strb	r3, [r7, #30]
 800833c:	e039      	b.n	80083b2 <HAMMING_DECODE+0x9e>
            uint8_t pos = (1 << i);
 800833e:	7fbb      	ldrb	r3, [r7, #30]
 8008340:	2201      	movs	r2, #1
 8008342:	fa02 f303 	lsl.w	r3, r2, r3
 8008346:	73fb      	strb	r3, [r7, #15]
            uint8_t parity = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	777b      	strb	r3, [r7, #29]

            for (uint8_t j = 1; j <= input_len; j++) {
 800834c:	2301      	movs	r3, #1
 800834e:	773b      	strb	r3, [r7, #28]
 8008350:	e015      	b.n	800837e <HAMMING_DECODE+0x6a>
                if (j & pos) {
 8008352:	7f3a      	ldrb	r2, [r7, #28]
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	4013      	ands	r3, r2
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00c      	beq.n	8008378 <HAMMING_DECODE+0x64>
                    parity ^= char_to_bit(hamming_input[j - 1]);
 800835e:	7f3b      	ldrb	r3, [r7, #28]
 8008360:	3b01      	subs	r3, #1
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	4413      	add	r3, r2
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff ff29 	bl	80081c0 <char_to_bit>
 800836e:	4603      	mov	r3, r0
 8008370:	461a      	mov	r2, r3
 8008372:	7f7b      	ldrb	r3, [r7, #29]
 8008374:	4053      	eors	r3, r2
 8008376:	777b      	strb	r3, [r7, #29]
            for (uint8_t j = 1; j <= input_len; j++) {
 8008378:	7f3b      	ldrb	r3, [r7, #28]
 800837a:	3301      	adds	r3, #1
 800837c:	773b      	strb	r3, [r7, #28]
 800837e:	7f3a      	ldrb	r2, [r7, #28]
 8008380:	7e3b      	ldrb	r3, [r7, #24]
 8008382:	429a      	cmp	r2, r3
 8008384:	d9e5      	bls.n	8008352 <HAMMING_DECODE+0x3e>
                }
            }
            parity_val[r-i-1] = bit_to_char(parity);
 8008386:	7dfa      	ldrb	r2, [r7, #23]
 8008388:	7fbb      	ldrb	r3, [r7, #30]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	1e5c      	subs	r4, r3, #1
 800838e:	7f7b      	ldrb	r3, [r7, #29]
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff ff25 	bl	80081e0 <bit_to_char>
 8008396:	4603      	mov	r3, r0
 8008398:	461a      	mov	r2, r3
 800839a:	4b4c      	ldr	r3, [pc, #304]	@ (80084cc <HAMMING_DECODE+0x1b8>)
 800839c:	551a      	strb	r2, [r3, r4]

            if (parity != 0) {
 800839e:	7f7b      	ldrb	r3, [r7, #29]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAMMING_DECODE+0x98>
                error_pos += pos;
 80083a4:	7ffa      	ldrb	r2, [r7, #31]
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	4413      	add	r3, r2
 80083aa:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < r; i++) {
 80083ac:	7fbb      	ldrb	r3, [r7, #30]
 80083ae:	3301      	adds	r3, #1
 80083b0:	77bb      	strb	r3, [r7, #30]
 80083b2:	7fba      	ldrb	r2, [r7, #30]
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d3c1      	bcc.n	800833e <HAMMING_DECODE+0x2a>
            }
        }
        parity_val[r] = '\0';
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	4a43      	ldr	r2, [pc, #268]	@ (80084cc <HAMMING_DECODE+0x1b8>)
 80083be:	2100      	movs	r1, #0
 80083c0:	54d1      	strb	r1, [r2, r3]

        if (error_pos > 0 && error_pos <= input_len) {
 80083c2:	7ffb      	ldrb	r3, [r7, #31]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01e      	beq.n	8008406 <HAMMING_DECODE+0xf2>
 80083c8:	7ffa      	ldrb	r2, [r7, #31]
 80083ca:	7e3b      	ldrb	r3, [r7, #24]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d81a      	bhi.n	8008406 <HAMMING_DECODE+0xf2>
        	error_position = error_pos;
 80083d0:	4a3f      	ldr	r2, [pc, #252]	@ (80084d0 <HAMMING_DECODE+0x1bc>)
 80083d2:	7ffb      	ldrb	r3, [r7, #31]
 80083d4:	7013      	strb	r3, [r2, #0]
            hamming_input[error_pos - 1] = bit_to_char(!char_to_bit(hamming_input[error_pos - 1]));
 80083d6:	7ffb      	ldrb	r3, [r7, #31]
 80083d8:	3b01      	subs	r3, #1
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	4413      	add	r3, r2
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff feed 	bl	80081c0 <char_to_bit>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	bf0c      	ite	eq
 80083ec:	2301      	moveq	r3, #1
 80083ee:	2300      	movne	r3, #0
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	4619      	mov	r1, r3
 80083f4:	7ffb      	ldrb	r3, [r7, #31]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	18d4      	adds	r4, r2, r3
 80083fc:	4608      	mov	r0, r1
 80083fe:	f7ff feef 	bl	80081e0 <bit_to_char>
 8008402:	4603      	mov	r3, r0
 8008404:	7023      	strb	r3, [r4, #0]
        }

        uint8_t data_len = input_len - r;
 8008406:	7e3a      	ldrb	r2, [r7, #24]
 8008408:	7dfb      	ldrb	r3, [r7, #23]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	75bb      	strb	r3, [r7, #22]
        char* decoded = (char*)malloc((data_len + 1) * sizeof(char));
 800840e:	7dbb      	ldrb	r3, [r7, #22]
 8008410:	3301      	adds	r3, #1
 8008412:	4618      	mov	r0, r3
 8008414:	f001 fe9c 	bl	800a150 <malloc>
 8008418:	4603      	mov	r3, r0
 800841a:	613b      	str	r3, [r7, #16]

        decoded[data_len] = '\0';
 800841c:	7dbb      	ldrb	r3, [r7, #22]
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	4413      	add	r3, r2
 8008422:	2200      	movs	r2, #0
 8008424:	701a      	strb	r2, [r3, #0]
        wr_data[data_len] = '\0';
 8008426:	7dbb      	ldrb	r3, [r7, #22]
 8008428:	4a2a      	ldr	r2, [pc, #168]	@ (80084d4 <HAMMING_DECODE+0x1c0>)
 800842a:	2100      	movs	r1, #0
 800842c:	54d1      	strb	r1, [r2, r3]

        uint8_t data_index = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	76fb      	strb	r3, [r7, #27]
        uint8_t di = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	76bb      	strb	r3, [r7, #26]
        for (uint8_t i = 1; i <= input_len; i++) {
 8008436:	2301      	movs	r3, #1
 8008438:	767b      	strb	r3, [r7, #25]
 800843a:	e03e      	b.n	80084ba <HAMMING_DECODE+0x1a6>
            if ((i & (i - 1)) != 0) {
 800843c:	7e7a      	ldrb	r2, [r7, #25]
 800843e:	7e7b      	ldrb	r3, [r7, #25]
 8008440:	3b01      	subs	r3, #1
 8008442:	4013      	ands	r3, r2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d035      	beq.n	80084b4 <HAMMING_DECODE+0x1a0>
                decoded[data_index++] = hamming_input[i - 1];
 8008448:	7e7b      	ldrb	r3, [r7, #25]
 800844a:	3b01      	subs	r3, #1
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	441a      	add	r2, r3
 8008450:	7efb      	ldrb	r3, [r7, #27]
 8008452:	1c59      	adds	r1, r3, #1
 8008454:	76f9      	strb	r1, [r7, #27]
 8008456:	4619      	mov	r1, r3
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	440b      	add	r3, r1
 800845c:	7812      	ldrb	r2, [r2, #0]
 800845e:	701a      	strb	r2, [r3, #0]
                if(i==error_pos){wr_data[di++]=bit_to_char(!char_to_bit(hamming_input[i-1]));}
 8008460:	7e7a      	ldrb	r2, [r7, #25]
 8008462:	7ffb      	ldrb	r3, [r7, #31]
 8008464:	429a      	cmp	r2, r3
 8008466:	d11a      	bne.n	800849e <HAMMING_DECODE+0x18a>
 8008468:	7e7b      	ldrb	r3, [r7, #25]
 800846a:	3b01      	subs	r3, #1
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	4413      	add	r3, r2
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff fea4 	bl	80081c0 <char_to_bit>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	bf0c      	ite	eq
 800847e:	2301      	moveq	r3, #1
 8008480:	2300      	movne	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	4619      	mov	r1, r3
 8008486:	7ebb      	ldrb	r3, [r7, #26]
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	76ba      	strb	r2, [r7, #26]
 800848c:	461c      	mov	r4, r3
 800848e:	4608      	mov	r0, r1
 8008490:	f7ff fea6 	bl	80081e0 <bit_to_char>
 8008494:	4603      	mov	r3, r0
 8008496:	461a      	mov	r2, r3
 8008498:	4b0e      	ldr	r3, [pc, #56]	@ (80084d4 <HAMMING_DECODE+0x1c0>)
 800849a:	551a      	strb	r2, [r3, r4]
 800849c:	e00a      	b.n	80084b4 <HAMMING_DECODE+0x1a0>
                else{
                wr_data[di++] = hamming_input[i-1];
 800849e:	7e7b      	ldrb	r3, [r7, #25]
 80084a0:	3b01      	subs	r3, #1
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	441a      	add	r2, r3
 80084a6:	7ebb      	ldrb	r3, [r7, #26]
 80084a8:	1c59      	adds	r1, r3, #1
 80084aa:	76b9      	strb	r1, [r7, #26]
 80084ac:	4619      	mov	r1, r3
 80084ae:	7812      	ldrb	r2, [r2, #0]
 80084b0:	4b08      	ldr	r3, [pc, #32]	@ (80084d4 <HAMMING_DECODE+0x1c0>)
 80084b2:	545a      	strb	r2, [r3, r1]
        for (uint8_t i = 1; i <= input_len; i++) {
 80084b4:	7e7b      	ldrb	r3, [r7, #25]
 80084b6:	3301      	adds	r3, #1
 80084b8:	767b      	strb	r3, [r7, #25]
 80084ba:	7e7a      	ldrb	r2, [r7, #25]
 80084bc:	7e3b      	ldrb	r3, [r7, #24]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d9bc      	bls.n	800843c <HAMMING_DECODE+0x128>
                }
            }
        }

        return decoded;
 80084c2:	693b      	ldr	r3, [r7, #16]
    }
 80084c4:	4618      	mov	r0, r3
 80084c6:	3724      	adds	r7, #36	@ 0x24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd90      	pop	{r4, r7, pc}
 80084cc:	200000cc 	.word	0x200000cc
 80084d0:	200000d0 	.word	0x200000d0
 80084d4:	200000c0 	.word	0x200000c0

080084d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80084dc:	b672      	cpsid	i
}
 80084de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80084e0:	bf00      	nop
 80084e2:	e7fd      	b.n	80084e0 <Error_Handler+0x8>

080084e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80084ea:	4b16      	ldr	r3, [pc, #88]	@ (8008544 <HAL_MspInit+0x60>)
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	4a15      	ldr	r2, [pc, #84]	@ (8008544 <HAL_MspInit+0x60>)
 80084f0:	f043 0301 	orr.w	r3, r3, #1
 80084f4:	6193      	str	r3, [r2, #24]
 80084f6:	4b13      	ldr	r3, [pc, #76]	@ (8008544 <HAL_MspInit+0x60>)
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	60bb      	str	r3, [r7, #8]
 8008500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008502:	4b10      	ldr	r3, [pc, #64]	@ (8008544 <HAL_MspInit+0x60>)
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	4a0f      	ldr	r2, [pc, #60]	@ (8008544 <HAL_MspInit+0x60>)
 8008508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800850c:	61d3      	str	r3, [r2, #28]
 800850e:	4b0d      	ldr	r3, [pc, #52]	@ (8008544 <HAL_MspInit+0x60>)
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008516:	607b      	str	r3, [r7, #4]
 8008518:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800851a:	2005      	movs	r0, #5
 800851c:	f000 fae6 	bl	8008aec <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008520:	4b09      	ldr	r3, [pc, #36]	@ (8008548 <HAL_MspInit+0x64>)
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	60fb      	str	r3, [r7, #12]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	4a04      	ldr	r2, [pc, #16]	@ (8008548 <HAL_MspInit+0x64>)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800853c:	bf00      	nop
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	40021000 	.word	0x40021000
 8008548:	40010000 	.word	0x40010000

0800854c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008550:	bf00      	nop
 8008552:	e7fd      	b.n	8008550 <NMI_Handler+0x4>

08008554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008554:	b480      	push	{r7}
 8008556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008558:	bf00      	nop
 800855a:	e7fd      	b.n	8008558 <HardFault_Handler+0x4>

0800855c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008560:	bf00      	nop
 8008562:	e7fd      	b.n	8008560 <MemManage_Handler+0x4>

08008564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008568:	bf00      	nop
 800856a:	e7fd      	b.n	8008568 <BusFault_Handler+0x4>

0800856c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008570:	bf00      	nop
 8008572:	e7fd      	b.n	8008570 <UsageFault_Handler+0x4>

08008574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008578:	bf00      	nop
 800857a:	46bd      	mov	sp, r7
 800857c:	bc80      	pop	{r7}
 800857e:	4770      	bx	lr

08008580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008584:	bf00      	nop
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr

0800858c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008590:	bf00      	nop
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr

08008598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800859c:	f000 f99a 	bl	80088d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80085a0:	bf00      	nop
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80085a8:	4802      	ldr	r0, [pc, #8]	@ (80085b4 <TIM2_IRQHandler+0x10>)
 80085aa:	f001 f97d 	bl	80098a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80085ae:	bf00      	nop
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	200000f4 	.word	0x200000f4

080085b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80085c0:	4a14      	ldr	r2, [pc, #80]	@ (8008614 <_sbrk+0x5c>)
 80085c2:	4b15      	ldr	r3, [pc, #84]	@ (8008618 <_sbrk+0x60>)
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80085cc:	4b13      	ldr	r3, [pc, #76]	@ (800861c <_sbrk+0x64>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d102      	bne.n	80085da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80085d4:	4b11      	ldr	r3, [pc, #68]	@ (800861c <_sbrk+0x64>)
 80085d6:	4a12      	ldr	r2, [pc, #72]	@ (8008620 <_sbrk+0x68>)
 80085d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80085da:	4b10      	ldr	r3, [pc, #64]	@ (800861c <_sbrk+0x64>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4413      	add	r3, r2
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d207      	bcs.n	80085f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085e8:	f001 feb0 	bl	800a34c <__errno>
 80085ec:	4603      	mov	r3, r0
 80085ee:	220c      	movs	r2, #12
 80085f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80085f2:	f04f 33ff 	mov.w	r3, #4294967295
 80085f6:	e009      	b.n	800860c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085f8:	4b08      	ldr	r3, [pc, #32]	@ (800861c <_sbrk+0x64>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80085fe:	4b07      	ldr	r3, [pc, #28]	@ (800861c <_sbrk+0x64>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4413      	add	r3, r2
 8008606:	4a05      	ldr	r2, [pc, #20]	@ (800861c <_sbrk+0x64>)
 8008608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800860a:	68fb      	ldr	r3, [r7, #12]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	2000c000 	.word	0x2000c000
 8008618:	00000400 	.word	0x00000400
 800861c:	200000f0 	.word	0x200000f0
 8008620:	200002d0 	.word	0x200002d0

08008624 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008628:	bf00      	nop
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr

08008630 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008636:	f107 0308 	add.w	r3, r7, #8
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	605a      	str	r2, [r3, #4]
 8008640:	609a      	str	r2, [r3, #8]
 8008642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008644:	463b      	mov	r3, r7
 8008646:	2200      	movs	r2, #0
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800864c:	4b1d      	ldr	r3, [pc, #116]	@ (80086c4 <MX_TIM2_Init+0x94>)
 800864e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008652:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8008654:	4b1b      	ldr	r3, [pc, #108]	@ (80086c4 <MX_TIM2_Init+0x94>)
 8008656:	2247      	movs	r2, #71	@ 0x47
 8008658:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800865a:	4b1a      	ldr	r3, [pc, #104]	@ (80086c4 <MX_TIM2_Init+0x94>)
 800865c:	2200      	movs	r2, #0
 800865e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8008660:	4b18      	ldr	r3, [pc, #96]	@ (80086c4 <MX_TIM2_Init+0x94>)
 8008662:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008666:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008668:	4b16      	ldr	r3, [pc, #88]	@ (80086c4 <MX_TIM2_Init+0x94>)
 800866a:	2200      	movs	r2, #0
 800866c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800866e:	4b15      	ldr	r3, [pc, #84]	@ (80086c4 <MX_TIM2_Init+0x94>)
 8008670:	2200      	movs	r2, #0
 8008672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008674:	4813      	ldr	r0, [pc, #76]	@ (80086c4 <MX_TIM2_Init+0x94>)
 8008676:	f001 f867 	bl	8009748 <HAL_TIM_Base_Init>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008680:	f7ff ff2a 	bl	80084d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008688:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800868a:	f107 0308 	add.w	r3, r7, #8
 800868e:	4619      	mov	r1, r3
 8008690:	480c      	ldr	r0, [pc, #48]	@ (80086c4 <MX_TIM2_Init+0x94>)
 8008692:	f001 f9f9 	bl	8009a88 <HAL_TIM_ConfigClockSource>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800869c:	f7ff ff1c 	bl	80084d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086a0:	2300      	movs	r3, #0
 80086a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086a4:	2300      	movs	r3, #0
 80086a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80086a8:	463b      	mov	r3, r7
 80086aa:	4619      	mov	r1, r3
 80086ac:	4805      	ldr	r0, [pc, #20]	@ (80086c4 <MX_TIM2_Init+0x94>)
 80086ae:	f001 fbf3 	bl	8009e98 <HAL_TIMEx_MasterConfigSynchronization>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80086b8:	f7ff ff0e 	bl	80084d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80086bc:	bf00      	nop
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	200000f4 	.word	0x200000f4

080086c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d8:	d113      	bne.n	8008702 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80086da:	4b0c      	ldr	r3, [pc, #48]	@ (800870c <HAL_TIM_Base_MspInit+0x44>)
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	4a0b      	ldr	r2, [pc, #44]	@ (800870c <HAL_TIM_Base_MspInit+0x44>)
 80086e0:	f043 0301 	orr.w	r3, r3, #1
 80086e4:	61d3      	str	r3, [r2, #28]
 80086e6:	4b09      	ldr	r3, [pc, #36]	@ (800870c <HAL_TIM_Base_MspInit+0x44>)
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 80086f2:	2201      	movs	r2, #1
 80086f4:	2101      	movs	r1, #1
 80086f6:	201c      	movs	r0, #28
 80086f8:	f000 fa03 	bl	8008b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80086fc:	201c      	movs	r0, #28
 80086fe:	f000 fa1c 	bl	8008b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008702:	bf00      	nop
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	40021000 	.word	0x40021000

08008710 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008714:	4b11      	ldr	r3, [pc, #68]	@ (800875c <MX_USART1_UART_Init+0x4c>)
 8008716:	4a12      	ldr	r2, [pc, #72]	@ (8008760 <MX_USART1_UART_Init+0x50>)
 8008718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800871a:	4b10      	ldr	r3, [pc, #64]	@ (800875c <MX_USART1_UART_Init+0x4c>)
 800871c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008722:	4b0e      	ldr	r3, [pc, #56]	@ (800875c <MX_USART1_UART_Init+0x4c>)
 8008724:	2200      	movs	r2, #0
 8008726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008728:	4b0c      	ldr	r3, [pc, #48]	@ (800875c <MX_USART1_UART_Init+0x4c>)
 800872a:	2200      	movs	r2, #0
 800872c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800872e:	4b0b      	ldr	r3, [pc, #44]	@ (800875c <MX_USART1_UART_Init+0x4c>)
 8008730:	2200      	movs	r2, #0
 8008732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008734:	4b09      	ldr	r3, [pc, #36]	@ (800875c <MX_USART1_UART_Init+0x4c>)
 8008736:	220c      	movs	r2, #12
 8008738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800873a:	4b08      	ldr	r3, [pc, #32]	@ (800875c <MX_USART1_UART_Init+0x4c>)
 800873c:	2200      	movs	r2, #0
 800873e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008740:	4b06      	ldr	r3, [pc, #24]	@ (800875c <MX_USART1_UART_Init+0x4c>)
 8008742:	2200      	movs	r2, #0
 8008744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008746:	4805      	ldr	r0, [pc, #20]	@ (800875c <MX_USART1_UART_Init+0x4c>)
 8008748:	f001 fc24 	bl	8009f94 <HAL_UART_Init>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008752:	f7ff fec1 	bl	80084d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008756:	bf00      	nop
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	2000013c 	.word	0x2000013c
 8008760:	40013800 	.word	0x40013800

08008764 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	605a      	str	r2, [r3, #4]
 8008776:	609a      	str	r2, [r3, #8]
 8008778:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a1c      	ldr	r2, [pc, #112]	@ (80087f0 <HAL_UART_MspInit+0x8c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d131      	bne.n	80087e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008784:	4b1b      	ldr	r3, [pc, #108]	@ (80087f4 <HAL_UART_MspInit+0x90>)
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	4a1a      	ldr	r2, [pc, #104]	@ (80087f4 <HAL_UART_MspInit+0x90>)
 800878a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800878e:	6193      	str	r3, [r2, #24]
 8008790:	4b18      	ldr	r3, [pc, #96]	@ (80087f4 <HAL_UART_MspInit+0x90>)
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800879c:	4b15      	ldr	r3, [pc, #84]	@ (80087f4 <HAL_UART_MspInit+0x90>)
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	4a14      	ldr	r2, [pc, #80]	@ (80087f4 <HAL_UART_MspInit+0x90>)
 80087a2:	f043 0304 	orr.w	r3, r3, #4
 80087a6:	6193      	str	r3, [r2, #24]
 80087a8:	4b12      	ldr	r3, [pc, #72]	@ (80087f4 <HAL_UART_MspInit+0x90>)
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	f003 0304 	and.w	r3, r3, #4
 80087b0:	60bb      	str	r3, [r7, #8]
 80087b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80087b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ba:	2302      	movs	r3, #2
 80087bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80087be:	2303      	movs	r3, #3
 80087c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087c2:	f107 0310 	add.w	r3, r7, #16
 80087c6:	4619      	mov	r1, r3
 80087c8:	480b      	ldr	r0, [pc, #44]	@ (80087f8 <HAL_UART_MspInit+0x94>)
 80087ca:	f000 f9d1 	bl	8008b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80087ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087d4:	2300      	movs	r3, #0
 80087d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d8:	2300      	movs	r3, #0
 80087da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087dc:	f107 0310 	add.w	r3, r7, #16
 80087e0:	4619      	mov	r1, r3
 80087e2:	4805      	ldr	r0, [pc, #20]	@ (80087f8 <HAL_UART_MspInit+0x94>)
 80087e4:	f000 f9c4 	bl	8008b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80087e8:	bf00      	nop
 80087ea:	3720      	adds	r7, #32
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	40013800 	.word	0x40013800
 80087f4:	40021000 	.word	0x40021000
 80087f8:	40010800 	.word	0x40010800

080087fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80087fc:	f7ff ff12 	bl	8008624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008800:	480b      	ldr	r0, [pc, #44]	@ (8008830 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008802:	490c      	ldr	r1, [pc, #48]	@ (8008834 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008804:	4a0c      	ldr	r2, [pc, #48]	@ (8008838 <LoopFillZerobss+0x16>)
  movs r3, #0
 8008806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008808:	e002      	b.n	8008810 <LoopCopyDataInit>

0800880a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800880a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800880c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800880e:	3304      	adds	r3, #4

08008810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008814:	d3f9      	bcc.n	800880a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008816:	4a09      	ldr	r2, [pc, #36]	@ (800883c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008818:	4c09      	ldr	r4, [pc, #36]	@ (8008840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800881a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800881c:	e001      	b.n	8008822 <LoopFillZerobss>

0800881e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800881e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008820:	3204      	adds	r2, #4

08008822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008824:	d3fb      	bcc.n	800881e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008826:	f001 fd97 	bl	800a358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800882a:	f7fe fdf3 	bl	8007414 <main>
  bx lr
 800882e:	4770      	bx	lr
  ldr r0, =_sdata
 8008830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008834:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8008838:	0800dc00 	.word	0x0800dc00
  ldr r2, =_sbss
 800883c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8008840:	200002d0 	.word	0x200002d0

08008844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008844:	e7fe      	b.n	8008844 <ADC1_2_IRQHandler>
	...

08008848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800884c:	4b08      	ldr	r3, [pc, #32]	@ (8008870 <HAL_Init+0x28>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a07      	ldr	r2, [pc, #28]	@ (8008870 <HAL_Init+0x28>)
 8008852:	f043 0310 	orr.w	r3, r3, #16
 8008856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008858:	2003      	movs	r0, #3
 800885a:	f000 f947 	bl	8008aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800885e:	2000      	movs	r0, #0
 8008860:	f000 f808 	bl	8008874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008864:	f7ff fe3e 	bl	80084e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	40022000 	.word	0x40022000

08008874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800887c:	4b12      	ldr	r3, [pc, #72]	@ (80088c8 <HAL_InitTick+0x54>)
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	4b12      	ldr	r3, [pc, #72]	@ (80088cc <HAL_InitTick+0x58>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	4619      	mov	r1, r3
 8008886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800888a:	fbb3 f3f1 	udiv	r3, r3, r1
 800888e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008892:	4618      	mov	r0, r3
 8008894:	f000 f95f 	bl	8008b56 <HAL_SYSTICK_Config>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e00e      	b.n	80088c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b0f      	cmp	r3, #15
 80088a6:	d80a      	bhi.n	80088be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80088a8:	2200      	movs	r2, #0
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	f000 f927 	bl	8008b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80088b4:	4a06      	ldr	r2, [pc, #24]	@ (80088d0 <HAL_InitTick+0x5c>)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	e000      	b.n	80088c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000008 	.word	0x20000008
 80088cc:	20000010 	.word	0x20000010
 80088d0:	2000000c 	.word	0x2000000c

080088d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80088d8:	4b05      	ldr	r3, [pc, #20]	@ (80088f0 <HAL_IncTick+0x1c>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	4b05      	ldr	r3, [pc, #20]	@ (80088f4 <HAL_IncTick+0x20>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4413      	add	r3, r2
 80088e4:	4a03      	ldr	r2, [pc, #12]	@ (80088f4 <HAL_IncTick+0x20>)
 80088e6:	6013      	str	r3, [r2, #0]
}
 80088e8:	bf00      	nop
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bc80      	pop	{r7}
 80088ee:	4770      	bx	lr
 80088f0:	20000010 	.word	0x20000010
 80088f4:	20000184 	.word	0x20000184

080088f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80088f8:	b480      	push	{r7}
 80088fa:	af00      	add	r7, sp, #0
  return uwTick;
 80088fc:	4b02      	ldr	r3, [pc, #8]	@ (8008908 <HAL_GetTick+0x10>)
 80088fe:	681b      	ldr	r3, [r3, #0]
}
 8008900:	4618      	mov	r0, r3
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr
 8008908:	20000184 	.word	0x20000184

0800890c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008914:	f7ff fff0 	bl	80088f8 <HAL_GetTick>
 8008918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d005      	beq.n	8008932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008926:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <HAL_Delay+0x44>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008932:	bf00      	nop
 8008934:	f7ff ffe0 	bl	80088f8 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	429a      	cmp	r2, r3
 8008942:	d8f7      	bhi.n	8008934 <HAL_Delay+0x28>
  {
  }
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20000010 	.word	0x20000010

08008954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008964:	4b0c      	ldr	r3, [pc, #48]	@ (8008998 <__NVIC_SetPriorityGrouping+0x44>)
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008970:	4013      	ands	r3, r2
 8008972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800897c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008986:	4a04      	ldr	r2, [pc, #16]	@ (8008998 <__NVIC_SetPriorityGrouping+0x44>)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	60d3      	str	r3, [r2, #12]
}
 800898c:	bf00      	nop
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	bc80      	pop	{r7}
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	e000ed00 	.word	0xe000ed00

0800899c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089a0:	4b04      	ldr	r3, [pc, #16]	@ (80089b4 <__NVIC_GetPriorityGrouping+0x18>)
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	0a1b      	lsrs	r3, r3, #8
 80089a6:	f003 0307 	and.w	r3, r3, #7
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bc80      	pop	{r7}
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	e000ed00 	.word	0xe000ed00

080089b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	db0b      	blt.n	80089e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	f003 021f 	and.w	r2, r3, #31
 80089d0:	4906      	ldr	r1, [pc, #24]	@ (80089ec <__NVIC_EnableIRQ+0x34>)
 80089d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089d6:	095b      	lsrs	r3, r3, #5
 80089d8:	2001      	movs	r0, #1
 80089da:	fa00 f202 	lsl.w	r2, r0, r2
 80089de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bc80      	pop	{r7}
 80089ea:	4770      	bx	lr
 80089ec:	e000e100 	.word	0xe000e100

080089f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	4603      	mov	r3, r0
 80089f8:	6039      	str	r1, [r7, #0]
 80089fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	db0a      	blt.n	8008a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	490c      	ldr	r1, [pc, #48]	@ (8008a3c <__NVIC_SetPriority+0x4c>)
 8008a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a0e:	0112      	lsls	r2, r2, #4
 8008a10:	b2d2      	uxtb	r2, r2
 8008a12:	440b      	add	r3, r1
 8008a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a18:	e00a      	b.n	8008a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	4908      	ldr	r1, [pc, #32]	@ (8008a40 <__NVIC_SetPriority+0x50>)
 8008a20:	79fb      	ldrb	r3, [r7, #7]
 8008a22:	f003 030f 	and.w	r3, r3, #15
 8008a26:	3b04      	subs	r3, #4
 8008a28:	0112      	lsls	r2, r2, #4
 8008a2a:	b2d2      	uxtb	r2, r2
 8008a2c:	440b      	add	r3, r1
 8008a2e:	761a      	strb	r2, [r3, #24]
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bc80      	pop	{r7}
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	e000e100 	.word	0xe000e100
 8008a40:	e000ed00 	.word	0xe000ed00

08008a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b089      	sub	sp, #36	@ 0x24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f003 0307 	and.w	r3, r3, #7
 8008a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	f1c3 0307 	rsb	r3, r3, #7
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	bf28      	it	cs
 8008a62:	2304      	movcs	r3, #4
 8008a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	3304      	adds	r3, #4
 8008a6a:	2b06      	cmp	r3, #6
 8008a6c:	d902      	bls.n	8008a74 <NVIC_EncodePriority+0x30>
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	3b03      	subs	r3, #3
 8008a72:	e000      	b.n	8008a76 <NVIC_EncodePriority+0x32>
 8008a74:	2300      	movs	r3, #0
 8008a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a78:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a82:	43da      	mvns	r2, r3
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	401a      	ands	r2, r3
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	fa01 f303 	lsl.w	r3, r1, r3
 8008a96:	43d9      	mvns	r1, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a9c:	4313      	orrs	r3, r2
         );
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3724      	adds	r7, #36	@ 0x24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bc80      	pop	{r7}
 8008aa6:	4770      	bx	lr

08008aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ab8:	d301      	bcc.n	8008abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008aba:	2301      	movs	r3, #1
 8008abc:	e00f      	b.n	8008ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008abe:	4a0a      	ldr	r2, [pc, #40]	@ (8008ae8 <SysTick_Config+0x40>)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ac6:	210f      	movs	r1, #15
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	f7ff ff90 	bl	80089f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ad0:	4b05      	ldr	r3, [pc, #20]	@ (8008ae8 <SysTick_Config+0x40>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ad6:	4b04      	ldr	r3, [pc, #16]	@ (8008ae8 <SysTick_Config+0x40>)
 8008ad8:	2207      	movs	r2, #7
 8008ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	e000e010 	.word	0xe000e010

08008aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7ff ff2d 	bl	8008954 <__NVIC_SetPriorityGrouping>
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b086      	sub	sp, #24
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	4603      	mov	r3, r0
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	607a      	str	r2, [r7, #4]
 8008b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b14:	f7ff ff42 	bl	800899c <__NVIC_GetPriorityGrouping>
 8008b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	68b9      	ldr	r1, [r7, #8]
 8008b1e:	6978      	ldr	r0, [r7, #20]
 8008b20:	f7ff ff90 	bl	8008a44 <NVIC_EncodePriority>
 8008b24:	4602      	mov	r2, r0
 8008b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7ff ff5f 	bl	80089f0 <__NVIC_SetPriority>
}
 8008b32:	bf00      	nop
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	4603      	mov	r3, r0
 8008b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7ff ff35 	bl	80089b8 <__NVIC_EnableIRQ>
}
 8008b4e:	bf00      	nop
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7ff ffa2 	bl	8008aa8 <SysTick_Config>
 8008b64:	4603      	mov	r3, r0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b08b      	sub	sp, #44	@ 0x2c
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b82:	e179      	b.n	8008e78 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008b84:	2201      	movs	r2, #1
 8008b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b88:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69fa      	ldr	r2, [r7, #28]
 8008b94:	4013      	ands	r3, r2
 8008b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	f040 8168 	bne.w	8008e72 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	4a96      	ldr	r2, [pc, #600]	@ (8008e00 <HAL_GPIO_Init+0x290>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d05e      	beq.n	8008c6a <HAL_GPIO_Init+0xfa>
 8008bac:	4a94      	ldr	r2, [pc, #592]	@ (8008e00 <HAL_GPIO_Init+0x290>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d875      	bhi.n	8008c9e <HAL_GPIO_Init+0x12e>
 8008bb2:	4a94      	ldr	r2, [pc, #592]	@ (8008e04 <HAL_GPIO_Init+0x294>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d058      	beq.n	8008c6a <HAL_GPIO_Init+0xfa>
 8008bb8:	4a92      	ldr	r2, [pc, #584]	@ (8008e04 <HAL_GPIO_Init+0x294>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d86f      	bhi.n	8008c9e <HAL_GPIO_Init+0x12e>
 8008bbe:	4a92      	ldr	r2, [pc, #584]	@ (8008e08 <HAL_GPIO_Init+0x298>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d052      	beq.n	8008c6a <HAL_GPIO_Init+0xfa>
 8008bc4:	4a90      	ldr	r2, [pc, #576]	@ (8008e08 <HAL_GPIO_Init+0x298>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d869      	bhi.n	8008c9e <HAL_GPIO_Init+0x12e>
 8008bca:	4a90      	ldr	r2, [pc, #576]	@ (8008e0c <HAL_GPIO_Init+0x29c>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d04c      	beq.n	8008c6a <HAL_GPIO_Init+0xfa>
 8008bd0:	4a8e      	ldr	r2, [pc, #568]	@ (8008e0c <HAL_GPIO_Init+0x29c>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d863      	bhi.n	8008c9e <HAL_GPIO_Init+0x12e>
 8008bd6:	4a8e      	ldr	r2, [pc, #568]	@ (8008e10 <HAL_GPIO_Init+0x2a0>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d046      	beq.n	8008c6a <HAL_GPIO_Init+0xfa>
 8008bdc:	4a8c      	ldr	r2, [pc, #560]	@ (8008e10 <HAL_GPIO_Init+0x2a0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d85d      	bhi.n	8008c9e <HAL_GPIO_Init+0x12e>
 8008be2:	2b12      	cmp	r3, #18
 8008be4:	d82a      	bhi.n	8008c3c <HAL_GPIO_Init+0xcc>
 8008be6:	2b12      	cmp	r3, #18
 8008be8:	d859      	bhi.n	8008c9e <HAL_GPIO_Init+0x12e>
 8008bea:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf0 <HAL_GPIO_Init+0x80>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c6b 	.word	0x08008c6b
 8008bf4:	08008c45 	.word	0x08008c45
 8008bf8:	08008c57 	.word	0x08008c57
 8008bfc:	08008c99 	.word	0x08008c99
 8008c00:	08008c9f 	.word	0x08008c9f
 8008c04:	08008c9f 	.word	0x08008c9f
 8008c08:	08008c9f 	.word	0x08008c9f
 8008c0c:	08008c9f 	.word	0x08008c9f
 8008c10:	08008c9f 	.word	0x08008c9f
 8008c14:	08008c9f 	.word	0x08008c9f
 8008c18:	08008c9f 	.word	0x08008c9f
 8008c1c:	08008c9f 	.word	0x08008c9f
 8008c20:	08008c9f 	.word	0x08008c9f
 8008c24:	08008c9f 	.word	0x08008c9f
 8008c28:	08008c9f 	.word	0x08008c9f
 8008c2c:	08008c9f 	.word	0x08008c9f
 8008c30:	08008c9f 	.word	0x08008c9f
 8008c34:	08008c4d 	.word	0x08008c4d
 8008c38:	08008c61 	.word	0x08008c61
 8008c3c:	4a75      	ldr	r2, [pc, #468]	@ (8008e14 <HAL_GPIO_Init+0x2a4>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d013      	beq.n	8008c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008c42:	e02c      	b.n	8008c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	623b      	str	r3, [r7, #32]
          break;
 8008c4a:	e029      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	3304      	adds	r3, #4
 8008c52:	623b      	str	r3, [r7, #32]
          break;
 8008c54:	e024      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	623b      	str	r3, [r7, #32]
          break;
 8008c5e:	e01f      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	330c      	adds	r3, #12
 8008c66:	623b      	str	r3, [r7, #32]
          break;
 8008c68:	e01a      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d102      	bne.n	8008c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008c72:	2304      	movs	r3, #4
 8008c74:	623b      	str	r3, [r7, #32]
          break;
 8008c76:	e013      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d105      	bne.n	8008c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c80:	2308      	movs	r3, #8
 8008c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	69fa      	ldr	r2, [r7, #28]
 8008c88:	611a      	str	r2, [r3, #16]
          break;
 8008c8a:	e009      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	615a      	str	r2, [r3, #20]
          break;
 8008c96:	e003      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	623b      	str	r3, [r7, #32]
          break;
 8008c9c:	e000      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          break;
 8008c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	2bff      	cmp	r3, #255	@ 0xff
 8008ca4:	d801      	bhi.n	8008caa <HAL_GPIO_Init+0x13a>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	e001      	b.n	8008cae <HAL_GPIO_Init+0x13e>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	3304      	adds	r3, #4
 8008cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	2bff      	cmp	r3, #255	@ 0xff
 8008cb4:	d802      	bhi.n	8008cbc <HAL_GPIO_Init+0x14c>
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	e002      	b.n	8008cc2 <HAL_GPIO_Init+0x152>
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbe:	3b08      	subs	r3, #8
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	210f      	movs	r1, #15
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	401a      	ands	r2, r3
 8008cd4:	6a39      	ldr	r1, [r7, #32]
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 80c1 	beq.w	8008e72 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008cf0:	4b49      	ldr	r3, [pc, #292]	@ (8008e18 <HAL_GPIO_Init+0x2a8>)
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	4a48      	ldr	r2, [pc, #288]	@ (8008e18 <HAL_GPIO_Init+0x2a8>)
 8008cf6:	f043 0301 	orr.w	r3, r3, #1
 8008cfa:	6193      	str	r3, [r2, #24]
 8008cfc:	4b46      	ldr	r3, [pc, #280]	@ (8008e18 <HAL_GPIO_Init+0x2a8>)
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	60bb      	str	r3, [r7, #8]
 8008d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008d08:	4a44      	ldr	r2, [pc, #272]	@ (8008e1c <HAL_GPIO_Init+0x2ac>)
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0c:	089b      	lsrs	r3, r3, #2
 8008d0e:	3302      	adds	r3, #2
 8008d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	f003 0303 	and.w	r3, r3, #3
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	220f      	movs	r2, #15
 8008d20:	fa02 f303 	lsl.w	r3, r2, r3
 8008d24:	43db      	mvns	r3, r3
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a3c      	ldr	r2, [pc, #240]	@ (8008e20 <HAL_GPIO_Init+0x2b0>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d01f      	beq.n	8008d74 <HAL_GPIO_Init+0x204>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a3b      	ldr	r2, [pc, #236]	@ (8008e24 <HAL_GPIO_Init+0x2b4>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d019      	beq.n	8008d70 <HAL_GPIO_Init+0x200>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a3a      	ldr	r2, [pc, #232]	@ (8008e28 <HAL_GPIO_Init+0x2b8>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d013      	beq.n	8008d6c <HAL_GPIO_Init+0x1fc>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a39      	ldr	r2, [pc, #228]	@ (8008e2c <HAL_GPIO_Init+0x2bc>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d00d      	beq.n	8008d68 <HAL_GPIO_Init+0x1f8>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a38      	ldr	r2, [pc, #224]	@ (8008e30 <HAL_GPIO_Init+0x2c0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d007      	beq.n	8008d64 <HAL_GPIO_Init+0x1f4>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a37      	ldr	r2, [pc, #220]	@ (8008e34 <HAL_GPIO_Init+0x2c4>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d101      	bne.n	8008d60 <HAL_GPIO_Init+0x1f0>
 8008d5c:	2305      	movs	r3, #5
 8008d5e:	e00a      	b.n	8008d76 <HAL_GPIO_Init+0x206>
 8008d60:	2306      	movs	r3, #6
 8008d62:	e008      	b.n	8008d76 <HAL_GPIO_Init+0x206>
 8008d64:	2304      	movs	r3, #4
 8008d66:	e006      	b.n	8008d76 <HAL_GPIO_Init+0x206>
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e004      	b.n	8008d76 <HAL_GPIO_Init+0x206>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e002      	b.n	8008d76 <HAL_GPIO_Init+0x206>
 8008d70:	2301      	movs	r3, #1
 8008d72:	e000      	b.n	8008d76 <HAL_GPIO_Init+0x206>
 8008d74:	2300      	movs	r3, #0
 8008d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d78:	f002 0203 	and.w	r2, r2, #3
 8008d7c:	0092      	lsls	r2, r2, #2
 8008d7e:	4093      	lsls	r3, r2
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008d86:	4925      	ldr	r1, [pc, #148]	@ (8008e1c <HAL_GPIO_Init+0x2ac>)
 8008d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8a:	089b      	lsrs	r3, r3, #2
 8008d8c:	3302      	adds	r3, #2
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d006      	beq.n	8008dae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008da0:	4b25      	ldr	r3, [pc, #148]	@ (8008e38 <HAL_GPIO_Init+0x2c8>)
 8008da2:	689a      	ldr	r2, [r3, #8]
 8008da4:	4924      	ldr	r1, [pc, #144]	@ (8008e38 <HAL_GPIO_Init+0x2c8>)
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	608b      	str	r3, [r1, #8]
 8008dac:	e006      	b.n	8008dbc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008dae:	4b22      	ldr	r3, [pc, #136]	@ (8008e38 <HAL_GPIO_Init+0x2c8>)
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	43db      	mvns	r3, r3
 8008db6:	4920      	ldr	r1, [pc, #128]	@ (8008e38 <HAL_GPIO_Init+0x2c8>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d006      	beq.n	8008dd6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8008e38 <HAL_GPIO_Init+0x2c8>)
 8008dca:	68da      	ldr	r2, [r3, #12]
 8008dcc:	491a      	ldr	r1, [pc, #104]	@ (8008e38 <HAL_GPIO_Init+0x2c8>)
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	60cb      	str	r3, [r1, #12]
 8008dd4:	e006      	b.n	8008de4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008dd6:	4b18      	ldr	r3, [pc, #96]	@ (8008e38 <HAL_GPIO_Init+0x2c8>)
 8008dd8:	68da      	ldr	r2, [r3, #12]
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	43db      	mvns	r3, r3
 8008dde:	4916      	ldr	r1, [pc, #88]	@ (8008e38 <HAL_GPIO_Init+0x2c8>)
 8008de0:	4013      	ands	r3, r2
 8008de2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d025      	beq.n	8008e3c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008df0:	4b11      	ldr	r3, [pc, #68]	@ (8008e38 <HAL_GPIO_Init+0x2c8>)
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	4910      	ldr	r1, [pc, #64]	@ (8008e38 <HAL_GPIO_Init+0x2c8>)
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	604b      	str	r3, [r1, #4]
 8008dfc:	e025      	b.n	8008e4a <HAL_GPIO_Init+0x2da>
 8008dfe:	bf00      	nop
 8008e00:	10320000 	.word	0x10320000
 8008e04:	10310000 	.word	0x10310000
 8008e08:	10220000 	.word	0x10220000
 8008e0c:	10210000 	.word	0x10210000
 8008e10:	10120000 	.word	0x10120000
 8008e14:	10110000 	.word	0x10110000
 8008e18:	40021000 	.word	0x40021000
 8008e1c:	40010000 	.word	0x40010000
 8008e20:	40010800 	.word	0x40010800
 8008e24:	40010c00 	.word	0x40010c00
 8008e28:	40011000 	.word	0x40011000
 8008e2c:	40011400 	.word	0x40011400
 8008e30:	40011800 	.word	0x40011800
 8008e34:	40011c00 	.word	0x40011c00
 8008e38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008e3c:	4b15      	ldr	r3, [pc, #84]	@ (8008e94 <HAL_GPIO_Init+0x324>)
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	43db      	mvns	r3, r3
 8008e44:	4913      	ldr	r1, [pc, #76]	@ (8008e94 <HAL_GPIO_Init+0x324>)
 8008e46:	4013      	ands	r3, r2
 8008e48:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d006      	beq.n	8008e64 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008e56:	4b0f      	ldr	r3, [pc, #60]	@ (8008e94 <HAL_GPIO_Init+0x324>)
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	490e      	ldr	r1, [pc, #56]	@ (8008e94 <HAL_GPIO_Init+0x324>)
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	600b      	str	r3, [r1, #0]
 8008e62:	e006      	b.n	8008e72 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008e64:	4b0b      	ldr	r3, [pc, #44]	@ (8008e94 <HAL_GPIO_Init+0x324>)
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	43db      	mvns	r3, r3
 8008e6c:	4909      	ldr	r1, [pc, #36]	@ (8008e94 <HAL_GPIO_Init+0x324>)
 8008e6e:	4013      	ands	r3, r2
 8008e70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e74:	3301      	adds	r3, #1
 8008e76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f47f ae7e 	bne.w	8008b84 <HAL_GPIO_Init+0x14>
  }
}
 8008e88:	bf00      	nop
 8008e8a:	bf00      	nop
 8008e8c:	372c      	adds	r7, #44	@ 0x2c
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bc80      	pop	{r7}
 8008e92:	4770      	bx	lr
 8008e94:	40010400 	.word	0x40010400

08008e98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	887b      	ldrh	r3, [r7, #2]
 8008eaa:	4013      	ands	r3, r2
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	73fb      	strb	r3, [r7, #15]
 8008eb4:	e001      	b.n	8008eba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bc80      	pop	{r7}
 8008ec4:	4770      	bx	lr

08008ec6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b083      	sub	sp, #12
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	807b      	strh	r3, [r7, #2]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ed6:	787b      	ldrb	r3, [r7, #1]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008edc:	887a      	ldrh	r2, [r7, #2]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008ee2:	e003      	b.n	8008eec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008ee4:	887b      	ldrh	r3, [r7, #2]
 8008ee6:	041a      	lsls	r2, r3, #16
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	611a      	str	r2, [r3, #16]
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bc80      	pop	{r7}
 8008ef4:	4770      	bx	lr

08008ef6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b085      	sub	sp, #20
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	460b      	mov	r3, r1
 8008f00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f08:	887a      	ldrh	r2, [r7, #2]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	041a      	lsls	r2, r3, #16
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	43d9      	mvns	r1, r3
 8008f14:	887b      	ldrh	r3, [r7, #2]
 8008f16:	400b      	ands	r3, r1
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	611a      	str	r2, [r3, #16]
}
 8008f1e:	bf00      	nop
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bc80      	pop	{r7}
 8008f26:	4770      	bx	lr

08008f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e272      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 8087 	beq.w	8009056 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f48:	4b92      	ldr	r3, [pc, #584]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f003 030c 	and.w	r3, r3, #12
 8008f50:	2b04      	cmp	r3, #4
 8008f52:	d00c      	beq.n	8008f6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008f54:	4b8f      	ldr	r3, [pc, #572]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f003 030c 	and.w	r3, r3, #12
 8008f5c:	2b08      	cmp	r3, #8
 8008f5e:	d112      	bne.n	8008f86 <HAL_RCC_OscConfig+0x5e>
 8008f60:	4b8c      	ldr	r3, [pc, #560]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f6c:	d10b      	bne.n	8008f86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f6e:	4b89      	ldr	r3, [pc, #548]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d06c      	beq.n	8009054 <HAL_RCC_OscConfig+0x12c>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d168      	bne.n	8009054 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e24c      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f8e:	d106      	bne.n	8008f9e <HAL_RCC_OscConfig+0x76>
 8008f90:	4b80      	ldr	r3, [pc, #512]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a7f      	ldr	r2, [pc, #508]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	e02e      	b.n	8008ffc <HAL_RCC_OscConfig+0xd4>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10c      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x98>
 8008fa6:	4b7b      	ldr	r3, [pc, #492]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a7a      	ldr	r2, [pc, #488]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008fac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	4b78      	ldr	r3, [pc, #480]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a77      	ldr	r2, [pc, #476]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008fb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fbc:	6013      	str	r3, [r2, #0]
 8008fbe:	e01d      	b.n	8008ffc <HAL_RCC_OscConfig+0xd4>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008fc8:	d10c      	bne.n	8008fe4 <HAL_RCC_OscConfig+0xbc>
 8008fca:	4b72      	ldr	r3, [pc, #456]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a71      	ldr	r2, [pc, #452]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008fd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	4b6f      	ldr	r3, [pc, #444]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a6e      	ldr	r2, [pc, #440]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	e00b      	b.n	8008ffc <HAL_RCC_OscConfig+0xd4>
 8008fe4:	4b6b      	ldr	r3, [pc, #428]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a6a      	ldr	r2, [pc, #424]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	4b68      	ldr	r3, [pc, #416]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a67      	ldr	r2, [pc, #412]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8008ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ffa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d013      	beq.n	800902c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009004:	f7ff fc78 	bl	80088f8 <HAL_GetTick>
 8009008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800900a:	e008      	b.n	800901e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800900c:	f7ff fc74 	bl	80088f8 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	2b64      	cmp	r3, #100	@ 0x64
 8009018:	d901      	bls.n	800901e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e200      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800901e:	4b5d      	ldr	r3, [pc, #372]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0f0      	beq.n	800900c <HAL_RCC_OscConfig+0xe4>
 800902a:	e014      	b.n	8009056 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800902c:	f7ff fc64 	bl	80088f8 <HAL_GetTick>
 8009030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009032:	e008      	b.n	8009046 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009034:	f7ff fc60 	bl	80088f8 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b64      	cmp	r3, #100	@ 0x64
 8009040:	d901      	bls.n	8009046 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e1ec      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009046:	4b53      	ldr	r3, [pc, #332]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1f0      	bne.n	8009034 <HAL_RCC_OscConfig+0x10c>
 8009052:	e000      	b.n	8009056 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0302 	and.w	r3, r3, #2
 800905e:	2b00      	cmp	r3, #0
 8009060:	d063      	beq.n	800912a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009062:	4b4c      	ldr	r3, [pc, #304]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f003 030c 	and.w	r3, r3, #12
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00b      	beq.n	8009086 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800906e:	4b49      	ldr	r3, [pc, #292]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f003 030c 	and.w	r3, r3, #12
 8009076:	2b08      	cmp	r3, #8
 8009078:	d11c      	bne.n	80090b4 <HAL_RCC_OscConfig+0x18c>
 800907a:	4b46      	ldr	r3, [pc, #280]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009082:	2b00      	cmp	r3, #0
 8009084:	d116      	bne.n	80090b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009086:	4b43      	ldr	r3, [pc, #268]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d005      	beq.n	800909e <HAL_RCC_OscConfig+0x176>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d001      	beq.n	800909e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e1c0      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800909e:	4b3d      	ldr	r3, [pc, #244]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	00db      	lsls	r3, r3, #3
 80090ac:	4939      	ldr	r1, [pc, #228]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090b2:	e03a      	b.n	800912a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d020      	beq.n	80090fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090bc:	4b36      	ldr	r3, [pc, #216]	@ (8009198 <HAL_RCC_OscConfig+0x270>)
 80090be:	2201      	movs	r2, #1
 80090c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090c2:	f7ff fc19 	bl	80088f8 <HAL_GetTick>
 80090c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090c8:	e008      	b.n	80090dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090ca:	f7ff fc15 	bl	80088f8 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d901      	bls.n	80090dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e1a1      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090dc:	4b2d      	ldr	r3, [pc, #180]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0f0      	beq.n	80090ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090e8:	4b2a      	ldr	r3, [pc, #168]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	00db      	lsls	r3, r3, #3
 80090f6:	4927      	ldr	r1, [pc, #156]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	600b      	str	r3, [r1, #0]
 80090fc:	e015      	b.n	800912a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090fe:	4b26      	ldr	r3, [pc, #152]	@ (8009198 <HAL_RCC_OscConfig+0x270>)
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009104:	f7ff fbf8 	bl	80088f8 <HAL_GetTick>
 8009108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800910a:	e008      	b.n	800911e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800910c:	f7ff fbf4 	bl	80088f8 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	2b02      	cmp	r3, #2
 8009118:	d901      	bls.n	800911e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e180      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800911e:	4b1d      	ldr	r3, [pc, #116]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1f0      	bne.n	800910c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0308 	and.w	r3, r3, #8
 8009132:	2b00      	cmp	r3, #0
 8009134:	d03a      	beq.n	80091ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d019      	beq.n	8009172 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800913e:	4b17      	ldr	r3, [pc, #92]	@ (800919c <HAL_RCC_OscConfig+0x274>)
 8009140:	2201      	movs	r2, #1
 8009142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009144:	f7ff fbd8 	bl	80088f8 <HAL_GetTick>
 8009148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800914a:	e008      	b.n	800915e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800914c:	f7ff fbd4 	bl	80088f8 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b02      	cmp	r3, #2
 8009158:	d901      	bls.n	800915e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e160      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800915e:	4b0d      	ldr	r3, [pc, #52]	@ (8009194 <HAL_RCC_OscConfig+0x26c>)
 8009160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009162:	f003 0302 	and.w	r3, r3, #2
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0f0      	beq.n	800914c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800916a:	2001      	movs	r0, #1
 800916c:	f000 face 	bl	800970c <RCC_Delay>
 8009170:	e01c      	b.n	80091ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009172:	4b0a      	ldr	r3, [pc, #40]	@ (800919c <HAL_RCC_OscConfig+0x274>)
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009178:	f7ff fbbe 	bl	80088f8 <HAL_GetTick>
 800917c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800917e:	e00f      	b.n	80091a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009180:	f7ff fbba 	bl	80088f8 <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b02      	cmp	r3, #2
 800918c:	d908      	bls.n	80091a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e146      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
 8009192:	bf00      	nop
 8009194:	40021000 	.word	0x40021000
 8009198:	42420000 	.word	0x42420000
 800919c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091a0:	4b92      	ldr	r3, [pc, #584]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 80091a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a4:	f003 0302 	and.w	r3, r3, #2
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1e9      	bne.n	8009180 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 80a6 	beq.w	8009306 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091ba:	2300      	movs	r3, #0
 80091bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091be:	4b8b      	ldr	r3, [pc, #556]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10d      	bne.n	80091e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091ca:	4b88      	ldr	r3, [pc, #544]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	4a87      	ldr	r2, [pc, #540]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 80091d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091d4:	61d3      	str	r3, [r2, #28]
 80091d6:	4b85      	ldr	r3, [pc, #532]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091de:	60bb      	str	r3, [r7, #8]
 80091e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091e2:	2301      	movs	r3, #1
 80091e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091e6:	4b82      	ldr	r3, [pc, #520]	@ (80093f0 <HAL_RCC_OscConfig+0x4c8>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d118      	bne.n	8009224 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80091f2:	4b7f      	ldr	r3, [pc, #508]	@ (80093f0 <HAL_RCC_OscConfig+0x4c8>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a7e      	ldr	r2, [pc, #504]	@ (80093f0 <HAL_RCC_OscConfig+0x4c8>)
 80091f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091fe:	f7ff fb7b 	bl	80088f8 <HAL_GetTick>
 8009202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009204:	e008      	b.n	8009218 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009206:	f7ff fb77 	bl	80088f8 <HAL_GetTick>
 800920a:	4602      	mov	r2, r0
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	2b64      	cmp	r3, #100	@ 0x64
 8009212:	d901      	bls.n	8009218 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e103      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009218:	4b75      	ldr	r3, [pc, #468]	@ (80093f0 <HAL_RCC_OscConfig+0x4c8>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009220:	2b00      	cmp	r3, #0
 8009222:	d0f0      	beq.n	8009206 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d106      	bne.n	800923a <HAL_RCC_OscConfig+0x312>
 800922c:	4b6f      	ldr	r3, [pc, #444]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	4a6e      	ldr	r2, [pc, #440]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009232:	f043 0301 	orr.w	r3, r3, #1
 8009236:	6213      	str	r3, [r2, #32]
 8009238:	e02d      	b.n	8009296 <HAL_RCC_OscConfig+0x36e>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10c      	bne.n	800925c <HAL_RCC_OscConfig+0x334>
 8009242:	4b6a      	ldr	r3, [pc, #424]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	4a69      	ldr	r2, [pc, #420]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009248:	f023 0301 	bic.w	r3, r3, #1
 800924c:	6213      	str	r3, [r2, #32]
 800924e:	4b67      	ldr	r3, [pc, #412]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	4a66      	ldr	r2, [pc, #408]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009254:	f023 0304 	bic.w	r3, r3, #4
 8009258:	6213      	str	r3, [r2, #32]
 800925a:	e01c      	b.n	8009296 <HAL_RCC_OscConfig+0x36e>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	2b05      	cmp	r3, #5
 8009262:	d10c      	bne.n	800927e <HAL_RCC_OscConfig+0x356>
 8009264:	4b61      	ldr	r3, [pc, #388]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009266:	6a1b      	ldr	r3, [r3, #32]
 8009268:	4a60      	ldr	r2, [pc, #384]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 800926a:	f043 0304 	orr.w	r3, r3, #4
 800926e:	6213      	str	r3, [r2, #32]
 8009270:	4b5e      	ldr	r3, [pc, #376]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	4a5d      	ldr	r2, [pc, #372]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009276:	f043 0301 	orr.w	r3, r3, #1
 800927a:	6213      	str	r3, [r2, #32]
 800927c:	e00b      	b.n	8009296 <HAL_RCC_OscConfig+0x36e>
 800927e:	4b5b      	ldr	r3, [pc, #364]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	4a5a      	ldr	r2, [pc, #360]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	6213      	str	r3, [r2, #32]
 800928a:	4b58      	ldr	r3, [pc, #352]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	4a57      	ldr	r2, [pc, #348]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009290:	f023 0304 	bic.w	r3, r3, #4
 8009294:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d015      	beq.n	80092ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800929e:	f7ff fb2b 	bl	80088f8 <HAL_GetTick>
 80092a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092a4:	e00a      	b.n	80092bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092a6:	f7ff fb27 	bl	80088f8 <HAL_GetTick>
 80092aa:	4602      	mov	r2, r0
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d901      	bls.n	80092bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e0b1      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092bc:	4b4b      	ldr	r3, [pc, #300]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	f003 0302 	and.w	r3, r3, #2
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d0ee      	beq.n	80092a6 <HAL_RCC_OscConfig+0x37e>
 80092c8:	e014      	b.n	80092f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092ca:	f7ff fb15 	bl	80088f8 <HAL_GetTick>
 80092ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092d0:	e00a      	b.n	80092e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092d2:	f7ff fb11 	bl	80088f8 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d901      	bls.n	80092e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e09b      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092e8:	4b40      	ldr	r3, [pc, #256]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1ee      	bne.n	80092d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d105      	bne.n	8009306 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092fa:	4b3c      	ldr	r3, [pc, #240]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	4a3b      	ldr	r2, [pc, #236]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009300:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009304:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 8087 	beq.w	800941e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009310:	4b36      	ldr	r3, [pc, #216]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	f003 030c 	and.w	r3, r3, #12
 8009318:	2b08      	cmp	r3, #8
 800931a:	d061      	beq.n	80093e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d146      	bne.n	80093b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009324:	4b33      	ldr	r3, [pc, #204]	@ (80093f4 <HAL_RCC_OscConfig+0x4cc>)
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800932a:	f7ff fae5 	bl	80088f8 <HAL_GetTick>
 800932e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009330:	e008      	b.n	8009344 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009332:	f7ff fae1 	bl	80088f8 <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	2b02      	cmp	r3, #2
 800933e:	d901      	bls.n	8009344 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	e06d      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009344:	4b29      	ldr	r3, [pc, #164]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1f0      	bne.n	8009332 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009358:	d108      	bne.n	800936c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800935a:	4b24      	ldr	r3, [pc, #144]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	4921      	ldr	r1, [pc, #132]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009368:	4313      	orrs	r3, r2
 800936a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800936c:	4b1f      	ldr	r3, [pc, #124]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a19      	ldr	r1, [r3, #32]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937c:	430b      	orrs	r3, r1
 800937e:	491b      	ldr	r1, [pc, #108]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 8009380:	4313      	orrs	r3, r2
 8009382:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009384:	4b1b      	ldr	r3, [pc, #108]	@ (80093f4 <HAL_RCC_OscConfig+0x4cc>)
 8009386:	2201      	movs	r2, #1
 8009388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800938a:	f7ff fab5 	bl	80088f8 <HAL_GetTick>
 800938e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009390:	e008      	b.n	80093a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009392:	f7ff fab1 	bl	80088f8 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	2b02      	cmp	r3, #2
 800939e:	d901      	bls.n	80093a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e03d      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80093a4:	4b11      	ldr	r3, [pc, #68]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0f0      	beq.n	8009392 <HAL_RCC_OscConfig+0x46a>
 80093b0:	e035      	b.n	800941e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093b2:	4b10      	ldr	r3, [pc, #64]	@ (80093f4 <HAL_RCC_OscConfig+0x4cc>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093b8:	f7ff fa9e 	bl	80088f8 <HAL_GetTick>
 80093bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80093be:	e008      	b.n	80093d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093c0:	f7ff fa9a 	bl	80088f8 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d901      	bls.n	80093d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e026      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80093d2:	4b06      	ldr	r3, [pc, #24]	@ (80093ec <HAL_RCC_OscConfig+0x4c4>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1f0      	bne.n	80093c0 <HAL_RCC_OscConfig+0x498>
 80093de:	e01e      	b.n	800941e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d107      	bne.n	80093f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e019      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
 80093ec:	40021000 	.word	0x40021000
 80093f0:	40007000 	.word	0x40007000
 80093f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80093f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009428 <HAL_RCC_OscConfig+0x500>)
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a1b      	ldr	r3, [r3, #32]
 8009408:	429a      	cmp	r2, r3
 800940a:	d106      	bne.n	800941a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009416:	429a      	cmp	r2, r3
 8009418:	d001      	beq.n	800941e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	40021000 	.word	0x40021000

0800942c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e0d0      	b.n	80095e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009440:	4b6a      	ldr	r3, [pc, #424]	@ (80095ec <HAL_RCC_ClockConfig+0x1c0>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0307 	and.w	r3, r3, #7
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d910      	bls.n	8009470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800944e:	4b67      	ldr	r3, [pc, #412]	@ (80095ec <HAL_RCC_ClockConfig+0x1c0>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f023 0207 	bic.w	r2, r3, #7
 8009456:	4965      	ldr	r1, [pc, #404]	@ (80095ec <HAL_RCC_ClockConfig+0x1c0>)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	4313      	orrs	r3, r2
 800945c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800945e:	4b63      	ldr	r3, [pc, #396]	@ (80095ec <HAL_RCC_ClockConfig+0x1c0>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	429a      	cmp	r2, r3
 800946a:	d001      	beq.n	8009470 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e0b8      	b.n	80095e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0302 	and.w	r3, r3, #2
 8009478:	2b00      	cmp	r3, #0
 800947a:	d020      	beq.n	80094be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b00      	cmp	r3, #0
 8009486:	d005      	beq.n	8009494 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009488:	4b59      	ldr	r3, [pc, #356]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	4a58      	ldr	r2, [pc, #352]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 800948e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009492:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 0308 	and.w	r3, r3, #8
 800949c:	2b00      	cmp	r3, #0
 800949e:	d005      	beq.n	80094ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80094a0:	4b53      	ldr	r3, [pc, #332]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	4a52      	ldr	r2, [pc, #328]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 80094a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80094aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094ac:	4b50      	ldr	r3, [pc, #320]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	494d      	ldr	r1, [pc, #308]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d040      	beq.n	800954c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d107      	bne.n	80094e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094d2:	4b47      	ldr	r3, [pc, #284]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d115      	bne.n	800950a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e07f      	b.n	80095e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d107      	bne.n	80094fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094ea:	4b41      	ldr	r3, [pc, #260]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d109      	bne.n	800950a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e073      	b.n	80095e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094fa:	4b3d      	ldr	r3, [pc, #244]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0302 	and.w	r3, r3, #2
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e06b      	b.n	80095e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800950a:	4b39      	ldr	r3, [pc, #228]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f023 0203 	bic.w	r2, r3, #3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	4936      	ldr	r1, [pc, #216]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 8009518:	4313      	orrs	r3, r2
 800951a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800951c:	f7ff f9ec 	bl	80088f8 <HAL_GetTick>
 8009520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009522:	e00a      	b.n	800953a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009524:	f7ff f9e8 	bl	80088f8 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009532:	4293      	cmp	r3, r2
 8009534:	d901      	bls.n	800953a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e053      	b.n	80095e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800953a:	4b2d      	ldr	r3, [pc, #180]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f003 020c 	and.w	r2, r3, #12
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	429a      	cmp	r2, r3
 800954a:	d1eb      	bne.n	8009524 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800954c:	4b27      	ldr	r3, [pc, #156]	@ (80095ec <HAL_RCC_ClockConfig+0x1c0>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0307 	and.w	r3, r3, #7
 8009554:	683a      	ldr	r2, [r7, #0]
 8009556:	429a      	cmp	r2, r3
 8009558:	d210      	bcs.n	800957c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800955a:	4b24      	ldr	r3, [pc, #144]	@ (80095ec <HAL_RCC_ClockConfig+0x1c0>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f023 0207 	bic.w	r2, r3, #7
 8009562:	4922      	ldr	r1, [pc, #136]	@ (80095ec <HAL_RCC_ClockConfig+0x1c0>)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	4313      	orrs	r3, r2
 8009568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800956a:	4b20      	ldr	r3, [pc, #128]	@ (80095ec <HAL_RCC_ClockConfig+0x1c0>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	429a      	cmp	r2, r3
 8009576:	d001      	beq.n	800957c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e032      	b.n	80095e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d008      	beq.n	800959a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009588:	4b19      	ldr	r3, [pc, #100]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	4916      	ldr	r1, [pc, #88]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 8009596:	4313      	orrs	r3, r2
 8009598:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0308 	and.w	r3, r3, #8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d009      	beq.n	80095ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80095a6:	4b12      	ldr	r3, [pc, #72]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	490e      	ldr	r1, [pc, #56]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80095ba:	f000 f821 	bl	8009600 <HAL_RCC_GetSysClockFreq>
 80095be:	4602      	mov	r2, r0
 80095c0:	4b0b      	ldr	r3, [pc, #44]	@ (80095f0 <HAL_RCC_ClockConfig+0x1c4>)
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	091b      	lsrs	r3, r3, #4
 80095c6:	f003 030f 	and.w	r3, r3, #15
 80095ca:	490a      	ldr	r1, [pc, #40]	@ (80095f4 <HAL_RCC_ClockConfig+0x1c8>)
 80095cc:	5ccb      	ldrb	r3, [r1, r3]
 80095ce:	fa22 f303 	lsr.w	r3, r2, r3
 80095d2:	4a09      	ldr	r2, [pc, #36]	@ (80095f8 <HAL_RCC_ClockConfig+0x1cc>)
 80095d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80095d6:	4b09      	ldr	r3, [pc, #36]	@ (80095fc <HAL_RCC_ClockConfig+0x1d0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff f94a 	bl	8008874 <HAL_InitTick>

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	40022000 	.word	0x40022000
 80095f0:	40021000 	.word	0x40021000
 80095f4:	0800db90 	.word	0x0800db90
 80095f8:	20000008 	.word	0x20000008
 80095fc:	2000000c 	.word	0x2000000c

08009600 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009606:	2300      	movs	r3, #0
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	2300      	movs	r3, #0
 800960c:	60bb      	str	r3, [r7, #8]
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	2300      	movs	r3, #0
 8009614:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800961a:	4b1e      	ldr	r3, [pc, #120]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x94>)
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f003 030c 	and.w	r3, r3, #12
 8009626:	2b04      	cmp	r3, #4
 8009628:	d002      	beq.n	8009630 <HAL_RCC_GetSysClockFreq+0x30>
 800962a:	2b08      	cmp	r3, #8
 800962c:	d003      	beq.n	8009636 <HAL_RCC_GetSysClockFreq+0x36>
 800962e:	e027      	b.n	8009680 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009630:	4b19      	ldr	r3, [pc, #100]	@ (8009698 <HAL_RCC_GetSysClockFreq+0x98>)
 8009632:	613b      	str	r3, [r7, #16]
      break;
 8009634:	e027      	b.n	8009686 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	0c9b      	lsrs	r3, r3, #18
 800963a:	f003 030f 	and.w	r3, r3, #15
 800963e:	4a17      	ldr	r2, [pc, #92]	@ (800969c <HAL_RCC_GetSysClockFreq+0x9c>)
 8009640:	5cd3      	ldrb	r3, [r2, r3]
 8009642:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800964a:	2b00      	cmp	r3, #0
 800964c:	d010      	beq.n	8009670 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800964e:	4b11      	ldr	r3, [pc, #68]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x94>)
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	0c5b      	lsrs	r3, r3, #17
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	4a11      	ldr	r2, [pc, #68]	@ (80096a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800965a:	5cd3      	ldrb	r3, [r2, r3]
 800965c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a0d      	ldr	r2, [pc, #52]	@ (8009698 <HAL_RCC_GetSysClockFreq+0x98>)
 8009662:	fb03 f202 	mul.w	r2, r3, r2
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	fbb2 f3f3 	udiv	r3, r2, r3
 800966c:	617b      	str	r3, [r7, #20]
 800966e:	e004      	b.n	800967a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a0c      	ldr	r2, [pc, #48]	@ (80096a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009674:	fb02 f303 	mul.w	r3, r2, r3
 8009678:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	613b      	str	r3, [r7, #16]
      break;
 800967e:	e002      	b.n	8009686 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009680:	4b05      	ldr	r3, [pc, #20]	@ (8009698 <HAL_RCC_GetSysClockFreq+0x98>)
 8009682:	613b      	str	r3, [r7, #16]
      break;
 8009684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009686:	693b      	ldr	r3, [r7, #16]
}
 8009688:	4618      	mov	r0, r3
 800968a:	371c      	adds	r7, #28
 800968c:	46bd      	mov	sp, r7
 800968e:	bc80      	pop	{r7}
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	40021000 	.word	0x40021000
 8009698:	007a1200 	.word	0x007a1200
 800969c:	0800dba8 	.word	0x0800dba8
 80096a0:	0800dbb8 	.word	0x0800dbb8
 80096a4:	003d0900 	.word	0x003d0900

080096a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096a8:	b480      	push	{r7}
 80096aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096ac:	4b02      	ldr	r3, [pc, #8]	@ (80096b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80096ae:	681b      	ldr	r3, [r3, #0]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bc80      	pop	{r7}
 80096b6:	4770      	bx	lr
 80096b8:	20000008 	.word	0x20000008

080096bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80096c0:	f7ff fff2 	bl	80096a8 <HAL_RCC_GetHCLKFreq>
 80096c4:	4602      	mov	r2, r0
 80096c6:	4b05      	ldr	r3, [pc, #20]	@ (80096dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	0a1b      	lsrs	r3, r3, #8
 80096cc:	f003 0307 	and.w	r3, r3, #7
 80096d0:	4903      	ldr	r1, [pc, #12]	@ (80096e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80096d2:	5ccb      	ldrb	r3, [r1, r3]
 80096d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096d8:	4618      	mov	r0, r3
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	40021000 	.word	0x40021000
 80096e0:	0800dba0 	.word	0x0800dba0

080096e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80096e8:	f7ff ffde 	bl	80096a8 <HAL_RCC_GetHCLKFreq>
 80096ec:	4602      	mov	r2, r0
 80096ee:	4b05      	ldr	r3, [pc, #20]	@ (8009704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	0adb      	lsrs	r3, r3, #11
 80096f4:	f003 0307 	and.w	r3, r3, #7
 80096f8:	4903      	ldr	r1, [pc, #12]	@ (8009708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096fa:	5ccb      	ldrb	r3, [r1, r3]
 80096fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009700:	4618      	mov	r0, r3
 8009702:	bd80      	pop	{r7, pc}
 8009704:	40021000 	.word	0x40021000
 8009708:	0800dba0 	.word	0x0800dba0

0800970c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009714:	4b0a      	ldr	r3, [pc, #40]	@ (8009740 <RCC_Delay+0x34>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a0a      	ldr	r2, [pc, #40]	@ (8009744 <RCC_Delay+0x38>)
 800971a:	fba2 2303 	umull	r2, r3, r2, r3
 800971e:	0a5b      	lsrs	r3, r3, #9
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	fb02 f303 	mul.w	r3, r2, r3
 8009726:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009728:	bf00      	nop
  }
  while (Delay --);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	1e5a      	subs	r2, r3, #1
 800972e:	60fa      	str	r2, [r7, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1f9      	bne.n	8009728 <RCC_Delay+0x1c>
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	bc80      	pop	{r7}
 800973e:	4770      	bx	lr
 8009740:	20000008 	.word	0x20000008
 8009744:	10624dd3 	.word	0x10624dd3

08009748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e041      	b.n	80097de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fe ffaa 	bl	80086c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2202      	movs	r2, #2
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3304      	adds	r3, #4
 8009784:	4619      	mov	r1, r3
 8009786:	4610      	mov	r0, r2
 8009788:	f000 fa6a 	bl	8009c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
	...

080097e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d001      	beq.n	8009800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e044      	b.n	800988a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68da      	ldr	r2, [r3, #12]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f042 0201 	orr.w	r2, r2, #1
 8009816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a1d      	ldr	r2, [pc, #116]	@ (8009894 <HAL_TIM_Base_Start_IT+0xac>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d018      	beq.n	8009854 <HAL_TIM_Base_Start_IT+0x6c>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a1c      	ldr	r2, [pc, #112]	@ (8009898 <HAL_TIM_Base_Start_IT+0xb0>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d013      	beq.n	8009854 <HAL_TIM_Base_Start_IT+0x6c>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009834:	d00e      	beq.n	8009854 <HAL_TIM_Base_Start_IT+0x6c>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a18      	ldr	r2, [pc, #96]	@ (800989c <HAL_TIM_Base_Start_IT+0xb4>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d009      	beq.n	8009854 <HAL_TIM_Base_Start_IT+0x6c>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a16      	ldr	r2, [pc, #88]	@ (80098a0 <HAL_TIM_Base_Start_IT+0xb8>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d004      	beq.n	8009854 <HAL_TIM_Base_Start_IT+0x6c>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a15      	ldr	r2, [pc, #84]	@ (80098a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d111      	bne.n	8009878 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 0307 	and.w	r3, r3, #7
 800985e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b06      	cmp	r3, #6
 8009864:	d010      	beq.n	8009888 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f042 0201 	orr.w	r2, r2, #1
 8009874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009876:	e007      	b.n	8009888 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f042 0201 	orr.w	r2, r2, #1
 8009886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	bc80      	pop	{r7}
 8009892:	4770      	bx	lr
 8009894:	40012c00 	.word	0x40012c00
 8009898:	40013400 	.word	0x40013400
 800989c:	40000400 	.word	0x40000400
 80098a0:	40000800 	.word	0x40000800
 80098a4:	40000c00 	.word	0x40000c00

080098a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d020      	beq.n	800990c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f003 0302 	and.w	r3, r3, #2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d01b      	beq.n	800990c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f06f 0202 	mvn.w	r2, #2
 80098dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	f003 0303 	and.w	r3, r3, #3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f998 	bl	8009c28 <HAL_TIM_IC_CaptureCallback>
 80098f8:	e005      	b.n	8009906 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f98b 	bl	8009c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f99a 	bl	8009c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f003 0304 	and.w	r3, r3, #4
 8009912:	2b00      	cmp	r3, #0
 8009914:	d020      	beq.n	8009958 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f003 0304 	and.w	r3, r3, #4
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01b      	beq.n	8009958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f06f 0204 	mvn.w	r2, #4
 8009928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2202      	movs	r2, #2
 800992e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800993a:	2b00      	cmp	r3, #0
 800993c:	d003      	beq.n	8009946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f972 	bl	8009c28 <HAL_TIM_IC_CaptureCallback>
 8009944:	e005      	b.n	8009952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f965 	bl	8009c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f974 	bl	8009c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f003 0308 	and.w	r3, r3, #8
 800995e:	2b00      	cmp	r3, #0
 8009960:	d020      	beq.n	80099a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f003 0308 	and.w	r3, r3, #8
 8009968:	2b00      	cmp	r3, #0
 800996a:	d01b      	beq.n	80099a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f06f 0208 	mvn.w	r2, #8
 8009974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2204      	movs	r2, #4
 800997a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	f003 0303 	and.w	r3, r3, #3
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f94c 	bl	8009c28 <HAL_TIM_IC_CaptureCallback>
 8009990:	e005      	b.n	800999e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f93f 	bl	8009c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f94e 	bl	8009c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f003 0310 	and.w	r3, r3, #16
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d020      	beq.n	80099f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f003 0310 	and.w	r3, r3, #16
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d01b      	beq.n	80099f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f06f 0210 	mvn.w	r2, #16
 80099c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2208      	movs	r2, #8
 80099c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f926 	bl	8009c28 <HAL_TIM_IC_CaptureCallback>
 80099dc:	e005      	b.n	80099ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f919 	bl	8009c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f928 	bl	8009c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00c      	beq.n	8009a14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d007      	beq.n	8009a14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f06f 0201 	mvn.w	r2, #1
 8009a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7fe fb8c 	bl	800812c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00c      	beq.n	8009a38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d007      	beq.n	8009a38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 faa5 	bl	8009f82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00c      	beq.n	8009a5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d007      	beq.n	8009a5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f8f8 	bl	8009c4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	f003 0320 	and.w	r3, r3, #32
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00c      	beq.n	8009a80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f003 0320 	and.w	r3, r3, #32
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d007      	beq.n	8009a80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f06f 0220 	mvn.w	r2, #32
 8009a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fa78 	bl	8009f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a80:	bf00      	nop
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d101      	bne.n	8009aa4 <HAL_TIM_ConfigClockSource+0x1c>
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e0b4      	b.n	8009c0e <HAL_TIM_ConfigClockSource+0x186>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009aca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009adc:	d03e      	beq.n	8009b5c <HAL_TIM_ConfigClockSource+0xd4>
 8009ade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ae2:	f200 8087 	bhi.w	8009bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aea:	f000 8086 	beq.w	8009bfa <HAL_TIM_ConfigClockSource+0x172>
 8009aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009af2:	d87f      	bhi.n	8009bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8009af4:	2b70      	cmp	r3, #112	@ 0x70
 8009af6:	d01a      	beq.n	8009b2e <HAL_TIM_ConfigClockSource+0xa6>
 8009af8:	2b70      	cmp	r3, #112	@ 0x70
 8009afa:	d87b      	bhi.n	8009bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8009afc:	2b60      	cmp	r3, #96	@ 0x60
 8009afe:	d050      	beq.n	8009ba2 <HAL_TIM_ConfigClockSource+0x11a>
 8009b00:	2b60      	cmp	r3, #96	@ 0x60
 8009b02:	d877      	bhi.n	8009bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8009b04:	2b50      	cmp	r3, #80	@ 0x50
 8009b06:	d03c      	beq.n	8009b82 <HAL_TIM_ConfigClockSource+0xfa>
 8009b08:	2b50      	cmp	r3, #80	@ 0x50
 8009b0a:	d873      	bhi.n	8009bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8009b0c:	2b40      	cmp	r3, #64	@ 0x40
 8009b0e:	d058      	beq.n	8009bc2 <HAL_TIM_ConfigClockSource+0x13a>
 8009b10:	2b40      	cmp	r3, #64	@ 0x40
 8009b12:	d86f      	bhi.n	8009bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8009b14:	2b30      	cmp	r3, #48	@ 0x30
 8009b16:	d064      	beq.n	8009be2 <HAL_TIM_ConfigClockSource+0x15a>
 8009b18:	2b30      	cmp	r3, #48	@ 0x30
 8009b1a:	d86b      	bhi.n	8009bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	d060      	beq.n	8009be2 <HAL_TIM_ConfigClockSource+0x15a>
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	d867      	bhi.n	8009bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d05c      	beq.n	8009be2 <HAL_TIM_ConfigClockSource+0x15a>
 8009b28:	2b10      	cmp	r3, #16
 8009b2a:	d05a      	beq.n	8009be2 <HAL_TIM_ConfigClockSource+0x15a>
 8009b2c:	e062      	b.n	8009bf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b3e:	f000 f98c 	bl	8009e5a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009b50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	609a      	str	r2, [r3, #8]
      break;
 8009b5a:	e04f      	b.n	8009bfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b6c:	f000 f975 	bl	8009e5a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689a      	ldr	r2, [r3, #8]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b7e:	609a      	str	r2, [r3, #8]
      break;
 8009b80:	e03c      	b.n	8009bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f000 f8ec 	bl	8009d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2150      	movs	r1, #80	@ 0x50
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 f943 	bl	8009e26 <TIM_ITRx_SetConfig>
      break;
 8009ba0:	e02c      	b.n	8009bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f000 f90a 	bl	8009dc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2160      	movs	r1, #96	@ 0x60
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 f933 	bl	8009e26 <TIM_ITRx_SetConfig>
      break;
 8009bc0:	e01c      	b.n	8009bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bce:	461a      	mov	r2, r3
 8009bd0:	f000 f8cc 	bl	8009d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2140      	movs	r1, #64	@ 0x40
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 f923 	bl	8009e26 <TIM_ITRx_SetConfig>
      break;
 8009be0:	e00c      	b.n	8009bfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4619      	mov	r1, r3
 8009bec:	4610      	mov	r0, r2
 8009bee:	f000 f91a 	bl	8009e26 <TIM_ITRx_SetConfig>
      break;
 8009bf2:	e003      	b.n	8009bfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf8:	e000      	b.n	8009bfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c1e:	bf00      	nop
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bc80      	pop	{r7}
 8009c26:	4770      	bx	lr

08009c28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr

08009c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c42:	bf00      	nop
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bc80      	pop	{r7}
 8009c4a:	4770      	bx	lr

08009c4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bc80      	pop	{r7}
 8009c5c:	4770      	bx	lr
	...

08009c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a39      	ldr	r2, [pc, #228]	@ (8009d58 <TIM_Base_SetConfig+0xf8>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d013      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a38      	ldr	r2, [pc, #224]	@ (8009d5c <TIM_Base_SetConfig+0xfc>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d00f      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c86:	d00b      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a35      	ldr	r2, [pc, #212]	@ (8009d60 <TIM_Base_SetConfig+0x100>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d007      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a34      	ldr	r2, [pc, #208]	@ (8009d64 <TIM_Base_SetConfig+0x104>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d003      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a33      	ldr	r2, [pc, #204]	@ (8009d68 <TIM_Base_SetConfig+0x108>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d108      	bne.n	8009cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a28      	ldr	r2, [pc, #160]	@ (8009d58 <TIM_Base_SetConfig+0xf8>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d013      	beq.n	8009ce2 <TIM_Base_SetConfig+0x82>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a27      	ldr	r2, [pc, #156]	@ (8009d5c <TIM_Base_SetConfig+0xfc>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d00f      	beq.n	8009ce2 <TIM_Base_SetConfig+0x82>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cc8:	d00b      	beq.n	8009ce2 <TIM_Base_SetConfig+0x82>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a24      	ldr	r2, [pc, #144]	@ (8009d60 <TIM_Base_SetConfig+0x100>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d007      	beq.n	8009ce2 <TIM_Base_SetConfig+0x82>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a23      	ldr	r2, [pc, #140]	@ (8009d64 <TIM_Base_SetConfig+0x104>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d003      	beq.n	8009ce2 <TIM_Base_SetConfig+0x82>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a22      	ldr	r2, [pc, #136]	@ (8009d68 <TIM_Base_SetConfig+0x108>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d108      	bne.n	8009cf4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8009d58 <TIM_Base_SetConfig+0xf8>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d003      	beq.n	8009d28 <TIM_Base_SetConfig+0xc8>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a0e      	ldr	r2, [pc, #56]	@ (8009d5c <TIM_Base_SetConfig+0xfc>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d103      	bne.n	8009d30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	f023 0201 	bic.w	r2, r3, #1
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	611a      	str	r2, [r3, #16]
  }
}
 8009d4e:	bf00      	nop
 8009d50:	3714      	adds	r7, #20
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bc80      	pop	{r7}
 8009d56:	4770      	bx	lr
 8009d58:	40012c00 	.word	0x40012c00
 8009d5c:	40013400 	.word	0x40013400
 8009d60:	40000400 	.word	0x40000400
 8009d64:	40000800 	.word	0x40000800
 8009d68:	40000c00 	.word	0x40000c00

08009d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	f023 0201 	bic.w	r2, r3, #1
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	011b      	lsls	r3, r3, #4
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f023 030a 	bic.w	r3, r3, #10
 8009da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	621a      	str	r2, [r3, #32]
}
 8009dbe:	bf00      	nop
 8009dc0:	371c      	adds	r7, #28
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bc80      	pop	{r7}
 8009dc6:	4770      	bx	lr

08009dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	f023 0210 	bic.w	r2, r3, #16
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	031b      	lsls	r3, r3, #12
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	011b      	lsls	r3, r3, #4
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	621a      	str	r2, [r3, #32]
}
 8009e1c:	bf00      	nop
 8009e1e:	371c      	adds	r7, #28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr

08009e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b085      	sub	sp, #20
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	f043 0307 	orr.w	r3, r3, #7
 8009e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	609a      	str	r2, [r3, #8]
}
 8009e50:	bf00      	nop
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bc80      	pop	{r7}
 8009e58:	4770      	bx	lr

08009e5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b087      	sub	sp, #28
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	607a      	str	r2, [r7, #4]
 8009e66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	021a      	lsls	r2, r3, #8
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	431a      	orrs	r2, r3
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	609a      	str	r2, [r3, #8]
}
 8009e8e:	bf00      	nop
 8009e90:	371c      	adds	r7, #28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bc80      	pop	{r7}
 8009e96:	4770      	bx	lr

08009e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d101      	bne.n	8009eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009eac:	2302      	movs	r3, #2
 8009eae:	e050      	b.n	8009f52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2202      	movs	r2, #2
 8009ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a1b      	ldr	r2, [pc, #108]	@ (8009f5c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d018      	beq.n	8009f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a19      	ldr	r2, [pc, #100]	@ (8009f60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d013      	beq.n	8009f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f06:	d00e      	beq.n	8009f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a15      	ldr	r2, [pc, #84]	@ (8009f64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d009      	beq.n	8009f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a14      	ldr	r2, [pc, #80]	@ (8009f68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d004      	beq.n	8009f26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a12      	ldr	r2, [pc, #72]	@ (8009f6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d10c      	bne.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bc80      	pop	{r7}
 8009f5a:	4770      	bx	lr
 8009f5c:	40012c00 	.word	0x40012c00
 8009f60:	40013400 	.word	0x40013400
 8009f64:	40000400 	.word	0x40000400
 8009f68:	40000800 	.word	0x40000800
 8009f6c:	40000c00 	.word	0x40000c00

08009f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bc80      	pop	{r7}
 8009f80:	4770      	bx	lr

08009f82 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f8a:	bf00      	nop
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bc80      	pop	{r7}
 8009f92:	4770      	bx	lr

08009f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e042      	b.n	800a02c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d106      	bne.n	8009fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7fe fbd2 	bl	8008764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2224      	movs	r2, #36	@ 0x24
 8009fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68da      	ldr	r2, [r3, #12]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f82b 	bl	800a034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	691a      	ldr	r2, [r3, #16]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	695a      	ldr	r2, [r3, #20]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68da      	ldr	r2, [r3, #12]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a00c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2220      	movs	r2, #32
 800a018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2220      	movs	r2, #32
 800a020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68da      	ldr	r2, [r3, #12]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	689a      	ldr	r2, [r3, #8]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	431a      	orrs	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	4313      	orrs	r3, r2
 800a062:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a06e:	f023 030c 	bic.w	r3, r3, #12
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	6812      	ldr	r2, [r2, #0]
 800a076:	68b9      	ldr	r1, [r7, #8]
 800a078:	430b      	orrs	r3, r1
 800a07a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	699a      	ldr	r2, [r3, #24]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a2c      	ldr	r2, [pc, #176]	@ (800a148 <UART_SetConfig+0x114>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d103      	bne.n	800a0a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a09c:	f7ff fb22 	bl	80096e4 <HAL_RCC_GetPCLK2Freq>
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	e002      	b.n	800a0aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a0a4:	f7ff fb0a 	bl	80096bc <HAL_RCC_GetPCLK1Freq>
 800a0a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	009a      	lsls	r2, r3, #2
 800a0b4:	441a      	add	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0c0:	4a22      	ldr	r2, [pc, #136]	@ (800a14c <UART_SetConfig+0x118>)
 800a0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c6:	095b      	lsrs	r3, r3, #5
 800a0c8:	0119      	lsls	r1, r3, #4
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	009a      	lsls	r2, r3, #2
 800a0d4:	441a      	add	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a14c <UART_SetConfig+0x118>)
 800a0e2:	fba3 0302 	umull	r0, r3, r3, r2
 800a0e6:	095b      	lsrs	r3, r3, #5
 800a0e8:	2064      	movs	r0, #100	@ 0x64
 800a0ea:	fb00 f303 	mul.w	r3, r0, r3
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	011b      	lsls	r3, r3, #4
 800a0f2:	3332      	adds	r3, #50	@ 0x32
 800a0f4:	4a15      	ldr	r2, [pc, #84]	@ (800a14c <UART_SetConfig+0x118>)
 800a0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0fa:	095b      	lsrs	r3, r3, #5
 800a0fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a100:	4419      	add	r1, r3
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	009a      	lsls	r2, r3, #2
 800a10c:	441a      	add	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	fbb2 f2f3 	udiv	r2, r2, r3
 800a118:	4b0c      	ldr	r3, [pc, #48]	@ (800a14c <UART_SetConfig+0x118>)
 800a11a:	fba3 0302 	umull	r0, r3, r3, r2
 800a11e:	095b      	lsrs	r3, r3, #5
 800a120:	2064      	movs	r0, #100	@ 0x64
 800a122:	fb00 f303 	mul.w	r3, r0, r3
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	011b      	lsls	r3, r3, #4
 800a12a:	3332      	adds	r3, #50	@ 0x32
 800a12c:	4a07      	ldr	r2, [pc, #28]	@ (800a14c <UART_SetConfig+0x118>)
 800a12e:	fba2 2303 	umull	r2, r3, r2, r3
 800a132:	095b      	lsrs	r3, r3, #5
 800a134:	f003 020f 	and.w	r2, r3, #15
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	440a      	add	r2, r1
 800a13e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a140:	bf00      	nop
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	40013800 	.word	0x40013800
 800a14c:	51eb851f 	.word	0x51eb851f

0800a150 <malloc>:
 800a150:	4b02      	ldr	r3, [pc, #8]	@ (800a15c <malloc+0xc>)
 800a152:	4601      	mov	r1, r0
 800a154:	6818      	ldr	r0, [r3, #0]
 800a156:	f000 b825 	b.w	800a1a4 <_malloc_r>
 800a15a:	bf00      	nop
 800a15c:	20000014 	.word	0x20000014

0800a160 <sbrk_aligned>:
 800a160:	b570      	push	{r4, r5, r6, lr}
 800a162:	4e0f      	ldr	r6, [pc, #60]	@ (800a1a0 <sbrk_aligned+0x40>)
 800a164:	460c      	mov	r4, r1
 800a166:	6831      	ldr	r1, [r6, #0]
 800a168:	4605      	mov	r5, r0
 800a16a:	b911      	cbnz	r1, 800a172 <sbrk_aligned+0x12>
 800a16c:	f000 f8de 	bl	800a32c <_sbrk_r>
 800a170:	6030      	str	r0, [r6, #0]
 800a172:	4621      	mov	r1, r4
 800a174:	4628      	mov	r0, r5
 800a176:	f000 f8d9 	bl	800a32c <_sbrk_r>
 800a17a:	1c43      	adds	r3, r0, #1
 800a17c:	d103      	bne.n	800a186 <sbrk_aligned+0x26>
 800a17e:	f04f 34ff 	mov.w	r4, #4294967295
 800a182:	4620      	mov	r0, r4
 800a184:	bd70      	pop	{r4, r5, r6, pc}
 800a186:	1cc4      	adds	r4, r0, #3
 800a188:	f024 0403 	bic.w	r4, r4, #3
 800a18c:	42a0      	cmp	r0, r4
 800a18e:	d0f8      	beq.n	800a182 <sbrk_aligned+0x22>
 800a190:	1a21      	subs	r1, r4, r0
 800a192:	4628      	mov	r0, r5
 800a194:	f000 f8ca 	bl	800a32c <_sbrk_r>
 800a198:	3001      	adds	r0, #1
 800a19a:	d1f2      	bne.n	800a182 <sbrk_aligned+0x22>
 800a19c:	e7ef      	b.n	800a17e <sbrk_aligned+0x1e>
 800a19e:	bf00      	nop
 800a1a0:	20000188 	.word	0x20000188

0800a1a4 <_malloc_r>:
 800a1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1a8:	1ccd      	adds	r5, r1, #3
 800a1aa:	f025 0503 	bic.w	r5, r5, #3
 800a1ae:	3508      	adds	r5, #8
 800a1b0:	2d0c      	cmp	r5, #12
 800a1b2:	bf38      	it	cc
 800a1b4:	250c      	movcc	r5, #12
 800a1b6:	2d00      	cmp	r5, #0
 800a1b8:	4606      	mov	r6, r0
 800a1ba:	db01      	blt.n	800a1c0 <_malloc_r+0x1c>
 800a1bc:	42a9      	cmp	r1, r5
 800a1be:	d904      	bls.n	800a1ca <_malloc_r+0x26>
 800a1c0:	230c      	movs	r3, #12
 800a1c2:	6033      	str	r3, [r6, #0]
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2a0 <_malloc_r+0xfc>
 800a1ce:	f000 f869 	bl	800a2a4 <__malloc_lock>
 800a1d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1d6:	461c      	mov	r4, r3
 800a1d8:	bb44      	cbnz	r4, 800a22c <_malloc_r+0x88>
 800a1da:	4629      	mov	r1, r5
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f7ff ffbf 	bl	800a160 <sbrk_aligned>
 800a1e2:	1c43      	adds	r3, r0, #1
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	d158      	bne.n	800a29a <_malloc_r+0xf6>
 800a1e8:	f8d8 4000 	ldr.w	r4, [r8]
 800a1ec:	4627      	mov	r7, r4
 800a1ee:	2f00      	cmp	r7, #0
 800a1f0:	d143      	bne.n	800a27a <_malloc_r+0xd6>
 800a1f2:	2c00      	cmp	r4, #0
 800a1f4:	d04b      	beq.n	800a28e <_malloc_r+0xea>
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	eb04 0903 	add.w	r9, r4, r3
 800a200:	f000 f894 	bl	800a32c <_sbrk_r>
 800a204:	4581      	cmp	r9, r0
 800a206:	d142      	bne.n	800a28e <_malloc_r+0xea>
 800a208:	6821      	ldr	r1, [r4, #0]
 800a20a:	4630      	mov	r0, r6
 800a20c:	1a6d      	subs	r5, r5, r1
 800a20e:	4629      	mov	r1, r5
 800a210:	f7ff ffa6 	bl	800a160 <sbrk_aligned>
 800a214:	3001      	adds	r0, #1
 800a216:	d03a      	beq.n	800a28e <_malloc_r+0xea>
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	442b      	add	r3, r5
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	f8d8 3000 	ldr.w	r3, [r8]
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	bb62      	cbnz	r2, 800a280 <_malloc_r+0xdc>
 800a226:	f8c8 7000 	str.w	r7, [r8]
 800a22a:	e00f      	b.n	800a24c <_malloc_r+0xa8>
 800a22c:	6822      	ldr	r2, [r4, #0]
 800a22e:	1b52      	subs	r2, r2, r5
 800a230:	d420      	bmi.n	800a274 <_malloc_r+0xd0>
 800a232:	2a0b      	cmp	r2, #11
 800a234:	d917      	bls.n	800a266 <_malloc_r+0xc2>
 800a236:	1961      	adds	r1, r4, r5
 800a238:	42a3      	cmp	r3, r4
 800a23a:	6025      	str	r5, [r4, #0]
 800a23c:	bf18      	it	ne
 800a23e:	6059      	strne	r1, [r3, #4]
 800a240:	6863      	ldr	r3, [r4, #4]
 800a242:	bf08      	it	eq
 800a244:	f8c8 1000 	streq.w	r1, [r8]
 800a248:	5162      	str	r2, [r4, r5]
 800a24a:	604b      	str	r3, [r1, #4]
 800a24c:	4630      	mov	r0, r6
 800a24e:	f000 f82f 	bl	800a2b0 <__malloc_unlock>
 800a252:	f104 000b 	add.w	r0, r4, #11
 800a256:	1d23      	adds	r3, r4, #4
 800a258:	f020 0007 	bic.w	r0, r0, #7
 800a25c:	1ac2      	subs	r2, r0, r3
 800a25e:	bf1c      	itt	ne
 800a260:	1a1b      	subne	r3, r3, r0
 800a262:	50a3      	strne	r3, [r4, r2]
 800a264:	e7af      	b.n	800a1c6 <_malloc_r+0x22>
 800a266:	6862      	ldr	r2, [r4, #4]
 800a268:	42a3      	cmp	r3, r4
 800a26a:	bf0c      	ite	eq
 800a26c:	f8c8 2000 	streq.w	r2, [r8]
 800a270:	605a      	strne	r2, [r3, #4]
 800a272:	e7eb      	b.n	800a24c <_malloc_r+0xa8>
 800a274:	4623      	mov	r3, r4
 800a276:	6864      	ldr	r4, [r4, #4]
 800a278:	e7ae      	b.n	800a1d8 <_malloc_r+0x34>
 800a27a:	463c      	mov	r4, r7
 800a27c:	687f      	ldr	r7, [r7, #4]
 800a27e:	e7b6      	b.n	800a1ee <_malloc_r+0x4a>
 800a280:	461a      	mov	r2, r3
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	42a3      	cmp	r3, r4
 800a286:	d1fb      	bne.n	800a280 <_malloc_r+0xdc>
 800a288:	2300      	movs	r3, #0
 800a28a:	6053      	str	r3, [r2, #4]
 800a28c:	e7de      	b.n	800a24c <_malloc_r+0xa8>
 800a28e:	230c      	movs	r3, #12
 800a290:	4630      	mov	r0, r6
 800a292:	6033      	str	r3, [r6, #0]
 800a294:	f000 f80c 	bl	800a2b0 <__malloc_unlock>
 800a298:	e794      	b.n	800a1c4 <_malloc_r+0x20>
 800a29a:	6005      	str	r5, [r0, #0]
 800a29c:	e7d6      	b.n	800a24c <_malloc_r+0xa8>
 800a29e:	bf00      	nop
 800a2a0:	2000018c 	.word	0x2000018c

0800a2a4 <__malloc_lock>:
 800a2a4:	4801      	ldr	r0, [pc, #4]	@ (800a2ac <__malloc_lock+0x8>)
 800a2a6:	f000 b87b 	b.w	800a3a0 <__retarget_lock_acquire_recursive>
 800a2aa:	bf00      	nop
 800a2ac:	200002cc 	.word	0x200002cc

0800a2b0 <__malloc_unlock>:
 800a2b0:	4801      	ldr	r0, [pc, #4]	@ (800a2b8 <__malloc_unlock+0x8>)
 800a2b2:	f000 b876 	b.w	800a3a2 <__retarget_lock_release_recursive>
 800a2b6:	bf00      	nop
 800a2b8:	200002cc 	.word	0x200002cc

0800a2bc <siprintf>:
 800a2bc:	b40e      	push	{r1, r2, r3}
 800a2be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a2c2:	b500      	push	{lr}
 800a2c4:	b09c      	sub	sp, #112	@ 0x70
 800a2c6:	ab1d      	add	r3, sp, #116	@ 0x74
 800a2c8:	9002      	str	r0, [sp, #8]
 800a2ca:	9006      	str	r0, [sp, #24]
 800a2cc:	9107      	str	r1, [sp, #28]
 800a2ce:	9104      	str	r1, [sp, #16]
 800a2d0:	4808      	ldr	r0, [pc, #32]	@ (800a2f4 <siprintf+0x38>)
 800a2d2:	4909      	ldr	r1, [pc, #36]	@ (800a2f8 <siprintf+0x3c>)
 800a2d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2d8:	9105      	str	r1, [sp, #20]
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	a902      	add	r1, sp, #8
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	f000 f904 	bl	800a4ec <_svfiprintf_r>
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	9b02      	ldr	r3, [sp, #8]
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	b01c      	add	sp, #112	@ 0x70
 800a2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2f0:	b003      	add	sp, #12
 800a2f2:	4770      	bx	lr
 800a2f4:	20000014 	.word	0x20000014
 800a2f8:	ffff0208 	.word	0xffff0208

0800a2fc <memset>:
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	4402      	add	r2, r0
 800a300:	4293      	cmp	r3, r2
 800a302:	d100      	bne.n	800a306 <memset+0xa>
 800a304:	4770      	bx	lr
 800a306:	f803 1b01 	strb.w	r1, [r3], #1
 800a30a:	e7f9      	b.n	800a300 <memset+0x4>

0800a30c <strcat>:
 800a30c:	4602      	mov	r2, r0
 800a30e:	b510      	push	{r4, lr}
 800a310:	7814      	ldrb	r4, [r2, #0]
 800a312:	4613      	mov	r3, r2
 800a314:	3201      	adds	r2, #1
 800a316:	2c00      	cmp	r4, #0
 800a318:	d1fa      	bne.n	800a310 <strcat+0x4>
 800a31a:	3b01      	subs	r3, #1
 800a31c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a320:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a324:	2a00      	cmp	r2, #0
 800a326:	d1f9      	bne.n	800a31c <strcat+0x10>
 800a328:	bd10      	pop	{r4, pc}
	...

0800a32c <_sbrk_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	2300      	movs	r3, #0
 800a330:	4d05      	ldr	r5, [pc, #20]	@ (800a348 <_sbrk_r+0x1c>)
 800a332:	4604      	mov	r4, r0
 800a334:	4608      	mov	r0, r1
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	f7fe f93e 	bl	80085b8 <_sbrk>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d102      	bne.n	800a346 <_sbrk_r+0x1a>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	b103      	cbz	r3, 800a346 <_sbrk_r+0x1a>
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	200002c8 	.word	0x200002c8

0800a34c <__errno>:
 800a34c:	4b01      	ldr	r3, [pc, #4]	@ (800a354 <__errno+0x8>)
 800a34e:	6818      	ldr	r0, [r3, #0]
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20000014 	.word	0x20000014

0800a358 <__libc_init_array>:
 800a358:	b570      	push	{r4, r5, r6, lr}
 800a35a:	2600      	movs	r6, #0
 800a35c:	4d0c      	ldr	r5, [pc, #48]	@ (800a390 <__libc_init_array+0x38>)
 800a35e:	4c0d      	ldr	r4, [pc, #52]	@ (800a394 <__libc_init_array+0x3c>)
 800a360:	1b64      	subs	r4, r4, r5
 800a362:	10a4      	asrs	r4, r4, #2
 800a364:	42a6      	cmp	r6, r4
 800a366:	d109      	bne.n	800a37c <__libc_init_array+0x24>
 800a368:	f000 fbba 	bl	800aae0 <_init>
 800a36c:	2600      	movs	r6, #0
 800a36e:	4d0a      	ldr	r5, [pc, #40]	@ (800a398 <__libc_init_array+0x40>)
 800a370:	4c0a      	ldr	r4, [pc, #40]	@ (800a39c <__libc_init_array+0x44>)
 800a372:	1b64      	subs	r4, r4, r5
 800a374:	10a4      	asrs	r4, r4, #2
 800a376:	42a6      	cmp	r6, r4
 800a378:	d105      	bne.n	800a386 <__libc_init_array+0x2e>
 800a37a:	bd70      	pop	{r4, r5, r6, pc}
 800a37c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a380:	4798      	blx	r3
 800a382:	3601      	adds	r6, #1
 800a384:	e7ee      	b.n	800a364 <__libc_init_array+0xc>
 800a386:	f855 3b04 	ldr.w	r3, [r5], #4
 800a38a:	4798      	blx	r3
 800a38c:	3601      	adds	r6, #1
 800a38e:	e7f2      	b.n	800a376 <__libc_init_array+0x1e>
 800a390:	0800dbf8 	.word	0x0800dbf8
 800a394:	0800dbf8 	.word	0x0800dbf8
 800a398:	0800dbf8 	.word	0x0800dbf8
 800a39c:	0800dbfc 	.word	0x0800dbfc

0800a3a0 <__retarget_lock_acquire_recursive>:
 800a3a0:	4770      	bx	lr

0800a3a2 <__retarget_lock_release_recursive>:
 800a3a2:	4770      	bx	lr

0800a3a4 <_free_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	2900      	cmp	r1, #0
 800a3aa:	d040      	beq.n	800a42e <_free_r+0x8a>
 800a3ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3b0:	1f0c      	subs	r4, r1, #4
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	bfb8      	it	lt
 800a3b6:	18e4      	addlt	r4, r4, r3
 800a3b8:	f7ff ff74 	bl	800a2a4 <__malloc_lock>
 800a3bc:	4a1c      	ldr	r2, [pc, #112]	@ (800a430 <_free_r+0x8c>)
 800a3be:	6813      	ldr	r3, [r2, #0]
 800a3c0:	b933      	cbnz	r3, 800a3d0 <_free_r+0x2c>
 800a3c2:	6063      	str	r3, [r4, #4]
 800a3c4:	6014      	str	r4, [r2, #0]
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3cc:	f7ff bf70 	b.w	800a2b0 <__malloc_unlock>
 800a3d0:	42a3      	cmp	r3, r4
 800a3d2:	d908      	bls.n	800a3e6 <_free_r+0x42>
 800a3d4:	6820      	ldr	r0, [r4, #0]
 800a3d6:	1821      	adds	r1, r4, r0
 800a3d8:	428b      	cmp	r3, r1
 800a3da:	bf01      	itttt	eq
 800a3dc:	6819      	ldreq	r1, [r3, #0]
 800a3de:	685b      	ldreq	r3, [r3, #4]
 800a3e0:	1809      	addeq	r1, r1, r0
 800a3e2:	6021      	streq	r1, [r4, #0]
 800a3e4:	e7ed      	b.n	800a3c2 <_free_r+0x1e>
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	b10b      	cbz	r3, 800a3f0 <_free_r+0x4c>
 800a3ec:	42a3      	cmp	r3, r4
 800a3ee:	d9fa      	bls.n	800a3e6 <_free_r+0x42>
 800a3f0:	6811      	ldr	r1, [r2, #0]
 800a3f2:	1850      	adds	r0, r2, r1
 800a3f4:	42a0      	cmp	r0, r4
 800a3f6:	d10b      	bne.n	800a410 <_free_r+0x6c>
 800a3f8:	6820      	ldr	r0, [r4, #0]
 800a3fa:	4401      	add	r1, r0
 800a3fc:	1850      	adds	r0, r2, r1
 800a3fe:	4283      	cmp	r3, r0
 800a400:	6011      	str	r1, [r2, #0]
 800a402:	d1e0      	bne.n	800a3c6 <_free_r+0x22>
 800a404:	6818      	ldr	r0, [r3, #0]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	4408      	add	r0, r1
 800a40a:	6010      	str	r0, [r2, #0]
 800a40c:	6053      	str	r3, [r2, #4]
 800a40e:	e7da      	b.n	800a3c6 <_free_r+0x22>
 800a410:	d902      	bls.n	800a418 <_free_r+0x74>
 800a412:	230c      	movs	r3, #12
 800a414:	602b      	str	r3, [r5, #0]
 800a416:	e7d6      	b.n	800a3c6 <_free_r+0x22>
 800a418:	6820      	ldr	r0, [r4, #0]
 800a41a:	1821      	adds	r1, r4, r0
 800a41c:	428b      	cmp	r3, r1
 800a41e:	bf01      	itttt	eq
 800a420:	6819      	ldreq	r1, [r3, #0]
 800a422:	685b      	ldreq	r3, [r3, #4]
 800a424:	1809      	addeq	r1, r1, r0
 800a426:	6021      	streq	r1, [r4, #0]
 800a428:	6063      	str	r3, [r4, #4]
 800a42a:	6054      	str	r4, [r2, #4]
 800a42c:	e7cb      	b.n	800a3c6 <_free_r+0x22>
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
 800a430:	2000018c 	.word	0x2000018c

0800a434 <__ssputs_r>:
 800a434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a438:	461f      	mov	r7, r3
 800a43a:	688e      	ldr	r6, [r1, #8]
 800a43c:	4682      	mov	sl, r0
 800a43e:	42be      	cmp	r6, r7
 800a440:	460c      	mov	r4, r1
 800a442:	4690      	mov	r8, r2
 800a444:	680b      	ldr	r3, [r1, #0]
 800a446:	d82d      	bhi.n	800a4a4 <__ssputs_r+0x70>
 800a448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a44c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a450:	d026      	beq.n	800a4a0 <__ssputs_r+0x6c>
 800a452:	6965      	ldr	r5, [r4, #20]
 800a454:	6909      	ldr	r1, [r1, #16]
 800a456:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a45a:	eba3 0901 	sub.w	r9, r3, r1
 800a45e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a462:	1c7b      	adds	r3, r7, #1
 800a464:	444b      	add	r3, r9
 800a466:	106d      	asrs	r5, r5, #1
 800a468:	429d      	cmp	r5, r3
 800a46a:	bf38      	it	cc
 800a46c:	461d      	movcc	r5, r3
 800a46e:	0553      	lsls	r3, r2, #21
 800a470:	d527      	bpl.n	800a4c2 <__ssputs_r+0x8e>
 800a472:	4629      	mov	r1, r5
 800a474:	f7ff fe96 	bl	800a1a4 <_malloc_r>
 800a478:	4606      	mov	r6, r0
 800a47a:	b360      	cbz	r0, 800a4d6 <__ssputs_r+0xa2>
 800a47c:	464a      	mov	r2, r9
 800a47e:	6921      	ldr	r1, [r4, #16]
 800a480:	f000 faea 	bl	800aa58 <memcpy>
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a48a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a48e:	81a3      	strh	r3, [r4, #12]
 800a490:	6126      	str	r6, [r4, #16]
 800a492:	444e      	add	r6, r9
 800a494:	6026      	str	r6, [r4, #0]
 800a496:	463e      	mov	r6, r7
 800a498:	6165      	str	r5, [r4, #20]
 800a49a:	eba5 0509 	sub.w	r5, r5, r9
 800a49e:	60a5      	str	r5, [r4, #8]
 800a4a0:	42be      	cmp	r6, r7
 800a4a2:	d900      	bls.n	800a4a6 <__ssputs_r+0x72>
 800a4a4:	463e      	mov	r6, r7
 800a4a6:	4632      	mov	r2, r6
 800a4a8:	4641      	mov	r1, r8
 800a4aa:	6820      	ldr	r0, [r4, #0]
 800a4ac:	f000 faac 	bl	800aa08 <memmove>
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	1b9b      	subs	r3, r3, r6
 800a4b6:	60a3      	str	r3, [r4, #8]
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	4433      	add	r3, r6
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c2:	462a      	mov	r2, r5
 800a4c4:	f000 fad6 	bl	800aa74 <_realloc_r>
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d1e0      	bne.n	800a490 <__ssputs_r+0x5c>
 800a4ce:	4650      	mov	r0, sl
 800a4d0:	6921      	ldr	r1, [r4, #16]
 800a4d2:	f7ff ff67 	bl	800a3a4 <_free_r>
 800a4d6:	230c      	movs	r3, #12
 800a4d8:	f8ca 3000 	str.w	r3, [sl]
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4e6:	81a3      	strh	r3, [r4, #12]
 800a4e8:	e7e9      	b.n	800a4be <__ssputs_r+0x8a>
	...

0800a4ec <_svfiprintf_r>:
 800a4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	4698      	mov	r8, r3
 800a4f2:	898b      	ldrh	r3, [r1, #12]
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	061b      	lsls	r3, r3, #24
 800a4f8:	460d      	mov	r5, r1
 800a4fa:	4614      	mov	r4, r2
 800a4fc:	b09d      	sub	sp, #116	@ 0x74
 800a4fe:	d510      	bpl.n	800a522 <_svfiprintf_r+0x36>
 800a500:	690b      	ldr	r3, [r1, #16]
 800a502:	b973      	cbnz	r3, 800a522 <_svfiprintf_r+0x36>
 800a504:	2140      	movs	r1, #64	@ 0x40
 800a506:	f7ff fe4d 	bl	800a1a4 <_malloc_r>
 800a50a:	6028      	str	r0, [r5, #0]
 800a50c:	6128      	str	r0, [r5, #16]
 800a50e:	b930      	cbnz	r0, 800a51e <_svfiprintf_r+0x32>
 800a510:	230c      	movs	r3, #12
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	f04f 30ff 	mov.w	r0, #4294967295
 800a518:	b01d      	add	sp, #116	@ 0x74
 800a51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51e:	2340      	movs	r3, #64	@ 0x40
 800a520:	616b      	str	r3, [r5, #20]
 800a522:	2300      	movs	r3, #0
 800a524:	9309      	str	r3, [sp, #36]	@ 0x24
 800a526:	2320      	movs	r3, #32
 800a528:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a52c:	2330      	movs	r3, #48	@ 0x30
 800a52e:	f04f 0901 	mov.w	r9, #1
 800a532:	f8cd 800c 	str.w	r8, [sp, #12]
 800a536:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a6d0 <_svfiprintf_r+0x1e4>
 800a53a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a53e:	4623      	mov	r3, r4
 800a540:	469a      	mov	sl, r3
 800a542:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a546:	b10a      	cbz	r2, 800a54c <_svfiprintf_r+0x60>
 800a548:	2a25      	cmp	r2, #37	@ 0x25
 800a54a:	d1f9      	bne.n	800a540 <_svfiprintf_r+0x54>
 800a54c:	ebba 0b04 	subs.w	fp, sl, r4
 800a550:	d00b      	beq.n	800a56a <_svfiprintf_r+0x7e>
 800a552:	465b      	mov	r3, fp
 800a554:	4622      	mov	r2, r4
 800a556:	4629      	mov	r1, r5
 800a558:	4638      	mov	r0, r7
 800a55a:	f7ff ff6b 	bl	800a434 <__ssputs_r>
 800a55e:	3001      	adds	r0, #1
 800a560:	f000 80a7 	beq.w	800a6b2 <_svfiprintf_r+0x1c6>
 800a564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a566:	445a      	add	r2, fp
 800a568:	9209      	str	r2, [sp, #36]	@ 0x24
 800a56a:	f89a 3000 	ldrb.w	r3, [sl]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f000 809f 	beq.w	800a6b2 <_svfiprintf_r+0x1c6>
 800a574:	2300      	movs	r3, #0
 800a576:	f04f 32ff 	mov.w	r2, #4294967295
 800a57a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a57e:	f10a 0a01 	add.w	sl, sl, #1
 800a582:	9304      	str	r3, [sp, #16]
 800a584:	9307      	str	r3, [sp, #28]
 800a586:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a58a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a58c:	4654      	mov	r4, sl
 800a58e:	2205      	movs	r2, #5
 800a590:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a594:	484e      	ldr	r0, [pc, #312]	@ (800a6d0 <_svfiprintf_r+0x1e4>)
 800a596:	f000 fa51 	bl	800aa3c <memchr>
 800a59a:	9a04      	ldr	r2, [sp, #16]
 800a59c:	b9d8      	cbnz	r0, 800a5d6 <_svfiprintf_r+0xea>
 800a59e:	06d0      	lsls	r0, r2, #27
 800a5a0:	bf44      	itt	mi
 800a5a2:	2320      	movmi	r3, #32
 800a5a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5a8:	0711      	lsls	r1, r2, #28
 800a5aa:	bf44      	itt	mi
 800a5ac:	232b      	movmi	r3, #43	@ 0x2b
 800a5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5b8:	d015      	beq.n	800a5e6 <_svfiprintf_r+0xfa>
 800a5ba:	4654      	mov	r4, sl
 800a5bc:	2000      	movs	r0, #0
 800a5be:	f04f 0c0a 	mov.w	ip, #10
 800a5c2:	9a07      	ldr	r2, [sp, #28]
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5ca:	3b30      	subs	r3, #48	@ 0x30
 800a5cc:	2b09      	cmp	r3, #9
 800a5ce:	d94b      	bls.n	800a668 <_svfiprintf_r+0x17c>
 800a5d0:	b1b0      	cbz	r0, 800a600 <_svfiprintf_r+0x114>
 800a5d2:	9207      	str	r2, [sp, #28]
 800a5d4:	e014      	b.n	800a600 <_svfiprintf_r+0x114>
 800a5d6:	eba0 0308 	sub.w	r3, r0, r8
 800a5da:	fa09 f303 	lsl.w	r3, r9, r3
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	46a2      	mov	sl, r4
 800a5e2:	9304      	str	r3, [sp, #16]
 800a5e4:	e7d2      	b.n	800a58c <_svfiprintf_r+0xa0>
 800a5e6:	9b03      	ldr	r3, [sp, #12]
 800a5e8:	1d19      	adds	r1, r3, #4
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	9103      	str	r1, [sp, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	bfbb      	ittet	lt
 800a5f2:	425b      	neglt	r3, r3
 800a5f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a5f8:	9307      	strge	r3, [sp, #28]
 800a5fa:	9307      	strlt	r3, [sp, #28]
 800a5fc:	bfb8      	it	lt
 800a5fe:	9204      	strlt	r2, [sp, #16]
 800a600:	7823      	ldrb	r3, [r4, #0]
 800a602:	2b2e      	cmp	r3, #46	@ 0x2e
 800a604:	d10a      	bne.n	800a61c <_svfiprintf_r+0x130>
 800a606:	7863      	ldrb	r3, [r4, #1]
 800a608:	2b2a      	cmp	r3, #42	@ 0x2a
 800a60a:	d132      	bne.n	800a672 <_svfiprintf_r+0x186>
 800a60c:	9b03      	ldr	r3, [sp, #12]
 800a60e:	3402      	adds	r4, #2
 800a610:	1d1a      	adds	r2, r3, #4
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	9203      	str	r2, [sp, #12]
 800a616:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a61a:	9305      	str	r3, [sp, #20]
 800a61c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a6d4 <_svfiprintf_r+0x1e8>
 800a620:	2203      	movs	r2, #3
 800a622:	4650      	mov	r0, sl
 800a624:	7821      	ldrb	r1, [r4, #0]
 800a626:	f000 fa09 	bl	800aa3c <memchr>
 800a62a:	b138      	cbz	r0, 800a63c <_svfiprintf_r+0x150>
 800a62c:	2240      	movs	r2, #64	@ 0x40
 800a62e:	9b04      	ldr	r3, [sp, #16]
 800a630:	eba0 000a 	sub.w	r0, r0, sl
 800a634:	4082      	lsls	r2, r0
 800a636:	4313      	orrs	r3, r2
 800a638:	3401      	adds	r4, #1
 800a63a:	9304      	str	r3, [sp, #16]
 800a63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a640:	2206      	movs	r2, #6
 800a642:	4825      	ldr	r0, [pc, #148]	@ (800a6d8 <_svfiprintf_r+0x1ec>)
 800a644:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a648:	f000 f9f8 	bl	800aa3c <memchr>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d036      	beq.n	800a6be <_svfiprintf_r+0x1d2>
 800a650:	4b22      	ldr	r3, [pc, #136]	@ (800a6dc <_svfiprintf_r+0x1f0>)
 800a652:	bb1b      	cbnz	r3, 800a69c <_svfiprintf_r+0x1b0>
 800a654:	9b03      	ldr	r3, [sp, #12]
 800a656:	3307      	adds	r3, #7
 800a658:	f023 0307 	bic.w	r3, r3, #7
 800a65c:	3308      	adds	r3, #8
 800a65e:	9303      	str	r3, [sp, #12]
 800a660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a662:	4433      	add	r3, r6
 800a664:	9309      	str	r3, [sp, #36]	@ 0x24
 800a666:	e76a      	b.n	800a53e <_svfiprintf_r+0x52>
 800a668:	460c      	mov	r4, r1
 800a66a:	2001      	movs	r0, #1
 800a66c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a670:	e7a8      	b.n	800a5c4 <_svfiprintf_r+0xd8>
 800a672:	2300      	movs	r3, #0
 800a674:	f04f 0c0a 	mov.w	ip, #10
 800a678:	4619      	mov	r1, r3
 800a67a:	3401      	adds	r4, #1
 800a67c:	9305      	str	r3, [sp, #20]
 800a67e:	4620      	mov	r0, r4
 800a680:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a684:	3a30      	subs	r2, #48	@ 0x30
 800a686:	2a09      	cmp	r2, #9
 800a688:	d903      	bls.n	800a692 <_svfiprintf_r+0x1a6>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d0c6      	beq.n	800a61c <_svfiprintf_r+0x130>
 800a68e:	9105      	str	r1, [sp, #20]
 800a690:	e7c4      	b.n	800a61c <_svfiprintf_r+0x130>
 800a692:	4604      	mov	r4, r0
 800a694:	2301      	movs	r3, #1
 800a696:	fb0c 2101 	mla	r1, ip, r1, r2
 800a69a:	e7f0      	b.n	800a67e <_svfiprintf_r+0x192>
 800a69c:	ab03      	add	r3, sp, #12
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	462a      	mov	r2, r5
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a6e0 <_svfiprintf_r+0x1f4>)
 800a6a6:	a904      	add	r1, sp, #16
 800a6a8:	f3af 8000 	nop.w
 800a6ac:	1c42      	adds	r2, r0, #1
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	d1d6      	bne.n	800a660 <_svfiprintf_r+0x174>
 800a6b2:	89ab      	ldrh	r3, [r5, #12]
 800a6b4:	065b      	lsls	r3, r3, #25
 800a6b6:	f53f af2d 	bmi.w	800a514 <_svfiprintf_r+0x28>
 800a6ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6bc:	e72c      	b.n	800a518 <_svfiprintf_r+0x2c>
 800a6be:	ab03      	add	r3, sp, #12
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	462a      	mov	r2, r5
 800a6c4:	4638      	mov	r0, r7
 800a6c6:	4b06      	ldr	r3, [pc, #24]	@ (800a6e0 <_svfiprintf_r+0x1f4>)
 800a6c8:	a904      	add	r1, sp, #16
 800a6ca:	f000 f87d 	bl	800a7c8 <_printf_i>
 800a6ce:	e7ed      	b.n	800a6ac <_svfiprintf_r+0x1c0>
 800a6d0:	0800dbba 	.word	0x0800dbba
 800a6d4:	0800dbc0 	.word	0x0800dbc0
 800a6d8:	0800dbc4 	.word	0x0800dbc4
 800a6dc:	00000000 	.word	0x00000000
 800a6e0:	0800a435 	.word	0x0800a435

0800a6e4 <_printf_common>:
 800a6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e8:	4616      	mov	r6, r2
 800a6ea:	4698      	mov	r8, r3
 800a6ec:	688a      	ldr	r2, [r1, #8]
 800a6ee:	690b      	ldr	r3, [r1, #16]
 800a6f0:	4607      	mov	r7, r0
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	bfb8      	it	lt
 800a6f6:	4613      	movlt	r3, r2
 800a6f8:	6033      	str	r3, [r6, #0]
 800a6fa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6fe:	460c      	mov	r4, r1
 800a700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a704:	b10a      	cbz	r2, 800a70a <_printf_common+0x26>
 800a706:	3301      	adds	r3, #1
 800a708:	6033      	str	r3, [r6, #0]
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	0699      	lsls	r1, r3, #26
 800a70e:	bf42      	ittt	mi
 800a710:	6833      	ldrmi	r3, [r6, #0]
 800a712:	3302      	addmi	r3, #2
 800a714:	6033      	strmi	r3, [r6, #0]
 800a716:	6825      	ldr	r5, [r4, #0]
 800a718:	f015 0506 	ands.w	r5, r5, #6
 800a71c:	d106      	bne.n	800a72c <_printf_common+0x48>
 800a71e:	f104 0a19 	add.w	sl, r4, #25
 800a722:	68e3      	ldr	r3, [r4, #12]
 800a724:	6832      	ldr	r2, [r6, #0]
 800a726:	1a9b      	subs	r3, r3, r2
 800a728:	42ab      	cmp	r3, r5
 800a72a:	dc2b      	bgt.n	800a784 <_printf_common+0xa0>
 800a72c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a730:	6822      	ldr	r2, [r4, #0]
 800a732:	3b00      	subs	r3, #0
 800a734:	bf18      	it	ne
 800a736:	2301      	movne	r3, #1
 800a738:	0692      	lsls	r2, r2, #26
 800a73a:	d430      	bmi.n	800a79e <_printf_common+0xba>
 800a73c:	4641      	mov	r1, r8
 800a73e:	4638      	mov	r0, r7
 800a740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a744:	47c8      	blx	r9
 800a746:	3001      	adds	r0, #1
 800a748:	d023      	beq.n	800a792 <_printf_common+0xae>
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	6922      	ldr	r2, [r4, #16]
 800a74e:	f003 0306 	and.w	r3, r3, #6
 800a752:	2b04      	cmp	r3, #4
 800a754:	bf14      	ite	ne
 800a756:	2500      	movne	r5, #0
 800a758:	6833      	ldreq	r3, [r6, #0]
 800a75a:	f04f 0600 	mov.w	r6, #0
 800a75e:	bf08      	it	eq
 800a760:	68e5      	ldreq	r5, [r4, #12]
 800a762:	f104 041a 	add.w	r4, r4, #26
 800a766:	bf08      	it	eq
 800a768:	1aed      	subeq	r5, r5, r3
 800a76a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a76e:	bf08      	it	eq
 800a770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a774:	4293      	cmp	r3, r2
 800a776:	bfc4      	itt	gt
 800a778:	1a9b      	subgt	r3, r3, r2
 800a77a:	18ed      	addgt	r5, r5, r3
 800a77c:	42b5      	cmp	r5, r6
 800a77e:	d11a      	bne.n	800a7b6 <_printf_common+0xd2>
 800a780:	2000      	movs	r0, #0
 800a782:	e008      	b.n	800a796 <_printf_common+0xb2>
 800a784:	2301      	movs	r3, #1
 800a786:	4652      	mov	r2, sl
 800a788:	4641      	mov	r1, r8
 800a78a:	4638      	mov	r0, r7
 800a78c:	47c8      	blx	r9
 800a78e:	3001      	adds	r0, #1
 800a790:	d103      	bne.n	800a79a <_printf_common+0xb6>
 800a792:	f04f 30ff 	mov.w	r0, #4294967295
 800a796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a79a:	3501      	adds	r5, #1
 800a79c:	e7c1      	b.n	800a722 <_printf_common+0x3e>
 800a79e:	2030      	movs	r0, #48	@ 0x30
 800a7a0:	18e1      	adds	r1, r4, r3
 800a7a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7a6:	1c5a      	adds	r2, r3, #1
 800a7a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a7ac:	4422      	add	r2, r4
 800a7ae:	3302      	adds	r3, #2
 800a7b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7b4:	e7c2      	b.n	800a73c <_printf_common+0x58>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	4641      	mov	r1, r8
 800a7bc:	4638      	mov	r0, r7
 800a7be:	47c8      	blx	r9
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	d0e6      	beq.n	800a792 <_printf_common+0xae>
 800a7c4:	3601      	adds	r6, #1
 800a7c6:	e7d9      	b.n	800a77c <_printf_common+0x98>

0800a7c8 <_printf_i>:
 800a7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7cc:	7e0f      	ldrb	r7, [r1, #24]
 800a7ce:	4691      	mov	r9, r2
 800a7d0:	2f78      	cmp	r7, #120	@ 0x78
 800a7d2:	4680      	mov	r8, r0
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	469a      	mov	sl, r3
 800a7d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7de:	d807      	bhi.n	800a7f0 <_printf_i+0x28>
 800a7e0:	2f62      	cmp	r7, #98	@ 0x62
 800a7e2:	d80a      	bhi.n	800a7fa <_printf_i+0x32>
 800a7e4:	2f00      	cmp	r7, #0
 800a7e6:	f000 80d3 	beq.w	800a990 <_printf_i+0x1c8>
 800a7ea:	2f58      	cmp	r7, #88	@ 0x58
 800a7ec:	f000 80ba 	beq.w	800a964 <_printf_i+0x19c>
 800a7f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7f8:	e03a      	b.n	800a870 <_printf_i+0xa8>
 800a7fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7fe:	2b15      	cmp	r3, #21
 800a800:	d8f6      	bhi.n	800a7f0 <_printf_i+0x28>
 800a802:	a101      	add	r1, pc, #4	@ (adr r1, 800a808 <_printf_i+0x40>)
 800a804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a808:	0800a861 	.word	0x0800a861
 800a80c:	0800a875 	.word	0x0800a875
 800a810:	0800a7f1 	.word	0x0800a7f1
 800a814:	0800a7f1 	.word	0x0800a7f1
 800a818:	0800a7f1 	.word	0x0800a7f1
 800a81c:	0800a7f1 	.word	0x0800a7f1
 800a820:	0800a875 	.word	0x0800a875
 800a824:	0800a7f1 	.word	0x0800a7f1
 800a828:	0800a7f1 	.word	0x0800a7f1
 800a82c:	0800a7f1 	.word	0x0800a7f1
 800a830:	0800a7f1 	.word	0x0800a7f1
 800a834:	0800a977 	.word	0x0800a977
 800a838:	0800a89f 	.word	0x0800a89f
 800a83c:	0800a931 	.word	0x0800a931
 800a840:	0800a7f1 	.word	0x0800a7f1
 800a844:	0800a7f1 	.word	0x0800a7f1
 800a848:	0800a999 	.word	0x0800a999
 800a84c:	0800a7f1 	.word	0x0800a7f1
 800a850:	0800a89f 	.word	0x0800a89f
 800a854:	0800a7f1 	.word	0x0800a7f1
 800a858:	0800a7f1 	.word	0x0800a7f1
 800a85c:	0800a939 	.word	0x0800a939
 800a860:	6833      	ldr	r3, [r6, #0]
 800a862:	1d1a      	adds	r2, r3, #4
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6032      	str	r2, [r6, #0]
 800a868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a86c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a870:	2301      	movs	r3, #1
 800a872:	e09e      	b.n	800a9b2 <_printf_i+0x1ea>
 800a874:	6833      	ldr	r3, [r6, #0]
 800a876:	6820      	ldr	r0, [r4, #0]
 800a878:	1d19      	adds	r1, r3, #4
 800a87a:	6031      	str	r1, [r6, #0]
 800a87c:	0606      	lsls	r6, r0, #24
 800a87e:	d501      	bpl.n	800a884 <_printf_i+0xbc>
 800a880:	681d      	ldr	r5, [r3, #0]
 800a882:	e003      	b.n	800a88c <_printf_i+0xc4>
 800a884:	0645      	lsls	r5, r0, #25
 800a886:	d5fb      	bpl.n	800a880 <_printf_i+0xb8>
 800a888:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a88c:	2d00      	cmp	r5, #0
 800a88e:	da03      	bge.n	800a898 <_printf_i+0xd0>
 800a890:	232d      	movs	r3, #45	@ 0x2d
 800a892:	426d      	negs	r5, r5
 800a894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a898:	230a      	movs	r3, #10
 800a89a:	4859      	ldr	r0, [pc, #356]	@ (800aa00 <_printf_i+0x238>)
 800a89c:	e011      	b.n	800a8c2 <_printf_i+0xfa>
 800a89e:	6821      	ldr	r1, [r4, #0]
 800a8a0:	6833      	ldr	r3, [r6, #0]
 800a8a2:	0608      	lsls	r0, r1, #24
 800a8a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8a8:	d402      	bmi.n	800a8b0 <_printf_i+0xe8>
 800a8aa:	0649      	lsls	r1, r1, #25
 800a8ac:	bf48      	it	mi
 800a8ae:	b2ad      	uxthmi	r5, r5
 800a8b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8b2:	6033      	str	r3, [r6, #0]
 800a8b4:	bf14      	ite	ne
 800a8b6:	230a      	movne	r3, #10
 800a8b8:	2308      	moveq	r3, #8
 800a8ba:	4851      	ldr	r0, [pc, #324]	@ (800aa00 <_printf_i+0x238>)
 800a8bc:	2100      	movs	r1, #0
 800a8be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a8c2:	6866      	ldr	r6, [r4, #4]
 800a8c4:	2e00      	cmp	r6, #0
 800a8c6:	bfa8      	it	ge
 800a8c8:	6821      	ldrge	r1, [r4, #0]
 800a8ca:	60a6      	str	r6, [r4, #8]
 800a8cc:	bfa4      	itt	ge
 800a8ce:	f021 0104 	bicge.w	r1, r1, #4
 800a8d2:	6021      	strge	r1, [r4, #0]
 800a8d4:	b90d      	cbnz	r5, 800a8da <_printf_i+0x112>
 800a8d6:	2e00      	cmp	r6, #0
 800a8d8:	d04b      	beq.n	800a972 <_printf_i+0x1aa>
 800a8da:	4616      	mov	r6, r2
 800a8dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8e0:	fb03 5711 	mls	r7, r3, r1, r5
 800a8e4:	5dc7      	ldrb	r7, [r0, r7]
 800a8e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8ea:	462f      	mov	r7, r5
 800a8ec:	42bb      	cmp	r3, r7
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	d9f4      	bls.n	800a8dc <_printf_i+0x114>
 800a8f2:	2b08      	cmp	r3, #8
 800a8f4:	d10b      	bne.n	800a90e <_printf_i+0x146>
 800a8f6:	6823      	ldr	r3, [r4, #0]
 800a8f8:	07df      	lsls	r7, r3, #31
 800a8fa:	d508      	bpl.n	800a90e <_printf_i+0x146>
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	6861      	ldr	r1, [r4, #4]
 800a900:	4299      	cmp	r1, r3
 800a902:	bfde      	ittt	le
 800a904:	2330      	movle	r3, #48	@ 0x30
 800a906:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a90a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a90e:	1b92      	subs	r2, r2, r6
 800a910:	6122      	str	r2, [r4, #16]
 800a912:	464b      	mov	r3, r9
 800a914:	4621      	mov	r1, r4
 800a916:	4640      	mov	r0, r8
 800a918:	f8cd a000 	str.w	sl, [sp]
 800a91c:	aa03      	add	r2, sp, #12
 800a91e:	f7ff fee1 	bl	800a6e4 <_printf_common>
 800a922:	3001      	adds	r0, #1
 800a924:	d14a      	bne.n	800a9bc <_printf_i+0x1f4>
 800a926:	f04f 30ff 	mov.w	r0, #4294967295
 800a92a:	b004      	add	sp, #16
 800a92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	f043 0320 	orr.w	r3, r3, #32
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	2778      	movs	r7, #120	@ 0x78
 800a93a:	4832      	ldr	r0, [pc, #200]	@ (800aa04 <_printf_i+0x23c>)
 800a93c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a940:	6823      	ldr	r3, [r4, #0]
 800a942:	6831      	ldr	r1, [r6, #0]
 800a944:	061f      	lsls	r7, r3, #24
 800a946:	f851 5b04 	ldr.w	r5, [r1], #4
 800a94a:	d402      	bmi.n	800a952 <_printf_i+0x18a>
 800a94c:	065f      	lsls	r7, r3, #25
 800a94e:	bf48      	it	mi
 800a950:	b2ad      	uxthmi	r5, r5
 800a952:	6031      	str	r1, [r6, #0]
 800a954:	07d9      	lsls	r1, r3, #31
 800a956:	bf44      	itt	mi
 800a958:	f043 0320 	orrmi.w	r3, r3, #32
 800a95c:	6023      	strmi	r3, [r4, #0]
 800a95e:	b11d      	cbz	r5, 800a968 <_printf_i+0x1a0>
 800a960:	2310      	movs	r3, #16
 800a962:	e7ab      	b.n	800a8bc <_printf_i+0xf4>
 800a964:	4826      	ldr	r0, [pc, #152]	@ (800aa00 <_printf_i+0x238>)
 800a966:	e7e9      	b.n	800a93c <_printf_i+0x174>
 800a968:	6823      	ldr	r3, [r4, #0]
 800a96a:	f023 0320 	bic.w	r3, r3, #32
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	e7f6      	b.n	800a960 <_printf_i+0x198>
 800a972:	4616      	mov	r6, r2
 800a974:	e7bd      	b.n	800a8f2 <_printf_i+0x12a>
 800a976:	6833      	ldr	r3, [r6, #0]
 800a978:	6825      	ldr	r5, [r4, #0]
 800a97a:	1d18      	adds	r0, r3, #4
 800a97c:	6961      	ldr	r1, [r4, #20]
 800a97e:	6030      	str	r0, [r6, #0]
 800a980:	062e      	lsls	r6, r5, #24
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	d501      	bpl.n	800a98a <_printf_i+0x1c2>
 800a986:	6019      	str	r1, [r3, #0]
 800a988:	e002      	b.n	800a990 <_printf_i+0x1c8>
 800a98a:	0668      	lsls	r0, r5, #25
 800a98c:	d5fb      	bpl.n	800a986 <_printf_i+0x1be>
 800a98e:	8019      	strh	r1, [r3, #0]
 800a990:	2300      	movs	r3, #0
 800a992:	4616      	mov	r6, r2
 800a994:	6123      	str	r3, [r4, #16]
 800a996:	e7bc      	b.n	800a912 <_printf_i+0x14a>
 800a998:	6833      	ldr	r3, [r6, #0]
 800a99a:	2100      	movs	r1, #0
 800a99c:	1d1a      	adds	r2, r3, #4
 800a99e:	6032      	str	r2, [r6, #0]
 800a9a0:	681e      	ldr	r6, [r3, #0]
 800a9a2:	6862      	ldr	r2, [r4, #4]
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	f000 f849 	bl	800aa3c <memchr>
 800a9aa:	b108      	cbz	r0, 800a9b0 <_printf_i+0x1e8>
 800a9ac:	1b80      	subs	r0, r0, r6
 800a9ae:	6060      	str	r0, [r4, #4]
 800a9b0:	6863      	ldr	r3, [r4, #4]
 800a9b2:	6123      	str	r3, [r4, #16]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9ba:	e7aa      	b.n	800a912 <_printf_i+0x14a>
 800a9bc:	4632      	mov	r2, r6
 800a9be:	4649      	mov	r1, r9
 800a9c0:	4640      	mov	r0, r8
 800a9c2:	6923      	ldr	r3, [r4, #16]
 800a9c4:	47d0      	blx	sl
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	d0ad      	beq.n	800a926 <_printf_i+0x15e>
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	079b      	lsls	r3, r3, #30
 800a9ce:	d413      	bmi.n	800a9f8 <_printf_i+0x230>
 800a9d0:	68e0      	ldr	r0, [r4, #12]
 800a9d2:	9b03      	ldr	r3, [sp, #12]
 800a9d4:	4298      	cmp	r0, r3
 800a9d6:	bfb8      	it	lt
 800a9d8:	4618      	movlt	r0, r3
 800a9da:	e7a6      	b.n	800a92a <_printf_i+0x162>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	4632      	mov	r2, r6
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	4640      	mov	r0, r8
 800a9e4:	47d0      	blx	sl
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	d09d      	beq.n	800a926 <_printf_i+0x15e>
 800a9ea:	3501      	adds	r5, #1
 800a9ec:	68e3      	ldr	r3, [r4, #12]
 800a9ee:	9903      	ldr	r1, [sp, #12]
 800a9f0:	1a5b      	subs	r3, r3, r1
 800a9f2:	42ab      	cmp	r3, r5
 800a9f4:	dcf2      	bgt.n	800a9dc <_printf_i+0x214>
 800a9f6:	e7eb      	b.n	800a9d0 <_printf_i+0x208>
 800a9f8:	2500      	movs	r5, #0
 800a9fa:	f104 0619 	add.w	r6, r4, #25
 800a9fe:	e7f5      	b.n	800a9ec <_printf_i+0x224>
 800aa00:	0800dbcb 	.word	0x0800dbcb
 800aa04:	0800dbdc 	.word	0x0800dbdc

0800aa08 <memmove>:
 800aa08:	4288      	cmp	r0, r1
 800aa0a:	b510      	push	{r4, lr}
 800aa0c:	eb01 0402 	add.w	r4, r1, r2
 800aa10:	d902      	bls.n	800aa18 <memmove+0x10>
 800aa12:	4284      	cmp	r4, r0
 800aa14:	4623      	mov	r3, r4
 800aa16:	d807      	bhi.n	800aa28 <memmove+0x20>
 800aa18:	1e43      	subs	r3, r0, #1
 800aa1a:	42a1      	cmp	r1, r4
 800aa1c:	d008      	beq.n	800aa30 <memmove+0x28>
 800aa1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa26:	e7f8      	b.n	800aa1a <memmove+0x12>
 800aa28:	4601      	mov	r1, r0
 800aa2a:	4402      	add	r2, r0
 800aa2c:	428a      	cmp	r2, r1
 800aa2e:	d100      	bne.n	800aa32 <memmove+0x2a>
 800aa30:	bd10      	pop	{r4, pc}
 800aa32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa3a:	e7f7      	b.n	800aa2c <memmove+0x24>

0800aa3c <memchr>:
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	b510      	push	{r4, lr}
 800aa40:	b2c9      	uxtb	r1, r1
 800aa42:	4402      	add	r2, r0
 800aa44:	4293      	cmp	r3, r2
 800aa46:	4618      	mov	r0, r3
 800aa48:	d101      	bne.n	800aa4e <memchr+0x12>
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	e003      	b.n	800aa56 <memchr+0x1a>
 800aa4e:	7804      	ldrb	r4, [r0, #0]
 800aa50:	3301      	adds	r3, #1
 800aa52:	428c      	cmp	r4, r1
 800aa54:	d1f6      	bne.n	800aa44 <memchr+0x8>
 800aa56:	bd10      	pop	{r4, pc}

0800aa58 <memcpy>:
 800aa58:	440a      	add	r2, r1
 800aa5a:	4291      	cmp	r1, r2
 800aa5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa60:	d100      	bne.n	800aa64 <memcpy+0xc>
 800aa62:	4770      	bx	lr
 800aa64:	b510      	push	{r4, lr}
 800aa66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa6a:	4291      	cmp	r1, r2
 800aa6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa70:	d1f9      	bne.n	800aa66 <memcpy+0xe>
 800aa72:	bd10      	pop	{r4, pc}

0800aa74 <_realloc_r>:
 800aa74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa78:	4680      	mov	r8, r0
 800aa7a:	4615      	mov	r5, r2
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	b921      	cbnz	r1, 800aa8a <_realloc_r+0x16>
 800aa80:	4611      	mov	r1, r2
 800aa82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa86:	f7ff bb8d 	b.w	800a1a4 <_malloc_r>
 800aa8a:	b92a      	cbnz	r2, 800aa98 <_realloc_r+0x24>
 800aa8c:	f7ff fc8a 	bl	800a3a4 <_free_r>
 800aa90:	2400      	movs	r4, #0
 800aa92:	4620      	mov	r0, r4
 800aa94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa98:	f000 f81a 	bl	800aad0 <_malloc_usable_size_r>
 800aa9c:	4285      	cmp	r5, r0
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	d802      	bhi.n	800aaa8 <_realloc_r+0x34>
 800aaa2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aaa6:	d8f4      	bhi.n	800aa92 <_realloc_r+0x1e>
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	4640      	mov	r0, r8
 800aaac:	f7ff fb7a 	bl	800a1a4 <_malloc_r>
 800aab0:	4607      	mov	r7, r0
 800aab2:	2800      	cmp	r0, #0
 800aab4:	d0ec      	beq.n	800aa90 <_realloc_r+0x1c>
 800aab6:	42b5      	cmp	r5, r6
 800aab8:	462a      	mov	r2, r5
 800aaba:	4621      	mov	r1, r4
 800aabc:	bf28      	it	cs
 800aabe:	4632      	movcs	r2, r6
 800aac0:	f7ff ffca 	bl	800aa58 <memcpy>
 800aac4:	4621      	mov	r1, r4
 800aac6:	4640      	mov	r0, r8
 800aac8:	f7ff fc6c 	bl	800a3a4 <_free_r>
 800aacc:	463c      	mov	r4, r7
 800aace:	e7e0      	b.n	800aa92 <_realloc_r+0x1e>

0800aad0 <_malloc_usable_size_r>:
 800aad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad4:	1f18      	subs	r0, r3, #4
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	bfbc      	itt	lt
 800aada:	580b      	ldrlt	r3, [r1, r0]
 800aadc:	18c0      	addlt	r0, r0, r3
 800aade:	4770      	bx	lr

0800aae0 <_init>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	bf00      	nop
 800aae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae6:	bc08      	pop	{r3}
 800aae8:	469e      	mov	lr, r3
 800aaea:	4770      	bx	lr

0800aaec <_fini>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	bf00      	nop
 800aaf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaf2:	bc08      	pop	{r3}
 800aaf4:	469e      	mov	lr, r3
 800aaf6:	4770      	bx	lr
