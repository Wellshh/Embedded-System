
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b98  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001848  08007d80  08007d80  00008d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c8  080095c8  0000b060  2**0
                  CONTENTS
  4 .ARM          00000000  080095c8  080095c8  0000b060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095c8  080095c8  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c8  080095c8  0000a5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095cc  080095cc  0000a5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080095d0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000060  08009630  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08009630  0000b1e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039cd  00000000  00000000  0000b089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012bc  00000000  00000000  0000ea56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000520  00000000  00000000  0000fd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003b8  00000000  00000000  00010238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018afa  00000000  00000000  000105f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007551  00000000  00000000  000290ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de73  00000000  00000000  0003063b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be4ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018ac  00000000  00000000  000be4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  000bfda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000060 	.word	0x20000060
 8000204:	00000000 	.word	0x00000000
 8000208:	08007d68 	.word	0x08007d68

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000064 	.word	0x20000064
 8000224:	08007d68 	.word	0x08007d68

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_GPIO_Init+0x40>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <MX_GPIO_Init+0x40>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_GPIO_Init+0x40>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_GPIO_Init+0x40>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <MX_GPIO_Init+0x40>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <MX_GPIO_Init+0x40>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	40021000 	.word	0x40021000

08000878 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <LCD_WR_REG+0x40>)
 8000884:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000888:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <LCD_WR_REG+0x40>)
 800088c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000890:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <LCD_WR_REG+0x44>)
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <LCD_WR_REG+0x40>)
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <LCD_WR_REG+0x40>)
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80008a4:	4b04      	ldr	r3, [pc, #16]	@ (80008b8 <LCD_WR_REG+0x40>)
 80008a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008aa:	611a      	str	r2, [r3, #16]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40011000 	.word	0x40011000
 80008bc:	40010c00 	.word	0x40010c00

080008c0 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <LCD_WR_DATAX+0x40>)
 80008cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008d0:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <LCD_WR_DATAX+0x40>)
 80008d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008d8:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80008da:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <LCD_WR_DATAX+0x44>)
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80008e0:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <LCD_WR_DATAX+0x40>)
 80008e2:	2280      	movs	r2, #128	@ 0x80
 80008e4:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <LCD_WR_DATAX+0x40>)
 80008e8:	2280      	movs	r2, #128	@ 0x80
 80008ea:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80008ec:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <LCD_WR_DATAX+0x40>)
 80008ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f2:	611a      	str	r2, [r3, #16]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40011000 	.word	0x40011000
 8000904:	40010c00 	.word	0x40010c00

08000908 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 800090e:	4b1d      	ldr	r3, [pc, #116]	@ (8000984 <LCD_RD_DATA+0x7c>)
 8000910:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 8000914:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <LCD_RD_DATA+0x7c>)
 8000918:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 800091c:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 800091e:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <LCD_RD_DATA+0x7c>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000924:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <LCD_RD_DATA+0x80>)
 8000926:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800092a:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <LCD_RD_DATA+0x80>)
 800092e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000932:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000934:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <LCD_RD_DATA+0x80>)
 8000936:	2240      	movs	r2, #64	@ 0x40
 8000938:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <LCD_RD_DATA+0x84>)
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	f648 1289 	movw	r2, #35209	@ 0x8989
 8000942:	4293      	cmp	r3, r2
 8000944:	d102      	bne.n	800094c <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000946:	2001      	movs	r0, #1
 8000948:	f005 fee4 	bl	8006714 <HAL_Delay>
	t = DATAIN
 800094c:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <LCD_RD_DATA+0x7c>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000952:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <LCD_RD_DATA+0x80>)
 8000954:	2240      	movs	r2, #64	@ 0x40
 8000956:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000958:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <LCD_RD_DATA+0x80>)
 800095a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800095e:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000960:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <LCD_RD_DATA+0x7c>)
 8000962:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000966:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <LCD_RD_DATA+0x7c>)
 800096a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800096e:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000970:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <LCD_RD_DATA+0x7c>)
 8000972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000976:	60da      	str	r2, [r3, #12]
	return t;
 8000978:	88fb      	ldrh	r3, [r7, #6]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40010c00 	.word	0x40010c00
 8000988:	40011000 	.word	0x40011000
 800098c:	20000080 	.word	0x20000080

08000990 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	80fb      	strh	r3, [r7, #6]
 800099c:	4613      	mov	r3, r2
 800099e:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff68 	bl	8000878 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <LCD_WriteReg+0x4c>)
 80009aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ae:	611a      	str	r2, [r3, #16]
 80009b0:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <LCD_WriteReg+0x4c>)
 80009b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009b6:	615a      	str	r2, [r3, #20]
 80009b8:	4a09      	ldr	r2, [pc, #36]	@ (80009e0 <LCD_WriteReg+0x50>)
 80009ba:	88bb      	ldrh	r3, [r7, #4]
 80009bc:	60d3      	str	r3, [r2, #12]
 80009be:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <LCD_WriteReg+0x4c>)
 80009c0:	2280      	movs	r2, #128	@ 0x80
 80009c2:	615a      	str	r2, [r3, #20]
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <LCD_WriteReg+0x4c>)
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <LCD_WriteReg+0x4c>)
 80009cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009d0:	611a      	str	r2, [r3, #16]
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40011000 	.word	0x40011000
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff41 	bl	8000878 <LCD_WR_REG>
	return LCD_RD_DATA();
 80009f6:	f7ff ff87 	bl	8000908 <LCD_RD_DATA>
 80009fa:	4603      	mov	r3, r0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000a08:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <LCD_WriteRAM_Prepare+0x14>)
 8000a0a:	891b      	ldrh	r3, [r3, #8]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff33 	bl	8000878 <LCD_WR_REG>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000080 	.word	0x20000080

08000a1c <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	460a      	mov	r2, r1
 8000a26:	80fb      	strh	r3, [r7, #6]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000a2c:	4b73      	ldr	r3, [pc, #460]	@ (8000bfc <LCD_SetCursor+0x1e0>)
 8000a2e:	889b      	ldrh	r3, [r3, #4]
 8000a30:	f249 3241 	movw	r2, #37697	@ 0x9341
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d005      	beq.n	8000a44 <LCD_SetCursor+0x28>
 8000a38:	4b70      	ldr	r3, [pc, #448]	@ (8000bfc <LCD_SetCursor+0x1e0>)
 8000a3a:	889b      	ldrh	r3, [r3, #4]
 8000a3c:	f245 3210 	movw	r2, #21264	@ 0x5310
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d164      	bne.n	8000b0e <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000a44:	4b6d      	ldr	r3, [pc, #436]	@ (8000bfc <LCD_SetCursor+0x1e0>)
 8000a46:	895b      	ldrh	r3, [r3, #10]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff15 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000a4e:	4b6c      	ldr	r3, [pc, #432]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000a50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	4b6a      	ldr	r3, [pc, #424]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b67      	ldr	r3, [pc, #412]	@ (8000c04 <LCD_SetCursor+0x1e8>)
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	4b65      	ldr	r3, [pc, #404]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	615a      	str	r2, [r3, #20]
 8000a6e:	4b64      	ldr	r3, [pc, #400]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000a70:	2280      	movs	r2, #128	@ 0x80
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	4b62      	ldr	r3, [pc, #392]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000a7c:	4b60      	ldr	r3, [pc, #384]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000a7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	4b5e      	ldr	r3, [pc, #376]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	4a5d      	ldr	r2, [pc, #372]	@ (8000c04 <LCD_SetCursor+0x1e8>)
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	60d3      	str	r3, [r2, #12]
 8000a94:	4b5a      	ldr	r3, [pc, #360]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000a96:	2280      	movs	r2, #128	@ 0x80
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	4b59      	ldr	r3, [pc, #356]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000a9c:	2280      	movs	r2, #128	@ 0x80
 8000a9e:	611a      	str	r2, [r3, #16]
 8000aa0:	4b57      	ldr	r3, [pc, #348]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aa6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000aa8:	4b54      	ldr	r3, [pc, #336]	@ (8000bfc <LCD_SetCursor+0x1e0>)
 8000aaa:	899b      	ldrh	r3, [r3, #12]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fee3 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ab2:	4b53      	ldr	r3, [pc, #332]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000ab4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	4b51      	ldr	r3, [pc, #324]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ac0:	615a      	str	r2, [r3, #20]
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b4e      	ldr	r3, [pc, #312]	@ (8000c04 <LCD_SetCursor+0x1e8>)
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	4b4c      	ldr	r3, [pc, #304]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000ace:	2280      	movs	r2, #128	@ 0x80
 8000ad0:	615a      	str	r2, [r3, #20]
 8000ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000ad4:	2280      	movs	r2, #128	@ 0x80
 8000ad6:	611a      	str	r2, [r3, #16]
 8000ad8:	4b49      	ldr	r3, [pc, #292]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000ada:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ade:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ae0:	4b47      	ldr	r3, [pc, #284]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000ae2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	4b45      	ldr	r3, [pc, #276]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aee:	615a      	str	r2, [r3, #20]
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	4a44      	ldr	r2, [pc, #272]	@ (8000c04 <LCD_SetCursor+0x1e8>)
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	60d3      	str	r3, [r2, #12]
 8000af8:	4b41      	ldr	r3, [pc, #260]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	4b40      	ldr	r3, [pc, #256]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000b00:	2280      	movs	r2, #128	@ 0x80
 8000b02:	611a      	str	r2, [r3, #16]
 8000b04:	4b3e      	ldr	r3, [pc, #248]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b0a:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000b0c:	e248      	b.n	8000fa0 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8000bfc <LCD_SetCursor+0x1e0>)
 8000b10:	889b      	ldrh	r3, [r3, #4]
 8000b12:	f646 0204 	movw	r2, #26628	@ 0x6804
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d176      	bne.n	8000c08 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000b1a:	4b38      	ldr	r3, [pc, #224]	@ (8000bfc <LCD_SetCursor+0x1e0>)
 8000b1c:	799b      	ldrb	r3, [r3, #6]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d106      	bne.n	8000b30 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000b22:	4b36      	ldr	r3, [pc, #216]	@ (8000bfc <LCD_SetCursor+0x1e0>)
 8000b24:	881a      	ldrh	r2, [r3, #0]
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000b30:	4b32      	ldr	r3, [pc, #200]	@ (8000bfc <LCD_SetCursor+0x1e0>)
 8000b32:	895b      	ldrh	r3, [r3, #10]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fe9f 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b3a:	4b31      	ldr	r3, [pc, #196]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000b3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	4b2f      	ldr	r3, [pc, #188]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b48:	615a      	str	r2, [r3, #20]
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <LCD_SetCursor+0x1e8>)
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	4b2a      	ldr	r3, [pc, #168]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000b56:	2280      	movs	r2, #128	@ 0x80
 8000b58:	615a      	str	r2, [r3, #20]
 8000b5a:	4b29      	ldr	r3, [pc, #164]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000b5c:	2280      	movs	r2, #128	@ 0x80
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000b62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000b68:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000b6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	4a22      	ldr	r2, [pc, #136]	@ (8000c04 <LCD_SetCursor+0x1e8>)
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	60d3      	str	r3, [r2, #12]
 8000b80:	4b1f      	ldr	r3, [pc, #124]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000b82:	2280      	movs	r2, #128	@ 0x80
 8000b84:	615a      	str	r2, [r3, #20]
 8000b86:	4b1e      	ldr	r3, [pc, #120]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000b88:	2280      	movs	r2, #128	@ 0x80
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b92:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <LCD_SetCursor+0x1e0>)
 8000b96:	899b      	ldrh	r3, [r3, #12]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fe6d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000b9e:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000ba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ba4:	611a      	str	r2, [r3, #16]
 8000ba6:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <LCD_SetCursor+0x1e8>)
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000bc0:	2280      	movs	r2, #128	@ 0x80
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000bc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bca:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000bce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bda:	615a      	str	r2, [r3, #20]
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	4a09      	ldr	r2, [pc, #36]	@ (8000c04 <LCD_SetCursor+0x1e8>)
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	60d3      	str	r3, [r2, #12]
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	615a      	str	r2, [r3, #20]
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <LCD_SetCursor+0x1e4>)
 8000bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bf6:	611a      	str	r2, [r3, #16]
}
 8000bf8:	e1d2      	b.n	8000fa0 <LCD_SetCursor+0x584>
 8000bfa:	bf00      	nop
 8000bfc:	20000080 	.word	0x20000080
 8000c00:	40011000 	.word	0x40011000
 8000c04:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000c08:	4b99      	ldr	r3, [pc, #612]	@ (8000e70 <LCD_SetCursor+0x454>)
 8000c0a:	889b      	ldrh	r3, [r3, #4]
 8000c0c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000c10:	4293      	cmp	r3, r2
 8000c12:	f040 8133 	bne.w	8000e7c <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000c16:	4b96      	ldr	r3, [pc, #600]	@ (8000e70 <LCD_SetCursor+0x454>)
 8000c18:	799b      	ldrb	r3, [r3, #6]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d163      	bne.n	8000ce6 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000c1e:	4b94      	ldr	r3, [pc, #592]	@ (8000e70 <LCD_SetCursor+0x454>)
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000c2c:	4b90      	ldr	r3, [pc, #576]	@ (8000e70 <LCD_SetCursor+0x454>)
 8000c2e:	895b      	ldrh	r3, [r3, #10]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe21 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000c36:	4b8f      	ldr	r3, [pc, #572]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000c38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c3c:	611a      	str	r2, [r3, #16]
 8000c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c44:	615a      	str	r2, [r3, #20]
 8000c46:	4b8c      	ldr	r3, [pc, #560]	@ (8000e78 <LCD_SetCursor+0x45c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	4b89      	ldr	r3, [pc, #548]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000c4e:	2280      	movs	r2, #128	@ 0x80
 8000c50:	615a      	str	r2, [r3, #20]
 8000c52:	4b88      	ldr	r3, [pc, #544]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000c54:	2280      	movs	r2, #128	@ 0x80
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	4b86      	ldr	r3, [pc, #536]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c5e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000c60:	4b84      	ldr	r3, [pc, #528]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000c62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	4b82      	ldr	r3, [pc, #520]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	4b81      	ldr	r3, [pc, #516]	@ (8000e78 <LCD_SetCursor+0x45c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	4b7f      	ldr	r3, [pc, #508]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	615a      	str	r2, [r3, #20]
 8000c7c:	4b7d      	ldr	r3, [pc, #500]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000c7e:	2280      	movs	r2, #128	@ 0x80
 8000c80:	611a      	str	r2, [r3, #16]
 8000c82:	4b7c      	ldr	r3, [pc, #496]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c88:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	4b78      	ldr	r3, [pc, #480]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b75      	ldr	r3, [pc, #468]	@ (8000e78 <LCD_SetCursor+0x45c>)
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	4b73      	ldr	r3, [pc, #460]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000ca6:	2280      	movs	r2, #128	@ 0x80
 8000ca8:	615a      	str	r2, [r3, #20]
 8000caa:	4b72      	ldr	r3, [pc, #456]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000cac:	2280      	movs	r2, #128	@ 0x80
 8000cae:	611a      	str	r2, [r3, #16]
 8000cb0:	4b70      	ldr	r3, [pc, #448]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000cb8:	4b6e      	ldr	r3, [pc, #440]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000cba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	4b6c      	ldr	r3, [pc, #432]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4a6b      	ldr	r2, [pc, #428]	@ (8000e78 <LCD_SetCursor+0x45c>)
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	60d3      	str	r3, [r2, #12]
 8000cd0:	4b68      	ldr	r3, [pc, #416]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000cd2:	2280      	movs	r2, #128	@ 0x80
 8000cd4:	615a      	str	r2, [r3, #20]
 8000cd6:	4b67      	ldr	r3, [pc, #412]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000cd8:	2280      	movs	r2, #128	@ 0x80
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	4b65      	ldr	r3, [pc, #404]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	e061      	b.n	8000daa <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000ce6:	4b62      	ldr	r3, [pc, #392]	@ (8000e70 <LCD_SetCursor+0x454>)
 8000ce8:	895b      	ldrh	r3, [r3, #10]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fdc4 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000cf0:	4b60      	ldr	r3, [pc, #384]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000cf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cf6:	611a      	str	r2, [r3, #16]
 8000cf8:	4b5e      	ldr	r3, [pc, #376]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b5c      	ldr	r3, [pc, #368]	@ (8000e78 <LCD_SetCursor+0x45c>)
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d0c:	2280      	movs	r2, #128	@ 0x80
 8000d0e:	615a      	str	r2, [r3, #20]
 8000d10:	4b58      	ldr	r3, [pc, #352]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	4b57      	ldr	r3, [pc, #348]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d1c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000d1e:	4b55      	ldr	r3, [pc, #340]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d24:	611a      	str	r2, [r3, #16]
 8000d26:	4b53      	ldr	r3, [pc, #332]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	4a51      	ldr	r2, [pc, #324]	@ (8000e78 <LCD_SetCursor+0x45c>)
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	60d3      	str	r3, [r2, #12]
 8000d36:	4b4f      	ldr	r3, [pc, #316]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d38:	2280      	movs	r2, #128	@ 0x80
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d3e:	2280      	movs	r2, #128	@ 0x80
 8000d40:	611a      	str	r2, [r3, #16]
 8000d42:	4b4c      	ldr	r3, [pc, #304]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d48:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	4b48      	ldr	r3, [pc, #288]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	4b45      	ldr	r3, [pc, #276]	@ (8000e70 <LCD_SetCursor+0x454>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	121a      	asrs	r2, r3, #8
 8000d62:	4b45      	ldr	r3, [pc, #276]	@ (8000e78 <LCD_SetCursor+0x45c>)
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	4b43      	ldr	r3, [pc, #268]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d68:	2280      	movs	r2, #128	@ 0x80
 8000d6a:	615a      	str	r2, [r3, #20]
 8000d6c:	4b41      	ldr	r3, [pc, #260]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d6e:	2280      	movs	r2, #128	@ 0x80
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	4b40      	ldr	r3, [pc, #256]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d78:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d80:	611a      	str	r2, [r3, #16]
 8000d82:	4b3c      	ldr	r3, [pc, #240]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d88:	615a      	str	r2, [r3, #20]
 8000d8a:	4b39      	ldr	r3, [pc, #228]	@ (8000e70 <LCD_SetCursor+0x454>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	4a39      	ldr	r2, [pc, #228]	@ (8000e78 <LCD_SetCursor+0x45c>)
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	60d3      	str	r3, [r2, #12]
 8000d96:	4b37      	ldr	r3, [pc, #220]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d98:	2280      	movs	r2, #128	@ 0x80
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	4b35      	ldr	r3, [pc, #212]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000d9e:	2280      	movs	r2, #128	@ 0x80
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	4b34      	ldr	r3, [pc, #208]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000da8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000daa:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <LCD_SetCursor+0x454>)
 8000dac:	899b      	ldrh	r3, [r3, #12]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fd62 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000db4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000db6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	4b2b      	ldr	r3, [pc, #172]	@ (8000e78 <LCD_SetCursor+0x45c>)
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	615a      	str	r2, [r3, #20]
 8000dd4:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	611a      	str	r2, [r3, #16]
 8000dda:	4b26      	ldr	r3, [pc, #152]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000de0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000de2:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000de4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000de8:	611a      	str	r2, [r3, #16]
 8000dea:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	88bb      	ldrh	r3, [r7, #4]
 8000df4:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <LCD_SetCursor+0x45c>)
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	60d3      	str	r3, [r2, #12]
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000dfc:	2280      	movs	r2, #128	@ 0x80
 8000dfe:	615a      	str	r2, [r3, #20]
 8000e00:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000e02:	2280      	movs	r2, #128	@ 0x80
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e0c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000e0e:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000e18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e1c:	615a      	str	r2, [r3, #20]
 8000e1e:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <LCD_SetCursor+0x454>)
 8000e20:	885b      	ldrh	r3, [r3, #2]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	121a      	asrs	r2, r3, #8
 8000e26:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <LCD_SetCursor+0x45c>)
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000e2c:	2280      	movs	r2, #128	@ 0x80
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000e32:	2280      	movs	r2, #128	@ 0x80
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e3c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e4c:	615a      	str	r2, [r3, #20]
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <LCD_SetCursor+0x454>)
 8000e50:	885b      	ldrh	r3, [r3, #2]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	4a08      	ldr	r2, [pc, #32]	@ (8000e78 <LCD_SetCursor+0x45c>)
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	60d3      	str	r3, [r2, #12]
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000e5c:	2280      	movs	r2, #128	@ 0x80
 8000e5e:	615a      	str	r2, [r3, #20]
 8000e60:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000e62:	2280      	movs	r2, #128	@ 0x80
 8000e64:	611a      	str	r2, [r3, #16]
 8000e66:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <LCD_SetCursor+0x458>)
 8000e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e6c:	611a      	str	r2, [r3, #16]
}
 8000e6e:	e097      	b.n	8000fa0 <LCD_SetCursor+0x584>
 8000e70:	20000080 	.word	0x20000080
 8000e74:	40011000 	.word	0x40011000
 8000e78:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa8 <LCD_SetCursor+0x58c>)
 8000e7e:	889b      	ldrh	r3, [r3, #4]
 8000e80:	f245 5210 	movw	r2, #21776	@ 0x5510
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d172      	bne.n	8000f6e <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000e88:	4b47      	ldr	r3, [pc, #284]	@ (8000fa8 <LCD_SetCursor+0x58c>)
 8000e8a:	895b      	ldrh	r3, [r3, #10]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fcf3 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000e92:	4b46      	ldr	r3, [pc, #280]	@ (8000fac <LCD_SetCursor+0x590>)
 8000e94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	4b44      	ldr	r3, [pc, #272]	@ (8000fac <LCD_SetCursor+0x590>)
 8000e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b41      	ldr	r3, [pc, #260]	@ (8000fb0 <LCD_SetCursor+0x594>)
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	4b3f      	ldr	r3, [pc, #252]	@ (8000fac <LCD_SetCursor+0x590>)
 8000eae:	2280      	movs	r2, #128	@ 0x80
 8000eb0:	615a      	str	r2, [r3, #20]
 8000eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fac <LCD_SetCursor+0x590>)
 8000eb4:	2280      	movs	r2, #128	@ 0x80
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fac <LCD_SetCursor+0x590>)
 8000eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ebe:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000ec0:	4b39      	ldr	r3, [pc, #228]	@ (8000fa8 <LCD_SetCursor+0x58c>)
 8000ec2:	895b      	ldrh	r3, [r3, #10]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fcd5 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000ece:	4b37      	ldr	r3, [pc, #220]	@ (8000fac <LCD_SetCursor+0x590>)
 8000ed0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	4b35      	ldr	r3, [pc, #212]	@ (8000fac <LCD_SetCursor+0x590>)
 8000ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000edc:	615a      	str	r2, [r3, #20]
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4a33      	ldr	r2, [pc, #204]	@ (8000fb0 <LCD_SetCursor+0x594>)
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	60d3      	str	r3, [r2, #12]
 8000ee6:	4b31      	ldr	r3, [pc, #196]	@ (8000fac <LCD_SetCursor+0x590>)
 8000ee8:	2280      	movs	r2, #128	@ 0x80
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <LCD_SetCursor+0x590>)
 8000eee:	2280      	movs	r2, #128	@ 0x80
 8000ef0:	611a      	str	r2, [r3, #16]
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <LCD_SetCursor+0x590>)
 8000ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000efa:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa8 <LCD_SetCursor+0x58c>)
 8000efc:	899b      	ldrh	r3, [r3, #12]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fcba 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000f04:	4b29      	ldr	r3, [pc, #164]	@ (8000fac <LCD_SetCursor+0x590>)
 8000f06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	4b27      	ldr	r3, [pc, #156]	@ (8000fac <LCD_SetCursor+0x590>)
 8000f0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	88bb      	ldrh	r3, [r7, #4]
 8000f16:	0a1b      	lsrs	r3, r3, #8
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	4b25      	ldr	r3, [pc, #148]	@ (8000fb0 <LCD_SetCursor+0x594>)
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <LCD_SetCursor+0x590>)
 8000f20:	2280      	movs	r2, #128	@ 0x80
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <LCD_SetCursor+0x590>)
 8000f26:	2280      	movs	r2, #128	@ 0x80
 8000f28:	611a      	str	r2, [r3, #16]
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <LCD_SetCursor+0x590>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f30:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8000f32:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <LCD_SetCursor+0x58c>)
 8000f34:	899b      	ldrh	r3, [r3, #12]
 8000f36:	3301      	adds	r3, #1
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fc9c 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <LCD_SetCursor+0x590>)
 8000f42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <LCD_SetCursor+0x590>)
 8000f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f4e:	615a      	str	r2, [r3, #20]
 8000f50:	88bb      	ldrh	r3, [r7, #4]
 8000f52:	4a17      	ldr	r2, [pc, #92]	@ (8000fb0 <LCD_SetCursor+0x594>)
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	60d3      	str	r3, [r2, #12]
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <LCD_SetCursor+0x590>)
 8000f5a:	2280      	movs	r2, #128	@ 0x80
 8000f5c:	615a      	str	r2, [r3, #20]
 8000f5e:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <LCD_SetCursor+0x590>)
 8000f60:	2280      	movs	r2, #128	@ 0x80
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <LCD_SetCursor+0x590>)
 8000f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f6a:	611a      	str	r2, [r3, #16]
}
 8000f6c:	e018      	b.n	8000fa0 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <LCD_SetCursor+0x58c>)
 8000f70:	799b      	ldrb	r3, [r3, #6]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d106      	bne.n	8000f84 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <LCD_SetCursor+0x58c>)
 8000f78:	881a      	ldrh	r2, [r3, #0]
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	3b01      	subs	r3, #1
 8000f82:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <LCD_SetCursor+0x58c>)
 8000f86:	895b      	ldrh	r3, [r3, #10]
 8000f88:	88fa      	ldrh	r2, [r7, #6]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fcff 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8000f92:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <LCD_SetCursor+0x58c>)
 8000f94:	899b      	ldrh	r3, [r3, #12]
 8000f96:	88ba      	ldrh	r2, [r7, #4]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fcf8 	bl	8000990 <LCD_WriteReg>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000080 	.word	0x20000080
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40010c00 	.word	0x40010c00

08000fb4 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8000fc6:	4b78      	ldr	r3, [pc, #480]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8000fc8:	799b      	ldrb	r3, [r3, #6]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d10b      	bne.n	8000fe6 <LCD_Scan_Dir+0x32>
 8000fce:	4b76      	ldr	r3, [pc, #472]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	f646 0204 	movw	r2, #26628	@ 0x6804
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d005      	beq.n	8000fe6 <LCD_Scan_Dir+0x32>
 8000fda:	4b73      	ldr	r3, [pc, #460]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8000fdc:	889b      	ldrh	r3, [r3, #4]
 8000fde:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d109      	bne.n	8000ffa <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8000fe6:	4b70      	ldr	r3, [pc, #448]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8000fe8:	799b      	ldrb	r3, [r3, #6]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d134      	bne.n	8001058 <LCD_Scan_Dir+0xa4>
 8000fee:	4b6e      	ldr	r3, [pc, #440]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8000ff0:	889b      	ldrh	r3, [r3, #4]
 8000ff2:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d12e      	bne.n	8001058 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b07      	cmp	r3, #7
 8000ffe:	d82b      	bhi.n	8001058 <LCD_Scan_Dir+0xa4>
 8001000:	a201      	add	r2, pc, #4	@ (adr r2, 8001008 <LCD_Scan_Dir+0x54>)
 8001002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001006:	bf00      	nop
 8001008:	08001029 	.word	0x08001029
 800100c:	0800102f 	.word	0x0800102f
 8001010:	08001035 	.word	0x08001035
 8001014:	0800103b 	.word	0x0800103b
 8001018:	08001041 	.word	0x08001041
 800101c:	08001047 	.word	0x08001047
 8001020:	0800104d 	.word	0x0800104d
 8001024:	08001053 	.word	0x08001053
		{
		case 0:
			dir = 6;
 8001028:	2306      	movs	r3, #6
 800102a:	71fb      	strb	r3, [r7, #7]
			break;
 800102c:	e014      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 800102e:	2307      	movs	r3, #7
 8001030:	71fb      	strb	r3, [r7, #7]
			break;
 8001032:	e011      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001034:	2304      	movs	r3, #4
 8001036:	71fb      	strb	r3, [r7, #7]
			break;
 8001038:	e00e      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800103a:	2305      	movs	r3, #5
 800103c:	71fb      	strb	r3, [r7, #7]
			break;
 800103e:	e00b      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	71fb      	strb	r3, [r7, #7]
			break;
 8001044:	e008      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]
			break;
 800104a:	e005      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 800104c:	2303      	movs	r3, #3
 800104e:	71fb      	strb	r3, [r7, #7]
			break;
 8001050:	e002      	b.n	8001058 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001052:	2302      	movs	r3, #2
 8001054:	71fb      	strb	r3, [r7, #7]
			break;
 8001056:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8001058:	4b53      	ldr	r3, [pc, #332]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 800105a:	889b      	ldrh	r3, [r3, #4]
 800105c:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001060:	4293      	cmp	r3, r2
 8001062:	d018      	beq.n	8001096 <LCD_Scan_Dir+0xe2>
 8001064:	4b50      	ldr	r3, [pc, #320]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001066:	889b      	ldrh	r3, [r3, #4]
 8001068:	f646 0204 	movw	r2, #26628	@ 0x6804
 800106c:	4293      	cmp	r3, r2
 800106e:	d012      	beq.n	8001096 <LCD_Scan_Dir+0xe2>
 8001070:	4b4d      	ldr	r3, [pc, #308]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001072:	889b      	ldrh	r3, [r3, #4]
 8001074:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001078:	4293      	cmp	r3, r2
 800107a:	d00c      	beq.n	8001096 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 800107c:	4b4a      	ldr	r3, [pc, #296]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 800107e:	889b      	ldrh	r3, [r3, #4]
 8001080:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001084:	4293      	cmp	r3, r2
 8001086:	d006      	beq.n	8001096 <LCD_Scan_Dir+0xe2>
 8001088:	4b47      	ldr	r3, [pc, #284]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 800108a:	889b      	ldrh	r3, [r3, #4]
 800108c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001090:	4293      	cmp	r3, r2
 8001092:	f040 8250 	bne.w	8001536 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b07      	cmp	r3, #7
 800109a:	d836      	bhi.n	800110a <LCD_Scan_Dir+0x156>
 800109c:	a201      	add	r2, pc, #4	@ (adr r2, 80010a4 <LCD_Scan_Dir+0xf0>)
 800109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a2:	bf00      	nop
 80010a4:	0800110b 	.word	0x0800110b
 80010a8:	080010c5 	.word	0x080010c5
 80010ac:	080010cf 	.word	0x080010cf
 80010b0:	080010d9 	.word	0x080010d9
 80010b4:	080010e3 	.word	0x080010e3
 80010b8:	080010ed 	.word	0x080010ed
 80010bc:	080010f7 	.word	0x080010f7
 80010c0:	08001101 	.word	0x08001101
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ca:	81fb      	strh	r3, [r7, #14]
			break;
 80010cc:	e01d      	b.n	800110a <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010d4:	81fb      	strh	r3, [r7, #14]
			break;
 80010d6:	e018      	b.n	800110a <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80010de:	81fb      	strh	r3, [r7, #14]
			break;
 80010e0:	e013      	b.n	800110a <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80010e2:	89fb      	ldrh	r3, [r7, #14]
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	81fb      	strh	r3, [r7, #14]
			break;
 80010ea:	e00e      	b.n	800110a <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80010ec:	89fb      	ldrh	r3, [r7, #14]
 80010ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80010f2:	81fb      	strh	r3, [r7, #14]
			break;
 80010f4:	e009      	b.n	800110a <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80010f6:	89fb      	ldrh	r3, [r7, #14]
 80010f8:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80010fc:	81fb      	strh	r3, [r7, #14]
			break;
 80010fe:	e004      	b.n	800110a <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001106:	81fb      	strh	r3, [r7, #14]
			break;
 8001108:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 800110a:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 800110c:	889b      	ldrh	r3, [r3, #4]
 800110e:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001112:	4293      	cmp	r3, r2
 8001114:	d103      	bne.n	800111e <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8001116:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 800111a:	81bb      	strh	r3, [r7, #12]
 800111c:	e001      	b.n	8001122 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 800111e:	2336      	movs	r3, #54	@ 0x36
 8001120:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001124:	889b      	ldrh	r3, [r3, #4]
 8001126:	f245 3210 	movw	r2, #21264	@ 0x5310
 800112a:	4293      	cmp	r3, r2
 800112c:	d00f      	beq.n	800114e <LCD_Scan_Dir+0x19a>
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001130:	889b      	ldrh	r3, [r3, #4]
 8001132:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001136:	4293      	cmp	r3, r2
 8001138:	d009      	beq.n	800114e <LCD_Scan_Dir+0x19a>
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 800113c:	889b      	ldrh	r3, [r3, #4]
 800113e:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001142:	4293      	cmp	r3, r2
 8001144:	d003      	beq.n	800114e <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8001146:	89fb      	ldrh	r3, [r7, #14]
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001150:	889b      	ldrh	r3, [r3, #4]
 8001152:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001156:	4293      	cmp	r3, r2
 8001158:	d103      	bne.n	8001162 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001162:	89fa      	ldrh	r2, [r7, #14]
 8001164:	89bb      	ldrh	r3, [r7, #12]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fc11 	bl	8000990 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001170:	889b      	ldrh	r3, [r3, #4]
 8001172:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001176:	4293      	cmp	r3, r2
 8001178:	d028      	beq.n	80011cc <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001186:	881a      	ldrh	r2, [r3, #0]
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 800118a:	885b      	ldrh	r3, [r3, #2]
 800118c:	429a      	cmp	r2, r3
 800118e:	d21d      	bcs.n	80011cc <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001196:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 8001198:	885a      	ldrh	r2, [r3, #2]
 800119a:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 800119c:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800119e:	4a02      	ldr	r2, [pc, #8]	@ (80011a8 <LCD_Scan_Dir+0x1f4>)
 80011a0:	897b      	ldrh	r3, [r7, #10]
 80011a2:	8053      	strh	r3, [r2, #2]
 80011a4:	e012      	b.n	80011cc <LCD_Scan_Dir+0x218>
 80011a6:	bf00      	nop
 80011a8:	20000080 	.word	0x20000080
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80011ac:	4b7f      	ldr	r3, [pc, #508]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 80011ae:	881a      	ldrh	r2, [r3, #0]
 80011b0:	4b7e      	ldr	r3, [pc, #504]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 80011b2:	885b      	ldrh	r3, [r3, #2]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d909      	bls.n	80011cc <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80011b8:	4b7c      	ldr	r3, [pc, #496]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80011be:	4b7b      	ldr	r3, [pc, #492]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 80011c0:	885a      	ldrh	r2, [r3, #2]
 80011c2:	4b7a      	ldr	r3, [pc, #488]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 80011c4:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80011c6:	4a79      	ldr	r2, [pc, #484]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 80011c8:	897b      	ldrh	r3, [r7, #10]
 80011ca:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80011cc:	4b77      	ldr	r3, [pc, #476]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 80011ce:	889b      	ldrh	r3, [r3, #4]
 80011d0:	f245 5210 	movw	r2, #21776	@ 0x5510
 80011d4:	4293      	cmp	r3, r2
 80011d6:	f040 80ef 	bne.w	80013b8 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80011da:	4b74      	ldr	r3, [pc, #464]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 80011dc:	895b      	ldrh	r3, [r3, #10]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fb4a 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80011e4:	4b72      	ldr	r3, [pc, #456]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 80011e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	4b70      	ldr	r3, [pc, #448]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 80011ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	4b6f      	ldr	r3, [pc, #444]	@ (80013b4 <LCD_Scan_Dir+0x400>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	4b6d      	ldr	r3, [pc, #436]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 80011fc:	2280      	movs	r2, #128	@ 0x80
 80011fe:	615a      	str	r2, [r3, #20]
 8001200:	4b6b      	ldr	r3, [pc, #428]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001202:	2280      	movs	r2, #128	@ 0x80
 8001204:	611a      	str	r2, [r3, #16]
 8001206:	4b6a      	ldr	r3, [pc, #424]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800120c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 800120e:	4b67      	ldr	r3, [pc, #412]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 8001210:	895b      	ldrh	r3, [r3, #10]
 8001212:	3301      	adds	r3, #1
 8001214:	b29b      	uxth	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fb2e 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800121c:	4b64      	ldr	r3, [pc, #400]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 800121e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	4b62      	ldr	r3, [pc, #392]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800122a:	615a      	str	r2, [r3, #20]
 800122c:	4b61      	ldr	r3, [pc, #388]	@ (80013b4 <LCD_Scan_Dir+0x400>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	4b5f      	ldr	r3, [pc, #380]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001234:	2280      	movs	r2, #128	@ 0x80
 8001236:	615a      	str	r2, [r3, #20]
 8001238:	4b5d      	ldr	r3, [pc, #372]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 800123a:	2280      	movs	r2, #128	@ 0x80
 800123c:	611a      	str	r2, [r3, #16]
 800123e:	4b5c      	ldr	r3, [pc, #368]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001244:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8001246:	4b59      	ldr	r3, [pc, #356]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 8001248:	895b      	ldrh	r3, [r3, #10]
 800124a:	3302      	adds	r3, #2
 800124c:	b29b      	uxth	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fb12 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001254:	4b56      	ldr	r3, [pc, #344]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001256:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	4b54      	ldr	r3, [pc, #336]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 800125e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001262:	615a      	str	r2, [r3, #20]
 8001264:	4b51      	ldr	r3, [pc, #324]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	3b01      	subs	r3, #1
 800126a:	121a      	asrs	r2, r3, #8
 800126c:	4b51      	ldr	r3, [pc, #324]	@ (80013b4 <LCD_Scan_Dir+0x400>)
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	4b4f      	ldr	r3, [pc, #316]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	4b4e      	ldr	r3, [pc, #312]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001278:	2280      	movs	r2, #128	@ 0x80
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	4b4c      	ldr	r3, [pc, #304]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 800127e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001282:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001284:	4b49      	ldr	r3, [pc, #292]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 8001286:	895b      	ldrh	r3, [r3, #10]
 8001288:	3303      	adds	r3, #3
 800128a:	b29b      	uxth	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff faf3 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001292:	4b47      	ldr	r3, [pc, #284]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001294:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	4b45      	ldr	r3, [pc, #276]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 800129c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a0:	615a      	str	r2, [r3, #20]
 80012a2:	4b42      	ldr	r3, [pc, #264]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	4a42      	ldr	r2, [pc, #264]	@ (80013b4 <LCD_Scan_Dir+0x400>)
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	60d3      	str	r3, [r2, #12]
 80012ae:	4b40      	ldr	r3, [pc, #256]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012b0:	2280      	movs	r2, #128	@ 0x80
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	4b3e      	ldr	r3, [pc, #248]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012b6:	2280      	movs	r2, #128	@ 0x80
 80012b8:	611a      	str	r2, [r3, #16]
 80012ba:	4b3d      	ldr	r3, [pc, #244]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012c0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80012c2:	4b3a      	ldr	r3, [pc, #232]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 80012c4:	899b      	ldrh	r3, [r3, #12]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fad6 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012cc:	4b38      	ldr	r3, [pc, #224]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	4b36      	ldr	r3, [pc, #216]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	4b35      	ldr	r3, [pc, #212]	@ (80013b4 <LCD_Scan_Dir+0x400>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	4b33      	ldr	r3, [pc, #204]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012e4:	2280      	movs	r2, #128	@ 0x80
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012ea:	2280      	movs	r2, #128	@ 0x80
 80012ec:	611a      	str	r2, [r3, #16]
 80012ee:	4b30      	ldr	r3, [pc, #192]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 80012f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80012f6:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 80012f8:	899b      	ldrh	r3, [r3, #12]
 80012fa:	3301      	adds	r3, #1
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff faba 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001306:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800130a:	611a      	str	r2, [r3, #16]
 800130c:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 800130e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	4b27      	ldr	r3, [pc, #156]	@ (80013b4 <LCD_Scan_Dir+0x400>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 800131c:	2280      	movs	r2, #128	@ 0x80
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001322:	2280      	movs	r2, #128	@ 0x80
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800132c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 800132e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 8001330:	899b      	ldrh	r3, [r3, #12]
 8001332:	3302      	adds	r3, #2
 8001334:	b29b      	uxth	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fa9e 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 800133c:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 800133e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 800134e:	885b      	ldrh	r3, [r3, #2]
 8001350:	3b01      	subs	r3, #1
 8001352:	121a      	asrs	r2, r3, #8
 8001354:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <LCD_Scan_Dir+0x400>)
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 800135a:	2280      	movs	r2, #128	@ 0x80
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001360:	2280      	movs	r2, #128	@ 0x80
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001366:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800136a:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 800136e:	899b      	ldrh	r3, [r3, #12]
 8001370:	3303      	adds	r3, #3
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fa7f 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800137a:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 800137c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <LCD_Scan_Dir+0x3f8>)
 800138c:	885b      	ldrh	r3, [r3, #2]
 800138e:	3b01      	subs	r3, #1
 8001390:	4a08      	ldr	r2, [pc, #32]	@ (80013b4 <LCD_Scan_Dir+0x400>)
 8001392:	b2db      	uxtb	r3, r3
 8001394:	60d3      	str	r3, [r2, #12]
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 8001398:	2280      	movs	r2, #128	@ 0x80
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 800139e:	2280      	movs	r2, #128	@ 0x80
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <LCD_Scan_Dir+0x3fc>)
 80013a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013a8:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80013aa:	e10b      	b.n	80015c4 <LCD_Scan_Dir+0x610>
 80013ac:	20000080 	.word	0x20000080
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80013b8:	4b84      	ldr	r3, [pc, #528]	@ (80015cc <LCD_Scan_Dir+0x618>)
 80013ba:	895b      	ldrh	r3, [r3, #10]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fa5b 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013c2:	4b83      	ldr	r3, [pc, #524]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80013c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	4b81      	ldr	r3, [pc, #516]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80013cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	4b80      	ldr	r3, [pc, #512]	@ (80015d4 <LCD_Scan_Dir+0x620>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	4b7d      	ldr	r3, [pc, #500]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80013da:	2280      	movs	r2, #128	@ 0x80
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	4b7c      	ldr	r3, [pc, #496]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80013e0:	2280      	movs	r2, #128	@ 0x80
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	4b7a      	ldr	r3, [pc, #488]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80013e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ea:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80013ec:	4b78      	ldr	r3, [pc, #480]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80013ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	4b76      	ldr	r3, [pc, #472]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80013f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	4b75      	ldr	r3, [pc, #468]	@ (80015d4 <LCD_Scan_Dir+0x620>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	4b73      	ldr	r3, [pc, #460]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001404:	2280      	movs	r2, #128	@ 0x80
 8001406:	615a      	str	r2, [r3, #20]
 8001408:	4b71      	ldr	r3, [pc, #452]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 800140a:	2280      	movs	r2, #128	@ 0x80
 800140c:	611a      	str	r2, [r3, #16]
 800140e:	4b70      	ldr	r3, [pc, #448]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001410:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001414:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001416:	4b6e      	ldr	r3, [pc, #440]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001418:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	4b6c      	ldr	r3, [pc, #432]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001424:	615a      	str	r2, [r3, #20]
 8001426:	4b69      	ldr	r3, [pc, #420]	@ (80015cc <LCD_Scan_Dir+0x618>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	121a      	asrs	r2, r3, #8
 800142e:	4b69      	ldr	r3, [pc, #420]	@ (80015d4 <LCD_Scan_Dir+0x620>)
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	4b67      	ldr	r3, [pc, #412]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	615a      	str	r2, [r3, #20]
 8001438:	4b65      	ldr	r3, [pc, #404]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 800143a:	2280      	movs	r2, #128	@ 0x80
 800143c:	611a      	str	r2, [r3, #16]
 800143e:	4b64      	ldr	r3, [pc, #400]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001444:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001446:	4b62      	ldr	r3, [pc, #392]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001448:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	4b60      	ldr	r3, [pc, #384]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	4b5d      	ldr	r3, [pc, #372]	@ (80015cc <LCD_Scan_Dir+0x618>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	3b01      	subs	r3, #1
 800145c:	4a5d      	ldr	r2, [pc, #372]	@ (80015d4 <LCD_Scan_Dir+0x620>)
 800145e:	b2db      	uxtb	r3, r3
 8001460:	60d3      	str	r3, [r2, #12]
 8001462:	4b5b      	ldr	r3, [pc, #364]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001464:	2280      	movs	r2, #128	@ 0x80
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	4b59      	ldr	r3, [pc, #356]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 800146a:	2280      	movs	r2, #128	@ 0x80
 800146c:	611a      	str	r2, [r3, #16]
 800146e:	4b58      	ldr	r3, [pc, #352]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001470:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001474:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001476:	4b55      	ldr	r3, [pc, #340]	@ (80015cc <LCD_Scan_Dir+0x618>)
 8001478:	899b      	ldrh	r3, [r3, #12]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f9fc 	bl	8000878 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001480:	4b53      	ldr	r3, [pc, #332]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001482:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	4b51      	ldr	r3, [pc, #324]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 800148a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	4b50      	ldr	r3, [pc, #320]	@ (80015d4 <LCD_Scan_Dir+0x620>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	4b4e      	ldr	r3, [pc, #312]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	4b4c      	ldr	r3, [pc, #304]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 800149e:	2280      	movs	r2, #128	@ 0x80
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	4b4b      	ldr	r3, [pc, #300]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80014a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80014aa:	4b49      	ldr	r3, [pc, #292]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80014ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	4b47      	ldr	r3, [pc, #284]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80014b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	4b46      	ldr	r3, [pc, #280]	@ (80015d4 <LCD_Scan_Dir+0x620>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	4b43      	ldr	r3, [pc, #268]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80014c2:	2280      	movs	r2, #128	@ 0x80
 80014c4:	615a      	str	r2, [r3, #20]
 80014c6:	4b42      	ldr	r3, [pc, #264]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80014c8:	2280      	movs	r2, #128	@ 0x80
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	4b40      	ldr	r3, [pc, #256]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80014ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80014d4:	4b3e      	ldr	r3, [pc, #248]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80014d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	4b3c      	ldr	r3, [pc, #240]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80014de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	4b39      	ldr	r3, [pc, #228]	@ (80015cc <LCD_Scan_Dir+0x618>)
 80014e6:	885b      	ldrh	r3, [r3, #2]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	121a      	asrs	r2, r3, #8
 80014ec:	4b39      	ldr	r3, [pc, #228]	@ (80015d4 <LCD_Scan_Dir+0x620>)
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	4b37      	ldr	r3, [pc, #220]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80014f2:	2280      	movs	r2, #128	@ 0x80
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80014f8:	2280      	movs	r2, #128	@ 0x80
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	4b34      	ldr	r3, [pc, #208]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 80014fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001502:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001504:	4b32      	ldr	r3, [pc, #200]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001506:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 800150e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <LCD_Scan_Dir+0x618>)
 8001516:	885b      	ldrh	r3, [r3, #2]
 8001518:	3b01      	subs	r3, #1
 800151a:	4a2e      	ldr	r2, [pc, #184]	@ (80015d4 <LCD_Scan_Dir+0x620>)
 800151c:	b2db      	uxtb	r3, r3
 800151e:	60d3      	str	r3, [r2, #12]
 8001520:	4b2b      	ldr	r3, [pc, #172]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001522:	2280      	movs	r2, #128	@ 0x80
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 8001528:	2280      	movs	r2, #128	@ 0x80
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	4b28      	ldr	r3, [pc, #160]	@ (80015d0 <LCD_Scan_Dir+0x61c>)
 800152e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001532:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001534:	e046      	b.n	80015c4 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b07      	cmp	r3, #7
 800153a:	d836      	bhi.n	80015aa <LCD_Scan_Dir+0x5f6>
 800153c:	a201      	add	r2, pc, #4	@ (adr r2, 8001544 <LCD_Scan_Dir+0x590>)
 800153e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001542:	bf00      	nop
 8001544:	08001565 	.word	0x08001565
 8001548:	0800156f 	.word	0x0800156f
 800154c:	08001579 	.word	0x08001579
 8001550:	080015ab 	.word	0x080015ab
 8001554:	08001583 	.word	0x08001583
 8001558:	0800158d 	.word	0x0800158d
 800155c:	08001597 	.word	0x08001597
 8001560:	080015a1 	.word	0x080015a1
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001564:	89fb      	ldrh	r3, [r7, #14]
 8001566:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800156a:	81fb      	strh	r3, [r7, #14]
			break;
 800156c:	e01d      	b.n	80015aa <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 800156e:	89fb      	ldrh	r3, [r7, #14]
 8001570:	f043 0310 	orr.w	r3, r3, #16
 8001574:	81fb      	strh	r3, [r7, #14]
			break;
 8001576:	e018      	b.n	80015aa <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001578:	89fb      	ldrh	r3, [r7, #14]
 800157a:	f043 0320 	orr.w	r3, r3, #32
 800157e:	81fb      	strh	r3, [r7, #14]
			break;
 8001580:	e013      	b.n	80015aa <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001582:	89fb      	ldrh	r3, [r7, #14]
 8001584:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001588:	81fb      	strh	r3, [r7, #14]
			break;
 800158a:	e00e      	b.n	80015aa <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 800158c:	89fb      	ldrh	r3, [r7, #14]
 800158e:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001592:	81fb      	strh	r3, [r7, #14]
			break;
 8001594:	e009      	b.n	80015aa <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8001596:	89fb      	ldrh	r3, [r7, #14]
 8001598:	f043 0318 	orr.w	r3, r3, #24
 800159c:	81fb      	strh	r3, [r7, #14]
			break;
 800159e:	e004      	b.n	80015aa <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80015a0:	89fb      	ldrh	r3, [r7, #14]
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	81fb      	strh	r3, [r7, #14]
			break;
 80015a8:	bf00      	nop
		}
		dirreg = 0X03;
 80015aa:	2303      	movs	r3, #3
 80015ac:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80015ae:	89fb      	ldrh	r3, [r7, #14]
 80015b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015b4:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80015b6:	89fa      	ldrh	r2, [r7, #14]
 80015b8:	89bb      	ldrh	r3, [r7, #12]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff f9e7 	bl	8000990 <LCD_WriteReg>
	}
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000080 	.word	0x20000080
 80015d0:	40011000 	.word	0x40011000
 80015d4:	40010c00 	.word	0x40010c00

080015d8 <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	80fb      	strh	r3, [r7, #6]
 80015e4:	4613      	mov	r3, r2
 80015e6:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 80015e8:	88ba      	ldrh	r2, [r7, #4]
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fa14 	bl	8000a1c <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 80015f4:	f7ff fa06 	bl	8000a04 <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <LCD_DrawPoint+0x54>)
 80015fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <LCD_DrawPoint+0x54>)
 8001602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <LCD_DrawPoint+0x58>)
 800160a:	881a      	ldrh	r2, [r3, #0]
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <LCD_DrawPoint+0x5c>)
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <LCD_DrawPoint+0x54>)
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	4b05      	ldr	r3, [pc, #20]	@ (800162c <LCD_DrawPoint+0x54>)
 8001618:	2280      	movs	r2, #128	@ 0x80
 800161a:	611a      	str	r2, [r3, #16]
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <LCD_DrawPoint+0x54>)
 800161e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001622:	611a      	str	r2, [r3, #16]
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40011000 	.word	0x40011000
 8001630:	2000007c 	.word	0x2000007c
 8001634:	40010c00 	.word	0x40010c00

08001638 <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
 8001642:	460b      	mov	r3, r1
 8001644:	80bb      	strh	r3, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800164a:	4b75      	ldr	r3, [pc, #468]	@ (8001820 <LCD_Fast_DrawPoint+0x1e8>)
 800164c:	889b      	ldrh	r3, [r3, #4]
 800164e:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001652:	4293      	cmp	r3, r2
 8001654:	d005      	beq.n	8001662 <LCD_Fast_DrawPoint+0x2a>
 8001656:	4b72      	ldr	r3, [pc, #456]	@ (8001820 <LCD_Fast_DrawPoint+0x1e8>)
 8001658:	889b      	ldrh	r3, [r3, #4]
 800165a:	f245 3210 	movw	r2, #21264	@ 0x5310
 800165e:	4293      	cmp	r3, r2
 8001660:	d164      	bne.n	800172c <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8001662:	4b6f      	ldr	r3, [pc, #444]	@ (8001820 <LCD_Fast_DrawPoint+0x1e8>)
 8001664:	895b      	ldrh	r3, [r3, #10]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff f906 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800166c:	4b6d      	ldr	r3, [pc, #436]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 800166e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	4b6b      	ldr	r3, [pc, #428]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800167a:	615a      	str	r2, [r3, #20]
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b69      	ldr	r3, [pc, #420]	@ (8001828 <LCD_Fast_DrawPoint+0x1f0>)
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	4b67      	ldr	r3, [pc, #412]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001688:	2280      	movs	r2, #128	@ 0x80
 800168a:	615a      	str	r2, [r3, #20]
 800168c:	4b65      	ldr	r3, [pc, #404]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 800168e:	2280      	movs	r2, #128	@ 0x80
 8001690:	611a      	str	r2, [r3, #16]
 8001692:	4b64      	ldr	r3, [pc, #400]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001698:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800169a:	4b62      	ldr	r3, [pc, #392]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 800169c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	4b60      	ldr	r3, [pc, #384]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80016a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a8:	615a      	str	r2, [r3, #20]
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	4a5e      	ldr	r2, [pc, #376]	@ (8001828 <LCD_Fast_DrawPoint+0x1f0>)
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	60d3      	str	r3, [r2, #12]
 80016b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80016b4:	2280      	movs	r2, #128	@ 0x80
 80016b6:	615a      	str	r2, [r3, #20]
 80016b8:	4b5a      	ldr	r3, [pc, #360]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80016ba:	2280      	movs	r2, #128	@ 0x80
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	4b59      	ldr	r3, [pc, #356]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80016c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80016c6:	4b56      	ldr	r3, [pc, #344]	@ (8001820 <LCD_Fast_DrawPoint+0x1e8>)
 80016c8:	899b      	ldrh	r3, [r3, #12]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f8d4 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80016d0:	4b54      	ldr	r3, [pc, #336]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80016d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d6:	611a      	str	r2, [r3, #16]
 80016d8:	4b52      	ldr	r3, [pc, #328]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80016da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	88bb      	ldrh	r3, [r7, #4]
 80016e2:	0a1b      	lsrs	r3, r3, #8
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	4b50      	ldr	r3, [pc, #320]	@ (8001828 <LCD_Fast_DrawPoint+0x1f0>)
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80016ec:	2280      	movs	r2, #128	@ 0x80
 80016ee:	615a      	str	r2, [r3, #20]
 80016f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80016f2:	2280      	movs	r2, #128	@ 0x80
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80016f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016fc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80016fe:	4b49      	ldr	r3, [pc, #292]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001704:	611a      	str	r2, [r3, #16]
 8001706:	4b47      	ldr	r3, [pc, #284]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800170c:	615a      	str	r2, [r3, #20]
 800170e:	88bb      	ldrh	r3, [r7, #4]
 8001710:	4a45      	ldr	r2, [pc, #276]	@ (8001828 <LCD_Fast_DrawPoint+0x1f0>)
 8001712:	b2db      	uxtb	r3, r3
 8001714:	60d3      	str	r3, [r2, #12]
 8001716:	4b43      	ldr	r3, [pc, #268]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001718:	2280      	movs	r2, #128	@ 0x80
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	4b41      	ldr	r3, [pc, #260]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	4b40      	ldr	r3, [pc, #256]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001728:	611a      	str	r2, [r3, #16]
 800172a:	e1e6      	b.n	8001afa <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 800172c:	4b3c      	ldr	r3, [pc, #240]	@ (8001820 <LCD_Fast_DrawPoint+0x1e8>)
 800172e:	889b      	ldrh	r3, [r3, #4]
 8001730:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001734:	4293      	cmp	r3, r2
 8001736:	d179      	bne.n	800182c <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8001738:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <LCD_Fast_DrawPoint+0x1e8>)
 800173a:	895b      	ldrh	r3, [r3, #10]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff f89b 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001742:	4b38      	ldr	r3, [pc, #224]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001744:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 800174c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <LCD_Fast_DrawPoint+0x1f0>)
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 800175e:	2280      	movs	r2, #128	@ 0x80
 8001760:	615a      	str	r2, [r3, #20]
 8001762:	4b30      	ldr	r3, [pc, #192]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	611a      	str	r2, [r3, #16]
 8001768:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 800176a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001770:	4b2b      	ldr	r3, [pc, #172]	@ (8001820 <LCD_Fast_DrawPoint+0x1e8>)
 8001772:	895b      	ldrh	r3, [r3, #10]
 8001774:	3301      	adds	r3, #1
 8001776:	b29b      	uxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff f87d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 800177e:	4b29      	ldr	r3, [pc, #164]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001780:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001784:	611a      	str	r2, [r3, #16]
 8001786:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800178c:	615a      	str	r2, [r3, #20]
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	4a25      	ldr	r2, [pc, #148]	@ (8001828 <LCD_Fast_DrawPoint+0x1f0>)
 8001792:	b2db      	uxtb	r3, r3
 8001794:	60d3      	str	r3, [r2, #12]
 8001796:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001798:	2280      	movs	r2, #128	@ 0x80
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	4b21      	ldr	r3, [pc, #132]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 800179e:	2280      	movs	r2, #128	@ 0x80
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80017a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80017aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <LCD_Fast_DrawPoint+0x1e8>)
 80017ac:	899b      	ldrh	r3, [r3, #12]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f862 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80017b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80017be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	88bb      	ldrh	r3, [r7, #4]
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <LCD_Fast_DrawPoint+0x1f0>)
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80017d0:	2280      	movs	r2, #128	@ 0x80
 80017d2:	615a      	str	r2, [r3, #20]
 80017d4:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80017d6:	2280      	movs	r2, #128	@ 0x80
 80017d8:	611a      	str	r2, [r3, #16]
 80017da:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80017dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <LCD_Fast_DrawPoint+0x1e8>)
 80017e4:	899b      	ldrh	r3, [r3, #12]
 80017e6:	3301      	adds	r3, #1
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff f844 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80017f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 80017fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	88bb      	ldrh	r3, [r7, #4]
 8001802:	4a09      	ldr	r2, [pc, #36]	@ (8001828 <LCD_Fast_DrawPoint+0x1f0>)
 8001804:	b2db      	uxtb	r3, r3
 8001806:	60d3      	str	r3, [r2, #12]
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 800180a:	2280      	movs	r2, #128	@ 0x80
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001810:	2280      	movs	r2, #128	@ 0x80
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <LCD_Fast_DrawPoint+0x1ec>)
 8001816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	e16d      	b.n	8001afa <LCD_Fast_DrawPoint+0x4c2>
 800181e:	bf00      	nop
 8001820:	20000080 	.word	0x20000080
 8001824:	40011000 	.word	0x40011000
 8001828:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 800182c:	4b68      	ldr	r3, [pc, #416]	@ (80019d0 <LCD_Fast_DrawPoint+0x398>)
 800182e:	889b      	ldrh	r3, [r3, #4]
 8001830:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001834:	4293      	cmp	r3, r2
 8001836:	f040 80d1 	bne.w	80019dc <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 800183a:	4b65      	ldr	r3, [pc, #404]	@ (80019d0 <LCD_Fast_DrawPoint+0x398>)
 800183c:	799b      	ldrb	r3, [r3, #6]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d106      	bne.n	8001850 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8001842:	4b63      	ldr	r3, [pc, #396]	@ (80019d0 <LCD_Fast_DrawPoint+0x398>)
 8001844:	881a      	ldrh	r2, [r3, #0]
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	b29b      	uxth	r3, r3
 800184c:	3b01      	subs	r3, #1
 800184e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001850:	4b5f      	ldr	r3, [pc, #380]	@ (80019d0 <LCD_Fast_DrawPoint+0x398>)
 8001852:	895b      	ldrh	r3, [r3, #10]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff f80f 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800185a:	4b5e      	ldr	r3, [pc, #376]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 800185c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	4b5c      	ldr	r3, [pc, #368]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001864:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001868:	615a      	str	r2, [r3, #20]
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	b29a      	uxth	r2, r3
 8001870:	4b59      	ldr	r3, [pc, #356]	@ (80019d8 <LCD_Fast_DrawPoint+0x3a0>)
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	4b57      	ldr	r3, [pc, #348]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001876:	2280      	movs	r2, #128	@ 0x80
 8001878:	615a      	str	r2, [r3, #20]
 800187a:	4b56      	ldr	r3, [pc, #344]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 800187c:	2280      	movs	r2, #128	@ 0x80
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	4b54      	ldr	r3, [pc, #336]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001886:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001888:	4b52      	ldr	r3, [pc, #328]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 800188a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	4b50      	ldr	r3, [pc, #320]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001896:	615a      	str	r2, [r3, #20]
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	4a4f      	ldr	r2, [pc, #316]	@ (80019d8 <LCD_Fast_DrawPoint+0x3a0>)
 800189c:	b2db      	uxtb	r3, r3
 800189e:	60d3      	str	r3, [r2, #12]
 80018a0:	4b4c      	ldr	r3, [pc, #304]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80018a2:	2280      	movs	r2, #128	@ 0x80
 80018a4:	615a      	str	r2, [r3, #20]
 80018a6:	4b4b      	ldr	r3, [pc, #300]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80018a8:	2280      	movs	r2, #128	@ 0x80
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	4b49      	ldr	r3, [pc, #292]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80018ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018b2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 80018b4:	4b47      	ldr	r3, [pc, #284]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80018b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018ba:	611a      	str	r2, [r3, #16]
 80018bc:	4b45      	ldr	r3, [pc, #276]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80018be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018c2:	615a      	str	r2, [r3, #20]
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	4b43      	ldr	r3, [pc, #268]	@ (80019d8 <LCD_Fast_DrawPoint+0x3a0>)
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	4b41      	ldr	r3, [pc, #260]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80018d0:	2280      	movs	r2, #128	@ 0x80
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	4b3f      	ldr	r3, [pc, #252]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80018d6:	2280      	movs	r2, #128	@ 0x80
 80018d8:	611a      	str	r2, [r3, #16]
 80018da:	4b3e      	ldr	r3, [pc, #248]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80018dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80018e2:	4b3c      	ldr	r3, [pc, #240]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80018e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	4b3a      	ldr	r3, [pc, #232]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80018ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018f0:	615a      	str	r2, [r3, #20]
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	4a38      	ldr	r2, [pc, #224]	@ (80019d8 <LCD_Fast_DrawPoint+0x3a0>)
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	60d3      	str	r3, [r2, #12]
 80018fa:	4b36      	ldr	r3, [pc, #216]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80018fc:	2280      	movs	r2, #128	@ 0x80
 80018fe:	615a      	str	r2, [r3, #20]
 8001900:	4b34      	ldr	r3, [pc, #208]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001902:	2280      	movs	r2, #128	@ 0x80
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	4b33      	ldr	r3, [pc, #204]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800190c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800190e:	4b30      	ldr	r3, [pc, #192]	@ (80019d0 <LCD_Fast_DrawPoint+0x398>)
 8001910:	899b      	ldrh	r3, [r3, #12]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe ffb0 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001918:	4b2e      	ldr	r3, [pc, #184]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 800191a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	4b2c      	ldr	r3, [pc, #176]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001926:	615a      	str	r2, [r3, #20]
 8001928:	88bb      	ldrh	r3, [r7, #4]
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	b29a      	uxth	r2, r3
 800192e:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <LCD_Fast_DrawPoint+0x3a0>)
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001934:	2280      	movs	r2, #128	@ 0x80
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 800193a:	2280      	movs	r2, #128	@ 0x80
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	4b25      	ldr	r3, [pc, #148]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001944:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001946:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001948:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800194c:	611a      	str	r2, [r3, #16]
 800194e:	4b21      	ldr	r3, [pc, #132]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001954:	615a      	str	r2, [r3, #20]
 8001956:	88bb      	ldrh	r3, [r7, #4]
 8001958:	4a1f      	ldr	r2, [pc, #124]	@ (80019d8 <LCD_Fast_DrawPoint+0x3a0>)
 800195a:	b2db      	uxtb	r3, r3
 800195c:	60d3      	str	r3, [r2, #12]
 800195e:	4b1d      	ldr	r3, [pc, #116]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001960:	2280      	movs	r2, #128	@ 0x80
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001966:	2280      	movs	r2, #128	@ 0x80
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 800196c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001970:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001974:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 800197c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001980:	615a      	str	r2, [r3, #20]
 8001982:	88bb      	ldrh	r3, [r7, #4]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	b29a      	uxth	r2, r3
 8001988:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <LCD_Fast_DrawPoint+0x3a0>)
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 800198e:	2280      	movs	r2, #128	@ 0x80
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 8001994:	2280      	movs	r2, #128	@ 0x80
 8001996:	611a      	str	r2, [r3, #16]
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 800199a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800199e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80019a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80019aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ae:	615a      	str	r2, [r3, #20]
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	4a09      	ldr	r2, [pc, #36]	@ (80019d8 <LCD_Fast_DrawPoint+0x3a0>)
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	60d3      	str	r3, [r2, #12]
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80019ba:	2280      	movs	r2, #128	@ 0x80
 80019bc:	615a      	str	r2, [r3, #20]
 80019be:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <LCD_Fast_DrawPoint+0x39c>)
 80019c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	e095      	b.n	8001afa <LCD_Fast_DrawPoint+0x4c2>
 80019ce:	bf00      	nop
 80019d0:	20000080 	.word	0x20000080
 80019d4:	40011000 	.word	0x40011000
 80019d8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 80019dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001b58 <LCD_Fast_DrawPoint+0x520>)
 80019de:	889b      	ldrh	r3, [r3, #4]
 80019e0:	f646 0204 	movw	r2, #26628	@ 0x6804
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d16f      	bne.n	8001ac8 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 80019e8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b58 <LCD_Fast_DrawPoint+0x520>)
 80019ea:	799b      	ldrb	r3, [r3, #6]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d106      	bne.n	80019fe <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 80019f0:	4b59      	ldr	r3, [pc, #356]	@ (8001b58 <LCD_Fast_DrawPoint+0x520>)
 80019f2:	881a      	ldrh	r2, [r3, #0]
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b01      	subs	r3, #1
 80019fc:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80019fe:	4b56      	ldr	r3, [pc, #344]	@ (8001b58 <LCD_Fast_DrawPoint+0x520>)
 8001a00:	895b      	ldrh	r3, [r3, #10]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe ff38 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001a08:	4b54      	ldr	r3, [pc, #336]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a0e:	611a      	str	r2, [r3, #16]
 8001a10:	4b52      	ldr	r3, [pc, #328]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a16:	615a      	str	r2, [r3, #20]
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b50      	ldr	r3, [pc, #320]	@ (8001b60 <LCD_Fast_DrawPoint+0x528>)
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	4b4e      	ldr	r3, [pc, #312]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a24:	2280      	movs	r2, #128	@ 0x80
 8001a26:	615a      	str	r2, [r3, #20]
 8001a28:	4b4c      	ldr	r3, [pc, #304]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a2a:	2280      	movs	r2, #128	@ 0x80
 8001a2c:	611a      	str	r2, [r3, #16]
 8001a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a34:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001a36:	4b49      	ldr	r3, [pc, #292]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	4b47      	ldr	r3, [pc, #284]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a44:	615a      	str	r2, [r3, #20]
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	4a45      	ldr	r2, [pc, #276]	@ (8001b60 <LCD_Fast_DrawPoint+0x528>)
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	60d3      	str	r3, [r2, #12]
 8001a4e:	4b43      	ldr	r3, [pc, #268]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a50:	2280      	movs	r2, #128	@ 0x80
 8001a52:	615a      	str	r2, [r3, #20]
 8001a54:	4b41      	ldr	r3, [pc, #260]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a56:	2280      	movs	r2, #128	@ 0x80
 8001a58:	611a      	str	r2, [r3, #16]
 8001a5a:	4b40      	ldr	r3, [pc, #256]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a60:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001a62:	4b3d      	ldr	r3, [pc, #244]	@ (8001b58 <LCD_Fast_DrawPoint+0x520>)
 8001a64:	899b      	ldrh	r3, [r3, #12]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe ff06 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a72:	611a      	str	r2, [r3, #16]
 8001a74:	4b39      	ldr	r3, [pc, #228]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a7a:	615a      	str	r2, [r3, #20]
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	4b37      	ldr	r3, [pc, #220]	@ (8001b60 <LCD_Fast_DrawPoint+0x528>)
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	4b35      	ldr	r3, [pc, #212]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a88:	2280      	movs	r2, #128	@ 0x80
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	4b33      	ldr	r3, [pc, #204]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	611a      	str	r2, [r3, #16]
 8001a92:	4b32      	ldr	r3, [pc, #200]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a98:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a9a:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001a9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aa0:	611a      	str	r2, [r3, #16]
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001aa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aa8:	615a      	str	r2, [r3, #20]
 8001aaa:	88bb      	ldrh	r3, [r7, #4]
 8001aac:	4a2c      	ldr	r2, [pc, #176]	@ (8001b60 <LCD_Fast_DrawPoint+0x528>)
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	60d3      	str	r3, [r2, #12]
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001ab4:	2280      	movs	r2, #128	@ 0x80
 8001ab6:	615a      	str	r2, [r3, #20]
 8001ab8:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001aba:	2280      	movs	r2, #128	@ 0x80
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001ac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ac4:	611a      	str	r2, [r3, #16]
 8001ac6:	e018      	b.n	8001afa <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <LCD_Fast_DrawPoint+0x520>)
 8001aca:	799b      	ldrb	r3, [r3, #6]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d106      	bne.n	8001ade <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001ad0:	4b21      	ldr	r3, [pc, #132]	@ (8001b58 <LCD_Fast_DrawPoint+0x520>)
 8001ad2:	881a      	ldrh	r2, [r3, #0]
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b01      	subs	r3, #1
 8001adc:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001ade:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <LCD_Fast_DrawPoint+0x520>)
 8001ae0:	895b      	ldrh	r3, [r3, #10]
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe ff52 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001aec:	4b1a      	ldr	r3, [pc, #104]	@ (8001b58 <LCD_Fast_DrawPoint+0x520>)
 8001aee:	899b      	ldrh	r3, [r3, #12]
 8001af0:	88ba      	ldrh	r2, [r7, #4]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe ff4b 	bl	8000990 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001afa:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001afc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b00:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b08:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <LCD_Fast_DrawPoint+0x520>)
 8001b0c:	891a      	ldrh	r2, [r3, #8]
 8001b0e:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <LCD_Fast_DrawPoint+0x528>)
 8001b10:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001b12:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001b14:	2280      	movs	r2, #128	@ 0x80
 8001b16:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001b18:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001b1a:	2280      	movs	r2, #128	@ 0x80
 8001b1c:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b24:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001b28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b2c:	611a      	str	r2, [r3, #16]
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <LCD_Fast_DrawPoint+0x528>)
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	60d3      	str	r3, [r2, #12]
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001b3e:	2280      	movs	r2, #128	@ 0x80
 8001b40:	615a      	str	r2, [r3, #20]
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001b44:	2280      	movs	r2, #128	@ 0x80
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <LCD_Fast_DrawPoint+0x524>)
 8001b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b4e:	611a      	str	r2, [r3, #16]
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000080 	.word	0x20000080
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40010c00 	.word	0x40010c00
 8001b64:	00000000 	.word	0x00000000

08001b68 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001b72:	20be      	movs	r0, #190	@ 0xbe
 8001b74:	f7fe fe80 	bl	8000878 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001b78:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001b7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b7e:	611a      	str	r2, [r3, #16]
 8001b80:	4b49      	ldr	r3, [pc, #292]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	4b48      	ldr	r3, [pc, #288]	@ (8001cac <LCD_SSD_BackLightSet+0x144>)
 8001b8a:	2205      	movs	r2, #5
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	4b46      	ldr	r3, [pc, #280]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001b90:	2280      	movs	r2, #128	@ 0x80
 8001b92:	615a      	str	r2, [r3, #20]
 8001b94:	4b44      	ldr	r3, [pc, #272]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	611a      	str	r2, [r3, #16]
 8001b9a:	4b43      	ldr	r3, [pc, #268]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ba0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001ba2:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bb0:	615a      	str	r2, [r3, #20]
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fdb3 	bl	8000720 <__aeabi_i2d>
 8001bba:	a339      	add	r3, pc, #228	@ (adr r3, 8001ca0 <LCD_SSD_BackLightSet+0x138>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fb32 	bl	8000228 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4c38      	ldr	r4, [pc, #224]	@ (8001cac <LCD_SSD_BackLightSet+0x144>)
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7fe fe11 	bl	80007f4 <__aeabi_d2uiz>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	60e3      	str	r3, [r4, #12]
 8001bd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001bd8:	2280      	movs	r2, #128	@ 0x80
 8001bda:	615a      	str	r2, [r3, #20]
 8001bdc:	4b32      	ldr	r3, [pc, #200]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001bde:	2280      	movs	r2, #128	@ 0x80
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	4b31      	ldr	r3, [pc, #196]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001be8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001bea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bf0:	611a      	str	r2, [r3, #16]
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001bf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bf8:	615a      	str	r2, [r3, #20]
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8001cac <LCD_SSD_BackLightSet+0x144>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	615a      	str	r2, [r3, #20]
 8001c06:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c08:	2280      	movs	r2, #128	@ 0x80
 8001c0a:	611a      	str	r2, [r3, #16]
 8001c0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c12:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001c14:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c1a:	611a      	str	r2, [r3, #16]
 8001c1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c22:	615a      	str	r2, [r3, #20]
 8001c24:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <LCD_SSD_BackLightSet+0x144>)
 8001c26:	22ff      	movs	r2, #255	@ 0xff
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c2c:	2280      	movs	r2, #128	@ 0x80
 8001c2e:	615a      	str	r2, [r3, #20]
 8001c30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c32:	2280      	movs	r2, #128	@ 0x80
 8001c34:	611a      	str	r2, [r3, #16]
 8001c36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c3c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c44:	611a      	str	r2, [r3, #16]
 8001c46:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c4c:	615a      	str	r2, [r3, #20]
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <LCD_SSD_BackLightSet+0x144>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c56:	2280      	movs	r2, #128	@ 0x80
 8001c58:	615a      	str	r2, [r3, #20]
 8001c5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c5c:	2280      	movs	r2, #128	@ 0x80
 8001c5e:	611a      	str	r2, [r3, #16]
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c66:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001c68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c76:	615a      	str	r2, [r3, #20]
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <LCD_SSD_BackLightSet+0x144>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c86:	2280      	movs	r2, #128	@ 0x80
 8001c88:	611a      	str	r2, [r3, #16]
 8001c8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <LCD_SSD_BackLightSet+0x140>)
 8001c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c90:	611a      	str	r2, [r3, #16]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	66666666 	.word	0x66666666
 8001ca4:	40046666 	.word	0x40046666
 8001ca8:	40011000 	.word	0x40011000
 8001cac:	40010c00 	.word	0x40010c00

08001cb0 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d177      	bne.n	8001db0 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001cc0:	4b80      	ldr	r3, [pc, #512]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001cc8:	22f0      	movs	r2, #240	@ 0xf0
 8001cca:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001ccc:	4b7d      	ldr	r3, [pc, #500]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001cce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001cd2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001cd4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001cd6:	889b      	ldrh	r3, [r3, #4]
 8001cd8:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00b      	beq.n	8001cf8 <LCD_Display_Dir+0x48>
 8001ce0:	4b78      	ldr	r3, [pc, #480]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001ce2:	889b      	ldrh	r3, [r3, #4]
 8001ce4:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d005      	beq.n	8001cf8 <LCD_Display_Dir+0x48>
 8001cec:	4b75      	ldr	r3, [pc, #468]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001cee:	889b      	ldrh	r3, [r3, #4]
 8001cf0:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d11e      	bne.n	8001d36 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001cf8:	4b72      	ldr	r3, [pc, #456]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001cfa:	222c      	movs	r2, #44	@ 0x2c
 8001cfc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001cfe:	4b71      	ldr	r3, [pc, #452]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d00:	222a      	movs	r2, #42	@ 0x2a
 8001d02:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001d04:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d06:	222b      	movs	r2, #43	@ 0x2b
 8001d08:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d0a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d0c:	889b      	ldrh	r3, [r3, #4]
 8001d0e:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d006      	beq.n	8001d24 <LCD_Display_Dir+0x74>
 8001d16:	4b6b      	ldr	r3, [pc, #428]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d18:	889b      	ldrh	r3, [r3, #4]
 8001d1a:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	f040 80c7 	bne.w	8001eb2 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001d24:	4b67      	ldr	r3, [pc, #412]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d26:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001d2a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001d2c:	4b65      	ldr	r3, [pc, #404]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d2e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001d32:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d34:	e0bd      	b.n	8001eb2 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001d36:	4b63      	ldr	r3, [pc, #396]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d38:	889b      	ldrh	r3, [r3, #4]
 8001d3a:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d114      	bne.n	8001d6c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001d42:	4b60      	ldr	r3, [pc, #384]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d44:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001d48:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001d4a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d4c:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001d50:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001d52:	4b5c      	ldr	r3, [pc, #368]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d54:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001d58:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d5c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001d60:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001d62:	4b58      	ldr	r3, [pc, #352]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d64:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001d68:	805a      	strh	r2, [r3, #2]
 8001d6a:	e0a3      	b.n	8001eb4 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001d6c:	4b55      	ldr	r3, [pc, #340]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d6e:	889b      	ldrh	r3, [r3, #4]
 8001d70:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d111      	bne.n	8001d9c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001d78:	4b52      	ldr	r3, [pc, #328]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d7a:	222c      	movs	r2, #44	@ 0x2c
 8001d7c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001d7e:	4b51      	ldr	r3, [pc, #324]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d80:	222b      	movs	r2, #43	@ 0x2b
 8001d82:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001d84:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d86:	222a      	movs	r2, #42	@ 0x2a
 8001d88:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001d8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d8c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001d90:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001d92:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d94:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001d98:	805a      	strh	r2, [r3, #2]
 8001d9a:	e08b      	b.n	8001eb4 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001d9c:	4b49      	ldr	r3, [pc, #292]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001d9e:	2222      	movs	r2, #34	@ 0x22
 8001da0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001da2:	4b48      	ldr	r3, [pc, #288]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001da4:	2220      	movs	r2, #32
 8001da6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001da8:	4b46      	ldr	r3, [pc, #280]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001daa:	2221      	movs	r2, #33	@ 0x21
 8001dac:	819a      	strh	r2, [r3, #12]
 8001dae:	e081      	b.n	8001eb4 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001db0:	4b44      	ldr	r3, [pc, #272]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001db6:	4b43      	ldr	r3, [pc, #268]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001db8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001dbc:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001dbe:	4b41      	ldr	r3, [pc, #260]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001dc0:	22f0      	movs	r2, #240	@ 0xf0
 8001dc2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001dc6:	889b      	ldrh	r3, [r3, #4]
 8001dc8:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d005      	beq.n	8001ddc <LCD_Display_Dir+0x12c>
 8001dd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001dd2:	889b      	ldrh	r3, [r3, #4]
 8001dd4:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d109      	bne.n	8001df0 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001ddc:	4b39      	ldr	r3, [pc, #228]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001dde:	222c      	movs	r2, #44	@ 0x2c
 8001de0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001de2:	4b38      	ldr	r3, [pc, #224]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001de4:	222a      	movs	r2, #42	@ 0x2a
 8001de6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001de8:	4b36      	ldr	r3, [pc, #216]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001dea:	222b      	movs	r2, #43	@ 0x2b
 8001dec:	819a      	strh	r2, [r3, #12]
 8001dee:	e04b      	b.n	8001e88 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001df0:	4b34      	ldr	r3, [pc, #208]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001df2:	889b      	ldrh	r3, [r3, #4]
 8001df4:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d109      	bne.n	8001e10 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001dfc:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001dfe:	222c      	movs	r2, #44	@ 0x2c
 8001e00:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001e02:	4b30      	ldr	r3, [pc, #192]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e04:	222b      	movs	r2, #43	@ 0x2b
 8001e06:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001e08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e0a:	222a      	movs	r2, #42	@ 0x2a
 8001e0c:	819a      	strh	r2, [r3, #12]
 8001e0e:	e03b      	b.n	8001e88 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001e10:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e12:	889b      	ldrh	r3, [r3, #4]
 8001e14:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d114      	bne.n	8001e46 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001e1c:	4b29      	ldr	r3, [pc, #164]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e1e:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001e22:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001e24:	4b27      	ldr	r3, [pc, #156]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e26:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001e2a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001e2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e2e:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001e32:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001e34:	4b23      	ldr	r3, [pc, #140]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e36:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001e3a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001e3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e3e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001e42:	805a      	strh	r2, [r3, #2]
 8001e44:	e020      	b.n	8001e88 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001e46:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e48:	889b      	ldrh	r3, [r3, #4]
 8001e4a:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d111      	bne.n	8001e76 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001e52:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e54:	222c      	movs	r2, #44	@ 0x2c
 8001e56:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001e58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e5a:	222a      	movs	r2, #42	@ 0x2a
 8001e5c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001e5e:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e60:	222b      	movs	r2, #43	@ 0x2b
 8001e62:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001e64:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e66:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001e6a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001e6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e6e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001e72:	805a      	strh	r2, [r3, #2]
 8001e74:	e008      	b.n	8001e88 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001e76:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e78:	2222      	movs	r2, #34	@ 0x22
 8001e7a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e7e:	2221      	movs	r2, #33	@ 0x21
 8001e80:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e84:	2220      	movs	r2, #32
 8001e86:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001e88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e8a:	889b      	ldrh	r3, [r3, #4]
 8001e8c:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d005      	beq.n	8001ea0 <LCD_Display_Dir+0x1f0>
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001e96:	889b      	ldrh	r3, [r3, #4]
 8001e98:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d109      	bne.n	8001eb4 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001ea2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001ea6:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <LCD_Display_Dir+0x214>)
 8001eaa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001eae:	805a      	strh	r2, [r3, #2]
 8001eb0:	e000      	b.n	8001eb4 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001eb2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff f87d 	bl	8000fb4 <LCD_Scan_Dir>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000080 	.word	0x20000080

08001ec8 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001ece:	4b90      	ldr	r3, [pc, #576]	@ (8002110 <LCD_Init+0x248>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	4a8f      	ldr	r2, [pc, #572]	@ (8002110 <LCD_Init+0x248>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	6193      	str	r3, [r2, #24]
 8001eda:	4b8d      	ldr	r3, [pc, #564]	@ (8002110 <LCD_Init+0x248>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001ee6:	4b8a      	ldr	r3, [pc, #552]	@ (8002110 <LCD_Init+0x248>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4a89      	ldr	r2, [pc, #548]	@ (8002110 <LCD_Init+0x248>)
 8001eec:	f043 0310 	orr.w	r3, r3, #16
 8001ef0:	6193      	str	r3, [r2, #24]
 8001ef2:	4b87      	ldr	r3, [pc, #540]	@ (8002110 <LCD_Init+0x248>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001efe:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001f02:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001f04:	2301      	movs	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001f08:	2301      	movs	r3, #1
 8001f0a:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	4619      	mov	r1, r3
 8001f16:	487f      	ldr	r0, [pc, #508]	@ (8002114 <LCD_Init+0x24c>)
 8001f18:	f004 fd04 	bl	8006924 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001f1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f20:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	4619      	mov	r1, r3
 8001f28:	487b      	ldr	r0, [pc, #492]	@ (8002118 <LCD_Init+0x250>)
 8001f2a:	f004 fcfb 	bl	8006924 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001f2e:	2032      	movs	r0, #50	@ 0x32
 8001f30:	f004 fbf0 	bl	8006714 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001f34:	2101      	movs	r1, #1
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7fe fd2a 	bl	8000990 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001f3c:	2032      	movs	r0, #50	@ 0x32
 8001f3e:	f004 fbe9 	bl	8006714 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7fe fd4e 	bl	80009e4 <LCD_ReadReg>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b73      	ldr	r3, [pc, #460]	@ (800211c <LCD_Init+0x254>)
 8001f4e:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001f50:	4b72      	ldr	r3, [pc, #456]	@ (800211c <LCD_Init+0x254>)
 8001f52:	889b      	ldrh	r3, [r3, #4]
 8001f54:	2bfe      	cmp	r3, #254	@ 0xfe
 8001f56:	d90b      	bls.n	8001f70 <LCD_Init+0xa8>
 8001f58:	4b70      	ldr	r3, [pc, #448]	@ (800211c <LCD_Init+0x254>)
 8001f5a:	889b      	ldrh	r3, [r3, #4]
 8001f5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d005      	beq.n	8001f70 <LCD_Init+0xa8>
 8001f64:	4b6d      	ldr	r3, [pc, #436]	@ (800211c <LCD_Init+0x254>)
 8001f66:	889b      	ldrh	r3, [r3, #4]
 8001f68:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
 8001f6c:	f040 80c8 	bne.w	8002100 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001f70:	20d3      	movs	r0, #211	@ 0xd3
 8001f72:	f7fe fc81 	bl	8000878 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read
 8001f76:	f7fe fcc7 	bl	8000908 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001f7a:	f7fe fcc5 	bl	8000908 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001f7e:	f7fe fcc3 	bl	8000908 <LCD_RD_DATA>
 8001f82:	4603      	mov	r3, r0
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b65      	ldr	r3, [pc, #404]	@ (800211c <LCD_Init+0x254>)
 8001f88:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001f8a:	4b64      	ldr	r3, [pc, #400]	@ (800211c <LCD_Init+0x254>)
 8001f8c:	889b      	ldrh	r3, [r3, #4]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b62      	ldr	r3, [pc, #392]	@ (800211c <LCD_Init+0x254>)
 8001f94:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001f96:	f7fe fcb7 	bl	8000908 <LCD_RD_DATA>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b5f      	ldr	r3, [pc, #380]	@ (800211c <LCD_Init+0x254>)
 8001fa0:	889b      	ldrh	r3, [r3, #4]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800211c <LCD_Init+0x254>)
 8001fa8:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001faa:	4b5c      	ldr	r3, [pc, #368]	@ (800211c <LCD_Init+0x254>)
 8001fac:	889b      	ldrh	r3, [r3, #4]
 8001fae:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	f000 80a4 	beq.w	8002100 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001fb8:	20bf      	movs	r0, #191	@ 0xbf
 8001fba:	f7fe fc5d 	bl	8000878 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read
 8001fbe:	f7fe fca3 	bl	8000908 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001fc2:	f7fe fca1 	bl	8000908 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001fc6:	f7fe fc9f 	bl	8000908 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001fca:	f7fe fc9d 	bl	8000908 <LCD_RD_DATA>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b52      	ldr	r3, [pc, #328]	@ (800211c <LCD_Init+0x254>)
 8001fd4:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001fd6:	4b51      	ldr	r3, [pc, #324]	@ (800211c <LCD_Init+0x254>)
 8001fd8:	889b      	ldrh	r3, [r3, #4]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	4b4f      	ldr	r3, [pc, #316]	@ (800211c <LCD_Init+0x254>)
 8001fe0:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001fe2:	f7fe fc91 	bl	8000908 <LCD_RD_DATA>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b4c      	ldr	r3, [pc, #304]	@ (800211c <LCD_Init+0x254>)
 8001fec:	889b      	ldrh	r3, [r3, #4]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800211c <LCD_Init+0x254>)
 8001ff4:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001ff6:	4b49      	ldr	r3, [pc, #292]	@ (800211c <LCD_Init+0x254>)
 8001ff8:	889b      	ldrh	r3, [r3, #4]
 8001ffa:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d07e      	beq.n	8002100 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8002002:	20d4      	movs	r0, #212	@ 0xd4
 8002004:	f7fe fc38 	bl	8000878 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read
 8002008:	f7fe fc7e 	bl	8000908 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01
 800200c:	f7fe fc7c 	bl	8000908 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8002010:	f7fe fc7a 	bl	8000908 <LCD_RD_DATA>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	4b40      	ldr	r3, [pc, #256]	@ (800211c <LCD_Init+0x254>)
 800201a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 800201c:	4b3f      	ldr	r3, [pc, #252]	@ (800211c <LCD_Init+0x254>)
 800201e:	889b      	ldrh	r3, [r3, #4]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b3d      	ldr	r3, [pc, #244]	@ (800211c <LCD_Init+0x254>)
 8002026:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8002028:	f7fe fc6e 	bl	8000908 <LCD_RD_DATA>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	4b3a      	ldr	r3, [pc, #232]	@ (800211c <LCD_Init+0x254>)
 8002032:	889b      	ldrh	r3, [r3, #4]
 8002034:	4313      	orrs	r3, r2
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b38      	ldr	r3, [pc, #224]	@ (800211c <LCD_Init+0x254>)
 800203a:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 800203c:	4b37      	ldr	r3, [pc, #220]	@ (800211c <LCD_Init+0x254>)
 800203e:	889b      	ldrh	r3, [r3, #4]
 8002040:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002044:	4293      	cmp	r3, r2
 8002046:	d05b      	beq.n	8002100 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8002048:	f44f 405a 	mov.w	r0, #55808	@ 0xda00
 800204c:	f7fe fc14 	bl	8000878 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00
 8002050:	f7fe fc5a 	bl	8000908 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8002054:	f44f 405b 	mov.w	r0, #56064	@ 0xdb00
 8002058:	f7fe fc0e 	bl	8000878 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 800205c:	f7fe fc54 	bl	8000908 <LCD_RD_DATA>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	4b2d      	ldr	r3, [pc, #180]	@ (800211c <LCD_Init+0x254>)
 8002066:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002068:	4b2c      	ldr	r3, [pc, #176]	@ (800211c <LCD_Init+0x254>)
 800206a:	889b      	ldrh	r3, [r3, #4]
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b2a      	ldr	r3, [pc, #168]	@ (800211c <LCD_Init+0x254>)
 8002072:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002074:	f44f 405c 	mov.w	r0, #56320	@ 0xdc00
 8002078:	f7fe fbfe 	bl	8000878 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800207c:	f7fe fc44 	bl	8000908 <LCD_RD_DATA>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	4b25      	ldr	r3, [pc, #148]	@ (800211c <LCD_Init+0x254>)
 8002086:	889b      	ldrh	r3, [r3, #4]
 8002088:	4313      	orrs	r3, r2
 800208a:	b29a      	uxth	r2, r3
 800208c:	4b23      	ldr	r3, [pc, #140]	@ (800211c <LCD_Init+0x254>)
 800208e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002090:	4b22      	ldr	r3, [pc, #136]	@ (800211c <LCD_Init+0x254>)
 8002092:	889b      	ldrh	r3, [r3, #4]
 8002094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002098:	d103      	bne.n	80020a2 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800209a:	4b20      	ldr	r3, [pc, #128]	@ (800211c <LCD_Init+0x254>)
 800209c:	f245 5210 	movw	r2, #21776	@ 0x5510
 80020a0:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 80020a2:	4b1e      	ldr	r3, [pc, #120]	@ (800211c <LCD_Init+0x254>)
 80020a4:	889b      	ldrh	r3, [r3, #4]
 80020a6:	f245 5210 	movw	r2, #21776	@ 0x5510
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d028      	beq.n	8002100 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 80020ae:	20a1      	movs	r0, #161	@ 0xa1
 80020b0:	f7fe fbe2 	bl	8000878 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 80020b4:	f7fe fc28 	bl	8000908 <LCD_RD_DATA>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b17      	ldr	r3, [pc, #92]	@ (800211c <LCD_Init+0x254>)
 80020be:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 80020c0:	f7fe fc22 	bl	8000908 <LCD_RD_DATA>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b14      	ldr	r3, [pc, #80]	@ (800211c <LCD_Init+0x254>)
 80020ca:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 80020cc:	4b13      	ldr	r3, [pc, #76]	@ (800211c <LCD_Init+0x254>)
 80020ce:	889b      	ldrh	r3, [r3, #4]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b11      	ldr	r3, [pc, #68]	@ (800211c <LCD_Init+0x254>)
 80020d6:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 80020d8:	f7fe fc16 	bl	8000908 <LCD_RD_DATA>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	4b0e      	ldr	r3, [pc, #56]	@ (800211c <LCD_Init+0x254>)
 80020e2:	889b      	ldrh	r3, [r3, #4]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <LCD_Init+0x254>)
 80020ea:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <LCD_Init+0x254>)
 80020ee:	889b      	ldrh	r3, [r3, #4]
 80020f0:	f245 7261 	movw	r2, #22369	@ 0x5761
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d103      	bne.n	8002100 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <LCD_Init+0x254>)
 80020fa:	f641 1263 	movw	r2, #6499	@ 0x1963
 80020fe:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <LCD_Init+0x254>)
 8002102:	889b      	ldrh	r3, [r3, #4]
 8002104:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002108:	4293      	cmp	r3, r2
 800210a:	f040 811f 	bne.w	800234c <LCD_Init+0x484>
 800210e:	e007      	b.n	8002120 <LCD_Init+0x258>
 8002110:	40021000 	.word	0x40021000
 8002114:	40011000 	.word	0x40011000
 8002118:	40010c00 	.word	0x40010c00
 800211c:	20000080 	.word	0x20000080
			{
		LCD_WR_REG(0xCF);
 8002120:	20cf      	movs	r0, #207	@ 0xcf
 8002122:	f7fe fba9 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002126:	2000      	movs	r0, #0
 8002128:	f7fe fbca 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 800212c:	20c1      	movs	r0, #193	@ 0xc1
 800212e:	f7fe fbc7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8002132:	2030      	movs	r0, #48	@ 0x30
 8002134:	f7fe fbc4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002138:	20ed      	movs	r0, #237	@ 0xed
 800213a:	f7fe fb9d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 800213e:	2064      	movs	r0, #100	@ 0x64
 8002140:	f7fe fbbe 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002144:	2003      	movs	r0, #3
 8002146:	f7fe fbbb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 800214a:	2012      	movs	r0, #18
 800214c:	f7fe fbb8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002150:	2081      	movs	r0, #129	@ 0x81
 8002152:	f7fe fbb5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8002156:	20e8      	movs	r0, #232	@ 0xe8
 8002158:	f7fe fb8e 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 800215c:	2085      	movs	r0, #133	@ 0x85
 800215e:	f7fe fbaf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002162:	2010      	movs	r0, #16
 8002164:	f7fe fbac 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002168:	207a      	movs	r0, #122	@ 0x7a
 800216a:	f7fe fba9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 800216e:	20cb      	movs	r0, #203	@ 0xcb
 8002170:	f7fe fb82 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8002174:	2039      	movs	r0, #57	@ 0x39
 8002176:	f7fe fba3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 800217a:	202c      	movs	r0, #44	@ 0x2c
 800217c:	f7fe fba0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002180:	2000      	movs	r0, #0
 8002182:	f7fe fb9d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002186:	2034      	movs	r0, #52	@ 0x34
 8002188:	f7fe fb9a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800218c:	2002      	movs	r0, #2
 800218e:	f7fe fb97 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8002192:	20f7      	movs	r0, #247	@ 0xf7
 8002194:	f7fe fb70 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002198:	2020      	movs	r0, #32
 800219a:	f7fe fb91 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800219e:	20ea      	movs	r0, #234	@ 0xea
 80021a0:	f7fe fb6a 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021a4:	2000      	movs	r0, #0
 80021a6:	f7fe fb8b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7fe fb88 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control
 80021b0:	20c0      	movs	r0, #192	@ 0xc0
 80021b2:	f7fe fb61 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0]
 80021b6:	201b      	movs	r0, #27
 80021b8:	f7fe fb82 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control
 80021bc:	20c1      	movs	r0, #193	@ 0xc1
 80021be:	f7fe fb5b 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0]
 80021c2:	2001      	movs	r0, #1
 80021c4:	f7fe fb7c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control
 80021c8:	20c5      	movs	r0, #197	@ 0xc5
 80021ca:	f7fe fb55 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 80021ce:	2030      	movs	r0, #48	@ 0x30
 80021d0:	f7fe fb76 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 80021d4:	2030      	movs	r0, #48	@ 0x30
 80021d6:	f7fe fb73 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2
 80021da:	20c7      	movs	r0, #199	@ 0xc7
 80021dc:	f7fe fb4c 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 80021e0:	20b7      	movs	r0, #183	@ 0xb7
 80021e2:	f7fe fb6d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control
 80021e6:	2036      	movs	r0, #54	@ 0x36
 80021e8:	f7fe fb46 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 80021ec:	2048      	movs	r0, #72	@ 0x48
 80021ee:	f7fe fb67 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 80021f2:	203a      	movs	r0, #58	@ 0x3a
 80021f4:	f7fe fb40 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 80021f8:	2055      	movs	r0, #85	@ 0x55
 80021fa:	f7fe fb61 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 80021fe:	20b1      	movs	r0, #177	@ 0xb1
 8002200:	f7fe fb3a 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002204:	2000      	movs	r0, #0
 8002206:	f7fe fb5b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 800220a:	201a      	movs	r0, #26
 800220c:	f7fe fb58 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control
 8002210:	20b6      	movs	r0, #182	@ 0xb6
 8002212:	f7fe fb31 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002216:	200a      	movs	r0, #10
 8002218:	f7fe fb52 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800221c:	20a2      	movs	r0, #162	@ 0xa2
 800221e:	f7fe fb4f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002222:	20f2      	movs	r0, #242	@ 0xf2
 8002224:	f7fe fb28 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002228:	2000      	movs	r0, #0
 800222a:	f7fe fb49 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected
 800222e:	2026      	movs	r0, #38	@ 0x26
 8002230:	f7fe fb22 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002234:	2001      	movs	r0, #1
 8002236:	f7fe fb43 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma
 800223a:	20e0      	movs	r0, #224	@ 0xe0
 800223c:	f7fe fb1c 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002240:	200f      	movs	r0, #15
 8002242:	f7fe fb3d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002246:	202a      	movs	r0, #42	@ 0x2a
 8002248:	f7fe fb3a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 800224c:	2028      	movs	r0, #40	@ 0x28
 800224e:	f7fe fb37 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002252:	2008      	movs	r0, #8
 8002254:	f7fe fb34 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002258:	200e      	movs	r0, #14
 800225a:	f7fe fb31 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800225e:	2008      	movs	r0, #8
 8002260:	f7fe fb2e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002264:	2054      	movs	r0, #84	@ 0x54
 8002266:	f7fe fb2b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800226a:	20a9      	movs	r0, #169	@ 0xa9
 800226c:	f7fe fb28 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002270:	2043      	movs	r0, #67	@ 0x43
 8002272:	f7fe fb25 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8002276:	200a      	movs	r0, #10
 8002278:	f7fe fb22 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800227c:	200f      	movs	r0, #15
 800227e:	f7fe fb1f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002282:	2000      	movs	r0, #0
 8002284:	f7fe fb1c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002288:	2000      	movs	r0, #0
 800228a:	f7fe fb19 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800228e:	2000      	movs	r0, #0
 8002290:	f7fe fb16 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002294:	2000      	movs	r0, #0
 8002296:	f7fe fb13 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma
 800229a:	20e1      	movs	r0, #225	@ 0xe1
 800229c:	f7fe faec 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7fe fb0d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 80022a6:	2015      	movs	r0, #21
 80022a8:	f7fe fb0a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80022ac:	2017      	movs	r0, #23
 80022ae:	f7fe fb07 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 80022b2:	2007      	movs	r0, #7
 80022b4:	f7fe fb04 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80022b8:	2011      	movs	r0, #17
 80022ba:	f7fe fb01 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 80022be:	2006      	movs	r0, #6
 80022c0:	f7fe fafe 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 80022c4:	202b      	movs	r0, #43	@ 0x2b
 80022c6:	f7fe fafb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80022ca:	2056      	movs	r0, #86	@ 0x56
 80022cc:	f7fe faf8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80022d0:	203c      	movs	r0, #60	@ 0x3c
 80022d2:	f7fe faf5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80022d6:	2005      	movs	r0, #5
 80022d8:	f7fe faf2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80022dc:	2010      	movs	r0, #16
 80022de:	f7fe faef 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80022e2:	200f      	movs	r0, #15
 80022e4:	f7fe faec 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80022e8:	203f      	movs	r0, #63	@ 0x3f
 80022ea:	f7fe fae9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80022ee:	203f      	movs	r0, #63	@ 0x3f
 80022f0:	f7fe fae6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80022f4:	200f      	movs	r0, #15
 80022f6:	f7fe fae3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80022fa:	202b      	movs	r0, #43	@ 0x2b
 80022fc:	f7fe fabc 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002300:	2000      	movs	r0, #0
 8002302:	f7fe fadd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002306:	2000      	movs	r0, #0
 8002308:	f7fe fada 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800230c:	2001      	movs	r0, #1
 800230e:	f7fe fad7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8002312:	203f      	movs	r0, #63	@ 0x3f
 8002314:	f7fe fad4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002318:	202a      	movs	r0, #42	@ 0x2a
 800231a:	f7fe faad 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800231e:	2000      	movs	r0, #0
 8002320:	f7fe face 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002324:	2000      	movs	r0, #0
 8002326:	f7fe facb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800232a:	2000      	movs	r0, #0
 800232c:	f7fe fac8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002330:	20ef      	movs	r0, #239	@ 0xef
 8002332:	f7fe fac5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8002336:	2011      	movs	r0, #17
 8002338:	f7fe fa9e 	bl	8000878 <LCD_WR_REG>
		HAL_Delay(120);
 800233c:	2078      	movs	r0, #120	@ 0x78
 800233e:	f004 f9e9 	bl	8006714 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8002342:	2029      	movs	r0, #41	@ 0x29
 8002344:	f7fe fa98 	bl	8000878 <LCD_WR_REG>
 8002348:	f003 bcd8 	b.w	8005cfc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 800234c:	4b58      	ldr	r3, [pc, #352]	@ (80024b0 <LCD_Init+0x5e8>)
 800234e:	889b      	ldrh	r3, [r3, #4]
 8002350:	f646 0204 	movw	r2, #26628	@ 0x6804
 8002354:	4293      	cmp	r3, r2
 8002356:	f040 80ad 	bne.w	80024b4 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 800235a:	2011      	movs	r0, #17
 800235c:	f7fe fa8c 	bl	8000878 <LCD_WR_REG>
		HAL_Delay(20);
 8002360:	2014      	movs	r0, #20
 8002362:	f004 f9d7 	bl	8006714 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002366:	20d0      	movs	r0, #208	@ 0xd0
 8002368:	f7fe fa86 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800236c:	2007      	movs	r0, #7
 800236e:	f7fe faa7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002372:	2042      	movs	r0, #66	@ 0x42
 8002374:	f7fe faa4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002378:	201d      	movs	r0, #29
 800237a:	f7fe faa1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800237e:	20d1      	movs	r0, #209	@ 0xd1
 8002380:	f7fe fa7a 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002384:	2000      	movs	r0, #0
 8002386:	f7fe fa9b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800238a:	201a      	movs	r0, #26
 800238c:	f7fe fa98 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002390:	2009      	movs	r0, #9
 8002392:	f7fe fa95 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002396:	20d2      	movs	r0, #210	@ 0xd2
 8002398:	f7fe fa6e 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800239c:	2001      	movs	r0, #1
 800239e:	f7fe fa8f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 80023a2:	2022      	movs	r0, #34	@ 0x22
 80023a4:	f7fe fa8c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 80023a8:	20c0      	movs	r0, #192	@ 0xc0
 80023aa:	f7fe fa65 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 80023ae:	2010      	movs	r0, #16
 80023b0:	f7fe fa86 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 80023b4:	203b      	movs	r0, #59	@ 0x3b
 80023b6:	f7fe fa83 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7fe fa80 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80023c0:	2002      	movs	r0, #2
 80023c2:	f7fe fa7d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 80023c6:	2011      	movs	r0, #17
 80023c8:	f7fe fa7a 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 80023cc:	20c5      	movs	r0, #197	@ 0xc5
 80023ce:	f7fe fa53 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 80023d2:	2003      	movs	r0, #3
 80023d4:	f7fe fa74 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 80023d8:	20c8      	movs	r0, #200	@ 0xc8
 80023da:	f7fe fa4d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe fa6e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80023e4:	2025      	movs	r0, #37	@ 0x25
 80023e6:	f7fe fa6b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 80023ea:	2021      	movs	r0, #33	@ 0x21
 80023ec:	f7fe fa68 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80023f0:	2005      	movs	r0, #5
 80023f2:	f7fe fa65 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fe fa62 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80023fc:	200a      	movs	r0, #10
 80023fe:	f7fe fa5f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8002402:	2065      	movs	r0, #101	@ 0x65
 8002404:	f7fe fa5c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002408:	2025      	movs	r0, #37	@ 0x25
 800240a:	f7fe fa59 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 800240e:	2077      	movs	r0, #119	@ 0x77
 8002410:	f7fe fa56 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8002414:	2050      	movs	r0, #80	@ 0x50
 8002416:	f7fe fa53 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 800241a:	200f      	movs	r0, #15
 800241c:	f7fe fa50 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe fa4d 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8002426:	20f8      	movs	r0, #248	@ 0xf8
 8002428:	f7fe fa26 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800242c:	2001      	movs	r0, #1
 800242e:	f7fe fa47 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8002432:	20fe      	movs	r0, #254	@ 0xfe
 8002434:	f7fe fa20 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fa41 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 800243e:	2002      	movs	r0, #2
 8002440:	f7fe fa3e 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8002444:	2020      	movs	r0, #32
 8002446:	f7fe fa17 	bl	8000878 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 800244a:	2036      	movs	r0, #54	@ 0x36
 800244c:	f7fe fa14 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002450:	2008      	movs	r0, #8
 8002452:	f7fe fa35 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8002456:	203a      	movs	r0, #58	@ 0x3a
 8002458:	f7fe fa0e 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 800245c:	2055      	movs	r0, #85	@ 0x55
 800245e:	f7fe fa2f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002462:	202b      	movs	r0, #43	@ 0x2b
 8002464:	f7fe fa08 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002468:	2000      	movs	r0, #0
 800246a:	f7fe fa29 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800246e:	2000      	movs	r0, #0
 8002470:	f7fe fa26 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002474:	2001      	movs	r0, #1
 8002476:	f7fe fa23 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800247a:	203f      	movs	r0, #63	@ 0x3f
 800247c:	f7fe fa20 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002480:	202a      	movs	r0, #42	@ 0x2a
 8002482:	f7fe f9f9 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002486:	2000      	movs	r0, #0
 8002488:	f7fe fa1a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800248c:	2000      	movs	r0, #0
 800248e:	f7fe fa17 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002492:	2001      	movs	r0, #1
 8002494:	f7fe fa14 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002498:	20df      	movs	r0, #223	@ 0xdf
 800249a:	f7fe fa11 	bl	80008c0 <LCD_WR_DATAX>
		HAL_Delay(120);
 800249e:	2078      	movs	r0, #120	@ 0x78
 80024a0:	f004 f938 	bl	8006714 <HAL_Delay>
		LCD_WR_REG(0X29);
 80024a4:	2029      	movs	r0, #41	@ 0x29
 80024a6:	f7fe f9e7 	bl	8000878 <LCD_WR_REG>
 80024aa:	f003 bc27 	b.w	8005cfc <LCD_Init+0x3e34>
 80024ae:	bf00      	nop
 80024b0:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x5310) {
 80024b4:	4b03      	ldr	r3, [pc, #12]	@ (80024c4 <LCD_Init+0x5fc>)
 80024b6:	889b      	ldrh	r3, [r3, #4]
 80024b8:	f245 3210 	movw	r2, #21264	@ 0x5310
 80024bc:	4293      	cmp	r3, r2
 80024be:	f040 877c 	bne.w	80033ba <LCD_Init+0x14f2>
 80024c2:	e001      	b.n	80024c8 <LCD_Init+0x600>
 80024c4:	20000080 	.word	0x20000080
		LCD_WR_REG(0xED);
 80024c8:	20ed      	movs	r0, #237	@ 0xed
 80024ca:	f7fe f9d5 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f7fe f9f6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 80024d4:	20fe      	movs	r0, #254	@ 0xfe
 80024d6:	f7fe f9f3 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 80024da:	20ee      	movs	r0, #238	@ 0xee
 80024dc:	f7fe f9cc 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 80024e0:	20de      	movs	r0, #222	@ 0xde
 80024e2:	f7fe f9ed 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80024e6:	2021      	movs	r0, #33	@ 0x21
 80024e8:	f7fe f9ea 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80024ec:	20f1      	movs	r0, #241	@ 0xf1
 80024ee:	f7fe f9c3 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7fe f9e4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80024f8:	20df      	movs	r0, #223	@ 0xdf
 80024fa:	f7fe f9bd 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80024fe:	2010      	movs	r0, #16
 8002500:	f7fe f9de 	bl	80008c0 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8002504:	20c4      	movs	r0, #196	@ 0xc4
 8002506:	f7fe f9b7 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 800250a:	208f      	movs	r0, #143	@ 0x8f
 800250c:	f7fe f9d8 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002510:	20c6      	movs	r0, #198	@ 0xc6
 8002512:	f7fe f9b1 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe f9d2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800251c:	20e2      	movs	r0, #226	@ 0xe2
 800251e:	f7fe f9cf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002522:	20e2      	movs	r0, #226	@ 0xe2
 8002524:	f7fe f9cc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002528:	20e2      	movs	r0, #226	@ 0xe2
 800252a:	f7fe f9c9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 800252e:	20bf      	movs	r0, #191	@ 0xbf
 8002530:	f7fe f9a2 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002534:	20aa      	movs	r0, #170	@ 0xaa
 8002536:	f7fe f9c3 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 800253a:	20b0      	movs	r0, #176	@ 0xb0
 800253c:	f7fe f99c 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002540:	200d      	movs	r0, #13
 8002542:	f7fe f9bd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe f9ba 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 800254c:	200d      	movs	r0, #13
 800254e:	f7fe f9b7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fe f9b4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002558:	2011      	movs	r0, #17
 800255a:	f7fe f9b1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800255e:	2000      	movs	r0, #0
 8002560:	f7fe f9ae 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002564:	2019      	movs	r0, #25
 8002566:	f7fe f9ab 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe f9a8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002570:	2021      	movs	r0, #33	@ 0x21
 8002572:	f7fe f9a5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002576:	2000      	movs	r0, #0
 8002578:	f7fe f9a2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800257c:	202d      	movs	r0, #45	@ 0x2d
 800257e:	f7fe f99f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe f99c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002588:	203d      	movs	r0, #61	@ 0x3d
 800258a:	f7fe f999 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe f996 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002594:	205d      	movs	r0, #93	@ 0x5d
 8002596:	f7fe f993 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe f990 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80025a0:	205d      	movs	r0, #93	@ 0x5d
 80025a2:	f7fe f98d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe f98a 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 80025ac:	20b1      	movs	r0, #177	@ 0xb1
 80025ae:	f7fe f963 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 80025b2:	2080      	movs	r0, #128	@ 0x80
 80025b4:	f7fe f984 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7fe f981 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80025be:	208b      	movs	r0, #139	@ 0x8b
 80025c0:	f7fe f97e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7fe f97b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80025ca:	2096      	movs	r0, #150	@ 0x96
 80025cc:	f7fe f978 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7fe f975 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 80025d6:	20b2      	movs	r0, #178	@ 0xb2
 80025d8:	f7fe f94e 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025dc:	2000      	movs	r0, #0
 80025de:	f7fe f96f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe f96c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80025e8:	2002      	movs	r0, #2
 80025ea:	f7fe f969 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe f966 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f7fe f963 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe f960 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002600:	20b3      	movs	r0, #179	@ 0xb3
 8002602:	f7fe f939 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe f95a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe f957 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe f954 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002618:	2000      	movs	r0, #0
 800261a:	f7fe f951 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe f94e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe f94b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe f948 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe f945 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002636:	2000      	movs	r0, #0
 8002638:	f7fe f942 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe f93f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002642:	2000      	movs	r0, #0
 8002644:	f7fe f93c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe f939 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264e:	2000      	movs	r0, #0
 8002650:	f7fe f936 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002654:	2000      	movs	r0, #0
 8002656:	f7fe f933 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800265a:	2000      	movs	r0, #0
 800265c:	f7fe f930 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe f92d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002666:	2000      	movs	r0, #0
 8002668:	f7fe f92a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe f927 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe f924 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe f921 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800267e:	2000      	movs	r0, #0
 8002680:	f7fe f91e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002684:	2000      	movs	r0, #0
 8002686:	f7fe f91b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800268a:	2000      	movs	r0, #0
 800268c:	f7fe f918 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe f915 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002696:	20b4      	movs	r0, #180	@ 0xb4
 8002698:	f7fe f8ee 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800269c:	208b      	movs	r0, #139	@ 0x8b
 800269e:	f7fe f90f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7fe f90c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80026a8:	2096      	movs	r0, #150	@ 0x96
 80026aa:	f7fe f909 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7fe f906 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 80026b4:	20a1      	movs	r0, #161	@ 0xa1
 80026b6:	f7fe f903 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7fe f900 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80026c0:	20b5      	movs	r0, #181	@ 0xb5
 80026c2:	f7fe f8d9 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80026c6:	2002      	movs	r0, #2
 80026c8:	f7fe f8fa 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe f8f7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80026d2:	2003      	movs	r0, #3
 80026d4:	f7fe f8f4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe f8f1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80026de:	2004      	movs	r0, #4
 80026e0:	f7fe f8ee 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7fe f8eb 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80026ea:	20b6      	movs	r0, #182	@ 0xb6
 80026ec:	f7fe f8c4 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7fe f8e5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe f8e2 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80026fc:	20b7      	movs	r0, #183	@ 0xb7
 80026fe:	f7fe f8bb 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe f8dc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002708:	2000      	movs	r0, #0
 800270a:	f7fe f8d9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800270e:	203f      	movs	r0, #63	@ 0x3f
 8002710:	f7fe f8d6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe f8d3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 800271a:	205e      	movs	r0, #94	@ 0x5e
 800271c:	f7fe f8d0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe f8cd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002726:	2064      	movs	r0, #100	@ 0x64
 8002728:	f7fe f8ca 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe f8c7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8002732:	208c      	movs	r0, #140	@ 0x8c
 8002734:	f7fe f8c4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe f8c1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 800273e:	20ac      	movs	r0, #172	@ 0xac
 8002740:	f7fe f8be 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002744:	2000      	movs	r0, #0
 8002746:	f7fe f8bb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800274a:	20dc      	movs	r0, #220	@ 0xdc
 800274c:	f7fe f8b8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002750:	2000      	movs	r0, #0
 8002752:	f7fe f8b5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002756:	2070      	movs	r0, #112	@ 0x70
 8002758:	f7fe f8b2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe f8af 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002762:	2090      	movs	r0, #144	@ 0x90
 8002764:	f7fe f8ac 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe f8a9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800276e:	20eb      	movs	r0, #235	@ 0xeb
 8002770:	f7fe f8a6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe f8a3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800277a:	20dc      	movs	r0, #220	@ 0xdc
 800277c:	f7fe f8a0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe f89d 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002786:	20b8      	movs	r0, #184	@ 0xb8
 8002788:	f7fe f876 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800278c:	2000      	movs	r0, #0
 800278e:	f7fe f897 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe f894 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe f891 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7fe f88e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe f88b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7fe f888 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe f885 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe f882 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80027bc:	20ba      	movs	r0, #186	@ 0xba
 80027be:	f7fe f85b 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80027c2:	2024      	movs	r0, #36	@ 0x24
 80027c4:	f7fe f87c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe f879 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe f876 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7fe f873 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 80027da:	20c1      	movs	r0, #193	@ 0xc1
 80027dc:	f7fe f84c 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80027e0:	2020      	movs	r0, #32
 80027e2:	f7fe f86d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7fe f86a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80027ec:	2054      	movs	r0, #84	@ 0x54
 80027ee:	f7fe f867 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe f864 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80027f8:	20ff      	movs	r0, #255	@ 0xff
 80027fa:	f7fe f861 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe f85e 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002804:	20c2      	movs	r0, #194	@ 0xc2
 8002806:	f7fe f837 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800280a:	200a      	movs	r0, #10
 800280c:	f7fe f858 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002810:	2000      	movs	r0, #0
 8002812:	f7fe f855 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002816:	2004      	movs	r0, #4
 8002818:	f7fe f852 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281c:	2000      	movs	r0, #0
 800281e:	f7fe f84f 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002822:	20c3      	movs	r0, #195	@ 0xc3
 8002824:	f7fe f828 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002828:	203c      	movs	r0, #60	@ 0x3c
 800282a:	f7fe f849 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282e:	2000      	movs	r0, #0
 8002830:	f7fe f846 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002834:	203a      	movs	r0, #58	@ 0x3a
 8002836:	f7fe f843 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283a:	2000      	movs	r0, #0
 800283c:	f7fe f840 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002840:	2039      	movs	r0, #57	@ 0x39
 8002842:	f7fe f83d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe f83a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 800284c:	2037      	movs	r0, #55	@ 0x37
 800284e:	f7fe f837 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002852:	2000      	movs	r0, #0
 8002854:	f7fe f834 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002858:	203c      	movs	r0, #60	@ 0x3c
 800285a:	f7fe f831 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285e:	2000      	movs	r0, #0
 8002860:	f7fe f82e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002864:	2036      	movs	r0, #54	@ 0x36
 8002866:	f7fe f82b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286a:	2000      	movs	r0, #0
 800286c:	f7fe f828 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002870:	2032      	movs	r0, #50	@ 0x32
 8002872:	f7fe f825 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe f822 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800287c:	202f      	movs	r0, #47	@ 0x2f
 800287e:	f7fe f81f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002882:	2000      	movs	r0, #0
 8002884:	f7fe f81c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002888:	202c      	movs	r0, #44	@ 0x2c
 800288a:	f7fe f819 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe f816 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002894:	2029      	movs	r0, #41	@ 0x29
 8002896:	f7fe f813 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289a:	2000      	movs	r0, #0
 800289c:	f7fe f810 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80028a0:	2026      	movs	r0, #38	@ 0x26
 80028a2:	f7fe f80d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7fe f80a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80028ac:	2024      	movs	r0, #36	@ 0x24
 80028ae:	f7fe f807 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe f804 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80028b8:	2024      	movs	r0, #36	@ 0x24
 80028ba:	f7fe f801 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fd fffe 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80028c4:	2023      	movs	r0, #35	@ 0x23
 80028c6:	f7fd fffb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fd fff8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80028d0:	203c      	movs	r0, #60	@ 0x3c
 80028d2:	f7fd fff5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fd fff2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80028dc:	2036      	movs	r0, #54	@ 0x36
 80028de:	f7fd ffef 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7fd ffec 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80028e8:	2032      	movs	r0, #50	@ 0x32
 80028ea:	f7fd ffe9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fd ffe6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80028f4:	202f      	movs	r0, #47	@ 0x2f
 80028f6:	f7fd ffe3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fd ffe0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002900:	202c      	movs	r0, #44	@ 0x2c
 8002902:	f7fd ffdd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fd ffda 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800290c:	2029      	movs	r0, #41	@ 0x29
 800290e:	f7fd ffd7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fd ffd4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002918:	2026      	movs	r0, #38	@ 0x26
 800291a:	f7fd ffd1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fd ffce 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002924:	2024      	movs	r0, #36	@ 0x24
 8002926:	f7fd ffcb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fd ffc8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002930:	2024      	movs	r0, #36	@ 0x24
 8002932:	f7fd ffc5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002936:	2000      	movs	r0, #0
 8002938:	f7fd ffc2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800293c:	2023      	movs	r0, #35	@ 0x23
 800293e:	f7fd ffbf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002942:	2000      	movs	r0, #0
 8002944:	f7fd ffbc 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002948:	20c4      	movs	r0, #196	@ 0xc4
 800294a:	f7fd ff95 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 800294e:	2062      	movs	r0, #98	@ 0x62
 8002950:	f7fd ffb6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002954:	2000      	movs	r0, #0
 8002956:	f7fd ffb3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800295a:	2005      	movs	r0, #5
 800295c:	f7fd ffb0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002960:	2000      	movs	r0, #0
 8002962:	f7fd ffad 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002966:	2084      	movs	r0, #132	@ 0x84
 8002968:	f7fd ffaa 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296c:	2000      	movs	r0, #0
 800296e:	f7fd ffa7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002972:	20f0      	movs	r0, #240	@ 0xf0
 8002974:	f7fd ffa4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002978:	2000      	movs	r0, #0
 800297a:	f7fd ffa1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800297e:	2018      	movs	r0, #24
 8002980:	f7fd ff9e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002984:	2000      	movs	r0, #0
 8002986:	f7fd ff9b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 800298a:	20a4      	movs	r0, #164	@ 0xa4
 800298c:	f7fd ff98 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002990:	2000      	movs	r0, #0
 8002992:	f7fd ff95 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002996:	2018      	movs	r0, #24
 8002998:	f7fd ff92 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fd ff8f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80029a2:	2050      	movs	r0, #80	@ 0x50
 80029a4:	f7fd ff8c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fd ff89 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 80029ae:	200c      	movs	r0, #12
 80029b0:	f7fd ff86 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fd ff83 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80029ba:	2017      	movs	r0, #23
 80029bc:	f7fd ff80 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fd ff7d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 80029c6:	2095      	movs	r0, #149	@ 0x95
 80029c8:	f7fd ff7a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fd ff77 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80029d2:	20f3      	movs	r0, #243	@ 0xf3
 80029d4:	f7fd ff74 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fd ff71 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 80029de:	20e6      	movs	r0, #230	@ 0xe6
 80029e0:	f7fd ff6e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fd ff6b 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 80029ea:	20c5      	movs	r0, #197	@ 0xc5
 80029ec:	f7fd ff44 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80029f0:	2032      	movs	r0, #50	@ 0x32
 80029f2:	f7fd ff65 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fd ff62 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80029fc:	2044      	movs	r0, #68	@ 0x44
 80029fe:	f7fd ff5f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fd ff5c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002a08:	2065      	movs	r0, #101	@ 0x65
 8002a0a:	f7fd ff59 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7fd ff56 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002a14:	2076      	movs	r0, #118	@ 0x76
 8002a16:	f7fd ff53 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f7fd ff50 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002a20:	2088      	movs	r0, #136	@ 0x88
 8002a22:	f7fd ff4d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7fd ff4a 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002a2c:	20c6      	movs	r0, #198	@ 0xc6
 8002a2e:	f7fd ff23 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002a32:	2020      	movs	r0, #32
 8002a34:	f7fd ff44 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fd ff41 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002a3e:	2017      	movs	r0, #23
 8002a40:	f7fd ff3e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fd ff3b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f7fd ff38 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fd ff35 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002a56:	20c7      	movs	r0, #199	@ 0xc7
 8002a58:	f7fd ff0e 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fd ff2f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fd ff2c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fd ff29 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fd ff26 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002a74:	20c8      	movs	r0, #200	@ 0xc8
 8002a76:	f7fd feff 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fd ff20 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7fd ff1d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fd ff1a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7fd ff17 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002a92:	20c9      	movs	r0, #201	@ 0xc9
 8002a94:	f7fd fef0 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7fd ff11 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fd ff0e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7fd ff0b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fd ff08 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7fd ff05 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fd ff02 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7fd feff 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7fd fefc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fd fef9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fd fef6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fd fef3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fd fef0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7fd feed 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fd feea 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fd fee7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7fd fee4 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002af8:	20e0      	movs	r0, #224	@ 0xe0
 8002afa:	f7fd febd 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002afe:	2016      	movs	r0, #22
 8002b00:	f7fd fede 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fd fedb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002b0a:	201c      	movs	r0, #28
 8002b0c:	f7fd fed8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fd fed5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002b16:	2021      	movs	r0, #33	@ 0x21
 8002b18:	f7fd fed2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fd fecf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b22:	2036      	movs	r0, #54	@ 0x36
 8002b24:	f7fd fecc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7fd fec9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002b2e:	2046      	movs	r0, #70	@ 0x46
 8002b30:	f7fd fec6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7fd fec3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002b3a:	2052      	movs	r0, #82	@ 0x52
 8002b3c:	f7fd fec0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7fd febd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002b46:	2064      	movs	r0, #100	@ 0x64
 8002b48:	f7fd feba 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7fd feb7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002b52:	207a      	movs	r0, #122	@ 0x7a
 8002b54:	f7fd feb4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7fd feb1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002b5e:	208b      	movs	r0, #139	@ 0x8b
 8002b60:	f7fd feae 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fd feab 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002b6a:	2099      	movs	r0, #153	@ 0x99
 8002b6c:	f7fd fea8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7fd fea5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002b76:	20a8      	movs	r0, #168	@ 0xa8
 8002b78:	f7fd fea2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7fd fe9f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002b82:	20b9      	movs	r0, #185	@ 0xb9
 8002b84:	f7fd fe9c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7fd fe99 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002b8e:	20c4      	movs	r0, #196	@ 0xc4
 8002b90:	f7fd fe96 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fd fe93 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002b9a:	20ca      	movs	r0, #202	@ 0xca
 8002b9c:	f7fd fe90 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7fd fe8d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002ba6:	20d2      	movs	r0, #210	@ 0xd2
 8002ba8:	f7fd fe8a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7fd fe87 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002bb2:	20d9      	movs	r0, #217	@ 0xd9
 8002bb4:	f7fd fe84 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7fd fe81 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002bbe:	20e0      	movs	r0, #224	@ 0xe0
 8002bc0:	f7fd fe7e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7fd fe7b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002bca:	20f3      	movs	r0, #243	@ 0xf3
 8002bcc:	f7fd fe78 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7fd fe75 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002bd6:	20e1      	movs	r0, #225	@ 0xe1
 8002bd8:	f7fd fe4e 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002bdc:	2016      	movs	r0, #22
 8002bde:	f7fd fe6f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7fd fe6c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002be8:	201c      	movs	r0, #28
 8002bea:	f7fd fe69 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7fd fe66 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002bf4:	2022      	movs	r0, #34	@ 0x22
 8002bf6:	f7fd fe63 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fd fe60 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002c00:	2036      	movs	r0, #54	@ 0x36
 8002c02:	f7fd fe5d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7fd fe5a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002c0c:	2045      	movs	r0, #69	@ 0x45
 8002c0e:	f7fd fe57 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7fd fe54 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002c18:	2052      	movs	r0, #82	@ 0x52
 8002c1a:	f7fd fe51 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f7fd fe4e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002c24:	2064      	movs	r0, #100	@ 0x64
 8002c26:	f7fd fe4b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7fd fe48 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002c30:	207a      	movs	r0, #122	@ 0x7a
 8002c32:	f7fd fe45 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fd fe42 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002c3c:	208b      	movs	r0, #139	@ 0x8b
 8002c3e:	f7fd fe3f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7fd fe3c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002c48:	2099      	movs	r0, #153	@ 0x99
 8002c4a:	f7fd fe39 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7fd fe36 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002c54:	20a8      	movs	r0, #168	@ 0xa8
 8002c56:	f7fd fe33 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7fd fe30 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002c60:	20b9      	movs	r0, #185	@ 0xb9
 8002c62:	f7fd fe2d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fd fe2a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c6c:	20c4      	movs	r0, #196	@ 0xc4
 8002c6e:	f7fd fe27 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7fd fe24 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002c78:	20ca      	movs	r0, #202	@ 0xca
 8002c7a:	f7fd fe21 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7fd fe1e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002c84:	20d2      	movs	r0, #210	@ 0xd2
 8002c86:	f7fd fe1b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fd fe18 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002c90:	20d8      	movs	r0, #216	@ 0xd8
 8002c92:	f7fd fe15 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f7fd fe12 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002c9c:	20e0      	movs	r0, #224	@ 0xe0
 8002c9e:	f7fd fe0f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7fd fe0c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002ca8:	20f3      	movs	r0, #243	@ 0xf3
 8002caa:	f7fd fe09 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fd fe06 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002cb4:	20e2      	movs	r0, #226	@ 0xe2
 8002cb6:	f7fd fddf 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002cba:	2005      	movs	r0, #5
 8002cbc:	f7fd fe00 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fd fdfd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002cc6:	200b      	movs	r0, #11
 8002cc8:	f7fd fdfa 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7fd fdf7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002cd2:	201b      	movs	r0, #27
 8002cd4:	f7fd fdf4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7fd fdf1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002cde:	2034      	movs	r0, #52	@ 0x34
 8002ce0:	f7fd fdee 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7fd fdeb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002cea:	2044      	movs	r0, #68	@ 0x44
 8002cec:	f7fd fde8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fd fde5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002cf6:	204f      	movs	r0, #79	@ 0x4f
 8002cf8:	f7fd fde2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7fd fddf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002d02:	2061      	movs	r0, #97	@ 0x61
 8002d04:	f7fd fddc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7fd fdd9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002d0e:	2079      	movs	r0, #121	@ 0x79
 8002d10:	f7fd fdd6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7fd fdd3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002d1a:	2088      	movs	r0, #136	@ 0x88
 8002d1c:	f7fd fdd0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7fd fdcd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002d26:	2097      	movs	r0, #151	@ 0x97
 8002d28:	f7fd fdca 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fd fdc7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002d32:	20a6      	movs	r0, #166	@ 0xa6
 8002d34:	f7fd fdc4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7fd fdc1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002d3e:	20b7      	movs	r0, #183	@ 0xb7
 8002d40:	f7fd fdbe 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fd fdbb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002d4a:	20c2      	movs	r0, #194	@ 0xc2
 8002d4c:	f7fd fdb8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fd fdb5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002d56:	20c7      	movs	r0, #199	@ 0xc7
 8002d58:	f7fd fdb2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7fd fdaf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002d62:	20d1      	movs	r0, #209	@ 0xd1
 8002d64:	f7fd fdac 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fd fda9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002d6e:	20d6      	movs	r0, #214	@ 0xd6
 8002d70:	f7fd fda6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7fd fda3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002d7a:	20dd      	movs	r0, #221	@ 0xdd
 8002d7c:	f7fd fda0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fd fd9d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d86:	20f3      	movs	r0, #243	@ 0xf3
 8002d88:	f7fd fd9a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fd fd97 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002d92:	20e3      	movs	r0, #227	@ 0xe3
 8002d94:	f7fd fd70 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002d98:	2005      	movs	r0, #5
 8002d9a:	f7fd fd91 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f7fd fd8e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002da4:	200a      	movs	r0, #10
 8002da6:	f7fd fd8b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fd fd88 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002db0:	201c      	movs	r0, #28
 8002db2:	f7fd fd85 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7fd fd82 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002dbc:	2033      	movs	r0, #51	@ 0x33
 8002dbe:	f7fd fd7f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7fd fd7c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002dc8:	2044      	movs	r0, #68	@ 0x44
 8002dca:	f7fd fd79 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7fd fd76 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002dd4:	2050      	movs	r0, #80	@ 0x50
 8002dd6:	f7fd fd73 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fd fd70 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002de0:	2062      	movs	r0, #98	@ 0x62
 8002de2:	f7fd fd6d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7fd fd6a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002dec:	2078      	movs	r0, #120	@ 0x78
 8002dee:	f7fd fd67 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f7fd fd64 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002df8:	2088      	movs	r0, #136	@ 0x88
 8002dfa:	f7fd fd61 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7fd fd5e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002e04:	2097      	movs	r0, #151	@ 0x97
 8002e06:	f7fd fd5b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f7fd fd58 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002e10:	20a6      	movs	r0, #166	@ 0xa6
 8002e12:	f7fd fd55 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f7fd fd52 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002e1c:	20b7      	movs	r0, #183	@ 0xb7
 8002e1e:	f7fd fd4f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7fd fd4c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002e28:	20c2      	movs	r0, #194	@ 0xc2
 8002e2a:	f7fd fd49 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7fd fd46 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002e34:	20c7      	movs	r0, #199	@ 0xc7
 8002e36:	f7fd fd43 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fd fd40 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002e40:	20d1      	movs	r0, #209	@ 0xd1
 8002e42:	f7fd fd3d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7fd fd3a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002e4c:	20d5      	movs	r0, #213	@ 0xd5
 8002e4e:	f7fd fd37 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e52:	2000      	movs	r0, #0
 8002e54:	f7fd fd34 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002e58:	20dd      	movs	r0, #221	@ 0xdd
 8002e5a:	f7fd fd31 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7fd fd2e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e64:	20f3      	movs	r0, #243	@ 0xf3
 8002e66:	f7fd fd2b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7fd fd28 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002e70:	20e4      	movs	r0, #228	@ 0xe4
 8002e72:	f7fd fd01 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002e76:	2001      	movs	r0, #1
 8002e78:	f7fd fd22 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7fd fd1f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002e82:	2001      	movs	r0, #1
 8002e84:	f7fd fd1c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7fd fd19 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002e8e:	2002      	movs	r0, #2
 8002e90:	f7fd fd16 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7fd fd13 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002e9a:	202a      	movs	r0, #42	@ 0x2a
 8002e9c:	f7fd fd10 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7fd fd0d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002ea6:	203c      	movs	r0, #60	@ 0x3c
 8002ea8:	f7fd fd0a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fd fd07 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002eb2:	204b      	movs	r0, #75	@ 0x4b
 8002eb4:	f7fd fd04 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fd fd01 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002ebe:	205d      	movs	r0, #93	@ 0x5d
 8002ec0:	f7fd fcfe 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7fd fcfb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002eca:	2074      	movs	r0, #116	@ 0x74
 8002ecc:	f7fd fcf8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7fd fcf5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002ed6:	2084      	movs	r0, #132	@ 0x84
 8002ed8:	f7fd fcf2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7fd fcef 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002ee2:	2093      	movs	r0, #147	@ 0x93
 8002ee4:	f7fd fcec 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7fd fce9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002eee:	20a2      	movs	r0, #162	@ 0xa2
 8002ef0:	f7fd fce6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fd fce3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002efa:	20b3      	movs	r0, #179	@ 0xb3
 8002efc:	f7fd fce0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fd fcdd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002f06:	20be      	movs	r0, #190	@ 0xbe
 8002f08:	f7fd fcda 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7fd fcd7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002f12:	20c4      	movs	r0, #196	@ 0xc4
 8002f14:	f7fd fcd4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f7fd fcd1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002f1e:	20cd      	movs	r0, #205	@ 0xcd
 8002f20:	f7fd fcce 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fd fccb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002f2a:	20d3      	movs	r0, #211	@ 0xd3
 8002f2c:	f7fd fcc8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7fd fcc5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002f36:	20dd      	movs	r0, #221	@ 0xdd
 8002f38:	f7fd fcc2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7fd fcbf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f42:	20f3      	movs	r0, #243	@ 0xf3
 8002f44:	f7fd fcbc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7fd fcb9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002f4e:	20e5      	movs	r0, #229	@ 0xe5
 8002f50:	f7fd fc92 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7fd fcb3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7fd fcb0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7fd fcad 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7fd fcaa 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002f6c:	2002      	movs	r0, #2
 8002f6e:	f7fd fca7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fd fca4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002f78:	2029      	movs	r0, #41	@ 0x29
 8002f7a:	f7fd fca1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7fd fc9e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002f84:	203c      	movs	r0, #60	@ 0x3c
 8002f86:	f7fd fc9b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7fd fc98 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002f90:	204b      	movs	r0, #75	@ 0x4b
 8002f92:	f7fd fc95 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fd fc92 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002f9c:	205d      	movs	r0, #93	@ 0x5d
 8002f9e:	f7fd fc8f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7fd fc8c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002fa8:	2074      	movs	r0, #116	@ 0x74
 8002faa:	f7fd fc89 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f7fd fc86 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002fb4:	2084      	movs	r0, #132	@ 0x84
 8002fb6:	f7fd fc83 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7fd fc80 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002fc0:	2093      	movs	r0, #147	@ 0x93
 8002fc2:	f7fd fc7d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fd fc7a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002fcc:	20a2      	movs	r0, #162	@ 0xa2
 8002fce:	f7fd fc77 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7fd fc74 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002fd8:	20b3      	movs	r0, #179	@ 0xb3
 8002fda:	f7fd fc71 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7fd fc6e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002fe4:	20be      	movs	r0, #190	@ 0xbe
 8002fe6:	f7fd fc6b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f7fd fc68 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002ff0:	20c4      	movs	r0, #196	@ 0xc4
 8002ff2:	f7fd fc65 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7fd fc62 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002ffc:	20cd      	movs	r0, #205	@ 0xcd
 8002ffe:	f7fd fc5f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003002:	2000      	movs	r0, #0
 8003004:	f7fd fc5c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003008:	20d3      	movs	r0, #211	@ 0xd3
 800300a:	f7fd fc59 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300e:	2000      	movs	r0, #0
 8003010:	f7fd fc56 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8003014:	20dc      	movs	r0, #220	@ 0xdc
 8003016:	f7fd fc53 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800301a:	2000      	movs	r0, #0
 800301c:	f7fd fc50 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003020:	20f3      	movs	r0, #243	@ 0xf3
 8003022:	f7fd fc4d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003026:	2000      	movs	r0, #0
 8003028:	f7fd fc4a 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 800302c:	20e6      	movs	r0, #230	@ 0xe6
 800302e:	f7fd fc23 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8003032:	2011      	movs	r0, #17
 8003034:	f7fd fc44 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f7fd fc41 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800303e:	2034      	movs	r0, #52	@ 0x34
 8003040:	f7fd fc3e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003044:	2000      	movs	r0, #0
 8003046:	f7fd fc3b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800304a:	2056      	movs	r0, #86	@ 0x56
 800304c:	f7fd fc38 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003050:	2000      	movs	r0, #0
 8003052:	f7fd fc35 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003056:	2076      	movs	r0, #118	@ 0x76
 8003058:	f7fd fc32 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305c:	2000      	movs	r0, #0
 800305e:	f7fd fc2f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003062:	2077      	movs	r0, #119	@ 0x77
 8003064:	f7fd fc2c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003068:	2000      	movs	r0, #0
 800306a:	f7fd fc29 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800306e:	2066      	movs	r0, #102	@ 0x66
 8003070:	f7fd fc26 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003074:	2000      	movs	r0, #0
 8003076:	f7fd fc23 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800307a:	2088      	movs	r0, #136	@ 0x88
 800307c:	f7fd fc20 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003080:	2000      	movs	r0, #0
 8003082:	f7fd fc1d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003086:	2099      	movs	r0, #153	@ 0x99
 8003088:	f7fd fc1a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308c:	2000      	movs	r0, #0
 800308e:	f7fd fc17 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003092:	20bb      	movs	r0, #187	@ 0xbb
 8003094:	f7fd fc14 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003098:	2000      	movs	r0, #0
 800309a:	f7fd fc11 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800309e:	2099      	movs	r0, #153	@ 0x99
 80030a0:	f7fd fc0e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7fd fc0b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80030aa:	2066      	movs	r0, #102	@ 0x66
 80030ac:	f7fd fc08 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b0:	2000      	movs	r0, #0
 80030b2:	f7fd fc05 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80030b6:	2055      	movs	r0, #85	@ 0x55
 80030b8:	f7fd fc02 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030bc:	2000      	movs	r0, #0
 80030be:	f7fd fbff 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80030c2:	2055      	movs	r0, #85	@ 0x55
 80030c4:	f7fd fbfc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c8:	2000      	movs	r0, #0
 80030ca:	f7fd fbf9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80030ce:	2045      	movs	r0, #69	@ 0x45
 80030d0:	f7fd fbf6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d4:	2000      	movs	r0, #0
 80030d6:	f7fd fbf3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80030da:	2043      	movs	r0, #67	@ 0x43
 80030dc:	f7fd fbf0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e0:	2000      	movs	r0, #0
 80030e2:	f7fd fbed 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80030e6:	2044      	movs	r0, #68	@ 0x44
 80030e8:	f7fd fbea 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7fd fbe7 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80030f2:	20e7      	movs	r0, #231	@ 0xe7
 80030f4:	f7fd fbc0 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80030f8:	2032      	movs	r0, #50	@ 0x32
 80030fa:	f7fd fbe1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030fe:	2000      	movs	r0, #0
 8003100:	f7fd fbde 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003104:	2055      	movs	r0, #85	@ 0x55
 8003106:	f7fd fbdb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310a:	2000      	movs	r0, #0
 800310c:	f7fd fbd8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003110:	2076      	movs	r0, #118	@ 0x76
 8003112:	f7fd fbd5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003116:	2000      	movs	r0, #0
 8003118:	f7fd fbd2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800311c:	2066      	movs	r0, #102	@ 0x66
 800311e:	f7fd fbcf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003122:	2000      	movs	r0, #0
 8003124:	f7fd fbcc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003128:	2067      	movs	r0, #103	@ 0x67
 800312a:	f7fd fbc9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800312e:	2000      	movs	r0, #0
 8003130:	f7fd fbc6 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003134:	2067      	movs	r0, #103	@ 0x67
 8003136:	f7fd fbc3 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800313a:	2000      	movs	r0, #0
 800313c:	f7fd fbc0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003140:	2087      	movs	r0, #135	@ 0x87
 8003142:	f7fd fbbd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003146:	2000      	movs	r0, #0
 8003148:	f7fd fbba 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800314c:	2099      	movs	r0, #153	@ 0x99
 800314e:	f7fd fbb7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003152:	2000      	movs	r0, #0
 8003154:	f7fd fbb4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003158:	20bb      	movs	r0, #187	@ 0xbb
 800315a:	f7fd fbb1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315e:	2000      	movs	r0, #0
 8003160:	f7fd fbae 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003164:	2099      	movs	r0, #153	@ 0x99
 8003166:	f7fd fbab 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800316a:	2000      	movs	r0, #0
 800316c:	f7fd fba8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003170:	2077      	movs	r0, #119	@ 0x77
 8003172:	f7fd fba5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003176:	2000      	movs	r0, #0
 8003178:	f7fd fba2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800317c:	2044      	movs	r0, #68	@ 0x44
 800317e:	f7fd fb9f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003182:	2000      	movs	r0, #0
 8003184:	f7fd fb9c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003188:	2056      	movs	r0, #86	@ 0x56
 800318a:	f7fd fb99 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318e:	2000      	movs	r0, #0
 8003190:	f7fd fb96 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003194:	2023      	movs	r0, #35	@ 0x23
 8003196:	f7fd fb93 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800319a:	2000      	movs	r0, #0
 800319c:	f7fd fb90 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80031a0:	2033      	movs	r0, #51	@ 0x33
 80031a2:	f7fd fb8d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a6:	2000      	movs	r0, #0
 80031a8:	f7fd fb8a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80031ac:	2045      	movs	r0, #69	@ 0x45
 80031ae:	f7fd fb87 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b2:	2000      	movs	r0, #0
 80031b4:	f7fd fb84 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 80031b8:	20e8      	movs	r0, #232	@ 0xe8
 80031ba:	f7fd fb5d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80031be:	2000      	movs	r0, #0
 80031c0:	f7fd fb7e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7fd fb7b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80031ca:	2099      	movs	r0, #153	@ 0x99
 80031cc:	f7fd fb78 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7fd fb75 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80031d6:	2087      	movs	r0, #135	@ 0x87
 80031d8:	f7fd fb72 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031dc:	2000      	movs	r0, #0
 80031de:	f7fd fb6f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80031e2:	2088      	movs	r0, #136	@ 0x88
 80031e4:	f7fd fb6c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e8:	2000      	movs	r0, #0
 80031ea:	f7fd fb69 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80031ee:	2077      	movs	r0, #119	@ 0x77
 80031f0:	f7fd fb66 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7fd fb63 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80031fa:	2066      	movs	r0, #102	@ 0x66
 80031fc:	f7fd fb60 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003200:	2000      	movs	r0, #0
 8003202:	f7fd fb5d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003206:	2088      	movs	r0, #136	@ 0x88
 8003208:	f7fd fb5a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320c:	2000      	movs	r0, #0
 800320e:	f7fd fb57 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8003212:	20aa      	movs	r0, #170	@ 0xaa
 8003214:	f7fd fb54 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003218:	2000      	movs	r0, #0
 800321a:	f7fd fb51 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800321e:	20bb      	movs	r0, #187	@ 0xbb
 8003220:	f7fd fb4e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003224:	2000      	movs	r0, #0
 8003226:	f7fd fb4b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800322a:	2099      	movs	r0, #153	@ 0x99
 800322c:	f7fd fb48 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003230:	2000      	movs	r0, #0
 8003232:	f7fd fb45 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003236:	2066      	movs	r0, #102	@ 0x66
 8003238:	f7fd fb42 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323c:	2000      	movs	r0, #0
 800323e:	f7fd fb3f 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003242:	2055      	movs	r0, #85	@ 0x55
 8003244:	f7fd fb3c 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003248:	2000      	movs	r0, #0
 800324a:	f7fd fb39 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800324e:	2055      	movs	r0, #85	@ 0x55
 8003250:	f7fd fb36 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003254:	2000      	movs	r0, #0
 8003256:	f7fd fb33 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800325a:	2044      	movs	r0, #68	@ 0x44
 800325c:	f7fd fb30 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003260:	2000      	movs	r0, #0
 8003262:	f7fd fb2d 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003266:	2044      	movs	r0, #68	@ 0x44
 8003268:	f7fd fb2a 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326c:	2000      	movs	r0, #0
 800326e:	f7fd fb27 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003272:	2055      	movs	r0, #85	@ 0x55
 8003274:	f7fd fb24 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003278:	2000      	movs	r0, #0
 800327a:	f7fd fb21 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800327e:	20e9      	movs	r0, #233	@ 0xe9
 8003280:	f7fd fafa 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003284:	20aa      	movs	r0, #170	@ 0xaa
 8003286:	f7fd fb1b 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328a:	2000      	movs	r0, #0
 800328c:	f7fd fb18 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003290:	2000      	movs	r0, #0
 8003292:	f7fd fb15 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003296:	2000      	movs	r0, #0
 8003298:	f7fd fb12 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800329c:	2000      	movs	r0, #0
 800329e:	f7fd faeb 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80032a2:	20aa      	movs	r0, #170	@ 0xaa
 80032a4:	f7fd fb0c 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 80032a8:	20cf      	movs	r0, #207	@ 0xcf
 80032aa:	f7fd fae5 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7fd fb06 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b4:	2000      	movs	r0, #0
 80032b6:	f7fd fb03 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ba:	2000      	movs	r0, #0
 80032bc:	f7fd fb00 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c0:	2000      	movs	r0, #0
 80032c2:	f7fd fafd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7fd fafa 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7fd faf7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d2:	2000      	movs	r0, #0
 80032d4:	f7fd faf4 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d8:	2000      	movs	r0, #0
 80032da:	f7fd faf1 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032de:	2000      	movs	r0, #0
 80032e0:	f7fd faee 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e4:	2000      	movs	r0, #0
 80032e6:	f7fd faeb 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ea:	2000      	movs	r0, #0
 80032ec:	f7fd fae8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7fd fae5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f6:	2000      	movs	r0, #0
 80032f8:	f7fd fae2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7fd fadf 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003302:	2000      	movs	r0, #0
 8003304:	f7fd fadc 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003308:	2000      	movs	r0, #0
 800330a:	f7fd fad9 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800330e:	2000      	movs	r0, #0
 8003310:	f7fd fad6 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8003314:	20f0      	movs	r0, #240	@ 0xf0
 8003316:	f7fd faaf 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800331a:	2000      	movs	r0, #0
 800331c:	f7fd fad0 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003320:	2050      	movs	r0, #80	@ 0x50
 8003322:	f7fd facd 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003326:	2000      	movs	r0, #0
 8003328:	f7fd faca 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800332c:	2000      	movs	r0, #0
 800332e:	f7fd fac7 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003332:	2000      	movs	r0, #0
 8003334:	f7fd fac4 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003338:	20f3      	movs	r0, #243	@ 0xf3
 800333a:	f7fd fa9d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800333e:	2000      	movs	r0, #0
 8003340:	f7fd fabe 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8003344:	20f9      	movs	r0, #249	@ 0xf9
 8003346:	f7fd fa97 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 800334a:	2006      	movs	r0, #6
 800334c:	f7fd fab8 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003350:	2010      	movs	r0, #16
 8003352:	f7fd fab5 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003356:	2029      	movs	r0, #41	@ 0x29
 8003358:	f7fd fab2 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800335c:	2000      	movs	r0, #0
 800335e:	f7fd faaf 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003362:	203a      	movs	r0, #58	@ 0x3a
 8003364:	f7fd fa88 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003368:	2055      	movs	r0, #85	@ 0x55
 800336a:	f7fd faa9 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800336e:	2011      	movs	r0, #17
 8003370:	f7fd fa82 	bl	8000878 <LCD_WR_REG>
		HAL_Delay(100);
 8003374:	2064      	movs	r0, #100	@ 0x64
 8003376:	f003 f9cd 	bl	8006714 <HAL_Delay>
		LCD_WR_REG(0x29);
 800337a:	2029      	movs	r0, #41	@ 0x29
 800337c:	f7fd fa7c 	bl	8000878 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003380:	2035      	movs	r0, #53	@ 0x35
 8003382:	f7fd fa79 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003386:	2000      	movs	r0, #0
 8003388:	f7fd fa9a 	bl	80008c0 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800338c:	2051      	movs	r0, #81	@ 0x51
 800338e:	f7fd fa73 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003392:	20ff      	movs	r0, #255	@ 0xff
 8003394:	f7fd fa94 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003398:	2053      	movs	r0, #83	@ 0x53
 800339a:	f7fd fa6d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800339e:	202c      	movs	r0, #44	@ 0x2c
 80033a0:	f7fd fa8e 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 80033a4:	2055      	movs	r0, #85	@ 0x55
 80033a6:	f7fd fa67 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 80033aa:	2082      	movs	r0, #130	@ 0x82
 80033ac:	f7fd fa88 	bl	80008c0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 80033b0:	202c      	movs	r0, #44	@ 0x2c
 80033b2:	f7fd fa61 	bl	8000878 <LCD_WR_REG>
 80033b6:	f002 bca1 	b.w	8005cfc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 80033ba:	4b04      	ldr	r3, [pc, #16]	@ (80033cc <LCD_Init+0x1504>)
 80033bc:	889b      	ldrh	r3, [r3, #4]
 80033be:	f245 5210 	movw	r2, #21776	@ 0x5510
 80033c2:	4293      	cmp	r3, r2
 80033c4:	f040 8782 	bne.w	80042cc <LCD_Init+0x2404>
 80033c8:	e002      	b.n	80033d0 <LCD_Init+0x1508>
 80033ca:	bf00      	nop
 80033cc:	20000080 	.word	0x20000080
		LCD_WriteReg(0xF000, 0x55);
 80033d0:	2155      	movs	r1, #85	@ 0x55
 80033d2:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 80033d6:	f7fd fadb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80033da:	21aa      	movs	r1, #170	@ 0xaa
 80033dc:	f24f 0001 	movw	r0, #61441	@ 0xf001
 80033e0:	f7fd fad6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80033e4:	2152      	movs	r1, #82	@ 0x52
 80033e6:	f24f 0002 	movw	r0, #61442	@ 0xf002
 80033ea:	f7fd fad1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80033ee:	2108      	movs	r1, #8
 80033f0:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80033f4:	f7fd facc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80033f8:	2101      	movs	r1, #1
 80033fa:	f24f 0004 	movw	r0, #61444	@ 0xf004
 80033fe:	f7fd fac7 	bl	8000990 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8003402:	210d      	movs	r1, #13
 8003404:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8003408:	f7fd fac2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 800340c:	210d      	movs	r1, #13
 800340e:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8003412:	f7fd fabd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8003416:	210d      	movs	r1, #13
 8003418:	f24b 0002 	movw	r0, #45058	@ 0xb002
 800341c:	f7fd fab8 	bl	8000990 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003420:	2134      	movs	r1, #52	@ 0x34
 8003422:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8003426:	f7fd fab3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 800342a:	2134      	movs	r1, #52	@ 0x34
 800342c:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8003430:	f7fd faae 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8003434:	2134      	movs	r1, #52	@ 0x34
 8003436:	f24b 6002 	movw	r0, #46594	@ 0xb602
 800343a:	f7fd faa9 	bl	8000990 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 800343e:	210d      	movs	r1, #13
 8003440:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8003444:	f7fd faa4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003448:	210d      	movs	r1, #13
 800344a:	f24b 1001 	movw	r0, #45313	@ 0xb101
 800344e:	f7fd fa9f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8003452:	210d      	movs	r1, #13
 8003454:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8003458:	f7fd fa9a 	bl	8000990 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 800345c:	2134      	movs	r1, #52	@ 0x34
 800345e:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8003462:	f7fd fa95 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003466:	2134      	movs	r1, #52	@ 0x34
 8003468:	f24b 7001 	movw	r0, #46849	@ 0xb701
 800346c:	f7fd fa90 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003470:	2134      	movs	r1, #52	@ 0x34
 8003472:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8003476:	f7fd fa8b 	bl	8000990 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800347a:	2100      	movs	r1, #0
 800347c:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 8003480:	f7fd fa86 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003484:	2100      	movs	r1, #0
 8003486:	f24b 2001 	movw	r0, #45569	@ 0xb201
 800348a:	f7fd fa81 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800348e:	2100      	movs	r1, #0
 8003490:	f24b 2002 	movw	r0, #45570	@ 0xb202
 8003494:	f7fd fa7c 	bl	8000990 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003498:	2124      	movs	r1, #36	@ 0x24
 800349a:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 800349e:	f7fd fa77 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80034a2:	2124      	movs	r1, #36	@ 0x24
 80034a4:	f64b 0001 	movw	r0, #47105	@ 0xb801
 80034a8:	f7fd fa72 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 80034ac:	2124      	movs	r1, #36	@ 0x24
 80034ae:	f64b 0002 	movw	r0, #47106	@ 0xb802
 80034b2:	f7fd fa6d 	bl	8000990 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 80034b6:	2101      	movs	r1, #1
 80034b8:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 80034bc:	f7fd fa68 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80034c0:	210f      	movs	r1, #15
 80034c2:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 80034c6:	f7fd fa63 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 80034ca:	210f      	movs	r1, #15
 80034cc:	f24b 3001 	movw	r0, #45825	@ 0xb301
 80034d0:	f7fd fa5e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 80034d4:	210f      	movs	r1, #15
 80034d6:	f24b 3002 	movw	r0, #45826	@ 0xb302
 80034da:	f7fd fa59 	bl	8000990 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 80034de:	2134      	movs	r1, #52	@ 0x34
 80034e0:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 80034e4:	f7fd fa54 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80034e8:	2134      	movs	r1, #52	@ 0x34
 80034ea:	f64b 1001 	movw	r0, #47361	@ 0xb901
 80034ee:	f7fd fa4f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80034f2:	2134      	movs	r1, #52	@ 0x34
 80034f4:	f64b 1002 	movw	r0, #47362	@ 0xb902
 80034f8:	f7fd fa4a 	bl	8000990 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80034fc:	2108      	movs	r1, #8
 80034fe:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8003502:	f7fd fa45 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8003506:	2108      	movs	r1, #8
 8003508:	f24b 5001 	movw	r0, #46337	@ 0xb501
 800350c:	f7fd fa40 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003510:	2108      	movs	r1, #8
 8003512:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8003516:	f7fd fa3b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 800351a:	2103      	movs	r1, #3
 800351c:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 8003520:	f7fd fa36 	bl	8000990 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8003524:	2124      	movs	r1, #36	@ 0x24
 8003526:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 800352a:	f7fd fa31 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 800352e:	2124      	movs	r1, #36	@ 0x24
 8003530:	f64b 2001 	movw	r0, #47617	@ 0xba01
 8003534:	f7fd fa2c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003538:	2124      	movs	r1, #36	@ 0x24
 800353a:	f64b 2002 	movw	r0, #47618	@ 0xba02
 800353e:	f7fd fa27 	bl	8000990 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8003542:	2100      	movs	r1, #0
 8003544:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8003548:	f7fd fa22 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 800354c:	2178      	movs	r1, #120	@ 0x78
 800354e:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8003552:	f7fd fa1d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003556:	2100      	movs	r1, #0
 8003558:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 800355c:	f7fd fa18 	bl	8000990 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003560:	2100      	movs	r1, #0
 8003562:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8003566:	f7fd fa13 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800356a:	2178      	movs	r1, #120	@ 0x78
 800356c:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 8003570:	f7fd fa0e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003574:	2100      	movs	r1, #0
 8003576:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 800357a:	f7fd fa09 	bl	8000990 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800357e:	2100      	movs	r1, #0
 8003580:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8003584:	f7fd fa04 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003588:	2164      	movs	r1, #100	@ 0x64
 800358a:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 800358e:	f7fd f9ff 	bl	8000990 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003592:	2100      	movs	r1, #0
 8003594:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8003598:	f7fd f9fa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800359c:	2133      	movs	r1, #51	@ 0x33
 800359e:	f24d 1001 	movw	r0, #53505	@ 0xd101
 80035a2:	f7fd f9f5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80035a6:	2100      	movs	r1, #0
 80035a8:	f24d 1002 	movw	r0, #53506	@ 0xd102
 80035ac:	f7fd f9f0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 80035b0:	2134      	movs	r1, #52	@ 0x34
 80035b2:	f24d 1003 	movw	r0, #53507	@ 0xd103
 80035b6:	f7fd f9eb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 80035ba:	2100      	movs	r1, #0
 80035bc:	f24d 1004 	movw	r0, #53508	@ 0xd104
 80035c0:	f7fd f9e6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80035c4:	213a      	movs	r1, #58	@ 0x3a
 80035c6:	f24d 1005 	movw	r0, #53509	@ 0xd105
 80035ca:	f7fd f9e1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 80035ce:	2100      	movs	r1, #0
 80035d0:	f24d 1006 	movw	r0, #53510	@ 0xd106
 80035d4:	f7fd f9dc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 80035d8:	214a      	movs	r1, #74	@ 0x4a
 80035da:	f24d 1007 	movw	r0, #53511	@ 0xd107
 80035de:	f7fd f9d7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 80035e2:	2100      	movs	r1, #0
 80035e4:	f24d 1008 	movw	r0, #53512	@ 0xd108
 80035e8:	f7fd f9d2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80035ec:	215c      	movs	r1, #92	@ 0x5c
 80035ee:	f24d 1009 	movw	r0, #53513	@ 0xd109
 80035f2:	f7fd f9cd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80035f6:	2100      	movs	r1, #0
 80035f8:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 80035fc:	f7fd f9c8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003600:	2181      	movs	r1, #129	@ 0x81
 8003602:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8003606:	f7fd f9c3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 800360a:	2100      	movs	r1, #0
 800360c:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 8003610:	f7fd f9be 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8003614:	21a6      	movs	r1, #166	@ 0xa6
 8003616:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 800361a:	f7fd f9b9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 800361e:	2100      	movs	r1, #0
 8003620:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8003624:	f7fd f9b4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003628:	21e5      	movs	r1, #229	@ 0xe5
 800362a:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 800362e:	f7fd f9af 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8003632:	2101      	movs	r1, #1
 8003634:	f24d 1010 	movw	r0, #53520	@ 0xd110
 8003638:	f7fd f9aa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 800363c:	2113      	movs	r1, #19
 800363e:	f24d 1011 	movw	r0, #53521	@ 0xd111
 8003642:	f7fd f9a5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8003646:	2101      	movs	r1, #1
 8003648:	f24d 1012 	movw	r0, #53522	@ 0xd112
 800364c:	f7fd f9a0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003650:	2154      	movs	r1, #84	@ 0x54
 8003652:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8003656:	f7fd f99b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 800365a:	2101      	movs	r1, #1
 800365c:	f24d 1014 	movw	r0, #53524	@ 0xd114
 8003660:	f7fd f996 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003664:	2182      	movs	r1, #130	@ 0x82
 8003666:	f24d 1015 	movw	r0, #53525	@ 0xd115
 800366a:	f7fd f991 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800366e:	2101      	movs	r1, #1
 8003670:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8003674:	f7fd f98c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003678:	21ca      	movs	r1, #202	@ 0xca
 800367a:	f24d 1017 	movw	r0, #53527	@ 0xd117
 800367e:	f7fd f987 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003682:	2102      	movs	r1, #2
 8003684:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8003688:	f7fd f982 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800368c:	2100      	movs	r1, #0
 800368e:	f24d 1019 	movw	r0, #53529	@ 0xd119
 8003692:	f7fd f97d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003696:	2102      	movs	r1, #2
 8003698:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 800369c:	f7fd f978 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80036a0:	2101      	movs	r1, #1
 80036a2:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 80036a6:	f7fd f973 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 80036aa:	2102      	movs	r1, #2
 80036ac:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 80036b0:	f7fd f96e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 80036b4:	2134      	movs	r1, #52	@ 0x34
 80036b6:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 80036ba:	f7fd f969 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80036be:	2102      	movs	r1, #2
 80036c0:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 80036c4:	f7fd f964 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80036c8:	2167      	movs	r1, #103	@ 0x67
 80036ca:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 80036ce:	f7fd f95f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 80036d2:	2102      	movs	r1, #2
 80036d4:	f24d 1020 	movw	r0, #53536	@ 0xd120
 80036d8:	f7fd f95a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 80036dc:	2184      	movs	r1, #132	@ 0x84
 80036de:	f24d 1021 	movw	r0, #53537	@ 0xd121
 80036e2:	f7fd f955 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 80036e6:	2102      	movs	r1, #2
 80036e8:	f24d 1022 	movw	r0, #53538	@ 0xd122
 80036ec:	f7fd f950 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80036f0:	21a4      	movs	r1, #164	@ 0xa4
 80036f2:	f24d 1023 	movw	r0, #53539	@ 0xd123
 80036f6:	f7fd f94b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80036fa:	2102      	movs	r1, #2
 80036fc:	f24d 1024 	movw	r0, #53540	@ 0xd124
 8003700:	f7fd f946 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8003704:	21b7      	movs	r1, #183	@ 0xb7
 8003706:	f24d 1025 	movw	r0, #53541	@ 0xd125
 800370a:	f7fd f941 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 800370e:	2102      	movs	r1, #2
 8003710:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8003714:	f7fd f93c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003718:	21cf      	movs	r1, #207	@ 0xcf
 800371a:	f24d 1027 	movw	r0, #53543	@ 0xd127
 800371e:	f7fd f937 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8003722:	2102      	movs	r1, #2
 8003724:	f24d 1028 	movw	r0, #53544	@ 0xd128
 8003728:	f7fd f932 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 800372c:	21de      	movs	r1, #222	@ 0xde
 800372e:	f24d 1029 	movw	r0, #53545	@ 0xd129
 8003732:	f7fd f92d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8003736:	2102      	movs	r1, #2
 8003738:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 800373c:	f7fd f928 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003740:	21f2      	movs	r1, #242	@ 0xf2
 8003742:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 8003746:	f7fd f923 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 800374a:	2102      	movs	r1, #2
 800374c:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 8003750:	f7fd f91e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003754:	21fe      	movs	r1, #254	@ 0xfe
 8003756:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 800375a:	f7fd f919 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 800375e:	2103      	movs	r1, #3
 8003760:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 8003764:	f7fd f914 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003768:	2110      	movs	r1, #16
 800376a:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 800376e:	f7fd f90f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003772:	2103      	movs	r1, #3
 8003774:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8003778:	f7fd f90a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800377c:	2133      	movs	r1, #51	@ 0x33
 800377e:	f24d 1031 	movw	r0, #53553	@ 0xd131
 8003782:	f7fd f905 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003786:	2103      	movs	r1, #3
 8003788:	f24d 1032 	movw	r0, #53554	@ 0xd132
 800378c:	f7fd f900 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003790:	216d      	movs	r1, #109	@ 0x6d
 8003792:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8003796:	f7fd f8fb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800379a:	2100      	movs	r1, #0
 800379c:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 80037a0:	f7fd f8f6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 80037a4:	2133      	movs	r1, #51	@ 0x33
 80037a6:	f24d 2001 	movw	r0, #53761	@ 0xd201
 80037aa:	f7fd f8f1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 80037ae:	2100      	movs	r1, #0
 80037b0:	f24d 2002 	movw	r0, #53762	@ 0xd202
 80037b4:	f7fd f8ec 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80037b8:	2134      	movs	r1, #52	@ 0x34
 80037ba:	f24d 2003 	movw	r0, #53763	@ 0xd203
 80037be:	f7fd f8e7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80037c2:	2100      	movs	r1, #0
 80037c4:	f24d 2004 	movw	r0, #53764	@ 0xd204
 80037c8:	f7fd f8e2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80037cc:	213a      	movs	r1, #58	@ 0x3a
 80037ce:	f24d 2005 	movw	r0, #53765	@ 0xd205
 80037d2:	f7fd f8dd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 80037d6:	2100      	movs	r1, #0
 80037d8:	f24d 2006 	movw	r0, #53766	@ 0xd206
 80037dc:	f7fd f8d8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 80037e0:	214a      	movs	r1, #74	@ 0x4a
 80037e2:	f24d 2007 	movw	r0, #53767	@ 0xd207
 80037e6:	f7fd f8d3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 80037ea:	2100      	movs	r1, #0
 80037ec:	f24d 2008 	movw	r0, #53768	@ 0xd208
 80037f0:	f7fd f8ce 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80037f4:	215c      	movs	r1, #92	@ 0x5c
 80037f6:	f24d 2009 	movw	r0, #53769	@ 0xd209
 80037fa:	f7fd f8c9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80037fe:	2100      	movs	r1, #0
 8003800:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8003804:	f7fd f8c4 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003808:	2181      	movs	r1, #129	@ 0x81
 800380a:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 800380e:	f7fd f8bf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003812:	2100      	movs	r1, #0
 8003814:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8003818:	f7fd f8ba 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 800381c:	21a6      	movs	r1, #166	@ 0xa6
 800381e:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 8003822:	f7fd f8b5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003826:	2100      	movs	r1, #0
 8003828:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 800382c:	f7fd f8b0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003830:	21e5      	movs	r1, #229	@ 0xe5
 8003832:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8003836:	f7fd f8ab 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 800383a:	2101      	movs	r1, #1
 800383c:	f24d 2010 	movw	r0, #53776	@ 0xd210
 8003840:	f7fd f8a6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003844:	2113      	movs	r1, #19
 8003846:	f24d 2011 	movw	r0, #53777	@ 0xd211
 800384a:	f7fd f8a1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 800384e:	2101      	movs	r1, #1
 8003850:	f24d 2012 	movw	r0, #53778	@ 0xd212
 8003854:	f7fd f89c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003858:	2154      	movs	r1, #84	@ 0x54
 800385a:	f24d 2013 	movw	r0, #53779	@ 0xd213
 800385e:	f7fd f897 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003862:	2101      	movs	r1, #1
 8003864:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8003868:	f7fd f892 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 800386c:	2182      	movs	r1, #130	@ 0x82
 800386e:	f24d 2015 	movw	r0, #53781	@ 0xd215
 8003872:	f7fd f88d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003876:	2101      	movs	r1, #1
 8003878:	f24d 2016 	movw	r0, #53782	@ 0xd216
 800387c:	f7fd f888 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003880:	21ca      	movs	r1, #202	@ 0xca
 8003882:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8003886:	f7fd f883 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800388a:	2102      	movs	r1, #2
 800388c:	f24d 2018 	movw	r0, #53784	@ 0xd218
 8003890:	f7fd f87e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003894:	2100      	movs	r1, #0
 8003896:	f24d 2019 	movw	r0, #53785	@ 0xd219
 800389a:	f7fd f879 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 800389e:	2102      	movs	r1, #2
 80038a0:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 80038a4:	f7fd f874 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 80038a8:	2101      	movs	r1, #1
 80038aa:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 80038ae:	f7fd f86f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 80038b2:	2102      	movs	r1, #2
 80038b4:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 80038b8:	f7fd f86a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 80038bc:	2134      	movs	r1, #52	@ 0x34
 80038be:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 80038c2:	f7fd f865 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 80038c6:	2102      	movs	r1, #2
 80038c8:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 80038cc:	f7fd f860 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 80038d0:	2167      	movs	r1, #103	@ 0x67
 80038d2:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 80038d6:	f7fd f85b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 80038da:	2102      	movs	r1, #2
 80038dc:	f24d 2020 	movw	r0, #53792	@ 0xd220
 80038e0:	f7fd f856 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 80038e4:	2184      	movs	r1, #132	@ 0x84
 80038e6:	f24d 2021 	movw	r0, #53793	@ 0xd221
 80038ea:	f7fd f851 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 80038ee:	2102      	movs	r1, #2
 80038f0:	f24d 2022 	movw	r0, #53794	@ 0xd222
 80038f4:	f7fd f84c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 80038f8:	21a4      	movs	r1, #164	@ 0xa4
 80038fa:	f24d 2023 	movw	r0, #53795	@ 0xd223
 80038fe:	f7fd f847 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003902:	2102      	movs	r1, #2
 8003904:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8003908:	f7fd f842 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 800390c:	21b7      	movs	r1, #183	@ 0xb7
 800390e:	f24d 2025 	movw	r0, #53797	@ 0xd225
 8003912:	f7fd f83d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003916:	2102      	movs	r1, #2
 8003918:	f24d 2026 	movw	r0, #53798	@ 0xd226
 800391c:	f7fd f838 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003920:	21cf      	movs	r1, #207	@ 0xcf
 8003922:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8003926:	f7fd f833 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 800392a:	2102      	movs	r1, #2
 800392c:	f24d 2028 	movw	r0, #53800	@ 0xd228
 8003930:	f7fd f82e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003934:	21de      	movs	r1, #222	@ 0xde
 8003936:	f24d 2029 	movw	r0, #53801	@ 0xd229
 800393a:	f7fd f829 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 800393e:	2102      	movs	r1, #2
 8003940:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 8003944:	f7fd f824 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003948:	21f2      	movs	r1, #242	@ 0xf2
 800394a:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 800394e:	f7fd f81f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003952:	2102      	movs	r1, #2
 8003954:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 8003958:	f7fd f81a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 800395c:	21fe      	movs	r1, #254	@ 0xfe
 800395e:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 8003962:	f7fd f815 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003966:	2103      	movs	r1, #3
 8003968:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 800396c:	f7fd f810 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003970:	2110      	movs	r1, #16
 8003972:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8003976:	f7fd f80b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 800397a:	2103      	movs	r1, #3
 800397c:	f24d 2030 	movw	r0, #53808	@ 0xd230
 8003980:	f7fd f806 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003984:	2133      	movs	r1, #51	@ 0x33
 8003986:	f24d 2031 	movw	r0, #53809	@ 0xd231
 800398a:	f7fd f801 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 800398e:	2103      	movs	r1, #3
 8003990:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8003994:	f7fc fffc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003998:	216d      	movs	r1, #109	@ 0x6d
 800399a:	f24d 2033 	movw	r0, #53811	@ 0xd233
 800399e:	f7fc fff7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 80039a2:	2100      	movs	r1, #0
 80039a4:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 80039a8:	f7fc fff2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 80039ac:	2133      	movs	r1, #51	@ 0x33
 80039ae:	f24d 3001 	movw	r0, #54017	@ 0xd301
 80039b2:	f7fc ffed 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 80039b6:	2100      	movs	r1, #0
 80039b8:	f24d 3002 	movw	r0, #54018	@ 0xd302
 80039bc:	f7fc ffe8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 80039c0:	2134      	movs	r1, #52	@ 0x34
 80039c2:	f24d 3003 	movw	r0, #54019	@ 0xd303
 80039c6:	f7fc ffe3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 80039ca:	2100      	movs	r1, #0
 80039cc:	f24d 3004 	movw	r0, #54020	@ 0xd304
 80039d0:	f7fc ffde 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 80039d4:	213a      	movs	r1, #58	@ 0x3a
 80039d6:	f24d 3005 	movw	r0, #54021	@ 0xd305
 80039da:	f7fc ffd9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 80039de:	2100      	movs	r1, #0
 80039e0:	f24d 3006 	movw	r0, #54022	@ 0xd306
 80039e4:	f7fc ffd4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 80039e8:	214a      	movs	r1, #74	@ 0x4a
 80039ea:	f24d 3007 	movw	r0, #54023	@ 0xd307
 80039ee:	f7fc ffcf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 80039f2:	2100      	movs	r1, #0
 80039f4:	f24d 3008 	movw	r0, #54024	@ 0xd308
 80039f8:	f7fc ffca 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 80039fc:	215c      	movs	r1, #92	@ 0x5c
 80039fe:	f24d 3009 	movw	r0, #54025	@ 0xd309
 8003a02:	f7fc ffc5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003a06:	2100      	movs	r1, #0
 8003a08:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8003a0c:	f7fc ffc0 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003a10:	2181      	movs	r1, #129	@ 0x81
 8003a12:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8003a16:	f7fc ffbb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 8003a20:	f7fc ffb6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003a24:	21a6      	movs	r1, #166	@ 0xa6
 8003a26:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8003a2a:	f7fc ffb1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003a2e:	2100      	movs	r1, #0
 8003a30:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8003a34:	f7fc ffac 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003a38:	21e5      	movs	r1, #229	@ 0xe5
 8003a3a:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 8003a3e:	f7fc ffa7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003a42:	2101      	movs	r1, #1
 8003a44:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8003a48:	f7fc ffa2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003a4c:	2113      	movs	r1, #19
 8003a4e:	f24d 3011 	movw	r0, #54033	@ 0xd311
 8003a52:	f7fc ff9d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003a56:	2101      	movs	r1, #1
 8003a58:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8003a5c:	f7fc ff98 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003a60:	2154      	movs	r1, #84	@ 0x54
 8003a62:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8003a66:	f7fc ff93 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	f24d 3014 	movw	r0, #54036	@ 0xd314
 8003a70:	f7fc ff8e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003a74:	2182      	movs	r1, #130	@ 0x82
 8003a76:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8003a7a:	f7fc ff89 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003a7e:	2101      	movs	r1, #1
 8003a80:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8003a84:	f7fc ff84 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003a88:	21ca      	movs	r1, #202	@ 0xca
 8003a8a:	f24d 3017 	movw	r0, #54039	@ 0xd317
 8003a8e:	f7fc ff7f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003a92:	2102      	movs	r1, #2
 8003a94:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8003a98:	f7fc ff7a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	f24d 3019 	movw	r0, #54041	@ 0xd319
 8003aa2:	f7fc ff75 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8003aac:	f7fc ff70 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 8003ab6:	f7fc ff6b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003aba:	2102      	movs	r1, #2
 8003abc:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 8003ac0:	f7fc ff66 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003ac4:	2134      	movs	r1, #52	@ 0x34
 8003ac6:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 8003aca:	f7fc ff61 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003ace:	2102      	movs	r1, #2
 8003ad0:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 8003ad4:	f7fc ff5c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003ad8:	2167      	movs	r1, #103	@ 0x67
 8003ada:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 8003ade:	f7fc ff57 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	f24d 3020 	movw	r0, #54048	@ 0xd320
 8003ae8:	f7fc ff52 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003aec:	2184      	movs	r1, #132	@ 0x84
 8003aee:	f24d 3021 	movw	r0, #54049	@ 0xd321
 8003af2:	f7fc ff4d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003af6:	2102      	movs	r1, #2
 8003af8:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8003afc:	f7fc ff48 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003b00:	21a4      	movs	r1, #164	@ 0xa4
 8003b02:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8003b06:	f7fc ff43 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	f24d 3024 	movw	r0, #54052	@ 0xd324
 8003b10:	f7fc ff3e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003b14:	21b7      	movs	r1, #183	@ 0xb7
 8003b16:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8003b1a:	f7fc ff39 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003b1e:	2102      	movs	r1, #2
 8003b20:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8003b24:	f7fc ff34 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003b28:	21cf      	movs	r1, #207	@ 0xcf
 8003b2a:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8003b2e:	f7fc ff2f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003b32:	2102      	movs	r1, #2
 8003b34:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8003b38:	f7fc ff2a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003b3c:	21de      	movs	r1, #222	@ 0xde
 8003b3e:	f24d 3029 	movw	r0, #54057	@ 0xd329
 8003b42:	f7fc ff25 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003b46:	2102      	movs	r1, #2
 8003b48:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8003b4c:	f7fc ff20 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003b50:	21f2      	movs	r1, #242	@ 0xf2
 8003b52:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8003b56:	f7fc ff1b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 8003b60:	f7fc ff16 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003b64:	21fe      	movs	r1, #254	@ 0xfe
 8003b66:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8003b6a:	f7fc ff11 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003b6e:	2103      	movs	r1, #3
 8003b70:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8003b74:	f7fc ff0c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003b78:	2110      	movs	r1, #16
 8003b7a:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 8003b7e:	f7fc ff07 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003b82:	2103      	movs	r1, #3
 8003b84:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8003b88:	f7fc ff02 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003b8c:	2133      	movs	r1, #51	@ 0x33
 8003b8e:	f24d 3031 	movw	r0, #54065	@ 0xd331
 8003b92:	f7fc fefd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003b96:	2103      	movs	r1, #3
 8003b98:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8003b9c:	f7fc fef8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003ba0:	216d      	movs	r1, #109	@ 0x6d
 8003ba2:	f24d 3033 	movw	r0, #54067	@ 0xd333
 8003ba6:	f7fc fef3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003baa:	2100      	movs	r1, #0
 8003bac:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 8003bb0:	f7fc feee 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003bb4:	2133      	movs	r1, #51	@ 0x33
 8003bb6:	f24d 4001 	movw	r0, #54273	@ 0xd401
 8003bba:	f7fc fee9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	f24d 4002 	movw	r0, #54274	@ 0xd402
 8003bc4:	f7fc fee4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003bc8:	2134      	movs	r1, #52	@ 0x34
 8003bca:	f24d 4003 	movw	r0, #54275	@ 0xd403
 8003bce:	f7fc fedf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	f24d 4004 	movw	r0, #54276	@ 0xd404
 8003bd8:	f7fc feda 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003bdc:	213a      	movs	r1, #58	@ 0x3a
 8003bde:	f24d 4005 	movw	r0, #54277	@ 0xd405
 8003be2:	f7fc fed5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003be6:	2100      	movs	r1, #0
 8003be8:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8003bec:	f7fc fed0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003bf0:	214a      	movs	r1, #74	@ 0x4a
 8003bf2:	f24d 4007 	movw	r0, #54279	@ 0xd407
 8003bf6:	f7fc fecb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	f24d 4008 	movw	r0, #54280	@ 0xd408
 8003c00:	f7fc fec6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003c04:	215c      	movs	r1, #92	@ 0x5c
 8003c06:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8003c0a:	f7fc fec1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003c0e:	2100      	movs	r1, #0
 8003c10:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8003c14:	f7fc febc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003c18:	2181      	movs	r1, #129	@ 0x81
 8003c1a:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 8003c1e:	f7fc feb7 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003c22:	2100      	movs	r1, #0
 8003c24:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 8003c28:	f7fc feb2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003c2c:	21a6      	movs	r1, #166	@ 0xa6
 8003c2e:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 8003c32:	f7fc fead 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003c36:	2100      	movs	r1, #0
 8003c38:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8003c3c:	f7fc fea8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003c40:	21e5      	movs	r1, #229	@ 0xe5
 8003c42:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 8003c46:	f7fc fea3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	f24d 4010 	movw	r0, #54288	@ 0xd410
 8003c50:	f7fc fe9e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003c54:	2113      	movs	r1, #19
 8003c56:	f24d 4011 	movw	r0, #54289	@ 0xd411
 8003c5a:	f7fc fe99 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003c5e:	2101      	movs	r1, #1
 8003c60:	f24d 4012 	movw	r0, #54290	@ 0xd412
 8003c64:	f7fc fe94 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003c68:	2154      	movs	r1, #84	@ 0x54
 8003c6a:	f24d 4013 	movw	r0, #54291	@ 0xd413
 8003c6e:	f7fc fe8f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003c72:	2101      	movs	r1, #1
 8003c74:	f24d 4014 	movw	r0, #54292	@ 0xd414
 8003c78:	f7fc fe8a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003c7c:	2182      	movs	r1, #130	@ 0x82
 8003c7e:	f24d 4015 	movw	r0, #54293	@ 0xd415
 8003c82:	f7fc fe85 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003c86:	2101      	movs	r1, #1
 8003c88:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8003c8c:	f7fc fe80 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003c90:	21ca      	movs	r1, #202	@ 0xca
 8003c92:	f24d 4017 	movw	r0, #54295	@ 0xd417
 8003c96:	f7fc fe7b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	f24d 4018 	movw	r0, #54296	@ 0xd418
 8003ca0:	f7fc fe76 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	f24d 4019 	movw	r0, #54297	@ 0xd419
 8003caa:	f7fc fe71 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003cae:	2102      	movs	r1, #2
 8003cb0:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 8003cb4:	f7fc fe6c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003cb8:	2101      	movs	r1, #1
 8003cba:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 8003cbe:	f7fc fe67 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 8003cc8:	f7fc fe62 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003ccc:	2134      	movs	r1, #52	@ 0x34
 8003cce:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 8003cd2:	f7fc fe5d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003cd6:	2102      	movs	r1, #2
 8003cd8:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 8003cdc:	f7fc fe58 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003ce0:	2167      	movs	r1, #103	@ 0x67
 8003ce2:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 8003ce6:	f7fc fe53 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003cea:	2102      	movs	r1, #2
 8003cec:	f24d 4020 	movw	r0, #54304	@ 0xd420
 8003cf0:	f7fc fe4e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003cf4:	2184      	movs	r1, #132	@ 0x84
 8003cf6:	f24d 4021 	movw	r0, #54305	@ 0xd421
 8003cfa:	f7fc fe49 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003cfe:	2102      	movs	r1, #2
 8003d00:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8003d04:	f7fc fe44 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003d08:	21a4      	movs	r1, #164	@ 0xa4
 8003d0a:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8003d0e:	f7fc fe3f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003d12:	2102      	movs	r1, #2
 8003d14:	f24d 4024 	movw	r0, #54308	@ 0xd424
 8003d18:	f7fc fe3a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003d1c:	21b7      	movs	r1, #183	@ 0xb7
 8003d1e:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8003d22:	f7fc fe35 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003d26:	2102      	movs	r1, #2
 8003d28:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8003d2c:	f7fc fe30 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003d30:	21cf      	movs	r1, #207	@ 0xcf
 8003d32:	f24d 4027 	movw	r0, #54311	@ 0xd427
 8003d36:	f7fc fe2b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	f24d 4028 	movw	r0, #54312	@ 0xd428
 8003d40:	f7fc fe26 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003d44:	21de      	movs	r1, #222	@ 0xde
 8003d46:	f24d 4029 	movw	r0, #54313	@ 0xd429
 8003d4a:	f7fc fe21 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003d4e:	2102      	movs	r1, #2
 8003d50:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 8003d54:	f7fc fe1c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003d58:	21f2      	movs	r1, #242	@ 0xf2
 8003d5a:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 8003d5e:	f7fc fe17 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003d62:	2102      	movs	r1, #2
 8003d64:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 8003d68:	f7fc fe12 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003d6c:	21fe      	movs	r1, #254	@ 0xfe
 8003d6e:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 8003d72:	f7fc fe0d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003d76:	2103      	movs	r1, #3
 8003d78:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 8003d7c:	f7fc fe08 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003d80:	2110      	movs	r1, #16
 8003d82:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8003d86:	f7fc fe03 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003d8a:	2103      	movs	r1, #3
 8003d8c:	f24d 4030 	movw	r0, #54320	@ 0xd430
 8003d90:	f7fc fdfe 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003d94:	2133      	movs	r1, #51	@ 0x33
 8003d96:	f24d 4031 	movw	r0, #54321	@ 0xd431
 8003d9a:	f7fc fdf9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003d9e:	2103      	movs	r1, #3
 8003da0:	f24d 4032 	movw	r0, #54322	@ 0xd432
 8003da4:	f7fc fdf4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003da8:	216d      	movs	r1, #109	@ 0x6d
 8003daa:	f24d 4033 	movw	r0, #54323	@ 0xd433
 8003dae:	f7fc fdef 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003db2:	2100      	movs	r1, #0
 8003db4:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 8003db8:	f7fc fdea 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003dbc:	2133      	movs	r1, #51	@ 0x33
 8003dbe:	f24d 5001 	movw	r0, #54529	@ 0xd501
 8003dc2:	f7fc fde5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8003dcc:	f7fc fde0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003dd0:	2134      	movs	r1, #52	@ 0x34
 8003dd2:	f24d 5003 	movw	r0, #54531	@ 0xd503
 8003dd6:	f7fc fddb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f24d 5004 	movw	r0, #54532	@ 0xd504
 8003de0:	f7fc fdd6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003de4:	213a      	movs	r1, #58	@ 0x3a
 8003de6:	f24d 5005 	movw	r0, #54533	@ 0xd505
 8003dea:	f7fc fdd1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003dee:	2100      	movs	r1, #0
 8003df0:	f24d 5006 	movw	r0, #54534	@ 0xd506
 8003df4:	f7fc fdcc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003df8:	214a      	movs	r1, #74	@ 0x4a
 8003dfa:	f24d 5007 	movw	r0, #54535	@ 0xd507
 8003dfe:	f7fc fdc7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003e02:	2100      	movs	r1, #0
 8003e04:	f24d 5008 	movw	r0, #54536	@ 0xd508
 8003e08:	f7fc fdc2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003e0c:	215c      	movs	r1, #92	@ 0x5c
 8003e0e:	f24d 5009 	movw	r0, #54537	@ 0xd509
 8003e12:	f7fc fdbd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003e16:	2100      	movs	r1, #0
 8003e18:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8003e1c:	f7fc fdb8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003e20:	2181      	movs	r1, #129	@ 0x81
 8003e22:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 8003e26:	f7fc fdb3 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 8003e30:	f7fc fdae 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003e34:	21a6      	movs	r1, #166	@ 0xa6
 8003e36:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 8003e3a:	f7fc fda9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003e3e:	2100      	movs	r1, #0
 8003e40:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 8003e44:	f7fc fda4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003e48:	21e5      	movs	r1, #229	@ 0xe5
 8003e4a:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 8003e4e:	f7fc fd9f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003e52:	2101      	movs	r1, #1
 8003e54:	f24d 5010 	movw	r0, #54544	@ 0xd510
 8003e58:	f7fc fd9a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003e5c:	2113      	movs	r1, #19
 8003e5e:	f24d 5011 	movw	r0, #54545	@ 0xd511
 8003e62:	f7fc fd95 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003e66:	2101      	movs	r1, #1
 8003e68:	f24d 5012 	movw	r0, #54546	@ 0xd512
 8003e6c:	f7fc fd90 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003e70:	2154      	movs	r1, #84	@ 0x54
 8003e72:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8003e76:	f7fc fd8b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	f24d 5014 	movw	r0, #54548	@ 0xd514
 8003e80:	f7fc fd86 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003e84:	2182      	movs	r1, #130	@ 0x82
 8003e86:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8003e8a:	f7fc fd81 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003e8e:	2101      	movs	r1, #1
 8003e90:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8003e94:	f7fc fd7c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003e98:	21ca      	movs	r1, #202	@ 0xca
 8003e9a:	f24d 5017 	movw	r0, #54551	@ 0xd517
 8003e9e:	f7fc fd77 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	f24d 5018 	movw	r0, #54552	@ 0xd518
 8003ea8:	f7fc fd72 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003eac:	2100      	movs	r1, #0
 8003eae:	f24d 5019 	movw	r0, #54553	@ 0xd519
 8003eb2:	f7fc fd6d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8003ebc:	f7fc fd68 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 8003ec6:	f7fc fd63 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003eca:	2102      	movs	r1, #2
 8003ecc:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8003ed0:	f7fc fd5e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003ed4:	2134      	movs	r1, #52	@ 0x34
 8003ed6:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 8003eda:	f7fc fd59 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003ede:	2102      	movs	r1, #2
 8003ee0:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 8003ee4:	f7fc fd54 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003ee8:	2167      	movs	r1, #103	@ 0x67
 8003eea:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 8003eee:	f7fc fd4f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	f24d 5020 	movw	r0, #54560	@ 0xd520
 8003ef8:	f7fc fd4a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003efc:	2184      	movs	r1, #132	@ 0x84
 8003efe:	f24d 5021 	movw	r0, #54561	@ 0xd521
 8003f02:	f7fc fd45 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003f06:	2102      	movs	r1, #2
 8003f08:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8003f0c:	f7fc fd40 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003f10:	21a4      	movs	r1, #164	@ 0xa4
 8003f12:	f24d 5023 	movw	r0, #54563	@ 0xd523
 8003f16:	f7fc fd3b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8003f20:	f7fc fd36 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003f24:	21b7      	movs	r1, #183	@ 0xb7
 8003f26:	f24d 5025 	movw	r0, #54565	@ 0xd525
 8003f2a:	f7fc fd31 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003f2e:	2102      	movs	r1, #2
 8003f30:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8003f34:	f7fc fd2c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003f38:	21cf      	movs	r1, #207	@ 0xcf
 8003f3a:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8003f3e:	f7fc fd27 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003f42:	2102      	movs	r1, #2
 8003f44:	f24d 5028 	movw	r0, #54568	@ 0xd528
 8003f48:	f7fc fd22 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003f4c:	21de      	movs	r1, #222	@ 0xde
 8003f4e:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8003f52:	f7fc fd1d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003f56:	2102      	movs	r1, #2
 8003f58:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 8003f5c:	f7fc fd18 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003f60:	21f2      	movs	r1, #242	@ 0xf2
 8003f62:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8003f66:	f7fc fd13 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8003f70:	f7fc fd0e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003f74:	21fe      	movs	r1, #254	@ 0xfe
 8003f76:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 8003f7a:	f7fc fd09 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003f7e:	2103      	movs	r1, #3
 8003f80:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8003f84:	f7fc fd04 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003f88:	2110      	movs	r1, #16
 8003f8a:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8003f8e:	f7fc fcff 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003f92:	2103      	movs	r1, #3
 8003f94:	f24d 5030 	movw	r0, #54576	@ 0xd530
 8003f98:	f7fc fcfa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003f9c:	2133      	movs	r1, #51	@ 0x33
 8003f9e:	f24d 5031 	movw	r0, #54577	@ 0xd531
 8003fa2:	f7fc fcf5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	f24d 5032 	movw	r0, #54578	@ 0xd532
 8003fac:	f7fc fcf0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003fb0:	216d      	movs	r1, #109	@ 0x6d
 8003fb2:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8003fb6:	f7fc fceb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003fba:	2100      	movs	r1, #0
 8003fbc:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8003fc0:	f7fc fce6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003fc4:	2133      	movs	r1, #51	@ 0x33
 8003fc6:	f24d 6001 	movw	r0, #54785	@ 0xd601
 8003fca:	f7fc fce1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003fce:	2100      	movs	r1, #0
 8003fd0:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8003fd4:	f7fc fcdc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003fd8:	2134      	movs	r1, #52	@ 0x34
 8003fda:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8003fde:	f7fc fcd7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8003fe8:	f7fc fcd2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003fec:	213a      	movs	r1, #58	@ 0x3a
 8003fee:	f24d 6005 	movw	r0, #54789	@ 0xd605
 8003ff2:	f7fc fccd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8003ffc:	f7fc fcc8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8004000:	214a      	movs	r1, #74	@ 0x4a
 8004002:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8004006:	f7fc fcc3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 800400a:	2100      	movs	r1, #0
 800400c:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8004010:	f7fc fcbe 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8004014:	215c      	movs	r1, #92	@ 0x5c
 8004016:	f24d 6009 	movw	r0, #54793	@ 0xd609
 800401a:	f7fc fcb9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 800401e:	2100      	movs	r1, #0
 8004020:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8004024:	f7fc fcb4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8004028:	2181      	movs	r1, #129	@ 0x81
 800402a:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 800402e:	f7fc fcaf 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8004032:	2100      	movs	r1, #0
 8004034:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 8004038:	f7fc fcaa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 800403c:	21a6      	movs	r1, #166	@ 0xa6
 800403e:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8004042:	f7fc fca5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8004046:	2100      	movs	r1, #0
 8004048:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 800404c:	f7fc fca0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004050:	21e5      	movs	r1, #229	@ 0xe5
 8004052:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8004056:	f7fc fc9b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 800405a:	2101      	movs	r1, #1
 800405c:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8004060:	f7fc fc96 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8004064:	2113      	movs	r1, #19
 8004066:	f24d 6011 	movw	r0, #54801	@ 0xd611
 800406a:	f7fc fc91 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800406e:	2101      	movs	r1, #1
 8004070:	f24d 6012 	movw	r0, #54802	@ 0xd612
 8004074:	f7fc fc8c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004078:	2154      	movs	r1, #84	@ 0x54
 800407a:	f24d 6013 	movw	r0, #54803	@ 0xd613
 800407e:	f7fc fc87 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8004082:	2101      	movs	r1, #1
 8004084:	f24d 6014 	movw	r0, #54804	@ 0xd614
 8004088:	f7fc fc82 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800408c:	2182      	movs	r1, #130	@ 0x82
 800408e:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8004092:	f7fc fc7d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8004096:	2101      	movs	r1, #1
 8004098:	f24d 6016 	movw	r0, #54806	@ 0xd616
 800409c:	f7fc fc78 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 80040a0:	21ca      	movs	r1, #202	@ 0xca
 80040a2:	f24d 6017 	movw	r0, #54807	@ 0xd617
 80040a6:	f7fc fc73 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 80040aa:	2102      	movs	r1, #2
 80040ac:	f24d 6018 	movw	r0, #54808	@ 0xd618
 80040b0:	f7fc fc6e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 80040b4:	2100      	movs	r1, #0
 80040b6:	f24d 6019 	movw	r0, #54809	@ 0xd619
 80040ba:	f7fc fc69 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 80040be:	2102      	movs	r1, #2
 80040c0:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 80040c4:	f7fc fc64 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 80040c8:	2101      	movs	r1, #1
 80040ca:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 80040ce:	f7fc fc5f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 80040d2:	2102      	movs	r1, #2
 80040d4:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 80040d8:	f7fc fc5a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 80040dc:	2134      	movs	r1, #52	@ 0x34
 80040de:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 80040e2:	f7fc fc55 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 80040e6:	2102      	movs	r1, #2
 80040e8:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 80040ec:	f7fc fc50 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80040f0:	2167      	movs	r1, #103	@ 0x67
 80040f2:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 80040f6:	f7fc fc4b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80040fa:	2102      	movs	r1, #2
 80040fc:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8004100:	f7fc fc46 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8004104:	2184      	movs	r1, #132	@ 0x84
 8004106:	f24d 6021 	movw	r0, #54817	@ 0xd621
 800410a:	f7fc fc41 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 800410e:	2102      	movs	r1, #2
 8004110:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8004114:	f7fc fc3c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8004118:	21a4      	movs	r1, #164	@ 0xa4
 800411a:	f24d 6023 	movw	r0, #54819	@ 0xd623
 800411e:	f7fc fc37 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8004122:	2102      	movs	r1, #2
 8004124:	f24d 6024 	movw	r0, #54820	@ 0xd624
 8004128:	f7fc fc32 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 800412c:	21b7      	movs	r1, #183	@ 0xb7
 800412e:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8004132:	f7fc fc2d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8004136:	2102      	movs	r1, #2
 8004138:	f24d 6026 	movw	r0, #54822	@ 0xd626
 800413c:	f7fc fc28 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004140:	21cf      	movs	r1, #207	@ 0xcf
 8004142:	f24d 6027 	movw	r0, #54823	@ 0xd627
 8004146:	f7fc fc23 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 800414a:	2102      	movs	r1, #2
 800414c:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8004150:	f7fc fc1e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8004154:	21de      	movs	r1, #222	@ 0xde
 8004156:	f24d 6029 	movw	r0, #54825	@ 0xd629
 800415a:	f7fc fc19 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 800415e:	2102      	movs	r1, #2
 8004160:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8004164:	f7fc fc14 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004168:	21f2      	movs	r1, #242	@ 0xf2
 800416a:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 800416e:	f7fc fc0f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8004172:	2102      	movs	r1, #2
 8004174:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 8004178:	f7fc fc0a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 800417c:	21fe      	movs	r1, #254	@ 0xfe
 800417e:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8004182:	f7fc fc05 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8004186:	2103      	movs	r1, #3
 8004188:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 800418c:	f7fc fc00 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004190:	2110      	movs	r1, #16
 8004192:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8004196:	f7fc fbfb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800419a:	2103      	movs	r1, #3
 800419c:	f24d 6030 	movw	r0, #54832	@ 0xd630
 80041a0:	f7fc fbf6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 80041a4:	2133      	movs	r1, #51	@ 0x33
 80041a6:	f24d 6031 	movw	r0, #54833	@ 0xd631
 80041aa:	f7fc fbf1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 80041ae:	2103      	movs	r1, #3
 80041b0:	f24d 6032 	movw	r0, #54834	@ 0xd632
 80041b4:	f7fc fbec 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 80041b8:	216d      	movs	r1, #109	@ 0x6d
 80041ba:	f24d 6033 	movw	r0, #54835	@ 0xd633
 80041be:	f7fc fbe7 	bl	8000990 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 80041c2:	2155      	movs	r1, #85	@ 0x55
 80041c4:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 80041c8:	f7fc fbe2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80041cc:	21aa      	movs	r1, #170	@ 0xaa
 80041ce:	f24f 0001 	movw	r0, #61441	@ 0xf001
 80041d2:	f7fc fbdd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80041d6:	2152      	movs	r1, #82	@ 0x52
 80041d8:	f24f 0002 	movw	r0, #61442	@ 0xf002
 80041dc:	f7fc fbd8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80041e0:	2108      	movs	r1, #8
 80041e2:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80041e6:	f7fc fbd3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 80041ea:	2100      	movs	r1, #0
 80041ec:	f24f 0004 	movw	r0, #61444	@ 0xf004
 80041f0:	f7fc fbce 	bl	8000990 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80041f4:	21cc      	movs	r1, #204	@ 0xcc
 80041f6:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 80041fa:	f7fc fbc9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80041fe:	2100      	movs	r1, #0
 8004200:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8004204:	f7fc fbc4 	bl	8000990 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8004208:	2105      	movs	r1, #5
 800420a:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 800420e:	f7fc fbbf 	bl	8000990 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8004212:	2170      	movs	r1, #112	@ 0x70
 8004214:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8004218:	f7fc fbba 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 800421c:	2170      	movs	r1, #112	@ 0x70
 800421e:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8004222:	f7fc fbb5 	bl	8000990 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8004226:	2101      	movs	r1, #1
 8004228:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 800422c:	f7fc fbb0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8004230:	2103      	movs	r1, #3
 8004232:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8004236:	f7fc fbab 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 800423a:	2103      	movs	r1, #3
 800423c:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8004240:	f7fc fba6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8004244:	2103      	movs	r1, #3
 8004246:	f64b 0003 	movw	r0, #47107	@ 0xb803
 800424a:	f7fc fba1 	bl	8000990 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 800424e:	2102      	movs	r1, #2
 8004250:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8004254:	f7fc fb9c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004258:	2100      	movs	r1, #0
 800425a:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 800425e:	f7fc fb97 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004262:	2100      	movs	r1, #0
 8004264:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8004268:	f7fc fb92 	bl	8000990 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800426c:	21d0      	movs	r1, #208	@ 0xd0
 800426e:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 8004272:	f7fc fb8d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8004276:	2102      	movs	r1, #2
 8004278:	f64c 1001 	movw	r0, #51457	@ 0xc901
 800427c:	f7fc fb88 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004280:	2150      	movs	r1, #80	@ 0x50
 8004282:	f64c 1002 	movw	r0, #51458	@ 0xc902
 8004286:	f7fc fb83 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800428a:	2150      	movs	r1, #80	@ 0x50
 800428c:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8004290:	f7fc fb7e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004294:	2150      	movs	r1, #80	@ 0x50
 8004296:	f64c 1004 	movw	r0, #51460	@ 0xc904
 800429a:	f7fc fb79 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800429e:	2100      	movs	r1, #0
 80042a0:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 80042a4:	f7fc fb74 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 80042a8:	2155      	movs	r1, #85	@ 0x55
 80042aa:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 80042ae:	f7fc fb6f 	bl	8000990 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 80042b2:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 80042b6:	f7fc fadf 	bl	8000878 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 80042ba:	2001      	movs	r0, #1
 80042bc:	f002 fa2a 	bl	8006714 <HAL_Delay>
		LCD_WR_REG(0x2900);
 80042c0:	f44f 5024 	mov.w	r0, #10496	@ 0x2900
 80042c4:	f7fc fad8 	bl	8000878 <LCD_WR_REG>
 80042c8:	f001 bd18 	b.w	8005cfc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 80042cc:	4bec      	ldr	r3, [pc, #944]	@ (8004680 <LCD_Init+0x27b8>)
 80042ce:	889b      	ldrh	r3, [r3, #4]
 80042d0:	f249 3225 	movw	r2, #37669	@ 0x9325
 80042d4:	4293      	cmp	r3, r2
 80042d6:	f040 80d7 	bne.w	8004488 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 80042da:	f647 01f0 	movw	r1, #30960	@ 0x78f0
 80042de:	20e5      	movs	r0, #229	@ 0xe5
 80042e0:	f7fc fb56 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 80042e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042e8:	2001      	movs	r0, #1
 80042ea:	f7fc fb51 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80042ee:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80042f2:	2002      	movs	r0, #2
 80042f4:	f7fc fb4c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80042f8:	f241 0130 	movw	r1, #4144	@ 0x1030
 80042fc:	2003      	movs	r0, #3
 80042fe:	f7fc fb47 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004302:	2100      	movs	r1, #0
 8004304:	2004      	movs	r0, #4
 8004306:	f7fc fb43 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800430a:	f240 2102 	movw	r1, #514	@ 0x202
 800430e:	2008      	movs	r0, #8
 8004310:	f7fc fb3e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004314:	2100      	movs	r1, #0
 8004316:	2009      	movs	r0, #9
 8004318:	f7fc fb3a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 800431c:	2100      	movs	r1, #0
 800431e:	200a      	movs	r0, #10
 8004320:	f7fc fb36 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004324:	2100      	movs	r1, #0
 8004326:	200c      	movs	r0, #12
 8004328:	f7fc fb32 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 800432c:	2100      	movs	r1, #0
 800432e:	200d      	movs	r0, #13
 8004330:	f7fc fb2e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004334:	2100      	movs	r1, #0
 8004336:	200f      	movs	r0, #15
 8004338:	f7fc fb2a 	bl	8000990 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 800433c:	2100      	movs	r1, #0
 800433e:	2010      	movs	r0, #16
 8004340:	f7fc fb26 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004344:	2107      	movs	r1, #7
 8004346:	2011      	movs	r0, #17
 8004348:	f7fc fb22 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800434c:	2100      	movs	r1, #0
 800434e:	2012      	movs	r0, #18
 8004350:	f7fc fb1e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004354:	2100      	movs	r1, #0
 8004356:	2013      	movs	r0, #19
 8004358:	f7fc fb1a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 800435c:	2100      	movs	r1, #0
 800435e:	2007      	movs	r0, #7
 8004360:	f7fc fb16 	bl	8000990 <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010, 0x1690);
 8004364:	f241 6190 	movw	r1, #5776	@ 0x1690
 8004368:	2010      	movs	r0, #16
 800436a:	f7fc fb11 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800436e:	f240 2127 	movw	r1, #551	@ 0x227
 8004372:	2011      	movs	r0, #17
 8004374:	f7fc fb0c 	bl	8000990 <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004378:	219d      	movs	r1, #157	@ 0x9d
 800437a:	2012      	movs	r0, #18
 800437c:	f7fc fb08 	bl	8000990 <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004380:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8004384:	2013      	movs	r0, #19
 8004386:	f7fc fb03 	bl	8000990 <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800438a:	2125      	movs	r1, #37	@ 0x25
 800438c:	2029      	movs	r0, #41	@ 0x29
 800438e:	f7fc faff 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004392:	210d      	movs	r1, #13
 8004394:	202b      	movs	r0, #43	@ 0x2b
 8004396:	f7fc fafb 	bl	8000990 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800439a:	2107      	movs	r1, #7
 800439c:	2030      	movs	r0, #48	@ 0x30
 800439e:	f7fc faf7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 80043a2:	f240 3103 	movw	r1, #771	@ 0x303
 80043a6:	2031      	movs	r0, #49	@ 0x31
 80043a8:	f7fc faf2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 80043ac:	2103      	movs	r1, #3
 80043ae:	2032      	movs	r0, #50	@ 0x32
 80043b0:	f7fc faee 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 80043b4:	f240 2106 	movw	r1, #518	@ 0x206
 80043b8:	2035      	movs	r0, #53	@ 0x35
 80043ba:	f7fc fae9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 80043be:	2108      	movs	r1, #8
 80043c0:	2036      	movs	r0, #54	@ 0x36
 80043c2:	f7fc fae5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 80043c6:	f240 4106 	movw	r1, #1030	@ 0x406
 80043ca:	2037      	movs	r0, #55	@ 0x37
 80043cc:	f7fc fae0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 80043d0:	f44f 7141 	mov.w	r1, #772	@ 0x304
 80043d4:	2038      	movs	r0, #56	@ 0x38
 80043d6:	f7fc fadb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 80043da:	2107      	movs	r1, #7
 80043dc:	2039      	movs	r0, #57	@ 0x39
 80043de:	f7fc fad7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 80043e2:	f240 6102 	movw	r1, #1538	@ 0x602
 80043e6:	203c      	movs	r0, #60	@ 0x3c
 80043e8:	f7fc fad2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 80043ec:	2108      	movs	r1, #8
 80043ee:	203d      	movs	r0, #61	@ 0x3d
 80043f0:	f7fc face 	bl	8000990 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80043f4:	2100      	movs	r1, #0
 80043f6:	2050      	movs	r0, #80	@ 0x50
 80043f8:	f7fc faca 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80043fc:	21ef      	movs	r1, #239	@ 0xef
 80043fe:	2051      	movs	r0, #81	@ 0x51
 8004400:	f7fc fac6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004404:	2100      	movs	r1, #0
 8004406:	2052      	movs	r0, #82	@ 0x52
 8004408:	f7fc fac2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800440c:	f240 113f 	movw	r1, #319	@ 0x13f
 8004410:	2053      	movs	r0, #83	@ 0x53
 8004412:	f7fc fabd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8004416:	f44f 4127 	mov.w	r1, #42752	@ 0xa700
 800441a:	2060      	movs	r0, #96	@ 0x60
 800441c:	f7fc fab8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004420:	2101      	movs	r1, #1
 8004422:	2061      	movs	r0, #97	@ 0x61
 8004424:	f7fc fab4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004428:	2100      	movs	r1, #0
 800442a:	206a      	movs	r0, #106	@ 0x6a
 800442c:	f7fc fab0 	bl	8000990 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004430:	2100      	movs	r1, #0
 8004432:	2080      	movs	r0, #128	@ 0x80
 8004434:	f7fc faac 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004438:	2100      	movs	r1, #0
 800443a:	2081      	movs	r0, #129	@ 0x81
 800443c:	f7fc faa8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004440:	2100      	movs	r1, #0
 8004442:	2082      	movs	r0, #130	@ 0x82
 8004444:	f7fc faa4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004448:	2100      	movs	r1, #0
 800444a:	2083      	movs	r0, #131	@ 0x83
 800444c:	f7fc faa0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004450:	2100      	movs	r1, #0
 8004452:	2084      	movs	r0, #132	@ 0x84
 8004454:	f7fc fa9c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004458:	2100      	movs	r1, #0
 800445a:	2085      	movs	r0, #133	@ 0x85
 800445c:	f7fc fa98 	bl	8000990 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004460:	2110      	movs	r1, #16
 8004462:	2090      	movs	r0, #144	@ 0x90
 8004464:	f7fc fa94 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004468:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800446c:	2092      	movs	r0, #146	@ 0x92
 800446e:	f7fc fa8f 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004472:	f240 1133 	movw	r1, #307	@ 0x133
 8004476:	2007      	movs	r0, #7
 8004478:	f7fc fa8a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800447c:	2122      	movs	r1, #34	@ 0x22
 800447e:	2000      	movs	r0, #0
 8004480:	f7fc fa86 	bl	8000990 <LCD_WriteReg>
 8004484:	f001 bc3a 	b.w	8005cfc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004488:	4b7d      	ldr	r3, [pc, #500]	@ (8004680 <LCD_Init+0x27b8>)
 800448a:	889b      	ldrh	r3, [r3, #4]
 800448c:	f249 3228 	movw	r2, #37672	@ 0x9328
 8004490:	4293      	cmp	r3, r2
 8004492:	f040 80f7 	bne.w	8004684 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004496:	f241 018f 	movw	r1, #4239	@ 0x108f
 800449a:	20ec      	movs	r0, #236	@ 0xec
 800449c:	f7fc fa78 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80044a0:	f241 2134 	movw	r1, #4660	@ 0x1234
 80044a4:	20ef      	movs	r0, #239	@ 0xef
 80044a6:	f7fc fa73 	bl	8000990 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 80044aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80044ae:	2001      	movs	r0, #1
 80044b0:	f7fc fa6e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 80044b4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80044b8:	2002      	movs	r0, #2
 80044ba:	f7fc fa69 	bl	8000990 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80044be:	f241 0130 	movw	r1, #4144	@ 0x1030
 80044c2:	2003      	movs	r0, #3
 80044c4:	f7fc fa64 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80044c8:	2100      	movs	r1, #0
 80044ca:	2004      	movs	r0, #4
 80044cc:	f7fc fa60 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80044d0:	f240 2102 	movw	r1, #514	@ 0x202
 80044d4:	2008      	movs	r0, #8
 80044d6:	f7fc fa5b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80044da:	2100      	movs	r1, #0
 80044dc:	2009      	movs	r0, #9
 80044de:	f7fc fa57 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 80044e2:	2100      	movs	r1, #0
 80044e4:	200a      	movs	r0, #10
 80044e6:	f7fc fa53 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80044ea:	2101      	movs	r1, #1
 80044ec:	200c      	movs	r0, #12
 80044ee:	f7fc fa4f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80044f2:	2100      	movs	r1, #0
 80044f4:	200d      	movs	r0, #13
 80044f6:	f7fc fa4b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80044fa:	2100      	movs	r1, #0
 80044fc:	200f      	movs	r0, #15
 80044fe:	f7fc fa47 	bl	8000990 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8004502:	2100      	movs	r1, #0
 8004504:	2010      	movs	r0, #16
 8004506:	f7fc fa43 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800450a:	2107      	movs	r1, #7
 800450c:	2011      	movs	r0, #17
 800450e:	f7fc fa3f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004512:	2100      	movs	r1, #0
 8004514:	2012      	movs	r0, #18
 8004516:	f7fc fa3b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800451a:	2100      	movs	r1, #0
 800451c:	2013      	movs	r0, #19
 800451e:	f7fc fa37 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8004522:	2101      	movs	r1, #1
 8004524:	2007      	movs	r0, #7
 8004526:	f7fc fa33 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 800452a:	2032      	movs	r0, #50	@ 0x32
 800452c:	f002 f8f2 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004530:	f241 4190 	movw	r1, #5264	@ 0x1490
 8004534:	2010      	movs	r0, #16
 8004536:	f7fc fa2b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800453a:	f240 2127 	movw	r1, #551	@ 0x227
 800453e:	2011      	movs	r0, #17
 8004540:	f7fc fa26 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004544:	2032      	movs	r0, #50	@ 0x32
 8004546:	f002 f8e5 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 800454a:	218a      	movs	r1, #138	@ 0x8a
 800454c:	2012      	movs	r0, #18
 800454e:	f7fc fa1f 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004552:	2032      	movs	r0, #50	@ 0x32
 8004554:	f002 f8de 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004558:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 800455c:	2013      	movs	r0, #19
 800455e:	f7fc fa17 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004562:	2106      	movs	r1, #6
 8004564:	2029      	movs	r0, #41	@ 0x29
 8004566:	f7fc fa13 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800456a:	210d      	movs	r1, #13
 800456c:	202b      	movs	r0, #43	@ 0x2b
 800456e:	f7fc fa0f 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004572:	2032      	movs	r0, #50	@ 0x32
 8004574:	f002 f8ce 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004578:	2100      	movs	r1, #0
 800457a:	2020      	movs	r0, #32
 800457c:	f7fc fa08 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004580:	2100      	movs	r1, #0
 8004582:	2021      	movs	r0, #33	@ 0x21
 8004584:	f7fc fa04 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004588:	2032      	movs	r0, #50	@ 0x32
 800458a:	f002 f8c3 	bl	8006714 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800458e:	2100      	movs	r1, #0
 8004590:	2030      	movs	r0, #48	@ 0x30
 8004592:	f7fc f9fd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004596:	f240 6104 	movw	r1, #1540	@ 0x604
 800459a:	2031      	movs	r0, #49	@ 0x31
 800459c:	f7fc f9f8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80045a0:	f240 3105 	movw	r1, #773	@ 0x305
 80045a4:	2032      	movs	r0, #50	@ 0x32
 80045a6:	f7fc f9f3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 80045aa:	2100      	movs	r1, #0
 80045ac:	2035      	movs	r0, #53	@ 0x35
 80045ae:	f7fc f9ef 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 80045b2:	f640 4109 	movw	r1, #3081	@ 0xc09
 80045b6:	2036      	movs	r0, #54	@ 0x36
 80045b8:	f7fc f9ea 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 80045bc:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80045c0:	2037      	movs	r0, #55	@ 0x37
 80045c2:	f7fc f9e5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80045c6:	f240 3101 	movw	r1, #769	@ 0x301
 80045ca:	2038      	movs	r0, #56	@ 0x38
 80045cc:	f7fc f9e0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80045d0:	f240 7107 	movw	r1, #1799	@ 0x707
 80045d4:	2039      	movs	r0, #57	@ 0x39
 80045d6:	f7fc f9db 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 80045da:	2100      	movs	r1, #0
 80045dc:	203c      	movs	r0, #60	@ 0x3c
 80045de:	f7fc f9d7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 80045e2:	f640 210a 	movw	r1, #2570	@ 0xa0a
 80045e6:	203d      	movs	r0, #61	@ 0x3d
 80045e8:	f7fc f9d2 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 80045ec:	2032      	movs	r0, #50	@ 0x32
 80045ee:	f002 f891 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80045f2:	2100      	movs	r1, #0
 80045f4:	2050      	movs	r0, #80	@ 0x50
 80045f6:	f7fc f9cb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80045fa:	21ef      	movs	r1, #239	@ 0xef
 80045fc:	2051      	movs	r0, #81	@ 0x51
 80045fe:	f7fc f9c7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8004602:	2100      	movs	r1, #0
 8004604:	2052      	movs	r0, #82	@ 0x52
 8004606:	f7fc f9c3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 800460a:	f240 113f 	movw	r1, #319	@ 0x13f
 800460e:	2053      	movs	r0, #83	@ 0x53
 8004610:	f7fc f9be 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8004614:	f44f 4127 	mov.w	r1, #42752	@ 0xa700
 8004618:	2060      	movs	r0, #96	@ 0x60
 800461a:	f7fc f9b9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800461e:	2101      	movs	r1, #1
 8004620:	2061      	movs	r0, #97	@ 0x61
 8004622:	f7fc f9b5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004626:	2100      	movs	r1, #0
 8004628:	206a      	movs	r0, #106	@ 0x6a
 800462a:	f7fc f9b1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800462e:	2100      	movs	r1, #0
 8004630:	2080      	movs	r0, #128	@ 0x80
 8004632:	f7fc f9ad 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004636:	2100      	movs	r1, #0
 8004638:	2081      	movs	r0, #129	@ 0x81
 800463a:	f7fc f9a9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800463e:	2100      	movs	r1, #0
 8004640:	2082      	movs	r0, #130	@ 0x82
 8004642:	f7fc f9a5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004646:	2100      	movs	r1, #0
 8004648:	2083      	movs	r0, #131	@ 0x83
 800464a:	f7fc f9a1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800464e:	2100      	movs	r1, #0
 8004650:	2084      	movs	r0, #132	@ 0x84
 8004652:	f7fc f99d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004656:	2100      	movs	r1, #0
 8004658:	2085      	movs	r0, #133	@ 0x85
 800465a:	f7fc f999 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 800465e:	2110      	movs	r1, #16
 8004660:	2090      	movs	r0, #144	@ 0x90
 8004662:	f7fc f995 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004666:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800466a:	2092      	movs	r0, #146	@ 0x92
 800466c:	f7fc f990 	bl	8000990 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004670:	f240 1133 	movw	r1, #307	@ 0x133
 8004674:	2007      	movs	r0, #7
 8004676:	f7fc f98b 	bl	8000990 <LCD_WriteReg>
 800467a:	f001 bb3f 	b.w	8005cfc <LCD_Init+0x3e34>
 800467e:	bf00      	nop
 8004680:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x9320) //测试OK.
 8004684:	4bce      	ldr	r3, [pc, #824]	@ (80049c0 <LCD_Init+0x2af8>)
 8004686:	889b      	ldrh	r3, [r3, #4]
 8004688:	f249 3220 	movw	r2, #37664	@ 0x9320
 800468c:	4293      	cmp	r3, r2
 800468e:	f040 80ad 	bne.w	80047ec <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004692:	2100      	movs	r1, #0
 8004694:	2000      	movs	r0, #0
 8004696:	f7fc f97b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800469a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800469e:	2001      	movs	r0, #1
 80046a0:	f7fc f976 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80046a4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80046a8:	2002      	movs	r0, #2
 80046aa:	f7fc f971 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 80046ae:	f241 0130 	movw	r1, #4144	@ 0x1030
 80046b2:	2003      	movs	r0, #3
 80046b4:	f7fc f96c 	bl	8000990 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80046b8:	2100      	movs	r1, #0
 80046ba:	2004      	movs	r0, #4
 80046bc:	f7fc f968 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80046c0:	f240 2102 	movw	r1, #514	@ 0x202
 80046c4:	2008      	movs	r0, #8
 80046c6:	f7fc f963 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80046ca:	2100      	movs	r1, #0
 80046cc:	2009      	movs	r0, #9
 80046ce:	f7fc f95f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 80046d2:	2100      	movs	r1, #0
 80046d4:	200a      	movs	r0, #10
 80046d6:	f7fc f95b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80046da:	2101      	movs	r1, #1
 80046dc:	200c      	movs	r0, #12
 80046de:	f7fc f957 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 80046e2:	2100      	movs	r1, #0
 80046e4:	200d      	movs	r0, #13
 80046e6:	f7fc f953 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80046ea:	2100      	movs	r1, #0
 80046ec:	200f      	movs	r0, #15
 80046ee:	f7fc f94f 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 80046f2:	2032      	movs	r0, #50	@ 0x32
 80046f4:	f002 f80e 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80046f8:	f240 1101 	movw	r1, #257	@ 0x101
 80046fc:	2007      	movs	r0, #7
 80046fe:	f7fc f947 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004702:	2032      	movs	r0, #50	@ 0x32
 8004704:	f002 f806 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004708:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800470c:	2010      	movs	r0, #16
 800470e:	f7fc f93f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8004712:	2107      	movs	r1, #7
 8004714:	2011      	movs	r0, #17
 8004716:	f7fc f93b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800471a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800471e:	2012      	movs	r0, #18
 8004720:	f7fc f936 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8004724:	f44f 6130 	mov.w	r1, #2816	@ 0xb00
 8004728:	2013      	movs	r0, #19
 800472a:	f7fc f931 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800472e:	2100      	movs	r1, #0
 8004730:	2029      	movs	r0, #41	@ 0x29
 8004732:	f7fc f92d 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8004736:	f244 0110 	movw	r1, #16400	@ 0x4010
 800473a:	202b      	movs	r0, #43	@ 0x2b
 800473c:	f7fc f928 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004740:	2100      	movs	r1, #0
 8004742:	2050      	movs	r0, #80	@ 0x50
 8004744:	f7fc f924 	bl	8000990 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004748:	21ef      	movs	r1, #239	@ 0xef
 800474a:	2051      	movs	r0, #81	@ 0x51
 800474c:	f7fc f920 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004750:	2100      	movs	r1, #0
 8004752:	2052      	movs	r0, #82	@ 0x52
 8004754:	f7fc f91c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004758:	f240 113f 	movw	r1, #319	@ 0x13f
 800475c:	2053      	movs	r0, #83	@ 0x53
 800475e:	f7fc f917 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004762:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004766:	2060      	movs	r0, #96	@ 0x60
 8004768:	f7fc f912 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800476c:	2101      	movs	r1, #1
 800476e:	2061      	movs	r0, #97	@ 0x61
 8004770:	f7fc f90e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004774:	2100      	movs	r1, #0
 8004776:	206a      	movs	r0, #106	@ 0x6a
 8004778:	f7fc f90a 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800477c:	2100      	movs	r1, #0
 800477e:	2080      	movs	r0, #128	@ 0x80
 8004780:	f7fc f906 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004784:	2100      	movs	r1, #0
 8004786:	2081      	movs	r0, #129	@ 0x81
 8004788:	f7fc f902 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800478c:	2100      	movs	r1, #0
 800478e:	2082      	movs	r0, #130	@ 0x82
 8004790:	f7fc f8fe 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004794:	2100      	movs	r1, #0
 8004796:	2083      	movs	r0, #131	@ 0x83
 8004798:	f7fc f8fa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800479c:	2100      	movs	r1, #0
 800479e:	2084      	movs	r0, #132	@ 0x84
 80047a0:	f7fc f8f6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80047a4:	2100      	movs	r1, #0
 80047a6:	2085      	movs	r0, #133	@ 0x85
 80047a8:	f7fc f8f2 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 80047ac:	2110      	movs	r1, #16
 80047ae:	2090      	movs	r0, #144	@ 0x90
 80047b0:	f7fc f8ee 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80047b4:	2100      	movs	r1, #0
 80047b6:	2092      	movs	r0, #146	@ 0x92
 80047b8:	f7fc f8ea 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80047bc:	2101      	movs	r1, #1
 80047be:	2093      	movs	r0, #147	@ 0x93
 80047c0:	f7fc f8e6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80047c4:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80047c8:	2095      	movs	r0, #149	@ 0x95
 80047ca:	f7fc f8e1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80047ce:	2100      	movs	r1, #0
 80047d0:	2097      	movs	r0, #151	@ 0x97
 80047d2:	f7fc f8dd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 80047d6:	2100      	movs	r1, #0
 80047d8:	2098      	movs	r0, #152	@ 0x98
 80047da:	f7fc f8d9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 80047de:	f240 1173 	movw	r1, #371	@ 0x173
 80047e2:	2007      	movs	r0, #7
 80047e4:	f7fc f8d4 	bl	8000990 <LCD_WriteReg>
 80047e8:	f001 ba88 	b.w	8005cfc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 80047ec:	4b74      	ldr	r3, [pc, #464]	@ (80049c0 <LCD_Init+0x2af8>)
 80047ee:	889b      	ldrh	r3, [r3, #4]
 80047f0:	f249 3231 	movw	r2, #37681	@ 0x9331
 80047f4:	4293      	cmp	r3, r2
 80047f6:	f040 80e5 	bne.w	80049c4 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80047fa:	f241 0114 	movw	r1, #4116	@ 0x1014
 80047fe:	20e7      	movs	r0, #231	@ 0xe7
 8004800:	f7fc f8c6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004804:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004808:	2001      	movs	r0, #1
 800480a:	f7fc f8c1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 800480e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004812:	2002      	movs	r0, #2
 8004814:	f7fc f8bc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004818:	f241 0138 	movw	r1, #4152	@ 0x1038
 800481c:	2003      	movs	r0, #3
 800481e:	f7fc f8b7 	bl	8000990 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004822:	f240 2102 	movw	r1, #514	@ 0x202
 8004826:	2008      	movs	r0, #8
 8004828:	f7fc f8b2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800482c:	2100      	movs	r1, #0
 800482e:	2009      	movs	r0, #9
 8004830:	f7fc f8ae 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004834:	2100      	movs	r1, #0
 8004836:	200a      	movs	r0, #10
 8004838:	f7fc f8aa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800483c:	2100      	movs	r1, #0
 800483e:	200c      	movs	r0, #12
 8004840:	f7fc f8a6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004844:	2100      	movs	r1, #0
 8004846:	200d      	movs	r0, #13
 8004848:	f7fc f8a2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 800484c:	2100      	movs	r1, #0
 800484e:	200f      	movs	r0, #15
 8004850:	f7fc f89e 	bl	8000990 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004854:	2100      	movs	r1, #0
 8004856:	2010      	movs	r0, #16
 8004858:	f7fc f89a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800485c:	2107      	movs	r1, #7
 800485e:	2011      	movs	r0, #17
 8004860:	f7fc f896 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004864:	2100      	movs	r1, #0
 8004866:	2012      	movs	r0, #18
 8004868:	f7fc f892 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800486c:	2100      	movs	r1, #0
 800486e:	2013      	movs	r0, #19
 8004870:	f7fc f88e 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004874:	20c8      	movs	r0, #200	@ 0xc8
 8004876:	f001 ff4d 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800487a:	f241 6190 	movw	r1, #5776	@ 0x1690
 800487e:	2010      	movs	r0, #16
 8004880:	f7fc f886 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004884:	f240 2127 	movw	r1, #551	@ 0x227
 8004888:	2011      	movs	r0, #17
 800488a:	f7fc f881 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800488e:	2032      	movs	r0, #50	@ 0x32
 8004890:	f001 ff40 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004894:	210c      	movs	r1, #12
 8004896:	2012      	movs	r0, #18
 8004898:	f7fc f87a 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800489c:	2032      	movs	r0, #50	@ 0x32
 800489e:	f001 ff39 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 80048a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80048a6:	2013      	movs	r0, #19
 80048a8:	f7fc f872 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 80048ac:	2111      	movs	r1, #17
 80048ae:	2029      	movs	r0, #41	@ 0x29
 80048b0:	f7fc f86e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80048b4:	210b      	movs	r1, #11
 80048b6:	202b      	movs	r0, #43	@ 0x2b
 80048b8:	f7fc f86a 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80048bc:	2032      	movs	r0, #50	@ 0x32
 80048be:	f001 ff29 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80048c2:	2100      	movs	r1, #0
 80048c4:	2020      	movs	r0, #32
 80048c6:	f7fc f863 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80048ca:	f240 113f 	movw	r1, #319	@ 0x13f
 80048ce:	2021      	movs	r0, #33	@ 0x21
 80048d0:	f7fc f85e 	bl	8000990 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80048d4:	2100      	movs	r1, #0
 80048d6:	2030      	movs	r0, #48	@ 0x30
 80048d8:	f7fc f85a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80048dc:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80048e0:	2031      	movs	r0, #49	@ 0x31
 80048e2:	f7fc f855 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80048e6:	2100      	movs	r1, #0
 80048e8:	2032      	movs	r0, #50	@ 0x32
 80048ea:	f7fc f851 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80048ee:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80048f2:	2035      	movs	r0, #53	@ 0x35
 80048f4:	f7fc f84c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80048f8:	f241 610a 	movw	r1, #5642	@ 0x160a
 80048fc:	2036      	movs	r0, #54	@ 0x36
 80048fe:	f7fc f847 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004902:	f240 7107 	movw	r1, #1799	@ 0x707
 8004906:	2037      	movs	r0, #55	@ 0x37
 8004908:	f7fc f842 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 800490c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004910:	2038      	movs	r0, #56	@ 0x38
 8004912:	f7fc f83d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004916:	f240 7107 	movw	r1, #1799	@ 0x707
 800491a:	2039      	movs	r0, #57	@ 0x39
 800491c:	f7fc f838 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004920:	f240 4102 	movw	r1, #1026	@ 0x402
 8004924:	203c      	movs	r0, #60	@ 0x3c
 8004926:	f7fc f833 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800492a:	f640 410f 	movw	r1, #3087	@ 0xc0f
 800492e:	203d      	movs	r0, #61	@ 0x3d
 8004930:	f7fc f82e 	bl	8000990 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004934:	2100      	movs	r1, #0
 8004936:	2050      	movs	r0, #80	@ 0x50
 8004938:	f7fc f82a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800493c:	21ef      	movs	r1, #239	@ 0xef
 800493e:	2051      	movs	r0, #81	@ 0x51
 8004940:	f7fc f826 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004944:	2100      	movs	r1, #0
 8004946:	2052      	movs	r0, #82	@ 0x52
 8004948:	f7fc f822 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800494c:	f240 113f 	movw	r1, #319	@ 0x13f
 8004950:	2053      	movs	r0, #83	@ 0x53
 8004952:	f7fc f81d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004956:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 800495a:	2060      	movs	r0, #96	@ 0x60
 800495c:	f7fc f818 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8004960:	2101      	movs	r1, #1
 8004962:	2061      	movs	r0, #97	@ 0x61
 8004964:	f7fc f814 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004968:	2100      	movs	r1, #0
 800496a:	206a      	movs	r0, #106	@ 0x6a
 800496c:	f7fc f810 	bl	8000990 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004970:	2100      	movs	r1, #0
 8004972:	2080      	movs	r0, #128	@ 0x80
 8004974:	f7fc f80c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004978:	2100      	movs	r1, #0
 800497a:	2081      	movs	r0, #129	@ 0x81
 800497c:	f7fc f808 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004980:	2100      	movs	r1, #0
 8004982:	2082      	movs	r0, #130	@ 0x82
 8004984:	f7fc f804 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004988:	2100      	movs	r1, #0
 800498a:	2083      	movs	r0, #131	@ 0x83
 800498c:	f7fc f800 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004990:	2100      	movs	r1, #0
 8004992:	2084      	movs	r0, #132	@ 0x84
 8004994:	f7fb fffc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004998:	2100      	movs	r1, #0
 800499a:	2085      	movs	r0, #133	@ 0x85
 800499c:	f7fb fff8 	bl	8000990 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 80049a0:	2110      	movs	r1, #16
 80049a2:	2090      	movs	r0, #144	@ 0x90
 80049a4:	f7fb fff4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80049a8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80049ac:	2092      	movs	r0, #146	@ 0x92
 80049ae:	f7fb ffef 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80049b2:	f240 1133 	movw	r1, #307	@ 0x133
 80049b6:	2007      	movs	r0, #7
 80049b8:	f7fb ffea 	bl	8000990 <LCD_WriteReg>
 80049bc:	f001 b99e 	b.w	8005cfc <LCD_Init+0x3e34>
 80049c0:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x5408) {
 80049c4:	4be2      	ldr	r3, [pc, #904]	@ (8004d50 <LCD_Init+0x2e88>)
 80049c6:	889b      	ldrh	r3, [r3, #4]
 80049c8:	f245 4208 	movw	r2, #21512	@ 0x5408
 80049cc:	4293      	cmp	r3, r2
 80049ce:	f040 80a3 	bne.w	8004b18 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 80049d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80049d6:	2001      	movs	r0, #1
 80049d8:	f7fb ffda 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 80049dc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80049e0:	2002      	movs	r0, #2
 80049e2:	f7fb ffd5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 80049e6:	f241 0130 	movw	r1, #4144	@ 0x1030
 80049ea:	2003      	movs	r0, #3
 80049ec:	f7fb ffd0 	bl	8000990 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 80049f0:	2100      	movs	r1, #0
 80049f2:	2004      	movs	r0, #4
 80049f4:	f7fb ffcc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 80049f8:	f240 2107 	movw	r1, #519	@ 0x207
 80049fc:	2008      	movs	r0, #8
 80049fe:	f7fb ffc7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004a02:	2100      	movs	r1, #0
 8004a04:	2009      	movs	r0, #9
 8004a06:	f7fb ffc3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	200a      	movs	r0, #10
 8004a0e:	f7fb ffbf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004a12:	2100      	movs	r1, #0
 8004a14:	200c      	movs	r0, #12
 8004a16:	f7fb ffbb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	200d      	movs	r0, #13
 8004a1e:	f7fb ffb7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004a22:	2100      	movs	r1, #0
 8004a24:	200f      	movs	r0, #15
 8004a26:	f7fb ffb3 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004a2a:	2014      	movs	r0, #20
 8004a2c:	f001 fe72 	bl	8006714 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004a30:	f241 61b0 	movw	r1, #5808	@ 0x16b0
 8004a34:	2010      	movs	r0, #16
 8004a36:	f7fb ffab 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	2011      	movs	r0, #17
 8004a3e:	f7fb ffa7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004a42:	2101      	movs	r1, #1
 8004a44:	2017      	movs	r0, #23
 8004a46:	f7fb ffa3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004a4a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8004a4e:	2012      	movs	r0, #18
 8004a50:	f7fb ff9e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004a54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a58:	2013      	movs	r0, #19
 8004a5a:	f7fb ff99 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004a5e:	2109      	movs	r1, #9
 8004a60:	2029      	movs	r0, #41	@ 0x29
 8004a62:	f7fb ff95 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004a66:	2109      	movs	r1, #9
 8004a68:	202a      	movs	r0, #42	@ 0x2a
 8004a6a:	f7fb ff91 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004a6e:	2100      	movs	r1, #0
 8004a70:	20a4      	movs	r0, #164	@ 0xa4
 8004a72:	f7fb ff8d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004a76:	2100      	movs	r1, #0
 8004a78:	2050      	movs	r0, #80	@ 0x50
 8004a7a:	f7fb ff89 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004a7e:	21ef      	movs	r1, #239	@ 0xef
 8004a80:	2051      	movs	r0, #81	@ 0x51
 8004a82:	f7fb ff85 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004a86:	2100      	movs	r1, #0
 8004a88:	2052      	movs	r0, #82	@ 0x52
 8004a8a:	f7fb ff81 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004a8e:	f240 113f 	movw	r1, #319	@ 0x13f
 8004a92:	2053      	movs	r0, #83	@ 0x53
 8004a94:	f7fb ff7c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004a98:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004a9c:	2060      	movs	r0, #96	@ 0x60
 8004a9e:	f7fb ff77 	bl	8000990 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	2061      	movs	r0, #97	@ 0x61
 8004aa6:	f7fb ff73 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004aaa:	2100      	movs	r1, #0
 8004aac:	206a      	movs	r0, #106	@ 0x6a
 8004aae:	f7fb ff6f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	2080      	movs	r0, #128	@ 0x80
 8004ab6:	f7fb ff6b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004aba:	2100      	movs	r1, #0
 8004abc:	2081      	movs	r0, #129	@ 0x81
 8004abe:	f7fb ff67 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	2082      	movs	r0, #130	@ 0x82
 8004ac6:	f7fb ff63 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004aca:	2100      	movs	r1, #0
 8004acc:	2083      	movs	r0, #131	@ 0x83
 8004ace:	f7fb ff5f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	2084      	movs	r0, #132	@ 0x84
 8004ad6:	f7fb ff5b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004ada:	2100      	movs	r1, #0
 8004adc:	2085      	movs	r0, #133	@ 0x85
 8004ade:	f7fb ff57 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004ae2:	2113      	movs	r1, #19
 8004ae4:	2090      	movs	r0, #144	@ 0x90
 8004ae6:	f7fb ff53 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004aea:	2100      	movs	r1, #0
 8004aec:	2092      	movs	r0, #146	@ 0x92
 8004aee:	f7fb ff4f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004af2:	2103      	movs	r1, #3
 8004af4:	2093      	movs	r0, #147	@ 0x93
 8004af6:	f7fb ff4b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004afa:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004afe:	2095      	movs	r0, #149	@ 0x95
 8004b00:	f7fb ff46 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004b04:	f240 1173 	movw	r1, #371	@ 0x173
 8004b08:	2007      	movs	r0, #7
 8004b0a:	f7fb ff41 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004b0e:	2032      	movs	r0, #50	@ 0x32
 8004b10:	f001 fe00 	bl	8006714 <HAL_Delay>
 8004b14:	f001 b8f2 	b.w	8005cfc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004b18:	4b8d      	ldr	r3, [pc, #564]	@ (8004d50 <LCD_Init+0x2e88>)
 8004b1a:	889b      	ldrh	r3, [r3, #4]
 8004b1c:	f241 5205 	movw	r2, #5381	@ 0x1505
 8004b20:	4293      	cmp	r3, r2
 8004b22:	f040 8117 	bne.w	8004d54 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004b26:	2100      	movs	r1, #0
 8004b28:	2007      	movs	r0, #7
 8004b2a:	f7fb ff31 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004b2e:	2032      	movs	r0, #50	@ 0x32
 8004b30:	f001 fdf0 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004b34:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8004b38:	2012      	movs	r0, #18
 8004b3a:	f7fb ff29 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004b3e:	2101      	movs	r1, #1
 8004b40:	20a4      	movs	r0, #164	@ 0xa4
 8004b42:	f7fb ff25 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004b46:	210f      	movs	r1, #15
 8004b48:	2008      	movs	r0, #8
 8004b4a:	f7fb ff21 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004b4e:	2108      	movs	r1, #8
 8004b50:	200a      	movs	r0, #10
 8004b52:	f7fb ff1d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004b56:	2108      	movs	r1, #8
 8004b58:	200d      	movs	r0, #13
 8004b5a:	f7fb ff19 	bl	8000990 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004b5e:	f240 7107 	movw	r1, #1799	@ 0x707
 8004b62:	2030      	movs	r0, #48	@ 0x30
 8004b64:	f7fb ff14 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004b68:	2107      	movs	r1, #7
 8004b6a:	2031      	movs	r0, #49	@ 0x31
 8004b6c:	f7fb ff10 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004b70:	f240 6103 	movw	r1, #1539	@ 0x603
 8004b74:	2032      	movs	r0, #50	@ 0x32
 8004b76:	f7fb ff0b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004b7a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004b7e:	2033      	movs	r0, #51	@ 0x33
 8004b80:	f7fb ff06 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004b84:	f240 2102 	movw	r1, #514	@ 0x202
 8004b88:	2034      	movs	r0, #52	@ 0x34
 8004b8a:	f7fb ff01 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004b8e:	2102      	movs	r1, #2
 8004b90:	2035      	movs	r0, #53	@ 0x35
 8004b92:	f7fb fefd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004b96:	f641 710f 	movw	r1, #7951	@ 0x1f0f
 8004b9a:	2036      	movs	r0, #54	@ 0x36
 8004b9c:	f7fb fef8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004ba0:	f240 7107 	movw	r1, #1799	@ 0x707
 8004ba4:	2037      	movs	r0, #55	@ 0x37
 8004ba6:	f7fb fef3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004baa:	2100      	movs	r1, #0
 8004bac:	2038      	movs	r0, #56	@ 0x38
 8004bae:	f7fb feef 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	2039      	movs	r0, #57	@ 0x39
 8004bb6:	f7fb feeb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004bba:	f240 7107 	movw	r1, #1799	@ 0x707
 8004bbe:	203a      	movs	r0, #58	@ 0x3a
 8004bc0:	f7fb fee6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	203b      	movs	r0, #59	@ 0x3b
 8004bc8:	f7fb fee2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004bcc:	2107      	movs	r1, #7
 8004bce:	203c      	movs	r0, #60	@ 0x3c
 8004bd0:	f7fb fede 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	203d      	movs	r0, #61	@ 0x3d
 8004bd8:	f7fb feda 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004bdc:	2032      	movs	r0, #50	@ 0x32
 8004bde:	f001 fd99 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004be2:	2101      	movs	r1, #1
 8004be4:	2007      	movs	r0, #7
 8004be6:	f7fb fed3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004bea:	2101      	movs	r1, #1
 8004bec:	2017      	movs	r0, #23
 8004bee:	f7fb fecf 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(50);
 8004bf2:	2032      	movs	r0, #50	@ 0x32
 8004bf4:	f001 fd8e 	bl	8006714 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004bf8:	f44f 51bd 	mov.w	r1, #6048	@ 0x17a0
 8004bfc:	2010      	movs	r0, #16
 8004bfe:	f7fb fec7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004c02:	f240 2117 	movw	r1, #535	@ 0x217
 8004c06:	2011      	movs	r0, #17
 8004c08:	f7fb fec2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004c0c:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8004c10:	2012      	movs	r0, #18
 8004c12:	f7fb febd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004c16:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8004c1a:	2013      	movs	r0, #19
 8004c1c:	f7fb feb8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004c20:	2100      	movs	r1, #0
 8004c22:	202a      	movs	r0, #42	@ 0x2a
 8004c24:	f7fb feb4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004c28:	210a      	movs	r1, #10
 8004c2a:	2029      	movs	r0, #41	@ 0x29
 8004c2c:	f7fb feb0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004c30:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8004c34:	2012      	movs	r0, #18
 8004c36:	f7fb feab 	bl	8000990 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	2050      	movs	r0, #80	@ 0x50
 8004c3e:	f7fb fea7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004c42:	21ef      	movs	r1, #239	@ 0xef
 8004c44:	2051      	movs	r0, #81	@ 0x51
 8004c46:	f7fb fea3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	2052      	movs	r0, #82	@ 0x52
 8004c4e:	f7fb fe9f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004c52:	f240 113f 	movw	r1, #319	@ 0x13f
 8004c56:	2053      	movs	r0, #83	@ 0x53
 8004c58:	f7fb fe9a 	bl	8000990 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004c5c:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004c60:	2060      	movs	r0, #96	@ 0x60
 8004c62:	f7fb fe95 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004c66:	2101      	movs	r1, #1
 8004c68:	2061      	movs	r0, #97	@ 0x61
 8004c6a:	f7fb fe91 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004c6e:	2100      	movs	r1, #0
 8004c70:	206a      	movs	r0, #106	@ 0x6a
 8004c72:	f7fb fe8d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004c76:	2100      	movs	r1, #0
 8004c78:	2080      	movs	r0, #128	@ 0x80
 8004c7a:	f7fb fe89 	bl	8000990 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004c7e:	2100      	movs	r1, #0
 8004c80:	2081      	movs	r0, #129	@ 0x81
 8004c82:	f7fb fe85 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004c86:	2100      	movs	r1, #0
 8004c88:	2082      	movs	r0, #130	@ 0x82
 8004c8a:	f7fb fe81 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004c8e:	2100      	movs	r1, #0
 8004c90:	2083      	movs	r0, #131	@ 0x83
 8004c92:	f7fb fe7d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004c96:	2100      	movs	r1, #0
 8004c98:	2084      	movs	r0, #132	@ 0x84
 8004c9a:	f7fb fe79 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	2085      	movs	r0, #133	@ 0x85
 8004ca2:	f7fb fe75 	bl	8000990 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004ca6:	2113      	movs	r1, #19
 8004ca8:	2090      	movs	r0, #144	@ 0x90
 8004caa:	f7fb fe71 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004cae:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004cb2:	2092      	movs	r0, #146	@ 0x92
 8004cb4:	f7fb fe6c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004cb8:	2105      	movs	r1, #5
 8004cba:	2093      	movs	r0, #147	@ 0x93
 8004cbc:	f7fb fe68 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	2095      	movs	r0, #149	@ 0x95
 8004cc4:	f7fb fe64 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004cc8:	2100      	movs	r1, #0
 8004cca:	2097      	movs	r0, #151	@ 0x97
 8004ccc:	f7fb fe60 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	2098      	movs	r0, #152	@ 0x98
 8004cd4:	f7fb fe5c 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004cd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cdc:	2001      	movs	r0, #1
 8004cde:	f7fb fe57 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004ce2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004ce6:	2002      	movs	r0, #2
 8004ce8:	f7fb fe52 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004cec:	f241 0138 	movw	r1, #4152	@ 0x1038
 8004cf0:	2003      	movs	r0, #3
 8004cf2:	f7fb fe4d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	2004      	movs	r0, #4
 8004cfa:	f7fb fe49 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	200c      	movs	r0, #12
 8004d02:	f7fb fe45 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004d06:	2100      	movs	r1, #0
 8004d08:	200f      	movs	r0, #15
 8004d0a:	f7fb fe41 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004d0e:	2100      	movs	r1, #0
 8004d10:	2020      	movs	r0, #32
 8004d12:	f7fb fe3d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004d16:	2100      	movs	r1, #0
 8004d18:	2021      	movs	r0, #33	@ 0x21
 8004d1a:	f7fb fe39 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004d1e:	2121      	movs	r1, #33	@ 0x21
 8004d20:	2007      	movs	r0, #7
 8004d22:	f7fb fe35 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004d26:	2014      	movs	r0, #20
 8004d28:	f001 fcf4 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004d2c:	2161      	movs	r1, #97	@ 0x61
 8004d2e:	2007      	movs	r0, #7
 8004d30:	f7fb fe2e 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004d34:	2014      	movs	r0, #20
 8004d36:	f001 fced 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004d3a:	f240 1173 	movw	r1, #371	@ 0x173
 8004d3e:	2007      	movs	r0, #7
 8004d40:	f7fb fe26 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004d44:	2014      	movs	r0, #20
 8004d46:	f001 fce5 	bl	8006714 <HAL_Delay>
 8004d4a:	f000 bfd7 	b.w	8005cfc <LCD_Init+0x3e34>
 8004d4e:	bf00      	nop
 8004d50:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0xB505) {
 8004d54:	4bf0      	ldr	r3, [pc, #960]	@ (8005118 <LCD_Init+0x3250>)
 8004d56:	889b      	ldrh	r3, [r3, #4]
 8004d58:	f24b 5205 	movw	r2, #46341	@ 0xb505
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	f040 8103 	bne.w	8004f68 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004d62:	2100      	movs	r1, #0
 8004d64:	2000      	movs	r0, #0
 8004d66:	f7fb fe13 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	f7fb fe0f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d72:	2100      	movs	r1, #0
 8004d74:	2000      	movs	r0, #0
 8004d76:	f7fb fe0b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	f7fb fe07 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004d82:	2101      	movs	r1, #1
 8004d84:	20a4      	movs	r0, #164	@ 0xa4
 8004d86:	f7fb fe03 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004d8a:	2014      	movs	r0, #20
 8004d8c:	f001 fcc2 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004d90:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004d94:	2060      	movs	r0, #96	@ 0x60
 8004d96:	f7fb fdfb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004d9a:	f240 2102 	movw	r1, #514	@ 0x202
 8004d9e:	2008      	movs	r0, #8
 8004da0:	f7fb fdf6 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004da4:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8004da8:	2030      	movs	r0, #48	@ 0x30
 8004daa:	f7fb fdf1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004dae:	f243 7115 	movw	r1, #14101	@ 0x3715
 8004db2:	2031      	movs	r0, #49	@ 0x31
 8004db4:	f7fb fdec 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004db8:	f240 6104 	movw	r1, #1540	@ 0x604
 8004dbc:	2032      	movs	r0, #50	@ 0x32
 8004dbe:	f7fb fde7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004dc2:	f640 6116 	movw	r1, #3606	@ 0xe16
 8004dc6:	2033      	movs	r0, #51	@ 0x33
 8004dc8:	f7fb fde2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004dcc:	f242 2111 	movw	r1, #8721	@ 0x2211
 8004dd0:	2034      	movs	r0, #52	@ 0x34
 8004dd2:	f7fb fddd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004dd6:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 8004dda:	2035      	movs	r0, #53	@ 0x35
 8004ddc:	f7fb fdd8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004de0:	f248 5107 	movw	r1, #34055	@ 0x8507
 8004de4:	2036      	movs	r0, #54	@ 0x36
 8004de6:	f7fb fdd3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004dea:	f241 4107 	movw	r1, #5127	@ 0x1407
 8004dee:	2037      	movs	r0, #55	@ 0x37
 8004df0:	f7fb fdce 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004df4:	f241 4103 	movw	r1, #5123	@ 0x1403
 8004df8:	2038      	movs	r0, #56	@ 0x38
 8004dfa:	f7fb fdc9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004dfe:	2120      	movs	r1, #32
 8004e00:	2039      	movs	r0, #57	@ 0x39
 8004e02:	f7fb fdc5 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004e06:	211a      	movs	r1, #26
 8004e08:	2090      	movs	r0, #144	@ 0x90
 8004e0a:	f7fb fdc1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	2010      	movs	r0, #16
 8004e12:	f7fb fdbd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004e16:	2107      	movs	r1, #7
 8004e18:	2011      	movs	r0, #17
 8004e1a:	f7fb fdb9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004e1e:	2100      	movs	r1, #0
 8004e20:	2012      	movs	r0, #18
 8004e22:	f7fb fdb5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004e26:	2100      	movs	r1, #0
 8004e28:	2013      	movs	r0, #19
 8004e2a:	f7fb fdb1 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004e2e:	2014      	movs	r0, #20
 8004e30:	f001 fc70 	bl	8006714 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004e34:	f44f 61e6 	mov.w	r1, #1840	@ 0x730
 8004e38:	2010      	movs	r0, #16
 8004e3a:	f7fb fda9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004e3e:	f240 1137 	movw	r1, #311	@ 0x137
 8004e42:	2011      	movs	r0, #17
 8004e44:	f7fb fda4 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004e48:	2014      	movs	r0, #20
 8004e4a:	f001 fc63 	bl	8006714 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004e4e:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8004e52:	2012      	movs	r0, #18
 8004e54:	f7fb fd9c 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004e58:	2014      	movs	r0, #20
 8004e5a:	f001 fc5b 	bl	8006714 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004e5e:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8004e62:	2013      	movs	r0, #19
 8004e64:	f7fb fd94 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004e68:	2180      	movs	r1, #128	@ 0x80
 8004e6a:	202a      	movs	r0, #42	@ 0x2a
 8004e6c:	f7fb fd90 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004e70:	2148      	movs	r1, #72	@ 0x48
 8004e72:	2029      	movs	r0, #41	@ 0x29
 8004e74:	f7fb fd8c 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004e78:	2014      	movs	r0, #20
 8004e7a:	f001 fc4b 	bl	8006714 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004e7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e82:	2001      	movs	r0, #1
 8004e84:	f7fb fd84 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004e88:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004e8c:	2002      	movs	r0, #2
 8004e8e:	f7fb fd7f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004e92:	f241 0138 	movw	r1, #4152	@ 0x1038
 8004e96:	2003      	movs	r0, #3
 8004e98:	f7fb fd7a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004e9c:	f240 2102 	movw	r1, #514	@ 0x202
 8004ea0:	2008      	movs	r0, #8
 8004ea2:	f7fb fd75 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	200a      	movs	r0, #10
 8004eaa:	f7fb fd71 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004eae:	2100      	movs	r1, #0
 8004eb0:	200c      	movs	r0, #12
 8004eb2:	f7fb fd6d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	200d      	movs	r0, #13
 8004eba:	f7fb fd69 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004ebe:	2130      	movs	r1, #48	@ 0x30
 8004ec0:	200e      	movs	r0, #14
 8004ec2:	f7fb fd65 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	2050      	movs	r0, #80	@ 0x50
 8004eca:	f7fb fd61 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004ece:	21ef      	movs	r1, #239	@ 0xef
 8004ed0:	2051      	movs	r0, #81	@ 0x51
 8004ed2:	f7fb fd5d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	2052      	movs	r0, #82	@ 0x52
 8004eda:	f7fb fd59 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004ede:	f240 113f 	movw	r1, #319	@ 0x13f
 8004ee2:	2053      	movs	r0, #83	@ 0x53
 8004ee4:	f7fb fd54 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004ee8:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004eec:	2060      	movs	r0, #96	@ 0x60
 8004eee:	f7fb fd4f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	2061      	movs	r0, #97	@ 0x61
 8004ef6:	f7fb fd4b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004efa:	2100      	movs	r1, #0
 8004efc:	206a      	movs	r0, #106	@ 0x6a
 8004efe:	f7fb fd47 	bl	8000990 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004f02:	2111      	movs	r1, #17
 8004f04:	2090      	movs	r0, #144	@ 0x90
 8004f06:	f7fb fd43 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004f0a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004f0e:	2092      	movs	r0, #146	@ 0x92
 8004f10:	f7fb fd3e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004f14:	f240 4102 	movw	r1, #1026	@ 0x402
 8004f18:	2093      	movs	r0, #147	@ 0x93
 8004f1a:	f7fb fd39 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004f1e:	2102      	movs	r1, #2
 8004f20:	2094      	movs	r0, #148	@ 0x94
 8004f22:	f7fb fd35 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004f26:	2014      	movs	r0, #20
 8004f28:	f001 fbf4 	bl	8006714 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	2007      	movs	r0, #7
 8004f30:	f7fb fd2e 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004f34:	2014      	movs	r0, #20
 8004f36:	f001 fbed 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004f3a:	2161      	movs	r1, #97	@ 0x61
 8004f3c:	2007      	movs	r0, #7
 8004f3e:	f7fb fd27 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004f42:	f240 1173 	movw	r1, #371	@ 0x173
 8004f46:	2007      	movs	r0, #7
 8004f48:	f7fb fd22 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	2020      	movs	r0, #32
 8004f50:	f7fb fd1e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004f54:	2100      	movs	r1, #0
 8004f56:	2021      	movs	r0, #33	@ 0x21
 8004f58:	f7fb fd1a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004f5c:	2122      	movs	r1, #34	@ 0x22
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f7fb fd16 	bl	8000990 <LCD_WriteReg>
 8004f64:	f000 beca 	b.w	8005cfc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004f68:	4b6b      	ldr	r3, [pc, #428]	@ (8005118 <LCD_Init+0x3250>)
 8004f6a:	889b      	ldrh	r3, [r3, #4]
 8004f6c:	f24c 5205 	movw	r2, #50437	@ 0xc505
 8004f70:	4293      	cmp	r3, r2
 8004f72:	f040 80d3 	bne.w	800511c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004f76:	2100      	movs	r1, #0
 8004f78:	2000      	movs	r0, #0
 8004f7a:	f7fb fd09 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f7e:	2100      	movs	r1, #0
 8004f80:	2000      	movs	r0, #0
 8004f82:	f7fb fd05 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004f86:	2014      	movs	r0, #20
 8004f88:	f001 fbc4 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f7fb fcfe 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f94:	2100      	movs	r1, #0
 8004f96:	2000      	movs	r0, #0
 8004f98:	f7fb fcfa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	f7fb fcf6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	f7fb fcf2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004fac:	2101      	movs	r1, #1
 8004fae:	20a4      	movs	r0, #164	@ 0xa4
 8004fb0:	f7fb fcee 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 8004fb4:	2014      	movs	r0, #20
 8004fb6:	f001 fbad 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004fba:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004fbe:	2060      	movs	r0, #96	@ 0x60
 8004fc0:	f7fb fce6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004fc4:	f640 0106 	movw	r1, #2054	@ 0x806
 8004fc8:	2008      	movs	r0, #8
 8004fca:	f7fb fce1 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004fce:	f240 7103 	movw	r1, #1795	@ 0x703
 8004fd2:	2030      	movs	r0, #48	@ 0x30
 8004fd4:	f7fb fcdc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004fd8:	2101      	movs	r1, #1
 8004fda:	2031      	movs	r0, #49	@ 0x31
 8004fdc:	f7fb fcd8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004fe0:	2104      	movs	r1, #4
 8004fe2:	2032      	movs	r0, #50	@ 0x32
 8004fe4:	f7fb fcd4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004fe8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8004fec:	2033      	movs	r0, #51	@ 0x33
 8004fee:	f7fb fccf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004ff2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004ff6:	2034      	movs	r0, #52	@ 0x34
 8004ff8:	f7fb fcca 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004ffc:	f240 1103 	movw	r1, #259	@ 0x103
 8005000:	2035      	movs	r0, #53	@ 0x35
 8005002:	f7fb fcc5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8005006:	211f      	movs	r1, #31
 8005008:	2036      	movs	r0, #54	@ 0x36
 800500a:	f7fb fcc1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 800500e:	f240 7103 	movw	r1, #1795	@ 0x703
 8005012:	2037      	movs	r0, #55	@ 0x37
 8005014:	f7fb fcbc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8005018:	2101      	movs	r1, #1
 800501a:	2038      	movs	r0, #56	@ 0x38
 800501c:	f7fb fcb8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8005020:	2104      	movs	r1, #4
 8005022:	2039      	movs	r0, #57	@ 0x39
 8005024:	f7fb fcb4 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005028:	2115      	movs	r1, #21
 800502a:	2090      	movs	r0, #144	@ 0x90
 800502c:	f7fb fcb0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005030:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8005034:	2010      	movs	r0, #16
 8005036:	f7fb fcab 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 800503a:	f240 2147 	movw	r1, #583	@ 0x247
 800503e:	2011      	movs	r0, #17
 8005040:	f7fb fca6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8005044:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 8005048:	2012      	movs	r0, #18
 800504a:	f7fb fca1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 800504e:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8005052:	2013      	movs	r0, #19
 8005054:	f7fb fc9c 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(120);
 8005058:	2078      	movs	r0, #120	@ 0x78
 800505a:	f001 fb5b 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 800505e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005062:	2001      	movs	r0, #1
 8005064:	f7fb fc94 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005068:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800506c:	2002      	movs	r0, #2
 800506e:	f7fb fc8f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005072:	f241 0130 	movw	r1, #4144	@ 0x1030
 8005076:	2003      	movs	r0, #3
 8005078:	f7fb fc8a 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800507c:	2108      	movs	r1, #8
 800507e:	200a      	movs	r0, #10
 8005080:	f7fb fc86 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005084:	2100      	movs	r1, #0
 8005086:	200c      	movs	r0, #12
 8005088:	f7fb fc82 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800508c:	2120      	movs	r1, #32
 800508e:	200e      	movs	r0, #14
 8005090:	f7fb fc7e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005094:	2100      	movs	r1, #0
 8005096:	200f      	movs	r0, #15
 8005098:	f7fb fc7a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800509c:	2100      	movs	r1, #0
 800509e:	2020      	movs	r0, #32
 80050a0:	f7fb fc76 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 80050a4:	2100      	movs	r1, #0
 80050a6:	2021      	movs	r0, #33	@ 0x21
 80050a8:	f7fb fc72 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 80050ac:	213d      	movs	r1, #61	@ 0x3d
 80050ae:	202a      	movs	r0, #42	@ 0x2a
 80050b0:	f7fb fc6e 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(20);
 80050b4:	2014      	movs	r0, #20
 80050b6:	f001 fb2d 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 80050ba:	212d      	movs	r1, #45	@ 0x2d
 80050bc:	2029      	movs	r0, #41	@ 0x29
 80050be:	f7fb fc67 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80050c2:	2100      	movs	r1, #0
 80050c4:	2050      	movs	r0, #80	@ 0x50
 80050c6:	f7fb fc63 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80050ca:	f24d 01ef 	movw	r1, #53487	@ 0xd0ef
 80050ce:	2051      	movs	r0, #81	@ 0x51
 80050d0:	f7fb fc5e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80050d4:	2100      	movs	r1, #0
 80050d6:	2052      	movs	r0, #82	@ 0x52
 80050d8:	f7fb fc5a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80050dc:	f240 113f 	movw	r1, #319	@ 0x13f
 80050e0:	2053      	movs	r0, #83	@ 0x53
 80050e2:	f7fb fc55 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80050e6:	2100      	movs	r1, #0
 80050e8:	2061      	movs	r0, #97	@ 0x61
 80050ea:	f7fb fc51 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80050ee:	2100      	movs	r1, #0
 80050f0:	206a      	movs	r0, #106	@ 0x6a
 80050f2:	f7fb fc4d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80050f6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80050fa:	2092      	movs	r0, #146	@ 0x92
 80050fc:	f7fb fc48 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8005100:	2105      	movs	r1, #5
 8005102:	2093      	movs	r0, #147	@ 0x93
 8005104:	f7fb fc44 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005108:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800510c:	2007      	movs	r0, #7
 800510e:	f7fb fc3f 	bl	8000990 <LCD_WriteReg>
 8005112:	f000 bdf3 	b.w	8005cfc <LCD_Init+0x3e34>
 8005116:	bf00      	nop
 8005118:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 800511c:	4bc2      	ldr	r3, [pc, #776]	@ (8005428 <LCD_Init+0x3560>)
 800511e:	889b      	ldrh	r3, [r3, #4]
 8005120:	f648 1289 	movw	r2, #35209	@ 0x8989
 8005124:	4293      	cmp	r3, r2
 8005126:	f040 80bc 	bne.w	80052a2 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 800512a:	2101      	movs	r1, #1
 800512c:	2000      	movs	r0, #0
 800512e:	f7fb fc2f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8005132:	f64a 01a4 	movw	r1, #43172	@ 0xa8a4
 8005136:	2003      	movs	r0, #3
 8005138:	f7fb fc2a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800513c:	2100      	movs	r1, #0
 800513e:	200c      	movs	r0, #12
 8005140:	f7fb fc26 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8005144:	f640 010c 	movw	r1, #2060	@ 0x80c
 8005148:	200d      	movs	r0, #13
 800514a:	f7fb fc21 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 800514e:	f44f 512c 	mov.w	r1, #11008	@ 0x2b00
 8005152:	200e      	movs	r0, #14
 8005154:	f7fb fc1c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005158:	21b0      	movs	r1, #176	@ 0xb0
 800515a:	201e      	movs	r0, #30
 800515c:	f7fb fc18 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005160:	f642 313f 	movw	r1, #11071	@ 0x2b3f
 8005164:	2001      	movs	r0, #1
 8005166:	f7fb fc13 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 800516a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800516e:	2002      	movs	r0, #2
 8005170:	f7fb fc0e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005174:	2100      	movs	r1, #0
 8005176:	2010      	movs	r0, #16
 8005178:	f7fb fc0a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 800517c:	f246 0178 	movw	r1, #24696	@ 0x6078
 8005180:	2011      	movs	r0, #17
 8005182:	f7fb fc05 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8005186:	2100      	movs	r1, #0
 8005188:	2005      	movs	r0, #5
 800518a:	f7fb fc01 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800518e:	2100      	movs	r1, #0
 8005190:	2006      	movs	r0, #6
 8005192:	f7fb fbfd 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8005196:	f64e 711c 	movw	r1, #61212	@ 0xef1c
 800519a:	2016      	movs	r0, #22
 800519c:	f7fb fbf8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 80051a0:	2103      	movs	r1, #3
 80051a2:	2017      	movs	r0, #23
 80051a4:	f7fb fbf4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 80051a8:	f240 2133 	movw	r1, #563	@ 0x233
 80051ac:	2007      	movs	r0, #7
 80051ae:	f7fb fbef 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 80051b2:	2100      	movs	r1, #0
 80051b4:	200b      	movs	r0, #11
 80051b6:	f7fb fbeb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 80051ba:	2100      	movs	r1, #0
 80051bc:	200f      	movs	r0, #15
 80051be:	f7fb fbe7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 80051c2:	2100      	movs	r1, #0
 80051c4:	2041      	movs	r0, #65	@ 0x41
 80051c6:	f7fb fbe3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 80051ca:	2100      	movs	r1, #0
 80051cc:	2042      	movs	r0, #66	@ 0x42
 80051ce:	f7fb fbdf 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 80051d2:	2100      	movs	r1, #0
 80051d4:	2048      	movs	r0, #72	@ 0x48
 80051d6:	f7fb fbdb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 80051da:	f240 113f 	movw	r1, #319	@ 0x13f
 80051de:	2049      	movs	r0, #73	@ 0x49
 80051e0:	f7fb fbd6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 80051e4:	2100      	movs	r1, #0
 80051e6:	204a      	movs	r0, #74	@ 0x4a
 80051e8:	f7fb fbd2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 80051ec:	2100      	movs	r1, #0
 80051ee:	204b      	movs	r0, #75	@ 0x4b
 80051f0:	f7fb fbce 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 80051f4:	f44f 416f 	mov.w	r1, #61184	@ 0xef00
 80051f8:	2044      	movs	r0, #68	@ 0x44
 80051fa:	f7fb fbc9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 80051fe:	2100      	movs	r1, #0
 8005200:	2045      	movs	r0, #69	@ 0x45
 8005202:	f7fb fbc5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8005206:	f240 113f 	movw	r1, #319	@ 0x13f
 800520a:	2046      	movs	r0, #70	@ 0x46
 800520c:	f7fb fbc0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8005210:	f240 7107 	movw	r1, #1799	@ 0x707
 8005214:	2030      	movs	r0, #48	@ 0x30
 8005216:	f7fb fbbb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 800521a:	f44f 7101 	mov.w	r1, #516	@ 0x204
 800521e:	2031      	movs	r0, #49	@ 0x31
 8005220:	f7fb fbb6 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8005224:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8005228:	2032      	movs	r0, #50	@ 0x32
 800522a:	f7fb fbb1 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 800522e:	f240 5102 	movw	r1, #1282	@ 0x502
 8005232:	2033      	movs	r0, #51	@ 0x33
 8005234:	f7fb fbac 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005238:	f240 5107 	movw	r1, #1287	@ 0x507
 800523c:	2034      	movs	r0, #52	@ 0x34
 800523e:	f7fb fba7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8005242:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8005246:	2035      	movs	r0, #53	@ 0x35
 8005248:	f7fb fba2 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 800524c:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8005250:	2036      	movs	r0, #54	@ 0x36
 8005252:	f7fb fb9d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8005256:	f240 5102 	movw	r1, #1282	@ 0x502
 800525a:	2037      	movs	r0, #55	@ 0x37
 800525c:	f7fb fb98 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005260:	f240 3102 	movw	r1, #770	@ 0x302
 8005264:	203a      	movs	r0, #58	@ 0x3a
 8005266:	f7fb fb93 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800526a:	f240 3102 	movw	r1, #770	@ 0x302
 800526e:	203b      	movs	r0, #59	@ 0x3b
 8005270:	f7fb fb8e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8005274:	2100      	movs	r1, #0
 8005276:	2023      	movs	r0, #35	@ 0x23
 8005278:	f7fb fb8a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800527c:	2100      	movs	r1, #0
 800527e:	2024      	movs	r0, #36	@ 0x24
 8005280:	f7fb fb86 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005284:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005288:	2025      	movs	r0, #37	@ 0x25
 800528a:	f7fb fb81 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800528e:	2100      	movs	r1, #0
 8005290:	204f      	movs	r0, #79	@ 0x4f
 8005292:	f7fb fb7d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005296:	2100      	movs	r1, #0
 8005298:	204e      	movs	r0, #78	@ 0x4e
 800529a:	f7fb fb79 	bl	8000990 <LCD_WriteReg>
 800529e:	f000 bd2d 	b.w	8005cfc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 80052a2:	4b61      	ldr	r3, [pc, #388]	@ (8005428 <LCD_Init+0x3560>)
 80052a4:	889b      	ldrh	r3, [r3, #4]
 80052a6:	f244 5231 	movw	r2, #17713	@ 0x4531
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f040 80be 	bne.w	800542c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 80052b0:	2101      	movs	r1, #1
 80052b2:	2000      	movs	r0, #0
 80052b4:	f7fb fb6c 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(10);
 80052b8:	200a      	movs	r0, #10
 80052ba:	f001 fa2b 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 80052be:	f241 6128 	movw	r1, #5672	@ 0x1628
 80052c2:	2010      	movs	r0, #16
 80052c4:	f7fb fb64 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 80052c8:	210e      	movs	r1, #14
 80052ca:	2012      	movs	r0, #18
 80052cc:	f7fb fb60 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 80052d0:	f640 2139 	movw	r1, #2617	@ 0xa39
 80052d4:	2013      	movs	r0, #19
 80052d6:	f7fb fb5b 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(10);
 80052da:	200a      	movs	r0, #10
 80052dc:	f001 fa1a 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 80052e0:	2140      	movs	r1, #64	@ 0x40
 80052e2:	2011      	movs	r0, #17
 80052e4:	f7fb fb54 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 80052e8:	2150      	movs	r1, #80	@ 0x50
 80052ea:	2015      	movs	r0, #21
 80052ec:	f7fb fb50 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(10);
 80052f0:	200a      	movs	r0, #10
 80052f2:	f001 fa0f 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80052f6:	211e      	movs	r1, #30
 80052f8:	2012      	movs	r0, #18
 80052fa:	f7fb fb49 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(10);
 80052fe:	200a      	movs	r0, #10
 8005300:	f001 fa08 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8005304:	f44f 51b1 	mov.w	r1, #5664	@ 0x1620
 8005308:	2010      	movs	r0, #16
 800530a:	f7fb fb41 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 800530e:	f642 2139 	movw	r1, #10809	@ 0x2a39
 8005312:	2013      	movs	r0, #19
 8005314:	f7fb fb3c 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(10);
 8005318:	200a      	movs	r0, #10
 800531a:	f001 f9fb 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 800531e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005322:	2001      	movs	r0, #1
 8005324:	f7fb fb34 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005328:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800532c:	2002      	movs	r0, #2
 800532e:	f7fb fb2f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8005332:	f241 0138 	movw	r1, #4152	@ 0x1038
 8005336:	2003      	movs	r0, #3
 8005338:	f7fb fb2a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 800533c:	f240 2102 	movw	r1, #514	@ 0x202
 8005340:	2008      	movs	r0, #8
 8005342:	f7fb fb25 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005346:	2108      	movs	r1, #8
 8005348:	200a      	movs	r0, #10
 800534a:	f7fb fb21 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 800534e:	2100      	movs	r1, #0
 8005350:	2030      	movs	r0, #48	@ 0x30
 8005352:	f7fb fb1d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005356:	f240 4102 	movw	r1, #1026	@ 0x402
 800535a:	2031      	movs	r0, #49	@ 0x31
 800535c:	f7fb fb18 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005360:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8005364:	2032      	movs	r0, #50	@ 0x32
 8005366:	f7fb fb13 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800536a:	f240 5103 	movw	r1, #1283	@ 0x503
 800536e:	2033      	movs	r0, #51	@ 0x33
 8005370:	f7fb fb0e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005374:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8005378:	2034      	movs	r0, #52	@ 0x34
 800537a:	f7fb fb09 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800537e:	f240 3101 	movw	r1, #769	@ 0x301
 8005382:	2035      	movs	r0, #53	@ 0x35
 8005384:	f7fb fb04 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005388:	f240 7107 	movw	r1, #1799	@ 0x707
 800538c:	2036      	movs	r0, #54	@ 0x36
 800538e:	f7fb faff 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005392:	f240 3105 	movw	r1, #773	@ 0x305
 8005396:	2037      	movs	r0, #55	@ 0x37
 8005398:	f7fb fafa 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800539c:	f44f 7102 	mov.w	r1, #520	@ 0x208
 80053a0:	2038      	movs	r0, #56	@ 0x38
 80053a2:	f7fb faf5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 80053a6:	f640 710b 	movw	r1, #3851	@ 0xf0b
 80053aa:	2039      	movs	r0, #57	@ 0x39
 80053ac:	f7fb faf0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 80053b0:	2102      	movs	r1, #2
 80053b2:	2041      	movs	r0, #65	@ 0x41
 80053b4:	f7fb faec 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80053b8:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 80053bc:	2060      	movs	r0, #96	@ 0x60
 80053be:	f7fb fae7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80053c2:	2101      	movs	r1, #1
 80053c4:	2061      	movs	r0, #97	@ 0x61
 80053c6:	f7fb fae3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 80053ca:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80053ce:	2090      	movs	r0, #144	@ 0x90
 80053d0:	f7fb fade 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 80053d4:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80053d8:	2092      	movs	r0, #146	@ 0x92
 80053da:	f7fb fad9 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 80053de:	2104      	movs	r1, #4
 80053e0:	2093      	movs	r0, #147	@ 0x93
 80053e2:	f7fb fad5 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 80053e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80053ea:	20a0      	movs	r0, #160	@ 0xa0
 80053ec:	f7fb fad0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80053f0:	2101      	movs	r1, #1
 80053f2:	2007      	movs	r0, #7
 80053f4:	f7fb facc 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80053f8:	2121      	movs	r1, #33	@ 0x21
 80053fa:	2007      	movs	r0, #7
 80053fc:	f7fb fac8 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005400:	2123      	movs	r1, #35	@ 0x23
 8005402:	2007      	movs	r0, #7
 8005404:	f7fb fac4 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005408:	2133      	movs	r1, #51	@ 0x33
 800540a:	2007      	movs	r0, #7
 800540c:	f7fb fac0 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005410:	f240 1133 	movw	r1, #307	@ 0x133
 8005414:	2007      	movs	r0, #7
 8005416:	f7fb fabb 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 800541a:	2100      	movs	r1, #0
 800541c:	20a0      	movs	r0, #160	@ 0xa0
 800541e:	f7fb fab7 	bl	8000990 <LCD_WriteReg>
 8005422:	f000 bc6b 	b.w	8005cfc <LCD_Init+0x3e34>
 8005426:	bf00      	nop
 8005428:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x4535) {
 800542c:	4b5b      	ldr	r3, [pc, #364]	@ (800559c <LCD_Init+0x36d4>)
 800542e:	889b      	ldrh	r3, [r3, #4]
 8005430:	f244 5235 	movw	r2, #17717	@ 0x4535
 8005434:	4293      	cmp	r3, r2
 8005436:	f040 80b3 	bne.w	80055a0 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 800543a:	2130      	movs	r1, #48	@ 0x30
 800543c:	2015      	movs	r0, #21
 800543e:	f7fb faa7 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8005442:	2110      	movs	r1, #16
 8005444:	209a      	movs	r0, #154	@ 0x9a
 8005446:	f7fb faa3 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 800544a:	2120      	movs	r1, #32
 800544c:	2011      	movs	r0, #17
 800544e:	f7fb fa9f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8005452:	f243 4128 	movw	r1, #13352	@ 0x3428
 8005456:	2010      	movs	r0, #16
 8005458:	f7fb fa9a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 800545c:	2102      	movs	r1, #2
 800545e:	2012      	movs	r0, #18
 8005460:	f7fb fa96 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005464:	f241 0138 	movw	r1, #4152	@ 0x1038
 8005468:	2013      	movs	r0, #19
 800546a:	f7fb fa91 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(40);
 800546e:	2028      	movs	r0, #40	@ 0x28
 8005470:	f001 f950 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005474:	2112      	movs	r1, #18
 8005476:	2012      	movs	r0, #18
 8005478:	f7fb fa8a 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(40);
 800547c:	2028      	movs	r0, #40	@ 0x28
 800547e:	f001 f949 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005482:	f243 4120 	movw	r1, #13344	@ 0x3420
 8005486:	2010      	movs	r0, #16
 8005488:	f7fb fa82 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800548c:	f243 0138 	movw	r1, #12344	@ 0x3038
 8005490:	2013      	movs	r0, #19
 8005492:	f7fb fa7d 	bl	8000990 <LCD_WriteReg>
		HAL_Delay(70);
 8005496:	2046      	movs	r0, #70	@ 0x46
 8005498:	f001 f93c 	bl	8006714 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800549c:	2100      	movs	r1, #0
 800549e:	2030      	movs	r0, #48	@ 0x30
 80054a0:	f7fb fa76 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80054a4:	f240 4102 	movw	r1, #1026	@ 0x402
 80054a8:	2031      	movs	r0, #49	@ 0x31
 80054aa:	f7fb fa71 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 80054ae:	f240 3107 	movw	r1, #775	@ 0x307
 80054b2:	2032      	movs	r0, #50	@ 0x32
 80054b4:	f7fb fa6c 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 80054b8:	f44f 7141 	mov.w	r1, #772	@ 0x304
 80054bc:	2033      	movs	r0, #51	@ 0x33
 80054be:	f7fb fa67 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80054c2:	2104      	movs	r1, #4
 80054c4:	2034      	movs	r0, #52	@ 0x34
 80054c6:	f7fb fa63 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 80054ca:	f240 4101 	movw	r1, #1025	@ 0x401
 80054ce:	2035      	movs	r0, #53	@ 0x35
 80054d0:	f7fb fa5e 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80054d4:	f240 7107 	movw	r1, #1799	@ 0x707
 80054d8:	2036      	movs	r0, #54	@ 0x36
 80054da:	f7fb fa59 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80054de:	f240 3105 	movw	r1, #773	@ 0x305
 80054e2:	2037      	movs	r0, #55	@ 0x37
 80054e4:	f7fb fa54 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80054e8:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 80054ec:	2038      	movs	r0, #56	@ 0x38
 80054ee:	f7fb fa4f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80054f2:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 80054f6:	2039      	movs	r0, #57	@ 0x39
 80054f8:	f7fb fa4a 	bl	8000990 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80054fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005500:	2001      	movs	r0, #1
 8005502:	f7fb fa45 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005506:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800550a:	2002      	movs	r0, #2
 800550c:	f7fb fa40 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005510:	f241 0130 	movw	r1, #4144	@ 0x1030
 8005514:	2003      	movs	r0, #3
 8005516:	f7fb fa3b 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 800551a:	f640 0108 	movw	r1, #2056	@ 0x808
 800551e:	2008      	movs	r0, #8
 8005520:	f7fb fa36 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005524:	2108      	movs	r1, #8
 8005526:	200a      	movs	r0, #10
 8005528:	f7fb fa32 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 800552c:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8005530:	2060      	movs	r0, #96	@ 0x60
 8005532:	f7fb fa2d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005536:	2101      	movs	r1, #1
 8005538:	2061      	movs	r0, #97	@ 0x61
 800553a:	f7fb fa29 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 800553e:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8005542:	2090      	movs	r0, #144	@ 0x90
 8005544:	f7fb fa24 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800554c:	2092      	movs	r0, #146	@ 0x92
 800554e:	f7fb fa1f 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8005552:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005556:	2093      	movs	r0, #147	@ 0x93
 8005558:	f7fb fa1a 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 800555c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8005560:	20a0      	movs	r0, #160	@ 0xa0
 8005562:	f7fb fa15 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005566:	2110      	movs	r1, #16
 8005568:	20a3      	movs	r0, #163	@ 0xa3
 800556a:	f7fb fa11 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800556e:	2101      	movs	r1, #1
 8005570:	2007      	movs	r0, #7
 8005572:	f7fb fa0d 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005576:	2121      	movs	r1, #33	@ 0x21
 8005578:	2007      	movs	r0, #7
 800557a:	f7fb fa09 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800557e:	2123      	movs	r1, #35	@ 0x23
 8005580:	2007      	movs	r0, #7
 8005582:	f7fb fa05 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005586:	2133      	movs	r1, #51	@ 0x33
 8005588:	2007      	movs	r0, #7
 800558a:	f7fb fa01 	bl	8000990 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800558e:	f240 1133 	movw	r1, #307	@ 0x133
 8005592:	2007      	movs	r0, #7
 8005594:	f7fb f9fc 	bl	8000990 <LCD_WriteReg>
 8005598:	e3b0      	b.n	8005cfc <LCD_Init+0x3e34>
 800559a:	bf00      	nop
 800559c:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0X1963) {
 80055a0:	4ba8      	ldr	r3, [pc, #672]	@ (8005844 <LCD_Init+0x397c>)
 80055a2:	889b      	ldrh	r3, [r3, #4]
 80055a4:	f641 1263 	movw	r2, #6499	@ 0x1963
 80055a8:	4293      	cmp	r3, r2
 80055aa:	f040 83a7 	bne.w	8005cfc <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80055ae:	20e2      	movs	r0, #226	@ 0xe2
 80055b0:	f7fb f962 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 80055b4:	4ba4      	ldr	r3, [pc, #656]	@ (8005848 <LCD_Init+0x3980>)
 80055b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055ba:	611a      	str	r2, [r3, #16]
 80055bc:	4ba2      	ldr	r3, [pc, #648]	@ (8005848 <LCD_Init+0x3980>)
 80055be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055c2:	615a      	str	r2, [r3, #20]
 80055c4:	4ba1      	ldr	r3, [pc, #644]	@ (800584c <LCD_Init+0x3984>)
 80055c6:	221d      	movs	r2, #29
 80055c8:	60da      	str	r2, [r3, #12]
 80055ca:	4b9f      	ldr	r3, [pc, #636]	@ (8005848 <LCD_Init+0x3980>)
 80055cc:	2280      	movs	r2, #128	@ 0x80
 80055ce:	615a      	str	r2, [r3, #20]
 80055d0:	4b9d      	ldr	r3, [pc, #628]	@ (8005848 <LCD_Init+0x3980>)
 80055d2:	2280      	movs	r2, #128	@ 0x80
 80055d4:	611a      	str	r2, [r3, #16]
 80055d6:	4b9c      	ldr	r3, [pc, #624]	@ (8005848 <LCD_Init+0x3980>)
 80055d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055dc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80055de:	4b9a      	ldr	r3, [pc, #616]	@ (8005848 <LCD_Init+0x3980>)
 80055e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055e4:	611a      	str	r2, [r3, #16]
 80055e6:	4b98      	ldr	r3, [pc, #608]	@ (8005848 <LCD_Init+0x3980>)
 80055e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055ec:	615a      	str	r2, [r3, #20]
 80055ee:	4b97      	ldr	r3, [pc, #604]	@ (800584c <LCD_Init+0x3984>)
 80055f0:	2202      	movs	r2, #2
 80055f2:	60da      	str	r2, [r3, #12]
 80055f4:	4b94      	ldr	r3, [pc, #592]	@ (8005848 <LCD_Init+0x3980>)
 80055f6:	2280      	movs	r2, #128	@ 0x80
 80055f8:	615a      	str	r2, [r3, #20]
 80055fa:	4b93      	ldr	r3, [pc, #588]	@ (8005848 <LCD_Init+0x3980>)
 80055fc:	2280      	movs	r2, #128	@ 0x80
 80055fe:	611a      	str	r2, [r3, #16]
 8005600:	4b91      	ldr	r3, [pc, #580]	@ (8005848 <LCD_Init+0x3980>)
 8005602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005606:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8005608:	4b8f      	ldr	r3, [pc, #572]	@ (8005848 <LCD_Init+0x3980>)
 800560a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800560e:	611a      	str	r2, [r3, #16]
 8005610:	4b8d      	ldr	r3, [pc, #564]	@ (8005848 <LCD_Init+0x3980>)
 8005612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005616:	615a      	str	r2, [r3, #20]
 8005618:	4b8c      	ldr	r3, [pc, #560]	@ (800584c <LCD_Init+0x3984>)
 800561a:	2204      	movs	r2, #4
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	4b8a      	ldr	r3, [pc, #552]	@ (8005848 <LCD_Init+0x3980>)
 8005620:	2280      	movs	r2, #128	@ 0x80
 8005622:	615a      	str	r2, [r3, #20]
 8005624:	4b88      	ldr	r3, [pc, #544]	@ (8005848 <LCD_Init+0x3980>)
 8005626:	2280      	movs	r2, #128	@ 0x80
 8005628:	611a      	str	r2, [r3, #16]
 800562a:	4b87      	ldr	r3, [pc, #540]	@ (8005848 <LCD_Init+0x3980>)
 800562c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005630:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8005632:	2001      	movs	r0, #1
 8005634:	f001 f86e 	bl	8006714 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005638:	20e0      	movs	r0, #224	@ 0xe0
 800563a:	f7fb f91d 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800563e:	4b82      	ldr	r3, [pc, #520]	@ (8005848 <LCD_Init+0x3980>)
 8005640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005644:	611a      	str	r2, [r3, #16]
 8005646:	4b80      	ldr	r3, [pc, #512]	@ (8005848 <LCD_Init+0x3980>)
 8005648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800564c:	615a      	str	r2, [r3, #20]
 800564e:	4b7f      	ldr	r3, [pc, #508]	@ (800584c <LCD_Init+0x3984>)
 8005650:	2201      	movs	r2, #1
 8005652:	60da      	str	r2, [r3, #12]
 8005654:	4b7c      	ldr	r3, [pc, #496]	@ (8005848 <LCD_Init+0x3980>)
 8005656:	2280      	movs	r2, #128	@ 0x80
 8005658:	615a      	str	r2, [r3, #20]
 800565a:	4b7b      	ldr	r3, [pc, #492]	@ (8005848 <LCD_Init+0x3980>)
 800565c:	2280      	movs	r2, #128	@ 0x80
 800565e:	611a      	str	r2, [r3, #16]
 8005660:	4b79      	ldr	r3, [pc, #484]	@ (8005848 <LCD_Init+0x3980>)
 8005662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005666:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005668:	200a      	movs	r0, #10
 800566a:	f001 f853 	bl	8006714 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800566e:	20e0      	movs	r0, #224	@ 0xe0
 8005670:	f7fb f902 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8005674:	4b74      	ldr	r3, [pc, #464]	@ (8005848 <LCD_Init+0x3980>)
 8005676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800567a:	611a      	str	r2, [r3, #16]
 800567c:	4b72      	ldr	r3, [pc, #456]	@ (8005848 <LCD_Init+0x3980>)
 800567e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005682:	615a      	str	r2, [r3, #20]
 8005684:	4b71      	ldr	r3, [pc, #452]	@ (800584c <LCD_Init+0x3984>)
 8005686:	2203      	movs	r2, #3
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	4b6f      	ldr	r3, [pc, #444]	@ (8005848 <LCD_Init+0x3980>)
 800568c:	2280      	movs	r2, #128	@ 0x80
 800568e:	615a      	str	r2, [r3, #20]
 8005690:	4b6d      	ldr	r3, [pc, #436]	@ (8005848 <LCD_Init+0x3980>)
 8005692:	2280      	movs	r2, #128	@ 0x80
 8005694:	611a      	str	r2, [r3, #16]
 8005696:	4b6c      	ldr	r3, [pc, #432]	@ (8005848 <LCD_Init+0x3980>)
 8005698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800569c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800569e:	200c      	movs	r0, #12
 80056a0:	f001 f838 	bl	8006714 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80056a4:	2001      	movs	r0, #1
 80056a6:	f7fb f8e7 	bl	8000878 <LCD_WR_REG>
		HAL_Delay(10);
 80056aa:	200a      	movs	r0, #10
 80056ac:	f001 f832 	bl	8006714 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80056b0:	20e6      	movs	r0, #230	@ 0xe6
 80056b2:	f7fb f8e1 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80056b6:	4b64      	ldr	r3, [pc, #400]	@ (8005848 <LCD_Init+0x3980>)
 80056b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056bc:	611a      	str	r2, [r3, #16]
 80056be:	4b62      	ldr	r3, [pc, #392]	@ (8005848 <LCD_Init+0x3980>)
 80056c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056c4:	615a      	str	r2, [r3, #20]
 80056c6:	4b61      	ldr	r3, [pc, #388]	@ (800584c <LCD_Init+0x3984>)
 80056c8:	222f      	movs	r2, #47	@ 0x2f
 80056ca:	60da      	str	r2, [r3, #12]
 80056cc:	4b5e      	ldr	r3, [pc, #376]	@ (8005848 <LCD_Init+0x3980>)
 80056ce:	2280      	movs	r2, #128	@ 0x80
 80056d0:	615a      	str	r2, [r3, #20]
 80056d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005848 <LCD_Init+0x3980>)
 80056d4:	2280      	movs	r2, #128	@ 0x80
 80056d6:	611a      	str	r2, [r3, #16]
 80056d8:	4b5b      	ldr	r3, [pc, #364]	@ (8005848 <LCD_Init+0x3980>)
 80056da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056de:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80056e0:	4b59      	ldr	r3, [pc, #356]	@ (8005848 <LCD_Init+0x3980>)
 80056e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056e6:	611a      	str	r2, [r3, #16]
 80056e8:	4b57      	ldr	r3, [pc, #348]	@ (8005848 <LCD_Init+0x3980>)
 80056ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ee:	615a      	str	r2, [r3, #20]
 80056f0:	4b56      	ldr	r3, [pc, #344]	@ (800584c <LCD_Init+0x3984>)
 80056f2:	22ff      	movs	r2, #255	@ 0xff
 80056f4:	60da      	str	r2, [r3, #12]
 80056f6:	4b54      	ldr	r3, [pc, #336]	@ (8005848 <LCD_Init+0x3980>)
 80056f8:	2280      	movs	r2, #128	@ 0x80
 80056fa:	615a      	str	r2, [r3, #20]
 80056fc:	4b52      	ldr	r3, [pc, #328]	@ (8005848 <LCD_Init+0x3980>)
 80056fe:	2280      	movs	r2, #128	@ 0x80
 8005700:	611a      	str	r2, [r3, #16]
 8005702:	4b51      	ldr	r3, [pc, #324]	@ (8005848 <LCD_Init+0x3980>)
 8005704:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005708:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 800570a:	4b4f      	ldr	r3, [pc, #316]	@ (8005848 <LCD_Init+0x3980>)
 800570c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005710:	611a      	str	r2, [r3, #16]
 8005712:	4b4d      	ldr	r3, [pc, #308]	@ (8005848 <LCD_Init+0x3980>)
 8005714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005718:	615a      	str	r2, [r3, #20]
 800571a:	4b4c      	ldr	r3, [pc, #304]	@ (800584c <LCD_Init+0x3984>)
 800571c:	22ff      	movs	r2, #255	@ 0xff
 800571e:	60da      	str	r2, [r3, #12]
 8005720:	4b49      	ldr	r3, [pc, #292]	@ (8005848 <LCD_Init+0x3980>)
 8005722:	2280      	movs	r2, #128	@ 0x80
 8005724:	615a      	str	r2, [r3, #20]
 8005726:	4b48      	ldr	r3, [pc, #288]	@ (8005848 <LCD_Init+0x3980>)
 8005728:	2280      	movs	r2, #128	@ 0x80
 800572a:	611a      	str	r2, [r3, #16]
 800572c:	4b46      	ldr	r3, [pc, #280]	@ (8005848 <LCD_Init+0x3980>)
 800572e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005732:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005734:	20b0      	movs	r0, #176	@ 0xb0
 8005736:	f7fb f89f 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800573a:	4b43      	ldr	r3, [pc, #268]	@ (8005848 <LCD_Init+0x3980>)
 800573c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005740:	611a      	str	r2, [r3, #16]
 8005742:	4b41      	ldr	r3, [pc, #260]	@ (8005848 <LCD_Init+0x3980>)
 8005744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005748:	615a      	str	r2, [r3, #20]
 800574a:	4b40      	ldr	r3, [pc, #256]	@ (800584c <LCD_Init+0x3984>)
 800574c:	2220      	movs	r2, #32
 800574e:	60da      	str	r2, [r3, #12]
 8005750:	4b3d      	ldr	r3, [pc, #244]	@ (8005848 <LCD_Init+0x3980>)
 8005752:	2280      	movs	r2, #128	@ 0x80
 8005754:	615a      	str	r2, [r3, #20]
 8005756:	4b3c      	ldr	r3, [pc, #240]	@ (8005848 <LCD_Init+0x3980>)
 8005758:	2280      	movs	r2, #128	@ 0x80
 800575a:	611a      	str	r2, [r3, #16]
 800575c:	4b3a      	ldr	r3, [pc, #232]	@ (8005848 <LCD_Init+0x3980>)
 800575e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005762:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式
 8005764:	4b38      	ldr	r3, [pc, #224]	@ (8005848 <LCD_Init+0x3980>)
 8005766:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800576a:	611a      	str	r2, [r3, #16]
 800576c:	4b36      	ldr	r3, [pc, #216]	@ (8005848 <LCD_Init+0x3980>)
 800576e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005772:	615a      	str	r2, [r3, #20]
 8005774:	4b35      	ldr	r3, [pc, #212]	@ (800584c <LCD_Init+0x3984>)
 8005776:	2200      	movs	r2, #0
 8005778:	60da      	str	r2, [r3, #12]
 800577a:	4b33      	ldr	r3, [pc, #204]	@ (8005848 <LCD_Init+0x3980>)
 800577c:	2280      	movs	r2, #128	@ 0x80
 800577e:	615a      	str	r2, [r3, #20]
 8005780:	4b31      	ldr	r3, [pc, #196]	@ (8005848 <LCD_Init+0x3980>)
 8005782:	2280      	movs	r2, #128	@ 0x80
 8005784:	611a      	str	r2, [r3, #16]
 8005786:	4b30      	ldr	r3, [pc, #192]	@ (8005848 <LCD_Init+0x3980>)
 8005788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800578c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800578e:	4b2e      	ldr	r3, [pc, #184]	@ (8005848 <LCD_Init+0x3980>)
 8005790:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005794:	611a      	str	r2, [r3, #16]
 8005796:	4b2c      	ldr	r3, [pc, #176]	@ (8005848 <LCD_Init+0x3980>)
 8005798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800579c:	615a      	str	r2, [r3, #20]
 800579e:	4b2b      	ldr	r3, [pc, #172]	@ (800584c <LCD_Init+0x3984>)
 80057a0:	2203      	movs	r2, #3
 80057a2:	60da      	str	r2, [r3, #12]
 80057a4:	4b28      	ldr	r3, [pc, #160]	@ (8005848 <LCD_Init+0x3980>)
 80057a6:	2280      	movs	r2, #128	@ 0x80
 80057a8:	615a      	str	r2, [r3, #20]
 80057aa:	4b27      	ldr	r3, [pc, #156]	@ (8005848 <LCD_Init+0x3980>)
 80057ac:	2280      	movs	r2, #128	@ 0x80
 80057ae:	611a      	str	r2, [r3, #16]
 80057b0:	4b25      	ldr	r3, [pc, #148]	@ (8005848 <LCD_Init+0x3980>)
 80057b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057b6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80057b8:	4b23      	ldr	r3, [pc, #140]	@ (8005848 <LCD_Init+0x3980>)
 80057ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057be:	611a      	str	r2, [r3, #16]
 80057c0:	4b21      	ldr	r3, [pc, #132]	@ (8005848 <LCD_Init+0x3980>)
 80057c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057c6:	615a      	str	r2, [r3, #20]
 80057c8:	4b20      	ldr	r3, [pc, #128]	@ (800584c <LCD_Init+0x3984>)
 80057ca:	f240 321f 	movw	r2, #799	@ 0x31f
 80057ce:	60da      	str	r2, [r3, #12]
 80057d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005848 <LCD_Init+0x3980>)
 80057d2:	2280      	movs	r2, #128	@ 0x80
 80057d4:	615a      	str	r2, [r3, #20]
 80057d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005848 <LCD_Init+0x3980>)
 80057d8:	2280      	movs	r2, #128	@ 0x80
 80057da:	611a      	str	r2, [r3, #16]
 80057dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005848 <LCD_Init+0x3980>)
 80057de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057e2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 80057e4:	4b18      	ldr	r3, [pc, #96]	@ (8005848 <LCD_Init+0x3980>)
 80057e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057ea:	611a      	str	r2, [r3, #16]
 80057ec:	4b16      	ldr	r3, [pc, #88]	@ (8005848 <LCD_Init+0x3980>)
 80057ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057f2:	615a      	str	r2, [r3, #20]
 80057f4:	4b15      	ldr	r3, [pc, #84]	@ (800584c <LCD_Init+0x3984>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	4b13      	ldr	r3, [pc, #76]	@ (8005848 <LCD_Init+0x3980>)
 80057fc:	2280      	movs	r2, #128	@ 0x80
 80057fe:	615a      	str	r2, [r3, #20]
 8005800:	4b11      	ldr	r3, [pc, #68]	@ (8005848 <LCD_Init+0x3980>)
 8005802:	2280      	movs	r2, #128	@ 0x80
 8005804:	611a      	str	r2, [r3, #16]
 8005806:	4b10      	ldr	r3, [pc, #64]	@ (8005848 <LCD_Init+0x3980>)
 8005808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800580c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 800580e:	4b0e      	ldr	r3, [pc, #56]	@ (8005848 <LCD_Init+0x3980>)
 8005810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005814:	611a      	str	r2, [r3, #16]
 8005816:	4b0c      	ldr	r3, [pc, #48]	@ (8005848 <LCD_Init+0x3980>)
 8005818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800581c:	615a      	str	r2, [r3, #20]
 800581e:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <LCD_Init+0x3984>)
 8005820:	f240 12df 	movw	r2, #479	@ 0x1df
 8005824:	60da      	str	r2, [r3, #12]
 8005826:	4b08      	ldr	r3, [pc, #32]	@ (8005848 <LCD_Init+0x3980>)
 8005828:	2280      	movs	r2, #128	@ 0x80
 800582a:	615a      	str	r2, [r3, #20]
 800582c:	4b06      	ldr	r3, [pc, #24]	@ (8005848 <LCD_Init+0x3980>)
 800582e:	2280      	movs	r2, #128	@ 0x80
 8005830:	611a      	str	r2, [r3, #16]
 8005832:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <LCD_Init+0x3980>)
 8005834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005838:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列
 800583a:	4b03      	ldr	r3, [pc, #12]	@ (8005848 <LCD_Init+0x3980>)
 800583c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005840:	e006      	b.n	8005850 <LCD_Init+0x3988>
 8005842:	bf00      	nop
 8005844:	20000080 	.word	0x20000080
 8005848:	40011000 	.word	0x40011000
 800584c:	40010c00 	.word	0x40010c00
 8005850:	611a      	str	r2, [r3, #16]
 8005852:	4ba3      	ldr	r3, [pc, #652]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005858:	615a      	str	r2, [r3, #20]
 800585a:	4ba2      	ldr	r3, [pc, #648]	@ (8005ae4 <LCD_Init+0x3c1c>)
 800585c:	2200      	movs	r2, #0
 800585e:	60da      	str	r2, [r3, #12]
 8005860:	4b9f      	ldr	r3, [pc, #636]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005862:	2280      	movs	r2, #128	@ 0x80
 8005864:	615a      	str	r2, [r3, #20]
 8005866:	4b9e      	ldr	r3, [pc, #632]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005868:	2280      	movs	r2, #128	@ 0x80
 800586a:	611a      	str	r2, [r3, #16]
 800586c:	4b9c      	ldr	r3, [pc, #624]	@ (8005ae0 <LCD_Init+0x3c18>)
 800586e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005872:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005874:	20b4      	movs	r0, #180	@ 0xb4
 8005876:	f7fa ffff 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800587a:	4b99      	ldr	r3, [pc, #612]	@ (8005ae0 <LCD_Init+0x3c18>)
 800587c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005880:	611a      	str	r2, [r3, #16]
 8005882:	4b97      	ldr	r3, [pc, #604]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005888:	615a      	str	r2, [r3, #20]
 800588a:	4b96      	ldr	r3, [pc, #600]	@ (8005ae4 <LCD_Init+0x3c1c>)
 800588c:	2204      	movs	r2, #4
 800588e:	60da      	str	r2, [r3, #12]
 8005890:	4b93      	ldr	r3, [pc, #588]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005892:	2280      	movs	r2, #128	@ 0x80
 8005894:	615a      	str	r2, [r3, #20]
 8005896:	4b92      	ldr	r3, [pc, #584]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005898:	2280      	movs	r2, #128	@ 0x80
 800589a:	611a      	str	r2, [r3, #16]
 800589c:	4b90      	ldr	r3, [pc, #576]	@ (8005ae0 <LCD_Init+0x3c18>)
 800589e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058a2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 80058a4:	4b8e      	ldr	r3, [pc, #568]	@ (8005ae0 <LCD_Init+0x3c18>)
 80058a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058aa:	611a      	str	r2, [r3, #16]
 80058ac:	4b8c      	ldr	r3, [pc, #560]	@ (8005ae0 <LCD_Init+0x3c18>)
 80058ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058b2:	615a      	str	r2, [r3, #20]
 80058b4:	4b8b      	ldr	r3, [pc, #556]	@ (8005ae4 <LCD_Init+0x3c1c>)
 80058b6:	f240 421f 	movw	r2, #1055	@ 0x41f
 80058ba:	60da      	str	r2, [r3, #12]
 80058bc:	4b88      	ldr	r3, [pc, #544]	@ (8005ae0 <LCD_Init+0x3c18>)
 80058be:	2280      	movs	r2, #128	@ 0x80
 80058c0:	615a      	str	r2, [r3, #20]
 80058c2:	4b87      	ldr	r3, [pc, #540]	@ (8005ae0 <LCD_Init+0x3c18>)
 80058c4:	2280      	movs	r2, #128	@ 0x80
 80058c6:	611a      	str	r2, [r3, #16]
 80058c8:	4b85      	ldr	r3, [pc, #532]	@ (8005ae0 <LCD_Init+0x3c18>)
 80058ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 80058d0:	4b83      	ldr	r3, [pc, #524]	@ (8005ae0 <LCD_Init+0x3c18>)
 80058d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058d6:	611a      	str	r2, [r3, #16]
 80058d8:	4b81      	ldr	r3, [pc, #516]	@ (8005ae0 <LCD_Init+0x3c18>)
 80058da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058de:	615a      	str	r2, [r3, #20]
 80058e0:	4b80      	ldr	r3, [pc, #512]	@ (8005ae4 <LCD_Init+0x3c1c>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	4b7e      	ldr	r3, [pc, #504]	@ (8005ae0 <LCD_Init+0x3c18>)
 80058e8:	2280      	movs	r2, #128	@ 0x80
 80058ea:	615a      	str	r2, [r3, #20]
 80058ec:	4b7c      	ldr	r3, [pc, #496]	@ (8005ae0 <LCD_Init+0x3c18>)
 80058ee:	2280      	movs	r2, #128	@ 0x80
 80058f0:	611a      	str	r2, [r3, #16]
 80058f2:	4b7b      	ldr	r3, [pc, #492]	@ (8005ae0 <LCD_Init+0x3c18>)
 80058f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058f8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 80058fa:	4b79      	ldr	r3, [pc, #484]	@ (8005ae0 <LCD_Init+0x3c18>)
 80058fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005900:	611a      	str	r2, [r3, #16]
 8005902:	4b77      	ldr	r3, [pc, #476]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005908:	615a      	str	r2, [r3, #20]
 800590a:	4b76      	ldr	r3, [pc, #472]	@ (8005ae4 <LCD_Init+0x3c1c>)
 800590c:	222e      	movs	r2, #46	@ 0x2e
 800590e:	60da      	str	r2, [r3, #12]
 8005910:	4b73      	ldr	r3, [pc, #460]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005912:	2280      	movs	r2, #128	@ 0x80
 8005914:	615a      	str	r2, [r3, #20]
 8005916:	4b72      	ldr	r3, [pc, #456]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005918:	2280      	movs	r2, #128	@ 0x80
 800591a:	611a      	str	r2, [r3, #16]
 800591c:	4b70      	ldr	r3, [pc, #448]	@ (8005ae0 <LCD_Init+0x3c18>)
 800591e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005922:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005924:	4b6e      	ldr	r3, [pc, #440]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005926:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800592a:	611a      	str	r2, [r3, #16]
 800592c:	4b6c      	ldr	r3, [pc, #432]	@ (8005ae0 <LCD_Init+0x3c18>)
 800592e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005932:	615a      	str	r2, [r3, #20]
 8005934:	4b6b      	ldr	r3, [pc, #428]	@ (8005ae4 <LCD_Init+0x3c1c>)
 8005936:	2200      	movs	r2, #0
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	4b69      	ldr	r3, [pc, #420]	@ (8005ae0 <LCD_Init+0x3c18>)
 800593c:	2280      	movs	r2, #128	@ 0x80
 800593e:	615a      	str	r2, [r3, #20]
 8005940:	4b67      	ldr	r3, [pc, #412]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005942:	2280      	movs	r2, #128	@ 0x80
 8005944:	611a      	str	r2, [r3, #16]
 8005946:	4b66      	ldr	r3, [pc, #408]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800594c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800594e:	4b64      	ldr	r3, [pc, #400]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005950:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005954:	611a      	str	r2, [r3, #16]
 8005956:	4b62      	ldr	r3, [pc, #392]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005958:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800595c:	615a      	str	r2, [r3, #20]
 800595e:	4b61      	ldr	r3, [pc, #388]	@ (8005ae4 <LCD_Init+0x3c1c>)
 8005960:	2200      	movs	r2, #0
 8005962:	60da      	str	r2, [r3, #12]
 8005964:	4b5e      	ldr	r3, [pc, #376]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005966:	2280      	movs	r2, #128	@ 0x80
 8005968:	615a      	str	r2, [r3, #20]
 800596a:	4b5d      	ldr	r3, [pc, #372]	@ (8005ae0 <LCD_Init+0x3c18>)
 800596c:	2280      	movs	r2, #128	@ 0x80
 800596e:	611a      	str	r2, [r3, #16]
 8005970:	4b5b      	ldr	r3, [pc, #364]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005976:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005978:	4b59      	ldr	r3, [pc, #356]	@ (8005ae0 <LCD_Init+0x3c18>)
 800597a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800597e:	611a      	str	r2, [r3, #16]
 8005980:	4b57      	ldr	r3, [pc, #348]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005986:	615a      	str	r2, [r3, #20]
 8005988:	4b56      	ldr	r3, [pc, #344]	@ (8005ae4 <LCD_Init+0x3c1c>)
 800598a:	2200      	movs	r2, #0
 800598c:	60da      	str	r2, [r3, #12]
 800598e:	4b54      	ldr	r3, [pc, #336]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005990:	2280      	movs	r2, #128	@ 0x80
 8005992:	615a      	str	r2, [r3, #20]
 8005994:	4b52      	ldr	r3, [pc, #328]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005996:	2280      	movs	r2, #128	@ 0x80
 8005998:	611a      	str	r2, [r3, #16]
 800599a:	4b51      	ldr	r3, [pc, #324]	@ (8005ae0 <LCD_Init+0x3c18>)
 800599c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059a0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80059a2:	4b4f      	ldr	r3, [pc, #316]	@ (8005ae0 <LCD_Init+0x3c18>)
 80059a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059a8:	611a      	str	r2, [r3, #16]
 80059aa:	4b4d      	ldr	r3, [pc, #308]	@ (8005ae0 <LCD_Init+0x3c18>)
 80059ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059b0:	615a      	str	r2, [r3, #20]
 80059b2:	4b4c      	ldr	r3, [pc, #304]	@ (8005ae4 <LCD_Init+0x3c1c>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	60da      	str	r2, [r3, #12]
 80059b8:	4b49      	ldr	r3, [pc, #292]	@ (8005ae0 <LCD_Init+0x3c18>)
 80059ba:	2280      	movs	r2, #128	@ 0x80
 80059bc:	615a      	str	r2, [r3, #20]
 80059be:	4b48      	ldr	r3, [pc, #288]	@ (8005ae0 <LCD_Init+0x3c18>)
 80059c0:	2280      	movs	r2, #128	@ 0x80
 80059c2:	611a      	str	r2, [r3, #16]
 80059c4:	4b46      	ldr	r3, [pc, #280]	@ (8005ae0 <LCD_Init+0x3c18>)
 80059c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059ca:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 80059cc:	20b6      	movs	r0, #182	@ 0xb6
 80059ce:	f7fa ff53 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80059d2:	4b43      	ldr	r3, [pc, #268]	@ (8005ae0 <LCD_Init+0x3c18>)
 80059d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059d8:	611a      	str	r2, [r3, #16]
 80059da:	4b41      	ldr	r3, [pc, #260]	@ (8005ae0 <LCD_Init+0x3c18>)
 80059dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059e0:	615a      	str	r2, [r3, #20]
 80059e2:	4b40      	ldr	r3, [pc, #256]	@ (8005ae4 <LCD_Init+0x3c1c>)
 80059e4:	2202      	movs	r2, #2
 80059e6:	60da      	str	r2, [r3, #12]
 80059e8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ae0 <LCD_Init+0x3c18>)
 80059ea:	2280      	movs	r2, #128	@ 0x80
 80059ec:	615a      	str	r2, [r3, #20]
 80059ee:	4b3c      	ldr	r3, [pc, #240]	@ (8005ae0 <LCD_Init+0x3c18>)
 80059f0:	2280      	movs	r2, #128	@ 0x80
 80059f2:	611a      	str	r2, [r3, #16]
 80059f4:	4b3a      	ldr	r3, [pc, #232]	@ (8005ae0 <LCD_Init+0x3c18>)
 80059f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059fa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 80059fc:	4b38      	ldr	r3, [pc, #224]	@ (8005ae0 <LCD_Init+0x3c18>)
 80059fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a02:	611a      	str	r2, [r3, #16]
 8005a04:	4b36      	ldr	r3, [pc, #216]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a0a:	615a      	str	r2, [r3, #20]
 8005a0c:	4b35      	ldr	r3, [pc, #212]	@ (8005ae4 <LCD_Init+0x3c1c>)
 8005a0e:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8005a12:	60da      	str	r2, [r3, #12]
 8005a14:	4b32      	ldr	r3, [pc, #200]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a16:	2280      	movs	r2, #128	@ 0x80
 8005a18:	615a      	str	r2, [r3, #20]
 8005a1a:	4b31      	ldr	r3, [pc, #196]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a1c:	2280      	movs	r2, #128	@ 0x80
 8005a1e:	611a      	str	r2, [r3, #16]
 8005a20:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005a28:	4b2d      	ldr	r3, [pc, #180]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a2e:	611a      	str	r2, [r3, #16]
 8005a30:	4b2b      	ldr	r3, [pc, #172]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a36:	615a      	str	r2, [r3, #20]
 8005a38:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae4 <LCD_Init+0x3c1c>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	4b28      	ldr	r3, [pc, #160]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a40:	2280      	movs	r2, #128	@ 0x80
 8005a42:	615a      	str	r2, [r3, #20]
 8005a44:	4b26      	ldr	r3, [pc, #152]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a46:	2280      	movs	r2, #128	@ 0x80
 8005a48:	611a      	str	r2, [r3, #16]
 8005a4a:	4b25      	ldr	r3, [pc, #148]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a50:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005a52:	4b23      	ldr	r3, [pc, #140]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a58:	611a      	str	r2, [r3, #16]
 8005a5a:	4b21      	ldr	r3, [pc, #132]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a60:	615a      	str	r2, [r3, #20]
 8005a62:	4b20      	ldr	r3, [pc, #128]	@ (8005ae4 <LCD_Init+0x3c1c>)
 8005a64:	2217      	movs	r2, #23
 8005a66:	60da      	str	r2, [r3, #12]
 8005a68:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a6a:	2280      	movs	r2, #128	@ 0x80
 8005a6c:	615a      	str	r2, [r3, #20]
 8005a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a70:	2280      	movs	r2, #128	@ 0x80
 8005a72:	611a      	str	r2, [r3, #16]
 8005a74:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005a7c:	4b18      	ldr	r3, [pc, #96]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a82:	611a      	str	r2, [r3, #16]
 8005a84:	4b16      	ldr	r3, [pc, #88]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a8a:	615a      	str	r2, [r3, #20]
 8005a8c:	4b15      	ldr	r3, [pc, #84]	@ (8005ae4 <LCD_Init+0x3c1c>)
 8005a8e:	2215      	movs	r2, #21
 8005a90:	60da      	str	r2, [r3, #12]
 8005a92:	4b13      	ldr	r3, [pc, #76]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a94:	2280      	movs	r2, #128	@ 0x80
 8005a96:	615a      	str	r2, [r3, #20]
 8005a98:	4b11      	ldr	r3, [pc, #68]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005a9a:	2280      	movs	r2, #128	@ 0x80
 8005a9c:	611a      	str	r2, [r3, #16]
 8005a9e:	4b10      	ldr	r3, [pc, #64]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aa4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005aa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005aac:	611a      	str	r2, [r3, #16]
 8005aae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ab4:	615a      	str	r2, [r3, #20]
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae4 <LCD_Init+0x3c1c>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	60da      	str	r2, [r3, #12]
 8005abc:	4b08      	ldr	r3, [pc, #32]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005abe:	2280      	movs	r2, #128	@ 0x80
 8005ac0:	615a      	str	r2, [r3, #20]
 8005ac2:	4b07      	ldr	r3, [pc, #28]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005ac4:	2280      	movs	r2, #128	@ 0x80
 8005ac6:	611a      	str	r2, [r3, #16]
 8005ac8:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ace:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005ad0:	4b03      	ldr	r3, [pc, #12]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005ad2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ad6:	611a      	str	r2, [r3, #16]
 8005ad8:	4b01      	ldr	r3, [pc, #4]	@ (8005ae0 <LCD_Init+0x3c18>)
 8005ada:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ade:	e003      	b.n	8005ae8 <LCD_Init+0x3c20>
 8005ae0:	40011000 	.word	0x40011000
 8005ae4:	40010c00 	.word	0x40010c00
 8005ae8:	615a      	str	r2, [r3, #20]
 8005aea:	4b8b      	ldr	r3, [pc, #556]	@ (8005d18 <LCD_Init+0x3e50>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	60da      	str	r2, [r3, #12]
 8005af0:	4b8a      	ldr	r3, [pc, #552]	@ (8005d1c <LCD_Init+0x3e54>)
 8005af2:	2280      	movs	r2, #128	@ 0x80
 8005af4:	615a      	str	r2, [r3, #20]
 8005af6:	4b89      	ldr	r3, [pc, #548]	@ (8005d1c <LCD_Init+0x3e54>)
 8005af8:	2280      	movs	r2, #128	@ 0x80
 8005afa:	611a      	str	r2, [r3, #16]
 8005afc:	4b87      	ldr	r3, [pc, #540]	@ (8005d1c <LCD_Init+0x3e54>)
 8005afe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b02:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 8005b04:	20f0      	movs	r0, #240	@ 0xf0
 8005b06:	f7fa feb7 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8005b0a:	4b84      	ldr	r3, [pc, #528]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b10:	611a      	str	r2, [r3, #16]
 8005b12:	4b82      	ldr	r3, [pc, #520]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b18:	615a      	str	r2, [r3, #20]
 8005b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d18 <LCD_Init+0x3e50>)
 8005b1c:	2203      	movs	r2, #3
 8005b1e:	60da      	str	r2, [r3, #12]
 8005b20:	4b7e      	ldr	r3, [pc, #504]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b22:	2280      	movs	r2, #128	@ 0x80
 8005b24:	615a      	str	r2, [r3, #20]
 8005b26:	4b7d      	ldr	r3, [pc, #500]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b28:	2280      	movs	r2, #128	@ 0x80
 8005b2a:	611a      	str	r2, [r3, #16]
 8005b2c:	4b7b      	ldr	r3, [pc, #492]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b32:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005b34:	2029      	movs	r0, #41	@ 0x29
 8005b36:	f7fa fe9f 	bl	8000878 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005b3a:	20d0      	movs	r0, #208	@ 0xd0
 8005b3c:	f7fa fe9c 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005b40:	4b76      	ldr	r3, [pc, #472]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b46:	611a      	str	r2, [r3, #16]
 8005b48:	4b74      	ldr	r3, [pc, #464]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b4e:	615a      	str	r2, [r3, #20]
 8005b50:	4b71      	ldr	r3, [pc, #452]	@ (8005d18 <LCD_Init+0x3e50>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	60da      	str	r2, [r3, #12]
 8005b56:	4b71      	ldr	r3, [pc, #452]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b58:	2280      	movs	r2, #128	@ 0x80
 8005b5a:	615a      	str	r2, [r3, #20]
 8005b5c:	4b6f      	ldr	r3, [pc, #444]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b5e:	2280      	movs	r2, #128	@ 0x80
 8005b60:	611a      	str	r2, [r3, #16]
 8005b62:	4b6e      	ldr	r3, [pc, #440]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b68:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005b6a:	20be      	movs	r0, #190	@ 0xbe
 8005b6c:	f7fa fe84 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005b70:	4b6a      	ldr	r3, [pc, #424]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b76:	611a      	str	r2, [r3, #16]
 8005b78:	4b68      	ldr	r3, [pc, #416]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b7e:	615a      	str	r2, [r3, #20]
 8005b80:	4b65      	ldr	r3, [pc, #404]	@ (8005d18 <LCD_Init+0x3e50>)
 8005b82:	2205      	movs	r2, #5
 8005b84:	60da      	str	r2, [r3, #12]
 8005b86:	4b65      	ldr	r3, [pc, #404]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b88:	2280      	movs	r2, #128	@ 0x80
 8005b8a:	615a      	str	r2, [r3, #20]
 8005b8c:	4b63      	ldr	r3, [pc, #396]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b8e:	2280      	movs	r2, #128	@ 0x80
 8005b90:	611a      	str	r2, [r3, #16]
 8005b92:	4b62      	ldr	r3, [pc, #392]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b98:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005b9a:	4b60      	ldr	r3, [pc, #384]	@ (8005d1c <LCD_Init+0x3e54>)
 8005b9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ba0:	611a      	str	r2, [r3, #16]
 8005ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8005d1c <LCD_Init+0x3e54>)
 8005ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ba8:	615a      	str	r2, [r3, #20]
 8005baa:	4b5b      	ldr	r3, [pc, #364]	@ (8005d18 <LCD_Init+0x3e50>)
 8005bac:	22fe      	movs	r2, #254	@ 0xfe
 8005bae:	60da      	str	r2, [r3, #12]
 8005bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8005d1c <LCD_Init+0x3e54>)
 8005bb2:	2280      	movs	r2, #128	@ 0x80
 8005bb4:	615a      	str	r2, [r3, #20]
 8005bb6:	4b59      	ldr	r3, [pc, #356]	@ (8005d1c <LCD_Init+0x3e54>)
 8005bb8:	2280      	movs	r2, #128	@ 0x80
 8005bba:	611a      	str	r2, [r3, #16]
 8005bbc:	4b57      	ldr	r3, [pc, #348]	@ (8005d1c <LCD_Init+0x3e54>)
 8005bbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bc2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005bc4:	4b55      	ldr	r3, [pc, #340]	@ (8005d1c <LCD_Init+0x3e54>)
 8005bc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bca:	611a      	str	r2, [r3, #16]
 8005bcc:	4b53      	ldr	r3, [pc, #332]	@ (8005d1c <LCD_Init+0x3e54>)
 8005bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bd2:	615a      	str	r2, [r3, #20]
 8005bd4:	4b50      	ldr	r3, [pc, #320]	@ (8005d18 <LCD_Init+0x3e50>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	60da      	str	r2, [r3, #12]
 8005bda:	4b50      	ldr	r3, [pc, #320]	@ (8005d1c <LCD_Init+0x3e54>)
 8005bdc:	2280      	movs	r2, #128	@ 0x80
 8005bde:	615a      	str	r2, [r3, #20]
 8005be0:	4b4e      	ldr	r3, [pc, #312]	@ (8005d1c <LCD_Init+0x3e54>)
 8005be2:	2280      	movs	r2, #128	@ 0x80
 8005be4:	611a      	str	r2, [r3, #16]
 8005be6:	4b4d      	ldr	r3, [pc, #308]	@ (8005d1c <LCD_Init+0x3e54>)
 8005be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005bee:	4b4b      	ldr	r3, [pc, #300]	@ (8005d1c <LCD_Init+0x3e54>)
 8005bf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bf4:	611a      	str	r2, [r3, #16]
 8005bf6:	4b49      	ldr	r3, [pc, #292]	@ (8005d1c <LCD_Init+0x3e54>)
 8005bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bfc:	615a      	str	r2, [r3, #20]
 8005bfe:	4b46      	ldr	r3, [pc, #280]	@ (8005d18 <LCD_Init+0x3e50>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	60da      	str	r2, [r3, #12]
 8005c04:	4b45      	ldr	r3, [pc, #276]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c06:	2280      	movs	r2, #128	@ 0x80
 8005c08:	615a      	str	r2, [r3, #20]
 8005c0a:	4b44      	ldr	r3, [pc, #272]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c0c:	2280      	movs	r2, #128	@ 0x80
 8005c0e:	611a      	str	r2, [r3, #16]
 8005c10:	4b42      	ldr	r3, [pc, #264]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c16:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E
 8005c18:	4b40      	ldr	r3, [pc, #256]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c1e:	611a      	str	r2, [r3, #16]
 8005c20:	4b3e      	ldr	r3, [pc, #248]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c26:	615a      	str	r2, [r3, #20]
 8005c28:	4b3b      	ldr	r3, [pc, #236]	@ (8005d18 <LCD_Init+0x3e50>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	60da      	str	r2, [r3, #12]
 8005c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c30:	2280      	movs	r2, #128	@ 0x80
 8005c32:	615a      	str	r2, [r3, #20]
 8005c34:	4b39      	ldr	r3, [pc, #228]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c36:	2280      	movs	r2, #128	@ 0x80
 8005c38:	611a      	str	r2, [r3, #16]
 8005c3a:	4b38      	ldr	r3, [pc, #224]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c40:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F
 8005c42:	4b36      	ldr	r3, [pc, #216]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c48:	611a      	str	r2, [r3, #16]
 8005c4a:	4b34      	ldr	r3, [pc, #208]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c50:	615a      	str	r2, [r3, #20]
 8005c52:	4b31      	ldr	r3, [pc, #196]	@ (8005d18 <LCD_Init+0x3e50>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	60da      	str	r2, [r3, #12]
 8005c58:	4b30      	ldr	r3, [pc, #192]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c5a:	2280      	movs	r2, #128	@ 0x80
 8005c5c:	615a      	str	r2, [r3, #20]
 8005c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c60:	2280      	movs	r2, #128	@ 0x80
 8005c62:	611a      	str	r2, [r3, #16]
 8005c64:	4b2d      	ldr	r3, [pc, #180]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c6a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005c6c:	20b8      	movs	r0, #184	@ 0xb8
 8005c6e:	f7fa fe03 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005c72:	4b2a      	ldr	r3, [pc, #168]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c78:	611a      	str	r2, [r3, #16]
 8005c7a:	4b28      	ldr	r3, [pc, #160]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c80:	615a      	str	r2, [r3, #20]
 8005c82:	4b25      	ldr	r3, [pc, #148]	@ (8005d18 <LCD_Init+0x3e50>)
 8005c84:	2203      	movs	r2, #3
 8005c86:	60da      	str	r2, [r3, #12]
 8005c88:	4b24      	ldr	r3, [pc, #144]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c8a:	2280      	movs	r2, #128	@ 0x80
 8005c8c:	615a      	str	r2, [r3, #20]
 8005c8e:	4b23      	ldr	r3, [pc, #140]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c90:	2280      	movs	r2, #128	@ 0x80
 8005c92:	611a      	str	r2, [r3, #16]
 8005c94:	4b21      	ldr	r3, [pc, #132]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c9a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 8005c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8005d1c <LCD_Init+0x3e54>)
 8005c9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ca2:	611a      	str	r2, [r3, #16]
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d1c <LCD_Init+0x3e54>)
 8005ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005caa:	615a      	str	r2, [r3, #20]
 8005cac:	4b1a      	ldr	r3, [pc, #104]	@ (8005d18 <LCD_Init+0x3e50>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	60da      	str	r2, [r3, #12]
 8005cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8005d1c <LCD_Init+0x3e54>)
 8005cb4:	2280      	movs	r2, #128	@ 0x80
 8005cb6:	615a      	str	r2, [r3, #20]
 8005cb8:	4b18      	ldr	r3, [pc, #96]	@ (8005d1c <LCD_Init+0x3e54>)
 8005cba:	2280      	movs	r2, #128	@ 0x80
 8005cbc:	611a      	str	r2, [r3, #16]
 8005cbe:	4b17      	ldr	r3, [pc, #92]	@ (8005d1c <LCD_Init+0x3e54>)
 8005cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cc4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005cc6:	20ba      	movs	r0, #186	@ 0xba
 8005cc8:	f7fa fdd6 	bl	8000878 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005ccc:	4b13      	ldr	r3, [pc, #76]	@ (8005d1c <LCD_Init+0x3e54>)
 8005cce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cd2:	611a      	str	r2, [r3, #16]
 8005cd4:	4b11      	ldr	r3, [pc, #68]	@ (8005d1c <LCD_Init+0x3e54>)
 8005cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cda:	615a      	str	r2, [r3, #20]
 8005cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8005d18 <LCD_Init+0x3e50>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	60da      	str	r2, [r3, #12]
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8005d1c <LCD_Init+0x3e54>)
 8005ce4:	2280      	movs	r2, #128	@ 0x80
 8005ce6:	615a      	str	r2, [r3, #20]
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d1c <LCD_Init+0x3e54>)
 8005cea:	2280      	movs	r2, #128	@ 0x80
 8005cec:	611a      	str	r2, [r3, #16]
 8005cee:	4b0b      	ldr	r3, [pc, #44]	@ (8005d1c <LCD_Init+0x3e54>)
 8005cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cf4:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005cf6:	2064      	movs	r0, #100	@ 0x64
 8005cf8:	f7fb ff36 	bl	8001b68 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	f7fb ffd7 	bl	8001cb0 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005d02:	4b07      	ldr	r3, [pc, #28]	@ (8005d20 <LCD_Init+0x3e58>)
 8005d04:	2201      	movs	r2, #1
 8005d06:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005d08:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005d0c:	f000 f80a 	bl	8005d24 <LCD_Clear>
}
 8005d10:	bf00      	nop
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40010c00 	.word	0x40010c00
 8005d1c:	40011000 	.word	0x40011000
 8005d20:	422201a8 	.word	0x422201a8

08005d24 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005d32:	4b2a      	ldr	r3, [pc, #168]	@ (8005ddc <LCD_Clear+0xb8>)
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005d38:	4b28      	ldr	r3, [pc, #160]	@ (8005ddc <LCD_Clear+0xb8>)
 8005d3a:	885b      	ldrh	r3, [r3, #2]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	fb02 f303 	mul.w	r3, r2, r3
 8005d44:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005d46:	4b25      	ldr	r3, [pc, #148]	@ (8005ddc <LCD_Clear+0xb8>)
 8005d48:	889b      	ldrh	r3, [r3, #4]
 8005d4a:	f646 0204 	movw	r2, #26628	@ 0x6804
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d11a      	bne.n	8005d88 <LCD_Clear+0x64>
 8005d52:	4b22      	ldr	r3, [pc, #136]	@ (8005ddc <LCD_Clear+0xb8>)
 8005d54:	799b      	ldrb	r3, [r3, #6]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d116      	bne.n	8005d88 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005d5a:	4b20      	ldr	r3, [pc, #128]	@ (8005ddc <LCD_Clear+0xb8>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005d60:	4b1e      	ldr	r3, [pc, #120]	@ (8005ddc <LCD_Clear+0xb8>)
 8005d62:	222a      	movs	r2, #42	@ 0x2a
 8005d64:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005d66:	4b1d      	ldr	r3, [pc, #116]	@ (8005ddc <LCD_Clear+0xb8>)
 8005d68:	222b      	movs	r2, #43	@ 0x2b
 8005d6a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	2000      	movs	r0, #0
 8005d70:	f7fa fe54 	bl	8000a1c <LCD_SetCursor>
		lcddev.dir = 1;
 8005d74:	4b19      	ldr	r3, [pc, #100]	@ (8005ddc <LCD_Clear+0xb8>)
 8005d76:	2201      	movs	r2, #1
 8005d78:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005d7a:	4b18      	ldr	r3, [pc, #96]	@ (8005ddc <LCD_Clear+0xb8>)
 8005d7c:	222b      	movs	r2, #43	@ 0x2b
 8005d7e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005d80:	4b16      	ldr	r3, [pc, #88]	@ (8005ddc <LCD_Clear+0xb8>)
 8005d82:	222a      	movs	r2, #42	@ 0x2a
 8005d84:	819a      	strh	r2, [r3, #12]
 8005d86:	e003      	b.n	8005d90 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005d88:	2100      	movs	r1, #0
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	f7fa fe46 	bl	8000a1c <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 8005d90:	f7fa fe38 	bl	8000a04 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e017      	b.n	8005dca <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005d9a:	4b11      	ldr	r3, [pc, #68]	@ (8005de0 <LCD_Clear+0xbc>)
 8005d9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005da0:	611a      	str	r2, [r3, #16]
 8005da2:	4b0f      	ldr	r3, [pc, #60]	@ (8005de0 <LCD_Clear+0xbc>)
 8005da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005da8:	615a      	str	r2, [r3, #20]
 8005daa:	4a0e      	ldr	r2, [pc, #56]	@ (8005de4 <LCD_Clear+0xc0>)
 8005dac:	88fb      	ldrh	r3, [r7, #6]
 8005dae:	60d3      	str	r3, [r2, #12]
 8005db0:	4b0b      	ldr	r3, [pc, #44]	@ (8005de0 <LCD_Clear+0xbc>)
 8005db2:	2280      	movs	r2, #128	@ 0x80
 8005db4:	615a      	str	r2, [r3, #20]
 8005db6:	4b0a      	ldr	r3, [pc, #40]	@ (8005de0 <LCD_Clear+0xbc>)
 8005db8:	2280      	movs	r2, #128	@ 0x80
 8005dba:	611a      	str	r2, [r3, #16]
 8005dbc:	4b08      	ldr	r3, [pc, #32]	@ (8005de0 <LCD_Clear+0xbc>)
 8005dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dc2:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d3e3      	bcc.n	8005d9a <LCD_Clear+0x76>
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000080 	.word	0x20000080
 8005de0:	40011000 	.word	0x40011000
 8005de4:	40010c00 	.word	0x40010c00

08005de8 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8005de8:	b590      	push	{r4, r7, lr}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	4604      	mov	r4, r0
 8005df0:	4608      	mov	r0, r1
 8005df2:	4611      	mov	r1, r2
 8005df4:	461a      	mov	r2, r3
 8005df6:	4623      	mov	r3, r4
 8005df8:	80fb      	strh	r3, [r7, #6]
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	80bb      	strh	r3, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	807b      	strh	r3, [r7, #2]
 8005e02:	4613      	mov	r3, r2
 8005e04:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 8005e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef8 <LCD_Fill+0x110>)
 8005e0c:	889b      	ldrh	r3, [r3, #4]
 8005e0e:	f646 0204 	movw	r2, #26628	@ 0x6804
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d133      	bne.n	8005e7e <LCD_Fill+0x96>
 8005e16:	4b38      	ldr	r3, [pc, #224]	@ (8005ef8 <LCD_Fill+0x110>)
 8005e18:	799b      	ldrb	r3, [r3, #6]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d12f      	bne.n	8005e7e <LCD_Fill+0x96>
			{
		temp = sx;
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	813b      	strh	r3, [r7, #8]
		sx = sy;
 8005e22:	88bb      	ldrh	r3, [r7, #4]
 8005e24:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 8005e26:	4b34      	ldr	r3, [pc, #208]	@ (8005ef8 <LCD_Fill+0x110>)
 8005e28:	881a      	ldrh	r2, [r3, #0]
 8005e2a:	887b      	ldrh	r3, [r7, #2]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 8005e34:	883b      	ldrh	r3, [r7, #0]
 8005e36:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 8005e38:	4b2f      	ldr	r3, [pc, #188]	@ (8005ef8 <LCD_Fill+0x110>)
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	893b      	ldrh	r3, [r7, #8]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 8005e46:	4b2c      	ldr	r3, [pc, #176]	@ (8005ef8 <LCD_Fill+0x110>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ef8 <LCD_Fill+0x110>)
 8005e4e:	222a      	movs	r2, #42	@ 0x2a
 8005e50:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005e52:	4b29      	ldr	r3, [pc, #164]	@ (8005ef8 <LCD_Fill+0x110>)
 8005e54:	222b      	movs	r2, #43	@ 0x2b
 8005e56:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 8005e58:	883c      	ldrh	r4, [r7, #0]
 8005e5a:	887a      	ldrh	r2, [r7, #2]
 8005e5c:	88b9      	ldrh	r1, [r7, #4]
 8005e5e:	88f8      	ldrh	r0, [r7, #6]
 8005e60:	8c3b      	ldrh	r3, [r7, #32]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	4623      	mov	r3, r4
 8005e66:	f7ff ffbf 	bl	8005de8 <LCD_Fill>
		lcddev.dir = 1;
 8005e6a:	4b23      	ldr	r3, [pc, #140]	@ (8005ef8 <LCD_Fill+0x110>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005e70:	4b21      	ldr	r3, [pc, #132]	@ (8005ef8 <LCD_Fill+0x110>)
 8005e72:	222b      	movs	r2, #43	@ 0x2b
 8005e74:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005e76:	4b20      	ldr	r3, [pc, #128]	@ (8005ef8 <LCD_Fill+0x110>)
 8005e78:	222a      	movs	r2, #42	@ 0x2a
 8005e7a:	819a      	strh	r2, [r3, #12]
 8005e7c:	e037      	b.n	8005eee <LCD_Fill+0x106>
	} else {
		xlen = ex - sx + 1;
 8005e7e:	887a      	ldrh	r2, [r7, #2]
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3301      	adds	r3, #1
 8005e88:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 8005e8a:	88bb      	ldrh	r3, [r7, #4]
 8005e8c:	81fb      	strh	r3, [r7, #14]
 8005e8e:	e029      	b.n	8005ee4 <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8005e90:	89fa      	ldrh	r2, [r7, #14]
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	4611      	mov	r1, r2
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fa fdc0 	bl	8000a1c <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM
 8005e9c:	f7fa fdb2 	bl	8000a04 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	81bb      	strh	r3, [r7, #12]
 8005ea4:	e017      	b.n	8005ed6 <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 8005ea6:	4b15      	ldr	r3, [pc, #84]	@ (8005efc <LCD_Fill+0x114>)
 8005ea8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005eac:	611a      	str	r2, [r3, #16]
 8005eae:	4b13      	ldr	r3, [pc, #76]	@ (8005efc <LCD_Fill+0x114>)
 8005eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eb4:	615a      	str	r2, [r3, #20]
 8005eb6:	4a12      	ldr	r2, [pc, #72]	@ (8005f00 <LCD_Fill+0x118>)
 8005eb8:	8c3b      	ldrh	r3, [r7, #32]
 8005eba:	60d3      	str	r3, [r2, #12]
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8005efc <LCD_Fill+0x114>)
 8005ebe:	2280      	movs	r2, #128	@ 0x80
 8005ec0:	615a      	str	r2, [r3, #20]
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8005efc <LCD_Fill+0x114>)
 8005ec4:	2280      	movs	r2, #128	@ 0x80
 8005ec6:	611a      	str	r2, [r3, #16]
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8005efc <LCD_Fill+0x114>)
 8005eca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ece:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8005ed0:	89bb      	ldrh	r3, [r7, #12]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	81bb      	strh	r3, [r7, #12]
 8005ed6:	89ba      	ldrh	r2, [r7, #12]
 8005ed8:	897b      	ldrh	r3, [r7, #10]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d3e3      	bcc.n	8005ea6 <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 8005ede:	89fb      	ldrh	r3, [r7, #14]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	81fb      	strh	r3, [r7, #14]
 8005ee4:	89fa      	ldrh	r2, [r7, #14]
 8005ee6:	883b      	ldrh	r3, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d9d1      	bls.n	8005e90 <LCD_Fill+0xa8>
		}
	}
}
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd90      	pop	{r4, r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000080 	.word	0x20000080
 8005efc:	40011000 	.word	0x40011000
 8005f00:	40010c00 	.word	0x40010c00

08005f04 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8005f04:	b590      	push	{r4, r7, lr}
 8005f06:	b08d      	sub	sp, #52	@ 0x34
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	4611      	mov	r1, r2
 8005f10:	461a      	mov	r2, r3
 8005f12:	4623      	mov	r3, r4
 8005f14:	80fb      	strh	r3, [r7, #6]
 8005f16:	4603      	mov	r3, r0
 8005f18:	80bb      	strh	r3, [r7, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	807b      	strh	r3, [r7, #2]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8005f22:	2300      	movs	r3, #0
 8005f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f26:	2300      	movs	r3, #0
 8005f28:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 8005f2a:	887a      	ldrh	r2, [r7, #2]
 8005f2c:	88fb      	ldrh	r3, [r7, #6]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8005f32:	883a      	ldrh	r2, [r7, #0]
 8005f34:	88bb      	ldrh	r3, [r7, #4]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8005f3e:	88bb      	ldrh	r3, [r7, #4]
 8005f40:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	dd02      	ble.n	8005f4e <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 8005f48:	2301      	movs	r3, #1
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e00b      	b.n	8005f66 <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d102      	bne.n	8005f5a <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e005      	b.n	8005f66 <LCD_DrawLine+0x62>
	else {
		incx = -1;
 8005f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5e:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	425b      	negs	r3, r3
 8005f64:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dd02      	ble.n	8005f72 <LCD_DrawLine+0x6e>
		incy = 1;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	613b      	str	r3, [r7, #16]
 8005f70:	e00b      	b.n	8005f8a <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8005f78:	2300      	movs	r3, #0
 8005f7a:	613b      	str	r3, [r7, #16]
 8005f7c:	e005      	b.n	8005f8a <LCD_DrawLine+0x86>
	else {
		incy = -1;
 8005f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f82:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	425b      	negs	r3, r3
 8005f88:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8005f8a:	6a3a      	ldr	r2, [r7, #32]
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	dd02      	ble.n	8005f98 <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	e001      	b.n	8005f9c <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005fa0:	e02a      	b.n	8005ff8 <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	b292      	uxth	r2, r2
 8005faa:	4611      	mov	r1, r2
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fb fb13 	bl	80015d8 <LCD_DrawPoint>
		xerr += delta_x;
 8005fb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr += delta_y;
 8005fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (xerr > distance) {
 8005fc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	dd07      	ble.n	8005fda <LCD_DrawLine+0xd6>
			xerr -= distance;
 8005fca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow += incx;
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8005fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	dd07      	ble.n	8005ff2 <LCD_DrawLine+0xee>
			yerr -= distance;
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol += incy;
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4413      	add	r3, r2
 8005ff0:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8005ff2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005ff8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	429a      	cmp	r2, r3
 8006000:	ddcf      	ble.n	8005fa2 <LCD_DrawLine+0x9e>
		}
	}
}
 8006002:	bf00      	nop
 8006004:	bf00      	nop
 8006006:	3734      	adds	r7, #52	@ 0x34
 8006008:	46bd      	mov	sp, r7
 800600a:	bd90      	pop	{r4, r7, pc}

0800600c <LCD_DrawRectangle>:
//Draw a rectangle
//(x1,y1),(x2,y2): coordinates of the upper left point and bottom right point of a rectangle
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800600c:	b590      	push	{r4, r7, lr}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	4604      	mov	r4, r0
 8006014:	4608      	mov	r0, r1
 8006016:	4611      	mov	r1, r2
 8006018:	461a      	mov	r2, r3
 800601a:	4623      	mov	r3, r4
 800601c:	80fb      	strh	r3, [r7, #6]
 800601e:	4603      	mov	r3, r0
 8006020:	80bb      	strh	r3, [r7, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	807b      	strh	r3, [r7, #2]
 8006026:	4613      	mov	r3, r2
 8006028:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1, y1, x2, y1);
 800602a:	88bb      	ldrh	r3, [r7, #4]
 800602c:	887a      	ldrh	r2, [r7, #2]
 800602e:	88b9      	ldrh	r1, [r7, #4]
 8006030:	88f8      	ldrh	r0, [r7, #6]
 8006032:	f7ff ff67 	bl	8005f04 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x1, y2);
 8006036:	883b      	ldrh	r3, [r7, #0]
 8006038:	88fa      	ldrh	r2, [r7, #6]
 800603a:	88b9      	ldrh	r1, [r7, #4]
 800603c:	88f8      	ldrh	r0, [r7, #6]
 800603e:	f7ff ff61 	bl	8005f04 <LCD_DrawLine>
	LCD_DrawLine(x1, y2, x2, y2);
 8006042:	883b      	ldrh	r3, [r7, #0]
 8006044:	887a      	ldrh	r2, [r7, #2]
 8006046:	8839      	ldrh	r1, [r7, #0]
 8006048:	88f8      	ldrh	r0, [r7, #6]
 800604a:	f7ff ff5b 	bl	8005f04 <LCD_DrawLine>
	LCD_DrawLine(x2, y1, x2, y2);
 800604e:	883b      	ldrh	r3, [r7, #0]
 8006050:	887a      	ldrh	r2, [r7, #2]
 8006052:	88b9      	ldrh	r1, [r7, #4]
 8006054:	8878      	ldrh	r0, [r7, #2]
 8006056:	f7ff ff55 	bl	8005f04 <LCD_DrawLine>
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	bd90      	pop	{r4, r7, pc}
	...

08006064 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	4604      	mov	r4, r0
 800606c:	4608      	mov	r0, r1
 800606e:	4611      	mov	r1, r2
 8006070:	461a      	mov	r2, r3
 8006072:	4623      	mov	r3, r4
 8006074:	80fb      	strh	r3, [r7, #6]
 8006076:	4603      	mov	r3, r0
 8006078:	80bb      	strh	r3, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
 800607e:	4613      	mov	r3, r2
 8006080:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8006082:	88bb      	ldrh	r3, [r7, #4]
 8006084:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8006086:	78bb      	ldrb	r3, [r7, #2]
 8006088:	08db      	lsrs	r3, r3, #3
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	78bb      	ldrb	r3, [r7, #2]
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	bf14      	ite	ne
 800609a:	2301      	movne	r3, #1
 800609c:	2300      	moveq	r3, #0
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	4413      	add	r3, r2
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	78ba      	ldrb	r2, [r7, #2]
 80060a6:	0852      	lsrs	r2, r2, #1
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
 80060ae:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	3b20      	subs	r3, #32
 80060b4:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 80060b6:	2300      	movs	r3, #0
 80060b8:	737b      	strb	r3, [r7, #13]
 80060ba:	e069      	b.n	8006190 <LCD_ShowChar+0x12c>
		if (size == 12)
 80060bc:	78bb      	ldrb	r3, [r7, #2]
 80060be:	2b0c      	cmp	r3, #12
 80060c0:	d10b      	bne.n	80060da <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 80060c2:	78fa      	ldrb	r2, [r7, #3]
 80060c4:	7b79      	ldrb	r1, [r7, #13]
 80060c6:	4838      	ldr	r0, [pc, #224]	@ (80061a8 <LCD_ShowChar+0x144>)
 80060c8:	4613      	mov	r3, r2
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4403      	add	r3, r0
 80060d2:	440b      	add	r3, r1
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	73fb      	strb	r3, [r7, #15]
 80060d8:	e019      	b.n	800610e <LCD_ShowChar+0xaa>
		else if (size == 16)
 80060da:	78bb      	ldrb	r3, [r7, #2]
 80060dc:	2b10      	cmp	r3, #16
 80060de:	d108      	bne.n	80060f2 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	7b7b      	ldrb	r3, [r7, #13]
 80060e4:	4931      	ldr	r1, [pc, #196]	@ (80061ac <LCD_ShowChar+0x148>)
 80060e6:	0112      	lsls	r2, r2, #4
 80060e8:	440a      	add	r2, r1
 80060ea:	4413      	add	r3, r2
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	73fb      	strb	r3, [r7, #15]
 80060f0:	e00d      	b.n	800610e <LCD_ShowChar+0xaa>
		else if (size == 24)
 80060f2:	78bb      	ldrb	r3, [r7, #2]
 80060f4:	2b18      	cmp	r3, #24
 80060f6:	d150      	bne.n	800619a <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 80060f8:	78fa      	ldrb	r2, [r7, #3]
 80060fa:	7b79      	ldrb	r1, [r7, #13]
 80060fc:	482c      	ldr	r0, [pc, #176]	@ (80061b0 <LCD_ShowChar+0x14c>)
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4403      	add	r3, r0
 8006108:	440b      	add	r3, r1
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 800610e:	2300      	movs	r3, #0
 8006110:	73bb      	strb	r3, [r7, #14]
 8006112:	e035      	b.n	8006180 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8006114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006118:	2b00      	cmp	r3, #0
 800611a:	da07      	bge.n	800612c <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 800611c:	4b25      	ldr	r3, [pc, #148]	@ (80061b4 <LCD_ShowChar+0x150>)
 800611e:	881a      	ldrh	r2, [r3, #0]
 8006120:	88b9      	ldrh	r1, [r7, #4]
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	4618      	mov	r0, r3
 8006126:	f7fb fa87 	bl	8001638 <LCD_Fast_DrawPoint>
 800612a:	e00a      	b.n	8006142 <LCD_ShowChar+0xde>
			else if (mode == 0)
 800612c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8006134:	4b20      	ldr	r3, [pc, #128]	@ (80061b8 <LCD_ShowChar+0x154>)
 8006136:	881a      	ldrh	r2, [r3, #0]
 8006138:	88b9      	ldrh	r1, [r7, #4]
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	4618      	mov	r0, r3
 800613e:	f7fb fa7b 	bl	8001638 <LCD_Fast_DrawPoint>
			temp <<= 1;
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]
			y++;
 8006148:	88bb      	ldrh	r3, [r7, #4]
 800614a:	3301      	adds	r3, #1
 800614c:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 800614e:	4b1b      	ldr	r3, [pc, #108]	@ (80061bc <LCD_ShowChar+0x158>)
 8006150:	885b      	ldrh	r3, [r3, #2]
 8006152:	88ba      	ldrh	r2, [r7, #4]
 8006154:	429a      	cmp	r2, r3
 8006156:	d222      	bcs.n	800619e <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8006158:	88ba      	ldrh	r2, [r7, #4]
 800615a:	897b      	ldrh	r3, [r7, #10]
 800615c:	1ad2      	subs	r2, r2, r3
 800615e:	78bb      	ldrb	r3, [r7, #2]
 8006160:	429a      	cmp	r2, r3
 8006162:	d10a      	bne.n	800617a <LCD_ShowChar+0x116>
				y = y0;
 8006164:	897b      	ldrh	r3, [r7, #10]
 8006166:	80bb      	strh	r3, [r7, #4]
				x++;
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	3301      	adds	r3, #1
 800616c:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 800616e:	4b13      	ldr	r3, [pc, #76]	@ (80061bc <LCD_ShowChar+0x158>)
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	88fa      	ldrh	r2, [r7, #6]
 8006174:	429a      	cmp	r2, r3
 8006176:	d307      	bcc.n	8006188 <LCD_ShowChar+0x124>
					return;	//超区域了
 8006178:	e012      	b.n	80061a0 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	3301      	adds	r3, #1
 800617e:	73bb      	strb	r3, [r7, #14]
 8006180:	7bbb      	ldrb	r3, [r7, #14]
 8006182:	2b07      	cmp	r3, #7
 8006184:	d9c6      	bls.n	8006114 <LCD_ShowChar+0xb0>
 8006186:	e000      	b.n	800618a <LCD_ShowChar+0x126>
				break;
 8006188:	bf00      	nop
	for (t = 0; t < csize; t++) {
 800618a:	7b7b      	ldrb	r3, [r7, #13]
 800618c:	3301      	adds	r3, #1
 800618e:	737b      	strb	r3, [r7, #13]
 8006190:	7b7a      	ldrb	r2, [r7, #13]
 8006192:	7a7b      	ldrb	r3, [r7, #9]
 8006194:	429a      	cmp	r2, r3
 8006196:	d391      	bcc.n	80060bc <LCD_ShowChar+0x58>
 8006198:	e002      	b.n	80061a0 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 800619a:	bf00      	nop
 800619c:	e000      	b.n	80061a0 <LCD_ShowChar+0x13c>
				return;		//超区域了
 800619e:	bf00      	nop
			}
		}
	}
}
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd90      	pop	{r4, r7, pc}
 80061a6:	bf00      	nop
 80061a8:	08007db0 	.word	0x08007db0
 80061ac:	08008224 	.word	0x08008224
 80061b0:	08008814 	.word	0x08008814
 80061b4:	2000007c 	.word	0x2000007c
 80061b8:	20000000 	.word	0x20000000
 80061bc:	20000080 	.word	0x20000080

080061c0 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 80061c0:	b590      	push	{r4, r7, lr}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	4604      	mov	r4, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	461a      	mov	r2, r3
 80061ce:	4623      	mov	r3, r4
 80061d0:	80fb      	strh	r3, [r7, #6]
 80061d2:	4603      	mov	r3, r0
 80061d4:	80bb      	strh	r3, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	807b      	strh	r3, [r7, #2]
 80061da:	4613      	mov	r3, r2
 80061dc:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 80061de:	88fb      	ldrh	r3, [r7, #6]
 80061e0:	73fb      	strb	r3, [r7, #15]
	width += x;
 80061e2:	887a      	ldrh	r2, [r7, #2]
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	4413      	add	r3, r2
 80061e8:	807b      	strh	r3, [r7, #2]
	height += y;
 80061ea:	883a      	ldrh	r2, [r7, #0]
 80061ec:	88bb      	ldrh	r3, [r7, #4]
 80061ee:	4413      	add	r3, r2
 80061f0:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80061f2:	e024      	b.n	800623e <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 80061f4:	88fa      	ldrh	r2, [r7, #6]
 80061f6:	887b      	ldrh	r3, [r7, #2]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d307      	bcc.n	800620c <LCD_ShowString+0x4c>
			x = x0;
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	80fb      	strh	r3, [r7, #6]
			y += size;
 8006200:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006204:	b29a      	uxth	r2, r3
 8006206:	88bb      	ldrh	r3, [r7, #4]
 8006208:	4413      	add	r3, r2
 800620a:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 800620c:	88ba      	ldrh	r2, [r7, #4]
 800620e:	883b      	ldrh	r3, [r7, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d21d      	bcs.n	8006250 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8006214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006216:	781a      	ldrb	r2, [r3, #0]
 8006218:	f897 3020 	ldrb.w	r3, [r7, #32]
 800621c:	88b9      	ldrh	r1, [r7, #4]
 800621e:	88f8      	ldrh	r0, [r7, #6]
 8006220:	2400      	movs	r4, #0
 8006222:	9400      	str	r4, [sp, #0]
 8006224:	f7ff ff1e 	bl	8006064 <LCD_ShowChar>
		x += size / 2;
 8006228:	f897 3020 	ldrb.w	r3, [r7, #32]
 800622c:	085b      	lsrs	r3, r3, #1
 800622e:	b2db      	uxtb	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	4413      	add	r3, r2
 8006236:	80fb      	strh	r3, [r7, #6]
		p++;
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	3301      	adds	r3, #1
 800623c:	627b      	str	r3, [r7, #36]	@ 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b7e      	cmp	r3, #126	@ 0x7e
 8006244:	d805      	bhi.n	8006252 <LCD_ShowString+0x92>
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b1f      	cmp	r3, #31
 800624c:	d8d2      	bhi.n	80061f4 <LCD_ShowString+0x34>
	}
}
 800624e:	e000      	b.n	8006252 <LCD_ShowString+0x92>
			break;	//退出
 8006250:	bf00      	nop
}
 8006252:	bf00      	nop
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	bd90      	pop	{r4, r7, pc}
	...

0800625c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08e      	sub	sp, #56	@ 0x38
 8006260:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006262:	f000 f9f5 	bl	8006650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006266:	f000 f8e7 	bl	8006438 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 800626a:	f7fb fe2d 	bl	8001ec8 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800626e:	f7fa fae1 	bl	8000834 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t x = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  switch (x) {
 8006278:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800627c:	2b0b      	cmp	r3, #11
 800627e:	f200 8083 	bhi.w	8006388 <main+0x12c>
 8006282:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <main+0x2c>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062b9 	.word	0x080062b9
 800628c:	080062cb 	.word	0x080062cb
 8006290:	080062d9 	.word	0x080062d9
 8006294:	080062e7 	.word	0x080062e7
 8006298:	080062f9 	.word	0x080062f9
 800629c:	0800630b 	.word	0x0800630b
 80062a0:	0800631d 	.word	0x0800631d
 80062a4:	0800632f 	.word	0x0800632f
 80062a8:	08006341 	.word	0x08006341
 80062ac:	08006353 	.word	0x08006353
 80062b0:	08006365 	.word	0x08006365
 80062b4:	08006377 	.word	0x08006377
	  	  case 0: LCD_Clear(WHITE); BACK_COLOR = WHITE; break;
 80062b8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80062bc:	f7ff fd32 	bl	8005d24 <LCD_Clear>
 80062c0:	4b57      	ldr	r3, [pc, #348]	@ (8006420 <main+0x1c4>)
 80062c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	e05e      	b.n	8006388 <main+0x12c>
	  	  case 1: LCD_Clear(BLACK); BACK_COLOR = BLACK; break;
 80062ca:	2000      	movs	r0, #0
 80062cc:	f7ff fd2a 	bl	8005d24 <LCD_Clear>
 80062d0:	4b53      	ldr	r3, [pc, #332]	@ (8006420 <main+0x1c4>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	801a      	strh	r2, [r3, #0]
 80062d6:	e057      	b.n	8006388 <main+0x12c>
	  	  case 2: LCD_Clear(BLUE); BACK_COLOR = BLUE; break;
 80062d8:	201f      	movs	r0, #31
 80062da:	f7ff fd23 	bl	8005d24 <LCD_Clear>
 80062de:	4b50      	ldr	r3, [pc, #320]	@ (8006420 <main+0x1c4>)
 80062e0:	221f      	movs	r2, #31
 80062e2:	801a      	strh	r2, [r3, #0]
 80062e4:	e050      	b.n	8006388 <main+0x12c>
	  	  case 3: LCD_Clear(RED); BACK_COLOR = RED; break;
 80062e6:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80062ea:	f7ff fd1b 	bl	8005d24 <LCD_Clear>
 80062ee:	4b4c      	ldr	r3, [pc, #304]	@ (8006420 <main+0x1c4>)
 80062f0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	e047      	b.n	8006388 <main+0x12c>
	  	  case 4: LCD_Clear(MAGENTA); BACK_COLOR = MAGENTA; break;
 80062f8:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80062fc:	f7ff fd12 	bl	8005d24 <LCD_Clear>
 8006300:	4b47      	ldr	r3, [pc, #284]	@ (8006420 <main+0x1c4>)
 8006302:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8006306:	801a      	strh	r2, [r3, #0]
 8006308:	e03e      	b.n	8006388 <main+0x12c>
	  	  case 5: LCD_Clear(GREEN); BACK_COLOR = GREEN; break;
 800630a:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800630e:	f7ff fd09 	bl	8005d24 <LCD_Clear>
 8006312:	4b43      	ldr	r3, [pc, #268]	@ (8006420 <main+0x1c4>)
 8006314:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	e035      	b.n	8006388 <main+0x12c>
	  	  case 6: LCD_Clear(CYAN); BACK_COLOR = CYAN; break;
 800631c:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8006320:	f7ff fd00 	bl	8005d24 <LCD_Clear>
 8006324:	4b3e      	ldr	r3, [pc, #248]	@ (8006420 <main+0x1c4>)
 8006326:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800632a:	801a      	strh	r2, [r3, #0]
 800632c:	e02c      	b.n	8006388 <main+0x12c>
	  	  case 7: LCD_Clear(YELLOW); BACK_COLOR = YELLOW; break;
 800632e:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8006332:	f7ff fcf7 	bl	8005d24 <LCD_Clear>
 8006336:	4b3a      	ldr	r3, [pc, #232]	@ (8006420 <main+0x1c4>)
 8006338:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	e023      	b.n	8006388 <main+0x12c>
	  	  case 8: LCD_Clear(BRRED); BACK_COLOR = BRRED; break;
 8006340:	f64f 4007 	movw	r0, #64519	@ 0xfc07
 8006344:	f7ff fcee 	bl	8005d24 <LCD_Clear>
 8006348:	4b35      	ldr	r3, [pc, #212]	@ (8006420 <main+0x1c4>)
 800634a:	f64f 4207 	movw	r2, #64519	@ 0xfc07
 800634e:	801a      	strh	r2, [r3, #0]
 8006350:	e01a      	b.n	8006388 <main+0x12c>
	  	  case 9: LCD_Clear(GRAY); BACK_COLOR = GRAY; break;
 8006352:	f248 4030 	movw	r0, #33840	@ 0x8430
 8006356:	f7ff fce5 	bl	8005d24 <LCD_Clear>
 800635a:	4b31      	ldr	r3, [pc, #196]	@ (8006420 <main+0x1c4>)
 800635c:	f248 4230 	movw	r2, #33840	@ 0x8430
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	e011      	b.n	8006388 <main+0x12c>
	  	  case 10: LCD_Clear(LGRAY); BACK_COLOR = LGRAY; break;
 8006364:	f24c 6018 	movw	r0, #50712	@ 0xc618
 8006368:	f7ff fcdc 	bl	8005d24 <LCD_Clear>
 800636c:	4b2c      	ldr	r3, [pc, #176]	@ (8006420 <main+0x1c4>)
 800636e:	f24c 6218 	movw	r2, #50712	@ 0xc618
 8006372:	801a      	strh	r2, [r3, #0]
 8006374:	e008      	b.n	8006388 <main+0x12c>
	  	  case 11: LCD_Clear(BROWN); BACK_COLOR = BROWN; break;
 8006376:	f64b 4040 	movw	r0, #48192	@ 0xbc40
 800637a:	f7ff fcd3 	bl	8005d24 <LCD_Clear>
 800637e:	4b28      	ldr	r3, [pc, #160]	@ (8006420 <main+0x1c4>)
 8006380:	f64b 4240 	movw	r2, #48192	@ 0xbc40
 8006384:	801a      	strh	r2, [r3, #0]
 8006386:	bf00      	nop
	  	  }//end of switch

	  	  POINT_COLOR = RED;
 8006388:	4b26      	ldr	r3, [pc, #152]	@ (8006424 <main+0x1c8>)
 800638a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800638e:	801a      	strh	r2, [r3, #0]
	  	  LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) "Mini STM32 ^_^");
 8006390:	4b25      	ldr	r3, [pc, #148]	@ (8006428 <main+0x1cc>)
 8006392:	9301      	str	r3, [sp, #4]
 8006394:	2318      	movs	r3, #24
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	2318      	movs	r3, #24
 800639a:	22c8      	movs	r2, #200	@ 0xc8
 800639c:	2128      	movs	r1, #40	@ 0x28
 800639e:	201e      	movs	r0, #30
 80063a0:	f7ff ff0e 	bl	80061c0 <LCD_ShowString>
	  	  LCD_ShowString(30, 70, 200, 16, 16, (uint8_t*) "TFTLCD TEST");
 80063a4:	4b21      	ldr	r3, [pc, #132]	@ (800642c <main+0x1d0>)
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	2310      	movs	r3, #16
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	2310      	movs	r3, #16
 80063ae:	22c8      	movs	r2, #200	@ 0xc8
 80063b0:	2146      	movs	r1, #70	@ 0x46
 80063b2:	201e      	movs	r0, #30
 80063b4:	f7ff ff04 	bl	80061c0 <LCD_ShowString>
	  	  /* Code of showing address of GPIOA->CRL (represented in hexadecimal) BEGIN */
	  	  char address_str[40];
	  	  sprintf(address_str, "GPIOA->CRL: 0x%08X", (unsigned int)&(GPIOA->CRL));
 80063b8:	1d3b      	adds	r3, r7, #4
 80063ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006430 <main+0x1d4>)
 80063bc:	491d      	ldr	r1, [pc, #116]	@ (8006434 <main+0x1d8>)
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 f822 	bl	8007408 <siprintf>
	  	  LCD_ShowString(1, 120, 500, 24, 16, (uint8_t *)address_str);
 80063c4:	1d3b      	adds	r3, r7, #4
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	2310      	movs	r3, #16
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	2318      	movs	r3, #24
 80063ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80063d2:	2178      	movs	r1, #120	@ 0x78
 80063d4:	2001      	movs	r0, #1
 80063d6:	f7ff fef3 	bl	80061c0 <LCD_ShowString>
	  	  /* Code of showing address of GPIOA->CRL (represented in hexadecimal) END */
	  	  POINT_COLOR = BLACK;
 80063da:	4b12      	ldr	r3, [pc, #72]	@ (8006424 <main+0x1c8>)
 80063dc:	2200      	movs	r2, #0
 80063de:	801a      	strh	r2, [r3, #0]
	  	  LCD_DrawRectangle(30, 150, 210, 190);
 80063e0:	23be      	movs	r3, #190	@ 0xbe
 80063e2:	22d2      	movs	r2, #210	@ 0xd2
 80063e4:	2196      	movs	r1, #150	@ 0x96
 80063e6:	201e      	movs	r0, #30
 80063e8:	f7ff fe10 	bl	800600c <LCD_DrawRectangle>
	  	  LCD_Fill(31, 151, 209, 189, YELLOW);
 80063ec:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	23bd      	movs	r3, #189	@ 0xbd
 80063f4:	22d1      	movs	r2, #209	@ 0xd1
 80063f6:	2197      	movs	r1, #151	@ 0x97
 80063f8:	201f      	movs	r0, #31
 80063fa:	f7ff fcf5 	bl	8005de8 <LCD_Fill>
	  	  x++;
 80063fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006402:	3301      	adds	r3, #1
 8006404:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  	  if (x == 12)
 8006408:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800640c:	2b0c      	cmp	r3, #12
 800640e:	d102      	bne.n	8006416 <main+0x1ba>
	  	  x = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  	  HAL_Delay(2000);
 8006416:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800641a:	f000 f97b 	bl	8006714 <HAL_Delay>
  {
 800641e:	e72b      	b.n	8006278 <main+0x1c>
 8006420:	20000000 	.word	0x20000000
 8006424:	2000007c 	.word	0x2000007c
 8006428:	08007d80 	.word	0x08007d80
 800642c:	08007d90 	.word	0x08007d90
 8006430:	40010800 	.word	0x40010800
 8006434:	08007d9c 	.word	0x08007d9c

08006438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b090      	sub	sp, #64	@ 0x40
 800643c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800643e:	f107 0318 	add.w	r3, r7, #24
 8006442:	2228      	movs	r2, #40	@ 0x28
 8006444:	2100      	movs	r1, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fffe 	bl	8007448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800644c:	1d3b      	adds	r3, r7, #4
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	605a      	str	r2, [r3, #4]
 8006454:	609a      	str	r2, [r3, #8]
 8006456:	60da      	str	r2, [r3, #12]
 8006458:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800645a:	2301      	movs	r3, #1
 800645c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800645e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006462:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006464:	2300      	movs	r3, #0
 8006466:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006468:	2301      	movs	r3, #1
 800646a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800646c:	2302      	movs	r3, #2
 800646e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006470:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006474:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006476:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800647a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800647c:	f107 0318 	add.w	r3, r7, #24
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fbe3 	bl	8006c4c <HAL_RCC_OscConfig>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800648c:	f000 f819 	bl	80064c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006490:	230f      	movs	r3, #15
 8006492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006494:	2302      	movs	r3, #2
 8006496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800649c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80064a6:	1d3b      	adds	r3, r7, #4
 80064a8:	2102      	movs	r1, #2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fe50 	bl	8007150 <HAL_RCC_ClockConfig>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80064b6:	f000 f804 	bl	80064c2 <Error_Handler>
  }
}
 80064ba:	bf00      	nop
 80064bc:	3740      	adds	r7, #64	@ 0x40
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80064c2:	b480      	push	{r7}
 80064c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80064c6:	b672      	cpsid	i
}
 80064c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80064ca:	bf00      	nop
 80064cc:	e7fd      	b.n	80064ca <Error_Handler+0x8>
	...

080064d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80064d6:	4b15      	ldr	r3, [pc, #84]	@ (800652c <HAL_MspInit+0x5c>)
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	4a14      	ldr	r2, [pc, #80]	@ (800652c <HAL_MspInit+0x5c>)
 80064dc:	f043 0301 	orr.w	r3, r3, #1
 80064e0:	6193      	str	r3, [r2, #24]
 80064e2:	4b12      	ldr	r3, [pc, #72]	@ (800652c <HAL_MspInit+0x5c>)
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	60bb      	str	r3, [r7, #8]
 80064ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80064ee:	4b0f      	ldr	r3, [pc, #60]	@ (800652c <HAL_MspInit+0x5c>)
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	4a0e      	ldr	r2, [pc, #56]	@ (800652c <HAL_MspInit+0x5c>)
 80064f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064f8:	61d3      	str	r3, [r2, #28]
 80064fa:	4b0c      	ldr	r3, [pc, #48]	@ (800652c <HAL_MspInit+0x5c>)
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006502:	607b      	str	r3, [r7, #4]
 8006504:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006506:	4b0a      	ldr	r3, [pc, #40]	@ (8006530 <HAL_MspInit+0x60>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	4a04      	ldr	r2, [pc, #16]	@ (8006530 <HAL_MspInit+0x60>)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006522:	bf00      	nop
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr
 800652c:	40021000 	.word	0x40021000
 8006530:	40010000 	.word	0x40010000

08006534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006534:	b480      	push	{r7}
 8006536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006538:	bf00      	nop
 800653a:	e7fd      	b.n	8006538 <NMI_Handler+0x4>

0800653c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006540:	bf00      	nop
 8006542:	e7fd      	b.n	8006540 <HardFault_Handler+0x4>

08006544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006548:	bf00      	nop
 800654a:	e7fd      	b.n	8006548 <MemManage_Handler+0x4>

0800654c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <BusFault_Handler+0x4>

08006554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006558:	bf00      	nop
 800655a:	e7fd      	b.n	8006558 <UsageFault_Handler+0x4>

0800655c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006560:	bf00      	nop
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr

08006568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800656c:	bf00      	nop
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006578:	bf00      	nop
 800657a:	46bd      	mov	sp, r7
 800657c:	bc80      	pop	{r7}
 800657e:	4770      	bx	lr

08006580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006584:	f000 f8aa 	bl	80066dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006588:	bf00      	nop
 800658a:	bd80      	pop	{r7, pc}

0800658c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006594:	4a14      	ldr	r2, [pc, #80]	@ (80065e8 <_sbrk+0x5c>)
 8006596:	4b15      	ldr	r3, [pc, #84]	@ (80065ec <_sbrk+0x60>)
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065a0:	4b13      	ldr	r3, [pc, #76]	@ (80065f0 <_sbrk+0x64>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d102      	bne.n	80065ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065a8:	4b11      	ldr	r3, [pc, #68]	@ (80065f0 <_sbrk+0x64>)
 80065aa:	4a12      	ldr	r2, [pc, #72]	@ (80065f4 <_sbrk+0x68>)
 80065ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065ae:	4b10      	ldr	r3, [pc, #64]	@ (80065f0 <_sbrk+0x64>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d207      	bcs.n	80065cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065bc:	f000 ff4c 	bl	8007458 <__errno>
 80065c0:	4603      	mov	r3, r0
 80065c2:	220c      	movs	r2, #12
 80065c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ca:	e009      	b.n	80065e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065cc:	4b08      	ldr	r3, [pc, #32]	@ (80065f0 <_sbrk+0x64>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065d2:	4b07      	ldr	r3, [pc, #28]	@ (80065f0 <_sbrk+0x64>)
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4413      	add	r3, r2
 80065da:	4a05      	ldr	r2, [pc, #20]	@ (80065f0 <_sbrk+0x64>)
 80065dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065de:	68fb      	ldr	r3, [r7, #12]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	2000c000 	.word	0x2000c000
 80065ec:	00000400 	.word	0x00000400
 80065f0:	20000090 	.word	0x20000090
 80065f4:	200001e0 	.word	0x200001e0

080065f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065fc:	bf00      	nop
 80065fe:	46bd      	mov	sp, r7
 8006600:	bc80      	pop	{r7}
 8006602:	4770      	bx	lr

08006604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006604:	f7ff fff8 	bl	80065f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006608:	480b      	ldr	r0, [pc, #44]	@ (8006638 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800660a:	490c      	ldr	r1, [pc, #48]	@ (800663c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800660c:	4a0c      	ldr	r2, [pc, #48]	@ (8006640 <LoopFillZerobss+0x16>)
  movs r3, #0
 800660e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006610:	e002      	b.n	8006618 <LoopCopyDataInit>

08006612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006616:	3304      	adds	r3, #4

08006618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800661a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800661c:	d3f9      	bcc.n	8006612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800661e:	4a09      	ldr	r2, [pc, #36]	@ (8006644 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006620:	4c09      	ldr	r4, [pc, #36]	@ (8006648 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006624:	e001      	b.n	800662a <LoopFillZerobss>

08006626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006628:	3204      	adds	r2, #4

0800662a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800662a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800662c:	d3fb      	bcc.n	8006626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800662e:	f000 ff19 	bl	8007464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006632:	f7ff fe13 	bl	800625c <main>
  bx lr
 8006636:	4770      	bx	lr
  ldr r0, =_sdata
 8006638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800663c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8006640:	080095d0 	.word	0x080095d0
  ldr r2, =_sbss
 8006644:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8006648:	200001e0 	.word	0x200001e0

0800664c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800664c:	e7fe      	b.n	800664c <ADC1_2_IRQHandler>
	...

08006650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006654:	4b08      	ldr	r3, [pc, #32]	@ (8006678 <HAL_Init+0x28>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a07      	ldr	r2, [pc, #28]	@ (8006678 <HAL_Init+0x28>)
 800665a:	f043 0310 	orr.w	r3, r3, #16
 800665e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006660:	2003      	movs	r0, #3
 8006662:	f000 f92b 	bl	80068bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006666:	200f      	movs	r0, #15
 8006668:	f000 f808 	bl	800667c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800666c:	f7ff ff30 	bl	80064d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	40022000 	.word	0x40022000

0800667c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006684:	4b12      	ldr	r3, [pc, #72]	@ (80066d0 <HAL_InitTick+0x54>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	4b12      	ldr	r3, [pc, #72]	@ (80066d4 <HAL_InitTick+0x58>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	4619      	mov	r1, r3
 800668e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006692:	fbb3 f3f1 	udiv	r3, r3, r1
 8006696:	fbb2 f3f3 	udiv	r3, r2, r3
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f935 	bl	800690a <HAL_SYSTICK_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e00e      	b.n	80066c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b0f      	cmp	r3, #15
 80066ae:	d80a      	bhi.n	80066c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066b0:	2200      	movs	r2, #0
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295
 80066b8:	f000 f90b 	bl	80068d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066bc:	4a06      	ldr	r2, [pc, #24]	@ (80066d8 <HAL_InitTick+0x5c>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e000      	b.n	80066c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20000004 	.word	0x20000004
 80066d4:	2000000c 	.word	0x2000000c
 80066d8:	20000008 	.word	0x20000008

080066dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80066e0:	4b05      	ldr	r3, [pc, #20]	@ (80066f8 <HAL_IncTick+0x1c>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	4b05      	ldr	r3, [pc, #20]	@ (80066fc <HAL_IncTick+0x20>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4413      	add	r3, r2
 80066ec:	4a03      	ldr	r2, [pc, #12]	@ (80066fc <HAL_IncTick+0x20>)
 80066ee:	6013      	str	r3, [r2, #0]
}
 80066f0:	bf00      	nop
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr
 80066f8:	2000000c 	.word	0x2000000c
 80066fc:	20000094 	.word	0x20000094

08006700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  return uwTick;
 8006704:	4b02      	ldr	r3, [pc, #8]	@ (8006710 <HAL_GetTick+0x10>)
 8006706:	681b      	ldr	r3, [r3, #0]
}
 8006708:	4618      	mov	r0, r3
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr
 8006710:	20000094 	.word	0x20000094

08006714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800671c:	f7ff fff0 	bl	8006700 <HAL_GetTick>
 8006720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672c:	d005      	beq.n	800673a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800672e:	4b0a      	ldr	r3, [pc, #40]	@ (8006758 <HAL_Delay+0x44>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800673a:	bf00      	nop
 800673c:	f7ff ffe0 	bl	8006700 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	429a      	cmp	r2, r3
 800674a:	d8f7      	bhi.n	800673c <HAL_Delay+0x28>
  {
  }
}
 800674c:	bf00      	nop
 800674e:	bf00      	nop
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	2000000c 	.word	0x2000000c

0800675c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800676c:	4b0c      	ldr	r3, [pc, #48]	@ (80067a0 <__NVIC_SetPriorityGrouping+0x44>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006778:	4013      	ands	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800678c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800678e:	4a04      	ldr	r2, [pc, #16]	@ (80067a0 <__NVIC_SetPriorityGrouping+0x44>)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	60d3      	str	r3, [r2, #12]
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	e000ed00 	.word	0xe000ed00

080067a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067a8:	4b04      	ldr	r3, [pc, #16]	@ (80067bc <__NVIC_GetPriorityGrouping+0x18>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	0a1b      	lsrs	r3, r3, #8
 80067ae:	f003 0307 	and.w	r3, r3, #7
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	e000ed00 	.word	0xe000ed00

080067c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	6039      	str	r1, [r7, #0]
 80067ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	db0a      	blt.n	80067ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	490c      	ldr	r1, [pc, #48]	@ (800680c <__NVIC_SetPriority+0x4c>)
 80067da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067de:	0112      	lsls	r2, r2, #4
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	440b      	add	r3, r1
 80067e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067e8:	e00a      	b.n	8006800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	4908      	ldr	r1, [pc, #32]	@ (8006810 <__NVIC_SetPriority+0x50>)
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	3b04      	subs	r3, #4
 80067f8:	0112      	lsls	r2, r2, #4
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	440b      	add	r3, r1
 80067fe:	761a      	strb	r2, [r3, #24]
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	bc80      	pop	{r7}
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	e000e100 	.word	0xe000e100
 8006810:	e000ed00 	.word	0xe000ed00

08006814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006814:	b480      	push	{r7}
 8006816:	b089      	sub	sp, #36	@ 0x24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	f1c3 0307 	rsb	r3, r3, #7
 800682e:	2b04      	cmp	r3, #4
 8006830:	bf28      	it	cs
 8006832:	2304      	movcs	r3, #4
 8006834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	3304      	adds	r3, #4
 800683a:	2b06      	cmp	r3, #6
 800683c:	d902      	bls.n	8006844 <NVIC_EncodePriority+0x30>
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	3b03      	subs	r3, #3
 8006842:	e000      	b.n	8006846 <NVIC_EncodePriority+0x32>
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006848:	f04f 32ff 	mov.w	r2, #4294967295
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	fa02 f303 	lsl.w	r3, r2, r3
 8006852:	43da      	mvns	r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	401a      	ands	r2, r3
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800685c:	f04f 31ff 	mov.w	r1, #4294967295
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	fa01 f303 	lsl.w	r3, r1, r3
 8006866:	43d9      	mvns	r1, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800686c:	4313      	orrs	r3, r2
         );
}
 800686e:	4618      	mov	r0, r3
 8006870:	3724      	adds	r7, #36	@ 0x24
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3b01      	subs	r3, #1
 8006884:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006888:	d301      	bcc.n	800688e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800688a:	2301      	movs	r3, #1
 800688c:	e00f      	b.n	80068ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800688e:	4a0a      	ldr	r2, [pc, #40]	@ (80068b8 <SysTick_Config+0x40>)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3b01      	subs	r3, #1
 8006894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006896:	210f      	movs	r1, #15
 8006898:	f04f 30ff 	mov.w	r0, #4294967295
 800689c:	f7ff ff90 	bl	80067c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068a0:	4b05      	ldr	r3, [pc, #20]	@ (80068b8 <SysTick_Config+0x40>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068a6:	4b04      	ldr	r3, [pc, #16]	@ (80068b8 <SysTick_Config+0x40>)
 80068a8:	2207      	movs	r2, #7
 80068aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	e000e010 	.word	0xe000e010

080068bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff ff49 	bl	800675c <__NVIC_SetPriorityGrouping>
}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b086      	sub	sp, #24
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	4603      	mov	r3, r0
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	607a      	str	r2, [r7, #4]
 80068de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068e4:	f7ff ff5e 	bl	80067a4 <__NVIC_GetPriorityGrouping>
 80068e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	6978      	ldr	r0, [r7, #20]
 80068f0:	f7ff ff90 	bl	8006814 <NVIC_EncodePriority>
 80068f4:	4602      	mov	r2, r0
 80068f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068fa:	4611      	mov	r1, r2
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff ff5f 	bl	80067c0 <__NVIC_SetPriority>
}
 8006902:	bf00      	nop
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff ffb0 	bl	8006878 <SysTick_Config>
 8006918:	4603      	mov	r3, r0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006924:	b480      	push	{r7}
 8006926:	b08b      	sub	sp, #44	@ 0x2c
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800692e:	2300      	movs	r3, #0
 8006930:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006932:	2300      	movs	r3, #0
 8006934:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006936:	e179      	b.n	8006c2c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006938:	2201      	movs	r2, #1
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	4013      	ands	r3, r2
 800694a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	429a      	cmp	r2, r3
 8006952:	f040 8168 	bne.w	8006c26 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	4a96      	ldr	r2, [pc, #600]	@ (8006bb4 <HAL_GPIO_Init+0x290>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d05e      	beq.n	8006a1e <HAL_GPIO_Init+0xfa>
 8006960:	4a94      	ldr	r2, [pc, #592]	@ (8006bb4 <HAL_GPIO_Init+0x290>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d875      	bhi.n	8006a52 <HAL_GPIO_Init+0x12e>
 8006966:	4a94      	ldr	r2, [pc, #592]	@ (8006bb8 <HAL_GPIO_Init+0x294>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d058      	beq.n	8006a1e <HAL_GPIO_Init+0xfa>
 800696c:	4a92      	ldr	r2, [pc, #584]	@ (8006bb8 <HAL_GPIO_Init+0x294>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d86f      	bhi.n	8006a52 <HAL_GPIO_Init+0x12e>
 8006972:	4a92      	ldr	r2, [pc, #584]	@ (8006bbc <HAL_GPIO_Init+0x298>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d052      	beq.n	8006a1e <HAL_GPIO_Init+0xfa>
 8006978:	4a90      	ldr	r2, [pc, #576]	@ (8006bbc <HAL_GPIO_Init+0x298>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d869      	bhi.n	8006a52 <HAL_GPIO_Init+0x12e>
 800697e:	4a90      	ldr	r2, [pc, #576]	@ (8006bc0 <HAL_GPIO_Init+0x29c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d04c      	beq.n	8006a1e <HAL_GPIO_Init+0xfa>
 8006984:	4a8e      	ldr	r2, [pc, #568]	@ (8006bc0 <HAL_GPIO_Init+0x29c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d863      	bhi.n	8006a52 <HAL_GPIO_Init+0x12e>
 800698a:	4a8e      	ldr	r2, [pc, #568]	@ (8006bc4 <HAL_GPIO_Init+0x2a0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d046      	beq.n	8006a1e <HAL_GPIO_Init+0xfa>
 8006990:	4a8c      	ldr	r2, [pc, #560]	@ (8006bc4 <HAL_GPIO_Init+0x2a0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d85d      	bhi.n	8006a52 <HAL_GPIO_Init+0x12e>
 8006996:	2b12      	cmp	r3, #18
 8006998:	d82a      	bhi.n	80069f0 <HAL_GPIO_Init+0xcc>
 800699a:	2b12      	cmp	r3, #18
 800699c:	d859      	bhi.n	8006a52 <HAL_GPIO_Init+0x12e>
 800699e:	a201      	add	r2, pc, #4	@ (adr r2, 80069a4 <HAL_GPIO_Init+0x80>)
 80069a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a4:	08006a1f 	.word	0x08006a1f
 80069a8:	080069f9 	.word	0x080069f9
 80069ac:	08006a0b 	.word	0x08006a0b
 80069b0:	08006a4d 	.word	0x08006a4d
 80069b4:	08006a53 	.word	0x08006a53
 80069b8:	08006a53 	.word	0x08006a53
 80069bc:	08006a53 	.word	0x08006a53
 80069c0:	08006a53 	.word	0x08006a53
 80069c4:	08006a53 	.word	0x08006a53
 80069c8:	08006a53 	.word	0x08006a53
 80069cc:	08006a53 	.word	0x08006a53
 80069d0:	08006a53 	.word	0x08006a53
 80069d4:	08006a53 	.word	0x08006a53
 80069d8:	08006a53 	.word	0x08006a53
 80069dc:	08006a53 	.word	0x08006a53
 80069e0:	08006a53 	.word	0x08006a53
 80069e4:	08006a53 	.word	0x08006a53
 80069e8:	08006a01 	.word	0x08006a01
 80069ec:	08006a15 	.word	0x08006a15
 80069f0:	4a75      	ldr	r2, [pc, #468]	@ (8006bc8 <HAL_GPIO_Init+0x2a4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80069f6:	e02c      	b.n	8006a52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	623b      	str	r3, [r7, #32]
          break;
 80069fe:	e029      	b.n	8006a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	3304      	adds	r3, #4
 8006a06:	623b      	str	r3, [r7, #32]
          break;
 8006a08:	e024      	b.n	8006a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	623b      	str	r3, [r7, #32]
          break;
 8006a12:	e01f      	b.n	8006a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	623b      	str	r3, [r7, #32]
          break;
 8006a1c:	e01a      	b.n	8006a54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006a26:	2304      	movs	r3, #4
 8006a28:	623b      	str	r3, [r7, #32]
          break;
 8006a2a:	e013      	b.n	8006a54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d105      	bne.n	8006a40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006a34:	2308      	movs	r3, #8
 8006a36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	611a      	str	r2, [r3, #16]
          break;
 8006a3e:	e009      	b.n	8006a54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006a40:	2308      	movs	r3, #8
 8006a42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	615a      	str	r2, [r3, #20]
          break;
 8006a4a:	e003      	b.n	8006a54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	623b      	str	r3, [r7, #32]
          break;
 8006a50:	e000      	b.n	8006a54 <HAL_GPIO_Init+0x130>
          break;
 8006a52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2bff      	cmp	r3, #255	@ 0xff
 8006a58:	d801      	bhi.n	8006a5e <HAL_GPIO_Init+0x13a>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	e001      	b.n	8006a62 <HAL_GPIO_Init+0x13e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	2bff      	cmp	r3, #255	@ 0xff
 8006a68:	d802      	bhi.n	8006a70 <HAL_GPIO_Init+0x14c>
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	e002      	b.n	8006a76 <HAL_GPIO_Init+0x152>
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	3b08      	subs	r3, #8
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	210f      	movs	r1, #15
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	fa01 f303 	lsl.w	r3, r1, r3
 8006a84:	43db      	mvns	r3, r3
 8006a86:	401a      	ands	r2, r3
 8006a88:	6a39      	ldr	r1, [r7, #32]
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a90:	431a      	orrs	r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 80c1 	beq.w	8006c26 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006aa4:	4b49      	ldr	r3, [pc, #292]	@ (8006bcc <HAL_GPIO_Init+0x2a8>)
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	4a48      	ldr	r2, [pc, #288]	@ (8006bcc <HAL_GPIO_Init+0x2a8>)
 8006aaa:	f043 0301 	orr.w	r3, r3, #1
 8006aae:	6193      	str	r3, [r2, #24]
 8006ab0:	4b46      	ldr	r3, [pc, #280]	@ (8006bcc <HAL_GPIO_Init+0x2a8>)
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006abc:	4a44      	ldr	r2, [pc, #272]	@ (8006bd0 <HAL_GPIO_Init+0x2ac>)
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	089b      	lsrs	r3, r3, #2
 8006ac2:	3302      	adds	r3, #2
 8006ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	220f      	movs	r2, #15
 8006ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4013      	ands	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a3c      	ldr	r2, [pc, #240]	@ (8006bd4 <HAL_GPIO_Init+0x2b0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d01f      	beq.n	8006b28 <HAL_GPIO_Init+0x204>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a3b      	ldr	r2, [pc, #236]	@ (8006bd8 <HAL_GPIO_Init+0x2b4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d019      	beq.n	8006b24 <HAL_GPIO_Init+0x200>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a3a      	ldr	r2, [pc, #232]	@ (8006bdc <HAL_GPIO_Init+0x2b8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d013      	beq.n	8006b20 <HAL_GPIO_Init+0x1fc>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a39      	ldr	r2, [pc, #228]	@ (8006be0 <HAL_GPIO_Init+0x2bc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d00d      	beq.n	8006b1c <HAL_GPIO_Init+0x1f8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a38      	ldr	r2, [pc, #224]	@ (8006be4 <HAL_GPIO_Init+0x2c0>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d007      	beq.n	8006b18 <HAL_GPIO_Init+0x1f4>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a37      	ldr	r2, [pc, #220]	@ (8006be8 <HAL_GPIO_Init+0x2c4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d101      	bne.n	8006b14 <HAL_GPIO_Init+0x1f0>
 8006b10:	2305      	movs	r3, #5
 8006b12:	e00a      	b.n	8006b2a <HAL_GPIO_Init+0x206>
 8006b14:	2306      	movs	r3, #6
 8006b16:	e008      	b.n	8006b2a <HAL_GPIO_Init+0x206>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	e006      	b.n	8006b2a <HAL_GPIO_Init+0x206>
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e004      	b.n	8006b2a <HAL_GPIO_Init+0x206>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e002      	b.n	8006b2a <HAL_GPIO_Init+0x206>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <HAL_GPIO_Init+0x206>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b2c:	f002 0203 	and.w	r2, r2, #3
 8006b30:	0092      	lsls	r2, r2, #2
 8006b32:	4093      	lsls	r3, r2
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006b3a:	4925      	ldr	r1, [pc, #148]	@ (8006bd0 <HAL_GPIO_Init+0x2ac>)
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3e:	089b      	lsrs	r3, r3, #2
 8006b40:	3302      	adds	r3, #2
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d006      	beq.n	8006b62 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006b54:	4b25      	ldr	r3, [pc, #148]	@ (8006bec <HAL_GPIO_Init+0x2c8>)
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	4924      	ldr	r1, [pc, #144]	@ (8006bec <HAL_GPIO_Init+0x2c8>)
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	608b      	str	r3, [r1, #8]
 8006b60:	e006      	b.n	8006b70 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006b62:	4b22      	ldr	r3, [pc, #136]	@ (8006bec <HAL_GPIO_Init+0x2c8>)
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	4920      	ldr	r1, [pc, #128]	@ (8006bec <HAL_GPIO_Init+0x2c8>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d006      	beq.n	8006b8a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bec <HAL_GPIO_Init+0x2c8>)
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	491a      	ldr	r1, [pc, #104]	@ (8006bec <HAL_GPIO_Init+0x2c8>)
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60cb      	str	r3, [r1, #12]
 8006b88:	e006      	b.n	8006b98 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006b8a:	4b18      	ldr	r3, [pc, #96]	@ (8006bec <HAL_GPIO_Init+0x2c8>)
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	43db      	mvns	r3, r3
 8006b92:	4916      	ldr	r1, [pc, #88]	@ (8006bec <HAL_GPIO_Init+0x2c8>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d025      	beq.n	8006bf0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006ba4:	4b11      	ldr	r3, [pc, #68]	@ (8006bec <HAL_GPIO_Init+0x2c8>)
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	4910      	ldr	r1, [pc, #64]	@ (8006bec <HAL_GPIO_Init+0x2c8>)
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	604b      	str	r3, [r1, #4]
 8006bb0:	e025      	b.n	8006bfe <HAL_GPIO_Init+0x2da>
 8006bb2:	bf00      	nop
 8006bb4:	10320000 	.word	0x10320000
 8006bb8:	10310000 	.word	0x10310000
 8006bbc:	10220000 	.word	0x10220000
 8006bc0:	10210000 	.word	0x10210000
 8006bc4:	10120000 	.word	0x10120000
 8006bc8:	10110000 	.word	0x10110000
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40010800 	.word	0x40010800
 8006bd8:	40010c00 	.word	0x40010c00
 8006bdc:	40011000 	.word	0x40011000
 8006be0:	40011400 	.word	0x40011400
 8006be4:	40011800 	.word	0x40011800
 8006be8:	40011c00 	.word	0x40011c00
 8006bec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006bf0:	4b15      	ldr	r3, [pc, #84]	@ (8006c48 <HAL_GPIO_Init+0x324>)
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	4913      	ldr	r1, [pc, #76]	@ (8006c48 <HAL_GPIO_Init+0x324>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d006      	beq.n	8006c18 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c48 <HAL_GPIO_Init+0x324>)
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	490e      	ldr	r1, [pc, #56]	@ (8006c48 <HAL_GPIO_Init+0x324>)
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	600b      	str	r3, [r1, #0]
 8006c16:	e006      	b.n	8006c26 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006c18:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <HAL_GPIO_Init+0x324>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	43db      	mvns	r3, r3
 8006c20:	4909      	ldr	r1, [pc, #36]	@ (8006c48 <HAL_GPIO_Init+0x324>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	3301      	adds	r3, #1
 8006c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	fa22 f303 	lsr.w	r3, r2, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f47f ae7e 	bne.w	8006938 <HAL_GPIO_Init+0x14>
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	bf00      	nop
 8006c40:	372c      	adds	r7, #44	@ 0x2c
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr
 8006c48:	40010400 	.word	0x40010400

08006c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e272      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 8087 	beq.w	8006d7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c6c:	4b92      	ldr	r3, [pc, #584]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f003 030c 	and.w	r3, r3, #12
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d00c      	beq.n	8006c92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c78:	4b8f      	ldr	r3, [pc, #572]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 030c 	and.w	r3, r3, #12
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d112      	bne.n	8006caa <HAL_RCC_OscConfig+0x5e>
 8006c84:	4b8c      	ldr	r3, [pc, #560]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c90:	d10b      	bne.n	8006caa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c92:	4b89      	ldr	r3, [pc, #548]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d06c      	beq.n	8006d78 <HAL_RCC_OscConfig+0x12c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d168      	bne.n	8006d78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e24c      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cb2:	d106      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x76>
 8006cb4:	4b80      	ldr	r3, [pc, #512]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a7f      	ldr	r2, [pc, #508]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	e02e      	b.n	8006d20 <HAL_RCC_OscConfig+0xd4>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10c      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x98>
 8006cca:	4b7b      	ldr	r3, [pc, #492]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a7a      	ldr	r2, [pc, #488]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	4b78      	ldr	r3, [pc, #480]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a77      	ldr	r2, [pc, #476]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	e01d      	b.n	8006d20 <HAL_RCC_OscConfig+0xd4>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cec:	d10c      	bne.n	8006d08 <HAL_RCC_OscConfig+0xbc>
 8006cee:	4b72      	ldr	r3, [pc, #456]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a71      	ldr	r2, [pc, #452]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a6e      	ldr	r2, [pc, #440]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	e00b      	b.n	8006d20 <HAL_RCC_OscConfig+0xd4>
 8006d08:	4b6b      	ldr	r3, [pc, #428]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	4b68      	ldr	r3, [pc, #416]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a67      	ldr	r2, [pc, #412]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d013      	beq.n	8006d50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d28:	f7ff fcea 	bl	8006700 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d30:	f7ff fce6 	bl	8006700 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b64      	cmp	r3, #100	@ 0x64
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e200      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d42:	4b5d      	ldr	r3, [pc, #372]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f0      	beq.n	8006d30 <HAL_RCC_OscConfig+0xe4>
 8006d4e:	e014      	b.n	8006d7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d50:	f7ff fcd6 	bl	8006700 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d58:	f7ff fcd2 	bl	8006700 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b64      	cmp	r3, #100	@ 0x64
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e1ec      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d6a:	4b53      	ldr	r3, [pc, #332]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f0      	bne.n	8006d58 <HAL_RCC_OscConfig+0x10c>
 8006d76:	e000      	b.n	8006d7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d063      	beq.n	8006e4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d86:	4b4c      	ldr	r3, [pc, #304]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f003 030c 	and.w	r3, r3, #12
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d92:	4b49      	ldr	r3, [pc, #292]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f003 030c 	and.w	r3, r3, #12
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d11c      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x18c>
 8006d9e:	4b46      	ldr	r3, [pc, #280]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d116      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006daa:	4b43      	ldr	r3, [pc, #268]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x176>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d001      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e1c0      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4939      	ldr	r1, [pc, #228]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dd6:	e03a      	b.n	8006e4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d020      	beq.n	8006e22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006de0:	4b36      	ldr	r3, [pc, #216]	@ (8006ebc <HAL_RCC_OscConfig+0x270>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de6:	f7ff fc8b 	bl	8006700 <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dec:	e008      	b.n	8006e00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dee:	f7ff fc87 	bl	8006700 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e1a1      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e00:	4b2d      	ldr	r3, [pc, #180]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0f0      	beq.n	8006dee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	00db      	lsls	r3, r3, #3
 8006e1a:	4927      	ldr	r1, [pc, #156]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	600b      	str	r3, [r1, #0]
 8006e20:	e015      	b.n	8006e4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e22:	4b26      	ldr	r3, [pc, #152]	@ (8006ebc <HAL_RCC_OscConfig+0x270>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e28:	f7ff fc6a 	bl	8006700 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e30:	f7ff fc66 	bl	8006700 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e180      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e42:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f0      	bne.n	8006e30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d03a      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d019      	beq.n	8006e96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e62:	4b17      	ldr	r3, [pc, #92]	@ (8006ec0 <HAL_RCC_OscConfig+0x274>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e68:	f7ff fc4a 	bl	8006700 <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e70:	f7ff fc46 	bl	8006700 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e160      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e82:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <HAL_RCC_OscConfig+0x26c>)
 8006e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0f0      	beq.n	8006e70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006e8e:	2001      	movs	r0, #1
 8006e90:	f000 fa9c 	bl	80073cc <RCC_Delay>
 8006e94:	e01c      	b.n	8006ed0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e96:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec0 <HAL_RCC_OscConfig+0x274>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e9c:	f7ff fc30 	bl	8006700 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ea2:	e00f      	b.n	8006ec4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ea4:	f7ff fc2c 	bl	8006700 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d908      	bls.n	8006ec4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e146      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
 8006eb6:	bf00      	nop
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	42420000 	.word	0x42420000
 8006ec0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ec4:	4b92      	ldr	r3, [pc, #584]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e9      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 80a6 	beq.w	800702a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ee2:	4b8b      	ldr	r3, [pc, #556]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10d      	bne.n	8006f0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eee:	4b88      	ldr	r3, [pc, #544]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	4a87      	ldr	r2, [pc, #540]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ef8:	61d3      	str	r3, [r2, #28]
 8006efa:	4b85      	ldr	r3, [pc, #532]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f02:	60bb      	str	r3, [r7, #8]
 8006f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f06:	2301      	movs	r3, #1
 8006f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f0a:	4b82      	ldr	r3, [pc, #520]	@ (8007114 <HAL_RCC_OscConfig+0x4c8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d118      	bne.n	8006f48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f16:	4b7f      	ldr	r3, [pc, #508]	@ (8007114 <HAL_RCC_OscConfig+0x4c8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8007114 <HAL_RCC_OscConfig+0x4c8>)
 8006f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f22:	f7ff fbed 	bl	8006700 <HAL_GetTick>
 8006f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f2a:	f7ff fbe9 	bl	8006700 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b64      	cmp	r3, #100	@ 0x64
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e103      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f3c:	4b75      	ldr	r3, [pc, #468]	@ (8007114 <HAL_RCC_OscConfig+0x4c8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0f0      	beq.n	8006f2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d106      	bne.n	8006f5e <HAL_RCC_OscConfig+0x312>
 8006f50:	4b6f      	ldr	r3, [pc, #444]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	4a6e      	ldr	r2, [pc, #440]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f56:	f043 0301 	orr.w	r3, r3, #1
 8006f5a:	6213      	str	r3, [r2, #32]
 8006f5c:	e02d      	b.n	8006fba <HAL_RCC_OscConfig+0x36e>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10c      	bne.n	8006f80 <HAL_RCC_OscConfig+0x334>
 8006f66:	4b6a      	ldr	r3, [pc, #424]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	4a69      	ldr	r2, [pc, #420]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f6c:	f023 0301 	bic.w	r3, r3, #1
 8006f70:	6213      	str	r3, [r2, #32]
 8006f72:	4b67      	ldr	r3, [pc, #412]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	4a66      	ldr	r2, [pc, #408]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f78:	f023 0304 	bic.w	r3, r3, #4
 8006f7c:	6213      	str	r3, [r2, #32]
 8006f7e:	e01c      	b.n	8006fba <HAL_RCC_OscConfig+0x36e>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	2b05      	cmp	r3, #5
 8006f86:	d10c      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x356>
 8006f88:	4b61      	ldr	r3, [pc, #388]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	4a60      	ldr	r2, [pc, #384]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f8e:	f043 0304 	orr.w	r3, r3, #4
 8006f92:	6213      	str	r3, [r2, #32]
 8006f94:	4b5e      	ldr	r3, [pc, #376]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	4a5d      	ldr	r2, [pc, #372]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006f9a:	f043 0301 	orr.w	r3, r3, #1
 8006f9e:	6213      	str	r3, [r2, #32]
 8006fa0:	e00b      	b.n	8006fba <HAL_RCC_OscConfig+0x36e>
 8006fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	4a5a      	ldr	r2, [pc, #360]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	6213      	str	r3, [r2, #32]
 8006fae:	4b58      	ldr	r3, [pc, #352]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	4a57      	ldr	r2, [pc, #348]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006fb4:	f023 0304 	bic.w	r3, r3, #4
 8006fb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d015      	beq.n	8006fee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fc2:	f7ff fb9d 	bl	8006700 <HAL_GetTick>
 8006fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fc8:	e00a      	b.n	8006fe0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fca:	f7ff fb99 	bl	8006700 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e0b1      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0ee      	beq.n	8006fca <HAL_RCC_OscConfig+0x37e>
 8006fec:	e014      	b.n	8007018 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fee:	f7ff fb87 	bl	8006700 <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ff4:	e00a      	b.n	800700c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff6:	f7ff fb83 	bl	8006700 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007004:	4293      	cmp	r3, r2
 8007006:	d901      	bls.n	800700c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e09b      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800700c:	4b40      	ldr	r3, [pc, #256]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1ee      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d105      	bne.n	800702a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800701e:	4b3c      	ldr	r3, [pc, #240]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	4a3b      	ldr	r2, [pc, #236]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8007024:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007028:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 8087 	beq.w	8007142 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007034:	4b36      	ldr	r3, [pc, #216]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f003 030c 	and.w	r3, r3, #12
 800703c:	2b08      	cmp	r3, #8
 800703e:	d061      	beq.n	8007104 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d146      	bne.n	80070d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007048:	4b33      	ldr	r3, [pc, #204]	@ (8007118 <HAL_RCC_OscConfig+0x4cc>)
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800704e:	f7ff fb57 	bl	8006700 <HAL_GetTick>
 8007052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007054:	e008      	b.n	8007068 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007056:	f7ff fb53 	bl	8006700 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d901      	bls.n	8007068 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e06d      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007068:	4b29      	ldr	r3, [pc, #164]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1f0      	bne.n	8007056 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800707c:	d108      	bne.n	8007090 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800707e:	4b24      	ldr	r3, [pc, #144]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	4921      	ldr	r1, [pc, #132]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 800708c:	4313      	orrs	r3, r2
 800708e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007090:	4b1f      	ldr	r3, [pc, #124]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a19      	ldr	r1, [r3, #32]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a0:	430b      	orrs	r3, r1
 80070a2:	491b      	ldr	r1, [pc, #108]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007118 <HAL_RCC_OscConfig+0x4cc>)
 80070aa:	2201      	movs	r2, #1
 80070ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ae:	f7ff fb27 	bl	8006700 <HAL_GetTick>
 80070b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070b4:	e008      	b.n	80070c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b6:	f7ff fb23 	bl	8006700 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d901      	bls.n	80070c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e03d      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070c8:	4b11      	ldr	r3, [pc, #68]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0f0      	beq.n	80070b6 <HAL_RCC_OscConfig+0x46a>
 80070d4:	e035      	b.n	8007142 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d6:	4b10      	ldr	r3, [pc, #64]	@ (8007118 <HAL_RCC_OscConfig+0x4cc>)
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070dc:	f7ff fb10 	bl	8006700 <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e4:	f7ff fb0c 	bl	8006700 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e026      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070f6:	4b06      	ldr	r3, [pc, #24]	@ (8007110 <HAL_RCC_OscConfig+0x4c4>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0x498>
 8007102:	e01e      	b.n	8007142 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d107      	bne.n	800711c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e019      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
 8007110:	40021000 	.word	0x40021000
 8007114:	40007000 	.word	0x40007000
 8007118:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800711c:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <HAL_RCC_OscConfig+0x500>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	429a      	cmp	r2, r3
 800712e:	d106      	bne.n	800713e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800713a:	429a      	cmp	r2, r3
 800713c:	d001      	beq.n	8007142 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40021000 	.word	0x40021000

08007150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e0d0      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007164:	4b6a      	ldr	r3, [pc, #424]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d910      	bls.n	8007194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007172:	4b67      	ldr	r3, [pc, #412]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f023 0207 	bic.w	r2, r3, #7
 800717a:	4965      	ldr	r1, [pc, #404]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	4313      	orrs	r3, r2
 8007180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007182:	4b63      	ldr	r3, [pc, #396]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d001      	beq.n	8007194 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e0b8      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d020      	beq.n	80071e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071ac:	4b59      	ldr	r3, [pc, #356]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	4a58      	ldr	r2, [pc, #352]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80071b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0308 	and.w	r3, r3, #8
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071c4:	4b53      	ldr	r3, [pc, #332]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	4a52      	ldr	r2, [pc, #328]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80071ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071d0:	4b50      	ldr	r3, [pc, #320]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	494d      	ldr	r1, [pc, #308]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d040      	beq.n	8007270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d107      	bne.n	8007206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f6:	4b47      	ldr	r3, [pc, #284]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d115      	bne.n	800722e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e07f      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b02      	cmp	r3, #2
 800720c:	d107      	bne.n	800721e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800720e:	4b41      	ldr	r3, [pc, #260]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d109      	bne.n	800722e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e073      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800721e:	4b3d      	ldr	r3, [pc, #244]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e06b      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800722e:	4b39      	ldr	r3, [pc, #228]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f023 0203 	bic.w	r2, r3, #3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	4936      	ldr	r1, [pc, #216]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 800723c:	4313      	orrs	r3, r2
 800723e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007240:	f7ff fa5e 	bl	8006700 <HAL_GetTick>
 8007244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007246:	e00a      	b.n	800725e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007248:	f7ff fa5a 	bl	8006700 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007256:	4293      	cmp	r3, r2
 8007258:	d901      	bls.n	800725e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e053      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800725e:	4b2d      	ldr	r3, [pc, #180]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f003 020c 	and.w	r2, r3, #12
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	429a      	cmp	r2, r3
 800726e:	d1eb      	bne.n	8007248 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007270:	4b27      	ldr	r3, [pc, #156]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0307 	and.w	r3, r3, #7
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d210      	bcs.n	80072a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727e:	4b24      	ldr	r3, [pc, #144]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f023 0207 	bic.w	r2, r3, #7
 8007286:	4922      	ldr	r1, [pc, #136]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	4313      	orrs	r3, r2
 800728c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800728e:	4b20      	ldr	r3, [pc, #128]	@ (8007310 <HAL_RCC_ClockConfig+0x1c0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0307 	and.w	r3, r3, #7
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d001      	beq.n	80072a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e032      	b.n	8007306 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072ac:	4b19      	ldr	r3, [pc, #100]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	4916      	ldr	r1, [pc, #88]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d009      	beq.n	80072de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072ca:	4b12      	ldr	r3, [pc, #72]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	490e      	ldr	r1, [pc, #56]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072de:	f000 f821 	bl	8007324 <HAL_RCC_GetSysClockFreq>
 80072e2:	4602      	mov	r2, r0
 80072e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	091b      	lsrs	r3, r3, #4
 80072ea:	f003 030f 	and.w	r3, r3, #15
 80072ee:	490a      	ldr	r1, [pc, #40]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80072f0:	5ccb      	ldrb	r3, [r1, r3]
 80072f2:	fa22 f303 	lsr.w	r3, r2, r3
 80072f6:	4a09      	ldr	r2, [pc, #36]	@ (800731c <HAL_RCC_ClockConfig+0x1cc>)
 80072f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80072fa:	4b09      	ldr	r3, [pc, #36]	@ (8007320 <HAL_RCC_ClockConfig+0x1d0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff f9bc 	bl	800667c <HAL_InitTick>

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	40022000 	.word	0x40022000
 8007314:	40021000 	.word	0x40021000
 8007318:	08009570 	.word	0x08009570
 800731c:	20000004 	.word	0x20000004
 8007320:	20000008 	.word	0x20000008

08007324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	2300      	movs	r3, #0
 8007330:	60bb      	str	r3, [r7, #8]
 8007332:	2300      	movs	r3, #0
 8007334:	617b      	str	r3, [r7, #20]
 8007336:	2300      	movs	r3, #0
 8007338:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800733e:	4b1e      	ldr	r3, [pc, #120]	@ (80073b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f003 030c 	and.w	r3, r3, #12
 800734a:	2b04      	cmp	r3, #4
 800734c:	d002      	beq.n	8007354 <HAL_RCC_GetSysClockFreq+0x30>
 800734e:	2b08      	cmp	r3, #8
 8007350:	d003      	beq.n	800735a <HAL_RCC_GetSysClockFreq+0x36>
 8007352:	e027      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007354:	4b19      	ldr	r3, [pc, #100]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x98>)
 8007356:	613b      	str	r3, [r7, #16]
      break;
 8007358:	e027      	b.n	80073aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	0c9b      	lsrs	r3, r3, #18
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	4a17      	ldr	r2, [pc, #92]	@ (80073c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007364:	5cd3      	ldrb	r3, [r2, r3]
 8007366:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d010      	beq.n	8007394 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007372:	4b11      	ldr	r3, [pc, #68]	@ (80073b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	0c5b      	lsrs	r3, r3, #17
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	4a11      	ldr	r2, [pc, #68]	@ (80073c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800737e:	5cd3      	ldrb	r3, [r2, r3]
 8007380:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a0d      	ldr	r2, [pc, #52]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x98>)
 8007386:	fb03 f202 	mul.w	r2, r3, r2
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	e004      	b.n	800739e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a0c      	ldr	r2, [pc, #48]	@ (80073c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007398:	fb02 f303 	mul.w	r3, r2, r3
 800739c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	613b      	str	r3, [r7, #16]
      break;
 80073a2:	e002      	b.n	80073aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80073a4:	4b05      	ldr	r3, [pc, #20]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x98>)
 80073a6:	613b      	str	r3, [r7, #16]
      break;
 80073a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073aa:	693b      	ldr	r3, [r7, #16]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40021000 	.word	0x40021000
 80073bc:	007a1200 	.word	0x007a1200
 80073c0:	08009580 	.word	0x08009580
 80073c4:	08009590 	.word	0x08009590
 80073c8:	003d0900 	.word	0x003d0900

080073cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80073d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007400 <RCC_Delay+0x34>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a0a      	ldr	r2, [pc, #40]	@ (8007404 <RCC_Delay+0x38>)
 80073da:	fba2 2303 	umull	r2, r3, r2, r3
 80073de:	0a5b      	lsrs	r3, r3, #9
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	fb02 f303 	mul.w	r3, r2, r3
 80073e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80073e8:	bf00      	nop
  }
  while (Delay --);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	1e5a      	subs	r2, r3, #1
 80073ee:	60fa      	str	r2, [r7, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1f9      	bne.n	80073e8 <RCC_Delay+0x1c>
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr
 8007400:	20000004 	.word	0x20000004
 8007404:	10624dd3 	.word	0x10624dd3

08007408 <siprintf>:
 8007408:	b40e      	push	{r1, r2, r3}
 800740a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800740e:	b500      	push	{lr}
 8007410:	b09c      	sub	sp, #112	@ 0x70
 8007412:	ab1d      	add	r3, sp, #116	@ 0x74
 8007414:	9002      	str	r0, [sp, #8]
 8007416:	9006      	str	r0, [sp, #24]
 8007418:	9107      	str	r1, [sp, #28]
 800741a:	9104      	str	r1, [sp, #16]
 800741c:	4808      	ldr	r0, [pc, #32]	@ (8007440 <siprintf+0x38>)
 800741e:	4909      	ldr	r1, [pc, #36]	@ (8007444 <siprintf+0x3c>)
 8007420:	f853 2b04 	ldr.w	r2, [r3], #4
 8007424:	9105      	str	r1, [sp, #20]
 8007426:	6800      	ldr	r0, [r0, #0]
 8007428:	a902      	add	r1, sp, #8
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	f000 f992 	bl	8007754 <_svfiprintf_r>
 8007430:	2200      	movs	r2, #0
 8007432:	9b02      	ldr	r3, [sp, #8]
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	b01c      	add	sp, #112	@ 0x70
 8007438:	f85d eb04 	ldr.w	lr, [sp], #4
 800743c:	b003      	add	sp, #12
 800743e:	4770      	bx	lr
 8007440:	20000010 	.word	0x20000010
 8007444:	ffff0208 	.word	0xffff0208

08007448 <memset>:
 8007448:	4603      	mov	r3, r0
 800744a:	4402      	add	r2, r0
 800744c:	4293      	cmp	r3, r2
 800744e:	d100      	bne.n	8007452 <memset+0xa>
 8007450:	4770      	bx	lr
 8007452:	f803 1b01 	strb.w	r1, [r3], #1
 8007456:	e7f9      	b.n	800744c <memset+0x4>

08007458 <__errno>:
 8007458:	4b01      	ldr	r3, [pc, #4]	@ (8007460 <__errno+0x8>)
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	20000010 	.word	0x20000010

08007464 <__libc_init_array>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	2600      	movs	r6, #0
 8007468:	4d0c      	ldr	r5, [pc, #48]	@ (800749c <__libc_init_array+0x38>)
 800746a:	4c0d      	ldr	r4, [pc, #52]	@ (80074a0 <__libc_init_array+0x3c>)
 800746c:	1b64      	subs	r4, r4, r5
 800746e:	10a4      	asrs	r4, r4, #2
 8007470:	42a6      	cmp	r6, r4
 8007472:	d109      	bne.n	8007488 <__libc_init_array+0x24>
 8007474:	f000 fc78 	bl	8007d68 <_init>
 8007478:	2600      	movs	r6, #0
 800747a:	4d0a      	ldr	r5, [pc, #40]	@ (80074a4 <__libc_init_array+0x40>)
 800747c:	4c0a      	ldr	r4, [pc, #40]	@ (80074a8 <__libc_init_array+0x44>)
 800747e:	1b64      	subs	r4, r4, r5
 8007480:	10a4      	asrs	r4, r4, #2
 8007482:	42a6      	cmp	r6, r4
 8007484:	d105      	bne.n	8007492 <__libc_init_array+0x2e>
 8007486:	bd70      	pop	{r4, r5, r6, pc}
 8007488:	f855 3b04 	ldr.w	r3, [r5], #4
 800748c:	4798      	blx	r3
 800748e:	3601      	adds	r6, #1
 8007490:	e7ee      	b.n	8007470 <__libc_init_array+0xc>
 8007492:	f855 3b04 	ldr.w	r3, [r5], #4
 8007496:	4798      	blx	r3
 8007498:	3601      	adds	r6, #1
 800749a:	e7f2      	b.n	8007482 <__libc_init_array+0x1e>
 800749c:	080095c8 	.word	0x080095c8
 80074a0:	080095c8 	.word	0x080095c8
 80074a4:	080095c8 	.word	0x080095c8
 80074a8:	080095cc 	.word	0x080095cc

080074ac <__retarget_lock_acquire_recursive>:
 80074ac:	4770      	bx	lr

080074ae <__retarget_lock_release_recursive>:
 80074ae:	4770      	bx	lr

080074b0 <_free_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4605      	mov	r5, r0
 80074b4:	2900      	cmp	r1, #0
 80074b6:	d040      	beq.n	800753a <_free_r+0x8a>
 80074b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074bc:	1f0c      	subs	r4, r1, #4
 80074be:	2b00      	cmp	r3, #0
 80074c0:	bfb8      	it	lt
 80074c2:	18e4      	addlt	r4, r4, r3
 80074c4:	f000 f8de 	bl	8007684 <__malloc_lock>
 80074c8:	4a1c      	ldr	r2, [pc, #112]	@ (800753c <_free_r+0x8c>)
 80074ca:	6813      	ldr	r3, [r2, #0]
 80074cc:	b933      	cbnz	r3, 80074dc <_free_r+0x2c>
 80074ce:	6063      	str	r3, [r4, #4]
 80074d0:	6014      	str	r4, [r2, #0]
 80074d2:	4628      	mov	r0, r5
 80074d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074d8:	f000 b8da 	b.w	8007690 <__malloc_unlock>
 80074dc:	42a3      	cmp	r3, r4
 80074de:	d908      	bls.n	80074f2 <_free_r+0x42>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	1821      	adds	r1, r4, r0
 80074e4:	428b      	cmp	r3, r1
 80074e6:	bf01      	itttt	eq
 80074e8:	6819      	ldreq	r1, [r3, #0]
 80074ea:	685b      	ldreq	r3, [r3, #4]
 80074ec:	1809      	addeq	r1, r1, r0
 80074ee:	6021      	streq	r1, [r4, #0]
 80074f0:	e7ed      	b.n	80074ce <_free_r+0x1e>
 80074f2:	461a      	mov	r2, r3
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	b10b      	cbz	r3, 80074fc <_free_r+0x4c>
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d9fa      	bls.n	80074f2 <_free_r+0x42>
 80074fc:	6811      	ldr	r1, [r2, #0]
 80074fe:	1850      	adds	r0, r2, r1
 8007500:	42a0      	cmp	r0, r4
 8007502:	d10b      	bne.n	800751c <_free_r+0x6c>
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	4401      	add	r1, r0
 8007508:	1850      	adds	r0, r2, r1
 800750a:	4283      	cmp	r3, r0
 800750c:	6011      	str	r1, [r2, #0]
 800750e:	d1e0      	bne.n	80074d2 <_free_r+0x22>
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	4408      	add	r0, r1
 8007516:	6010      	str	r0, [r2, #0]
 8007518:	6053      	str	r3, [r2, #4]
 800751a:	e7da      	b.n	80074d2 <_free_r+0x22>
 800751c:	d902      	bls.n	8007524 <_free_r+0x74>
 800751e:	230c      	movs	r3, #12
 8007520:	602b      	str	r3, [r5, #0]
 8007522:	e7d6      	b.n	80074d2 <_free_r+0x22>
 8007524:	6820      	ldr	r0, [r4, #0]
 8007526:	1821      	adds	r1, r4, r0
 8007528:	428b      	cmp	r3, r1
 800752a:	bf01      	itttt	eq
 800752c:	6819      	ldreq	r1, [r3, #0]
 800752e:	685b      	ldreq	r3, [r3, #4]
 8007530:	1809      	addeq	r1, r1, r0
 8007532:	6021      	streq	r1, [r4, #0]
 8007534:	6063      	str	r3, [r4, #4]
 8007536:	6054      	str	r4, [r2, #4]
 8007538:	e7cb      	b.n	80074d2 <_free_r+0x22>
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	200001dc 	.word	0x200001dc

08007540 <sbrk_aligned>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	4e0f      	ldr	r6, [pc, #60]	@ (8007580 <sbrk_aligned+0x40>)
 8007544:	460c      	mov	r4, r1
 8007546:	6831      	ldr	r1, [r6, #0]
 8007548:	4605      	mov	r5, r0
 800754a:	b911      	cbnz	r1, 8007552 <sbrk_aligned+0x12>
 800754c:	f000 fbaa 	bl	8007ca4 <_sbrk_r>
 8007550:	6030      	str	r0, [r6, #0]
 8007552:	4621      	mov	r1, r4
 8007554:	4628      	mov	r0, r5
 8007556:	f000 fba5 	bl	8007ca4 <_sbrk_r>
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	d103      	bne.n	8007566 <sbrk_aligned+0x26>
 800755e:	f04f 34ff 	mov.w	r4, #4294967295
 8007562:	4620      	mov	r0, r4
 8007564:	bd70      	pop	{r4, r5, r6, pc}
 8007566:	1cc4      	adds	r4, r0, #3
 8007568:	f024 0403 	bic.w	r4, r4, #3
 800756c:	42a0      	cmp	r0, r4
 800756e:	d0f8      	beq.n	8007562 <sbrk_aligned+0x22>
 8007570:	1a21      	subs	r1, r4, r0
 8007572:	4628      	mov	r0, r5
 8007574:	f000 fb96 	bl	8007ca4 <_sbrk_r>
 8007578:	3001      	adds	r0, #1
 800757a:	d1f2      	bne.n	8007562 <sbrk_aligned+0x22>
 800757c:	e7ef      	b.n	800755e <sbrk_aligned+0x1e>
 800757e:	bf00      	nop
 8007580:	200001d8 	.word	0x200001d8

08007584 <_malloc_r>:
 8007584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007588:	1ccd      	adds	r5, r1, #3
 800758a:	f025 0503 	bic.w	r5, r5, #3
 800758e:	3508      	adds	r5, #8
 8007590:	2d0c      	cmp	r5, #12
 8007592:	bf38      	it	cc
 8007594:	250c      	movcc	r5, #12
 8007596:	2d00      	cmp	r5, #0
 8007598:	4606      	mov	r6, r0
 800759a:	db01      	blt.n	80075a0 <_malloc_r+0x1c>
 800759c:	42a9      	cmp	r1, r5
 800759e:	d904      	bls.n	80075aa <_malloc_r+0x26>
 80075a0:	230c      	movs	r3, #12
 80075a2:	6033      	str	r3, [r6, #0]
 80075a4:	2000      	movs	r0, #0
 80075a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007680 <_malloc_r+0xfc>
 80075ae:	f000 f869 	bl	8007684 <__malloc_lock>
 80075b2:	f8d8 3000 	ldr.w	r3, [r8]
 80075b6:	461c      	mov	r4, r3
 80075b8:	bb44      	cbnz	r4, 800760c <_malloc_r+0x88>
 80075ba:	4629      	mov	r1, r5
 80075bc:	4630      	mov	r0, r6
 80075be:	f7ff ffbf 	bl	8007540 <sbrk_aligned>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	4604      	mov	r4, r0
 80075c6:	d158      	bne.n	800767a <_malloc_r+0xf6>
 80075c8:	f8d8 4000 	ldr.w	r4, [r8]
 80075cc:	4627      	mov	r7, r4
 80075ce:	2f00      	cmp	r7, #0
 80075d0:	d143      	bne.n	800765a <_malloc_r+0xd6>
 80075d2:	2c00      	cmp	r4, #0
 80075d4:	d04b      	beq.n	800766e <_malloc_r+0xea>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	4639      	mov	r1, r7
 80075da:	4630      	mov	r0, r6
 80075dc:	eb04 0903 	add.w	r9, r4, r3
 80075e0:	f000 fb60 	bl	8007ca4 <_sbrk_r>
 80075e4:	4581      	cmp	r9, r0
 80075e6:	d142      	bne.n	800766e <_malloc_r+0xea>
 80075e8:	6821      	ldr	r1, [r4, #0]
 80075ea:	4630      	mov	r0, r6
 80075ec:	1a6d      	subs	r5, r5, r1
 80075ee:	4629      	mov	r1, r5
 80075f0:	f7ff ffa6 	bl	8007540 <sbrk_aligned>
 80075f4:	3001      	adds	r0, #1
 80075f6:	d03a      	beq.n	800766e <_malloc_r+0xea>
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	442b      	add	r3, r5
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	bb62      	cbnz	r2, 8007660 <_malloc_r+0xdc>
 8007606:	f8c8 7000 	str.w	r7, [r8]
 800760a:	e00f      	b.n	800762c <_malloc_r+0xa8>
 800760c:	6822      	ldr	r2, [r4, #0]
 800760e:	1b52      	subs	r2, r2, r5
 8007610:	d420      	bmi.n	8007654 <_malloc_r+0xd0>
 8007612:	2a0b      	cmp	r2, #11
 8007614:	d917      	bls.n	8007646 <_malloc_r+0xc2>
 8007616:	1961      	adds	r1, r4, r5
 8007618:	42a3      	cmp	r3, r4
 800761a:	6025      	str	r5, [r4, #0]
 800761c:	bf18      	it	ne
 800761e:	6059      	strne	r1, [r3, #4]
 8007620:	6863      	ldr	r3, [r4, #4]
 8007622:	bf08      	it	eq
 8007624:	f8c8 1000 	streq.w	r1, [r8]
 8007628:	5162      	str	r2, [r4, r5]
 800762a:	604b      	str	r3, [r1, #4]
 800762c:	4630      	mov	r0, r6
 800762e:	f000 f82f 	bl	8007690 <__malloc_unlock>
 8007632:	f104 000b 	add.w	r0, r4, #11
 8007636:	1d23      	adds	r3, r4, #4
 8007638:	f020 0007 	bic.w	r0, r0, #7
 800763c:	1ac2      	subs	r2, r0, r3
 800763e:	bf1c      	itt	ne
 8007640:	1a1b      	subne	r3, r3, r0
 8007642:	50a3      	strne	r3, [r4, r2]
 8007644:	e7af      	b.n	80075a6 <_malloc_r+0x22>
 8007646:	6862      	ldr	r2, [r4, #4]
 8007648:	42a3      	cmp	r3, r4
 800764a:	bf0c      	ite	eq
 800764c:	f8c8 2000 	streq.w	r2, [r8]
 8007650:	605a      	strne	r2, [r3, #4]
 8007652:	e7eb      	b.n	800762c <_malloc_r+0xa8>
 8007654:	4623      	mov	r3, r4
 8007656:	6864      	ldr	r4, [r4, #4]
 8007658:	e7ae      	b.n	80075b8 <_malloc_r+0x34>
 800765a:	463c      	mov	r4, r7
 800765c:	687f      	ldr	r7, [r7, #4]
 800765e:	e7b6      	b.n	80075ce <_malloc_r+0x4a>
 8007660:	461a      	mov	r2, r3
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	42a3      	cmp	r3, r4
 8007666:	d1fb      	bne.n	8007660 <_malloc_r+0xdc>
 8007668:	2300      	movs	r3, #0
 800766a:	6053      	str	r3, [r2, #4]
 800766c:	e7de      	b.n	800762c <_malloc_r+0xa8>
 800766e:	230c      	movs	r3, #12
 8007670:	4630      	mov	r0, r6
 8007672:	6033      	str	r3, [r6, #0]
 8007674:	f000 f80c 	bl	8007690 <__malloc_unlock>
 8007678:	e794      	b.n	80075a4 <_malloc_r+0x20>
 800767a:	6005      	str	r5, [r0, #0]
 800767c:	e7d6      	b.n	800762c <_malloc_r+0xa8>
 800767e:	bf00      	nop
 8007680:	200001dc 	.word	0x200001dc

08007684 <__malloc_lock>:
 8007684:	4801      	ldr	r0, [pc, #4]	@ (800768c <__malloc_lock+0x8>)
 8007686:	f7ff bf11 	b.w	80074ac <__retarget_lock_acquire_recursive>
 800768a:	bf00      	nop
 800768c:	200001d4 	.word	0x200001d4

08007690 <__malloc_unlock>:
 8007690:	4801      	ldr	r0, [pc, #4]	@ (8007698 <__malloc_unlock+0x8>)
 8007692:	f7ff bf0c 	b.w	80074ae <__retarget_lock_release_recursive>
 8007696:	bf00      	nop
 8007698:	200001d4 	.word	0x200001d4

0800769c <__ssputs_r>:
 800769c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a0:	461f      	mov	r7, r3
 80076a2:	688e      	ldr	r6, [r1, #8]
 80076a4:	4682      	mov	sl, r0
 80076a6:	42be      	cmp	r6, r7
 80076a8:	460c      	mov	r4, r1
 80076aa:	4690      	mov	r8, r2
 80076ac:	680b      	ldr	r3, [r1, #0]
 80076ae:	d82d      	bhi.n	800770c <__ssputs_r+0x70>
 80076b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80076b8:	d026      	beq.n	8007708 <__ssputs_r+0x6c>
 80076ba:	6965      	ldr	r5, [r4, #20]
 80076bc:	6909      	ldr	r1, [r1, #16]
 80076be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076c2:	eba3 0901 	sub.w	r9, r3, r1
 80076c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076ca:	1c7b      	adds	r3, r7, #1
 80076cc:	444b      	add	r3, r9
 80076ce:	106d      	asrs	r5, r5, #1
 80076d0:	429d      	cmp	r5, r3
 80076d2:	bf38      	it	cc
 80076d4:	461d      	movcc	r5, r3
 80076d6:	0553      	lsls	r3, r2, #21
 80076d8:	d527      	bpl.n	800772a <__ssputs_r+0x8e>
 80076da:	4629      	mov	r1, r5
 80076dc:	f7ff ff52 	bl	8007584 <_malloc_r>
 80076e0:	4606      	mov	r6, r0
 80076e2:	b360      	cbz	r0, 800773e <__ssputs_r+0xa2>
 80076e4:	464a      	mov	r2, r9
 80076e6:	6921      	ldr	r1, [r4, #16]
 80076e8:	f000 fafa 	bl	8007ce0 <memcpy>
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f6:	81a3      	strh	r3, [r4, #12]
 80076f8:	6126      	str	r6, [r4, #16]
 80076fa:	444e      	add	r6, r9
 80076fc:	6026      	str	r6, [r4, #0]
 80076fe:	463e      	mov	r6, r7
 8007700:	6165      	str	r5, [r4, #20]
 8007702:	eba5 0509 	sub.w	r5, r5, r9
 8007706:	60a5      	str	r5, [r4, #8]
 8007708:	42be      	cmp	r6, r7
 800770a:	d900      	bls.n	800770e <__ssputs_r+0x72>
 800770c:	463e      	mov	r6, r7
 800770e:	4632      	mov	r2, r6
 8007710:	4641      	mov	r1, r8
 8007712:	6820      	ldr	r0, [r4, #0]
 8007714:	f000 faac 	bl	8007c70 <memmove>
 8007718:	2000      	movs	r0, #0
 800771a:	68a3      	ldr	r3, [r4, #8]
 800771c:	1b9b      	subs	r3, r3, r6
 800771e:	60a3      	str	r3, [r4, #8]
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	4433      	add	r3, r6
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772a:	462a      	mov	r2, r5
 800772c:	f000 fae6 	bl	8007cfc <_realloc_r>
 8007730:	4606      	mov	r6, r0
 8007732:	2800      	cmp	r0, #0
 8007734:	d1e0      	bne.n	80076f8 <__ssputs_r+0x5c>
 8007736:	4650      	mov	r0, sl
 8007738:	6921      	ldr	r1, [r4, #16]
 800773a:	f7ff feb9 	bl	80074b0 <_free_r>
 800773e:	230c      	movs	r3, #12
 8007740:	f8ca 3000 	str.w	r3, [sl]
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	f04f 30ff 	mov.w	r0, #4294967295
 800774a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800774e:	81a3      	strh	r3, [r4, #12]
 8007750:	e7e9      	b.n	8007726 <__ssputs_r+0x8a>
	...

08007754 <_svfiprintf_r>:
 8007754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007758:	4698      	mov	r8, r3
 800775a:	898b      	ldrh	r3, [r1, #12]
 800775c:	4607      	mov	r7, r0
 800775e:	061b      	lsls	r3, r3, #24
 8007760:	460d      	mov	r5, r1
 8007762:	4614      	mov	r4, r2
 8007764:	b09d      	sub	sp, #116	@ 0x74
 8007766:	d510      	bpl.n	800778a <_svfiprintf_r+0x36>
 8007768:	690b      	ldr	r3, [r1, #16]
 800776a:	b973      	cbnz	r3, 800778a <_svfiprintf_r+0x36>
 800776c:	2140      	movs	r1, #64	@ 0x40
 800776e:	f7ff ff09 	bl	8007584 <_malloc_r>
 8007772:	6028      	str	r0, [r5, #0]
 8007774:	6128      	str	r0, [r5, #16]
 8007776:	b930      	cbnz	r0, 8007786 <_svfiprintf_r+0x32>
 8007778:	230c      	movs	r3, #12
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	b01d      	add	sp, #116	@ 0x74
 8007782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007786:	2340      	movs	r3, #64	@ 0x40
 8007788:	616b      	str	r3, [r5, #20]
 800778a:	2300      	movs	r3, #0
 800778c:	9309      	str	r3, [sp, #36]	@ 0x24
 800778e:	2320      	movs	r3, #32
 8007790:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007794:	2330      	movs	r3, #48	@ 0x30
 8007796:	f04f 0901 	mov.w	r9, #1
 800779a:	f8cd 800c 	str.w	r8, [sp, #12]
 800779e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007938 <_svfiprintf_r+0x1e4>
 80077a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077a6:	4623      	mov	r3, r4
 80077a8:	469a      	mov	sl, r3
 80077aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ae:	b10a      	cbz	r2, 80077b4 <_svfiprintf_r+0x60>
 80077b0:	2a25      	cmp	r2, #37	@ 0x25
 80077b2:	d1f9      	bne.n	80077a8 <_svfiprintf_r+0x54>
 80077b4:	ebba 0b04 	subs.w	fp, sl, r4
 80077b8:	d00b      	beq.n	80077d2 <_svfiprintf_r+0x7e>
 80077ba:	465b      	mov	r3, fp
 80077bc:	4622      	mov	r2, r4
 80077be:	4629      	mov	r1, r5
 80077c0:	4638      	mov	r0, r7
 80077c2:	f7ff ff6b 	bl	800769c <__ssputs_r>
 80077c6:	3001      	adds	r0, #1
 80077c8:	f000 80a7 	beq.w	800791a <_svfiprintf_r+0x1c6>
 80077cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077ce:	445a      	add	r2, fp
 80077d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80077d2:	f89a 3000 	ldrb.w	r3, [sl]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 809f 	beq.w	800791a <_svfiprintf_r+0x1c6>
 80077dc:	2300      	movs	r3, #0
 80077de:	f04f 32ff 	mov.w	r2, #4294967295
 80077e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077e6:	f10a 0a01 	add.w	sl, sl, #1
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	9307      	str	r3, [sp, #28]
 80077ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80077f4:	4654      	mov	r4, sl
 80077f6:	2205      	movs	r2, #5
 80077f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077fc:	484e      	ldr	r0, [pc, #312]	@ (8007938 <_svfiprintf_r+0x1e4>)
 80077fe:	f000 fa61 	bl	8007cc4 <memchr>
 8007802:	9a04      	ldr	r2, [sp, #16]
 8007804:	b9d8      	cbnz	r0, 800783e <_svfiprintf_r+0xea>
 8007806:	06d0      	lsls	r0, r2, #27
 8007808:	bf44      	itt	mi
 800780a:	2320      	movmi	r3, #32
 800780c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007810:	0711      	lsls	r1, r2, #28
 8007812:	bf44      	itt	mi
 8007814:	232b      	movmi	r3, #43	@ 0x2b
 8007816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800781a:	f89a 3000 	ldrb.w	r3, [sl]
 800781e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007820:	d015      	beq.n	800784e <_svfiprintf_r+0xfa>
 8007822:	4654      	mov	r4, sl
 8007824:	2000      	movs	r0, #0
 8007826:	f04f 0c0a 	mov.w	ip, #10
 800782a:	9a07      	ldr	r2, [sp, #28]
 800782c:	4621      	mov	r1, r4
 800782e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007832:	3b30      	subs	r3, #48	@ 0x30
 8007834:	2b09      	cmp	r3, #9
 8007836:	d94b      	bls.n	80078d0 <_svfiprintf_r+0x17c>
 8007838:	b1b0      	cbz	r0, 8007868 <_svfiprintf_r+0x114>
 800783a:	9207      	str	r2, [sp, #28]
 800783c:	e014      	b.n	8007868 <_svfiprintf_r+0x114>
 800783e:	eba0 0308 	sub.w	r3, r0, r8
 8007842:	fa09 f303 	lsl.w	r3, r9, r3
 8007846:	4313      	orrs	r3, r2
 8007848:	46a2      	mov	sl, r4
 800784a:	9304      	str	r3, [sp, #16]
 800784c:	e7d2      	b.n	80077f4 <_svfiprintf_r+0xa0>
 800784e:	9b03      	ldr	r3, [sp, #12]
 8007850:	1d19      	adds	r1, r3, #4
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	9103      	str	r1, [sp, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	bfbb      	ittet	lt
 800785a:	425b      	neglt	r3, r3
 800785c:	f042 0202 	orrlt.w	r2, r2, #2
 8007860:	9307      	strge	r3, [sp, #28]
 8007862:	9307      	strlt	r3, [sp, #28]
 8007864:	bfb8      	it	lt
 8007866:	9204      	strlt	r2, [sp, #16]
 8007868:	7823      	ldrb	r3, [r4, #0]
 800786a:	2b2e      	cmp	r3, #46	@ 0x2e
 800786c:	d10a      	bne.n	8007884 <_svfiprintf_r+0x130>
 800786e:	7863      	ldrb	r3, [r4, #1]
 8007870:	2b2a      	cmp	r3, #42	@ 0x2a
 8007872:	d132      	bne.n	80078da <_svfiprintf_r+0x186>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	3402      	adds	r4, #2
 8007878:	1d1a      	adds	r2, r3, #4
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	9203      	str	r2, [sp, #12]
 800787e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007882:	9305      	str	r3, [sp, #20]
 8007884:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800793c <_svfiprintf_r+0x1e8>
 8007888:	2203      	movs	r2, #3
 800788a:	4650      	mov	r0, sl
 800788c:	7821      	ldrb	r1, [r4, #0]
 800788e:	f000 fa19 	bl	8007cc4 <memchr>
 8007892:	b138      	cbz	r0, 80078a4 <_svfiprintf_r+0x150>
 8007894:	2240      	movs	r2, #64	@ 0x40
 8007896:	9b04      	ldr	r3, [sp, #16]
 8007898:	eba0 000a 	sub.w	r0, r0, sl
 800789c:	4082      	lsls	r2, r0
 800789e:	4313      	orrs	r3, r2
 80078a0:	3401      	adds	r4, #1
 80078a2:	9304      	str	r3, [sp, #16]
 80078a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a8:	2206      	movs	r2, #6
 80078aa:	4825      	ldr	r0, [pc, #148]	@ (8007940 <_svfiprintf_r+0x1ec>)
 80078ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078b0:	f000 fa08 	bl	8007cc4 <memchr>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d036      	beq.n	8007926 <_svfiprintf_r+0x1d2>
 80078b8:	4b22      	ldr	r3, [pc, #136]	@ (8007944 <_svfiprintf_r+0x1f0>)
 80078ba:	bb1b      	cbnz	r3, 8007904 <_svfiprintf_r+0x1b0>
 80078bc:	9b03      	ldr	r3, [sp, #12]
 80078be:	3307      	adds	r3, #7
 80078c0:	f023 0307 	bic.w	r3, r3, #7
 80078c4:	3308      	adds	r3, #8
 80078c6:	9303      	str	r3, [sp, #12]
 80078c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ca:	4433      	add	r3, r6
 80078cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ce:	e76a      	b.n	80077a6 <_svfiprintf_r+0x52>
 80078d0:	460c      	mov	r4, r1
 80078d2:	2001      	movs	r0, #1
 80078d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80078d8:	e7a8      	b.n	800782c <_svfiprintf_r+0xd8>
 80078da:	2300      	movs	r3, #0
 80078dc:	f04f 0c0a 	mov.w	ip, #10
 80078e0:	4619      	mov	r1, r3
 80078e2:	3401      	adds	r4, #1
 80078e4:	9305      	str	r3, [sp, #20]
 80078e6:	4620      	mov	r0, r4
 80078e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ec:	3a30      	subs	r2, #48	@ 0x30
 80078ee:	2a09      	cmp	r2, #9
 80078f0:	d903      	bls.n	80078fa <_svfiprintf_r+0x1a6>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0c6      	beq.n	8007884 <_svfiprintf_r+0x130>
 80078f6:	9105      	str	r1, [sp, #20]
 80078f8:	e7c4      	b.n	8007884 <_svfiprintf_r+0x130>
 80078fa:	4604      	mov	r4, r0
 80078fc:	2301      	movs	r3, #1
 80078fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007902:	e7f0      	b.n	80078e6 <_svfiprintf_r+0x192>
 8007904:	ab03      	add	r3, sp, #12
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	462a      	mov	r2, r5
 800790a:	4638      	mov	r0, r7
 800790c:	4b0e      	ldr	r3, [pc, #56]	@ (8007948 <_svfiprintf_r+0x1f4>)
 800790e:	a904      	add	r1, sp, #16
 8007910:	f3af 8000 	nop.w
 8007914:	1c42      	adds	r2, r0, #1
 8007916:	4606      	mov	r6, r0
 8007918:	d1d6      	bne.n	80078c8 <_svfiprintf_r+0x174>
 800791a:	89ab      	ldrh	r3, [r5, #12]
 800791c:	065b      	lsls	r3, r3, #25
 800791e:	f53f af2d 	bmi.w	800777c <_svfiprintf_r+0x28>
 8007922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007924:	e72c      	b.n	8007780 <_svfiprintf_r+0x2c>
 8007926:	ab03      	add	r3, sp, #12
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	462a      	mov	r2, r5
 800792c:	4638      	mov	r0, r7
 800792e:	4b06      	ldr	r3, [pc, #24]	@ (8007948 <_svfiprintf_r+0x1f4>)
 8007930:	a904      	add	r1, sp, #16
 8007932:	f000 f87d 	bl	8007a30 <_printf_i>
 8007936:	e7ed      	b.n	8007914 <_svfiprintf_r+0x1c0>
 8007938:	08009592 	.word	0x08009592
 800793c:	08009598 	.word	0x08009598
 8007940:	0800959c 	.word	0x0800959c
 8007944:	00000000 	.word	0x00000000
 8007948:	0800769d 	.word	0x0800769d

0800794c <_printf_common>:
 800794c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007950:	4616      	mov	r6, r2
 8007952:	4698      	mov	r8, r3
 8007954:	688a      	ldr	r2, [r1, #8]
 8007956:	690b      	ldr	r3, [r1, #16]
 8007958:	4607      	mov	r7, r0
 800795a:	4293      	cmp	r3, r2
 800795c:	bfb8      	it	lt
 800795e:	4613      	movlt	r3, r2
 8007960:	6033      	str	r3, [r6, #0]
 8007962:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007966:	460c      	mov	r4, r1
 8007968:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800796c:	b10a      	cbz	r2, 8007972 <_printf_common+0x26>
 800796e:	3301      	adds	r3, #1
 8007970:	6033      	str	r3, [r6, #0]
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	0699      	lsls	r1, r3, #26
 8007976:	bf42      	ittt	mi
 8007978:	6833      	ldrmi	r3, [r6, #0]
 800797a:	3302      	addmi	r3, #2
 800797c:	6033      	strmi	r3, [r6, #0]
 800797e:	6825      	ldr	r5, [r4, #0]
 8007980:	f015 0506 	ands.w	r5, r5, #6
 8007984:	d106      	bne.n	8007994 <_printf_common+0x48>
 8007986:	f104 0a19 	add.w	sl, r4, #25
 800798a:	68e3      	ldr	r3, [r4, #12]
 800798c:	6832      	ldr	r2, [r6, #0]
 800798e:	1a9b      	subs	r3, r3, r2
 8007990:	42ab      	cmp	r3, r5
 8007992:	dc2b      	bgt.n	80079ec <_printf_common+0xa0>
 8007994:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007998:	6822      	ldr	r2, [r4, #0]
 800799a:	3b00      	subs	r3, #0
 800799c:	bf18      	it	ne
 800799e:	2301      	movne	r3, #1
 80079a0:	0692      	lsls	r2, r2, #26
 80079a2:	d430      	bmi.n	8007a06 <_printf_common+0xba>
 80079a4:	4641      	mov	r1, r8
 80079a6:	4638      	mov	r0, r7
 80079a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079ac:	47c8      	blx	r9
 80079ae:	3001      	adds	r0, #1
 80079b0:	d023      	beq.n	80079fa <_printf_common+0xae>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	6922      	ldr	r2, [r4, #16]
 80079b6:	f003 0306 	and.w	r3, r3, #6
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	bf14      	ite	ne
 80079be:	2500      	movne	r5, #0
 80079c0:	6833      	ldreq	r3, [r6, #0]
 80079c2:	f04f 0600 	mov.w	r6, #0
 80079c6:	bf08      	it	eq
 80079c8:	68e5      	ldreq	r5, [r4, #12]
 80079ca:	f104 041a 	add.w	r4, r4, #26
 80079ce:	bf08      	it	eq
 80079d0:	1aed      	subeq	r5, r5, r3
 80079d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80079d6:	bf08      	it	eq
 80079d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079dc:	4293      	cmp	r3, r2
 80079de:	bfc4      	itt	gt
 80079e0:	1a9b      	subgt	r3, r3, r2
 80079e2:	18ed      	addgt	r5, r5, r3
 80079e4:	42b5      	cmp	r5, r6
 80079e6:	d11a      	bne.n	8007a1e <_printf_common+0xd2>
 80079e8:	2000      	movs	r0, #0
 80079ea:	e008      	b.n	80079fe <_printf_common+0xb2>
 80079ec:	2301      	movs	r3, #1
 80079ee:	4652      	mov	r2, sl
 80079f0:	4641      	mov	r1, r8
 80079f2:	4638      	mov	r0, r7
 80079f4:	47c8      	blx	r9
 80079f6:	3001      	adds	r0, #1
 80079f8:	d103      	bne.n	8007a02 <_printf_common+0xb6>
 80079fa:	f04f 30ff 	mov.w	r0, #4294967295
 80079fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a02:	3501      	adds	r5, #1
 8007a04:	e7c1      	b.n	800798a <_printf_common+0x3e>
 8007a06:	2030      	movs	r0, #48	@ 0x30
 8007a08:	18e1      	adds	r1, r4, r3
 8007a0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a14:	4422      	add	r2, r4
 8007a16:	3302      	adds	r3, #2
 8007a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a1c:	e7c2      	b.n	80079a4 <_printf_common+0x58>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4622      	mov	r2, r4
 8007a22:	4641      	mov	r1, r8
 8007a24:	4638      	mov	r0, r7
 8007a26:	47c8      	blx	r9
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d0e6      	beq.n	80079fa <_printf_common+0xae>
 8007a2c:	3601      	adds	r6, #1
 8007a2e:	e7d9      	b.n	80079e4 <_printf_common+0x98>

08007a30 <_printf_i>:
 8007a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a34:	7e0f      	ldrb	r7, [r1, #24]
 8007a36:	4691      	mov	r9, r2
 8007a38:	2f78      	cmp	r7, #120	@ 0x78
 8007a3a:	4680      	mov	r8, r0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	469a      	mov	sl, r3
 8007a40:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a46:	d807      	bhi.n	8007a58 <_printf_i+0x28>
 8007a48:	2f62      	cmp	r7, #98	@ 0x62
 8007a4a:	d80a      	bhi.n	8007a62 <_printf_i+0x32>
 8007a4c:	2f00      	cmp	r7, #0
 8007a4e:	f000 80d3 	beq.w	8007bf8 <_printf_i+0x1c8>
 8007a52:	2f58      	cmp	r7, #88	@ 0x58
 8007a54:	f000 80ba 	beq.w	8007bcc <_printf_i+0x19c>
 8007a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a60:	e03a      	b.n	8007ad8 <_printf_i+0xa8>
 8007a62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a66:	2b15      	cmp	r3, #21
 8007a68:	d8f6      	bhi.n	8007a58 <_printf_i+0x28>
 8007a6a:	a101      	add	r1, pc, #4	@ (adr r1, 8007a70 <_printf_i+0x40>)
 8007a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a70:	08007ac9 	.word	0x08007ac9
 8007a74:	08007add 	.word	0x08007add
 8007a78:	08007a59 	.word	0x08007a59
 8007a7c:	08007a59 	.word	0x08007a59
 8007a80:	08007a59 	.word	0x08007a59
 8007a84:	08007a59 	.word	0x08007a59
 8007a88:	08007add 	.word	0x08007add
 8007a8c:	08007a59 	.word	0x08007a59
 8007a90:	08007a59 	.word	0x08007a59
 8007a94:	08007a59 	.word	0x08007a59
 8007a98:	08007a59 	.word	0x08007a59
 8007a9c:	08007bdf 	.word	0x08007bdf
 8007aa0:	08007b07 	.word	0x08007b07
 8007aa4:	08007b99 	.word	0x08007b99
 8007aa8:	08007a59 	.word	0x08007a59
 8007aac:	08007a59 	.word	0x08007a59
 8007ab0:	08007c01 	.word	0x08007c01
 8007ab4:	08007a59 	.word	0x08007a59
 8007ab8:	08007b07 	.word	0x08007b07
 8007abc:	08007a59 	.word	0x08007a59
 8007ac0:	08007a59 	.word	0x08007a59
 8007ac4:	08007ba1 	.word	0x08007ba1
 8007ac8:	6833      	ldr	r3, [r6, #0]
 8007aca:	1d1a      	adds	r2, r3, #4
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6032      	str	r2, [r6, #0]
 8007ad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ad4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e09e      	b.n	8007c1a <_printf_i+0x1ea>
 8007adc:	6833      	ldr	r3, [r6, #0]
 8007ade:	6820      	ldr	r0, [r4, #0]
 8007ae0:	1d19      	adds	r1, r3, #4
 8007ae2:	6031      	str	r1, [r6, #0]
 8007ae4:	0606      	lsls	r6, r0, #24
 8007ae6:	d501      	bpl.n	8007aec <_printf_i+0xbc>
 8007ae8:	681d      	ldr	r5, [r3, #0]
 8007aea:	e003      	b.n	8007af4 <_printf_i+0xc4>
 8007aec:	0645      	lsls	r5, r0, #25
 8007aee:	d5fb      	bpl.n	8007ae8 <_printf_i+0xb8>
 8007af0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007af4:	2d00      	cmp	r5, #0
 8007af6:	da03      	bge.n	8007b00 <_printf_i+0xd0>
 8007af8:	232d      	movs	r3, #45	@ 0x2d
 8007afa:	426d      	negs	r5, r5
 8007afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b00:	230a      	movs	r3, #10
 8007b02:	4859      	ldr	r0, [pc, #356]	@ (8007c68 <_printf_i+0x238>)
 8007b04:	e011      	b.n	8007b2a <_printf_i+0xfa>
 8007b06:	6821      	ldr	r1, [r4, #0]
 8007b08:	6833      	ldr	r3, [r6, #0]
 8007b0a:	0608      	lsls	r0, r1, #24
 8007b0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b10:	d402      	bmi.n	8007b18 <_printf_i+0xe8>
 8007b12:	0649      	lsls	r1, r1, #25
 8007b14:	bf48      	it	mi
 8007b16:	b2ad      	uxthmi	r5, r5
 8007b18:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b1a:	6033      	str	r3, [r6, #0]
 8007b1c:	bf14      	ite	ne
 8007b1e:	230a      	movne	r3, #10
 8007b20:	2308      	moveq	r3, #8
 8007b22:	4851      	ldr	r0, [pc, #324]	@ (8007c68 <_printf_i+0x238>)
 8007b24:	2100      	movs	r1, #0
 8007b26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b2a:	6866      	ldr	r6, [r4, #4]
 8007b2c:	2e00      	cmp	r6, #0
 8007b2e:	bfa8      	it	ge
 8007b30:	6821      	ldrge	r1, [r4, #0]
 8007b32:	60a6      	str	r6, [r4, #8]
 8007b34:	bfa4      	itt	ge
 8007b36:	f021 0104 	bicge.w	r1, r1, #4
 8007b3a:	6021      	strge	r1, [r4, #0]
 8007b3c:	b90d      	cbnz	r5, 8007b42 <_printf_i+0x112>
 8007b3e:	2e00      	cmp	r6, #0
 8007b40:	d04b      	beq.n	8007bda <_printf_i+0x1aa>
 8007b42:	4616      	mov	r6, r2
 8007b44:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b48:	fb03 5711 	mls	r7, r3, r1, r5
 8007b4c:	5dc7      	ldrb	r7, [r0, r7]
 8007b4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b52:	462f      	mov	r7, r5
 8007b54:	42bb      	cmp	r3, r7
 8007b56:	460d      	mov	r5, r1
 8007b58:	d9f4      	bls.n	8007b44 <_printf_i+0x114>
 8007b5a:	2b08      	cmp	r3, #8
 8007b5c:	d10b      	bne.n	8007b76 <_printf_i+0x146>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	07df      	lsls	r7, r3, #31
 8007b62:	d508      	bpl.n	8007b76 <_printf_i+0x146>
 8007b64:	6923      	ldr	r3, [r4, #16]
 8007b66:	6861      	ldr	r1, [r4, #4]
 8007b68:	4299      	cmp	r1, r3
 8007b6a:	bfde      	ittt	le
 8007b6c:	2330      	movle	r3, #48	@ 0x30
 8007b6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b76:	1b92      	subs	r2, r2, r6
 8007b78:	6122      	str	r2, [r4, #16]
 8007b7a:	464b      	mov	r3, r9
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	4640      	mov	r0, r8
 8007b80:	f8cd a000 	str.w	sl, [sp]
 8007b84:	aa03      	add	r2, sp, #12
 8007b86:	f7ff fee1 	bl	800794c <_printf_common>
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d14a      	bne.n	8007c24 <_printf_i+0x1f4>
 8007b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b92:	b004      	add	sp, #16
 8007b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	f043 0320 	orr.w	r3, r3, #32
 8007b9e:	6023      	str	r3, [r4, #0]
 8007ba0:	2778      	movs	r7, #120	@ 0x78
 8007ba2:	4832      	ldr	r0, [pc, #200]	@ (8007c6c <_printf_i+0x23c>)
 8007ba4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	6831      	ldr	r1, [r6, #0]
 8007bac:	061f      	lsls	r7, r3, #24
 8007bae:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bb2:	d402      	bmi.n	8007bba <_printf_i+0x18a>
 8007bb4:	065f      	lsls	r7, r3, #25
 8007bb6:	bf48      	it	mi
 8007bb8:	b2ad      	uxthmi	r5, r5
 8007bba:	6031      	str	r1, [r6, #0]
 8007bbc:	07d9      	lsls	r1, r3, #31
 8007bbe:	bf44      	itt	mi
 8007bc0:	f043 0320 	orrmi.w	r3, r3, #32
 8007bc4:	6023      	strmi	r3, [r4, #0]
 8007bc6:	b11d      	cbz	r5, 8007bd0 <_printf_i+0x1a0>
 8007bc8:	2310      	movs	r3, #16
 8007bca:	e7ab      	b.n	8007b24 <_printf_i+0xf4>
 8007bcc:	4826      	ldr	r0, [pc, #152]	@ (8007c68 <_printf_i+0x238>)
 8007bce:	e7e9      	b.n	8007ba4 <_printf_i+0x174>
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	f023 0320 	bic.w	r3, r3, #32
 8007bd6:	6023      	str	r3, [r4, #0]
 8007bd8:	e7f6      	b.n	8007bc8 <_printf_i+0x198>
 8007bda:	4616      	mov	r6, r2
 8007bdc:	e7bd      	b.n	8007b5a <_printf_i+0x12a>
 8007bde:	6833      	ldr	r3, [r6, #0]
 8007be0:	6825      	ldr	r5, [r4, #0]
 8007be2:	1d18      	adds	r0, r3, #4
 8007be4:	6961      	ldr	r1, [r4, #20]
 8007be6:	6030      	str	r0, [r6, #0]
 8007be8:	062e      	lsls	r6, r5, #24
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	d501      	bpl.n	8007bf2 <_printf_i+0x1c2>
 8007bee:	6019      	str	r1, [r3, #0]
 8007bf0:	e002      	b.n	8007bf8 <_printf_i+0x1c8>
 8007bf2:	0668      	lsls	r0, r5, #25
 8007bf4:	d5fb      	bpl.n	8007bee <_printf_i+0x1be>
 8007bf6:	8019      	strh	r1, [r3, #0]
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4616      	mov	r6, r2
 8007bfc:	6123      	str	r3, [r4, #16]
 8007bfe:	e7bc      	b.n	8007b7a <_printf_i+0x14a>
 8007c00:	6833      	ldr	r3, [r6, #0]
 8007c02:	2100      	movs	r1, #0
 8007c04:	1d1a      	adds	r2, r3, #4
 8007c06:	6032      	str	r2, [r6, #0]
 8007c08:	681e      	ldr	r6, [r3, #0]
 8007c0a:	6862      	ldr	r2, [r4, #4]
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f000 f859 	bl	8007cc4 <memchr>
 8007c12:	b108      	cbz	r0, 8007c18 <_printf_i+0x1e8>
 8007c14:	1b80      	subs	r0, r0, r6
 8007c16:	6060      	str	r0, [r4, #4]
 8007c18:	6863      	ldr	r3, [r4, #4]
 8007c1a:	6123      	str	r3, [r4, #16]
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c22:	e7aa      	b.n	8007b7a <_printf_i+0x14a>
 8007c24:	4632      	mov	r2, r6
 8007c26:	4649      	mov	r1, r9
 8007c28:	4640      	mov	r0, r8
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	47d0      	blx	sl
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d0ad      	beq.n	8007b8e <_printf_i+0x15e>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	079b      	lsls	r3, r3, #30
 8007c36:	d413      	bmi.n	8007c60 <_printf_i+0x230>
 8007c38:	68e0      	ldr	r0, [r4, #12]
 8007c3a:	9b03      	ldr	r3, [sp, #12]
 8007c3c:	4298      	cmp	r0, r3
 8007c3e:	bfb8      	it	lt
 8007c40:	4618      	movlt	r0, r3
 8007c42:	e7a6      	b.n	8007b92 <_printf_i+0x162>
 8007c44:	2301      	movs	r3, #1
 8007c46:	4632      	mov	r2, r6
 8007c48:	4649      	mov	r1, r9
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	47d0      	blx	sl
 8007c4e:	3001      	adds	r0, #1
 8007c50:	d09d      	beq.n	8007b8e <_printf_i+0x15e>
 8007c52:	3501      	adds	r5, #1
 8007c54:	68e3      	ldr	r3, [r4, #12]
 8007c56:	9903      	ldr	r1, [sp, #12]
 8007c58:	1a5b      	subs	r3, r3, r1
 8007c5a:	42ab      	cmp	r3, r5
 8007c5c:	dcf2      	bgt.n	8007c44 <_printf_i+0x214>
 8007c5e:	e7eb      	b.n	8007c38 <_printf_i+0x208>
 8007c60:	2500      	movs	r5, #0
 8007c62:	f104 0619 	add.w	r6, r4, #25
 8007c66:	e7f5      	b.n	8007c54 <_printf_i+0x224>
 8007c68:	080095a3 	.word	0x080095a3
 8007c6c:	080095b4 	.word	0x080095b4

08007c70 <memmove>:
 8007c70:	4288      	cmp	r0, r1
 8007c72:	b510      	push	{r4, lr}
 8007c74:	eb01 0402 	add.w	r4, r1, r2
 8007c78:	d902      	bls.n	8007c80 <memmove+0x10>
 8007c7a:	4284      	cmp	r4, r0
 8007c7c:	4623      	mov	r3, r4
 8007c7e:	d807      	bhi.n	8007c90 <memmove+0x20>
 8007c80:	1e43      	subs	r3, r0, #1
 8007c82:	42a1      	cmp	r1, r4
 8007c84:	d008      	beq.n	8007c98 <memmove+0x28>
 8007c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c8e:	e7f8      	b.n	8007c82 <memmove+0x12>
 8007c90:	4601      	mov	r1, r0
 8007c92:	4402      	add	r2, r0
 8007c94:	428a      	cmp	r2, r1
 8007c96:	d100      	bne.n	8007c9a <memmove+0x2a>
 8007c98:	bd10      	pop	{r4, pc}
 8007c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ca2:	e7f7      	b.n	8007c94 <memmove+0x24>

08007ca4 <_sbrk_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	4d05      	ldr	r5, [pc, #20]	@ (8007cc0 <_sbrk_r+0x1c>)
 8007caa:	4604      	mov	r4, r0
 8007cac:	4608      	mov	r0, r1
 8007cae:	602b      	str	r3, [r5, #0]
 8007cb0:	f7fe fc6c 	bl	800658c <_sbrk>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_sbrk_r+0x1a>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_sbrk_r+0x1a>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	200001d0 	.word	0x200001d0

08007cc4 <memchr>:
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	b2c9      	uxtb	r1, r1
 8007cca:	4402      	add	r2, r0
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	4618      	mov	r0, r3
 8007cd0:	d101      	bne.n	8007cd6 <memchr+0x12>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e003      	b.n	8007cde <memchr+0x1a>
 8007cd6:	7804      	ldrb	r4, [r0, #0]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	428c      	cmp	r4, r1
 8007cdc:	d1f6      	bne.n	8007ccc <memchr+0x8>
 8007cde:	bd10      	pop	{r4, pc}

08007ce0 <memcpy>:
 8007ce0:	440a      	add	r2, r1
 8007ce2:	4291      	cmp	r1, r2
 8007ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ce8:	d100      	bne.n	8007cec <memcpy+0xc>
 8007cea:	4770      	bx	lr
 8007cec:	b510      	push	{r4, lr}
 8007cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cf2:	4291      	cmp	r1, r2
 8007cf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cf8:	d1f9      	bne.n	8007cee <memcpy+0xe>
 8007cfa:	bd10      	pop	{r4, pc}

08007cfc <_realloc_r>:
 8007cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d00:	4680      	mov	r8, r0
 8007d02:	4615      	mov	r5, r2
 8007d04:	460c      	mov	r4, r1
 8007d06:	b921      	cbnz	r1, 8007d12 <_realloc_r+0x16>
 8007d08:	4611      	mov	r1, r2
 8007d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0e:	f7ff bc39 	b.w	8007584 <_malloc_r>
 8007d12:	b92a      	cbnz	r2, 8007d20 <_realloc_r+0x24>
 8007d14:	f7ff fbcc 	bl	80074b0 <_free_r>
 8007d18:	2400      	movs	r4, #0
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d20:	f000 f81a 	bl	8007d58 <_malloc_usable_size_r>
 8007d24:	4285      	cmp	r5, r0
 8007d26:	4606      	mov	r6, r0
 8007d28:	d802      	bhi.n	8007d30 <_realloc_r+0x34>
 8007d2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007d2e:	d8f4      	bhi.n	8007d1a <_realloc_r+0x1e>
 8007d30:	4629      	mov	r1, r5
 8007d32:	4640      	mov	r0, r8
 8007d34:	f7ff fc26 	bl	8007584 <_malloc_r>
 8007d38:	4607      	mov	r7, r0
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d0ec      	beq.n	8007d18 <_realloc_r+0x1c>
 8007d3e:	42b5      	cmp	r5, r6
 8007d40:	462a      	mov	r2, r5
 8007d42:	4621      	mov	r1, r4
 8007d44:	bf28      	it	cs
 8007d46:	4632      	movcs	r2, r6
 8007d48:	f7ff ffca 	bl	8007ce0 <memcpy>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	4640      	mov	r0, r8
 8007d50:	f7ff fbae 	bl	80074b0 <_free_r>
 8007d54:	463c      	mov	r4, r7
 8007d56:	e7e0      	b.n	8007d1a <_realloc_r+0x1e>

08007d58 <_malloc_usable_size_r>:
 8007d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d5c:	1f18      	subs	r0, r3, #4
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bfbc      	itt	lt
 8007d62:	580b      	ldrlt	r3, [r1, r0]
 8007d64:	18c0      	addlt	r0, r0, r3
 8007d66:	4770      	bx	lr

08007d68 <_init>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	bf00      	nop
 8007d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6e:	bc08      	pop	{r3}
 8007d70:	469e      	mov	lr, r3
 8007d72:	4770      	bx	lr

08007d74 <_fini>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	bf00      	nop
 8007d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7a:	bc08      	pop	{r3}
 8007d7c:	469e      	mov	lr, r3
 8007d7e:	4770      	bx	lr
