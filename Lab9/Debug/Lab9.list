
Lab9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000220c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080023f0  080023f0  000033f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002468  08002468  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002468  08002468  00003468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002470  08002470  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002470  08002470  00003470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002474  08002474  00003474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002478  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000005c  080024d4  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080024d4  0000421c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f1e  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f2  00000000  00000000  0000afa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  0000c898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004ee  00000000  00000000  0000cf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192f4  00000000  00000000  0000d41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096f2  00000000  00000000  00026712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090893  00000000  00000000  0002fe04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0697  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d50  00000000  00000000  000c06dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  000c242c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	080023d8 	.word	0x080023d8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	080023d8 	.word	0x080023d8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023a:	f107 0308 	add.w	r3, r7, #8
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000248:	4b18      	ldr	r3, [pc, #96]	@ (80002ac <MX_GPIO_Init+0x78>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a17      	ldr	r2, [pc, #92]	@ (80002ac <MX_GPIO_Init+0x78>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6193      	str	r3, [r2, #24]
 8000254:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <MX_GPIO_Init+0x78>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f003 0320 	and.w	r3, r3, #32
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000260:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <MX_GPIO_Init+0x78>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a11      	ldr	r2, [pc, #68]	@ (80002ac <MX_GPIO_Init+0x78>)
 8000266:	f043 0304 	orr.w	r3, r3, #4
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <MX_GPIO_Init+0x78>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0304 	and.w	r3, r3, #4
 8000274:	603b      	str	r3, [r7, #0]
 8000276:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000278:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800027c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800027e:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <MX_GPIO_Init+0x7c>)
 8000280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000282:	2301      	movs	r3, #1
 8000284:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000286:	f107 0308 	add.w	r3, r7, #8
 800028a:	4619      	mov	r1, r3
 800028c:	4809      	ldr	r0, [pc, #36]	@ (80002b4 <MX_GPIO_Init+0x80>)
 800028e:	f000 fba7 	bl	80009e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000292:	2200      	movs	r2, #0
 8000294:	2101      	movs	r1, #1
 8000296:	2028      	movs	r0, #40	@ 0x28
 8000298:	f000 fb6b 	bl	8000972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800029c:	2028      	movs	r0, #40	@ 0x28
 800029e:	f000 fb84 	bl	80009aa <HAL_NVIC_EnableIRQ>

}
 80002a2:	bf00      	nop
 80002a4:	3718      	adds	r7, #24
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40021000 	.word	0x40021000
 80002b0:	10210000 	.word	0x10210000
 80002b4:	40010800 	.word	0x40010800

080002b8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80002bc:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <MX_IWDG_Init+0x2c>)
 80002be:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <MX_IWDG_Init+0x30>)
 80002c0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <MX_IWDG_Init+0x2c>)
 80002c4:	2204      	movs	r2, #4
 80002c6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1250;
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <MX_IWDG_Init+0x2c>)
 80002ca:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80002ce:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80002d0:	4804      	ldr	r0, [pc, #16]	@ (80002e4 <MX_IWDG_Init+0x2c>)
 80002d2:	f000 fd49 	bl	8000d68 <HAL_IWDG_Init>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80002dc:	f000 f885 	bl	80003ea <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000078 	.word	0x20000078
 80002e8:	40003000 	.word	0x40003000

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b09a      	sub	sp, #104	@ 0x68
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f2:	f000 f9e1 	bl	80006b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f6:	f000 f831 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fa:	f7ff ff9b 	bl	8000234 <MX_GPIO_Init>
  MX_IWDG_Init();
 80002fe:	f7ff ffdb 	bl	80002b8 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 8000302:	f000 f93d 	bl	8000580 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  int i = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	667b      	str	r3, [r7, #100]	@ 0x64
  unsigned char msg[100];
  HAL_UART_Transmit(&huart1, "Restart\r\n", 9, HAL_MAX_DELAY);
 800030a:	f04f 33ff 	mov.w	r3, #4294967295
 800030e:	2209      	movs	r2, #9
 8000310:	490f      	ldr	r1, [pc, #60]	@ (8000350 <main+0x64>)
 8000312:	4810      	ldr	r0, [pc, #64]	@ (8000354 <main+0x68>)
 8000314:	f001 f9dc 	bl	80016d0 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i++;
 8000318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800031a:	3301      	adds	r3, #1
 800031c:	667b      	str	r3, [r7, #100]	@ 0x64
	  sprintf(msg,"i = %d\r\n ", i);
 800031e:	463b      	mov	r3, r7
 8000320:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000322:	490d      	ldr	r1, [pc, #52]	@ (8000358 <main+0x6c>)
 8000324:	4618      	mov	r0, r3
 8000326:	f001 fba7 	bl	8001a78 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800032a:	463b      	mov	r3, r7
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ff79 	bl	8000224 <strlen>
 8000332:	4603      	mov	r3, r0
 8000334:	b29a      	uxth	r2, r3
 8000336:	4639      	mov	r1, r7
 8000338:	f04f 33ff 	mov.w	r3, #4294967295
 800033c:	4805      	ldr	r0, [pc, #20]	@ (8000354 <main+0x68>)
 800033e:	f001 f9c7 	bl	80016d0 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000342:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000346:	f000 fa19 	bl	800077c <HAL_Delay>
	  i++;
 800034a:	bf00      	nop
 800034c:	e7e4      	b.n	8000318 <main+0x2c>
 800034e:	bf00      	nop
 8000350:	080023f0 	.word	0x080023f0
 8000354:	20000088 	.word	0x20000088
 8000358:	080023fc 	.word	0x080023fc

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b090      	sub	sp, #64	@ 0x40
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	f107 0318 	add.w	r3, r7, #24
 8000366:	2228      	movs	r2, #40	@ 0x28
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f001 fba4 	bl	8001ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800037e:	2309      	movs	r3, #9
 8000380:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000382:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000386:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038c:	2301      	movs	r3, #1
 800038e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000390:	2301      	movs	r3, #1
 8000392:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000394:	2302      	movs	r3, #2
 8000396:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800039c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800039e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a4:	f107 0318 	add.w	r3, r7, #24
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 fd31 	bl	8000e10 <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80003b4:	f000 f819 	bl	80003ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	230f      	movs	r3, #15
 80003ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	2302      	movs	r3, #2
 80003be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2102      	movs	r1, #2
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 ff9e 	bl	8001314 <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80003de:	f000 f804 	bl	80003ea <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3740      	adds	r7, #64	@ 0x40
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ee:	b672      	cpsid	i
}
 80003f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f2:	bf00      	nop
 80003f4:	e7fd      	b.n	80003f2 <Error_Handler+0x8>
	...

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fe:	4b16      	ldr	r3, [pc, #88]	@ (8000458 <HAL_MspInit+0x60>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a15      	ldr	r2, [pc, #84]	@ (8000458 <HAL_MspInit+0x60>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b13      	ldr	r3, [pc, #76]	@ (8000458 <HAL_MspInit+0x60>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <HAL_MspInit+0x60>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a0f      	ldr	r2, [pc, #60]	@ (8000458 <HAL_MspInit+0x60>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b0d      	ldr	r3, [pc, #52]	@ (8000458 <HAL_MspInit+0x60>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800042e:	2005      	movs	r0, #5
 8000430:	f000 fa94 	bl	800095c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000434:	4b09      	ldr	r3, [pc, #36]	@ (800045c <HAL_MspInit+0x64>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	4a04      	ldr	r2, [pc, #16]	@ (800045c <HAL_MspInit+0x64>)
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40021000 	.word	0x40021000
 800045c:	40010000 	.word	0x40010000

08000460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <NMI_Handler+0x4>

08000468 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <HardFault_Handler+0x4>

08000470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <MemManage_Handler+0x4>

08000478 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <BusFault_Handler+0x4>

08000480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <UsageFault_Handler+0x4>

08000488 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b0:	f000 f948 	bl	8000744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80004bc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80004c0:	f000 fc3a 	bl	8000d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
switch (GPIO_Pin) {
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80004d8:	d10b      	bne.n	80004f2 <HAL_GPIO_EXTI_Callback+0x2a>
	case KEY1_Pin:
		if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET){
 80004da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004de:	4808      	ldr	r0, [pc, #32]	@ (8000500 <HAL_GPIO_EXTI_Callback+0x38>)
 80004e0:	f000 fc12 	bl	8000d08 <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d105      	bne.n	80004f6 <HAL_GPIO_EXTI_Callback+0x2e>
			HAL_IWDG_Refresh(&hiwdg);
 80004ea:	4806      	ldr	r0, [pc, #24]	@ (8000504 <HAL_GPIO_EXTI_Callback+0x3c>)
 80004ec:	f000 fc80 	bl	8000df0 <HAL_IWDG_Refresh>
		}
		break;
 80004f0:	e001      	b.n	80004f6 <HAL_GPIO_EXTI_Callback+0x2e>
default:
	break;
 80004f2:	bf00      	nop
 80004f4:	e000      	b.n	80004f8 <HAL_GPIO_EXTI_Callback+0x30>
		break;
 80004f6:	bf00      	nop
	}
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010800 	.word	0x40010800
 8000504:	20000078 	.word	0x20000078

08000508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000510:	4a14      	ldr	r2, [pc, #80]	@ (8000564 <_sbrk+0x5c>)
 8000512:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <_sbrk+0x60>)
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800051c:	4b13      	ldr	r3, [pc, #76]	@ (800056c <_sbrk+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000524:	4b11      	ldr	r3, [pc, #68]	@ (800056c <_sbrk+0x64>)
 8000526:	4a12      	ldr	r2, [pc, #72]	@ (8000570 <_sbrk+0x68>)
 8000528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052a:	4b10      	ldr	r3, [pc, #64]	@ (800056c <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	429a      	cmp	r2, r3
 8000536:	d207      	bcs.n	8000548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000538:	f001 fac6 	bl	8001ac8 <__errno>
 800053c:	4603      	mov	r3, r0
 800053e:	220c      	movs	r2, #12
 8000540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	e009      	b.n	800055c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054e:	4b07      	ldr	r3, [pc, #28]	@ (800056c <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	@ (800056c <_sbrk+0x64>)
 8000558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055a:	68fb      	ldr	r3, [r7, #12]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	2000c000 	.word	0x2000c000
 8000568:	00000400 	.word	0x00000400
 800056c:	20000084 	.word	0x20000084
 8000570:	20000220 	.word	0x20000220

08000574 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000584:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_USART1_UART_Init+0x4c>)
 8000586:	4a12      	ldr	r2, [pc, #72]	@ (80005d0 <MX_USART1_UART_Init+0x50>)
 8000588:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <MX_USART1_UART_Init+0x4c>)
 800058c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000590:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <MX_USART1_UART_Init+0x4c>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000598:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <MX_USART1_UART_Init+0x4c>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <MX_USART1_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <MX_USART1_UART_Init+0x4c>)
 80005a6:	220c      	movs	r2, #12
 80005a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <MX_USART1_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_USART1_UART_Init+0x4c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005b6:	4805      	ldr	r0, [pc, #20]	@ (80005cc <MX_USART1_UART_Init+0x4c>)
 80005b8:	f001 f83a 	bl	8001630 <HAL_UART_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005c2:	f7ff ff12 	bl	80003ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000088 	.word	0x20000088
 80005d0:	40013800 	.word	0x40013800

080005d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000660 <HAL_UART_MspInit+0x8c>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d131      	bne.n	8000658 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <HAL_UART_MspInit+0x90>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000664 <HAL_UART_MspInit+0x90>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <HAL_UART_MspInit+0x90>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <HAL_UART_MspInit+0x90>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a14      	ldr	r2, [pc, #80]	@ (8000664 <HAL_UART_MspInit+0x90>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <HAL_UART_MspInit+0x90>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000628:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062e:	2303      	movs	r3, #3
 8000630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	4619      	mov	r1, r3
 8000638:	480b      	ldr	r0, [pc, #44]	@ (8000668 <HAL_UART_MspInit+0x94>)
 800063a:	f000 f9d1 	bl	80009e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800063e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	4619      	mov	r1, r3
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <HAL_UART_MspInit+0x94>)
 8000654:	f000 f9c4 	bl	80009e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000658:	bf00      	nop
 800065a:	3720      	adds	r7, #32
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40013800 	.word	0x40013800
 8000664:	40021000 	.word	0x40021000
 8000668:	40010800 	.word	0x40010800

0800066c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800066c:	f7ff ff82 	bl	8000574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000672:	490c      	ldr	r1, [pc, #48]	@ (80006a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000674:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a09      	ldr	r2, [pc, #36]	@ (80006ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000688:	4c09      	ldr	r4, [pc, #36]	@ (80006b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000696:	f001 fa1d 	bl	8001ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069a:	f7ff fe27 	bl	80002ec <main>
  bx lr
 800069e:	4770      	bx	lr
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006a8:	08002478 	.word	0x08002478
  ldr r2, =_sbss
 80006ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006b0:	2000021c 	.word	0x2000021c

080006b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC1_2_IRQHandler>
	...

080006b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006bc:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <HAL_Init+0x28>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a07      	ldr	r2, [pc, #28]	@ (80006e0 <HAL_Init+0x28>)
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f000 f947 	bl	800095c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 f808 	bl	80006e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d4:	f7ff fe90 	bl	80003f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40022000 	.word	0x40022000

080006e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <HAL_InitTick+0x54>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <HAL_InitTick+0x58>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f95f 	bl	80009c6 <HAL_SYSTICK_Config>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	e00e      	b.n	8000730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b0f      	cmp	r3, #15
 8000716:	d80a      	bhi.n	800072e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000718:	2200      	movs	r2, #0
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	f04f 30ff 	mov.w	r0, #4294967295
 8000720:	f000 f927 	bl	8000972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000724:	4a06      	ldr	r2, [pc, #24]	@ (8000740 <HAL_InitTick+0x5c>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800072a:	2300      	movs	r3, #0
 800072c:	e000      	b.n	8000730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800072e:	2301      	movs	r3, #1
}
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000000 	.word	0x20000000
 800073c:	20000008 	.word	0x20000008
 8000740:	20000004 	.word	0x20000004

08000744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <HAL_IncTick+0x1c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <HAL_IncTick+0x20>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4a03      	ldr	r2, [pc, #12]	@ (8000764 <HAL_IncTick+0x20>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000008 	.word	0x20000008
 8000764:	200000d0 	.word	0x200000d0

08000768 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b02      	ldr	r3, [pc, #8]	@ (8000778 <HAL_GetTick+0x10>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	200000d0 	.word	0x200000d0

0800077c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000784:	f7ff fff0 	bl	8000768 <HAL_GetTick>
 8000788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000794:	d005      	beq.n	80007a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000796:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <HAL_Delay+0x44>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a2:	bf00      	nop
 80007a4:	f7ff ffe0 	bl	8000768 <HAL_GetTick>
 80007a8:	4602      	mov	r2, r0
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d8f7      	bhi.n	80007a4 <HAL_Delay+0x28>
  {
  }
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db0b      	blt.n	8000852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 021f 	and.w	r2, r3, #31
 8000840:	4906      	ldr	r1, [pc, #24]	@ (800085c <__NVIC_EnableIRQ+0x34>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	095b      	lsrs	r3, r3, #5
 8000848:	2001      	movs	r0, #1
 800084a:	fa00 f202 	lsl.w	r2, r0, r2
 800084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db0a      	blt.n	800088a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	490c      	ldr	r1, [pc, #48]	@ (80008ac <__NVIC_SetPriority+0x4c>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	440b      	add	r3, r1
 8000884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000888:	e00a      	b.n	80008a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <__NVIC_SetPriority+0x50>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	3b04      	subs	r3, #4
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	440b      	add	r3, r1
 800089e:	761a      	strb	r2, [r3, #24]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	@ 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f1c3 0307 	rsb	r3, r3, #7
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	bf28      	it	cs
 80008d2:	2304      	movcs	r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d902      	bls.n	80008e4 <NVIC_EncodePriority+0x30>
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3b03      	subs	r3, #3
 80008e2:	e000      	b.n	80008e6 <NVIC_EncodePriority+0x32>
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	401a      	ands	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43d9      	mvns	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	4313      	orrs	r3, r2
         );
}
 800090e:	4618      	mov	r0, r3
 8000910:	3724      	adds	r7, #36	@ 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000928:	d301      	bcc.n	800092e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092a:	2301      	movs	r3, #1
 800092c:	e00f      	b.n	800094e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <SysTick_Config+0x40>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000936:	210f      	movs	r1, #15
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f7ff ff90 	bl	8000860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <SysTick_Config+0x40>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <SysTick_Config+0x40>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ff2d 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000984:	f7ff ff42 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	6978      	ldr	r0, [r7, #20]
 8000990:	f7ff ff90 	bl	80008b4 <NVIC_EncodePriority>
 8000994:	4602      	mov	r2, r0
 8000996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff5f 	bl	8000860 <__NVIC_SetPriority>
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff35 	bl	8000828 <__NVIC_EnableIRQ>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ffa2 	bl	8000918 <SysTick_Config>
 80009d4:	4603      	mov	r3, r0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b08b      	sub	sp, #44	@ 0x2c
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f2:	e179      	b.n	8000ce8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009f4:	2201      	movs	r2, #1
 80009f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	4013      	ands	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	f040 8168 	bne.w	8000ce2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	4a96      	ldr	r2, [pc, #600]	@ (8000c70 <HAL_GPIO_Init+0x290>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d05e      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a1c:	4a94      	ldr	r2, [pc, #592]	@ (8000c70 <HAL_GPIO_Init+0x290>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d875      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a22:	4a94      	ldr	r2, [pc, #592]	@ (8000c74 <HAL_GPIO_Init+0x294>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d058      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a28:	4a92      	ldr	r2, [pc, #584]	@ (8000c74 <HAL_GPIO_Init+0x294>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d86f      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a2e:	4a92      	ldr	r2, [pc, #584]	@ (8000c78 <HAL_GPIO_Init+0x298>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d052      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a34:	4a90      	ldr	r2, [pc, #576]	@ (8000c78 <HAL_GPIO_Init+0x298>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d869      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a3a:	4a90      	ldr	r2, [pc, #576]	@ (8000c7c <HAL_GPIO_Init+0x29c>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d04c      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a40:	4a8e      	ldr	r2, [pc, #568]	@ (8000c7c <HAL_GPIO_Init+0x29c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d863      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a46:	4a8e      	ldr	r2, [pc, #568]	@ (8000c80 <HAL_GPIO_Init+0x2a0>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d046      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a4c:	4a8c      	ldr	r2, [pc, #560]	@ (8000c80 <HAL_GPIO_Init+0x2a0>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d85d      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a52:	2b12      	cmp	r3, #18
 8000a54:	d82a      	bhi.n	8000aac <HAL_GPIO_Init+0xcc>
 8000a56:	2b12      	cmp	r3, #18
 8000a58:	d859      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a60 <HAL_GPIO_Init+0x80>)
 8000a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a60:	08000adb 	.word	0x08000adb
 8000a64:	08000ab5 	.word	0x08000ab5
 8000a68:	08000ac7 	.word	0x08000ac7
 8000a6c:	08000b09 	.word	0x08000b09
 8000a70:	08000b0f 	.word	0x08000b0f
 8000a74:	08000b0f 	.word	0x08000b0f
 8000a78:	08000b0f 	.word	0x08000b0f
 8000a7c:	08000b0f 	.word	0x08000b0f
 8000a80:	08000b0f 	.word	0x08000b0f
 8000a84:	08000b0f 	.word	0x08000b0f
 8000a88:	08000b0f 	.word	0x08000b0f
 8000a8c:	08000b0f 	.word	0x08000b0f
 8000a90:	08000b0f 	.word	0x08000b0f
 8000a94:	08000b0f 	.word	0x08000b0f
 8000a98:	08000b0f 	.word	0x08000b0f
 8000a9c:	08000b0f 	.word	0x08000b0f
 8000aa0:	08000b0f 	.word	0x08000b0f
 8000aa4:	08000abd 	.word	0x08000abd
 8000aa8:	08000ad1 	.word	0x08000ad1
 8000aac:	4a75      	ldr	r2, [pc, #468]	@ (8000c84 <HAL_GPIO_Init+0x2a4>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d013      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ab2:	e02c      	b.n	8000b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e029      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e024      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	3308      	adds	r3, #8
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e01f      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	330c      	adds	r3, #12
 8000ad6:	623b      	str	r3, [r7, #32]
          break;
 8000ad8:	e01a      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e013      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d105      	bne.n	8000afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af0:	2308      	movs	r3, #8
 8000af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	611a      	str	r2, [r3, #16]
          break;
 8000afa:	e009      	b.n	8000b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000afc:	2308      	movs	r3, #8
 8000afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	615a      	str	r2, [r3, #20]
          break;
 8000b06:	e003      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          break;
 8000b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	2bff      	cmp	r3, #255	@ 0xff
 8000b14:	d801      	bhi.n	8000b1a <HAL_GPIO_Init+0x13a>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	e001      	b.n	8000b1e <HAL_GPIO_Init+0x13e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	2bff      	cmp	r3, #255	@ 0xff
 8000b24:	d802      	bhi.n	8000b2c <HAL_GPIO_Init+0x14c>
 8000b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	e002      	b.n	8000b32 <HAL_GPIO_Init+0x152>
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	3b08      	subs	r3, #8
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	210f      	movs	r1, #15
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	401a      	ands	r2, r3
 8000b44:	6a39      	ldr	r1, [r7, #32]
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 80c1 	beq.w	8000ce2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b60:	4b49      	ldr	r3, [pc, #292]	@ (8000c88 <HAL_GPIO_Init+0x2a8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a48      	ldr	r2, [pc, #288]	@ (8000c88 <HAL_GPIO_Init+0x2a8>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b46      	ldr	r3, [pc, #280]	@ (8000c88 <HAL_GPIO_Init+0x2a8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b78:	4a44      	ldr	r2, [pc, #272]	@ (8000c8c <HAL_GPIO_Init+0x2ac>)
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	3302      	adds	r3, #2
 8000b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	f003 0303 	and.w	r3, r3, #3
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	220f      	movs	r2, #15
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a3c      	ldr	r2, [pc, #240]	@ (8000c90 <HAL_GPIO_Init+0x2b0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d01f      	beq.n	8000be4 <HAL_GPIO_Init+0x204>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a3b      	ldr	r2, [pc, #236]	@ (8000c94 <HAL_GPIO_Init+0x2b4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d019      	beq.n	8000be0 <HAL_GPIO_Init+0x200>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a3a      	ldr	r2, [pc, #232]	@ (8000c98 <HAL_GPIO_Init+0x2b8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d013      	beq.n	8000bdc <HAL_GPIO_Init+0x1fc>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a39      	ldr	r2, [pc, #228]	@ (8000c9c <HAL_GPIO_Init+0x2bc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d00d      	beq.n	8000bd8 <HAL_GPIO_Init+0x1f8>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a38      	ldr	r2, [pc, #224]	@ (8000ca0 <HAL_GPIO_Init+0x2c0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d007      	beq.n	8000bd4 <HAL_GPIO_Init+0x1f4>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a37      	ldr	r2, [pc, #220]	@ (8000ca4 <HAL_GPIO_Init+0x2c4>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d101      	bne.n	8000bd0 <HAL_GPIO_Init+0x1f0>
 8000bcc:	2305      	movs	r3, #5
 8000bce:	e00a      	b.n	8000be6 <HAL_GPIO_Init+0x206>
 8000bd0:	2306      	movs	r3, #6
 8000bd2:	e008      	b.n	8000be6 <HAL_GPIO_Init+0x206>
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	e006      	b.n	8000be6 <HAL_GPIO_Init+0x206>
 8000bd8:	2303      	movs	r3, #3
 8000bda:	e004      	b.n	8000be6 <HAL_GPIO_Init+0x206>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e002      	b.n	8000be6 <HAL_GPIO_Init+0x206>
 8000be0:	2301      	movs	r3, #1
 8000be2:	e000      	b.n	8000be6 <HAL_GPIO_Init+0x206>
 8000be4:	2300      	movs	r3, #0
 8000be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000be8:	f002 0203 	and.w	r2, r2, #3
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	4093      	lsls	r3, r2
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bf6:	4925      	ldr	r1, [pc, #148]	@ (8000c8c <HAL_GPIO_Init+0x2ac>)
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d006      	beq.n	8000c1e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c10:	4b25      	ldr	r3, [pc, #148]	@ (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	4924      	ldr	r1, [pc, #144]	@ (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	608b      	str	r3, [r1, #8]
 8000c1c:	e006      	b.n	8000c2c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c1e:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	4920      	ldr	r1, [pc, #128]	@ (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000c28:	4013      	ands	r3, r2
 8000c2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	491a      	ldr	r1, [pc, #104]	@ (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	60cb      	str	r3, [r1, #12]
 8000c44:	e006      	b.n	8000c54 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c46:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000c48:	68da      	ldr	r2, [r3, #12]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	4916      	ldr	r1, [pc, #88]	@ (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d025      	beq.n	8000cac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	4910      	ldr	r1, [pc, #64]	@ (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	604b      	str	r3, [r1, #4]
 8000c6c:	e025      	b.n	8000cba <HAL_GPIO_Init+0x2da>
 8000c6e:	bf00      	nop
 8000c70:	10320000 	.word	0x10320000
 8000c74:	10310000 	.word	0x10310000
 8000c78:	10220000 	.word	0x10220000
 8000c7c:	10210000 	.word	0x10210000
 8000c80:	10120000 	.word	0x10120000
 8000c84:	10110000 	.word	0x10110000
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	40010800 	.word	0x40010800
 8000c94:	40010c00 	.word	0x40010c00
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	40011400 	.word	0x40011400
 8000ca0:	40011800 	.word	0x40011800
 8000ca4:	40011c00 	.word	0x40011c00
 8000ca8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <HAL_GPIO_Init+0x324>)
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	4913      	ldr	r1, [pc, #76]	@ (8000d04 <HAL_GPIO_Init+0x324>)
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d006      	beq.n	8000cd4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_GPIO_Init+0x324>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	490e      	ldr	r1, [pc, #56]	@ (8000d04 <HAL_GPIO_Init+0x324>)
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	600b      	str	r3, [r1, #0]
 8000cd2:	e006      	b.n	8000ce2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <HAL_GPIO_Init+0x324>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	4909      	ldr	r1, [pc, #36]	@ (8000d04 <HAL_GPIO_Init+0x324>)
 8000cde:	4013      	ands	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cee:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f47f ae7e 	bne.w	80009f4 <HAL_GPIO_Init+0x14>
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	372c      	adds	r7, #44	@ 0x2c
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e001      	b.n	8000d2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
	...

08000d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d42:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d44:	695a      	ldr	r2, [r3, #20]
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d006      	beq.n	8000d5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fbb6 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40010400 	.word	0x40010400

08000d68 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e036      	b.n	8000de8 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8000d82:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000d8c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	6852      	ldr	r2, [r2, #4]
 8000d96:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6892      	ldr	r2, [r2, #8]
 8000da0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000da2:	f7ff fce1 	bl	8000768 <HAL_GetTick>
 8000da6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000da8:	e011      	b.n	8000dce <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000daa:	f7ff fcdd 	bl	8000768 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	f241 323c 	movw	r2, #4924	@ 0x133c
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d908      	bls.n	8000dce <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e00c      	b.n	8000de8 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e6      	bne.n	8000daa <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000de4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000e00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
	...

08000e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e272      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 8087 	beq.w	8000f3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e30:	4b92      	ldr	r3, [pc, #584]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 030c 	and.w	r3, r3, #12
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d00c      	beq.n	8000e56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e3c:	4b8f      	ldr	r3, [pc, #572]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 030c 	and.w	r3, r3, #12
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d112      	bne.n	8000e6e <HAL_RCC_OscConfig+0x5e>
 8000e48:	4b8c      	ldr	r3, [pc, #560]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e54:	d10b      	bne.n	8000e6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e56:	4b89      	ldr	r3, [pc, #548]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d06c      	beq.n	8000f3c <HAL_RCC_OscConfig+0x12c>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d168      	bne.n	8000f3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e24c      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e76:	d106      	bne.n	8000e86 <HAL_RCC_OscConfig+0x76>
 8000e78:	4b80      	ldr	r3, [pc, #512]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a7f      	ldr	r2, [pc, #508]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	e02e      	b.n	8000ee4 <HAL_RCC_OscConfig+0xd4>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10c      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x98>
 8000e8e:	4b7b      	ldr	r3, [pc, #492]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a7a      	ldr	r2, [pc, #488]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	4b78      	ldr	r3, [pc, #480]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a77      	ldr	r2, [pc, #476]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e01d      	b.n	8000ee4 <HAL_RCC_OscConfig+0xd4>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0xbc>
 8000eb2:	4b72      	ldr	r3, [pc, #456]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a71      	ldr	r2, [pc, #452]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a6e      	ldr	r2, [pc, #440]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e00b      	b.n	8000ee4 <HAL_RCC_OscConfig+0xd4>
 8000ecc:	4b6b      	ldr	r3, [pc, #428]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a6a      	ldr	r2, [pc, #424]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b68      	ldr	r3, [pc, #416]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a67      	ldr	r2, [pc, #412]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d013      	beq.n	8000f14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fc3c 	bl	8000768 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff fc38 	bl	8000768 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b64      	cmp	r3, #100	@ 0x64
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e200      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	4b5d      	ldr	r3, [pc, #372]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f0      	beq.n	8000ef4 <HAL_RCC_OscConfig+0xe4>
 8000f12:	e014      	b.n	8000f3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fc28 	bl	8000768 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fc24 	bl	8000768 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	@ 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e1ec      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2e:	4b53      	ldr	r3, [pc, #332]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f0      	bne.n	8000f1c <HAL_RCC_OscConfig+0x10c>
 8000f3a:	e000      	b.n	8000f3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d063      	beq.n	8001012 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00b      	beq.n	8000f6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f56:	4b49      	ldr	r3, [pc, #292]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d11c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x18c>
 8000f62:	4b46      	ldr	r3, [pc, #280]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d116      	bne.n	8000f9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6e:	4b43      	ldr	r3, [pc, #268]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d005      	beq.n	8000f86 <HAL_RCC_OscConfig+0x176>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d001      	beq.n	8000f86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e1c0      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f86:	4b3d      	ldr	r3, [pc, #244]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4939      	ldr	r1, [pc, #228]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9a:	e03a      	b.n	8001012 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d020      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa4:	4b36      	ldr	r3, [pc, #216]	@ (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000faa:	f7ff fbdd 	bl	8000768 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb2:	f7ff fbd9 	bl	8000768 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e1a1      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f0      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4927      	ldr	r1, [pc, #156]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	600b      	str	r3, [r1, #0]
 8000fe4:	e015      	b.n	8001012 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe6:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fbbc 	bl	8000768 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff4:	f7ff fbb8 	bl	8000768 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e180      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d03a      	beq.n	8001094 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d019      	beq.n	800105a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001026:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <HAL_RCC_OscConfig+0x274>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102c:	f7ff fb9c 	bl	8000768 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001034:	f7ff fb98 	bl	8000768 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e160      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001046:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f000 face 	bl	80015f4 <RCC_Delay>
 8001058:	e01c      	b.n	8001094 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_RCC_OscConfig+0x274>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001060:	f7ff fb82 	bl	8000768 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001066:	e00f      	b.n	8001088 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001068:	f7ff fb7e 	bl	8000768 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d908      	bls.n	8001088 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e146      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	42420000 	.word	0x42420000
 8001084:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001088:	4b92      	ldr	r3, [pc, #584]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1e9      	bne.n	8001068 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80a6 	beq.w	80011ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a6:	4b8b      	ldr	r3, [pc, #556]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10d      	bne.n	80010ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b88      	ldr	r3, [pc, #544]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a87      	ldr	r2, [pc, #540]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010bc:	61d3      	str	r3, [r2, #28]
 80010be:	4b85      	ldr	r3, [pc, #532]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ca:	2301      	movs	r3, #1
 80010cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ce:	4b82      	ldr	r3, [pc, #520]	@ (80012d8 <HAL_RCC_OscConfig+0x4c8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d118      	bne.n	800110c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010da:	4b7f      	ldr	r3, [pc, #508]	@ (80012d8 <HAL_RCC_OscConfig+0x4c8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a7e      	ldr	r2, [pc, #504]	@ (80012d8 <HAL_RCC_OscConfig+0x4c8>)
 80010e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fb3f 	bl	8000768 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ee:	f7ff fb3b 	bl	8000768 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b64      	cmp	r3, #100	@ 0x64
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e103      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001100:	4b75      	ldr	r3, [pc, #468]	@ (80012d8 <HAL_RCC_OscConfig+0x4c8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d106      	bne.n	8001122 <HAL_RCC_OscConfig+0x312>
 8001114:	4b6f      	ldr	r3, [pc, #444]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4a6e      	ldr	r2, [pc, #440]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6213      	str	r3, [r2, #32]
 8001120:	e02d      	b.n	800117e <HAL_RCC_OscConfig+0x36e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x334>
 800112a:	4b6a      	ldr	r3, [pc, #424]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	4a69      	ldr	r2, [pc, #420]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	6213      	str	r3, [r2, #32]
 8001136:	4b67      	ldr	r3, [pc, #412]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	4a66      	ldr	r2, [pc, #408]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	f023 0304 	bic.w	r3, r3, #4
 8001140:	6213      	str	r3, [r2, #32]
 8001142:	e01c      	b.n	800117e <HAL_RCC_OscConfig+0x36e>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b05      	cmp	r3, #5
 800114a:	d10c      	bne.n	8001166 <HAL_RCC_OscConfig+0x356>
 800114c:	4b61      	ldr	r3, [pc, #388]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4a60      	ldr	r2, [pc, #384]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6213      	str	r3, [r2, #32]
 8001158:	4b5e      	ldr	r3, [pc, #376]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a5d      	ldr	r2, [pc, #372]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6213      	str	r3, [r2, #32]
 8001164:	e00b      	b.n	800117e <HAL_RCC_OscConfig+0x36e>
 8001166:	4b5b      	ldr	r3, [pc, #364]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4a5a      	ldr	r2, [pc, #360]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	f023 0301 	bic.w	r3, r3, #1
 8001170:	6213      	str	r3, [r2, #32]
 8001172:	4b58      	ldr	r3, [pc, #352]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	4a57      	ldr	r2, [pc, #348]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	f023 0304 	bic.w	r3, r3, #4
 800117c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d015      	beq.n	80011b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff faef 	bl	8000768 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118e:	f7ff faeb 	bl	8000768 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e0b1      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a4:	4b4b      	ldr	r3, [pc, #300]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0ee      	beq.n	800118e <HAL_RCC_OscConfig+0x37e>
 80011b0:	e014      	b.n	80011dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fad9 	bl	8000768 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ba:	f7ff fad5 	bl	8000768 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e09b      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d0:	4b40      	ldr	r3, [pc, #256]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1ee      	bne.n	80011ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d105      	bne.n	80011ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e2:	4b3c      	ldr	r3, [pc, #240]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a3b      	ldr	r2, [pc, #236]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8087 	beq.w	8001306 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f8:	4b36      	ldr	r3, [pc, #216]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b08      	cmp	r3, #8
 8001202:	d061      	beq.n	80012c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d146      	bne.n	800129a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800120c:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <HAL_RCC_OscConfig+0x4cc>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001212:	f7ff faa9 	bl	8000768 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121a:	f7ff faa5 	bl	8000768 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e06d      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122c:	4b29      	ldr	r3, [pc, #164]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f0      	bne.n	800121a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001240:	d108      	bne.n	8001254 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001242:	4b24      	ldr	r3, [pc, #144]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	4921      	ldr	r1, [pc, #132]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a19      	ldr	r1, [r3, #32]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001264:	430b      	orrs	r3, r1
 8001266:	491b      	ldr	r1, [pc, #108]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_RCC_OscConfig+0x4cc>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fa79 	bl	8000768 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff fa75 	bl	8000768 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e03d      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x46a>
 8001298:	e035      	b.n	8001306 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <HAL_RCC_OscConfig+0x4cc>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fa62 	bl	8000768 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a8:	f7ff fa5e 	bl	8000768 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e026      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x498>
 80012c6:	e01e      	b.n	8001306 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d107      	bne.n	80012e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e019      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40007000 	.word	0x40007000
 80012dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_RCC_OscConfig+0x500>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fe:	429a      	cmp	r2, r3
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0d0      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001328:	4b6a      	ldr	r3, [pc, #424]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d910      	bls.n	8001358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b67      	ldr	r3, [pc, #412]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 0207 	bic.w	r2, r3, #7
 800133e:	4965      	ldr	r1, [pc, #404]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	4b63      	ldr	r3, [pc, #396]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e0b8      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001370:	4b59      	ldr	r3, [pc, #356]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a58      	ldr	r2, [pc, #352]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800137a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001388:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a52      	ldr	r2, [pc, #328]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001392:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001394:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	494d      	ldr	r1, [pc, #308]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d040      	beq.n	8001434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d115      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e07f      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d2:	4b41      	ldr	r3, [pc, #260]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e073      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e2:	4b3d      	ldr	r3, [pc, #244]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e06b      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f2:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f023 0203 	bic.w	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4936      	ldr	r1, [pc, #216]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001404:	f7ff f9b0 	bl	8000768 <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140a:	e00a      	b.n	8001422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140c:	f7ff f9ac 	bl	8000768 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e053      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 020c 	and.w	r2, r3, #12
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	429a      	cmp	r2, r3
 8001432:	d1eb      	bne.n	800140c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001434:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d210      	bcs.n	8001464 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 0207 	bic.w	r2, r3, #7
 800144a:	4922      	ldr	r1, [pc, #136]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e032      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4916      	ldr	r1, [pc, #88]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	490e      	ldr	r1, [pc, #56]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014a2:	f000 f821 	bl	80014e8 <HAL_RCC_GetSysClockFreq>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	490a      	ldr	r1, [pc, #40]	@ (80014dc <HAL_RCC_ClockConfig+0x1c8>)
 80014b4:	5ccb      	ldrb	r3, [r1, r3]
 80014b6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ba:	4a09      	ldr	r2, [pc, #36]	@ (80014e0 <HAL_RCC_ClockConfig+0x1cc>)
 80014bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_RCC_ClockConfig+0x1d0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f90e 	bl	80006e4 <HAL_InitTick>

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40022000 	.word	0x40022000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	08002408 	.word	0x08002408
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001502:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <HAL_RCC_GetSysClockFreq+0x94>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b04      	cmp	r3, #4
 8001510:	d002      	beq.n	8001518 <HAL_RCC_GetSysClockFreq+0x30>
 8001512:	2b08      	cmp	r3, #8
 8001514:	d003      	beq.n	800151e <HAL_RCC_GetSysClockFreq+0x36>
 8001516:	e027      	b.n	8001568 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001518:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <HAL_RCC_GetSysClockFreq+0x98>)
 800151a:	613b      	str	r3, [r7, #16]
      break;
 800151c:	e027      	b.n	800156e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	0c9b      	lsrs	r3, r3, #18
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001528:	5cd3      	ldrb	r3, [r2, r3]
 800152a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d010      	beq.n	8001558 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <HAL_RCC_GetSysClockFreq+0x94>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	0c5b      	lsrs	r3, r3, #17
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	4a11      	ldr	r2, [pc, #68]	@ (8001588 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a0d      	ldr	r2, [pc, #52]	@ (8001580 <HAL_RCC_GetSysClockFreq+0x98>)
 800154a:	fb03 f202 	mul.w	r2, r3, r2
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	fbb2 f3f3 	udiv	r3, r2, r3
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e004      	b.n	8001562 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a0c      	ldr	r2, [pc, #48]	@ (800158c <HAL_RCC_GetSysClockFreq+0xa4>)
 800155c:	fb02 f303 	mul.w	r3, r2, r3
 8001560:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	613b      	str	r3, [r7, #16]
      break;
 8001566:	e002      	b.n	800156e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <HAL_RCC_GetSysClockFreq+0x98>)
 800156a:	613b      	str	r3, [r7, #16]
      break;
 800156c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800156e:	693b      	ldr	r3, [r7, #16]
}
 8001570:	4618      	mov	r0, r3
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	007a1200 	.word	0x007a1200
 8001584:	08002420 	.word	0x08002420
 8001588:	08002430 	.word	0x08002430
 800158c:	003d0900 	.word	0x003d0900

08001590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001594:	4b02      	ldr	r3, [pc, #8]	@ (80015a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	20000000 	.word	0x20000000

080015a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015a8:	f7ff fff2 	bl	8001590 <HAL_RCC_GetHCLKFreq>
 80015ac:	4602      	mov	r2, r0
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	0a1b      	lsrs	r3, r3, #8
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	4903      	ldr	r1, [pc, #12]	@ (80015c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ba:	5ccb      	ldrb	r3, [r1, r3]
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	08002418 	.word	0x08002418

080015cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015d0:	f7ff ffde 	bl	8001590 <HAL_RCC_GetHCLKFreq>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	0adb      	lsrs	r3, r3, #11
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	4903      	ldr	r1, [pc, #12]	@ (80015f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015e2:	5ccb      	ldrb	r3, [r1, r3]
 80015e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	08002418 	.word	0x08002418

080015f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <RCC_Delay+0x34>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <RCC_Delay+0x38>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	0a5b      	lsrs	r3, r3, #9
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001610:	bf00      	nop
  }
  while (Delay --);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1e5a      	subs	r2, r3, #1
 8001616:	60fa      	str	r2, [r7, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f9      	bne.n	8001610 <RCC_Delay+0x1c>
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000000 	.word	0x20000000
 800162c:	10624dd3 	.word	0x10624dd3

08001630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e042      	b.n	80016c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d106      	bne.n	800165c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7fe ffbc 	bl	80005d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2224      	movs	r2, #36	@ 0x24
 8001660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f971 	bl	800195c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	695a      	ldr	r2, [r3, #20]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80016a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2220      	movs	r2, #32
 80016b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2220      	movs	r2, #32
 80016bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	@ 0x28
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b20      	cmp	r3, #32
 80016ee:	d175      	bne.n	80017dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <HAL_UART_Transmit+0x2c>
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e06e      	b.n	80017de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2221      	movs	r2, #33	@ 0x21
 800170a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800170e:	f7ff f82b 	bl	8000768 <HAL_GetTick>
 8001712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	88fa      	ldrh	r2, [r7, #6]
 800171e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001728:	d108      	bne.n	800173c <HAL_UART_Transmit+0x6c>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d104      	bne.n	800173c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	e003      	b.n	8001744 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001744:	e02e      	b.n	80017a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2200      	movs	r2, #0
 800174e:	2180      	movs	r1, #128	@ 0x80
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f848 	bl	80017e6 <UART_WaitOnFlagUntilTimeout>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2220      	movs	r2, #32
 8001760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e03a      	b.n	80017de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10b      	bne.n	8001786 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800177c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	3302      	adds	r3, #2
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	e007      	b.n	8001796 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	3301      	adds	r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800179a:	b29b      	uxth	r3, r3
 800179c:	3b01      	subs	r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1cb      	bne.n	8001746 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2200      	movs	r2, #0
 80017b6:	2140      	movs	r1, #64	@ 0x40
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f814 	bl	80017e6 <UART_WaitOnFlagUntilTimeout>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2220      	movs	r2, #32
 80017c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e006      	b.n	80017de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2220      	movs	r2, #32
 80017d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	e000      	b.n	80017de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
  }
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3720      	adds	r7, #32
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017f6:	e03b      	b.n	8001870 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fe:	d037      	beq.n	8001870 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001800:	f7fe ffb2 	bl	8000768 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	6a3a      	ldr	r2, [r7, #32]
 800180c:	429a      	cmp	r2, r3
 800180e:	d302      	bcc.n	8001816 <UART_WaitOnFlagUntilTimeout+0x30>
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e03a      	b.n	8001890 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d023      	beq.n	8001870 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b80      	cmp	r3, #128	@ 0x80
 800182c:	d020      	beq.n	8001870 <UART_WaitOnFlagUntilTimeout+0x8a>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b40      	cmp	r3, #64	@ 0x40
 8001832:	d01d      	beq.n	8001870 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b08      	cmp	r3, #8
 8001840:	d116      	bne.n	8001870 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f81d 	bl	8001898 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2208      	movs	r2, #8
 8001862:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e00f      	b.n	8001890 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	4013      	ands	r3, r2
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	429a      	cmp	r2, r3
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	429a      	cmp	r2, r3
 800188c:	d0b4      	beq.n	80017f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001898:	b480      	push	{r7}
 800189a:	b095      	sub	sp, #84	@ 0x54
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	330c      	adds	r3, #12
 80018a6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018aa:	e853 3f00 	ldrex	r3, [r3]
 80018ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80018b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80018b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	330c      	adds	r3, #12
 80018be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80018c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80018c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80018c8:	e841 2300 	strex	r3, r2, [r1]
 80018cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80018ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1e5      	bne.n	80018a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3314      	adds	r3, #20
 80018da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	e853 3f00 	ldrex	r3, [r3]
 80018e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3314      	adds	r3, #20
 80018f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018fc:	e841 2300 	strex	r3, r2, [r1]
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e5      	bne.n	80018d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190c:	2b01      	cmp	r3, #1
 800190e:	d119      	bne.n	8001944 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	330c      	adds	r3, #12
 8001916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	e853 3f00 	ldrex	r3, [r3]
 800191e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f023 0310 	bic.w	r3, r3, #16
 8001926:	647b      	str	r3, [r7, #68]	@ 0x44
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	330c      	adds	r3, #12
 800192e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001930:	61ba      	str	r2, [r7, #24]
 8001932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001934:	6979      	ldr	r1, [r7, #20]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	e841 2300 	strex	r3, r2, [r1]
 800193c:	613b      	str	r3, [r7, #16]
   return(result);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1e5      	bne.n	8001910 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2220      	movs	r2, #32
 8001948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001952:	bf00      	nop
 8001954:	3754      	adds	r7, #84	@ 0x54
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	4313      	orrs	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001996:	f023 030c 	bic.w	r3, r3, #12
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699a      	ldr	r2, [r3, #24]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2c      	ldr	r2, [pc, #176]	@ (8001a70 <UART_SetConfig+0x114>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d103      	bne.n	80019cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019c4:	f7ff fe02 	bl	80015cc <HAL_RCC_GetPCLK2Freq>
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	e002      	b.n	80019d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019cc:	f7ff fdea 	bl	80015a4 <HAL_RCC_GetPCLK1Freq>
 80019d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	009a      	lsls	r2, r3, #2
 80019dc:	441a      	add	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e8:	4a22      	ldr	r2, [pc, #136]	@ (8001a74 <UART_SetConfig+0x118>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	0119      	lsls	r1, r3, #4
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	009a      	lsls	r2, r3, #2
 80019fc:	441a      	add	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a08:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <UART_SetConfig+0x118>)
 8001a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2064      	movs	r0, #100	@ 0x64
 8001a12:	fb00 f303 	mul.w	r3, r0, r3
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	3332      	adds	r3, #50	@ 0x32
 8001a1c:	4a15      	ldr	r2, [pc, #84]	@ (8001a74 <UART_SetConfig+0x118>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a28:	4419      	add	r1, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	009a      	lsls	r2, r3, #2
 8001a34:	441a      	add	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <UART_SetConfig+0x118>)
 8001a42:	fba3 0302 	umull	r0, r3, r3, r2
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2064      	movs	r0, #100	@ 0x64
 8001a4a:	fb00 f303 	mul.w	r3, r0, r3
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	3332      	adds	r3, #50	@ 0x32
 8001a54:	4a07      	ldr	r2, [pc, #28]	@ (8001a74 <UART_SetConfig+0x118>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	f003 020f 	and.w	r2, r3, #15
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	440a      	add	r2, r1
 8001a66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40013800 	.word	0x40013800
 8001a74:	51eb851f 	.word	0x51eb851f

08001a78 <siprintf>:
 8001a78:	b40e      	push	{r1, r2, r3}
 8001a7a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001a7e:	b500      	push	{lr}
 8001a80:	b09c      	sub	sp, #112	@ 0x70
 8001a82:	ab1d      	add	r3, sp, #116	@ 0x74
 8001a84:	9002      	str	r0, [sp, #8]
 8001a86:	9006      	str	r0, [sp, #24]
 8001a88:	9107      	str	r1, [sp, #28]
 8001a8a:	9104      	str	r1, [sp, #16]
 8001a8c:	4808      	ldr	r0, [pc, #32]	@ (8001ab0 <siprintf+0x38>)
 8001a8e:	4909      	ldr	r1, [pc, #36]	@ (8001ab4 <siprintf+0x3c>)
 8001a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a94:	9105      	str	r1, [sp, #20]
 8001a96:	6800      	ldr	r0, [r0, #0]
 8001a98:	a902      	add	r1, sp, #8
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	f000 f992 	bl	8001dc4 <_svfiprintf_r>
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	9b02      	ldr	r3, [sp, #8]
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	b01c      	add	sp, #112	@ 0x70
 8001aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001aac:	b003      	add	sp, #12
 8001aae:	4770      	bx	lr
 8001ab0:	2000000c 	.word	0x2000000c
 8001ab4:	ffff0208 	.word	0xffff0208

08001ab8 <memset>:
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4402      	add	r2, r0
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d100      	bne.n	8001ac2 <memset+0xa>
 8001ac0:	4770      	bx	lr
 8001ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ac6:	e7f9      	b.n	8001abc <memset+0x4>

08001ac8 <__errno>:
 8001ac8:	4b01      	ldr	r3, [pc, #4]	@ (8001ad0 <__errno+0x8>)
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2000000c 	.word	0x2000000c

08001ad4 <__libc_init_array>:
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	2600      	movs	r6, #0
 8001ad8:	4d0c      	ldr	r5, [pc, #48]	@ (8001b0c <__libc_init_array+0x38>)
 8001ada:	4c0d      	ldr	r4, [pc, #52]	@ (8001b10 <__libc_init_array+0x3c>)
 8001adc:	1b64      	subs	r4, r4, r5
 8001ade:	10a4      	asrs	r4, r4, #2
 8001ae0:	42a6      	cmp	r6, r4
 8001ae2:	d109      	bne.n	8001af8 <__libc_init_array+0x24>
 8001ae4:	f000 fc78 	bl	80023d8 <_init>
 8001ae8:	2600      	movs	r6, #0
 8001aea:	4d0a      	ldr	r5, [pc, #40]	@ (8001b14 <__libc_init_array+0x40>)
 8001aec:	4c0a      	ldr	r4, [pc, #40]	@ (8001b18 <__libc_init_array+0x44>)
 8001aee:	1b64      	subs	r4, r4, r5
 8001af0:	10a4      	asrs	r4, r4, #2
 8001af2:	42a6      	cmp	r6, r4
 8001af4:	d105      	bne.n	8001b02 <__libc_init_array+0x2e>
 8001af6:	bd70      	pop	{r4, r5, r6, pc}
 8001af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001afc:	4798      	blx	r3
 8001afe:	3601      	adds	r6, #1
 8001b00:	e7ee      	b.n	8001ae0 <__libc_init_array+0xc>
 8001b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b06:	4798      	blx	r3
 8001b08:	3601      	adds	r6, #1
 8001b0a:	e7f2      	b.n	8001af2 <__libc_init_array+0x1e>
 8001b0c:	08002470 	.word	0x08002470
 8001b10:	08002470 	.word	0x08002470
 8001b14:	08002470 	.word	0x08002470
 8001b18:	08002474 	.word	0x08002474

08001b1c <__retarget_lock_acquire_recursive>:
 8001b1c:	4770      	bx	lr

08001b1e <__retarget_lock_release_recursive>:
 8001b1e:	4770      	bx	lr

08001b20 <_free_r>:
 8001b20:	b538      	push	{r3, r4, r5, lr}
 8001b22:	4605      	mov	r5, r0
 8001b24:	2900      	cmp	r1, #0
 8001b26:	d040      	beq.n	8001baa <_free_r+0x8a>
 8001b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b2c:	1f0c      	subs	r4, r1, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bfb8      	it	lt
 8001b32:	18e4      	addlt	r4, r4, r3
 8001b34:	f000 f8de 	bl	8001cf4 <__malloc_lock>
 8001b38:	4a1c      	ldr	r2, [pc, #112]	@ (8001bac <_free_r+0x8c>)
 8001b3a:	6813      	ldr	r3, [r2, #0]
 8001b3c:	b933      	cbnz	r3, 8001b4c <_free_r+0x2c>
 8001b3e:	6063      	str	r3, [r4, #4]
 8001b40:	6014      	str	r4, [r2, #0]
 8001b42:	4628      	mov	r0, r5
 8001b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b48:	f000 b8da 	b.w	8001d00 <__malloc_unlock>
 8001b4c:	42a3      	cmp	r3, r4
 8001b4e:	d908      	bls.n	8001b62 <_free_r+0x42>
 8001b50:	6820      	ldr	r0, [r4, #0]
 8001b52:	1821      	adds	r1, r4, r0
 8001b54:	428b      	cmp	r3, r1
 8001b56:	bf01      	itttt	eq
 8001b58:	6819      	ldreq	r1, [r3, #0]
 8001b5a:	685b      	ldreq	r3, [r3, #4]
 8001b5c:	1809      	addeq	r1, r1, r0
 8001b5e:	6021      	streq	r1, [r4, #0]
 8001b60:	e7ed      	b.n	8001b3e <_free_r+0x1e>
 8001b62:	461a      	mov	r2, r3
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	b10b      	cbz	r3, 8001b6c <_free_r+0x4c>
 8001b68:	42a3      	cmp	r3, r4
 8001b6a:	d9fa      	bls.n	8001b62 <_free_r+0x42>
 8001b6c:	6811      	ldr	r1, [r2, #0]
 8001b6e:	1850      	adds	r0, r2, r1
 8001b70:	42a0      	cmp	r0, r4
 8001b72:	d10b      	bne.n	8001b8c <_free_r+0x6c>
 8001b74:	6820      	ldr	r0, [r4, #0]
 8001b76:	4401      	add	r1, r0
 8001b78:	1850      	adds	r0, r2, r1
 8001b7a:	4283      	cmp	r3, r0
 8001b7c:	6011      	str	r1, [r2, #0]
 8001b7e:	d1e0      	bne.n	8001b42 <_free_r+0x22>
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4408      	add	r0, r1
 8001b86:	6010      	str	r0, [r2, #0]
 8001b88:	6053      	str	r3, [r2, #4]
 8001b8a:	e7da      	b.n	8001b42 <_free_r+0x22>
 8001b8c:	d902      	bls.n	8001b94 <_free_r+0x74>
 8001b8e:	230c      	movs	r3, #12
 8001b90:	602b      	str	r3, [r5, #0]
 8001b92:	e7d6      	b.n	8001b42 <_free_r+0x22>
 8001b94:	6820      	ldr	r0, [r4, #0]
 8001b96:	1821      	adds	r1, r4, r0
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	bf01      	itttt	eq
 8001b9c:	6819      	ldreq	r1, [r3, #0]
 8001b9e:	685b      	ldreq	r3, [r3, #4]
 8001ba0:	1809      	addeq	r1, r1, r0
 8001ba2:	6021      	streq	r1, [r4, #0]
 8001ba4:	6063      	str	r3, [r4, #4]
 8001ba6:	6054      	str	r4, [r2, #4]
 8001ba8:	e7cb      	b.n	8001b42 <_free_r+0x22>
 8001baa:	bd38      	pop	{r3, r4, r5, pc}
 8001bac:	20000218 	.word	0x20000218

08001bb0 <sbrk_aligned>:
 8001bb0:	b570      	push	{r4, r5, r6, lr}
 8001bb2:	4e0f      	ldr	r6, [pc, #60]	@ (8001bf0 <sbrk_aligned+0x40>)
 8001bb4:	460c      	mov	r4, r1
 8001bb6:	6831      	ldr	r1, [r6, #0]
 8001bb8:	4605      	mov	r5, r0
 8001bba:	b911      	cbnz	r1, 8001bc2 <sbrk_aligned+0x12>
 8001bbc:	f000 fbaa 	bl	8002314 <_sbrk_r>
 8001bc0:	6030      	str	r0, [r6, #0]
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	f000 fba5 	bl	8002314 <_sbrk_r>
 8001bca:	1c43      	adds	r3, r0, #1
 8001bcc:	d103      	bne.n	8001bd6 <sbrk_aligned+0x26>
 8001bce:	f04f 34ff 	mov.w	r4, #4294967295
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	bd70      	pop	{r4, r5, r6, pc}
 8001bd6:	1cc4      	adds	r4, r0, #3
 8001bd8:	f024 0403 	bic.w	r4, r4, #3
 8001bdc:	42a0      	cmp	r0, r4
 8001bde:	d0f8      	beq.n	8001bd2 <sbrk_aligned+0x22>
 8001be0:	1a21      	subs	r1, r4, r0
 8001be2:	4628      	mov	r0, r5
 8001be4:	f000 fb96 	bl	8002314 <_sbrk_r>
 8001be8:	3001      	adds	r0, #1
 8001bea:	d1f2      	bne.n	8001bd2 <sbrk_aligned+0x22>
 8001bec:	e7ef      	b.n	8001bce <sbrk_aligned+0x1e>
 8001bee:	bf00      	nop
 8001bf0:	20000214 	.word	0x20000214

08001bf4 <_malloc_r>:
 8001bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bf8:	1ccd      	adds	r5, r1, #3
 8001bfa:	f025 0503 	bic.w	r5, r5, #3
 8001bfe:	3508      	adds	r5, #8
 8001c00:	2d0c      	cmp	r5, #12
 8001c02:	bf38      	it	cc
 8001c04:	250c      	movcc	r5, #12
 8001c06:	2d00      	cmp	r5, #0
 8001c08:	4606      	mov	r6, r0
 8001c0a:	db01      	blt.n	8001c10 <_malloc_r+0x1c>
 8001c0c:	42a9      	cmp	r1, r5
 8001c0e:	d904      	bls.n	8001c1a <_malloc_r+0x26>
 8001c10:	230c      	movs	r3, #12
 8001c12:	6033      	str	r3, [r6, #0]
 8001c14:	2000      	movs	r0, #0
 8001c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001cf0 <_malloc_r+0xfc>
 8001c1e:	f000 f869 	bl	8001cf4 <__malloc_lock>
 8001c22:	f8d8 3000 	ldr.w	r3, [r8]
 8001c26:	461c      	mov	r4, r3
 8001c28:	bb44      	cbnz	r4, 8001c7c <_malloc_r+0x88>
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	4630      	mov	r0, r6
 8001c2e:	f7ff ffbf 	bl	8001bb0 <sbrk_aligned>
 8001c32:	1c43      	adds	r3, r0, #1
 8001c34:	4604      	mov	r4, r0
 8001c36:	d158      	bne.n	8001cea <_malloc_r+0xf6>
 8001c38:	f8d8 4000 	ldr.w	r4, [r8]
 8001c3c:	4627      	mov	r7, r4
 8001c3e:	2f00      	cmp	r7, #0
 8001c40:	d143      	bne.n	8001cca <_malloc_r+0xd6>
 8001c42:	2c00      	cmp	r4, #0
 8001c44:	d04b      	beq.n	8001cde <_malloc_r+0xea>
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	4639      	mov	r1, r7
 8001c4a:	4630      	mov	r0, r6
 8001c4c:	eb04 0903 	add.w	r9, r4, r3
 8001c50:	f000 fb60 	bl	8002314 <_sbrk_r>
 8001c54:	4581      	cmp	r9, r0
 8001c56:	d142      	bne.n	8001cde <_malloc_r+0xea>
 8001c58:	6821      	ldr	r1, [r4, #0]
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	1a6d      	subs	r5, r5, r1
 8001c5e:	4629      	mov	r1, r5
 8001c60:	f7ff ffa6 	bl	8001bb0 <sbrk_aligned>
 8001c64:	3001      	adds	r0, #1
 8001c66:	d03a      	beq.n	8001cde <_malloc_r+0xea>
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	442b      	add	r3, r5
 8001c6c:	6023      	str	r3, [r4, #0]
 8001c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	bb62      	cbnz	r2, 8001cd0 <_malloc_r+0xdc>
 8001c76:	f8c8 7000 	str.w	r7, [r8]
 8001c7a:	e00f      	b.n	8001c9c <_malloc_r+0xa8>
 8001c7c:	6822      	ldr	r2, [r4, #0]
 8001c7e:	1b52      	subs	r2, r2, r5
 8001c80:	d420      	bmi.n	8001cc4 <_malloc_r+0xd0>
 8001c82:	2a0b      	cmp	r2, #11
 8001c84:	d917      	bls.n	8001cb6 <_malloc_r+0xc2>
 8001c86:	1961      	adds	r1, r4, r5
 8001c88:	42a3      	cmp	r3, r4
 8001c8a:	6025      	str	r5, [r4, #0]
 8001c8c:	bf18      	it	ne
 8001c8e:	6059      	strne	r1, [r3, #4]
 8001c90:	6863      	ldr	r3, [r4, #4]
 8001c92:	bf08      	it	eq
 8001c94:	f8c8 1000 	streq.w	r1, [r8]
 8001c98:	5162      	str	r2, [r4, r5]
 8001c9a:	604b      	str	r3, [r1, #4]
 8001c9c:	4630      	mov	r0, r6
 8001c9e:	f000 f82f 	bl	8001d00 <__malloc_unlock>
 8001ca2:	f104 000b 	add.w	r0, r4, #11
 8001ca6:	1d23      	adds	r3, r4, #4
 8001ca8:	f020 0007 	bic.w	r0, r0, #7
 8001cac:	1ac2      	subs	r2, r0, r3
 8001cae:	bf1c      	itt	ne
 8001cb0:	1a1b      	subne	r3, r3, r0
 8001cb2:	50a3      	strne	r3, [r4, r2]
 8001cb4:	e7af      	b.n	8001c16 <_malloc_r+0x22>
 8001cb6:	6862      	ldr	r2, [r4, #4]
 8001cb8:	42a3      	cmp	r3, r4
 8001cba:	bf0c      	ite	eq
 8001cbc:	f8c8 2000 	streq.w	r2, [r8]
 8001cc0:	605a      	strne	r2, [r3, #4]
 8001cc2:	e7eb      	b.n	8001c9c <_malloc_r+0xa8>
 8001cc4:	4623      	mov	r3, r4
 8001cc6:	6864      	ldr	r4, [r4, #4]
 8001cc8:	e7ae      	b.n	8001c28 <_malloc_r+0x34>
 8001cca:	463c      	mov	r4, r7
 8001ccc:	687f      	ldr	r7, [r7, #4]
 8001cce:	e7b6      	b.n	8001c3e <_malloc_r+0x4a>
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	42a3      	cmp	r3, r4
 8001cd6:	d1fb      	bne.n	8001cd0 <_malloc_r+0xdc>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6053      	str	r3, [r2, #4]
 8001cdc:	e7de      	b.n	8001c9c <_malloc_r+0xa8>
 8001cde:	230c      	movs	r3, #12
 8001ce0:	4630      	mov	r0, r6
 8001ce2:	6033      	str	r3, [r6, #0]
 8001ce4:	f000 f80c 	bl	8001d00 <__malloc_unlock>
 8001ce8:	e794      	b.n	8001c14 <_malloc_r+0x20>
 8001cea:	6005      	str	r5, [r0, #0]
 8001cec:	e7d6      	b.n	8001c9c <_malloc_r+0xa8>
 8001cee:	bf00      	nop
 8001cf0:	20000218 	.word	0x20000218

08001cf4 <__malloc_lock>:
 8001cf4:	4801      	ldr	r0, [pc, #4]	@ (8001cfc <__malloc_lock+0x8>)
 8001cf6:	f7ff bf11 	b.w	8001b1c <__retarget_lock_acquire_recursive>
 8001cfa:	bf00      	nop
 8001cfc:	20000210 	.word	0x20000210

08001d00 <__malloc_unlock>:
 8001d00:	4801      	ldr	r0, [pc, #4]	@ (8001d08 <__malloc_unlock+0x8>)
 8001d02:	f7ff bf0c 	b.w	8001b1e <__retarget_lock_release_recursive>
 8001d06:	bf00      	nop
 8001d08:	20000210 	.word	0x20000210

08001d0c <__ssputs_r>:
 8001d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d10:	461f      	mov	r7, r3
 8001d12:	688e      	ldr	r6, [r1, #8]
 8001d14:	4682      	mov	sl, r0
 8001d16:	42be      	cmp	r6, r7
 8001d18:	460c      	mov	r4, r1
 8001d1a:	4690      	mov	r8, r2
 8001d1c:	680b      	ldr	r3, [r1, #0]
 8001d1e:	d82d      	bhi.n	8001d7c <__ssputs_r+0x70>
 8001d20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001d24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001d28:	d026      	beq.n	8001d78 <__ssputs_r+0x6c>
 8001d2a:	6965      	ldr	r5, [r4, #20]
 8001d2c:	6909      	ldr	r1, [r1, #16]
 8001d2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001d32:	eba3 0901 	sub.w	r9, r3, r1
 8001d36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001d3a:	1c7b      	adds	r3, r7, #1
 8001d3c:	444b      	add	r3, r9
 8001d3e:	106d      	asrs	r5, r5, #1
 8001d40:	429d      	cmp	r5, r3
 8001d42:	bf38      	it	cc
 8001d44:	461d      	movcc	r5, r3
 8001d46:	0553      	lsls	r3, r2, #21
 8001d48:	d527      	bpl.n	8001d9a <__ssputs_r+0x8e>
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	f7ff ff52 	bl	8001bf4 <_malloc_r>
 8001d50:	4606      	mov	r6, r0
 8001d52:	b360      	cbz	r0, 8001dae <__ssputs_r+0xa2>
 8001d54:	464a      	mov	r2, r9
 8001d56:	6921      	ldr	r1, [r4, #16]
 8001d58:	f000 fafa 	bl	8002350 <memcpy>
 8001d5c:	89a3      	ldrh	r3, [r4, #12]
 8001d5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d66:	81a3      	strh	r3, [r4, #12]
 8001d68:	6126      	str	r6, [r4, #16]
 8001d6a:	444e      	add	r6, r9
 8001d6c:	6026      	str	r6, [r4, #0]
 8001d6e:	463e      	mov	r6, r7
 8001d70:	6165      	str	r5, [r4, #20]
 8001d72:	eba5 0509 	sub.w	r5, r5, r9
 8001d76:	60a5      	str	r5, [r4, #8]
 8001d78:	42be      	cmp	r6, r7
 8001d7a:	d900      	bls.n	8001d7e <__ssputs_r+0x72>
 8001d7c:	463e      	mov	r6, r7
 8001d7e:	4632      	mov	r2, r6
 8001d80:	4641      	mov	r1, r8
 8001d82:	6820      	ldr	r0, [r4, #0]
 8001d84:	f000 faac 	bl	80022e0 <memmove>
 8001d88:	2000      	movs	r0, #0
 8001d8a:	68a3      	ldr	r3, [r4, #8]
 8001d8c:	1b9b      	subs	r3, r3, r6
 8001d8e:	60a3      	str	r3, [r4, #8]
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	4433      	add	r3, r6
 8001d94:	6023      	str	r3, [r4, #0]
 8001d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d9a:	462a      	mov	r2, r5
 8001d9c:	f000 fae6 	bl	800236c <_realloc_r>
 8001da0:	4606      	mov	r6, r0
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d1e0      	bne.n	8001d68 <__ssputs_r+0x5c>
 8001da6:	4650      	mov	r0, sl
 8001da8:	6921      	ldr	r1, [r4, #16]
 8001daa:	f7ff feb9 	bl	8001b20 <_free_r>
 8001dae:	230c      	movs	r3, #12
 8001db0:	f8ca 3000 	str.w	r3, [sl]
 8001db4:	89a3      	ldrh	r3, [r4, #12]
 8001db6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dbe:	81a3      	strh	r3, [r4, #12]
 8001dc0:	e7e9      	b.n	8001d96 <__ssputs_r+0x8a>
	...

08001dc4 <_svfiprintf_r>:
 8001dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dc8:	4698      	mov	r8, r3
 8001dca:	898b      	ldrh	r3, [r1, #12]
 8001dcc:	4607      	mov	r7, r0
 8001dce:	061b      	lsls	r3, r3, #24
 8001dd0:	460d      	mov	r5, r1
 8001dd2:	4614      	mov	r4, r2
 8001dd4:	b09d      	sub	sp, #116	@ 0x74
 8001dd6:	d510      	bpl.n	8001dfa <_svfiprintf_r+0x36>
 8001dd8:	690b      	ldr	r3, [r1, #16]
 8001dda:	b973      	cbnz	r3, 8001dfa <_svfiprintf_r+0x36>
 8001ddc:	2140      	movs	r1, #64	@ 0x40
 8001dde:	f7ff ff09 	bl	8001bf4 <_malloc_r>
 8001de2:	6028      	str	r0, [r5, #0]
 8001de4:	6128      	str	r0, [r5, #16]
 8001de6:	b930      	cbnz	r0, 8001df6 <_svfiprintf_r+0x32>
 8001de8:	230c      	movs	r3, #12
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	b01d      	add	sp, #116	@ 0x74
 8001df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001df6:	2340      	movs	r3, #64	@ 0x40
 8001df8:	616b      	str	r3, [r5, #20]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8001dfe:	2320      	movs	r3, #32
 8001e00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001e04:	2330      	movs	r3, #48	@ 0x30
 8001e06:	f04f 0901 	mov.w	r9, #1
 8001e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e0e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001fa8 <_svfiprintf_r+0x1e4>
 8001e12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001e16:	4623      	mov	r3, r4
 8001e18:	469a      	mov	sl, r3
 8001e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e1e:	b10a      	cbz	r2, 8001e24 <_svfiprintf_r+0x60>
 8001e20:	2a25      	cmp	r2, #37	@ 0x25
 8001e22:	d1f9      	bne.n	8001e18 <_svfiprintf_r+0x54>
 8001e24:	ebba 0b04 	subs.w	fp, sl, r4
 8001e28:	d00b      	beq.n	8001e42 <_svfiprintf_r+0x7e>
 8001e2a:	465b      	mov	r3, fp
 8001e2c:	4622      	mov	r2, r4
 8001e2e:	4629      	mov	r1, r5
 8001e30:	4638      	mov	r0, r7
 8001e32:	f7ff ff6b 	bl	8001d0c <__ssputs_r>
 8001e36:	3001      	adds	r0, #1
 8001e38:	f000 80a7 	beq.w	8001f8a <_svfiprintf_r+0x1c6>
 8001e3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001e3e:	445a      	add	r2, fp
 8001e40:	9209      	str	r2, [sp, #36]	@ 0x24
 8001e42:	f89a 3000 	ldrb.w	r3, [sl]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 809f 	beq.w	8001f8a <_svfiprintf_r+0x1c6>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e56:	f10a 0a01 	add.w	sl, sl, #1
 8001e5a:	9304      	str	r3, [sp, #16]
 8001e5c:	9307      	str	r3, [sp, #28]
 8001e5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001e62:	931a      	str	r3, [sp, #104]	@ 0x68
 8001e64:	4654      	mov	r4, sl
 8001e66:	2205      	movs	r2, #5
 8001e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e6c:	484e      	ldr	r0, [pc, #312]	@ (8001fa8 <_svfiprintf_r+0x1e4>)
 8001e6e:	f000 fa61 	bl	8002334 <memchr>
 8001e72:	9a04      	ldr	r2, [sp, #16]
 8001e74:	b9d8      	cbnz	r0, 8001eae <_svfiprintf_r+0xea>
 8001e76:	06d0      	lsls	r0, r2, #27
 8001e78:	bf44      	itt	mi
 8001e7a:	2320      	movmi	r3, #32
 8001e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e80:	0711      	lsls	r1, r2, #28
 8001e82:	bf44      	itt	mi
 8001e84:	232b      	movmi	r3, #43	@ 0x2b
 8001e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8001e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e90:	d015      	beq.n	8001ebe <_svfiprintf_r+0xfa>
 8001e92:	4654      	mov	r4, sl
 8001e94:	2000      	movs	r0, #0
 8001e96:	f04f 0c0a 	mov.w	ip, #10
 8001e9a:	9a07      	ldr	r2, [sp, #28]
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ea2:	3b30      	subs	r3, #48	@ 0x30
 8001ea4:	2b09      	cmp	r3, #9
 8001ea6:	d94b      	bls.n	8001f40 <_svfiprintf_r+0x17c>
 8001ea8:	b1b0      	cbz	r0, 8001ed8 <_svfiprintf_r+0x114>
 8001eaa:	9207      	str	r2, [sp, #28]
 8001eac:	e014      	b.n	8001ed8 <_svfiprintf_r+0x114>
 8001eae:	eba0 0308 	sub.w	r3, r0, r8
 8001eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	46a2      	mov	sl, r4
 8001eba:	9304      	str	r3, [sp, #16]
 8001ebc:	e7d2      	b.n	8001e64 <_svfiprintf_r+0xa0>
 8001ebe:	9b03      	ldr	r3, [sp, #12]
 8001ec0:	1d19      	adds	r1, r3, #4
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	9103      	str	r1, [sp, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bfbb      	ittet	lt
 8001eca:	425b      	neglt	r3, r3
 8001ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8001ed0:	9307      	strge	r3, [sp, #28]
 8001ed2:	9307      	strlt	r3, [sp, #28]
 8001ed4:	bfb8      	it	lt
 8001ed6:	9204      	strlt	r2, [sp, #16]
 8001ed8:	7823      	ldrb	r3, [r4, #0]
 8001eda:	2b2e      	cmp	r3, #46	@ 0x2e
 8001edc:	d10a      	bne.n	8001ef4 <_svfiprintf_r+0x130>
 8001ede:	7863      	ldrb	r3, [r4, #1]
 8001ee0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ee2:	d132      	bne.n	8001f4a <_svfiprintf_r+0x186>
 8001ee4:	9b03      	ldr	r3, [sp, #12]
 8001ee6:	3402      	adds	r4, #2
 8001ee8:	1d1a      	adds	r2, r3, #4
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	9203      	str	r2, [sp, #12]
 8001eee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001ef2:	9305      	str	r3, [sp, #20]
 8001ef4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001fac <_svfiprintf_r+0x1e8>
 8001ef8:	2203      	movs	r2, #3
 8001efa:	4650      	mov	r0, sl
 8001efc:	7821      	ldrb	r1, [r4, #0]
 8001efe:	f000 fa19 	bl	8002334 <memchr>
 8001f02:	b138      	cbz	r0, 8001f14 <_svfiprintf_r+0x150>
 8001f04:	2240      	movs	r2, #64	@ 0x40
 8001f06:	9b04      	ldr	r3, [sp, #16]
 8001f08:	eba0 000a 	sub.w	r0, r0, sl
 8001f0c:	4082      	lsls	r2, r0
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	3401      	adds	r4, #1
 8001f12:	9304      	str	r3, [sp, #16]
 8001f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f18:	2206      	movs	r2, #6
 8001f1a:	4825      	ldr	r0, [pc, #148]	@ (8001fb0 <_svfiprintf_r+0x1ec>)
 8001f1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001f20:	f000 fa08 	bl	8002334 <memchr>
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d036      	beq.n	8001f96 <_svfiprintf_r+0x1d2>
 8001f28:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <_svfiprintf_r+0x1f0>)
 8001f2a:	bb1b      	cbnz	r3, 8001f74 <_svfiprintf_r+0x1b0>
 8001f2c:	9b03      	ldr	r3, [sp, #12]
 8001f2e:	3307      	adds	r3, #7
 8001f30:	f023 0307 	bic.w	r3, r3, #7
 8001f34:	3308      	adds	r3, #8
 8001f36:	9303      	str	r3, [sp, #12]
 8001f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f3a:	4433      	add	r3, r6
 8001f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f3e:	e76a      	b.n	8001e16 <_svfiprintf_r+0x52>
 8001f40:	460c      	mov	r4, r1
 8001f42:	2001      	movs	r0, #1
 8001f44:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f48:	e7a8      	b.n	8001e9c <_svfiprintf_r+0xd8>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f04f 0c0a 	mov.w	ip, #10
 8001f50:	4619      	mov	r1, r3
 8001f52:	3401      	adds	r4, #1
 8001f54:	9305      	str	r3, [sp, #20]
 8001f56:	4620      	mov	r0, r4
 8001f58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f5c:	3a30      	subs	r2, #48	@ 0x30
 8001f5e:	2a09      	cmp	r2, #9
 8001f60:	d903      	bls.n	8001f6a <_svfiprintf_r+0x1a6>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0c6      	beq.n	8001ef4 <_svfiprintf_r+0x130>
 8001f66:	9105      	str	r1, [sp, #20]
 8001f68:	e7c4      	b.n	8001ef4 <_svfiprintf_r+0x130>
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f72:	e7f0      	b.n	8001f56 <_svfiprintf_r+0x192>
 8001f74:	ab03      	add	r3, sp, #12
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	462a      	mov	r2, r5
 8001f7a:	4638      	mov	r0, r7
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <_svfiprintf_r+0x1f4>)
 8001f7e:	a904      	add	r1, sp, #16
 8001f80:	f3af 8000 	nop.w
 8001f84:	1c42      	adds	r2, r0, #1
 8001f86:	4606      	mov	r6, r0
 8001f88:	d1d6      	bne.n	8001f38 <_svfiprintf_r+0x174>
 8001f8a:	89ab      	ldrh	r3, [r5, #12]
 8001f8c:	065b      	lsls	r3, r3, #25
 8001f8e:	f53f af2d 	bmi.w	8001dec <_svfiprintf_r+0x28>
 8001f92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001f94:	e72c      	b.n	8001df0 <_svfiprintf_r+0x2c>
 8001f96:	ab03      	add	r3, sp, #12
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	462a      	mov	r2, r5
 8001f9c:	4638      	mov	r0, r7
 8001f9e:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <_svfiprintf_r+0x1f4>)
 8001fa0:	a904      	add	r1, sp, #16
 8001fa2:	f000 f87d 	bl	80020a0 <_printf_i>
 8001fa6:	e7ed      	b.n	8001f84 <_svfiprintf_r+0x1c0>
 8001fa8:	08002432 	.word	0x08002432
 8001fac:	08002438 	.word	0x08002438
 8001fb0:	0800243c 	.word	0x0800243c
 8001fb4:	00000000 	.word	0x00000000
 8001fb8:	08001d0d 	.word	0x08001d0d

08001fbc <_printf_common>:
 8001fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fc0:	4616      	mov	r6, r2
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	688a      	ldr	r2, [r1, #8]
 8001fc6:	690b      	ldr	r3, [r1, #16]
 8001fc8:	4607      	mov	r7, r0
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	bfb8      	it	lt
 8001fce:	4613      	movlt	r3, r2
 8001fd0:	6033      	str	r3, [r6, #0]
 8001fd2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001fdc:	b10a      	cbz	r2, 8001fe2 <_printf_common+0x26>
 8001fde:	3301      	adds	r3, #1
 8001fe0:	6033      	str	r3, [r6, #0]
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	0699      	lsls	r1, r3, #26
 8001fe6:	bf42      	ittt	mi
 8001fe8:	6833      	ldrmi	r3, [r6, #0]
 8001fea:	3302      	addmi	r3, #2
 8001fec:	6033      	strmi	r3, [r6, #0]
 8001fee:	6825      	ldr	r5, [r4, #0]
 8001ff0:	f015 0506 	ands.w	r5, r5, #6
 8001ff4:	d106      	bne.n	8002004 <_printf_common+0x48>
 8001ff6:	f104 0a19 	add.w	sl, r4, #25
 8001ffa:	68e3      	ldr	r3, [r4, #12]
 8001ffc:	6832      	ldr	r2, [r6, #0]
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	42ab      	cmp	r3, r5
 8002002:	dc2b      	bgt.n	800205c <_printf_common+0xa0>
 8002004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002008:	6822      	ldr	r2, [r4, #0]
 800200a:	3b00      	subs	r3, #0
 800200c:	bf18      	it	ne
 800200e:	2301      	movne	r3, #1
 8002010:	0692      	lsls	r2, r2, #26
 8002012:	d430      	bmi.n	8002076 <_printf_common+0xba>
 8002014:	4641      	mov	r1, r8
 8002016:	4638      	mov	r0, r7
 8002018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800201c:	47c8      	blx	r9
 800201e:	3001      	adds	r0, #1
 8002020:	d023      	beq.n	800206a <_printf_common+0xae>
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	6922      	ldr	r2, [r4, #16]
 8002026:	f003 0306 	and.w	r3, r3, #6
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf14      	ite	ne
 800202e:	2500      	movne	r5, #0
 8002030:	6833      	ldreq	r3, [r6, #0]
 8002032:	f04f 0600 	mov.w	r6, #0
 8002036:	bf08      	it	eq
 8002038:	68e5      	ldreq	r5, [r4, #12]
 800203a:	f104 041a 	add.w	r4, r4, #26
 800203e:	bf08      	it	eq
 8002040:	1aed      	subeq	r5, r5, r3
 8002042:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002046:	bf08      	it	eq
 8002048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800204c:	4293      	cmp	r3, r2
 800204e:	bfc4      	itt	gt
 8002050:	1a9b      	subgt	r3, r3, r2
 8002052:	18ed      	addgt	r5, r5, r3
 8002054:	42b5      	cmp	r5, r6
 8002056:	d11a      	bne.n	800208e <_printf_common+0xd2>
 8002058:	2000      	movs	r0, #0
 800205a:	e008      	b.n	800206e <_printf_common+0xb2>
 800205c:	2301      	movs	r3, #1
 800205e:	4652      	mov	r2, sl
 8002060:	4641      	mov	r1, r8
 8002062:	4638      	mov	r0, r7
 8002064:	47c8      	blx	r9
 8002066:	3001      	adds	r0, #1
 8002068:	d103      	bne.n	8002072 <_printf_common+0xb6>
 800206a:	f04f 30ff 	mov.w	r0, #4294967295
 800206e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002072:	3501      	adds	r5, #1
 8002074:	e7c1      	b.n	8001ffa <_printf_common+0x3e>
 8002076:	2030      	movs	r0, #48	@ 0x30
 8002078:	18e1      	adds	r1, r4, r3
 800207a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002084:	4422      	add	r2, r4
 8002086:	3302      	adds	r3, #2
 8002088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800208c:	e7c2      	b.n	8002014 <_printf_common+0x58>
 800208e:	2301      	movs	r3, #1
 8002090:	4622      	mov	r2, r4
 8002092:	4641      	mov	r1, r8
 8002094:	4638      	mov	r0, r7
 8002096:	47c8      	blx	r9
 8002098:	3001      	adds	r0, #1
 800209a:	d0e6      	beq.n	800206a <_printf_common+0xae>
 800209c:	3601      	adds	r6, #1
 800209e:	e7d9      	b.n	8002054 <_printf_common+0x98>

080020a0 <_printf_i>:
 80020a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020a4:	7e0f      	ldrb	r7, [r1, #24]
 80020a6:	4691      	mov	r9, r2
 80020a8:	2f78      	cmp	r7, #120	@ 0x78
 80020aa:	4680      	mov	r8, r0
 80020ac:	460c      	mov	r4, r1
 80020ae:	469a      	mov	sl, r3
 80020b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80020b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80020b6:	d807      	bhi.n	80020c8 <_printf_i+0x28>
 80020b8:	2f62      	cmp	r7, #98	@ 0x62
 80020ba:	d80a      	bhi.n	80020d2 <_printf_i+0x32>
 80020bc:	2f00      	cmp	r7, #0
 80020be:	f000 80d3 	beq.w	8002268 <_printf_i+0x1c8>
 80020c2:	2f58      	cmp	r7, #88	@ 0x58
 80020c4:	f000 80ba 	beq.w	800223c <_printf_i+0x19c>
 80020c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80020cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80020d0:	e03a      	b.n	8002148 <_printf_i+0xa8>
 80020d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80020d6:	2b15      	cmp	r3, #21
 80020d8:	d8f6      	bhi.n	80020c8 <_printf_i+0x28>
 80020da:	a101      	add	r1, pc, #4	@ (adr r1, 80020e0 <_printf_i+0x40>)
 80020dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80020e0:	08002139 	.word	0x08002139
 80020e4:	0800214d 	.word	0x0800214d
 80020e8:	080020c9 	.word	0x080020c9
 80020ec:	080020c9 	.word	0x080020c9
 80020f0:	080020c9 	.word	0x080020c9
 80020f4:	080020c9 	.word	0x080020c9
 80020f8:	0800214d 	.word	0x0800214d
 80020fc:	080020c9 	.word	0x080020c9
 8002100:	080020c9 	.word	0x080020c9
 8002104:	080020c9 	.word	0x080020c9
 8002108:	080020c9 	.word	0x080020c9
 800210c:	0800224f 	.word	0x0800224f
 8002110:	08002177 	.word	0x08002177
 8002114:	08002209 	.word	0x08002209
 8002118:	080020c9 	.word	0x080020c9
 800211c:	080020c9 	.word	0x080020c9
 8002120:	08002271 	.word	0x08002271
 8002124:	080020c9 	.word	0x080020c9
 8002128:	08002177 	.word	0x08002177
 800212c:	080020c9 	.word	0x080020c9
 8002130:	080020c9 	.word	0x080020c9
 8002134:	08002211 	.word	0x08002211
 8002138:	6833      	ldr	r3, [r6, #0]
 800213a:	1d1a      	adds	r2, r3, #4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6032      	str	r2, [r6, #0]
 8002140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002144:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002148:	2301      	movs	r3, #1
 800214a:	e09e      	b.n	800228a <_printf_i+0x1ea>
 800214c:	6833      	ldr	r3, [r6, #0]
 800214e:	6820      	ldr	r0, [r4, #0]
 8002150:	1d19      	adds	r1, r3, #4
 8002152:	6031      	str	r1, [r6, #0]
 8002154:	0606      	lsls	r6, r0, #24
 8002156:	d501      	bpl.n	800215c <_printf_i+0xbc>
 8002158:	681d      	ldr	r5, [r3, #0]
 800215a:	e003      	b.n	8002164 <_printf_i+0xc4>
 800215c:	0645      	lsls	r5, r0, #25
 800215e:	d5fb      	bpl.n	8002158 <_printf_i+0xb8>
 8002160:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002164:	2d00      	cmp	r5, #0
 8002166:	da03      	bge.n	8002170 <_printf_i+0xd0>
 8002168:	232d      	movs	r3, #45	@ 0x2d
 800216a:	426d      	negs	r5, r5
 800216c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002170:	230a      	movs	r3, #10
 8002172:	4859      	ldr	r0, [pc, #356]	@ (80022d8 <_printf_i+0x238>)
 8002174:	e011      	b.n	800219a <_printf_i+0xfa>
 8002176:	6821      	ldr	r1, [r4, #0]
 8002178:	6833      	ldr	r3, [r6, #0]
 800217a:	0608      	lsls	r0, r1, #24
 800217c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002180:	d402      	bmi.n	8002188 <_printf_i+0xe8>
 8002182:	0649      	lsls	r1, r1, #25
 8002184:	bf48      	it	mi
 8002186:	b2ad      	uxthmi	r5, r5
 8002188:	2f6f      	cmp	r7, #111	@ 0x6f
 800218a:	6033      	str	r3, [r6, #0]
 800218c:	bf14      	ite	ne
 800218e:	230a      	movne	r3, #10
 8002190:	2308      	moveq	r3, #8
 8002192:	4851      	ldr	r0, [pc, #324]	@ (80022d8 <_printf_i+0x238>)
 8002194:	2100      	movs	r1, #0
 8002196:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800219a:	6866      	ldr	r6, [r4, #4]
 800219c:	2e00      	cmp	r6, #0
 800219e:	bfa8      	it	ge
 80021a0:	6821      	ldrge	r1, [r4, #0]
 80021a2:	60a6      	str	r6, [r4, #8]
 80021a4:	bfa4      	itt	ge
 80021a6:	f021 0104 	bicge.w	r1, r1, #4
 80021aa:	6021      	strge	r1, [r4, #0]
 80021ac:	b90d      	cbnz	r5, 80021b2 <_printf_i+0x112>
 80021ae:	2e00      	cmp	r6, #0
 80021b0:	d04b      	beq.n	800224a <_printf_i+0x1aa>
 80021b2:	4616      	mov	r6, r2
 80021b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80021b8:	fb03 5711 	mls	r7, r3, r1, r5
 80021bc:	5dc7      	ldrb	r7, [r0, r7]
 80021be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80021c2:	462f      	mov	r7, r5
 80021c4:	42bb      	cmp	r3, r7
 80021c6:	460d      	mov	r5, r1
 80021c8:	d9f4      	bls.n	80021b4 <_printf_i+0x114>
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d10b      	bne.n	80021e6 <_printf_i+0x146>
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	07df      	lsls	r7, r3, #31
 80021d2:	d508      	bpl.n	80021e6 <_printf_i+0x146>
 80021d4:	6923      	ldr	r3, [r4, #16]
 80021d6:	6861      	ldr	r1, [r4, #4]
 80021d8:	4299      	cmp	r1, r3
 80021da:	bfde      	ittt	le
 80021dc:	2330      	movle	r3, #48	@ 0x30
 80021de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80021e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80021e6:	1b92      	subs	r2, r2, r6
 80021e8:	6122      	str	r2, [r4, #16]
 80021ea:	464b      	mov	r3, r9
 80021ec:	4621      	mov	r1, r4
 80021ee:	4640      	mov	r0, r8
 80021f0:	f8cd a000 	str.w	sl, [sp]
 80021f4:	aa03      	add	r2, sp, #12
 80021f6:	f7ff fee1 	bl	8001fbc <_printf_common>
 80021fa:	3001      	adds	r0, #1
 80021fc:	d14a      	bne.n	8002294 <_printf_i+0x1f4>
 80021fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002202:	b004      	add	sp, #16
 8002204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	f043 0320 	orr.w	r3, r3, #32
 800220e:	6023      	str	r3, [r4, #0]
 8002210:	2778      	movs	r7, #120	@ 0x78
 8002212:	4832      	ldr	r0, [pc, #200]	@ (80022dc <_printf_i+0x23c>)
 8002214:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	6831      	ldr	r1, [r6, #0]
 800221c:	061f      	lsls	r7, r3, #24
 800221e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002222:	d402      	bmi.n	800222a <_printf_i+0x18a>
 8002224:	065f      	lsls	r7, r3, #25
 8002226:	bf48      	it	mi
 8002228:	b2ad      	uxthmi	r5, r5
 800222a:	6031      	str	r1, [r6, #0]
 800222c:	07d9      	lsls	r1, r3, #31
 800222e:	bf44      	itt	mi
 8002230:	f043 0320 	orrmi.w	r3, r3, #32
 8002234:	6023      	strmi	r3, [r4, #0]
 8002236:	b11d      	cbz	r5, 8002240 <_printf_i+0x1a0>
 8002238:	2310      	movs	r3, #16
 800223a:	e7ab      	b.n	8002194 <_printf_i+0xf4>
 800223c:	4826      	ldr	r0, [pc, #152]	@ (80022d8 <_printf_i+0x238>)
 800223e:	e7e9      	b.n	8002214 <_printf_i+0x174>
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	f023 0320 	bic.w	r3, r3, #32
 8002246:	6023      	str	r3, [r4, #0]
 8002248:	e7f6      	b.n	8002238 <_printf_i+0x198>
 800224a:	4616      	mov	r6, r2
 800224c:	e7bd      	b.n	80021ca <_printf_i+0x12a>
 800224e:	6833      	ldr	r3, [r6, #0]
 8002250:	6825      	ldr	r5, [r4, #0]
 8002252:	1d18      	adds	r0, r3, #4
 8002254:	6961      	ldr	r1, [r4, #20]
 8002256:	6030      	str	r0, [r6, #0]
 8002258:	062e      	lsls	r6, r5, #24
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	d501      	bpl.n	8002262 <_printf_i+0x1c2>
 800225e:	6019      	str	r1, [r3, #0]
 8002260:	e002      	b.n	8002268 <_printf_i+0x1c8>
 8002262:	0668      	lsls	r0, r5, #25
 8002264:	d5fb      	bpl.n	800225e <_printf_i+0x1be>
 8002266:	8019      	strh	r1, [r3, #0]
 8002268:	2300      	movs	r3, #0
 800226a:	4616      	mov	r6, r2
 800226c:	6123      	str	r3, [r4, #16]
 800226e:	e7bc      	b.n	80021ea <_printf_i+0x14a>
 8002270:	6833      	ldr	r3, [r6, #0]
 8002272:	2100      	movs	r1, #0
 8002274:	1d1a      	adds	r2, r3, #4
 8002276:	6032      	str	r2, [r6, #0]
 8002278:	681e      	ldr	r6, [r3, #0]
 800227a:	6862      	ldr	r2, [r4, #4]
 800227c:	4630      	mov	r0, r6
 800227e:	f000 f859 	bl	8002334 <memchr>
 8002282:	b108      	cbz	r0, 8002288 <_printf_i+0x1e8>
 8002284:	1b80      	subs	r0, r0, r6
 8002286:	6060      	str	r0, [r4, #4]
 8002288:	6863      	ldr	r3, [r4, #4]
 800228a:	6123      	str	r3, [r4, #16]
 800228c:	2300      	movs	r3, #0
 800228e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002292:	e7aa      	b.n	80021ea <_printf_i+0x14a>
 8002294:	4632      	mov	r2, r6
 8002296:	4649      	mov	r1, r9
 8002298:	4640      	mov	r0, r8
 800229a:	6923      	ldr	r3, [r4, #16]
 800229c:	47d0      	blx	sl
 800229e:	3001      	adds	r0, #1
 80022a0:	d0ad      	beq.n	80021fe <_printf_i+0x15e>
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	079b      	lsls	r3, r3, #30
 80022a6:	d413      	bmi.n	80022d0 <_printf_i+0x230>
 80022a8:	68e0      	ldr	r0, [r4, #12]
 80022aa:	9b03      	ldr	r3, [sp, #12]
 80022ac:	4298      	cmp	r0, r3
 80022ae:	bfb8      	it	lt
 80022b0:	4618      	movlt	r0, r3
 80022b2:	e7a6      	b.n	8002202 <_printf_i+0x162>
 80022b4:	2301      	movs	r3, #1
 80022b6:	4632      	mov	r2, r6
 80022b8:	4649      	mov	r1, r9
 80022ba:	4640      	mov	r0, r8
 80022bc:	47d0      	blx	sl
 80022be:	3001      	adds	r0, #1
 80022c0:	d09d      	beq.n	80021fe <_printf_i+0x15e>
 80022c2:	3501      	adds	r5, #1
 80022c4:	68e3      	ldr	r3, [r4, #12]
 80022c6:	9903      	ldr	r1, [sp, #12]
 80022c8:	1a5b      	subs	r3, r3, r1
 80022ca:	42ab      	cmp	r3, r5
 80022cc:	dcf2      	bgt.n	80022b4 <_printf_i+0x214>
 80022ce:	e7eb      	b.n	80022a8 <_printf_i+0x208>
 80022d0:	2500      	movs	r5, #0
 80022d2:	f104 0619 	add.w	r6, r4, #25
 80022d6:	e7f5      	b.n	80022c4 <_printf_i+0x224>
 80022d8:	08002443 	.word	0x08002443
 80022dc:	08002454 	.word	0x08002454

080022e0 <memmove>:
 80022e0:	4288      	cmp	r0, r1
 80022e2:	b510      	push	{r4, lr}
 80022e4:	eb01 0402 	add.w	r4, r1, r2
 80022e8:	d902      	bls.n	80022f0 <memmove+0x10>
 80022ea:	4284      	cmp	r4, r0
 80022ec:	4623      	mov	r3, r4
 80022ee:	d807      	bhi.n	8002300 <memmove+0x20>
 80022f0:	1e43      	subs	r3, r0, #1
 80022f2:	42a1      	cmp	r1, r4
 80022f4:	d008      	beq.n	8002308 <memmove+0x28>
 80022f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80022fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80022fe:	e7f8      	b.n	80022f2 <memmove+0x12>
 8002300:	4601      	mov	r1, r0
 8002302:	4402      	add	r2, r0
 8002304:	428a      	cmp	r2, r1
 8002306:	d100      	bne.n	800230a <memmove+0x2a>
 8002308:	bd10      	pop	{r4, pc}
 800230a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800230e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002312:	e7f7      	b.n	8002304 <memmove+0x24>

08002314 <_sbrk_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	2300      	movs	r3, #0
 8002318:	4d05      	ldr	r5, [pc, #20]	@ (8002330 <_sbrk_r+0x1c>)
 800231a:	4604      	mov	r4, r0
 800231c:	4608      	mov	r0, r1
 800231e:	602b      	str	r3, [r5, #0]
 8002320:	f7fe f8f2 	bl	8000508 <_sbrk>
 8002324:	1c43      	adds	r3, r0, #1
 8002326:	d102      	bne.n	800232e <_sbrk_r+0x1a>
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	b103      	cbz	r3, 800232e <_sbrk_r+0x1a>
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	bd38      	pop	{r3, r4, r5, pc}
 8002330:	2000020c 	.word	0x2000020c

08002334 <memchr>:
 8002334:	4603      	mov	r3, r0
 8002336:	b510      	push	{r4, lr}
 8002338:	b2c9      	uxtb	r1, r1
 800233a:	4402      	add	r2, r0
 800233c:	4293      	cmp	r3, r2
 800233e:	4618      	mov	r0, r3
 8002340:	d101      	bne.n	8002346 <memchr+0x12>
 8002342:	2000      	movs	r0, #0
 8002344:	e003      	b.n	800234e <memchr+0x1a>
 8002346:	7804      	ldrb	r4, [r0, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	428c      	cmp	r4, r1
 800234c:	d1f6      	bne.n	800233c <memchr+0x8>
 800234e:	bd10      	pop	{r4, pc}

08002350 <memcpy>:
 8002350:	440a      	add	r2, r1
 8002352:	4291      	cmp	r1, r2
 8002354:	f100 33ff 	add.w	r3, r0, #4294967295
 8002358:	d100      	bne.n	800235c <memcpy+0xc>
 800235a:	4770      	bx	lr
 800235c:	b510      	push	{r4, lr}
 800235e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002362:	4291      	cmp	r1, r2
 8002364:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002368:	d1f9      	bne.n	800235e <memcpy+0xe>
 800236a:	bd10      	pop	{r4, pc}

0800236c <_realloc_r>:
 800236c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002370:	4680      	mov	r8, r0
 8002372:	4615      	mov	r5, r2
 8002374:	460c      	mov	r4, r1
 8002376:	b921      	cbnz	r1, 8002382 <_realloc_r+0x16>
 8002378:	4611      	mov	r1, r2
 800237a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800237e:	f7ff bc39 	b.w	8001bf4 <_malloc_r>
 8002382:	b92a      	cbnz	r2, 8002390 <_realloc_r+0x24>
 8002384:	f7ff fbcc 	bl	8001b20 <_free_r>
 8002388:	2400      	movs	r4, #0
 800238a:	4620      	mov	r0, r4
 800238c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002390:	f000 f81a 	bl	80023c8 <_malloc_usable_size_r>
 8002394:	4285      	cmp	r5, r0
 8002396:	4606      	mov	r6, r0
 8002398:	d802      	bhi.n	80023a0 <_realloc_r+0x34>
 800239a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800239e:	d8f4      	bhi.n	800238a <_realloc_r+0x1e>
 80023a0:	4629      	mov	r1, r5
 80023a2:	4640      	mov	r0, r8
 80023a4:	f7ff fc26 	bl	8001bf4 <_malloc_r>
 80023a8:	4607      	mov	r7, r0
 80023aa:	2800      	cmp	r0, #0
 80023ac:	d0ec      	beq.n	8002388 <_realloc_r+0x1c>
 80023ae:	42b5      	cmp	r5, r6
 80023b0:	462a      	mov	r2, r5
 80023b2:	4621      	mov	r1, r4
 80023b4:	bf28      	it	cs
 80023b6:	4632      	movcs	r2, r6
 80023b8:	f7ff ffca 	bl	8002350 <memcpy>
 80023bc:	4621      	mov	r1, r4
 80023be:	4640      	mov	r0, r8
 80023c0:	f7ff fbae 	bl	8001b20 <_free_r>
 80023c4:	463c      	mov	r4, r7
 80023c6:	e7e0      	b.n	800238a <_realloc_r+0x1e>

080023c8 <_malloc_usable_size_r>:
 80023c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023cc:	1f18      	subs	r0, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bfbc      	itt	lt
 80023d2:	580b      	ldrlt	r3, [r1, r0]
 80023d4:	18c0      	addlt	r0, r0, r3
 80023d6:	4770      	bx	lr

080023d8 <_init>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	bf00      	nop
 80023dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023de:	bc08      	pop	{r3}
 80023e0:	469e      	mov	lr, r3
 80023e2:	4770      	bx	lr

080023e4 <_fini>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	bf00      	nop
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr
